{
  "files": {
    "stdinc.hpp": {
      "name": "stdinc.hpp",
      "entries": {
        "FourCC": {
          "doc": "Define a four character code as a Uint32.\n\n\\param A the first ASCII character.\n\\param B the second ASCII character.\n\\param C the third ASCII character.\n\\param D the fourth ASCII character.\n\\returns the four characters converted into a Uint32, one character\n         per-byte.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 330,
          "decl": 344,
          "end": 349,
          "name": "FourCC",
          "kind": "function",
          "parameters": [
            {
              "name": "a",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "c",
              "type": "Uint8"
            },
            {
              "name": "d",
              "type": "Uint8"
            }
          ],
          "type": "Uint32",
          "constexpr": true
        },
        "Sint8": {
          "doc": "A signed 8-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 411,
          "decl": 416,
          "end": 417,
          "name": "Sint8",
          "kind": "alias",
          "type": "Sint8"
        },
        "Uint8": {
          "doc": "An unsigned 8-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 420,
          "decl": 425,
          "end": 426,
          "name": "Uint8",
          "kind": "alias",
          "type": "Uint8"
        },
        "Sint16": {
          "doc": "A signed 16-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 429,
          "decl": 434,
          "end": 435,
          "name": "Sint16",
          "kind": "alias",
          "type": "Sint16"
        },
        "Uint16": {
          "doc": "An unsigned 16-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 438,
          "decl": 443,
          "end": 444,
          "name": "Uint16",
          "kind": "alias",
          "type": "Uint16"
        },
        "Sint32": {
          "doc": "A signed 32-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 447,
          "decl": 452,
          "end": 453,
          "name": "Sint32",
          "kind": "alias",
          "type": "Sint32"
        },
        "Uint32": {
          "doc": "An unsigned 32-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "begin": 456,
          "decl": 461,
          "end": 462,
          "name": "Uint32",
          "kind": "alias",
          "type": "Uint32"
        },
        "Sint64": {
          "doc": "A signed 64-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SINT64_C",
          "begin": 465,
          "decl": 472,
          "end": 473,
          "name": "Sint64",
          "kind": "alias",
          "type": "Sint64"
        },
        "Uint64": {
          "doc": "An unsigned 64-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_UINT64_C",
          "begin": 476,
          "decl": 483,
          "end": 484,
          "name": "Uint64",
          "kind": "alias",
          "type": "Uint64"
        },
        "Time": {
          "doc": "SDL times are signed, 64-bit integers representing nanoseconds since the\nUnix epoch (Jan 1, 1970).\n\nThey can be converted between POSIX time_t values with SDL_NS_TO_SECONDS()\nand SDL_SECONDS_TO_NS(), and between Windows FILETIME values with\nSDL_TimeToWindows() and SDL_TimeFromWindows().\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_MAX_SINT64\n\\sa SDL_MIN_SINT64",
          "begin": 487,
          "decl": 500,
          "end": 501,
          "name": "Time",
          "kind": "alias",
          "type": "SDL_Time"
        },
        "malloc": {
          "doc": "Allocate uninitialized memory.\n\nThe allocated memory returned by this function must be freed with\nSDL_free().\n\nIf `size` is 0, it will be set to 1.\n\nIf you want to allocate memory aligned to a specific alignment, consider\nusing SDL_aligned_alloc().\n\n\\param size the size to allocate.\n\\returns a pointer to the allocated memory, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_calloc\n\\sa SDL_realloc\n\\sa SDL_aligned_alloc",
          "begin": 1294,
          "decl": 1317,
          "end": 1318,
          "name": "malloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "calloc": {
          "doc": "Allocate a zero-initialized array.\n\nThe memory returned by this function must be freed with SDL_free().\n\nIf either of `nmemb` or `size` is 0, they will both be set to 1.\n\n\\param nmemb the number of elements in the array.\n\\param size the size of each element of the array.\n\\returns a pointer to the allocated array, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_malloc\n\\sa SDL_realloc",
          "begin": 1319,
          "decl": 1338,
          "end": 1339,
          "name": "calloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "realloc": {
          "doc": "Change the size of allocated memory.\n\nThe memory returned by this function must be freed with SDL_free().\n\nIf `size` is 0, it will be set to 1. Note that this is unlike some other C\nruntime `realloc` implementations, which may treat `realloc(mem, 0)` the\nsame way as `free(mem)`.\n\nIf `mem` is NULL, the behavior of this function is equivalent to\nSDL_malloc(). Otherwise, the function can have one of three possible\noutcomes:\n\n- If it returns the same pointer as `mem`, it means that `mem` was resized\n  in place without freeing.\n- If it returns a different non-NULL pointer, it means that `mem` was freed\n  and cannot be dereferenced anymore.\n- If it returns NULL (indicating failure), then `mem` will remain valid and\n  must still be freed with SDL_free().\n\n\\param mem a pointer to allocated memory to reallocate, or NULL.\n\\param size the new size of the memory.\n\\returns a pointer to the newly allocated memory, or NULL if allocation\n         failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_malloc\n\\sa SDL_calloc",
          "begin": 1340,
          "decl": 1373,
          "end": 1374,
          "name": "realloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "free": {
          "doc": "Free allocated memory.\n\nThe pointer is no longer valid after this call and cannot be dereferenced\nanymore.\n\nIf `mem` is NULL, this function does nothing.\n\n\\param mem a pointer to allocated memory, or NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_malloc\n\\sa SDL_calloc\n\\sa SDL_realloc",
          "begin": 1375,
          "decl": 1393,
          "end": 1394,
          "name": "free",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "malloc_func": {
          "doc": "A callback used to implement SDL_malloc().\n\nSDL will always ensure that the passed `size` is greater than 0.\n\n\\param size the size to allocate.\n\\returns a pointer to the allocated memory, or NULL if allocation failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_malloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "begin": 1395,
          "decl": 1412,
          "end": 1413,
          "name": "malloc_func",
          "kind": "alias",
          "type": "SDL_malloc_func"
        },
        "calloc_func": {
          "doc": "A callback used to implement SDL_calloc().\n\nSDL will always ensure that the passed `nmemb` and `size` are both greater\nthan 0.\n\n\\param nmemb the number of elements in the array.\n\\param size the size of each element of the array.\n\\returns a pointer to the allocated array, or NULL if allocation failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_calloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "begin": 1414,
          "decl": 1433,
          "end": 1434,
          "name": "calloc_func",
          "kind": "alias",
          "type": "SDL_calloc_func"
        },
        "realloc_func": {
          "doc": "A callback used to implement SDL_realloc().\n\nSDL will always ensure that the passed `size` is greater than 0.\n\n\\param mem a pointer to allocated memory to reallocate, or NULL.\n\\param size the new size of the memory.\n\\returns a pointer to the newly allocated memory, or NULL if allocation\n         failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_realloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "begin": 1435,
          "decl": 1454,
          "end": 1455,
          "name": "realloc_func",
          "kind": "alias",
          "type": "SDL_realloc_func"
        },
        "free_func": {
          "doc": "A callback used to implement SDL_free().\n\nSDL will always ensure that the passed `mem` is a non-NULL pointer.\n\n\\param mem a pointer to allocated memory.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "begin": 1456,
          "decl": 1472,
          "end": 1473,
          "name": "free_func",
          "kind": "alias",
          "type": "SDL_free_func"
        },
        "GetOriginalMemoryFunctions": {
          "doc": "Get the original set of SDL memory functions.\n\nThis is what SDL_malloc and friends will use by default, if there has been\nno call to SDL_SetMemoryFunctions. This is not necessarily using the C\nruntime's `malloc` functions behind the scenes! Different platforms and\nbuild configurations might do any number of unexpected things.\n\n\\param malloc_func filled with malloc function.\n\\param calloc_func filled with calloc function.\n\\param realloc_func filled with realloc function.\n\\param free_func filled with free function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 1474,
          "decl": 1491,
          "end": 1495,
          "name": "GetOriginalMemoryFunctions",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "malloc_func *"
            },
            {
              "name": "calloc_func",
              "type": "calloc_func *"
            },
            {
              "name": "realloc_func",
              "type": "realloc_func *"
            },
            ");"
          ]
        },
        "GetMemoryFunctions": {
          "doc": "Get the current set of SDL memory functions.\n\n\\param malloc_func filled with malloc function.\n\\param calloc_func filled with calloc function.\n\\param realloc_func filled with realloc function.\n\\param free_func filled with free function.\n\n\\threadsafety This does not hold a lock, so do not call this in the\n              unlikely event of a background thread calling\n              SDL_SetMemoryFunctions simultaneously.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetMemoryFunctions\n\\sa SDL_GetOriginalMemoryFunctions",
          "begin": 1496,
          "decl": 1513,
          "end": 1517,
          "name": "GetMemoryFunctions",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "malloc_func *"
            },
            {
              "name": "calloc_func",
              "type": "calloc_func *"
            },
            {
              "name": "realloc_func",
              "type": "realloc_func *"
            },
            ");"
          ]
        },
        "SetMemoryFunctions": {
          "doc": "Replace SDL's memory allocation functions with a custom set.\n\nIt is not safe to call this function once any allocations have been made,\nas future calls to SDL_free will use the new allocator, even if they came\nfrom an SDL_malloc made with the old one!\n\nIf used, usually this needs to be the first call made into the SDL library,\nif not the very first thing done at program startup time.\n\n\\param malloc_func custom malloc function.\n\\param calloc_func custom calloc function.\n\\param realloc_func custom realloc function.\n\\param free_func custom free function.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, but one\n              should not replace the memory functions once any allocations\n              are made!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_GetOriginalMemoryFunctions",
          "begin": 1518,
          "decl": 1544,
          "end": 1548,
          "name": "SetMemoryFunctions",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "malloc_func"
            },
            {
              "name": "calloc_func",
              "type": "calloc_func"
            },
            {
              "name": "realloc_func",
              "type": "realloc_func"
            },
            ");"
          ]
        },
        "aligned_alloc": {
          "doc": "Allocate memory aligned to a specific alignment.\n\nThe memory returned by this function must be freed with SDL_aligned_free(),\n_not_ SDL_free().\n\nIf `alignment` is less than the size of `void *`, it will be increased to\nmatch that.\n\nThe returned memory address will be a multiple of the alignment value, and\nthe size of the memory allocated will be a multiple of the alignment value.\n\n\\param alignment the alignment of the memory.\n\\param size the size to allocate.\n\\returns a pointer to the aligned memory, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_free",
          "begin": 1549,
          "decl": 1571,
          "end": 1572,
          "name": "aligned_alloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "alignment",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "aligned_free": {
          "doc": "Free memory allocated by SDL_aligned_alloc().\n\nThe pointer is no longer valid after this call and cannot be dereferenced\nanymore.\n\nIf `mem` is NULL, this function does nothing.\n\n\\param mem a pointer previously returned by SDL_aligned_alloc(), or NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_alloc",
          "begin": 1573,
          "decl": 1589,
          "end": 1590,
          "name": "aligned_free",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "GetNumAllocations": {
          "doc": "Get the number of outstanding (unfreed) allocations.\n\n\\returns the number of allocations or -1 if allocation counting is\n         disabled.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 1591,
          "decl": 1601,
          "end": 1602,
          "name": "GetNumAllocations",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "Environment": {
          "doc": "A thread-safe set of environment variables\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable\n\\sa SDL_DestroyEnvironment",
          "begin": 1603,
          "decl": 1616,
          "end": 1617,
          "name": "Environment",
          "kind": "alias",
          "type": "SDL_Environment"
        },
        "GetEnvironment": {
          "doc": "Get the process environment.\n\nThis is initialized at application start and is not affected by setenv()\nand unsetenv() calls after that point. Use SDL_SetEnvironmentVariable() and\nSDL_UnsetEnvironmentVariable() if you want to modify this environment, or\nSDL_setenv_unsafe() or SDL_unsetenv_unsafe() if you want changes to persist\nin the C runtime environment after SDL_Quit().\n\n\\returns a pointer to the environment for the process or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "begin": 1618,
          "decl": 1639,
          "end": 1640,
          "name": "GetEnvironment",
          "kind": "function",
          "type": "Environment *",
          "parameters": []
        },
        "CreateEnvironment": {
          "doc": "Create a set of environment variables\n\n\\param populated true to initialize it from the C runtime environment,\n                 false to create an empty environment.\n\\returns a pointer to the new environment or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety If `populated` is false, it is safe to call this function\n              from any thread, otherwise it is safe if no other threads are\n              calling setenv() or unsetenv()\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable\n\\sa SDL_DestroyEnvironment",
          "begin": 1641,
          "decl": 1661,
          "end": 1662,
          "name": "CreateEnvironment",
          "kind": "function",
          "type": "Environment *",
          "parameters": [
            {
              "name": "populated",
              "type": "bool"
            }
          ]
        },
        "GetEnvironmentVariable": {
          "doc": "Get the value of a variable in the environment.\n\n\\param env the environment to query.\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "begin": 1663,
          "decl": 1681,
          "end": 1682,
          "name": "GetEnvironmentVariable",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "env",
              "type": "Environment *"
            },
            {
              "name": "name",
              "type": "StringParam"
            }
          ]
        },
        "GetEnvironmentVariables": {
          "doc": "Get all variables in the environment.\n\n\\param env the environment to query.\n\\returns a NULL terminated array of pointers to environment variables in\n         the form \"variable=value\" or NULL on failure; call SDL_GetError()\n         for more information. This is a single allocation that should be\n         freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "begin": 1683,
          "decl": 1702,
          "end": 1703,
          "name": "GetEnvironmentVariables",
          "kind": "function",
          "type": "char **",
          "parameters": [
            {
              "name": "env",
              "type": "Environment *"
            }
          ]
        },
        "SetEnvironmentVariable": {
          "doc": "Set the value of a variable in the environment.\n\n\\param env the environment to modify.\n\\param name the name of the variable to set.\n\\param value the value of the variable to set.\n\\param overwrite true to overwrite the variable if it exists, false to\n                 return success without setting the variable if it already\n                 exists.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_UnsetEnvironmentVariable",
          "begin": 1704,
          "decl": 1726,
          "end": 1727,
          "name": "SetEnvironmentVariable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "env",
              "type": "Environment *"
            },
            {
              "name": "name",
              "type": "StringParam"
            },
            {
              "name": "value",
              "type": "StringParam"
            },
            {
              "name": "overwrite",
              "type": "bool"
            }
          ]
        },
        "UnsetEnvironmentVariable": {
          "doc": "Clear a variable from the environment.\n\n\\param env the environment to modify.\n\\param name the name of the variable to unset.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "begin": 1728,
          "decl": 1747,
          "end": 1748,
          "name": "UnsetEnvironmentVariable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "env",
              "type": "Environment *"
            },
            {
              "name": "name",
              "type": "StringParam"
            }
          ]
        },
        "DestroyEnvironment": {
          "doc": "Destroy a set of environment variables.\n\n\\param env the environment to destroy.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the environment is no longer in use.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateEnvironment",
          "begin": 1749,
          "decl": 1761,
          "end": 1762,
          "name": "DestroyEnvironment",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "env",
              "type": "Environment *"
            }
          ]
        },
        "getenv": {
          "doc": "Get the value of a variable in the environment.\n\nThis function uses SDL's cached copy of the environment and is thread-safe.\n\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 1763,
          "decl": 1776,
          "end": 1777,
          "name": "getenv",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "StringParam"
            }
          ]
        },
        "getenv_unsafe": {
          "doc": "Get the value of a variable in the environment.\n\nThis function bypasses SDL's cached copy of the environment and is not\nthread-safe.\n\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety This function is not thread safe, consider using SDL_getenv()\n              instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_getenv",
          "begin": 1778,
          "decl": 1795,
          "end": 1796,
          "name": "getenv_unsafe",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "StringParam"
            }
          ]
        },
        "setenv_unsafe": {
          "doc": "Set the value of a variable in the environment.\n\n\\param name the name of the variable to set.\n\\param value the value of the variable to set.\n\\param overwrite 1 to overwrite the variable if it exists, 0 to return\n                 success without setting the variable if it already exists.\n\\returns 0 on success, -1 on error.\n\n\\threadsafety This function is not thread safe, consider using\n              SDL_SetEnvironmentVariable() instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetEnvironmentVariable",
          "begin": 1797,
          "decl": 1813,
          "end": 1814,
          "name": "setenv_unsafe",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "name",
              "type": "StringParam"
            },
            {
              "name": "value",
              "type": "StringParam"
            },
            {
              "name": "overwrite",
              "type": "int"
            }
          ]
        },
        "unsetenv_unsafe": {
          "doc": "Clear a variable from the environment.\n\n\\param name the name of the variable to unset.\n\\returns 0 on success, -1 on error.\n\n\\threadsafety This function is not thread safe, consider using\n              SDL_UnsetEnvironmentVariable() instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UnsetEnvironmentVariable",
          "begin": 1815,
          "decl": 1828,
          "end": 1829,
          "name": "unsetenv_unsafe",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "name",
              "type": "StringParam"
            }
          ]
        },
        "CompareCallback": {
          "doc": "A callback used with SDL sorting and binary search functions.\n\n\\param a a pointer to the first element being compared.\n\\param b a pointer to the second element being compared.\n\\returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted\n         before `a`, 0 if they are equal. If two elements are equal, their\n         order in the sorted array is undefined.\n\n\\since This callback is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort",
          "begin": 1830,
          "decl": 1844,
          "end": 1845,
          "name": "CompareCallback",
          "kind": "alias",
          "type": "SDL_CompareCallback"
        },
        "qsort": {
          "doc": "Sort an array.\n\nFor example:\n\n```c\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort_r",
          "begin": 1846,
          "decl": 1890,
          "end": 1891,
          "name": "qsort",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "base",
              "type": "void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "CompareCallback"
            }
          ]
        },
        "bsearch": {
          "doc": "Perform a binary search on a previously sorted array.\n\nFor example:\n\n```c\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch(&key, values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n\\param key a pointer to a key equal to the element being searched for.\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\returns a pointer to the matching element in the array, or NULL if not\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch_r\n\\sa SDL_qsort",
          "begin": 1892,
          "decl": 1940,
          "end": 1941,
          "name": "bsearch",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "key",
              "type": "const void *"
            },
            {
              "name": "base",
              "type": "const void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "CompareCallback"
            }
          ]
        },
        "CompareCallback_r": {
          "doc": "A callback used with SDL sorting and binary search functions.\n\n\\param userdata the `userdata` pointer passed to the sort function.\n\\param a a pointer to the first element being compared.\n\\param b a pointer to the second element being compared.\n\\returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted\n         before `a`, 0 if they are equal. If two elements are equal, their\n         order in the sorted array is undefined.\n\n\\since This callback is available since SDL 3.2.0.\n\n\\sa SDL_qsort_r\n\\sa SDL_bsearch_r",
          "begin": 1942,
          "decl": 1957,
          "end": 1958,
          "name": "CompareCallback_r",
          "kind": "alias",
          "type": "SDL_CompareCallback_r"
        },
        "qsort_r": {
          "doc": "Sort an array, passing a userdata pointer to the compare function.\n\nFor example:\n\n```c\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\param userdata a pointer to pass to the compare function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch_r\n\\sa SDL_qsort",
          "begin": 1959,
          "decl": 2010,
          "end": 2011,
          "name": "qsort_r",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "base",
              "type": "void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "CompareCallback_r"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "bsearch_r": {
          "doc": "Perform a binary search on a previously sorted array, passing a userdata\npointer to the compare function.\n\nFor example:\n\n```c\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch_r(&key, values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n\\param key a pointer to a key equal to the element being searched for.\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\param userdata a pointer to pass to the compare function.\n\\returns a pointer to the matching element in the array, or NULL if not\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort_r",
          "begin": 2012,
          "decl": 2068,
          "end": 2069,
          "name": "bsearch_r",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "key",
              "type": "const void *"
            },
            {
              "name": "base",
              "type": "const void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "CompareCallback_r"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "abs": {
          "doc": "Compute the absolute value of `x`.\n\n\\param x an integer value.\n\\returns the absolute value of x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2070,
          "decl": 2080,
          "end": 2081,
          "name": "abs",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isalpha": {
          "doc": "Query if a character is alphabetic (a letter).\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\nfor English 'a-z' and 'A-Z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2142,
          "decl": 2155,
          "end": 2156,
          "name": "isalpha",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isalnum": {
          "doc": "Query if a character is alphabetic (a letter) or a number.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\nfor English 'a-z', 'A-Z', and '0-9' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2157,
          "decl": 2170,
          "end": 2171,
          "name": "isalnum",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isblank": {
          "doc": "Report if a character is blank (a space or tab).\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n0x20 (space) or 0x9 (tab) as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2172,
          "decl": 2185,
          "end": 2186,
          "name": "isblank",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "iscntrl": {
          "doc": "Report if a character is a control character.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n0 through 0x1F, and 0x7F, as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2187,
          "decl": 2200,
          "end": 2201,
          "name": "iscntrl",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isdigit": {
          "doc": "Report if a character is a numeric digit.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'0' (0x30) through '9' (0x39), as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2202,
          "decl": 2215,
          "end": 2216,
          "name": "isdigit",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isxdigit": {
          "doc": "Report if a character is a hexadecimal digit.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'A' through 'F', 'a' through 'f', and '0' through '9', as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2217,
          "decl": 2230,
          "end": 2231,
          "name": "isxdigit",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "ispunct": {
          "doc": "Report if a character is a punctuation mark.\n\n**WARNING**: Regardless of system locale, this is equivalent to\n`((SDL_isgraph(x)) && (!SDL_isalnum(x)))`.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isgraph\n\\sa SDL_isalnum",
          "begin": 2232,
          "decl": 2248,
          "end": 2249,
          "name": "ispunct",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isspace": {
          "doc": "Report if a character is whitespace.\n\n**WARNING**: Regardless of system locale, this will only treat the\nfollowing ASCII values as true:\n\n- space (0x20)\n- tab (0x09)\n- newline (0x0A)\n- vertical tab (0x0B)\n- form feed (0x0C)\n- return (0x0D)\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2250,
          "decl": 2270,
          "end": 2271,
          "name": "isspace",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isupper": {
          "doc": "Report if a character is upper case.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'A' through 'Z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2272,
          "decl": 2285,
          "end": 2286,
          "name": "isupper",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "islower": {
          "doc": "Report if a character is lower case.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'a' through 'z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2287,
          "decl": 2300,
          "end": 2301,
          "name": "islower",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isprint": {
          "doc": "Report if a character is \"printable\".\n\nBe advised that \"printable\" has a definition that goes back to text\nterminals from the dawn of computing, making this a sort of special case\nfunction that is not suitable for Unicode (or most any) text management.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n' ' (0x20) through '~' (0x7E) as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2302,
          "decl": 2319,
          "end": 2320,
          "name": "isprint",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "isgraph": {
          "doc": "Report if a character is any \"printable\" except space.\n\nBe advised that \"printable\" has a definition that goes back to text\nterminals from the dawn of computing, making this a sort of special case\nfunction that is not suitable for Unicode (or most any) text management.\n\n**WARNING**: Regardless of system locale, this is equivalent to\n`(SDL_isprint(x)) && ((x) != ' ')`.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isprint",
          "begin": 2321,
          "decl": 2340,
          "end": 2341,
          "name": "isgraph",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "toupper": {
          "doc": "Convert low-ASCII English letters to uppercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'a' through 'z' to uppercase.\n\nThis function returns the uppercase equivalent of `x`. If a character\ncannot be converted, or is already uppercase, this function returns `x`.\n\n\\param x character value to check.\n\\returns capitalized version of x, or x if no conversion available.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2342,
          "decl": 2358,
          "end": 2359,
          "name": "toupper",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "tolower": {
          "doc": "Convert low-ASCII English letters to lowercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to lowercase.\n\nThis function returns the lowercase equivalent of `x`. If a character\ncannot be converted, or is already lowercase, this function returns `x`.\n\n\\param x character value to check.\n\\returns lowercase version of x, or x if no conversion available.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2360,
          "decl": 2376,
          "end": 2377,
          "name": "tolower",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "crc16": {
          "doc": "Calculate a CRC-16 value.\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check\n\nThis function can be called multiple times, to stream data to be\nchecksummed in blocks. Each call must provide the previous CRC-16 return\nvalue to be updated with the next block. The first call to this function\nfor a set of blocks should pass in a zero CRC value.\n\n\\param crc the current checksum for this data set, or 0 for a new data set.\n\\param data a new block of data to add to the checksum.\n\\param len the size, in bytes, of the new block of data.\n\\returns a CRC-16 checksum value of all blocks in the data set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2378,
          "decl": 2397,
          "end": 2398,
          "name": "crc16",
          "kind": "function",
          "type": "Uint16",
          "parameters": [
            {
              "name": "crc",
              "type": "Uint16"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "crc32": {
          "doc": "Calculate a CRC-32 value.\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check\n\nThis function can be called multiple times, to stream data to be\nchecksummed in blocks. Each call must provide the previous CRC-32 return\nvalue to be updated with the next block. The first call to this function\nfor a set of blocks should pass in a zero CRC value.\n\n\\param crc the current checksum for this data set, or 0 for a new data set.\n\\param data a new block of data to add to the checksum.\n\\param len the size, in bytes, of the new block of data.\n\\returns a CRC-32 checksum value of all blocks in the data set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2399,
          "decl": 2418,
          "end": 2419,
          "name": "crc32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "crc",
              "type": "Uint32"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "murmur3_32": {
          "doc": "Calculate a 32-bit MurmurHash3 value for a block of data.\n\nhttps://en.wikipedia.org/wiki/MurmurHash\n\nA seed may be specified, which changes the final results consistently, but\nthis does not work like SDL_crc16 and SDL_crc32: you can't feed a previous\nresult from this function back into itself as the next seed value to\ncalculate a hash in chunks; it won't produce the same hash as it would if\nthe same data was provided in a single call.\n\nIf you aren't sure what to provide for a seed, zero is fine. Murmur3 is not\ncryptographically secure, so it shouldn't be used for hashing top-secret\ndata.\n\n\\param data the data to be hashed.\n\\param len the size of data, in bytes.\n\\param seed a value that alters the final hash value.\n\\returns a Murmur3 32-bit hash value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2420,
          "decl": 2444,
          "end": 2445,
          "name": "murmur3_32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            },
            {
              "name": "seed",
              "type": "Uint32"
            }
          ]
        },
        "memcpy": {
          "doc": "Copy non-overlapping memory.\n\nThe memory regions must not overlap. If they do, use SDL_memmove() instead.\n\n\\param dst The destination memory region. Must not be NULL, and must not\n           overlap with `src`.\n\\param src The source memory region. Must not be NULL, and must not overlap\n           with `dst`.\n\\param len The length in bytes of both `dst` and `src`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_memmove",
          "begin": 2446,
          "decl": 2464,
          "end": 2465,
          "name": "memcpy",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "memmove": {
          "doc": "Copy memory ranges that might overlap.\n\nIt is okay for the memory regions to overlap. If you are confident that the\nregions never overlap, using SDL_memcpy() may improve performance.\n\n\\param dst The destination memory region. Must not be NULL.\n\\param src The source memory region. Must not be NULL.\n\\param len The length in bytes of both `dst` and `src`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_memcpy",
          "begin": 2503,
          "decl": 2520,
          "end": 2521,
          "name": "memmove",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "memset": {
          "doc": "Initialize all bytes of buffer of memory to a specific value.\n\nThis function will set `len` bytes, pointed to by `dst`, to the value\nspecified in `c`.\n\nDespite `c` being an `int` instead of a `char`, this only operates on\nbytes; `c` must be a value between 0 and 255, inclusive.\n\n\\param dst the destination memory region. Must not be NULL.\n\\param c the byte value to set.\n\\param len the length, in bytes, to set in `dst`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2530,
          "decl": 2548,
          "end": 2549,
          "name": "memset",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "c",
              "type": "int"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "memset4": {
          "doc": "Initialize all 32-bit words of buffer of memory to a specific value.\n\nThis function will set a buffer of `dwords` Uint32 values, pointed to by\n`dst`, to the value specified in `val`.\n\nUnlike SDL_memset, this sets 32-bit values, not bytes, so it's not limited\nto a range of 0-255.\n\n\\param dst the destination memory region. Must not be NULL.\n\\param val the Uint32 value to set.\n\\param dwords the number of Uint32 values to set in `dst`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2550,
          "decl": 2568,
          "end": 2569,
          "name": "memset4",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "val",
              "type": "Uint32"
            },
            {
              "name": "dwords",
              "type": "size_t"
            }
          ]
        },
        "memcmp": {
          "doc": "Compare two buffers of memory.\n\n\\param s1 the first buffer to compare. NULL is not permitted!\n\\param s2 the second buffer to compare. NULL is not permitted!\n\\param len the number of bytes to compare between the buffers.\n\\returns less than zero if s1 is \"less than\" s2, greater than zero if s1 is\n         \"greater than\" s2, and zero if the buffers match exactly for `len`\n         bytes.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2636,
          "decl": 2650,
          "end": 2651,
          "name": "memcmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "s1",
              "type": "const void *"
            },
            {
              "name": "s2",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "wcslen": {
          "doc": "This works exactly like wcslen() but doesn't require access to a C runtime.\n\nCounts the number of wchar_t values in `wstr`, excluding the null\nterminator.\n\nLike SDL_strlen only counts bytes and not codepoints in a UTF-8 string,\nthis counts wchar_t values in a string, even if the string's encoding is of\nvariable width, like UTF-16.\n\nAlso be aware that wchar_t is different sizes on different platforms (4\nbytes on Linux, 2 on Windows, etc).\n\n\\param wstr The null-terminated wide string to read. Must not be NULL.\n\\returns the length (in wchar_t values, excluding the null terminator) of\n         `wstr`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcsnlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "begin": 2652,
          "decl": 2677,
          "end": 2678,
          "name": "wcslen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            }
          ]
        },
        "wcsnlen": {
          "doc": "This works exactly like wcsnlen() but doesn't require access to a C\nruntime.\n\nCounts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the\nnull terminator.\n\nLike SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,\nthis counts wchar_t values in a string, even if the string's encoding is of\nvariable width, like UTF-16.\n\nAlso be aware that wchar_t is different sizes on different platforms (4\nbytes on Linux, 2 on Windows, etc).\n\nAlso, `maxlen` is a count of wide characters, not bytes!\n\n\\param wstr The null-terminated wide string to read. Must not be NULL.\n\\param maxlen The maximum amount of wide characters to count.\n\\returns the length (in wide characters, excluding the null terminator) of\n         `wstr` but never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "begin": 2679,
          "decl": 2708,
          "end": 2709,
          "name": "wcsnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "wcslcpy": {
          "doc": "Copy a wide string.\n\nThis function copies `maxlen` - 1 wide characters from `src` to `dst`, then\nappends a null terminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` is 0, no wide characters are copied and no null terminator is\nwritten.\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated wide string to copy. Must not be NULL, and\n           must not overlap with `dst`.\n\\param maxlen The length (in wide characters) of the destination buffer.\n\\returns the length (in wide characters, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslcat",
          "begin": 2710,
          "decl": 2735,
          "end": 2736,
          "name": "wcslcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "wchar_t *"
            },
            {
              "name": "src",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "wcslcat": {
          "doc": "Concatenate wide strings.\n\nThis function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters\nfrom `src` to the end of the wide string in `dst`, then appends a null\nterminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is\nunmodified.\n\n\\param dst The destination buffer already containing the first\n           null-terminated wide string. Must not be NULL and must not\n           overlap with `src`.\n\\param src The second null-terminated wide string. Must not be NULL, and\n           must not overlap with `dst`.\n\\param maxlen The length (in wide characters) of the destination buffer.\n\\returns the length (in wide characters, excluding the null terminator) of\n         the string in `dst` plus the length of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslcpy",
          "begin": 2737,
          "decl": 2764,
          "end": 2765,
          "name": "wcslcat",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "wchar_t *"
            },
            {
              "name": "src",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "wcsdup": {
          "doc": "Allocate a copy of a wide string.\n\nThis allocates enough space for a null-terminated copy of `wstr`, using\nSDL_malloc, and then makes a copy of the string into this space.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param wstr the string to copy.\n\\returns a pointer to the newly-allocated wide string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2766,
          "decl": 2782,
          "end": 2783,
          "name": "wcsdup",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            }
          ]
        },
        "wcsstr": {
          "doc": "Search a wide string for the first instance of a specific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string.\n\nNote that this looks for strings of _wide characters_, not _codepoints_, so\nit's legal to search for malformed and incomplete UTF-16 sequences.\n\n\\param haystack the wide string to search. Must not be NULL.\n\\param needle the wide string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2784,
          "decl": 2802,
          "end": 2803,
          "name": "wcsstr",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const wchar_t *"
            },
            {
              "name": "needle",
              "type": "const wchar_t *"
            }
          ]
        },
        "wcsnstr": {
          "doc": "Search a wide string, up to n wide chars, for the first instance of a\nspecific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nvalue to end the string, or `maxlen` wide character have been examined. It\nis possible to use this function on a wide string without a null\nterminator.\n\nNote that this looks for strings of _wide characters_, not _codepoints_, so\nit's legal to search for malformed and incomplete UTF-16 sequences.\n\n\\param haystack the wide string to search. Must not be NULL.\n\\param needle the wide string to search for. Must not be NULL.\n\\param maxlen the maximum number of wide characters to search in\n              `haystack`.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2804,
          "decl": 2827,
          "end": 2828,
          "name": "wcsnstr",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const wchar_t *"
            },
            {
              "name": "needle",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "wcscmp": {
          "doc": "Compare two null-terminated wide strings.\n\nThis only compares wchar_t values until it hits a null-terminating\ncharacter; it does not care if the string is well-formed UTF-16 (or UTF-32,\ndepending on your platform's wchar_t size), or uses valid Unicode values.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2829,
          "decl": 2846,
          "end": 2847,
          "name": "wcscmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            }
          ]
        },
        "wcsncmp": {
          "doc": "Compare two wide strings up to a number of wchar_t values.\n\nThis only compares wchar_t values; it does not care if the string is\nwell-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),\nor uses valid Unicode values.\n\nNote that while this function is intended to be used with UTF-16 (or\nUTF-32, depending on your platform's definition of wchar_t), it is\ncomparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies\na wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16\nsequence, it will only compare a portion of the final character.\n\n`maxlen` specifies a maximum number of wchar_t to compare; if the strings\nmatch to this number of wide chars (or both have matched to a\nnull-terminator character before this count), they will be considered\nequal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of wchar_t to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2848,
          "decl": 2877,
          "end": 2878,
          "name": "wcsncmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "wcscasecmp": {
          "doc": "Compare two null-terminated wide strings, case-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nDepending on your platform, \"wchar_t\" might be 2 bytes, and expected to be\nUTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\nhandles Unicode, it expects the string to be well-formed and not a\nnull-terminated string of arbitrary bytes. Characters that are not valid\nUTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2879,
          "decl": 2907,
          "end": 2908,
          "name": "wcscasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            }
          ]
        },
        "wcsncasecmp": {
          "doc": "Compare two wide strings, case-insensitively, up to a number of wchar_t.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nDepending on your platform, \"wchar_t\" might be 2 bytes, and expected to be\nUTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\nhandles Unicode, it expects the string to be well-formed and not a\nnull-terminated string of arbitrary bytes. Characters that are not valid\nUTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\nNote that while this function might deal with variable-sized characters,\n`maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a\nmulti-byte UTF-16 sequence, it may convert a portion of the final character\nto one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not\nto overflow a buffer.\n\n`maxlen` specifies a maximum number of wchar_t values to compare; if the\nstrings match to this number of wchar_t (or both have matched to a\nnull-terminator character before this number of bytes), they will be\nconsidered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of wchar_t values to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 2909,
          "decl": 2949,
          "end": 2950,
          "name": "wcsncasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "wcstol": {
          "doc": "Parse a `long` from a wide string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long`, the result is clamped to\nthe minimum and maximum representable `long` values.\n\n\\param str The null-terminated wide string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid wide character\n            (i.e. the next character after the parsed number) will be\n            written to this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strtol",
          "begin": 2951,
          "decl": 2976,
          "end": 2977,
          "name": "wcstol",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "str",
              "type": "const wchar_t *"
            },
            {
              "name": "endp",
              "type": "wchar_t **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "strlen": {
          "doc": "This works exactly like strlen() but doesn't require access to a C runtime.\n\nCounts the bytes in `str`, excluding the null terminator.\n\nIf you need the length of a UTF-8 string, consider using SDL_utf8strlen().\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the length (in bytes, excluding the null terminator) of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strnlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "begin": 2978,
          "decl": 2996,
          "end": 2997,
          "name": "strlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            }
          ]
        },
        "strnlen": {
          "doc": "This works exactly like strnlen() but doesn't require access to a C\nruntime.\n\nCounts up to a maximum of `maxlen` bytes in `str`, excluding the null\nterminator.\n\nIf you need the length of a UTF-8 string, consider using SDL_utf8strnlen().\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param maxlen The maximum amount of bytes to count.\n\\returns the length (in bytes, excluding the null terminator) of `src` but\n         never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "begin": 2998,
          "decl": 3020,
          "end": 3021,
          "name": "strnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "strlcpy": {
          "doc": "Copy a string.\n\nThis function copies up to `maxlen` - 1 characters from `src` to `dst`,\nthen appends a null terminator.\n\nIf `maxlen` is 0, no characters are copied and no null terminator is\nwritten.\n\nIf you want to copy an UTF-8 string but need to ensure that multi-byte\nsequences are not truncated, consider using SDL_utf8strlcpy().\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated string to copy. Must not be NULL, and must\n           not overlap with `dst`.\n\\param maxlen The length (in characters) of the destination buffer.\n\\returns the length (in characters, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcat\n\\sa SDL_utf8strlcpy",
          "begin": 3022,
          "decl": 3049,
          "end": 3050,
          "name": "strlcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "utf8strlcpy": {
          "doc": "Copy an UTF-8 string.\n\nThis function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while\nalso ensuring that the string written to `dst` does not end in a truncated\nmulti-byte sequence. Finally, it appends a null terminator.\n\n`src` and `dst` must not overlap.\n\nNote that unlike SDL_strlcpy(), this function returns the number of bytes\nwritten, not the length of `src`.\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated UTF-8 string to copy. Must not be NULL, and\n           must not overlap with `dst`.\n\\param dst_bytes The length (in bytes) of the destination buffer. Must not\n                 be 0.\n\\returns the number of bytes written, excluding the null terminator.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcpy",
          "begin": 3051,
          "decl": 3077,
          "end": 3078,
          "name": "utf8strlcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "StringParam"
            },
            {
              "name": "dst_bytes",
              "type": "size_t"
            }
          ]
        },
        "strlcat": {
          "doc": "Concatenate strings.\n\nThis function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from\n`src` to the end of the string in `dst`, then appends a null terminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is\nunmodified.\n\n\\param dst The destination buffer already containing the first\n           null-terminated string. Must not be NULL and must not overlap\n           with `src`.\n\\param src The second null-terminated string. Must not be NULL, and must\n           not overlap with `dst`.\n\\param maxlen The length (in characters) of the destination buffer.\n\\returns the length (in characters, excluding the null terminator) of the\n         string in `dst` plus the length of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcpy",
          "begin": 3079,
          "decl": 3105,
          "end": 3106,
          "name": "strlcat",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "strdup": {
          "doc": "Allocate a copy of a string.\n\nThis allocates enough space for a null-terminated copy of `str`, using\nSDL_malloc, and then makes a copy of the string into this space.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param str the string to copy.\n\\returns a pointer to the newly-allocated string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3107,
          "decl": 3123,
          "end": 3124,
          "name": "strdup",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            }
          ]
        },
        "strndup": {
          "doc": "Allocate a copy of a string, up to n characters.\n\nThis allocates enough space for a null-terminated copy of `str`, up to\n`maxlen` bytes, using SDL_malloc, and then makes a copy of the string into\nthis space.\n\nIf the string is longer than `maxlen` bytes, the returned string will be\n`maxlen` bytes long, plus a null-terminator character that isn't included\nin the count.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param str the string to copy.\n\\param maxlen the maximum length of the copied string, not counting the\n              null-terminator character.\n\\returns a pointer to the newly-allocated string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3125,
          "decl": 3148,
          "end": 3149,
          "name": "strndup",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "strrev": {
          "doc": "Reverse a string's contents.\n\nThis reverses a null-terminated string in-place. Only the content of the\nstring is reversed; the null-terminator character remains at the end of the\nreversed string.\n\n**WARNING**: This function reverses the _bytes_ of the string, not the\ncodepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this\nwill ruin the string data. You should only use this function on strings\nthat are completely comprised of low ASCII characters.\n\n\\param str the string to reverse.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3150,
          "decl": 3169,
          "end": 3170,
          "name": "strrev",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "strupr": {
          "doc": "Convert a string to uppercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to uppercase.\n\nThis function operates on a null-terminated string of bytes--even if it is\nmalformed UTF-8!--and converts ASCII characters 'a' through 'z' to their\nuppercase equivalents in-place, returning the original `str` pointer.\n\n\\param str the string to convert in-place. Can not be NULL.\n\\returns the `str` pointer passed into this function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlwr",
          "begin": 3171,
          "decl": 3190,
          "end": 3191,
          "name": "strupr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "strlwr": {
          "doc": "Convert a string to lowercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to lowercase.\n\nThis function operates on a null-terminated string of bytes--even if it is\nmalformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their\nlowercase equivalents in-place, returning the original `str` pointer.\n\n\\param str the string to convert in-place. Can not be NULL.\n\\returns the `str` pointer passed into this function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strupr",
          "begin": 3192,
          "decl": 3211,
          "end": 3212,
          "name": "strlwr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "strchr": {
          "doc": "Search a string for the first instance of a specific byte.\n\nThe search ends once it finds the requested byte value, or a null\nterminator byte to end the string.\n\nNote that this looks for _bytes_, not _characters_, so you cannot match\nagainst a Unicode codepoint > 255, regardless of character encoding.\n\n\\param str the string to search. Must not be NULL.\n\\param c the byte value to search for.\n\\returns a pointer to the first instance of `c` in the string, or NULL if\n         not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3213,
          "decl": 3231,
          "end": 3232,
          "name": "strchr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "c",
              "type": "int"
            }
          ]
        },
        "strrchr": {
          "doc": "Search a string for the last instance of a specific byte.\n\nThe search must go until it finds a null terminator byte to end the string.\n\nNote that this looks for _bytes_, not _characters_, so you cannot match\nagainst a Unicode codepoint > 255, regardless of character encoding.\n\n\\param str the string to search. Must not be NULL.\n\\param c the byte value to search for.\n\\returns a pointer to the last instance of `c` in the string, or NULL if\n         not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3233,
          "decl": 3250,
          "end": 3251,
          "name": "strrchr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "c",
              "type": "int"
            }
          ]
        },
        "strstr": {
          "doc": "Search a string for the first instance of a specific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string.\n\nNote that this looks for strings of _bytes_, not _characters_, so it's\nlegal to search for malformed and incomplete UTF-8 sequences.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3252,
          "decl": 3270,
          "end": 3271,
          "name": "strstr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "StringParam"
            },
            {
              "name": "needle",
              "type": "StringParam"
            }
          ]
        },
        "strnstr": {
          "doc": "Search a string, up to n bytes, for the first instance of a specific\nsubstring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string, or `maxlen` bytes have been examined. It is\npossible to use this function on a string without a null terminator.\n\nNote that this looks for strings of _bytes_, not _characters_, so it's\nlegal to search for malformed and incomplete UTF-8 sequences.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\param maxlen the maximum number of bytes to search in `haystack`.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3272,
          "decl": 3293,
          "end": 3294,
          "name": "strnstr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "StringParam"
            },
            {
              "name": "needle",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "strcasestr": {
          "doc": "Search a UTF-8 string for the first instance of a specific substring,\ncase-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3295,
          "decl": 3321,
          "end": 3322,
          "name": "strcasestr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "StringParam"
            },
            {
              "name": "needle",
              "type": "StringParam"
            }
          ]
        },
        "strtok_r": {
          "doc": "This works exactly like strtok_r() but doesn't require access to a C\nruntime.\n\nBreak a string up into a series of tokens.\n\nTo start tokenizing a new string, `str` should be the non-NULL address of\nthe string to start tokenizing. Future calls to get the next token from the\nsame string should specify a NULL.\n\nNote that this function will overwrite pieces of `str` with null chars to\nsplit it into tokens. This function cannot be used with const/read-only\nstrings!\n\n`saveptr` just needs to point to a `char *` that can be overwritten; SDL\nwill use this to save tokenizing state between calls. It is initialized if\n`str` is non-NULL, and used to resume tokenizing when `str` is NULL.\n\n\\param str the string to tokenize, or NULL to continue tokenizing.\n\\param delim the delimiter string that separates tokens.\n\\param saveptr pointer to a char *, used for ongoing state.\n\\returns A pointer to the next token, or NULL if no tokens remain.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3323,
          "decl": 3350,
          "end": 3351,
          "name": "strtok_r",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "delim",
              "type": "StringParam"
            },
            {
              "name": "saveptr",
              "type": "char **"
            }
          ]
        },
        "utf8strlen": {
          "doc": "Count the number of codepoints in a UTF-8 string.\n\nCounts the _codepoints_, not _bytes_, in `str`, excluding the null\nterminator.\n\nIf you need to count the bytes in a string instead, consider using\nSDL_strlen().\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), so a malformed or incomplete UTF-8 sequence might increase the\ncount by several replacement characters.\n\n\\param str The null-terminated UTF-8 string to read. Must not be NULL.\n\\returns The length (in codepoints, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_utf8strnlen\n\\sa SDL_strlen",
          "begin": 3352,
          "decl": 3378,
          "end": 3379,
          "name": "utf8strlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            }
          ]
        },
        "utf8strnlen": {
          "doc": "Count the number of codepoints in a UTF-8 string, up to n bytes.\n\nCounts the _codepoints_, not _bytes_, in `str`, excluding the null\nterminator.\n\nIf you need to count the bytes in a string instead, consider using\nSDL_strnlen().\n\nThe counting stops at `bytes` bytes (not codepoints!). This seems\ncounterintuitive, but makes it easy to express the total size of the\nstring's buffer.\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), so a malformed or incomplete UTF-8 sequence might increase the\ncount by several replacement characters.\n\n\\param str The null-terminated UTF-8 string to read. Must not be NULL.\n\\param bytes The maximum amount of bytes to count.\n\\returns The length (in codepoints, excluding the null terminator) of `src`\n         but never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_utf8strlen\n\\sa SDL_strnlen",
          "begin": 3380,
          "decl": 3411,
          "end": 3412,
          "name": "utf8strnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "bytes",
              "type": "size_t"
            }
          ]
        },
        "itoa": {
          "doc": "Convert an integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_uitoa\n\\sa SDL_ltoa\n\\sa SDL_lltoa",
          "begin": 3413,
          "decl": 3439,
          "end": 3440,
          "name": "itoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "uitoa": {
          "doc": "Convert an unsigned integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_itoa\n\\sa SDL_ultoa\n\\sa SDL_ulltoa",
          "begin": 3441,
          "decl": 3467,
          "end": 3468,
          "name": "uitoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned int"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "ltoa": {
          "doc": "Convert a long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ultoa\n\\sa SDL_itoa\n\\sa SDL_lltoa",
          "begin": 3469,
          "decl": 3495,
          "end": 3496,
          "name": "ltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "ultoa": {
          "doc": "Convert an unsigned long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ltoa\n\\sa SDL_uitoa\n\\sa SDL_ulltoa",
          "begin": 3497,
          "decl": 3523,
          "end": 3524,
          "name": "ultoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "lltoa": {
          "doc": "Convert a long long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the long long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ulltoa\n\\sa SDL_itoa\n\\sa SDL_ltoa",
          "begin": 3527,
          "decl": 3553,
          "end": 3554,
          "name": "lltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "long long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "ulltoa": {
          "doc": "Convert an unsigned long long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned long long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lltoa\n\\sa SDL_uitoa\n\\sa SDL_ultoa",
          "begin": 3555,
          "decl": 3581,
          "end": 3582,
          "name": "ulltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned long long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "atoi": {
          "doc": "Parse an `int` from a string.\n\nThe result of calling `SDL_atoi(str)` is equivalent to\n`(int)SDL_strtol(str, NULL, 10)`.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the parsed `int`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_itoa",
          "begin": 3584,
          "decl": 3605,
          "end": 3606,
          "name": "atoi",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            }
          ]
        },
        "atof": {
          "doc": "Parse a `double` from a string.\n\nThe result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,\nNULL)`.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the parsed `double`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod",
          "begin": 3607,
          "decl": 3627,
          "end": 3628,
          "name": "atof",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            }
          ]
        },
        "strtol": {
          "doc": "Parse a `long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long`, the result is clamped to\nthe minimum and maximum representable `long` values.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_ltoa\n\\sa SDL_wcstol",
          "begin": 3629,
          "decl": 3661,
          "end": 3662,
          "name": "strtol",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "strtoul": {
          "doc": "Parse an `unsigned long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside an `unsigned long`, the result is\nclamped to the maximum representable `unsigned long` value.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `unsigned long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_ultoa",
          "begin": 3663,
          "decl": 3694,
          "end": 3695,
          "name": "strtoul",
          "kind": "function",
          "type": "unsigned long",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "strtoll": {
          "doc": "Parse a `long long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long long`, the result is\nclamped to the minimum and maximum representable `long long` values.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_lltoa",
          "begin": 3698,
          "decl": 3729,
          "end": 3730,
          "name": "strtoll",
          "kind": "function",
          "type": "long long",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "strtoull": {
          "doc": "Parse an `unsigned long long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside an `unsigned long long`, the\nresult is clamped to the maximum representable `unsigned long long` value.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `unsigned long long`, or 0 if no number could be\n         parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoul\n\\sa SDL_strtod\n\\sa SDL_ulltoa",
          "begin": 3731,
          "decl": 3763,
          "end": 3764,
          "name": "strtoull",
          "kind": "function",
          "type": "unsigned long long",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "strtod": {
          "doc": "Parse a `double` from a string.\n\nThis function makes fewer guarantees than the C runtime `strtod`:\n\n- Only decimal notation is guaranteed to be supported. The handling of\n  scientific and hexadecimal notation is unspecified.\n- Whether or not INF and NAN can be parsed is unspecified.\n- The precision of the result is unspecified.\n\n\\param str the null-terminated string to read. Must not be NULL.\n\\param endp if not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\returns the parsed `double`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoul\n\\sa SDL_strtoull",
          "begin": 3766,
          "decl": 3793,
          "end": 3794,
          "name": "strtod",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "endp",
              "type": "char **"
            }
          ]
        },
        "strcmp": {
          "doc": "Compare two null-terminated UTF-8 strings.\n\nDue to the nature of UTF-8 encoding, this will work with Unicode strings,\nsince effectively this function just compares bytes until it hits a\nnull-terminating character. Also due to the nature of UTF-8, this can be\nused with SDL_qsort() to put strings in (roughly) alphabetical order.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3795,
          "decl": 3813,
          "end": 3814,
          "name": "strcmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "StringParam"
            },
            {
              "name": "str2",
              "type": "StringParam"
            }
          ]
        },
        "strncmp": {
          "doc": "Compare two UTF-8 strings up to a number of bytes.\n\nDue to the nature of UTF-8 encoding, this will work with Unicode strings,\nsince effectively this function just compares bytes until it hits a\nnull-terminating character. Also due to the nature of UTF-8, this can be\nused with SDL_qsort() to put strings in (roughly) alphabetical order.\n\nNote that while this function is intended to be used with UTF-8, it is\ndoing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the\nlimit lands in the middle of a multi-byte UTF-8 sequence, it will only\ncompare a portion of the final character.\n\n`maxlen` specifies a maximum number of bytes to compare; if the strings\nmatch to this number of bytes (or both have matched to a null-terminator\ncharacter before this number of bytes), they will be considered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of _bytes_ to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3815,
          "decl": 3843,
          "end": 3844,
          "name": "strncmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "StringParam"
            },
            {
              "name": "str2",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "strcasecmp": {
          "doc": "Compare two null-terminated UTF-8 strings, case-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the string to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3845,
          "decl": 3871,
          "end": 3872,
          "name": "strcasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "StringParam"
            },
            {
              "name": "str2",
              "type": "StringParam"
            }
          ]
        },
        "strncasecmp": {
          "doc": "Compare two UTF-8 strings, case-insensitively, up to a number of bytes.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the string to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\nNote that while this function is intended to be used with UTF-8, `maxlen`\nspecifies a _byte_ limit! If the limit lands in the middle of a multi-byte\nUTF-8 sequence, it may convert a portion of the final character to one or\nmore Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow\na buffer.\n\n`maxlen` specifies a maximum number of bytes to compare; if the strings\nmatch to this number of bytes (or both have matched to a null-terminator\ncharacter before this number of bytes), they will be considered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of bytes to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3874,
          "decl": 3911,
          "end": 3912,
          "name": "strncasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "StringParam"
            },
            {
              "name": "str2",
              "type": "StringParam"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "strpbrk": {
          "doc": "Searches a string for the first occurence of any character contained in a\nbreakset, and returns a pointer from the string to that character.\n\n\\param str The null-terminated string to be searched. Must not be NULL, and\n           must not overlap with `breakset`.\n\\param breakset A null-terminated string containing the list of characters\n                to look for. Must not be NULL, and must not overlap with\n                `str`.\n\\returns A pointer to the location, in str, of the first occurence of a\n         character present in the breakset, or NULL if none is found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3913,
          "decl": 3929,
          "end": 3930,
          "name": "strpbrk",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "StringParam"
            },
            {
              "name": "breakset",
              "type": "StringParam"
            }
          ]
        },
        "StepUTF8": {
          "doc": "Decode a UTF-8 string, one Unicode codepoint at a time.\n\nThis will return the first Unicode codepoint in the UTF-8 encoded string in\n`*pstr`, and then advance `*pstr` past any consumed bytes before returning.\n\nIt will not access more than `*pslen` bytes from the string. `*pslen` will\nbe adjusted, as well, subtracting the number of bytes consumed.\n\n`pslen` is allowed to be NULL, in which case the string _must_ be\nNULL-terminated, as the function will blindly read until it sees the NULL\nchar.\n\nif `*pslen` is zero, it assumes the end of string is reached and returns a\nzero codepoint regardless of the contents of the string buffer.\n\nIf the resulting codepoint is zero (a NULL terminator), or `*pslen` is\nzero, it will not advance `*pstr` or `*pslen` at all.\n\nGenerally this function is called in a loop until it returns zero,\nadjusting its parameters each iteration.\n\nIf an invalid UTF-8 sequence is encountered, this function returns\nSDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte\n(which is to say, a multibyte sequence might produce several\nSDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid\nUTF-8 sequence).\n\nSeveral things can generate invalid UTF-8 sequences, including overlong\nencodings, the use of UTF-16 surrogate values, and truncated data. Please\nrefer to\n[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)\nfor details.\n\n\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.\n\\param pslen a pointer to the number of bytes in the string, to be read and\n             adjusted. NULL is allowed.\n\\returns the first Unicode codepoint in the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3946,
          "decl": 3989,
          "end": 3990,
          "name": "StepUTF8",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "pstr",
              "type": "const char **"
            },
            {
              "name": "pslen",
              "type": "size_t *"
            }
          ]
        },
        "StepBackUTF8": {
          "doc": "Decode a UTF-8 string in reverse, one Unicode codepoint at a time.\n\nThis will go to the start of the previous Unicode codepoint in the string,\nmove `*pstr` to that location and return that codepoint.\n\nIf `*pstr` is already at the start of the string), it will not advance\n`*pstr` at all.\n\nGenerally this function is called in a loop until it returns zero,\nadjusting its parameter each iteration.\n\nIf an invalid UTF-8 sequence is encountered, this function returns\nSDL_INVALID_UNICODE_CODEPOINT.\n\nSeveral things can generate invalid UTF-8 sequences, including overlong\nencodings, the use of UTF-16 surrogate values, and truncated data. Please\nrefer to\n[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)\nfor details.\n\n\\param start a pointer to the beginning of the UTF-8 string.\n\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.\n\\returns the previous Unicode codepoint in the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 3991,
          "decl": 4020,
          "end": 4021,
          "name": "StepBackUTF8",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "start",
              "type": "StringParam"
            },
            {
              "name": "pstr",
              "type": "const char **"
            }
          ]
        },
        "UCS4ToUTF8": {
          "doc": "Convert a single Unicode codepoint to UTF-8.\n\nThe buffer pointed to by `dst` must be at least 4 bytes long, as this\nfunction may generate between 1 and 4 bytes of output.\n\nThis function returns the first byte _after_ the newly-written UTF-8\nsequence, which is useful for encoding multiple codepoints in a loop, or\nknowing where to write a NULL-terminator character to end the string (in\neither case, plan to have a buffer of _more_ than 4 bytes!).\n\nIf `codepoint` is an invalid value (outside the Unicode range, or a UTF-16\nsurrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the\ncodepoint instead, and not set an error.\n\nIf `dst` is NULL, this returns NULL immediately without writing to the\npointer and without setting an error.\n\n\\param codepoint a Unicode codepoint to convert to UTF-8.\n\\param dst the location to write the encoded UTF-8. Must point to at least\n           4 bytes!\n\\returns the first byte past the newly-written UTF-8 sequence.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4022,
          "decl": 4049,
          "end": 4050,
          "name": "UCS4ToUTF8",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "codepoint",
              "type": "Uint32"
            },
            {
              "name": "dst",
              "type": "char *"
            }
          ]
        },
        "sscanf": {
          "doc": "This works exactly like sscanf() but doesn't require access to a C runtime.\n\nScan a string, matching a format string, converting each '%' item and\nstoring it to pointers provided through variable arguments.\n\n\\param text the string to scan. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of pointers to values to be filled in with scanned items.\n\\returns the number of items that matched the format string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4051,
          "decl": 4066,
          "end": 4067,
          "name": "sscanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "StringParam"
            },
            {
              "name": "fmt",
              "type": "SDL_SCANF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "vsscanf": {
          "doc": "This works exactly like vsscanf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_sscanf(), except it takes a `va_list` instead\nof using `...` variable arguments.\n\n\\param text the string to scan. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` of pointers to values to be filled in with scanned\n          items.\n\\returns the number of items that matched the format string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4068,
          "decl": 4085,
          "end": 4086,
          "name": "vsscanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "StringParam"
            },
            {
              "name": "fmt",
              "type": "SDL_SCANF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "snprintf": {
          "doc": "This works exactly like snprintf() but doesn't require access to a C\nruntime.\n\nFormat a string of up to `maxlen`-1 bytes, converting each '%' item with\nvalues provided through variable arguments.\n\nWhile some C runtimes differ on how to deal with too-large strings, this\nfunction null-terminates the output, by treating the null-terminator as\npart of the `maxlen` count. Note that if `maxlen` is zero, however, no\nbytes will be written at all.\n\nThis function returns the number of _bytes_ (not _characters_) that should\nbe written, excluding the null-terminator character. If this returns a\nnumber >= `maxlen`, it means the output string was truncated. A negative\nreturn value means an error occurred.\n\nReferencing the output string's pointer with a format item is undefined\nbehavior.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum bytes to write, including the null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of bytes that should be written, not counting the\n         null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4087,
          "decl": 4118,
          "end": 4119,
          "name": "snprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "swprintf": {
          "doc": "This works exactly like swprintf() but doesn't require access to a C\nruntime.\n\nFormat a wide string of up to `maxlen`-1 wchar_t values, converting each\n'%' item with values provided through variable arguments.\n\nWhile some C runtimes differ on how to deal with too-large strings, this\nfunction null-terminates the output, by treating the null-terminator as\npart of the `maxlen` count. Note that if `maxlen` is zero, however, no wide\ncharacters will be written at all.\n\nThis function returns the number of _wide characters_ (not _codepoints_)\nthat should be written, excluding the null-terminator character. If this\nreturns a number >= `maxlen`, it means the output string was truncated. A\nnegative return value means an error occurred.\n\nReferencing the output string's pointer with a format item is undefined\nbehavior.\n\n\\param text the buffer to write the wide string into. Must not be NULL.\n\\param maxlen the maximum wchar_t values to write, including the\n              null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of wide characters that should be written, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4120,
          "decl": 4152,
          "end": 4153,
          "name": "swprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const wchar_t *"
            },
            "..."
          ]
        },
        "vsnprintf": {
          "doc": "This works exactly like vsnprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_snprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum bytes to write, including the null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of bytes that should be written, not counting the\n         null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4154,
          "decl": 4172,
          "end": 4173,
          "name": "vsnprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "vswprintf": {
          "doc": "This works exactly like vswprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_swprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum wide characters to write, including the\n              null-terminator.\n\\param fmt a printf-style format wide string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of wide characters that should be written, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4174,
          "decl": 4193,
          "end": 4194,
          "name": "vswprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const wchar_t *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "asprintf": {
          "doc": "This works exactly like asprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_snprintf(), except it allocates a buffer large\nenough to hold the output string on behalf of the caller.\n\nOn success, this function returns the number of bytes (not characters)\ncomprising the output string, not counting the null-terminator character,\nand sets `*strp` to the newly-allocated string.\n\nOn error, this function returns a negative number, and the value of `*strp`\nis undefined.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param strp on output, is set to the new string. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of bytes in the newly-allocated string, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4195,
          "decl": 4222,
          "end": 4223,
          "name": "asprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "strp",
              "type": "char **"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "vasprintf": {
          "doc": "This works exactly like vasprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_asprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param strp on output, is set to the new string. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of bytes in the newly-allocated string, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 4224,
          "decl": 4241,
          "end": 4242,
          "name": "vasprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "strp",
              "type": "char **"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "srand": {
          "doc": "Seeds the pseudo-random number generator.\n\nReusing the seed number will cause SDL_rand_*() to repeat the same stream\nof 'random' numbers.\n\n\\param seed the value to use as a random number seed, or 0 to use\n            SDL_GetPerformanceCounter().\n\n\\threadsafety This should be called on the same thread that calls\n              SDL_rand*()\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_rand_bits\n\\sa SDL_randf",
          "begin": 4243,
          "decl": 4261,
          "end": 4262,
          "name": "srand",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "seed",
              "type": "Uint64"
            }
          ]
        },
        "rand": {
          "doc": "Generate a pseudo-random number less than n for positive n\n\nThe method used is faster and of better quality than `rand() % n`. Odds are\nroughly 99.9% even for n = 1 million. Evenness is better for smaller n, and\nmuch worse as n gets bigger.\n\nExample: to simulate a d6 use `SDL_rand(6) + 1` The +1 converts 0..5 to\n1..6\n\nIf you want to generate a pseudo-random number in the full range of Sint32,\nyou should use: (Sint32)SDL_rand_bits()\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param n the number of possible outcomes. n must be positive.\n\\returns a random value in the range of [0 .. n-1].\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_srand\n\\sa SDL_randf",
          "begin": 4263,
          "decl": 4295,
          "end": 4296,
          "name": "rand",
          "kind": "function",
          "type": "Sint32",
          "parameters": [
            {
              "name": "n",
              "type": "Sint32"
            }
          ]
        },
        "randf": {
          "doc": "Generate a uniform pseudo-random floating point number less than 1.0\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\returns a random value in the range of [0.0, 1.0).\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_srand\n\\sa SDL_rand",
          "begin": 4297,
          "decl": 4318,
          "end": 4319,
          "name": "randf",
          "kind": "function",
          "type": "float",
          "parameters": []
        },
        "rand_bits": {
          "doc": "Generate 32 pseudo-random bits.\n\nYou likely want to use SDL_rand() to get a psuedo-random number instead.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\returns a random value in the range of [0-SDL_MAX_UINT32].\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_randf\n\\sa SDL_srand",
          "begin": 4320,
          "decl": 4341,
          "end": 4342,
          "name": "rand_bits",
          "kind": "function",
          "type": "Uint32",
          "parameters": []
        },
        "rand_r": {
          "doc": "Generate a pseudo-random number less than n for positive n\n\nThe method used is faster and of better quality than `rand() % n`. Odds are\nroughly 99.9% even for n = 1 million. Evenness is better for smaller n, and\nmuch worse as n gets bigger.\n\nExample: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts\n0..5 to 1..6\n\nIf you want to generate a pseudo-random number in the full range of Sint32,\nyou should use: (Sint32)SDL_rand_bits_r(state)\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\param n the number of possible outcomes. n must be positive.\n\\returns a random value in the range of [0 .. n-1].\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_rand_bits_r\n\\sa SDL_randf_r",
          "begin": 4343,
          "decl": 4376,
          "end": 4377,
          "name": "rand_r",
          "kind": "function",
          "type": "Sint32",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            },
            {
              "name": "n",
              "type": "Sint32"
            }
          ]
        },
        "randf_r": {
          "doc": "Generate a uniform pseudo-random floating point number less than 1.0\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\returns a random value in the range of [0.0, 1.0).\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand_bits_r\n\\sa SDL_rand_r\n\\sa SDL_randf",
          "begin": 4378,
          "decl": 4403,
          "end": 4404,
          "name": "randf_r",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            }
          ]
        },
        "rand_bits_r": {
          "doc": "Generate 32 pseudo-random bits.\n\nYou likely want to use SDL_rand_r() to get a psuedo-random number instead.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\returns a random value in the range of [0-SDL_MAX_UINT32].\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand_r\n\\sa SDL_randf_r",
          "begin": 4405,
          "decl": 4428,
          "end": 4429,
          "name": "rand_bits_r",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            }
          ]
        },
        "acos": {
          "doc": "Compute the arc cosine of `x`.\n\nThe definition of `y = acos(x)` is `x = cos(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `0 <= y <= Pi`\n\nThis function operates on double-precision floating point values, use\nSDL_acosf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc cosine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_acosf\n\\sa SDL_asin\n\\sa SDL_cos",
          "begin": 4454,
          "decl": 4482,
          "end": 4483,
          "name": "acos",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "acosf": {
          "doc": "Compute the arc cosine of `x`.\n\nThe definition of `y = acos(x)` is `x = cos(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `0 <= y <= Pi`\n\nThis function operates on single-precision floating point values, use\nSDL_acos for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc cosine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_acos\n\\sa SDL_asinf\n\\sa SDL_cosf",
          "begin": 4484,
          "decl": 4512,
          "end": 4513,
          "name": "acosf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "asin": {
          "doc": "Compute the arc sine of `x`.\n\nThe definition of `y = asin(x)` is `x = sin(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_asinf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc sine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_asinf\n\\sa SDL_acos\n\\sa SDL_sin",
          "begin": 4514,
          "decl": 4542,
          "end": 4543,
          "name": "asin",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "asinf": {
          "doc": "Compute the arc sine of `x`.\n\nThe definition of `y = asin(x)` is `x = sin(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_asin for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc sine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_asin\n\\sa SDL_acosf\n\\sa SDL_sinf",
          "begin": 4544,
          "decl": 4572,
          "end": 4573,
          "name": "asinf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "atan": {
          "doc": "Compute the arc tangent of `x`.\n\nThe definition of `y = atan(x)` is `x = tan(y)`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_atanf for single-precision floats.\n\nTo calculate the arc tangent of y / x, use SDL_atan2.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atanf\n\\sa SDL_atan2\n\\sa SDL_tan",
          "begin": 4574,
          "decl": 4604,
          "end": 4605,
          "name": "atan",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "atanf": {
          "doc": "Compute the arc tangent of `x`.\n\nThe definition of `y = atan(x)` is `x = tan(y)`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_atan for dboule-precision floats.\n\nTo calculate the arc tangent of y / x, use SDL_atan2f.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan\n\\sa SDL_atan2f\n\\sa SDL_tanf",
          "begin": 4606,
          "decl": 4636,
          "end": 4637,
          "name": "atanf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "atan2": {
          "doc": "Compute the arc tangent of `y / x`, using the signs of x and y to adjust\nthe result's quadrant.\n\nThe definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant\nof z is determined based on the signs of x and y.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_atan2f for single-precision floats.\n\nTo calculate the arc tangent of a single value, use SDL_atan.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param y floating point value of the numerator (y coordinate).\n\\param x floating point value of the denominator (x coordinate).\n\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either\n         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan2f\n\\sa SDL_atan\n\\sa SDL_tan",
          "begin": 4638,
          "decl": 4672,
          "end": 4673,
          "name": "atan2",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "atan2f": {
          "doc": "Compute the arc tangent of `y / x`, using the signs of x and y to adjust\nthe result's quadrant.\n\nThe definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant\nof z is determined based on the signs of x and y.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_atan2 for double-precision floats.\n\nTo calculate the arc tangent of a single value, use SDL_atanf.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param y floating point value of the numerator (y coordinate).\n\\param x floating point value of the denominator (x coordinate).\n\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either\n         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan2f\n\\sa SDL_atan\n\\sa SDL_tan",
          "begin": 4674,
          "decl": 4708,
          "end": 4709,
          "name": "atan2f",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "ceil": {
          "doc": "Compute the ceiling of `x`.\n\nThe ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`\nrounded up to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_ceilf for single-precision floats.\n\n\\param x floating point value.\n\\returns the ceiling of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ceilf\n\\sa SDL_floor\n\\sa SDL_trunc\n\\sa SDL_round\n\\sa SDL_lround",
          "begin": 4710,
          "decl": 4736,
          "end": 4737,
          "name": "ceil",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "ceilf": {
          "doc": "Compute the ceiling of `x`.\n\nThe ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`\nrounded up to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_ceil for double-precision floats.\n\n\\param x floating point value.\n\\returns the ceiling of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ceil\n\\sa SDL_floorf\n\\sa SDL_truncf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "begin": 4738,
          "decl": 4764,
          "end": 4765,
          "name": "ceilf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "copysign": {
          "doc": "Copy the sign of one floating-point value to another.\n\nThe definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.\n\nDomain: `-INF <= x <= INF`, ``-INF <= y <= f``\n\nRange: `-INF <= z <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_copysignf for single-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\param y floating point value to use as the sign.\n\\returns the floating point value with the sign of y and the magnitude of\n         x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_copysignf\n\\sa SDL_fabs",
          "begin": 4766,
          "decl": 4790,
          "end": 4791,
          "name": "copysign",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "copysignf": {
          "doc": "Copy the sign of one floating-point value to another.\n\nThe definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.\n\nDomain: `-INF <= x <= INF`, ``-INF <= y <= f``\n\nRange: `-INF <= z <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_copysign for double-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\param y floating point value to use as the sign.\n\\returns the floating point value with the sign of y and the magnitude of\n         x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_copysignf\n\\sa SDL_fabsf",
          "begin": 4792,
          "decl": 4816,
          "end": 4817,
          "name": "copysignf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "cos": {
          "doc": "Compute the cosine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on double-precision floating point values, use\nSDL_cosf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns cosine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_cosf\n\\sa SDL_acos\n\\sa SDL_sin",
          "begin": 4818,
          "decl": 4844,
          "end": 4845,
          "name": "cos",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "cosf": {
          "doc": "Compute the cosine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on single-precision floating point values, use\nSDL_cos for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns cosine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_cos\n\\sa SDL_acosf\n\\sa SDL_sinf",
          "begin": 4846,
          "decl": 4872,
          "end": 4873,
          "name": "cosf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "exp": {
          "doc": "Compute the exponential of `x`.\n\nThe definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the\nnatural logarithm. The inverse is the natural logarithm, SDL_log.\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThe output will overflow if `exp(x)` is too large to be represented.\n\nThis function operates on double-precision floating point values, use\nSDL_expf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns value of `e^x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_expf\n\\sa SDL_log",
          "begin": 4874,
          "decl": 4904,
          "end": 4905,
          "name": "exp",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "expf": {
          "doc": "Compute the exponential of `x`.\n\nThe definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the\nnatural logarithm. The inverse is the natural logarithm, SDL_logf.\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThe output will overflow if `exp(x)` is too large to be represented.\n\nThis function operates on single-precision floating point values, use\nSDL_exp for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns value of `e^x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_exp\n\\sa SDL_logf",
          "begin": 4906,
          "decl": 4936,
          "end": 4937,
          "name": "expf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "fabs": {
          "doc": "Compute the absolute value of `x`\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_copysignf for single-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\returns the absolute value of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fabsf",
          "begin": 4938,
          "decl": 4957,
          "end": 4958,
          "name": "fabs",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "fabsf": {
          "doc": "Compute the absolute value of `x`\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_copysignf for double-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\returns the absolute value of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fabs",
          "begin": 4959,
          "decl": 4978,
          "end": 4979,
          "name": "fabsf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "floor": {
          "doc": "Compute the floor of `x`.\n\nThe floor of `x` is the largest integer `y` such that `y > x`, i.e `x`\nrounded down to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_floorf for single-precision floats.\n\n\\param x floating point value.\n\\returns the floor of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_floorf\n\\sa SDL_ceil\n\\sa SDL_trunc\n\\sa SDL_round\n\\sa SDL_lround",
          "begin": 4980,
          "decl": 5006,
          "end": 5007,
          "name": "floor",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "floorf": {
          "doc": "Compute the floor of `x`.\n\nThe floor of `x` is the largest integer `y` such that `y > x`, i.e `x`\nrounded down to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_floorf for double-precision floats.\n\n\\param x floating point value.\n\\returns the floor of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_floor\n\\sa SDL_ceilf\n\\sa SDL_truncf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "begin": 5008,
          "decl": 5034,
          "end": 5035,
          "name": "floorf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "trunc": {
          "doc": "Truncate `x` to an integer.\n\nRounds `x` to the next closest integer to 0. This is equivalent to removing\nthe fractional part of `x`, leaving only the integer part.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_truncf for single-precision floats.\n\n\\param x floating point value.\n\\returns `x` truncated to an integer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_truncf\n\\sa SDL_fmod\n\\sa SDL_ceil\n\\sa SDL_floor\n\\sa SDL_round\n\\sa SDL_lround",
          "begin": 5036,
          "decl": 5063,
          "end": 5064,
          "name": "trunc",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "truncf": {
          "doc": "Truncate `x` to an integer.\n\nRounds `x` to the next closest integer to 0. This is equivalent to removing\nthe fractional part of `x`, leaving only the integer part.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_truncf for double-precision floats.\n\n\\param x floating point value.\n\\returns `x` truncated to an integer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_trunc\n\\sa SDL_fmodf\n\\sa SDL_ceilf\n\\sa SDL_floorf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "begin": 5065,
          "decl": 5092,
          "end": 5093,
          "name": "truncf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "fmod": {
          "doc": "Return the floating-point remainder of `x / y`\n\nDivides `x` by `y`, and returns the remainder.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`\n\nRange: `-y <= z <= y`\n\nThis function operates on double-precision floating point values, use\nSDL_fmodf for single-precision floats.\n\n\\param x the numerator.\n\\param y the denominator. Must not be 0.\n\\returns the remainder of `x / y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fmodf\n\\sa SDL_modf\n\\sa SDL_trunc\n\\sa SDL_ceil\n\\sa SDL_floor\n\\sa SDL_round\n\\sa SDL_lround",
          "begin": 5094,
          "decl": 5122,
          "end": 5123,
          "name": "fmod",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "fmodf": {
          "doc": "Return the floating-point remainder of `x / y`\n\nDivides `x` by `y`, and returns the remainder.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`\n\nRange: `-y <= z <= y`\n\nThis function operates on single-precision floating point values, use\nSDL_fmod for single-precision floats.\n\n\\param x the numerator.\n\\param y the denominator. Must not be 0.\n\\returns the remainder of `x / y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fmod\n\\sa SDL_truncf\n\\sa SDL_modff\n\\sa SDL_ceilf\n\\sa SDL_floorf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "begin": 5124,
          "decl": 5152,
          "end": 5153,
          "name": "fmodf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "isinf": {
          "doc": "Return whether the value is infinity.\n\n\\param x double-precision floating point value.\n\\returns non-zero if the value is infinity, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isinff",
          "begin": 5154,
          "decl": 5166,
          "end": 5167,
          "name": "isinf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "isinff": {
          "doc": "Return whether the value is infinity.\n\n\\param x floating point value.\n\\returns non-zero if the value is infinity, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isinf",
          "begin": 5168,
          "decl": 5180,
          "end": 5181,
          "name": "isinff",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "isnan": {
          "doc": "Return whether the value is NaN.\n\n\\param x double-precision floating point value.\n\\returns non-zero if the value is NaN, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isnanf",
          "begin": 5182,
          "decl": 5194,
          "end": 5195,
          "name": "isnan",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "isnanf": {
          "doc": "Return whether the value is NaN.\n\n\\param x floating point value.\n\\returns non-zero if the value is NaN, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isnan",
          "begin": 5196,
          "decl": 5208,
          "end": 5209,
          "name": "isnanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "log": {
          "doc": "Compute the natural logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on double-precision floating point values, use\nSDL_logf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the natural logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_logf\n\\sa SDL_log10\n\\sa SDL_exp",
          "begin": 5210,
          "decl": 5238,
          "end": 5239,
          "name": "log",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "logf": {
          "doc": "Compute the natural logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on single-precision floating point values, use\nSDL_log for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the natural logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log\n\\sa SDL_expf",
          "begin": 5240,
          "decl": 5267,
          "end": 5268,
          "name": "logf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "log10": {
          "doc": "Compute the base-10 logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on double-precision floating point values, use\nSDL_log10f for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log10f\n\\sa SDL_log\n\\sa SDL_pow",
          "begin": 5269,
          "decl": 5297,
          "end": 5298,
          "name": "log10",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "log10f": {
          "doc": "Compute the base-10 logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on single-precision floating point values, use\nSDL_log10 for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log10\n\\sa SDL_logf\n\\sa SDL_powf",
          "begin": 5299,
          "decl": 5327,
          "end": 5328,
          "name": "log10f",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "modf": {
          "doc": "Split `x` into integer and fractional parts\n\nThis function operates on double-precision floating point values, use\nSDL_modff for single-precision floats.\n\n\\param x floating point value.\n\\param y output pointer to store the integer part of `x`.\n\\returns the fractional part of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_modff\n\\sa SDL_trunc\n\\sa SDL_fmod",
          "begin": 5329,
          "decl": 5347,
          "end": 5348,
          "name": "modf",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double *"
            }
          ]
        },
        "modff": {
          "doc": "Split `x` into integer and fractional parts\n\nThis function operates on single-precision floating point values, use\nSDL_modf for double-precision floats.\n\n\\param x floating point value.\n\\param y output pointer to store the integer part of `x`.\n\\returns the fractional part of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_modf\n\\sa SDL_truncf\n\\sa SDL_fmodf",
          "begin": 5349,
          "decl": 5367,
          "end": 5368,
          "name": "modff",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "pow": {
          "doc": "Raise `x` to the power `y`\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-INF <= z <= INF`\n\nIf `y` is the base of the natural logarithm (e), consider using SDL_exp\ninstead.\n\nThis function operates on double-precision floating point values, use\nSDL_powf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x the base.\n\\param y the exponent.\n\\returns `x` raised to the power `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_powf\n\\sa SDL_exp\n\\sa SDL_log",
          "begin": 5369,
          "decl": 5399,
          "end": 5400,
          "name": "pow",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "powf": {
          "doc": "Raise `x` to the power `y`\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-INF <= z <= INF`\n\nIf `y` is the base of the natural logarithm (e), consider using SDL_exp\ninstead.\n\nThis function operates on single-precision floating point values, use\nSDL_powf for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x the base.\n\\param y the exponent.\n\\returns `x` raised to the power `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_pow\n\\sa SDL_expf\n\\sa SDL_logf",
          "begin": 5401,
          "decl": 5431,
          "end": 5432,
          "name": "powf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "round": {
          "doc": "Round `x` to the nearest integer.\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_roundf for single-precision floats. To get the result as an integer\ntype, use SDL_lround.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_roundf\n\\sa SDL_lround\n\\sa SDL_floor\n\\sa SDL_ceil\n\\sa SDL_trunc",
          "begin": 5433,
          "decl": 5460,
          "end": 5461,
          "name": "round",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "roundf": {
          "doc": "Round `x` to the nearest integer.\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_roundf for single-precision floats. To get the result as an integer\ntype, use SDL_lroundf.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_round\n\\sa SDL_lroundf\n\\sa SDL_floorf\n\\sa SDL_ceilf\n\\sa SDL_truncf",
          "begin": 5462,
          "decl": 5489,
          "end": 5490,
          "name": "roundf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "lround": {
          "doc": "Round `x` to the nearest integer representable as a long\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `MIN_LONG <= y <= MAX_LONG`\n\nThis function operates on double-precision floating point values, use\nSDL_lround for single-precision floats. To get the result as a\nfloating-point type, use SDL_round.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lroundf\n\\sa SDL_round\n\\sa SDL_floor\n\\sa SDL_ceil\n\\sa SDL_trunc",
          "begin": 5491,
          "decl": 5518,
          "end": 5519,
          "name": "lround",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "lroundf": {
          "doc": "Round `x` to the nearest integer representable as a long\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `MIN_LONG <= y <= MAX_LONG`\n\nThis function operates on single-precision floating point values, use\nSDL_lroundf for double-precision floats. To get the result as a\nfloating-point type, use SDL_roundf,\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lround\n\\sa SDL_roundf\n\\sa SDL_floorf\n\\sa SDL_ceilf\n\\sa SDL_truncf",
          "begin": 5520,
          "decl": 5547,
          "end": 5548,
          "name": "lroundf",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "scalbn": {
          "doc": "Scale `x` by an integer power of two.\n\nMultiplies `x` by the `n`th power of the floating point radix (always 2).\n\nDomain: `-INF <= x <= INF`, `n` integer\n\nRange: `-INF <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_scalbnf for single-precision floats.\n\n\\param x floating point value to be scaled.\n\\param n integer exponent.\n\\returns `x * 2^n`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_scalbnf\n\\sa SDL_pow",
          "begin": 5549,
          "decl": 5572,
          "end": 5573,
          "name": "scalbn",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "n",
              "type": "int"
            }
          ]
        },
        "scalbnf": {
          "doc": "Scale `x` by an integer power of two.\n\nMultiplies `x` by the `n`th power of the floating point radix (always 2).\n\nDomain: `-INF <= x <= INF`, `n` integer\n\nRange: `-INF <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_scalbn for double-precision floats.\n\n\\param x floating point value to be scaled.\n\\param n integer exponent.\n\\returns `x * 2^n`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_scalbn\n\\sa SDL_powf",
          "begin": 5574,
          "decl": 5597,
          "end": 5598,
          "name": "scalbnf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "n",
              "type": "int"
            }
          ]
        },
        "sin": {
          "doc": "Compute the sine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on double-precision floating point values, use\nSDL_sinf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns sine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sinf\n\\sa SDL_asin\n\\sa SDL_cos",
          "begin": 5599,
          "decl": 5625,
          "end": 5626,
          "name": "sin",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "sinf": {
          "doc": "Compute the sine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on single-precision floating point values, use\nSDL_sin for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns sine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sin\n\\sa SDL_asinf\n\\sa SDL_cosf",
          "begin": 5627,
          "decl": 5653,
          "end": 5654,
          "name": "sinf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "sqrt": {
          "doc": "Compute the square root of `x`.\n\nDomain: `0 <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_sqrtf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than or equal to 0.\n\\returns square root of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sqrtf",
          "begin": 5655,
          "decl": 5679,
          "end": 5680,
          "name": "sqrt",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "sqrtf": {
          "doc": "Compute the square root of `x`.\n\nDomain: `0 <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_sqrt for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than or equal to 0.\n\\returns square root of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sqrt",
          "begin": 5681,
          "decl": 5705,
          "end": 5706,
          "name": "sqrtf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "tan": {
          "doc": "Compute the tangent of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_tanf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns tangent of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_tanf\n\\sa SDL_sin\n\\sa SDL_cos\n\\sa SDL_atan\n\\sa SDL_atan2",
          "begin": 5707,
          "decl": 5735,
          "end": 5736,
          "name": "tan",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "tanf": {
          "doc": "Compute the tangent of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_tanf for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns tangent of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_tan\n\\sa SDL_sinf\n\\sa SDL_cosf\n\\sa SDL_atanf\n\\sa SDL_atan2f",
          "begin": 5737,
          "decl": 5765,
          "end": 5766,
          "name": "tanf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "iconv_t": {
          "doc": "An opaque handle representing string encoding conversion state.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open",
          "begin": 5767,
          "decl": 5774,
          "end": 5775,
          "name": "iconv_t",
          "kind": "alias",
          "type": "SDL_iconv_t"
        },
        "iconv_open": {
          "doc": "This function allocates a context for the specified character set\nconversion.\n\n\\param tocode The target character encoding, must not be NULL.\n\\param fromcode The source character encoding, must not be NULL.\n\\returns a handle that must be freed with SDL_iconv_close, or\n         SDL_ICONV_ERROR on failure.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv\n\\sa SDL_iconv_close\n\\sa SDL_iconv_string",
          "begin": 5776,
          "decl": 5791,
          "end": 5793,
          "name": "iconv_open",
          "kind": "function",
          "type": "iconv_t",
          "parameters": [
            {
              "name": "tocode",
              "type": "StringParam"
            },
            ");"
          ]
        },
        "iconv_close": {
          "doc": "This function frees a context used for character set conversion.\n\n\\param cd The character set conversion handle.\n\\returns 0 on success, or -1 on failure.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv\n\\sa SDL_iconv_open\n\\sa SDL_iconv_string",
          "begin": 5794,
          "decl": 5806,
          "end": 5807,
          "name": "iconv_close",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "cd",
              "type": "iconv_t"
            }
          ]
        },
        "iconv": {
          "doc": "This function converts text between encodings, reading from and writing to\na buffer.\n\nIt returns the number of succesful conversions on success. On error,\nSDL_ICONV_E2BIG is returned when the output buffer is too small, or\nSDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,\nor SDL_ICONV_EINVAL is returned when an incomplete input sequence is\nencountered.\n\nOn exit:\n\n- inbuf will point to the beginning of the next multibyte sequence. On\n  error, this is the location of the problematic input sequence. On\n  success, this is the end of the input sequence.\n- inbytesleft will be set to the number of bytes left to convert, which\n  will be 0 on success.\n- outbuf will point to the location where to store the next output byte.\n- outbytesleft will be set to the number of bytes left in the output\n  buffer.\n\n\\param cd The character set conversion context, created in\n          SDL_iconv_open().\n\\param inbuf Address of variable that points to the first character of the\n             input sequence.\n\\param inbytesleft The number of bytes in the input buffer.\n\\param outbuf Address of variable that points to the output buffer.\n\\param outbytesleft The number of bytes in the output buffer.\n\\returns the number of conversions on success, or a negative error code.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open\n\\sa SDL_iconv_close\n\\sa SDL_iconv_string",
          "begin": 5808,
          "decl": 5844,
          "end": 5847,
          "name": "iconv",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "cd",
              "type": "iconv_t"
            },
            {
              "name": "inbuf",
              "type": "const char **"
            },
            {
              "name": "inbytesleft",
              "type": "size_t *"
            },
            {
              "name": "outbuf",
              "type": "char **"
            },
            ");"
          ]
        },
        "iconv_string": {
          "doc": "Helper function to convert a string's encoding in one call.\n\nThis function converts a buffer or string between encodings in one pass.\n\nThe string does not need to be NULL-terminated; this function operates on\nthe number of bytes specified in `inbytesleft` whether there is a NULL\ncharacter anywhere in the buffer.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param tocode the character encoding of the output string. Examples are\n              \"UTF-8\", \"UCS-4\", etc.\n\\param fromcode the character encoding of data in `inbuf`.\n\\param inbuf the string to convert to a different encoding.\n\\param inbytesleft the size of the input string _in bytes_.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open\n\\sa SDL_iconv_close\n\\sa SDL_iconv",
          "begin": 5854,
          "decl": 5879,
          "end": 5883,
          "name": "iconv_string",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "tocode",
              "type": "StringParam"
            },
            {
              "name": "fromcode",
              "type": "StringParam"
            },
            {
              "name": "inbuf",
              "type": "StringParam"
            },
            ");"
          ]
        },
        "size_mul_check_overflow": {
          "doc": "Multiply two integers, checking for overflow.\n\nIf `a * b` would overflow, return false.\n\nOtherwise store `a * b` via ret and return true.\n\n\\param a the multiplicand.\n\\param b the multiplier.\n\\param ret on non-overflow output, stores the multiplication result, may\n           not be NULL.\n\\returns false on overflow, true if result is multiplied without overflow.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 6014,
          "decl": 6031,
          "end": 6039,
          "name": "size_mul_check_overflow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "size_mul_check_overflow_builtin": {
          "doc": "",
          "begin": 6045,
          "decl": 6045,
          "end": 6049,
          "name": "size_mul_check_overflow_builtin",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "size_add_check_overflow": {
          "doc": "Add two integers, checking for overflow.\n\nIf `a + b` would overflow, return false.\n\nOtherwise store `a + b` via ret and return true.\n\n\\param a the first addend.\n\\param b the second addend.\n\\param ret on non-overflow output, stores the addition result, may not be\n           NULL.\n\\returns false on overflow, true if result is added without overflow.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "begin": 6053,
          "decl": 6070,
          "end": 6078,
          "name": "size_add_check_overflow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "size_add_check_overflow_builtin": {
          "doc": "",
          "begin": 6083,
          "decl": 6083,
          "end": 6087,
          "name": "size_add_check_overflow_builtin",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "FunctionPointer": {
          "doc": "A generic function pointer.\n\nIn theory, generic function pointers should use this, instead of `void *`,\nsince some platforms could treat code addresses differently than data\naddresses. Although in current times no popular platforms make this\ndistinction, it is more correct and portable to use the correct type for a\ngeneric pointer.\n\nIf for some reason you need to force this typedef to be an actual `void *`,\nperhaps to work around a compiler or existing code, you can define\n`SDL_FUNCTION_POINTER_IS_VOID_POINTER` before including any SDL headers.\n\n\\since This datatype is available since SDL 3.2.0.",
          "begin": 6094,
          "decl": 6109,
          "end": 6110,
          "name": "FunctionPointer",
          "kind": "alias",
          "type": "SDL_FunctionPointer"
        }
      }
    }
  }
}