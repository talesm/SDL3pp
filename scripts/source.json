{
  "files": {
    "SDL_main.h": {
      "name": "SDL_main.h",
      "doc": "# CategoryMain\n\nRedefine main() if necessary so that it is called by SDL.\n\nIn order to make this consistent on all platforms, the application's main()\nshould look like this:\n\n```c\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char *argv[])\n{\n}\n```\n\nSDL will take care of platform specific details on how it gets called.\n\nThis is also where an app can be configured to use the main callbacks, via\nthe SDL_MAIN_USE_CALLBACKS macro.\n\nSDL_main.h is a \"single-header library,\" which is to say that including\nthis header inserts code into your program, and you should only include it\nonce in most cases. SDL.h does not include this header automatically.\n\nFor more information, see:\n\nhttps://wiki.libsdl.org/SDL3/README/main-functions",
      "entries": {
        "SDL_MAIN_HANDLED": {
          "doc": "Inform SDL that the app is providing an entry point instead of SDL.\n\nSDL does not define this macro, but will check if it is defined when\nincluding `SDL_main.h`. If defined, SDL will expect the app to provide the\nproper entry point for the platform, and all the other magic details\nneeded, like manually calling SDL_SetMainReady.\n\nPlease see [README/main-functions](README/main-functions), (or\ndocs/README-main-functions.md in the source tree) for a more detailed\nexplanation.\n\n\\since This macro is used by the headers since SDL 3.2.0.",
          "name": "SDL_MAIN_HANDLED",
          "kind": "def",
          "value": "1"
        },
        "SDL_MAIN_USE_CALLBACKS": {
          "doc": "Inform SDL to use the main callbacks instead of main.\n\nSDL does not define this macro, but will check if it is defined when\nincluding `SDL_main.h`. If defined, SDL will expect the app to provide\nseveral functions: SDL_AppInit, SDL_AppEvent, SDL_AppIterate, and\nSDL_AppQuit. The app should not provide a `main` function in this case, and\ndoing so will likely cause the build to fail.\n\nPlease see [README/main-functions](README/main-functions), (or\ndocs/README-main-functions.md in the source tree) for a more detailed\nexplanation.\n\n\\since This macro is used by the headers since SDL 3.2.0.\n\n\\sa SDL_AppInit\n\\sa SDL_AppEvent\n\\sa SDL_AppIterate\n\\sa SDL_AppQuit",
          "name": "SDL_MAIN_USE_CALLBACKS",
          "kind": "def",
          "value": "1"
        },
        "SDL_MAIN_AVAILABLE": {
          "doc": "Defined if the target platform offers a special mainline through SDL.\n\nThis won't be defined otherwise. If defined, SDL's headers will redefine\n`main` to `SDL_main`.\n\nThis macro is defined by `SDL_main.h`, which is not automatically included\nby `SDL.h`.\n\nEven if available, an app can define SDL_MAIN_HANDLED and provide their\nown, if they know what they're doing.\n\nThis macro is used internally by SDL, and apps probably shouldn't rely on it.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MAIN_AVAILABLE",
          "kind": "def"
        },
        "SDL_MAIN_NEEDED": {
          "doc": "Defined if the target platform _requires_ a special mainline through SDL.\n\nThis won't be defined otherwise. If defined, SDL's headers will redefine\n`main` to `SDL_main`.\n\nThis macro is defined by `SDL_main.h`, which is not automatically included\nby `SDL.h`.\n\nEven if required, an app can define SDL_MAIN_HANDLED and provide their\nown, if they know what they're doing.\n\nThis macro is used internally by SDL, and apps probably shouldn't rely on it.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MAIN_NEEDED",
          "kind": "def"
        },
        "SDLMAIN_DECLSPEC": {
          "doc": "A macro to tag a main entry point function as exported.\n\nMost platforms don't need this, and the macro will be defined to nothing.\nSome, like Android, keep the entry points in a shared library and need to\nexplicitly export the symbols.\n\nExternal code rarely needs this, and if it needs something, it's almost\nalways SDL_DECLSPEC instead.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_DECLSPEC",
          "name": "SDLMAIN_DECLSPEC",
          "kind": "def"
        },
        "main": {
          "doc": "",
          "name": "main",
          "kind": "def",
          "value": "SDL_main"
        },
        "SDL_AppInit": {
          "doc": "App-implemented initial entry point for SDL_MAIN_USE_CALLBACKS apps.\n\nApps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a\nstandard \"main\" function, you should not supply this.\n\nThis function is called by SDL once, at startup. The function should\ninitialize whatever is necessary, possibly create windows and open audio\ndevices, etc. The `argc` and `argv` parameters work like they would with a\nstandard \"main\" function.\n\nThis function should not go into an infinite mainloop; it should do any\none-time setup it requires and then return.\n\nThe app may optionally assign a pointer to `*appstate`. This pointer will\nbe provided on every future call to the other entry points, to allow\napplication state to be preserved between functions without the app needing\nto use a global variable. If this isn't set, the pointer will be NULL in\nfuture entry points.\n\nIf this function returns SDL_APP_CONTINUE, the app will proceed to normal\noperation, and will begin receiving repeated calls to SDL_AppIterate and\nSDL_AppEvent for the life of the program. If this function returns\nSDL_APP_FAILURE, SDL will call SDL_AppQuit and terminate the process with\nan exit code that reports an error to the platform. If it returns\nSDL_APP_SUCCESS, SDL calls SDL_AppQuit and terminates with an exit code\nthat reports success to the platform.\n\nThis function is called by SDL on the main thread.\n\n\\param appstate a place where the app can optionally store a pointer for\n                future use.\n\\param argc the standard ANSI C main's argc; number of elements in `argv`.\n\\param argv the standard ANSI C main's argv; array of command line\n            arguments.\n\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to\n         terminate with success, SDL_APP_CONTINUE to continue.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AppIterate\n\\sa SDL_AppEvent\n\\sa SDL_AppQuit",
          "name": "SDL_AppInit",
          "kind": "function",
          "type": "SDLMAIN_DECLSPEC SDL_AppResult",
          "parameters": [
            {
              "name": "appstate",
              "type": "void **"
            },
            {
              "name": "argc",
              "type": "int"
            },
            {
              "name": "argv[]",
              "type": "char *"
            }
          ]
        },
        "SDL_AppIterate": {
          "doc": "App-implemented iteration entry point for SDL_MAIN_USE_CALLBACKS apps.\n\nApps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a\nstandard \"main\" function, you should not supply this.\n\nThis function is called repeatedly by SDL after SDL_AppInit returns 0. The\nfunction should operate as a single iteration the program's primary loop;\nit should update whatever state it needs and draw a new frame of video,\nusually.\n\nOn some platforms, this function will be called at the refresh rate of the\ndisplay (which might change during the life of your app!). There are no\npromises made about what frequency this function might run at. You should\nuse SDL's timer functions if you need to see how much time has passed since\nthe last iteration.\n\nThere is no need to process the SDL event queue during this function; SDL\nwill send events as they arrive in SDL_AppEvent, and in most cases the\nevent queue will be empty when this function runs anyhow.\n\nThis function should not go into an infinite mainloop; it should do one\niteration of whatever the program does and return.\n\nThe `appstate` parameter is an optional pointer provided by the app during\nSDL_AppInit(). If the app never provided a pointer, this will be NULL.\n\nIf this function returns SDL_APP_CONTINUE, the app will continue normal\noperation, receiving repeated calls to SDL_AppIterate and SDL_AppEvent for\nthe life of the program. If this function returns SDL_APP_FAILURE, SDL will\ncall SDL_AppQuit and terminate the process with an exit code that reports\nan error to the platform. If it returns SDL_APP_SUCCESS, SDL calls\nSDL_AppQuit and terminates with an exit code that reports success to the\nplatform.\n\nThis function is called by SDL on the main thread.\n\n\\param appstate an optional pointer, provided by the app in SDL_AppInit.\n\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to\n         terminate with success, SDL_APP_CONTINUE to continue.\n\n\\threadsafety This function may get called concurrently with SDL_AppEvent()\n              for events not pushed on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AppInit\n\\sa SDL_AppEvent",
          "name": "SDL_AppIterate",
          "kind": "function",
          "type": "SDLMAIN_DECLSPEC SDL_AppResult",
          "parameters": [
            {
              "name": "appstate",
              "type": "void *"
            }
          ]
        },
        "SDL_AppEvent": {
          "doc": "App-implemented event entry point for SDL_MAIN_USE_CALLBACKS apps.\n\nApps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a\nstandard \"main\" function, you should not supply this.\n\nThis function is called as needed by SDL after SDL_AppInit returns\nSDL_APP_CONTINUE. It is called once for each new event.\n\nThere is (currently) no guarantee about what thread this will be called\nfrom; whatever thread pushes an event onto SDL's queue will trigger this\nfunction. SDL is responsible for pumping the event queue between each call\nto SDL_AppIterate, so in normal operation one should only get events in a\nserial fashion, but be careful if you have a thread that explicitly calls\nSDL_PushEvent. SDL itself will push events to the queue on the main thread.\n\nEvents sent to this function are not owned by the app; if you need to save\nthe data, you should copy it.\n\nThis function should not go into an infinite mainloop; it should handle the\nprovided event appropriately and return.\n\nThe `appstate` parameter is an optional pointer provided by the app during\nSDL_AppInit(). If the app never provided a pointer, this will be NULL.\n\nIf this function returns SDL_APP_CONTINUE, the app will continue normal\noperation, receiving repeated calls to SDL_AppIterate and SDL_AppEvent for\nthe life of the program. If this function returns SDL_APP_FAILURE, SDL will\ncall SDL_AppQuit and terminate the process with an exit code that reports\nan error to the platform. If it returns SDL_APP_SUCCESS, SDL calls\nSDL_AppQuit and terminates with an exit code that reports success to the\nplatform.\n\n\\param appstate an optional pointer, provided by the app in SDL_AppInit.\n\\param event the new event for the app to examine.\n\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to\n         terminate with success, SDL_APP_CONTINUE to continue.\n\n\\threadsafety This function may get called concurrently with\n              SDL_AppIterate() or SDL_AppQuit() for events not pushed from\n              the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AppInit\n\\sa SDL_AppIterate",
          "name": "SDL_AppEvent",
          "kind": "function",
          "type": "SDLMAIN_DECLSPEC SDL_AppResult",
          "parameters": [
            {
              "name": "appstate",
              "type": "void *"
            },
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_AppQuit": {
          "doc": "App-implemented deinit entry point for SDL_MAIN_USE_CALLBACKS apps.\n\nApps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a\nstandard \"main\" function, you should not supply this.\n\nThis function is called once by SDL before terminating the program.\n\nThis function will be called no matter what, even if SDL_AppInit requests\ntermination.\n\nThis function should not go into an infinite mainloop; it should\ndeinitialize any resources necessary, perform whatever shutdown activities,\nand return.\n\nYou do not need to call SDL_Quit() in this function, as SDL will call it\nafter this function returns and before the process terminates, but it is\nsafe to do so.\n\nThe `appstate` parameter is an optional pointer provided by the app during\nSDL_AppInit(). If the app never provided a pointer, this will be NULL. This\nfunction call is the last time this pointer will be provided, so any\nresources to it should be cleaned up here.\n\nThis function is called by SDL on the main thread.\n\n\\param appstate an optional pointer, provided by the app in SDL_AppInit.\n\\param result the result code that terminated the app (success or failure).\n\n\\threadsafety SDL_AppEvent() may get called concurrently with this function\n              if other threads that push events are still active.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AppInit",
          "name": "SDL_AppQuit",
          "kind": "function",
          "type": "SDLMAIN_DECLSPEC void",
          "parameters": [
            {
              "name": "appstate",
              "type": "void *"
            },
            {
              "name": "result",
              "type": "SDL_AppResult"
            }
          ]
        },
        "SDL_main_func": {
          "doc": "The prototype for the application's main() function\n\n\\param argc an ANSI-C style main function's argc.\n\\param argv an ANSI-C style main function's argv.\n\\returns an ANSI-C main return code; generally 0 is considered successful\n         program completion, and small non-zero values are considered\n         errors.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_main_func",
          "kind": "callback",
          "type": "int",
          "parameters": [
            {
              "name": "argc",
              "type": "int"
            },
            {
              "name": "argv[]",
              "type": "char *"
            }
          ]
        },
        "SDL_main": {
          "doc": "An app-supplied function for program entry.\n\nApps do not directly create this function; they should create a standard\nANSI-C `main` function instead. If SDL needs to insert some startup code\nbefore `main` runs, or the platform doesn't actually _use_ a function\ncalled \"main\", SDL will do some macro magic to redefine `main` to\n`SDL_main` and provide its own `main`.\n\nApps should include `SDL_main.h` in the same file as their `main` function,\nand they should not use that symbol for anything else in that file, as it\nmight get redefined.\n\nThis function is only provided by the app if it isn't using\nSDL_MAIN_USE_CALLBACKS.\n\nProgram startup is a surprisingly complex topic. Please see\n[README/main-functions](README/main-functions), (or\ndocs/README-main-functions.md in the source tree) for a more detailed\nexplanation.\n\n\\param argc an ANSI-C style main function's argc.\n\\param argv an ANSI-C style main function's argv.\n\\returns an ANSI-C main return code; generally 0 is considered successful\n         program completion, and small non-zero values are considered\n         errors.\n\n\\threadsafety This is the program entry point.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_main",
          "kind": "function",
          "type": "SDLMAIN_DECLSPEC int",
          "parameters": [
            {
              "name": "argc",
              "type": "int"
            },
            {
              "name": "argv[]",
              "type": "char *"
            }
          ]
        },
        "SDL_SetMainReady": {
          "doc": "Circumvent failure of SDL_Init() when not using SDL_main() as an entry\npoint.\n\nThis function is defined in SDL_main.h, along with the preprocessor rule to\nredefine main() as SDL_main(). Thus to ensure that your main() function\nwill not be changed it is necessary to define SDL_MAIN_HANDLED before\nincluding SDL.h.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Init",
          "name": "SDL_SetMainReady",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_RunApp": {
          "doc": "Initializes and launches an SDL application, by doing platform-specific\ninitialization before calling your mainFunction and cleanups after it\nreturns, if that is needed for a specific platform, otherwise it just calls\nmainFunction.\n\nYou can use this if you want to use your own main() implementation without\nusing SDL_main (like when using SDL_MAIN_HANDLED). When using this, you do\n*not* need SDL_SetMainReady().\n\n\\param argc the argc parameter from the application's main() function, or 0\n            if the platform's main-equivalent has no argc.\n\\param argv the argv parameter from the application's main() function, or\n            NULL if the platform's main-equivalent has no argv.\n\\param mainFunction your SDL app's C-style main(). NOT the function you're\n                    calling this from! Its name doesn't matter; it doesn't\n                    literally have to be `main`.\n\\param reserved should be NULL (reserved for future use, will probably be\n                platform-specific then).\n\\returns the return value from mainFunction: 0 on success, otherwise\n         failure; SDL_GetError() might have more information on the\n         failure.\n\n\\threadsafety Generally this is called once, near startup, from the\n              process's initial thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RunApp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "argc",
              "type": "int"
            },
            {
              "name": "argv[]",
              "type": "char *"
            },
            {
              "name": "mainFunction",
              "type": "SDL_main_func"
            },
            {
              "name": "reserved",
              "type": "void *"
            }
          ]
        },
        "SDL_EnterAppMainCallbacks": {
          "doc": "An entry point for SDL's use in SDL_MAIN_USE_CALLBACKS.\n\nGenerally, you should not call this function directly. This only exists to\nhand off work into SDL as soon as possible, where it has a lot more control\nand functionality available, and make the inline code in SDL_main.h as\nsmall as possible.\n\nNot all platforms use this, it's actual use is hidden in a magic\nheader-only library, and you should not call this directly unless you\n_really_ know what you're doing.\n\n\\param argc standard Unix main argc.\n\\param argv standard Unix main argv.\n\\param appinit the application's SDL_AppInit function.\n\\param appiter the application's SDL_AppIterate function.\n\\param appevent the application's SDL_AppEvent function.\n\\param appquit the application's SDL_AppQuit function.\n\\returns standard Unix main return value.\n\n\\threadsafety It is not safe to call this anywhere except as the only\n              function call in SDL_main.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EnterAppMainCallbacks",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "argc",
              "type": "int"
            },
            {
              "name": "argv[]",
              "type": "char *"
            },
            {
              "name": "appinit",
              "type": "SDL_AppInit_func"
            },
            {
              "name": "appiter",
              "type": "SDL_AppIterate_func"
            },
            {
              "name": "appevent",
              "type": "SDL_AppEvent_func"
            },
            {
              "name": "appquit",
              "type": "SDL_AppQuit_func"
            }
          ]
        },
        "SDL_GDKSuspendComplete": {
          "doc": "Callback from the application to let the suspend continue.\n\nThis function is only needed for Xbox GDK support; all other platforms will\ndo nothing and set an \"unsupported\" error message.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GDKSuspendComplete",
          "kind": "function",
          "type": "void",
          "parameters": []
        }
      }
    },
    "SDL_init.h": {
      "name": "SDL_init.h",
      "doc": "# CategoryInit\n\nAll SDL programs need to initialize the library before starting to work\nwith it.\n\nAlmost everything can simply call SDL_Init() near startup, with a handful\nof flags to specify subsystems to touch. These are here to make sure SDL\ndoes not even attempt to touch low-level pieces of the operating system\nthat you don't intend to use. For example, you might be using SDL for video\nand input but chose an external library for audio, and in this case you\nwould just need to leave off the `SDL_INIT_AUDIO` flag to make sure that\nexternal library has complete control.\n\nMost apps, when terminating, should call SDL_Quit(). This will clean up\n(nearly) everything that SDL might have allocated, and crucially, it'll\nmake sure that the display's resolution is back to what the user expects if\nyou had previously changed it for your game.\n\nSDL3 apps are strongly encouraged to call SDL_SetAppMetadata() at startup\nto fill in details about the program. This is completely optional, but it\nhelps in small ways (we can provide an About dialog box for the macOS menu,\nwe can name the app in the system's audio mixer, etc). Those that want to\nprovide a _lot_ of information should look at the more-detailed\nSDL_SetAppMetadataProperty().",
      "entries": {
        "SDL_InitFlags": {
          "doc": "Initialization flags for SDL_Init and/or SDL_InitSubSystem\n\nThese are the flags which may be passed to SDL_Init(). You should specify\nthe subsystems which you will be using in your application.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_Init\n\\sa SDL_Quit\n\\sa SDL_InitSubSystem\n\\sa SDL_QuitSubSystem\n\\sa SDL_WasInit",
          "name": "SDL_InitFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_INIT_AUDIO": {
          "doc": "`SDL_INIT_AUDIO` implies `SDL_INIT_EVENTS`",
          "name": "SDL_INIT_AUDIO",
          "kind": "def",
          "value": "0x00000010u"
        },
        "SDL_INIT_VIDEO": {
          "doc": "`SDL_INIT_VIDEO` implies `SDL_INIT_EVENTS`, should be initialized on the main thread",
          "name": "SDL_INIT_VIDEO",
          "kind": "def",
          "value": "0x00000020u"
        },
        "SDL_INIT_JOYSTICK": {
          "doc": "`SDL_INIT_JOYSTICK` implies `SDL_INIT_EVENTS`, should be initialized on the same thread as SDL_INIT_VIDEO on Windows if you don't set SDL_HINT_JOYSTICK_THREAD",
          "name": "SDL_INIT_JOYSTICK",
          "kind": "def",
          "value": "0x00000200u"
        },
        "SDL_INIT_HAPTIC": {
          "doc": "",
          "name": "SDL_INIT_HAPTIC",
          "kind": "def",
          "value": "0x00001000u"
        },
        "SDL_INIT_GAMEPAD": {
          "doc": "`SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK`",
          "name": "SDL_INIT_GAMEPAD",
          "kind": "def",
          "value": "0x00002000u"
        },
        "SDL_INIT_EVENTS": {
          "doc": "",
          "name": "SDL_INIT_EVENTS",
          "kind": "def",
          "value": "0x00004000u"
        },
        "SDL_INIT_SENSOR": {
          "doc": "`SDL_INIT_SENSOR` implies `SDL_INIT_EVENTS`",
          "name": "SDL_INIT_SENSOR",
          "kind": "def",
          "value": "0x00008000u"
        },
        "SDL_INIT_CAMERA": {
          "doc": "`SDL_INIT_CAMERA` implies `SDL_INIT_EVENTS`",
          "name": "SDL_INIT_CAMERA",
          "kind": "def",
          "value": "0x00010000u"
        },
        "SDL_AppResult": {
          "doc": "Return values for optional main callbacks.\n\nReturning SDL_APP_SUCCESS or SDL_APP_FAILURE from SDL_AppInit,\nSDL_AppEvent, or SDL_AppIterate will terminate the program and report\nsuccess/failure to the operating system. What that means is\nplatform-dependent. On Unix, for example, on success, the process error\ncode will be zero, and on failure it will be 1. This interface doesn't\nallow you to return specific exit codes, just whether there was an error\ngenerally or not.\n\nReturning SDL_APP_CONTINUE from these functions will let the app continue\nto run.\n\nSee\n[Main callbacks in SDL3](https://wiki.libsdl.org/SDL3/README/main-functions#main-callbacks-in-sdl3)\nfor complete details.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_AppResult",
          "kind": "enum",
          "entries": {
            "SDL_APP_CONTINUE": {
              "doc": "Value that requests that the app continue from the main callbacks.",
              "name": "SDL_APP_CONTINUE",
              "kind": "var",
              "type": ""
            },
            "SDL_APP_SUCCESS": {
              "doc": "Value that requests termination with success from the main callbacks.",
              "name": "SDL_APP_SUCCESS",
              "kind": "var",
              "type": ""
            },
            "SDL_APP_FAILURE": {
              "doc": "Value that requests termination with error from the main callbacks.",
              "name": "SDL_APP_FAILURE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_AppInit_func": {
          "doc": "Function pointer typedef for SDL_AppInit.\n\nThese are used by SDL_EnterAppMainCallbacks. This mechanism operates behind\nthe scenes for apps using the optional main callbacks. Apps that want to\nuse this should just implement SDL_AppInit directly.\n\n\\param appstate a place where the app can optionally store a pointer for\n                future use.\n\\param argc the standard ANSI C main's argc; number of elements in `argv`.\n\\param argv the standard ANSI C main's argv; array of command line\n            arguments.\n\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to\n         terminate with success, SDL_APP_CONTINUE to continue.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_AppInit_func",
          "kind": "callback",
          "type": "SDL_AppResult",
          "parameters": [
            {
              "name": "appstate",
              "type": "void **"
            },
            {
              "name": "argc",
              "type": "int"
            },
            {
              "name": "argv[]",
              "type": "char *"
            }
          ]
        },
        "SDL_AppIterate_func": {
          "doc": "Function pointer typedef for SDL_AppIterate.\n\nThese are used by SDL_EnterAppMainCallbacks. This mechanism operates behind\nthe scenes for apps using the optional main callbacks. Apps that want to\nuse this should just implement SDL_AppIterate directly.\n\n\\param appstate an optional pointer, provided by the app in SDL_AppInit.\n\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to\n         terminate with success, SDL_APP_CONTINUE to continue.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_AppIterate_func",
          "kind": "callback",
          "type": "SDL_AppResult",
          "parameters": [
            {
              "name": "appstate",
              "type": "void *"
            }
          ]
        },
        "SDL_AppEvent_func": {
          "doc": "Function pointer typedef for SDL_AppEvent.\n\nThese are used by SDL_EnterAppMainCallbacks. This mechanism operates behind\nthe scenes for apps using the optional main callbacks. Apps that want to\nuse this should just implement SDL_AppEvent directly.\n\n\\param appstate an optional pointer, provided by the app in SDL_AppInit.\n\\param event the new event for the app to examine.\n\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to\n         terminate with success, SDL_APP_CONTINUE to continue.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_AppEvent_func",
          "kind": "callback",
          "type": "SDL_AppResult",
          "parameters": [
            {
              "name": "appstate",
              "type": "void *"
            },
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_AppQuit_func": {
          "doc": "Function pointer typedef for SDL_AppQuit.\n\nThese are used by SDL_EnterAppMainCallbacks. This mechanism operates behind\nthe scenes for apps using the optional main callbacks. Apps that want to\nuse this should just implement SDL_AppEvent directly.\n\n\\param appstate an optional pointer, provided by the app in SDL_AppInit.\n\\param result the result code that terminated the app (success or failure).\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_AppQuit_func",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "appstate",
              "type": "void *"
            },
            {
              "name": "result",
              "type": "SDL_AppResult"
            }
          ]
        },
        "SDL_Init": {
          "doc": "Initialize the SDL library.\n\nSDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the\ntwo may be used interchangeably. Though for readability of your code\nSDL_InitSubSystem() might be preferred.\n\nThe file I/O (for example: SDL_IOFromFile) and threading (SDL_CreateThread)\nsubsystems are initialized by default. Message boxes\n(SDL_ShowSimpleMessageBox) also attempt to work without initializing the\nvideo subsystem, in hopes of being useful in showing an error dialog when\nSDL_Init fails. You must specifically initialize other subsystems if you\nuse them in your application.\n\nLogging (such as SDL_Log) works without initialization, too.\n\n`flags` may be any of the following OR'd together:\n\n- `SDL_INIT_AUDIO`: audio subsystem; automatically initializes the events\n  subsystem\n- `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events\n  subsystem, should be initialized on the main thread.\n- `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the\n  events subsystem\n- `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem\n- `SDL_INIT_GAMEPAD`: gamepad subsystem; automatically initializes the\n  joystick subsystem\n- `SDL_INIT_EVENTS`: events subsystem\n- `SDL_INIT_SENSOR`: sensor subsystem; automatically initializes the events\n  subsystem\n- `SDL_INIT_CAMERA`: camera subsystem; automatically initializes the events\n  subsystem\n\nSubsystem initialization is ref-counted, you must call SDL_QuitSubSystem()\nfor each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or\ncall SDL_Quit() to force shutdown). If a subsystem is already loaded then\nthis call will increase the ref-count and return.\n\nConsider reporting some basic metadata about your application before\ncalling SDL_Init, using either SDL_SetAppMetadata() or\nSDL_SetAppMetadataProperty().\n\n\\param flags subsystem initialization flags.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAppMetadata\n\\sa SDL_SetAppMetadataProperty\n\\sa SDL_InitSubSystem\n\\sa SDL_Quit\n\\sa SDL_SetMainReady\n\\sa SDL_WasInit",
          "name": "SDL_Init",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "flags",
              "type": "SDL_InitFlags"
            }
          ]
        },
        "SDL_InitSubSystem": {
          "doc": "Compatibility function to initialize the SDL library.\n\nThis function and SDL_Init() are interchangeable.\n\n\\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Init\n\\sa SDL_Quit\n\\sa SDL_QuitSubSystem",
          "name": "SDL_InitSubSystem",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "flags",
              "type": "SDL_InitFlags"
            }
          ]
        },
        "SDL_QuitSubSystem": {
          "doc": "Shut down specific SDL subsystems.\n\nYou still need to call SDL_Quit() even if you close all open subsystems\nwith SDL_QuitSubSystem().\n\n\\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_InitSubSystem\n\\sa SDL_Quit",
          "name": "SDL_QuitSubSystem",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "flags",
              "type": "SDL_InitFlags"
            }
          ]
        },
        "SDL_WasInit": {
          "doc": "Get a mask of the specified subsystems which are currently initialized.\n\n\\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n\\returns a mask of all initialized subsystems if `flags` is 0, otherwise it\n         returns the initialization status of the specified subsystems.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Init\n\\sa SDL_InitSubSystem",
          "name": "SDL_WasInit",
          "kind": "function",
          "type": "SDL_InitFlags",
          "parameters": [
            {
              "name": "flags",
              "type": "SDL_InitFlags"
            }
          ]
        },
        "SDL_Quit": {
          "doc": "Clean up all initialized subsystems.\n\nYou should call this function even if you have already shutdown each\ninitialized subsystem with SDL_QuitSubSystem(). It is safe to call this\nfunction even in the case of errors in initialization.\n\nYou can use this function with atexit() to ensure that it is run when your\napplication is shutdown, but it is not wise to do this from a library or\nother dynamically loaded code.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Init\n\\sa SDL_QuitSubSystem",
          "name": "SDL_Quit",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_IsMainThread": {
          "doc": "Return whether this is the main thread.\n\nOn Apple platforms, the main thread is the thread that runs your program's\nmain() entry point. On other platforms, the main thread is the one that\ncalls SDL_Init(SDL_INIT_VIDEO), which should usually be the one that runs\nyour program's main() entry point. If you are using the main callbacks,\nSDL_AppInit(), SDL_AppIterate(), and SDL_AppQuit() are all called on the\nmain thread.\n\n\\returns true if this thread is the main thread, or false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RunOnMainThread",
          "name": "SDL_IsMainThread",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_MainThreadCallback": {
          "doc": "Callback run on the main thread.\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_RunOnMainThread",
          "name": "SDL_MainThreadCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_RunOnMainThread": {
          "doc": "Call a function on the main thread during event processing.\n\nIf this is called on the main thread, the callback is executed immediately.\nIf this is called on another thread, this callback is queued for execution\non the main thread during event processing.\n\nBe careful of deadlocks when using this functionality. You should not have\nthe main thread wait for the current thread while this function is being\ncalled with `wait_complete` true.\n\n\\param callback the callback to call on the main thread.\n\\param userdata a pointer that is passed to `callback`.\n\\param wait_complete true to wait for the callback to complete, false to\n                     return immediately.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_IsMainThread",
          "name": "SDL_RunOnMainThread",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_MainThreadCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "wait_complete",
              "type": "bool"
            }
          ]
        },
        "SDL_SetAppMetadata": {
          "doc": "Specify basic metadata about your app.\n\nYou can optionally provide metadata about your app to SDL. This is not\nrequired, but strongly encouraged.\n\nThere are several locations where SDL can make use of metadata (an \"About\"\nbox in the macOS menu bar, the name of the app can be shown on some audio\nmixers, etc). Any piece of metadata can be left as NULL, if a specific\ndetail doesn't make sense for the app.\n\nThis function should be called as early as possible, before SDL_Init.\nMultiple calls to this function are allowed, but various state might not\nchange once it has been set up with a previous call to this function.\n\nPassing a NULL removes any previous metadata.\n\nThis is a simplified interface for the most important information. You can\nsupply significantly more detailed metadata with\nSDL_SetAppMetadataProperty().\n\n\\param appname The name of the application (\"My Game 2: Bad Guy's\n               Revenge!\").\n\\param appversion The version of the application (\"1.0.0beta5\" or a git\n                  hash, or whatever makes sense).\n\\param appidentifier A unique string in reverse-domain format that\n                     identifies this app (\"com.example.mygame2\").\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAppMetadataProperty",
          "name": "SDL_SetAppMetadata",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "appname",
              "type": "const char *"
            },
            {
              "name": "appversion",
              "type": "const char *"
            },
            {
              "name": "appidentifier",
              "type": "const char *"
            }
          ]
        },
        "SDL_SetAppMetadataProperty": {
          "doc": "Specify metadata about your app through a set of properties.\n\nYou can optionally provide metadata about your app to SDL. This is not\nrequired, but strongly encouraged.\n\nThere are several locations where SDL can make use of metadata (an \"About\"\nbox in the macOS menu bar, the name of the app can be shown on some audio\nmixers, etc). Any piece of metadata can be left out, if a specific detail\ndoesn't make sense for the app.\n\nThis function should be called as early as possible, before SDL_Init.\nMultiple calls to this function are allowed, but various state might not\nchange once it has been set up with a previous call to this function.\n\nOnce set, this metadata can be read using SDL_GetAppMetadataProperty().\n\nThese are the supported properties:\n\n- `SDL_PROP_APP_METADATA_NAME_STRING`: The human-readable name of the\n  application, like \"My Game 2: Bad Guy's Revenge!\". This will show up\n  anywhere the OS shows the name of the application separately from window\n  titles, such as volume control applets, etc. This defaults to \"SDL\n  Application\".\n- `SDL_PROP_APP_METADATA_VERSION_STRING`: The version of the app that is\n  running; there are no rules on format, so \"1.0.3beta2\" and \"April 22nd,\n  2024\" and a git hash are all valid options. This has no default.\n- `SDL_PROP_APP_METADATA_IDENTIFIER_STRING`: A unique string that\n  identifies this app. This must be in reverse-domain format, like\n  \"com.example.mygame2\". This string is used by desktop compositors to\n  identify and group windows together, as well as match applications with\n  associated desktop settings and icons. If you plan to package your\n  application in a container such as Flatpak, the app ID should match the\n  name of your Flatpak container as well. This has no default.\n- `SDL_PROP_APP_METADATA_CREATOR_STRING`: The human-readable name of the\n  creator/developer/maker of this app, like \"MojoWorkshop, LLC\"\n- `SDL_PROP_APP_METADATA_COPYRIGHT_STRING`: The human-readable copyright\n  notice, like \"Copyright (c) 2024 MojoWorkshop, LLC\" or whatnot. Keep this\n  to one line, don't paste a copy of a whole software license in here. This\n  has no default.\n- `SDL_PROP_APP_METADATA_URL_STRING`: A URL to the app on the web. Maybe a\n  product page, or a storefront, or even a GitHub repository, for user's\n  further information This has no default.\n- `SDL_PROP_APP_METADATA_TYPE_STRING`: The type of application this is.\n  Currently this string can be \"game\" for a video game, \"mediaplayer\" for a\n  media player, or generically \"application\" if nothing else applies.\n  Future versions of SDL might add new types. This defaults to\n  \"application\".\n\n\\param name the name of the metadata property to set.\n\\param value the value of the property, or NULL to remove that property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAppMetadataProperty\n\\sa SDL_SetAppMetadata",
          "name": "SDL_SetAppMetadataProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            }
          ]
        },
        "SDL_PROP_APP_METADATA_NAME_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_NAME_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.name\""
        },
        "SDL_PROP_APP_METADATA_VERSION_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_VERSION_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.version\""
        },
        "SDL_PROP_APP_METADATA_IDENTIFIER_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_IDENTIFIER_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.identifier\""
        },
        "SDL_PROP_APP_METADATA_CREATOR_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_CREATOR_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.creator\""
        },
        "SDL_PROP_APP_METADATA_COPYRIGHT_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_COPYRIGHT_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.copyright\""
        },
        "SDL_PROP_APP_METADATA_URL_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_URL_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.url\""
        },
        "SDL_PROP_APP_METADATA_TYPE_STRING": {
          "doc": "",
          "name": "SDL_PROP_APP_METADATA_TYPE_STRING",
          "kind": "def",
          "value": "\"SDL.app.metadata.type\""
        },
        "SDL_GetAppMetadataProperty": {
          "doc": "Get metadata about your app.\n\nThis returns metadata previously set using SDL_SetAppMetadata() or\nSDL_SetAppMetadataProperty(). See SDL_SetAppMetadataProperty() for the list\nof available properties and their meanings.\n\n\\param name the name of the metadata property to get.\n\\returns the current value of the metadata property, or the default if it\n         is not set, NULL for properties with no default.\n\n\\threadsafety It is safe to call this function from any thread, although\n              the string returned is not protected and could potentially be\n              freed if you call SDL_SetAppMetadataProperty() to set that\n              property from another thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAppMetadata\n\\sa SDL_SetAppMetadataProperty",
          "name": "SDL_GetAppMetadataProperty",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        }
      }
    },
    "SDL_hints.h": {
      "name": "SDL_hints.h",
      "doc": "# CategoryHints\n\nThis file contains functions to set and get configuration hints, as well as\nlisting each of them alphabetically.\n\nThe convention for naming hints is SDL_HINT_X, where \"SDL_X\" is the\nenvironment variable that can be used to override the default.\n\nIn general these hints are just that - they may or may not be supported or\napplicable on any given platform, but they provide a way for an application\nor user to give the library a hint as to how they would like the library to\nwork.",
      "entries": {
        "SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED": {
          "doc": "Specify the behavior of Alt+Tab while the keyboard is grabbed.\n\nBy default, SDL emulates Alt+Tab functionality while the keyboard is\ngrabbed and your window is full-screen. This prevents the user from getting\nstuck in your application if you've enabled keyboard grab.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will not handle Alt+Tab. Your application is responsible for\n  handling Alt+Tab while the keyboard is grabbed.\n- \"1\": SDL will minimize your window when Alt+Tab is pressed (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED",
          "kind": "def",
          "value": "\"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\""
        },
        "SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY": {
          "doc": "A variable to control whether the SDL activity is allowed to be re-created.\n\nIf this hint is true, the activity can be recreated on demand by the OS,\nand Java static data and C++ static data remain with their current values.\nIf this hint is false, then SDL will call exit() when you return from your\nmain function and the application will be terminated and then started fresh\neach time.\n\nThe variable can be set to the following values:\n\n- \"0\": The application starts fresh at each launch. (default)\n- \"1\": The application activity can be recreated by the OS.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY",
          "kind": "def",
          "value": "\"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\""
        },
        "SDL_HINT_ANDROID_BLOCK_ON_PAUSE": {
          "doc": "A variable to control whether the event loop will block itself when the app\nis paused.\n\nThe variable can be set to the following values:\n\n- \"0\": Non blocking.\n- \"1\": Blocking. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ANDROID_BLOCK_ON_PAUSE",
          "kind": "def",
          "value": "\"SDL_ANDROID_BLOCK_ON_PAUSE\""
        },
        "SDL_HINT_ANDROID_LOW_LATENCY_AUDIO": {
          "doc": "A variable to control whether low latency audio should be enabled.\n\nSome devices have poor quality output when this is enabled, but this is\nusually an improvement in audio latency.\n\nThe variable can be set to the following values:\n\n- \"0\": Low latency audio is not enabled.\n- \"1\": Low latency audio is enabled. (default)\n\nThis hint should be set before SDL audio is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ANDROID_LOW_LATENCY_AUDIO",
          "kind": "def",
          "value": "\"SDL_ANDROID_LOW_LATENCY_AUDIO\""
        },
        "SDL_HINT_ANDROID_TRAP_BACK_BUTTON": {
          "doc": "A variable to control whether we trap the Android back button to handle it\nmanually.\n\nThis is necessary for the right mouse button to work on some Android\ndevices, or to be able to trap the back button for use in your code\nreliably. If this hint is true, the back button will show up as an\nSDL_EVENT_KEY_DOWN / SDL_EVENT_KEY_UP pair with a keycode of\nSDL_SCANCODE_AC_BACK.\n\nThe variable can be set to the following values:\n\n- \"0\": Back button will be handled as usual for system. (default)\n- \"1\": Back button will be trapped, allowing you to handle the key press\n  manually. (This will also let right mouse click work on systems where the\n  right mouse button functions as back.)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ANDROID_TRAP_BACK_BUTTON",
          "kind": "def",
          "value": "\"SDL_ANDROID_TRAP_BACK_BUTTON\""
        },
        "SDL_HINT_APP_ID": {
          "doc": "A variable setting the app ID string.\n\nThis string is used by desktop compositors to identify and group windows\ntogether, as well as match applications with associated desktop settings\nand icons.\n\nThis will override SDL_PROP_APP_METADATA_IDENTIFIER_STRING, if set by the\napplication.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_APP_ID",
          "kind": "def",
          "value": "\"SDL_APP_ID\""
        },
        "SDL_HINT_APP_NAME": {
          "doc": "A variable setting the application name.\n\nThis hint lets you specify the application name sent to the OS when\nrequired. For example, this will often appear in volume control applets for\naudio streams, and in lists of applications which are inhibiting the\nscreensaver. You should use a string that describes your program (\"My Game\n2: The Revenge\")\n\nThis will override SDL_PROP_APP_METADATA_NAME_STRING, if set by the\napplication.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_APP_NAME",
          "kind": "def",
          "value": "\"SDL_APP_NAME\""
        },
        "SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS": {
          "doc": "A variable controlling whether controllers used with the Apple TV generate\nUI events.\n\nWhen UI events are generated by controller input, the app will be\nbackgrounded when the Apple TV remote's menu button is pressed, and when\nthe pause or B buttons on gamepads are pressed.\n\nMore information about properly making use of controllers for the Apple TV\ncan be found here:\nhttps://developer.apple.com/tvos/human-interface-guidelines/remote-and-controllers/\n\nThe variable can be set to the following values:\n\n- \"0\": Controller input does not generate UI events. (default)\n- \"1\": Controller input generates UI events.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS",
          "kind": "def",
          "value": "\"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\""
        },
        "SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION": {
          "doc": "A variable controlling whether the Apple TV remote's joystick axes will\nautomatically match the rotation of the remote.\n\nThe variable can be set to the following values:\n\n- \"0\": Remote orientation does not affect joystick axes. (default)\n- \"1\": Joystick axes are based on the orientation of the remote.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION",
          "kind": "def",
          "value": "\"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\""
        },
        "SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE": {
          "doc": "Specify the default ALSA audio device name.\n\nThis variable is a specific audio device to open when the \"default\" audio\ndevice is used.\n\nThis hint will be ignored when opening the default playback device if\nSDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE is set, or when opening the\ndefault recording device if SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE is\nset.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.\n\n\\sa SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE\n\\sa SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE",
          "name": "SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE",
          "kind": "def",
          "value": "\"SDL_AUDIO_ALSA_DEFAULT_DEVICE\""
        },
        "SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE": {
          "doc": "Specify the default ALSA audio playback device name.\n\nThis variable is a specific audio device to open for playback, when the\n\"default\" audio device is used.\n\nIf this hint isn't set, SDL will check SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE\nbefore choosing a reasonable default.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.\n\n\\sa SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE\n\\sa SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE",
          "name": "SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE",
          "kind": "def",
          "value": "\"SDL_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE\""
        },
        "SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE": {
          "doc": "Specify the default ALSA audio recording device name.\n\nThis variable is a specific audio device to open for recording, when the\n\"default\" audio device is used.\n\nIf this hint isn't set, SDL will check SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE\nbefore choosing a reasonable default.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.\n\n\\sa SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE\n\\sa SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE",
          "name": "SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE",
          "kind": "def",
          "value": "\"SDL_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE\""
        },
        "SDL_HINT_AUDIO_CATEGORY": {
          "doc": "A variable controlling the audio category on iOS and macOS.\n\nThe variable can be set to the following values:\n\n- \"ambient\": Use the AVAudioSessionCategoryAmbient audio category, will be\n  muted by the phone mute switch (default)\n- \"playback\": Use the AVAudioSessionCategoryPlayback category.\n\nFor more information, see Apple's documentation:\nhttps://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/AudioSessionCategoriesandModes/AudioSessionCategoriesandModes.html\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_CATEGORY",
          "kind": "def",
          "value": "\"SDL_AUDIO_CATEGORY\""
        },
        "SDL_HINT_AUDIO_CHANNELS": {
          "doc": "A variable controlling the default audio channel count.\n\nIf the application doesn't specify the audio channel count when opening the\ndevice, this hint can be used to specify a default channel count that will\nbe used. This defaults to \"1\" for recording and \"2\" for playback devices.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_CHANNELS",
          "kind": "def",
          "value": "\"SDL_AUDIO_CHANNELS\""
        },
        "SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME": {
          "doc": "Specify an application icon name for an audio device.\n\nSome audio backends (such as Pulseaudio and Pipewire) allow you to set an\nXDG icon name for your application. Among other things, this icon might\nshow up in a system control panel that lets the user adjust the volume on\nspecific audio streams instead of using one giant master volume slider.\nNote that this is unrelated to the icon used by the windowing system, which\nmay be set with SDL_SetWindowIcon (or via desktop file on Wayland).\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault, \"applications-games\", which is likely to be installed. See\nhttps://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html\nand\nhttps://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html\nfor the relevant XDG icon specs.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME",
          "kind": "def",
          "value": "\"SDL_AUDIO_DEVICE_APP_ICON_NAME\""
        },
        "SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES": {
          "doc": "A variable controlling device buffer size.\n\nThis hint is an integer > 0, that represents the size of the device's\nbuffer in sample frames (stereo audio data in 16-bit format is 4 bytes per\nsample frame, for example).\n\nSDL3 generally decides this value on behalf of the app, but if for some\nreason the app needs to dictate this (because they want either lower\nlatency or higher throughput AND ARE WILLING TO DEAL WITH what that might\nrequire of the app), they can specify it.\n\nSDL will try to accommodate this value, but there is no promise you'll get\nthe buffer size requested. Many platforms won't honor this request at all,\nor might adjust it.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES",
          "kind": "def",
          "value": "\"SDL_AUDIO_DEVICE_SAMPLE_FRAMES\""
        },
        "SDL_HINT_AUDIO_DEVICE_STREAM_NAME": {
          "doc": "Specify an audio stream name for an audio device.\n\nSome audio backends (such as PulseAudio) allow you to describe your audio\nstream. Among other things, this description might show up in a system\ncontrol panel that lets the user adjust the volume on specific audio\nstreams instead of using one giant master volume slider.\n\nThis hints lets you transmit that information to the OS. The contents of\nthis hint are used while opening an audio device. You should use a string\nthat describes your what your program is playing (\"audio stream\" is\nprobably sufficient in many cases, but this could be useful for something\nlike \"team chat\" if you have a headset playing VoIP audio separately).\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault: \"audio stream\" or something similar.\n\nNote that while this talks about audio streams, this is an OS-level\nconcept, so it applies to a physical audio device in this case, and not an\nSDL_AudioStream, nor an SDL logical audio device.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DEVICE_STREAM_NAME",
          "kind": "def",
          "value": "\"SDL_AUDIO_DEVICE_STREAM_NAME\""
        },
        "SDL_HINT_AUDIO_DEVICE_STREAM_ROLE": {
          "doc": "Specify an application role for an audio device.\n\nSome audio backends (such as Pipewire) allow you to describe the role of\nyour audio stream. Among other things, this description might show up in a\nsystem control panel or software for displaying and manipulating media\nplayback/recording graphs.\n\nThis hints lets you transmit that information to the OS. The contents of\nthis hint are used while opening an audio device. You should use a string\nthat describes your what your program is playing (Game, Music, Movie,\netc...).\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault: \"Game\" or something similar.\n\nNote that while this talks about audio streams, this is an OS-level\nconcept, so it applies to a physical audio device in this case, and not an\nSDL_AudioStream, nor an SDL logical audio device.\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DEVICE_STREAM_ROLE",
          "kind": "def",
          "value": "\"SDL_AUDIO_DEVICE_STREAM_ROLE\""
        },
        "SDL_HINT_AUDIO_DISK_INPUT_FILE": {
          "doc": "Specify the input file when recording audio using the disk audio driver.\n\nThis defaults to \"sdlaudio-in.raw\"\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DISK_INPUT_FILE",
          "kind": "def",
          "value": "\"SDL_AUDIO_DISK_INPUT_FILE\""
        },
        "SDL_HINT_AUDIO_DISK_OUTPUT_FILE": {
          "doc": "Specify the output file when playing audio using the disk audio driver.\n\nThis defaults to \"sdlaudio.raw\"\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DISK_OUTPUT_FILE",
          "kind": "def",
          "value": "\"SDL_AUDIO_DISK_OUTPUT_FILE\""
        },
        "SDL_HINT_AUDIO_DISK_TIMESCALE": {
          "doc": "A variable controlling the audio rate when using the disk audio driver.\n\nThe disk audio driver normally simulates real-time for the audio rate that\nwas specified, but you can use this variable to adjust this rate higher or\nlower down to 0. The default value is \"1.0\".\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DISK_TIMESCALE",
          "kind": "def",
          "value": "\"SDL_AUDIO_DISK_TIMESCALE\""
        },
        "SDL_HINT_AUDIO_DRIVER": {
          "doc": "A variable that specifies an audio backend to use.\n\nBy default, SDL will try all available audio backends in a reasonable order\nuntil it finds one that can work, but this hint allows the app or user to\nforce a specific driver, such as \"pipewire\" if, say, you are on PulseAudio\nbut want to try talking to the lower level instead.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DRIVER",
          "kind": "def",
          "value": "\"SDL_AUDIO_DRIVER\""
        },
        "SDL_HINT_AUDIO_DUMMY_TIMESCALE": {
          "doc": "A variable controlling the audio rate when using the dummy audio driver.\n\nThe dummy audio driver normally simulates real-time for the audio rate that\nwas specified, but you can use this variable to adjust this rate higher or\nlower down to 0. The default value is \"1.0\".\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_DUMMY_TIMESCALE",
          "kind": "def",
          "value": "\"SDL_AUDIO_DUMMY_TIMESCALE\""
        },
        "SDL_HINT_AUDIO_FORMAT": {
          "doc": "A variable controlling the default audio format.\n\nIf the application doesn't specify the audio format when opening the\ndevice, this hint can be used to specify a default format that will be\nused.\n\nThe variable can be set to the following values:\n\n- \"U8\": Unsigned 8-bit audio\n- \"S8\": Signed 8-bit audio\n- \"S16LE\": Signed 16-bit little-endian audio\n- \"S16BE\": Signed 16-bit big-endian audio\n- \"S16\": Signed 16-bit native-endian audio (default)\n- \"S32LE\": Signed 32-bit little-endian audio\n- \"S32BE\": Signed 32-bit big-endian audio\n- \"S32\": Signed 32-bit native-endian audio\n- \"F32LE\": Floating point little-endian audio\n- \"F32BE\": Floating point big-endian audio\n- \"F32\": Floating point native-endian audio\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_FORMAT",
          "kind": "def",
          "value": "\"SDL_AUDIO_FORMAT\""
        },
        "SDL_HINT_AUDIO_FREQUENCY": {
          "doc": "A variable controlling the default audio frequency.\n\nIf the application doesn't specify the audio frequency when opening the\ndevice, this hint can be used to specify a default frequency that will be\nused. This defaults to \"44100\".\n\nThis hint should be set before an audio device is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_FREQUENCY",
          "kind": "def",
          "value": "\"SDL_AUDIO_FREQUENCY\""
        },
        "SDL_HINT_AUDIO_INCLUDE_MONITORS": {
          "doc": "A variable that causes SDL to not ignore audio \"monitors\".\n\nThis is currently only used by the PulseAudio driver.\n\nBy default, SDL ignores audio devices that aren't associated with physical\nhardware. Changing this hint to \"1\" will expose anything SDL sees that\nappears to be an audio source or sink. This will add \"devices\" to the list\nthat the user probably doesn't want or need, but it can be useful in\nscenarios where you want to hook up SDL to some sort of virtual device,\netc.\n\nThe variable can be set to the following values:\n\n- \"0\": Audio monitor devices will be ignored. (default)\n- \"1\": Audio monitor devices will show up in the device list.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUDIO_INCLUDE_MONITORS",
          "kind": "def",
          "value": "\"SDL_AUDIO_INCLUDE_MONITORS\""
        },
        "SDL_HINT_AUTO_UPDATE_JOYSTICKS": {
          "doc": "A variable controlling whether SDL updates joystick state when getting\ninput events.\n\nThe variable can be set to the following values:\n\n- \"0\": You'll call SDL_UpdateJoysticks() manually.\n- \"1\": SDL will automatically call SDL_UpdateJoysticks(). (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUTO_UPDATE_JOYSTICKS",
          "kind": "def",
          "value": "\"SDL_AUTO_UPDATE_JOYSTICKS\""
        },
        "SDL_HINT_AUTO_UPDATE_SENSORS": {
          "doc": "A variable controlling whether SDL updates sensor state when getting input\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": You'll call SDL_UpdateSensors() manually.\n- \"1\": SDL will automatically call SDL_UpdateSensors(). (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_AUTO_UPDATE_SENSORS",
          "kind": "def",
          "value": "\"SDL_AUTO_UPDATE_SENSORS\""
        },
        "SDL_HINT_BMP_SAVE_LEGACY_FORMAT": {
          "doc": "Prevent SDL from using version 4 of the bitmap header when saving BMPs.\n\nThe bitmap header version 4 is required for proper alpha channel support\nand SDL will use it when required. Should this not be desired, this hint\ncan force the use of the 40 byte header version which is supported\neverywhere.\n\nThe variable can be set to the following values:\n\n- \"0\": Surfaces with a colorkey or an alpha channel are saved to a 32-bit\n  BMP file with an alpha mask. SDL will use the bitmap header version 4 and\n  set the alpha mask accordingly. (default)\n- \"1\": Surfaces with a colorkey or an alpha channel are saved to a 32-bit\n  BMP file without an alpha mask. The alpha channel data will be in the\n  file, but applications are going to ignore it.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_BMP_SAVE_LEGACY_FORMAT",
          "kind": "def",
          "value": "\"SDL_BMP_SAVE_LEGACY_FORMAT\""
        },
        "SDL_HINT_CAMERA_DRIVER": {
          "doc": "A variable that decides what camera backend to use.\n\nBy default, SDL will try all available camera backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target, such as \"directshow\" if, say, you are on\nWindows Media Foundations but want to try DirectShow instead.\n\nThe default value is unset, in which case SDL will try to figure out the\nbest camera backend on your behalf. This hint needs to be set before\nSDL_Init() is called to be useful.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_CAMERA_DRIVER",
          "kind": "def",
          "value": "\"SDL_CAMERA_DRIVER\""
        },
        "SDL_HINT_CPU_FEATURE_MASK": {
          "doc": "A variable that limits what CPU features are available.\n\nBy default, SDL marks all features the current CPU supports as available.\nThis hint allows to limit these to a subset.\n\nWhen the hint is unset, or empty, SDL will enable all detected CPU\nfeatures.\n\nThe variable can be set to a comma separated list containing the following\nitems:\n\n- \"all\"\n- \"altivec\"\n- \"sse\"\n- \"sse2\"\n- \"sse3\"\n- \"sse41\"\n- \"sse42\"\n- \"avx\"\n- \"avx2\"\n- \"avx512f\"\n- \"arm-simd\"\n- \"neon\"\n- \"lsx\"\n- \"lasx\"\n\nThe items can be prefixed by '+'/'-' to add/remove features.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_CPU_FEATURE_MASK",
          "kind": "def",
          "value": "\"SDL_CPU_FEATURE_MASK\""
        },
        "SDL_HINT_JOYSTICK_DIRECTINPUT": {
          "doc": "A variable controlling whether DirectInput should be used for controllers.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable DirectInput detection.\n- \"1\": Enable DirectInput detection. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_DIRECTINPUT",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_DIRECTINPUT\""
        },
        "SDL_HINT_FILE_DIALOG_DRIVER": {
          "doc": "A variable that specifies a dialog backend to use.\n\nBy default, SDL will try all available dialog backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target.\n\nIf the specified target does not exist or is not available, the\ndialog-related function calls will fail.\n\nThis hint currently only applies to platforms using the generic \"Unix\"\ndialog implementation, but may be extended to more platforms in the future.\nNote that some Unix and Unix-like platforms have their own implementation,\nsuch as macOS and Haiku.\n\nThe variable can be set to the following values:\n\n- NULL: Select automatically (default, all platforms)\n- \"portal\": Use XDG Portals through DBus (Unix only)\n- \"zenity\": Use the Zenity program (Unix only)\n\nMore options may be added in the future.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_FILE_DIALOG_DRIVER",
          "kind": "def",
          "value": "\"SDL_FILE_DIALOG_DRIVER\""
        },
        "SDL_HINT_DISPLAY_USABLE_BOUNDS": {
          "doc": "Override for SDL_GetDisplayUsableBounds().\n\nIf set, this hint will override the expected results for\nSDL_GetDisplayUsableBounds() for display index 0. Generally you don't want\nto do this, but this allows an embedded system to request that some of the\nscreen be reserved for other uses when paired with a well-behaved\napplication.\n\nThe contents of this hint must be 4 comma-separated integers, the first is\nthe bounds x, then y, width and height, in that order.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_DISPLAY_USABLE_BOUNDS",
          "kind": "def",
          "value": "\"SDL_DISPLAY_USABLE_BOUNDS\""
        },
        "SDL_HINT_EMSCRIPTEN_ASYNCIFY": {
          "doc": "Disable giving back control to the browser automatically when running with\nasyncify.\n\nWith -s ASYNCIFY, SDL calls emscripten_sleep during operations such as\nrefreshing the screen or polling events.\n\nThis hint only applies to the emscripten platform.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable emscripten_sleep calls (if you give back browser control\n  manually or use asyncify for other purposes).\n- \"1\": Enable emscripten_sleep calls. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_EMSCRIPTEN_ASYNCIFY",
          "kind": "def",
          "value": "\"SDL_EMSCRIPTEN_ASYNCIFY\""
        },
        "SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR": {
          "doc": "Specify the CSS selector used for the \"default\" window/canvas.\n\nThis hint only applies to the emscripten platform.\n\nThe default value is \"#canvas\"\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR",
          "kind": "def",
          "value": "\"SDL_EMSCRIPTEN_CANVAS_SELECTOR\""
        },
        "SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT": {
          "doc": "Override the binding element for keyboard inputs for Emscripten builds.\n\nThis hint only applies to the emscripten platform.\n\nThe variable can be one of:\n\n- \"#window\": the javascript window object (default)\n- \"#document\": the javascript document object\n- \"#screen\": the javascript window.screen object\n- \"#canvas\": the WebGL canvas element\n- \"#none\": Don't bind anything at all\n- any other string without a leading # sign applies to the element on the\n  page with that ID.\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT",
          "kind": "def",
          "value": "\"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\""
        },
        "SDL_HINT_ENABLE_SCREEN_KEYBOARD": {
          "doc": "A variable that controls whether the on-screen keyboard should be shown\nwhen text input is active.\n\nThe variable can be set to the following values:\n\n- \"auto\": The on-screen keyboard will be shown if there is no physical\n  keyboard attached. (default)\n- \"0\": Do not show the on-screen keyboard.\n- \"1\": Show the on-screen keyboard, if available.\n\nThis hint must be set before SDL_StartTextInput() is called\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ENABLE_SCREEN_KEYBOARD",
          "kind": "def",
          "value": "\"SDL_ENABLE_SCREEN_KEYBOARD\""
        },
        "SDL_HINT_EVDEV_DEVICES": {
          "doc": "A variable containing a list of evdev devices to use if udev is not\navailable.\n\nThe list of devices is in the form:\n\ndeviceclass:path[,deviceclass:path[,...]]\n\nwhere device class is an integer representing the SDL_UDEV_deviceclass and\npath is the full path to the event device.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_EVDEV_DEVICES",
          "kind": "def",
          "value": "\"SDL_EVDEV_DEVICES\""
        },
        "SDL_HINT_EVENT_LOGGING": {
          "doc": "A variable controlling verbosity of the logging of SDL events pushed onto\nthe internal queue.\n\nThe variable can be set to the following values, from least to most\nverbose:\n\n- \"0\": Don't log any events. (default)\n- \"1\": Log most events (other than the really spammy ones).\n- \"2\": Include mouse and finger motion events.\n\nThis is generally meant to be used to debug SDL itself, but can be useful\nfor application developers that need better visibility into what is going\non in the event queue. Logged events are sent through SDL_Log(), which\nmeans by default they appear on stdout on most platforms or maybe\nOutputDebugString() on Windows, and can be funneled by the app with\nSDL_SetLogOutputFunction(), etc.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_EVENT_LOGGING",
          "kind": "def",
          "value": "\"SDL_EVENT_LOGGING\""
        },
        "SDL_HINT_FORCE_RAISEWINDOW": {
          "doc": "A variable controlling whether raising the window should be done more\nforcefully.\n\nThe variable can be set to the following values:\n\n- \"0\": Honor the OS policy for raising windows. (default)\n- \"1\": Force the window to be raised, overriding any OS policy.\n\nAt present, this is only an issue under MS Windows, which makes it nearly\nimpossible to programmatically move a window to the foreground, for\n\"security\" reasons. See http://stackoverflow.com/a/34414846 for a\ndiscussion.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_FORCE_RAISEWINDOW",
          "kind": "def",
          "value": "\"SDL_FORCE_RAISEWINDOW\""
        },
        "SDL_HINT_FRAMEBUFFER_ACCELERATION": {
          "doc": "A variable controlling how 3D acceleration is used to accelerate the SDL\nscreen surface.\n\nSDL can try to accelerate the SDL screen surface by using streaming\ntextures with a 3D rendering engine. This variable controls whether and how\nthis is done.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable 3D acceleration\n- \"1\": Enable 3D acceleration, using the default renderer. (default)\n- \"X\": Enable 3D acceleration, using X where X is one of the valid\n  rendering drivers. (e.g. \"direct3d\", \"opengl\", etc.)\n\nThis hint should be set before calling SDL_GetWindowSurface()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_FRAMEBUFFER_ACCELERATION",
          "kind": "def",
          "value": "\"SDL_FRAMEBUFFER_ACCELERATION\""
        },
        "SDL_HINT_GAMECONTROLLERCONFIG": {
          "doc": "A variable that lets you manually hint extra gamecontroller db entries.\n\nThe variable should be newline delimited rows of gamecontroller config\ndata, see SDL_gamepad.h\n\nYou can update mappings after SDL is initialized with\nSDL_GetGamepadMappingForGUID() and SDL_AddGamepadMapping()\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GAMECONTROLLERCONFIG",
          "kind": "def",
          "value": "\"SDL_GAMECONTROLLERCONFIG\""
        },
        "SDL_HINT_GAMECONTROLLERCONFIG_FILE": {
          "doc": "A variable that lets you provide a file with extra gamecontroller db\nentries.\n\nThe file should contain lines of gamecontroller config data, see\nSDL_gamepad.h\n\nYou can update mappings after SDL is initialized with\nSDL_GetGamepadMappingForGUID() and SDL_AddGamepadMapping()\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GAMECONTROLLERCONFIG_FILE",
          "kind": "def",
          "value": "\"SDL_GAMECONTROLLERCONFIG_FILE\""
        },
        "SDL_HINT_GAMECONTROLLERTYPE": {
          "doc": "A variable that overrides the automatic controller type detection.\n\nThe variable should be comma separated entries, in the form: VID/PID=type\n\nThe VID and PID should be hexadecimal with exactly 4 digits, e.g. 0x00fd\n\nThis hint affects what low level protocol is used with the HIDAPI driver.\n\nThe variable can be set to the following values:\n\n- \"Xbox360\"\n- \"XboxOne\"\n- \"PS3\"\n- \"PS4\"\n- \"PS5\"\n- \"SwitchPro\"\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GAMECONTROLLERTYPE",
          "kind": "def",
          "value": "\"SDL_GAMECONTROLLERTYPE\""
        },
        "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES": {
          "doc": "A variable containing a list of devices to skip when scanning for game\ncontrollers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n0xAAAA/0xBBBB,0xCCCC/0xDDDD\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES",
          "kind": "def",
          "value": "\"SDL_GAMECONTROLLER_IGNORE_DEVICES\""
        },
        "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT": {
          "doc": "If set, all devices will be skipped when scanning for game controllers\nexcept for the ones listed in this variable.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n0xAAAA/0xBBBB,0xCCCC/0xDDDD\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT",
          "kind": "def",
          "value": "\"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\""
        },
        "SDL_HINT_GAMECONTROLLER_SENSOR_FUSION": {
          "doc": "A variable that controls whether the device's built-in accelerometer and\ngyro should be used as sensors for gamepads.\n\nThe variable can be set to the following values:\n\n- \"0\": Sensor fusion is disabled\n- \"1\": Sensor fusion is enabled for all controllers that lack sensors\n\nOr the variable can be a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n0xAAAA/0xBBBB,0xCCCC/0xDDDD\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before a gamepad is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GAMECONTROLLER_SENSOR_FUSION",
          "kind": "def",
          "value": "\"SDL_GAMECONTROLLER_SENSOR_FUSION\""
        },
        "SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT": {
          "doc": "This variable sets the default text of the TextInput window on GDK\nplatforms.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling SDL_StartTextInput()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT",
          "kind": "def",
          "value": "\"SDL_GDK_TEXTINPUT_DEFAULT_TEXT\""
        },
        "SDL_HINT_GDK_TEXTINPUT_DESCRIPTION": {
          "doc": "This variable sets the description of the TextInput window on GDK\nplatforms.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling SDL_StartTextInput()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GDK_TEXTINPUT_DESCRIPTION",
          "kind": "def",
          "value": "\"SDL_GDK_TEXTINPUT_DESCRIPTION\""
        },
        "SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH": {
          "doc": "This variable sets the maximum input length of the TextInput window on GDK\nplatforms.\n\nThe value must be a stringified integer, for example \"10\" to allow for up\nto 10 characters of text input.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling SDL_StartTextInput()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH",
          "kind": "def",
          "value": "\"SDL_GDK_TEXTINPUT_MAX_LENGTH\""
        },
        "SDL_HINT_GDK_TEXTINPUT_SCOPE": {
          "doc": "This variable sets the input scope of the TextInput window on GDK\nplatforms.\n\nSet this hint to change the XGameUiTextEntryInputScope value that will be\npassed to the window creation function. The value must be a stringified\ninteger, for example \"0\" for XGameUiTextEntryInputScope::Default.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling SDL_StartTextInput()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GDK_TEXTINPUT_SCOPE",
          "kind": "def",
          "value": "\"SDL_GDK_TEXTINPUT_SCOPE\""
        },
        "SDL_HINT_GDK_TEXTINPUT_TITLE": {
          "doc": "This variable sets the title of the TextInput window on GDK platforms.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling SDL_StartTextInput()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GDK_TEXTINPUT_TITLE",
          "kind": "def",
          "value": "\"SDL_GDK_TEXTINPUT_TITLE\""
        },
        "SDL_HINT_HIDAPI_LIBUSB": {
          "doc": "A variable to control whether HIDAPI uses libusb for device access.\n\nBy default libusb will only be used for a few devices that require direct\nUSB access, and this can be controlled with\nSDL_HINT_HIDAPI_LIBUSB_WHITELIST.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI will not use libusb for device access.\n- \"1\": HIDAPI will use libusb for device access if available. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_HIDAPI_LIBUSB",
          "kind": "def",
          "value": "\"SDL_HIDAPI_LIBUSB\""
        },
        "SDL_HINT_HIDAPI_LIBUSB_WHITELIST": {
          "doc": "A variable to control whether HIDAPI uses libusb only for whitelisted\ndevices.\n\nBy default libusb will only be used for a few devices that require direct\nUSB access.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI will use libusb for all device access.\n- \"1\": HIDAPI will use libusb only for whitelisted devices. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_HIDAPI_LIBUSB_WHITELIST",
          "kind": "def",
          "value": "\"SDL_HIDAPI_LIBUSB_WHITELIST\""
        },
        "SDL_HINT_HIDAPI_UDEV": {
          "doc": "A variable to control whether HIDAPI uses udev for device detection.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI will poll for device changes.\n- \"1\": HIDAPI will use udev for device detection. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_HIDAPI_UDEV",
          "kind": "def",
          "value": "\"SDL_HIDAPI_UDEV\""
        },
        "SDL_HINT_GPU_DRIVER": {
          "doc": "A variable that specifies a GPU backend to use.\n\nBy default, SDL will try all available GPU backends in a reasonable order\nuntil it finds one that can work, but this hint allows the app or user to\nforce a specific target, such as \"direct3d12\" if, say, your hardware\nsupports Vulkan but you want to try using D3D12 instead.\n\nThis hint should be set before any GPU functions are called.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_GPU_DRIVER",
          "kind": "def",
          "value": "\"SDL_GPU_DRIVER\""
        },
        "SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS": {
          "doc": "A variable to control whether SDL_hid_enumerate() enumerates all HID\ndevices or only controllers.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL_hid_enumerate() will enumerate all HID devices.\n- \"1\": SDL_hid_enumerate() will only enumerate controllers. (default)\n\nBy default SDL will only enumerate controllers, to reduce risk of hanging\nor crashing on devices with bad drivers and avoiding macOS keyboard capture\npermission prompts.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS",
          "kind": "def",
          "value": "\"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\""
        },
        "SDL_HINT_HIDAPI_IGNORE_DEVICES": {
          "doc": "A variable containing a list of devices to ignore in SDL_hid_enumerate().\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nFor example, to ignore the Shanwan DS3 controller and any Valve controller,\nyou might use the string \"0x2563/0x0523,0x28de/0x0000\"\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_HIDAPI_IGNORE_DEVICES",
          "kind": "def",
          "value": "\"SDL_HIDAPI_IGNORE_DEVICES\""
        },
        "SDL_HINT_IME_IMPLEMENTED_UI": {
          "doc": "A variable describing what IME UI elements the application can display.\n\nBy default IME UI is handled using native components by the OS where\npossible, however this can interfere with or not be visible when exclusive\nfullscreen mode is used.\n\nThe variable can be set to a comma separated list containing the following\nitems:\n\n- \"none\" or \"0\": The application can't render any IME elements, and native\n  UI should be used. (default)\n- \"composition\": The application handles SDL_EVENT_TEXT_EDITING events and\n  can render the composition text.\n- \"candidates\": The application handles SDL_EVENT_TEXT_EDITING_CANDIDATES\n  and can render the candidate list.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_IME_IMPLEMENTED_UI",
          "kind": "def",
          "value": "\"SDL_IME_IMPLEMENTED_UI\""
        },
        "SDL_HINT_IOS_HIDE_HOME_INDICATOR": {
          "doc": "A variable controlling whether the home indicator bar on iPhone X should be\nhidden.\n\nThe variable can be set to the following values:\n\n- \"0\": The indicator bar is not hidden. (default for windowed applications)\n- \"1\": The indicator bar is hidden and is shown when the screen is touched\n  (useful for movie playback applications).\n- \"2\": The indicator bar is dim and the first swipe makes it visible and\n  the second swipe performs the \"home\" action. (default for fullscreen\n  applications)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_IOS_HIDE_HOME_INDICATOR",
          "kind": "def",
          "value": "\"SDL_IOS_HIDE_HOME_INDICATOR\""
        },
        "SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS": {
          "doc": "A variable that lets you enable joystick (and gamecontroller) events even\nwhen your app is in the background.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable joystick & gamecontroller input events when the application\n  is in the background. (default)\n- \"1\": Enable joystick & gamecontroller input events when the application\n  is in the background.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\""
        },
        "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES": {
          "doc": "A variable containing a list of arcade stick style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_ARCADESTICK_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED": {
          "doc": "A variable containing a list of devices that are not arcade stick style\ncontrollers.\n\nThis will override SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED\""
        },
        "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES": {
          "doc": "A variable containing a list of devices that should not be considered\njoysticks.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_BLACKLIST_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED": {
          "doc": "A variable containing a list of devices that should be considered\njoysticks.\n\nThis will override SDL_HINT_JOYSTICK_BLACKLIST_DEVICES and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED\""
        },
        "SDL_HINT_JOYSTICK_DEVICE": {
          "doc": "A variable containing a comma separated list of devices to open as\njoysticks.\n\nThis variable is currently only used by the Linux joystick driver.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_DEVICE",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_DEVICE\""
        },
        "SDL_HINT_JOYSTICK_ENHANCED_REPORTS": {
          "doc": "A variable controlling whether enhanced reports should be used for\ncontrollers when using the HIDAPI driver.\n\nEnhanced reports allow rumble and effects on Bluetooth PlayStation\ncontrollers and gyro on Nintendo Switch controllers, but break Windows\nDirectInput for other applications that don't use SDL.\n\nOnce enhanced reports are enabled, they can't be disabled on PlayStation\ncontrollers without power cycling the controller.\n\nThe variable can be set to the following values:\n\n- \"0\": enhanced reports are not enabled.\n- \"1\": enhanced reports are enabled. (default)\n- \"auto\": enhanced features are advertised to the application, but SDL\n  doesn't change the controller report mode unless the application uses\n  them.\n\nThis hint can be enabled anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_ENHANCED_REPORTS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_ENHANCED_REPORTS\""
        },
        "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES": {
          "doc": "A variable containing a list of flightstick style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of @file, in which case the named file\nwill be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_FLIGHTSTICK_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED": {
          "doc": "A variable containing a list of devices that are not flightstick style\ncontrollers.\n\nThis will override SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED\""
        },
        "SDL_HINT_JOYSTICK_GAMEINPUT": {
          "doc": "A variable controlling whether GameInput should be used for controller\nhandling on Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": GameInput is not used.\n- \"1\": GameInput is used.\n\nThe default is \"1\" on GDK platforms, and \"0\" otherwise.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_GAMEINPUT",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_GAMEINPUT\""
        },
        "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES": {
          "doc": "A variable containing a list of devices known to have a GameCube form\nfactor.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_GAMECUBE_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED": {
          "doc": "A variable containing a list of devices known not to have a GameCube form\nfactor.\n\nThis will override SDL_HINT_JOYSTICK_GAMECUBE_DEVICES and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI": {
          "doc": "A variable controlling whether the HIDAPI joystick drivers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI drivers are not used.\n- \"1\": HIDAPI drivers are used. (default)\n\nThis variable is the default for all drivers, but can be overridden by the\nhints for specific drivers below.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS": {
          "doc": "A variable controlling whether Nintendo Switch Joy-Con controllers will be\ncombined into a single Pro-like controller when using the HIDAPI driver.\n\nThe variable can be set to the following values:\n\n- \"0\": Left and right Joy-Con controllers will not be combined and each\n  will be a mini-gamepad.\n- \"1\": Left and right Joy-Con controllers will be combined into a single\n  controller. (default)\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE": {
          "doc": "A variable controlling whether the HIDAPI driver for Nintendo GameCube\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_GAMECUBE\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE": {
          "doc": "A variable controlling whether rumble is used to implement the GameCube\ncontroller's 3 rumble modes, Stop(0), Rumble(1), and StopHard(2).\n\nThis is useful for applications that need full compatibility for things\nlike ADSR envelopes. - Stop is implemented by setting low_frequency_rumble\nto 0 and high_frequency_rumble >0 - Rumble is both at any arbitrary value -\nStopHard is implemented by setting both low_frequency_rumble and\nhigh_frequency_rumble to 0\n\nThe variable can be set to the following values:\n\n- \"0\": Normal rumble behavior is behavior is used. (default)\n- \"1\": Proper GameCube controller rumble behavior is used.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS": {
          "doc": "A variable controlling whether the HIDAPI driver for Nintendo Switch\nJoy-Cons should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_JOY_CONS\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED": {
          "doc": "A variable controlling whether the Home button LED should be turned on when\na Nintendo Switch Joy-Con controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": home button LED is turned off\n- \"1\": home button LED is turned on\n\nBy default the Home button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Home button LED.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_LUNA": {
          "doc": "A variable controlling whether the HIDAPI driver for Amazon Luna\ncontrollers connected via Bluetooth should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_LUNA",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_LUNA\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC": {
          "doc": "A variable controlling whether the HIDAPI driver for Nintendo Online\nclassic controllers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_PS3": {
          "doc": "A variable controlling whether the HIDAPI driver for PS3 controllers should\nbe used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI on macOS, and \"0\" on\nother platforms.\n\nFor official Sony driver (sixaxis.sys) use\nSDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER. See\nhttps://github.com/ViGEm/DsHidMini for an alternative driver on Windows.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_PS3",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_PS3\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER": {
          "doc": "A variable controlling whether the Sony driver (sixaxis.sys) for PS3\ncontrollers (Sixaxis/DualShock 3) should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": Sony driver (sixaxis.sys) is not used.\n- \"1\": Sony driver (sixaxis.sys) is used.\n\nThe default value is 0.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_PS4": {
          "doc": "A variable controlling whether the HIDAPI driver for PS4 controllers should\nbe used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_PS4",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_PS4\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL": {
          "doc": "A variable controlling the update rate of the PS4 controller over Bluetooth\nwhen using the HIDAPI driver.\n\nThis defaults to 4 ms, to match the behavior over USB, and to be more\nfriendly to other Bluetooth devices and older Bluetooth hardware on the\ncomputer. It can be set to \"1\" (1000Hz), \"2\" (500Hz) and \"4\" (250Hz)\n\nThis hint can be set anytime, but only takes effect when extended input\nreports are enabled.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_PS5": {
          "doc": "A variable controlling whether the HIDAPI driver for PS5 controllers should\nbe used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_PS5",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_PS5\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED": {
          "doc": "A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with a PS5 controller.\n\nThe variable can be set to the following values:\n\n- \"0\": player LEDs are not enabled.\n- \"1\": player LEDs are enabled. (default)\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_SHIELD": {
          "doc": "A variable controlling whether the HIDAPI driver for NVIDIA SHIELD\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_SHIELD",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_SHIELD\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_STADIA": {
          "doc": "A variable controlling whether the HIDAPI driver for Google Stadia\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_STADIA",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_STADIA\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_STEAM": {
          "doc": "A variable controlling whether the HIDAPI driver for Bluetooth Steam\nControllers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used. (default)\n- \"1\": HIDAPI driver is used for Steam Controllers, which requires\n  Bluetooth access and may prompt the user for permission on iOS and\n  Android.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_STEAM",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_STEAM\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED": {
          "doc": "A variable controlling whether the Steam button LED should be turned on\nwhen a Steam controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": Steam button LED is turned off.\n- \"1\": Steam button LED is turned on.\n\nBy default the Steam button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Steam button LED.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK": {
          "doc": "A variable controlling whether the HIDAPI driver for the Steam Deck builtin\ncontroller should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_STEAMDECK\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI": {
          "doc": "A variable controlling whether the HIDAPI driver for HORI licensed Steam\ncontrollers should be used.\n\nThis variable can be set to the following values: \"0\" - HIDAPI driver is\nnot used \"1\" - HIDAPI driver is used\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_STEAM_HORI\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_SWITCH": {
          "doc": "A variable controlling whether the HIDAPI driver for Nintendo Switch\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_SWITCH",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_SWITCH\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED": {
          "doc": "A variable controlling whether the Home button LED should be turned on when\na Nintendo Switch Pro controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": Home button LED is turned off.\n- \"1\": Home button LED is turned on.\n\nBy default the Home button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Home button LED.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED": {
          "doc": "A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with a Nintendo Switch controller.\n\nThe variable can be set to the following values:\n\n- \"0\": Player LEDs are not enabled.\n- \"1\": Player LEDs are enabled. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS": {
          "doc": "A variable controlling whether Nintendo Switch Joy-Con controllers will be\nin vertical mode when using the HIDAPI driver.\n\nThe variable can be set to the following values:\n\n- \"0\": Left and right Joy-Con controllers will not be in vertical mode.\n  (default)\n- \"1\": Left and right Joy-Con controllers will be in vertical mode.\n\nThis hint should be set before opening a Joy-Con controller.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_WII": {
          "doc": "A variable controlling whether the HIDAPI driver for Nintendo Wii and Wii U\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThis driver doesn't work with the dolphinbar, so the default is false for\nnow.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_WII",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_WII\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED": {
          "doc": "A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with a Wii controller.\n\nThe variable can be set to the following values:\n\n- \"0\": Player LEDs are not enabled.\n- \"1\": Player LEDs are enabled. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_XBOX": {
          "doc": "A variable controlling whether the HIDAPI driver for XBox controllers\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is \"0\" on Windows, otherwise the value of\nSDL_HINT_JOYSTICK_HIDAPI\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_XBOX",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_XBOX\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360": {
          "doc": "A variable controlling whether the HIDAPI driver for XBox 360 controllers\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI_XBOX\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_XBOX_360\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED": {
          "doc": "A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with an Xbox 360 controller.\n\nThe variable can be set to the following values:\n\n- \"0\": Player LEDs are not enabled.\n- \"1\": Player LEDs are enabled. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS": {
          "doc": "A variable controlling whether the HIDAPI driver for XBox 360 wireless\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI_XBOX_360\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE": {
          "doc": "A variable controlling whether the HIDAPI driver for XBox One controllers\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of SDL_HINT_JOYSTICK_HIDAPI_XBOX.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_XBOX_ONE\""
        },
        "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED": {
          "doc": "A variable controlling whether the Home button LED should be turned on when\nan Xbox One controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": Home button LED is turned off.\n- \"1\": Home button LED is turned on.\n\nBy default the Home button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Home button LED. The default brightness is 0.4.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\""
        },
        "SDL_HINT_JOYSTICK_IOKIT": {
          "doc": "A variable controlling whether IOKit should be used for controller\nhandling.\n\nThe variable can be set to the following values:\n\n- \"0\": IOKit is not used.\n- \"1\": IOKit is used. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_IOKIT",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_IOKIT\""
        },
        "SDL_HINT_JOYSTICK_LINUX_CLASSIC": {
          "doc": "A variable controlling whether to use the classic /dev/input/js* joystick\ninterface or the newer /dev/input/event* joystick interface on Linux.\n\nThe variable can be set to the following values:\n\n- \"0\": Use /dev/input/event* (default)\n- \"1\": Use /dev/input/js*\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_LINUX_CLASSIC",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_LINUX_CLASSIC\""
        },
        "SDL_HINT_JOYSTICK_LINUX_DEADZONES": {
          "doc": "A variable controlling whether joysticks on Linux adhere to their\nHID-defined deadzones or return unfiltered values.\n\nThe variable can be set to the following values:\n\n- \"0\": Return unfiltered joystick axis values. (default)\n- \"1\": Return axis values with deadzones taken into account.\n\nThis hint should be set before a controller is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_LINUX_DEADZONES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_LINUX_DEADZONES\""
        },
        "SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS": {
          "doc": "A variable controlling whether joysticks on Linux will always treat 'hat'\naxis inputs (ABS_HAT0X - ABS_HAT3Y) as 8-way digital hats without checking\nwhether they may be analog.\n\nThe variable can be set to the following values:\n\n- \"0\": Only map hat axis inputs to digital hat outputs if the input axes\n  appear to actually be digital. (default)\n- \"1\": Always handle the input axes numbered ABS_HAT0X to ABS_HAT3Y as\n  digital hats.\n\nThis hint should be set before a controller is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_LINUX_DIGITAL_HATS\""
        },
        "SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES": {
          "doc": "A variable controlling whether digital hats on Linux will apply deadzones\nto their underlying input axes or use unfiltered values.\n\nThe variable can be set to the following values:\n\n- \"0\": Return digital hat values based on unfiltered input axis values.\n- \"1\": Return digital hat values with deadzones on the input axes taken\n  into account. (default)\n\nThis hint should be set before a controller is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_LINUX_HAT_DEADZONES\""
        },
        "SDL_HINT_JOYSTICK_MFI": {
          "doc": "A variable controlling whether GCController should be used for controller\nhandling.\n\nThe variable can be set to the following values:\n\n- \"0\": GCController is not used.\n- \"1\": GCController is used. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_MFI",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_MFI\""
        },
        "SDL_HINT_JOYSTICK_RAWINPUT": {
          "doc": "A variable controlling whether the RAWINPUT joystick drivers should be used\nfor better handling XInput-capable devices.\n\nThe variable can be set to the following values:\n\n- \"0\": RAWINPUT drivers are not used.\n- \"1\": RAWINPUT drivers are used. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_RAWINPUT",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_RAWINPUT\""
        },
        "SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT": {
          "doc": "A variable controlling whether the RAWINPUT driver should pull correlated\ndata from XInput.\n\nThe variable can be set to the following values:\n\n- \"0\": RAWINPUT driver will only use data from raw input APIs.\n- \"1\": RAWINPUT driver will also pull data from XInput and\n  Windows.Gaming.Input, providing better trigger axes, guide button\n  presses, and rumble support for Xbox controllers. (default)\n\nThis hint should be set before a gamepad is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\""
        },
        "SDL_HINT_JOYSTICK_ROG_CHAKRAM": {
          "doc": "A variable controlling whether the ROG Chakram mice should show up as\njoysticks.\n\nThe variable can be set to the following values:\n\n- \"0\": ROG Chakram mice do not show up as joysticks. (default)\n- \"1\": ROG Chakram mice show up as joysticks.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_ROG_CHAKRAM",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_ROG_CHAKRAM\""
        },
        "SDL_HINT_JOYSTICK_THREAD": {
          "doc": "A variable controlling whether a separate thread should be used for\nhandling joystick detection and raw input messages on Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": A separate thread is not used.\n- \"1\": A separate thread is used for handling raw input messages. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_THREAD",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_THREAD\""
        },
        "SDL_HINT_JOYSTICK_THROTTLE_DEVICES": {
          "doc": "A variable containing a list of throttle style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_THROTTLE_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_THROTTLE_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED": {
          "doc": "A variable containing a list of devices that are not throttle style\ncontrollers.\n\nThis will override SDL_HINT_JOYSTICK_THROTTLE_DEVICES and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED\""
        },
        "SDL_HINT_JOYSTICK_WGI": {
          "doc": "A variable controlling whether Windows.Gaming.Input should be used for\ncontroller handling.\n\nThe variable can be set to the following values:\n\n- \"0\": WGI is not used.\n- \"1\": WGI is used. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_WGI",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_WGI\""
        },
        "SDL_HINT_JOYSTICK_WHEEL_DEVICES": {
          "doc": "A variable containing a list of wheel style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_WHEEL_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_WHEEL_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED": {
          "doc": "A variable containing a list of devices that are not wheel style\ncontrollers.\n\nThis will override SDL_HINT_JOYSTICK_WHEEL_DEVICES and the built in device\nlist.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED\""
        },
        "SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES": {
          "doc": "A variable containing a list of devices known to have all axes centered at\nzero.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before a controller is opened.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_ZERO_CENTERED_DEVICES\""
        },
        "SDL_HINT_JOYSTICK_HAPTIC_AXES": {
          "doc": "A variable containing a list of devices and their desired number of haptic\n(force feedback) enabled axis.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form plus the number of desired axes, e.g.\n\n`0xAAAA/0xBBBB/1,0xCCCC/0xDDDD/3`\n\nThis hint supports a \"wildcard\" device that will set the number of haptic\naxes on all initialized haptic devices which were not defined explicitly in\nthis hint.\n\n`0xFFFF/0xFFFF/1`\n\nThis hint should be set before a controller is opened. The number of haptic\naxes won't exceed the number of real axes found on the device.\n\n\\since This hint is available since SDL 3.2.5.",
          "name": "SDL_HINT_JOYSTICK_HAPTIC_AXES",
          "kind": "def",
          "value": "\"SDL_JOYSTICK_HAPTIC_AXES\""
        },
        "SDL_HINT_KEYCODE_OPTIONS": {
          "doc": "A variable that controls keycode representation in keyboard events.\n\nThis variable is a comma separated set of options for translating keycodes\nin events:\n\n- \"none\": Keycode options are cleared, this overrides other options.\n- \"hide_numpad\": The numpad keysyms will be translated into their\n  non-numpad versions based on the current NumLock state. For example,\n  SDLK_KP_4 would become SDLK_4 if SDL_KMOD_NUM is set in the event\n  modifiers, and SDLK_LEFT if it is unset.\n- \"french_numbers\": The number row on French keyboards is inverted, so\n  pressing the 1 key would yield the keycode SDLK_1, or '1', instead of\n  SDLK_AMPERSAND, or '&'\n- \"latin_letters\": For keyboards using non-Latin letters, such as Russian\n  or Thai, the letter keys generate keycodes as though it had an en_US\n  layout. e.g. pressing the key associated with SDL_SCANCODE_A on a Russian\n  keyboard would yield 'a' instead of a Cyrillic letter.\n\nThe default value for this hint is \"french_numbers,latin_letters\"\n\nSome platforms like Emscripten only provide modified keycodes and the\noptions are not used.\n\nThese options do not affect the return value of SDL_GetKeyFromScancode() or\nSDL_GetScancodeFromKey(), they just apply to the keycode included in key\nevents.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_KEYCODE_OPTIONS",
          "kind": "def",
          "value": "\"SDL_KEYCODE_OPTIONS\""
        },
        "SDL_HINT_KMSDRM_DEVICE_INDEX": {
          "doc": "A variable that controls what KMSDRM device to use.\n\nSDL might open something like \"/dev/dri/cardNN\" to access KMSDRM\nfunctionality, where \"NN\" is a device index number. SDL makes a guess at\nthe best index to use (usually zero), but the app or user can set this hint\nto a number between 0 and 99 to force selection.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_KMSDRM_DEVICE_INDEX",
          "kind": "def",
          "value": "\"SDL_KMSDRM_DEVICE_INDEX\""
        },
        "SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER": {
          "doc": "A variable that controls whether SDL requires DRM master access in order to\ninitialize the KMSDRM video backend.\n\nThe DRM subsystem has a concept of a \"DRM master\" which is a DRM client\nthat has the ability to set planes, set cursor, etc. When SDL is DRM\nmaster, it can draw to the screen using the SDL rendering APIs. Without DRM\nmaster, SDL is still able to process input and query attributes of attached\ndisplays, but it cannot change display state or draw to the screen\ndirectly.\n\nIn some cases, it can be useful to have the KMSDRM backend even if it\ncannot be used for rendering. An app may want to use SDL for input\nprocessing while using another rendering API (such as an MMAL overlay on\nRaspberry Pi) or using its own code to render to DRM overlays that SDL\ndoesn't support.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will allow usage of the KMSDRM backend without DRM master.\n- \"1\": SDL Will require DRM master to use the KMSDRM backend. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER",
          "kind": "def",
          "value": "\"SDL_KMSDRM_REQUIRE_DRM_MASTER\""
        },
        "SDL_HINT_LOGGING": {
          "doc": "A variable controlling the default SDL log levels.\n\nThis variable is a comma separated set of category=level tokens that define\nthe default logging levels for SDL applications.\n\nThe category can be a numeric category, one of \"app\", \"error\", \"assert\",\n\"system\", \"audio\", \"video\", \"render\", \"input\", \"test\", or `*` for any\nunspecified category.\n\nThe level can be a numeric level, one of \"verbose\", \"debug\", \"info\",\n\"warn\", \"error\", \"critical\", or \"quiet\" to disable that category.\n\nYou can omit the category if you want to set the logging level for all\ncategories.\n\nIf this hint isn't set, the default log levels are equivalent to:\n\n`app=info,assert=warn,test=verbose,*=error`\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_LOGGING",
          "kind": "def",
          "value": "\"SDL_LOGGING\""
        },
        "SDL_HINT_MAC_BACKGROUND_APP": {
          "doc": "A variable controlling whether to force the application to become the\nforeground process when launched on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": The application is brought to the foreground when launched.\n  (default)\n- \"1\": The application may remain in the background when launched.\n\nThis hint needs to be set before SDL_Init().\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MAC_BACKGROUND_APP",
          "kind": "def",
          "value": "\"SDL_MAC_BACKGROUND_APP\""
        },
        "SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK": {
          "doc": "A variable that determines whether Ctrl+Click should generate a right-click\nevent on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": Ctrl+Click does not generate a right mouse button click event.\n  (default)\n- \"1\": Ctrl+Click generated a right mouse button click event.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK",
          "kind": "def",
          "value": "\"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\""
        },
        "SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH": {
          "doc": "A variable controlling whether dispatching OpenGL context updates should\nblock the dispatching thread until the main thread finishes processing on\nmacOS.\n\nThe variable can be set to the following values:\n\n- \"0\": Dispatching OpenGL context updates will block the dispatching thread\n  until the main thread finishes processing. (default)\n- \"1\": Dispatching OpenGL context updates will allow the dispatching thread\n  to continue execution.\n\nGenerally you want the default, but if you have OpenGL code in a background\nthread on a Mac, and the main thread hangs because it's waiting for that\nbackground thread, but that background thread is also hanging because it's\nwaiting for the main thread to do an update, this might fix your issue.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH",
          "kind": "def",
          "value": "\"SDL_MAC_OPENGL_ASYNC_DISPATCH\""
        },
        "SDL_HINT_MAC_OPTION_AS_ALT": {
          "doc": "A variable controlling whether the Option key on macOS should be remapped\nto act as the Alt key.\n\nThe variable can be set to the following values:\n\n- \"none\": The Option key is not remapped to Alt. (default)\n- \"only_left\": Only the left Option key is remapped to Alt.\n- \"only_right\": Only the right Option key is remapped to Alt.\n- \"both\": Both Option keys are remapped to Alt.\n\nThis will prevent the triggering of key compositions that rely on the\nOption key, but will still send the Alt modifier for keyboard events. In\nthe case that both Alt and Option are pressed, the Option key will be\nignored. This is particularly useful for applications like terminal\nemulators and graphical user interfaces (GUIs) that rely on Alt key\nfunctionality for shortcuts or navigation. This does not apply to\nSDL_GetKeyFromScancode and only has an effect if IME is enabled.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MAC_OPTION_AS_ALT",
          "kind": "def",
          "value": "\"SDL_MAC_OPTION_AS_ALT\""
        },
        "SDL_HINT_MAC_SCROLL_MOMENTUM": {
          "doc": "A variable controlling whether SDL_EVENT_MOUSE_WHEEL event values will have\nmomentum on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": The mouse wheel events will have no momentum. (default)\n- \"1\": The mouse wheel events will have momentum.\n\nThis hint needs to be set before SDL_Init().\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MAC_SCROLL_MOMENTUM",
          "kind": "def",
          "value": "\"SDL_MAC_SCROLL_MOMENTUM\""
        },
        "SDL_HINT_MAIN_CALLBACK_RATE": {
          "doc": "Request SDL_AppIterate() be called at a specific rate.\n\nIf this is set to a number, it represents Hz, so \"60\" means try to iterate\n60 times per second. \"0\" means to iterate as fast as possible. Negative\nvalues are illegal, but reserved, in case they are useful in a future\nrevision of SDL.\n\nThere are other strings that have special meaning. If set to \"waitevent\",\nSDL_AppIterate will not be called until new event(s) have arrived (and been\nprocessed by SDL_AppEvent). This can be useful for apps that are completely\nidle except in response to input.\n\nOn some platforms, or if you are using SDL_main instead of SDL_AppIterate,\nthis hint is ignored. When the hint can be used, it is allowed to be\nchanged at any time.\n\nThis defaults to 0, and specifying NULL for the hint's value will restore\nthe default.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MAIN_CALLBACK_RATE",
          "kind": "def",
          "value": "\"SDL_MAIN_CALLBACK_RATE\""
        },
        "SDL_HINT_MOUSE_AUTO_CAPTURE": {
          "doc": "A variable controlling whether the mouse is captured while mouse buttons\nare pressed.\n\nThe variable can be set to the following values:\n\n- \"0\": The mouse is not captured while mouse buttons are pressed.\n- \"1\": The mouse is captured while mouse buttons are pressed.\n\nBy default the mouse is captured while mouse buttons are pressed so if the\nmouse is dragged outside the window, the application continues to receive\nmouse events until the button is released.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_AUTO_CAPTURE",
          "kind": "def",
          "value": "\"SDL_MOUSE_AUTO_CAPTURE\""
        },
        "SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS": {
          "doc": "A variable setting the double click radius, in pixels.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS",
          "kind": "def",
          "value": "\"SDL_MOUSE_DOUBLE_CLICK_RADIUS\""
        },
        "SDL_HINT_MOUSE_DOUBLE_CLICK_TIME": {
          "doc": "A variable setting the double click time, in milliseconds.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_DOUBLE_CLICK_TIME",
          "kind": "def",
          "value": "\"SDL_MOUSE_DOUBLE_CLICK_TIME\""
        },
        "SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR": {
          "doc": "A variable setting which system cursor to use as the default cursor.\n\nThis should be an integer corresponding to the SDL_SystemCursor enum. The\ndefault value is zero (SDL_SYSTEM_CURSOR_DEFAULT).\n\nThis hint needs to be set before SDL_Init().\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR",
          "kind": "def",
          "value": "\"SDL_MOUSE_DEFAULT_SYSTEM_CURSOR\""
        },
        "SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE": {
          "doc": "A variable controlling whether warping a hidden mouse cursor will activate\nrelative mouse mode.\n\nWhen this hint is set, the mouse cursor is hidden, and multiple warps to\nthe window center occur within a short time period, SDL will emulate mouse\nwarps using relative mouse mode. This can provide smoother and more\nreliable mouse motion for some older games, which continuously calculate\nthe distance travelled by the mouse pointer and warp it back to the center\nof the window, rather than using relative mouse motion.\n\nNote that relative mouse mode may have different mouse acceleration\nbehavior than pointer warps.\n\nIf your application needs to repeatedly warp the hidden mouse cursor at a\nhigh-frequency for other purposes, it should disable this hint.\n\nThe variable can be set to the following values:\n\n- \"0\": Attempts to warp the mouse will always be made.\n- \"1\": Some mouse warps will be emulated by forcing relative mouse mode.\n  (default)\n\nIf not set, this is automatically enabled unless an application uses\nrelative mouse mode directly.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE",
          "kind": "def",
          "value": "\"SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE\""
        },
        "SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH": {
          "doc": "Allow mouse click events when clicking to focus an SDL window.\n\nThe variable can be set to the following values:\n\n- \"0\": Ignore mouse clicks that activate a window. (default)\n- \"1\": Generate events for mouse clicks that activate a window.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH",
          "kind": "def",
          "value": "\"SDL_MOUSE_FOCUS_CLICKTHROUGH\""
        },
        "SDL_HINT_MOUSE_NORMAL_SPEED_SCALE": {
          "doc": "A variable setting the speed scale for mouse motion, in floating point,\nwhen the mouse is not in relative mode.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_NORMAL_SPEED_SCALE",
          "kind": "def",
          "value": "\"SDL_MOUSE_NORMAL_SPEED_SCALE\""
        },
        "SDL_HINT_MOUSE_RELATIVE_MODE_CENTER": {
          "doc": "A variable controlling whether relative mouse mode constrains the mouse to\nthe center of the window.\n\nConstraining to the center of the window works better for FPS games and\nwhen the application is running over RDP. Constraining to the whole window\nworks better for 2D games and increases the chance that the mouse will be\nin the correct position when using high DPI mice.\n\nThe variable can be set to the following values:\n\n- \"0\": Relative mouse mode constrains the mouse to the window.\n- \"1\": Relative mouse mode constrains the mouse to the center of the\n  window. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_RELATIVE_MODE_CENTER",
          "kind": "def",
          "value": "\"SDL_MOUSE_RELATIVE_MODE_CENTER\""
        },
        "SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE": {
          "doc": "A variable setting the scale for mouse motion, in floating point, when the\nmouse is in relative mode.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE",
          "kind": "def",
          "value": "\"SDL_MOUSE_RELATIVE_SPEED_SCALE\""
        },
        "SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE": {
          "doc": "A variable controlling whether the system mouse acceleration curve is used\nfor relative mouse motion.\n\nThe variable can be set to the following values:\n\n- \"0\": Relative mouse motion will be unscaled. (default)\n- \"1\": Relative mouse motion will be scaled using the system mouse\n  acceleration curve.\n\nIf SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE is set, that will be applied after\nsystem speed scale.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE",
          "kind": "def",
          "value": "\"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\""
        },
        "SDL_HINT_MOUSE_RELATIVE_WARP_MOTION": {
          "doc": "A variable controlling whether a motion event should be generated for mouse\nwarping in relative mode.\n\nThe variable can be set to the following values:\n\n- \"0\": Warping the mouse will not generate a motion event in relative mode\n- \"1\": Warping the mouse will generate a motion event in relative mode\n\nBy default warping the mouse will not generate motion events in relative\nmode. This avoids the application having to filter out large relative\nmotion due to warping.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_RELATIVE_WARP_MOTION",
          "kind": "def",
          "value": "\"SDL_MOUSE_RELATIVE_WARP_MOTION\""
        },
        "SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE": {
          "doc": "A variable controlling whether the hardware cursor stays visible when\nrelative mode is active.\n\nThis variable can be set to the following values:\n\n- \"0\": The cursor will be hidden while relative mode is active (default)\n- \"1\": The cursor will remain visible while relative mode is active\n\nNote that for systems without raw hardware inputs, relative mode is\nimplemented using warping, so the hardware cursor will visibly warp between\nframes if this is enabled on those systems.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE",
          "kind": "def",
          "value": "\"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE\""
        },
        "SDL_HINT_MOUSE_TOUCH_EVENTS": {
          "doc": "A variable controlling whether mouse events should generate synthetic touch\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Mouse events will not generate touch events. (default for desktop\n  platforms)\n- \"1\": Mouse events will generate touch events. (default for mobile\n  platforms, such as Android and iOS)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MOUSE_TOUCH_EVENTS",
          "kind": "def",
          "value": "\"SDL_MOUSE_TOUCH_EVENTS\""
        },
        "SDL_HINT_MUTE_CONSOLE_KEYBOARD": {
          "doc": "A variable controlling whether the keyboard should be muted on the console.\n\nNormally the keyboard is muted while SDL applications are running so that\nkeyboard input doesn't show up as key strokes on the console. This hint\nallows you to turn that off for debugging purposes.\n\nThe variable can be set to the following values:\n\n- \"0\": Allow keystrokes to go through to the console.\n- \"1\": Mute keyboard input so it doesn't show up on the console. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_MUTE_CONSOLE_KEYBOARD",
          "kind": "def",
          "value": "\"SDL_MUTE_CONSOLE_KEYBOARD\""
        },
        "SDL_HINT_NO_SIGNAL_HANDLERS": {
          "doc": "Tell SDL not to catch the SIGINT or SIGTERM signals on POSIX platforms.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will install a SIGINT and SIGTERM handler, and when it catches a\n  signal, convert it into an SDL_EVENT_QUIT event. (default)\n- \"1\": SDL will not install a signal handler at all.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_NO_SIGNAL_HANDLERS",
          "kind": "def",
          "value": "\"SDL_NO_SIGNAL_HANDLERS\""
        },
        "SDL_HINT_OPENGL_LIBRARY": {
          "doc": "Specify the OpenGL library to load.\n\nThis hint should be set before creating an OpenGL window or creating an\nOpenGL context. If this hint isn't set, SDL will choose a reasonable\ndefault.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_OPENGL_LIBRARY",
          "kind": "def",
          "value": "\"SDL_OPENGL_LIBRARY\""
        },
        "SDL_HINT_EGL_LIBRARY": {
          "doc": "Specify the EGL library to load.\n\nThis hint should be set before creating an OpenGL window or creating an\nOpenGL context. This hint is only considered if SDL is using EGL to manage\nOpenGL contexts. If this hint isn't set, SDL will choose a reasonable\ndefault.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_EGL_LIBRARY",
          "kind": "def",
          "value": "\"SDL_EGL_LIBRARY\""
        },
        "SDL_HINT_OPENGL_ES_DRIVER": {
          "doc": "A variable controlling what driver to use for OpenGL ES contexts.\n\nOn some platforms, currently Windows and X11, OpenGL drivers may support\ncreating contexts with an OpenGL ES profile. By default SDL uses these\nprofiles, when available, otherwise it attempts to load an OpenGL ES\nlibrary, e.g. that provided by the ANGLE project. This variable controls\nwhether SDL follows this default behaviour or will always load an OpenGL ES\nlibrary.\n\nCircumstances where this is useful include - Testing an app with a\nparticular OpenGL ES implementation, e.g ANGLE, or emulator, e.g. those\nfrom ARM, Imagination or Qualcomm. - Resolving OpenGL ES function addresses\nat link time by linking with the OpenGL ES library instead of querying them\nat run time with SDL_GL_GetProcAddress().\n\nCaution: for an application to work with the default behaviour across\ndifferent OpenGL drivers it must query the OpenGL ES function addresses at\nrun time using SDL_GL_GetProcAddress().\n\nThis variable is ignored on most platforms because OpenGL ES is native or\nnot supported.\n\nThe variable can be set to the following values:\n\n- \"0\": Use ES profile of OpenGL, if available. (default)\n- \"1\": Load OpenGL ES library using the default library names.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_OPENGL_ES_DRIVER",
          "kind": "def",
          "value": "\"SDL_OPENGL_ES_DRIVER\""
        },
        "SDL_HINT_OPENVR_LIBRARY": {
          "doc": "Mechanism to specify openvr_api library location\n\nBy default, when using the OpenVR driver, it will search for the API\nlibrary in the current folder. But, if you wish to use a system API you can\nspecify that by using this hint. This should be the full or relative path\nto a .dll on Windows or .so on Linux.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_OPENVR_LIBRARY",
          "kind": "def",
          "value": "\"SDL_OPENVR_LIBRARY\""
        },
        "SDL_HINT_ORIENTATIONS": {
          "doc": "A variable controlling which orientations are allowed on iOS/Android.\n\nIn some circumstances it is necessary to be able to explicitly control\nwhich UI orientations are allowed.\n\nThis variable is a space delimited list of the following values:\n\n- \"LandscapeLeft\"\n- \"LandscapeRight\"\n- \"Portrait\"\n- \"PortraitUpsideDown\"\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ORIENTATIONS",
          "kind": "def",
          "value": "\"SDL_ORIENTATIONS\""
        },
        "SDL_HINT_POLL_SENTINEL": {
          "doc": "A variable controlling the use of a sentinel event when polling the event\nqueue.\n\nWhen polling for events, SDL_PumpEvents is used to gather new events from\ndevices. If a device keeps producing new events between calls to\nSDL_PumpEvents, a poll loop will become stuck until the new events stop.\nThis is most noticeable when moving a high frequency mouse.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable poll sentinels.\n- \"1\": Enable poll sentinels. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_POLL_SENTINEL",
          "kind": "def",
          "value": "\"SDL_POLL_SENTINEL\""
        },
        "SDL_HINT_PREFERRED_LOCALES": {
          "doc": "Override for SDL_GetPreferredLocales().\n\nIf set, this will be favored over anything the OS might report for the\nuser's preferred locales. Changing this hint at runtime will not generate a\nSDL_EVENT_LOCALE_CHANGED event (but if you can change the hint, you can\npush your own event, if you want).\n\nThe format of this hint is a comma-separated list of language and locale,\ncombined with an underscore, as is a common format: \"en_GB\". Locale is\noptional: \"en\". So you might have a list like this: \"en_GB,jp,es_PT\"\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_PREFERRED_LOCALES",
          "kind": "def",
          "value": "\"SDL_PREFERRED_LOCALES\""
        },
        "SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE": {
          "doc": "A variable that decides whether to send SDL_EVENT_QUIT when closing the\nlast window.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will not send an SDL_EVENT_QUIT event when the last window is\n  requesting to close. Note that in this case, there are still other\n  legitimate reasons one might get an SDL_EVENT_QUIT event: choosing \"Quit\"\n  from the macOS menu bar, sending a SIGINT (ctrl-c) on Unix, etc.\n- \"1\": SDL will send a quit event when the last window is requesting to\n  close. (default)\n\nIf there is at least one active system tray icon, SDL_EVENT_QUIT will\ninstead be sent when both the last window will be closed and the last tray\nicon will be destroyed.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE",
          "kind": "def",
          "value": "\"SDL_QUIT_ON_LAST_WINDOW_CLOSE\""
        },
        "SDL_HINT_RENDER_DIRECT3D_THREADSAFE": {
          "doc": "A variable controlling whether the Direct3D device is initialized for\nthread-safe operations.\n\nThe variable can be set to the following values:\n\n- \"0\": Thread-safety is not enabled. (default)\n- \"1\": Thread-safety is enabled.\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_DIRECT3D_THREADSAFE",
          "kind": "def",
          "value": "\"SDL_RENDER_DIRECT3D_THREADSAFE\""
        },
        "SDL_HINT_RENDER_DIRECT3D11_DEBUG": {
          "doc": "A variable controlling whether to enable Direct3D 11+'s Debug Layer.\n\nThis variable does not have any effect on the Direct3D 9 based renderer.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable Debug Layer use. (default)\n- \"1\": Enable Debug Layer use.\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_DIRECT3D11_DEBUG",
          "kind": "def",
          "value": "\"SDL_RENDER_DIRECT3D11_DEBUG\""
        },
        "SDL_HINT_RENDER_VULKAN_DEBUG": {
          "doc": "A variable controlling whether to enable Vulkan Validation Layers.\n\nThis variable can be set to the following values:\n\n- \"0\": Disable Validation Layer use\n- \"1\": Enable Validation Layer use\n\nBy default, SDL does not use Vulkan Validation Layers.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_VULKAN_DEBUG",
          "kind": "def",
          "value": "\"SDL_RENDER_VULKAN_DEBUG\""
        },
        "SDL_HINT_RENDER_GPU_DEBUG": {
          "doc": "A variable controlling whether to create the GPU device in debug mode.\n\nThis variable can be set to the following values:\n\n- \"0\": Disable debug mode use (default)\n- \"1\": Enable debug mode use\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_GPU_DEBUG",
          "kind": "def",
          "value": "\"SDL_RENDER_GPU_DEBUG\""
        },
        "SDL_HINT_RENDER_GPU_LOW_POWER": {
          "doc": "A variable controlling whether to prefer a low-power GPU on multi-GPU\nsystems.\n\nThis variable can be set to the following values:\n\n- \"0\": Prefer high-performance GPU (default)\n- \"1\": Prefer low-power GPU\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_GPU_LOW_POWER",
          "kind": "def",
          "value": "\"SDL_RENDER_GPU_LOW_POWER\""
        },
        "SDL_HINT_RENDER_DRIVER": {
          "doc": "A variable specifying which render driver to use.\n\nIf the application doesn't pick a specific renderer to use, this variable\nspecifies the name of the preferred renderer. If the preferred renderer\ncan't be initialized, creating a renderer will fail.\n\nThis variable is case insensitive and can be set to the following values:\n\n- \"direct3d\"\n- \"direct3d11\"\n- \"direct3d12\"\n- \"opengl\"\n- \"opengles2\"\n- \"opengles\"\n- \"metal\"\n- \"vulkan\"\n- \"gpu\"\n- \"software\"\n\nThis hint accepts a comma-separated list of driver names, and each will be\ntried in the order listed when creating a renderer until one succeeds or\nall of them fail.\n\nThe default varies by platform, but it's the first one in the list that is\navailable on the current platform.\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_DRIVER",
          "kind": "def",
          "value": "\"SDL_RENDER_DRIVER\""
        },
        "SDL_HINT_RENDER_LINE_METHOD": {
          "doc": "A variable controlling how the 2D render API renders lines.\n\nThe variable can be set to the following values:\n\n- \"0\": Use the default line drawing method (Bresenham's line algorithm)\n- \"1\": Use the driver point API using Bresenham's line algorithm (correct,\n  draws many points)\n- \"2\": Use the driver line API (occasionally misses line endpoints based on\n  hardware driver quirks\n- \"3\": Use the driver geometry API (correct, draws thicker diagonal lines)\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_LINE_METHOD",
          "kind": "def",
          "value": "\"SDL_RENDER_LINE_METHOD\""
        },
        "SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE": {
          "doc": "A variable controlling whether the Metal render driver select low power\ndevice over default one.\n\nThe variable can be set to the following values:\n\n- \"0\": Use the preferred OS device. (default)\n- \"1\": Select a low power device.\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE",
          "kind": "def",
          "value": "\"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE\""
        },
        "SDL_HINT_RENDER_VSYNC": {
          "doc": "A variable controlling whether updates to the SDL screen surface should be\nsynchronized with the vertical refresh, to avoid tearing.\n\nThis hint overrides the application preference when creating a renderer.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable vsync. (default)\n- \"1\": Enable vsync.\n\nThis hint should be set before creating a renderer.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RENDER_VSYNC",
          "kind": "def",
          "value": "\"SDL_RENDER_VSYNC\""
        },
        "SDL_HINT_RETURN_KEY_HIDES_IME": {
          "doc": "A variable to control whether the return key on the soft keyboard should\nhide the soft keyboard on Android and iOS.\n\nThis hint sets the default value of SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN.\n\nThe variable can be set to the following values:\n\n- \"0\": The return key will be handled as a key event. (default)\n- \"1\": The return key will hide the keyboard.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RETURN_KEY_HIDES_IME",
          "kind": "def",
          "value": "\"SDL_RETURN_KEY_HIDES_IME\""
        },
        "SDL_HINT_ROG_GAMEPAD_MICE": {
          "doc": "A variable containing a list of ROG gamepad capable mice.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.\n\n\\sa SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED",
          "name": "SDL_HINT_ROG_GAMEPAD_MICE",
          "kind": "def",
          "value": "\"SDL_ROG_GAMEPAD_MICE\""
        },
        "SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED": {
          "doc": "A variable containing a list of devices that are not ROG gamepad capable\nmice.\n\nThis will override SDL_HINT_ROG_GAMEPAD_MICE and the built in device list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED",
          "kind": "def",
          "value": "\"SDL_ROG_GAMEPAD_MICE_EXCLUDED\""
        },
        "SDL_HINT_RPI_VIDEO_LAYER": {
          "doc": "A variable controlling which Dispmanx layer to use on a Raspberry PI.\n\nAlso known as Z-order. The variable can take a negative or positive value.\nThe default is 10000.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_RPI_VIDEO_LAYER",
          "kind": "def",
          "value": "\"SDL_RPI_VIDEO_LAYER\""
        },
        "SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME": {
          "doc": "Specify an \"activity name\" for screensaver inhibition.\n\nSome platforms, notably Linux desktops, list the applications which are\ninhibiting the screensaver or other power-saving features.\n\nThis hint lets you specify the \"activity name\" sent to the OS when\nSDL_DisableScreenSaver() is used (or the screensaver is automatically\ndisabled). The contents of this hint are used when the screensaver is\ndisabled. You should use a string that describes what your program is doing\n(and, therefore, why the screensaver is disabled). For example, \"Playing a\ngame\" or \"Watching a video\".\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault: \"Playing a game\" or something similar.\n\nThis hint should be set before calling SDL_DisableScreenSaver()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME",
          "kind": "def",
          "value": "\"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\""
        },
        "SDL_HINT_SHUTDOWN_DBUS_ON_QUIT": {
          "doc": "A variable controlling whether SDL calls dbus_shutdown() on quit.\n\nThis is useful as a debug tool to validate memory leaks, but shouldn't ever\nbe set in production applications, as other libraries used by the\napplication might use dbus under the hood and this can cause crashes if\nthey continue after SDL_Quit().\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will not call dbus_shutdown() on quit. (default)\n- \"1\": SDL will call dbus_shutdown() on quit.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_SHUTDOWN_DBUS_ON_QUIT",
          "kind": "def",
          "value": "\"SDL_SHUTDOWN_DBUS_ON_QUIT\""
        },
        "SDL_HINT_STORAGE_TITLE_DRIVER": {
          "doc": "A variable that specifies a backend to use for title storage.\n\nBy default, SDL will try all available storage backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target, such as \"pc\" if, say, you are on Steam but\nwant to avoid SteamRemoteStorage for title data.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_STORAGE_TITLE_DRIVER",
          "kind": "def",
          "value": "\"SDL_STORAGE_TITLE_DRIVER\""
        },
        "SDL_HINT_STORAGE_USER_DRIVER": {
          "doc": "A variable that specifies a backend to use for user storage.\n\nBy default, SDL will try all available storage backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target, such as \"pc\" if, say, you are on Steam but\nwant to avoid SteamRemoteStorage for user data.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_STORAGE_USER_DRIVER",
          "kind": "def",
          "value": "\"SDL_STORAGE_USER_DRIVER\""
        },
        "SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL": {
          "doc": "Specifies whether SDL_THREAD_PRIORITY_TIME_CRITICAL should be treated as\nrealtime.\n\nOn some platforms, like Linux, a realtime priority thread may be subject to\nrestrictions that require special handling by the application. This hint\nexists to let SDL know that the app is prepared to handle said\nrestrictions.\n\nOn Linux, SDL will apply the following configuration to any thread that\nbecomes realtime:\n\n- The SCHED_RESET_ON_FORK bit will be set on the scheduling policy,\n- An RLIMIT_RTTIME budget will be configured to the rtkit specified limit.\n- Exceeding this limit will result in the kernel sending SIGKILL to the\n  app, refer to the man pages for more information.\n\nThe variable can be set to the following values:\n\n- \"0\": default platform specific behaviour\n- \"1\": Force SDL_THREAD_PRIORITY_TIME_CRITICAL to a realtime scheduling\n  policy\n\nThis hint should be set before calling SDL_SetCurrentThreadPriority()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL",
          "kind": "def",
          "value": "\"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\""
        },
        "SDL_HINT_THREAD_PRIORITY_POLICY": {
          "doc": "A string specifying additional information to use with\nSDL_SetCurrentThreadPriority.\n\nBy default SDL_SetCurrentThreadPriority will make appropriate system\nchanges in order to apply a thread priority. For example on systems using\npthreads the scheduler policy is changed automatically to a policy that\nworks well with a given priority. Code which has specific requirements can\noverride SDL's default behavior with this hint.\n\npthread hint values are \"current\", \"other\", \"fifo\" and \"rr\". Currently no\nother platform hint values are defined but may be in the future.\n\nOn Linux, the kernel may send SIGKILL to realtime tasks which exceed the\ndistro configured execution budget for rtkit. This budget can be queried\nthrough RLIMIT_RTTIME after calling SDL_SetCurrentThreadPriority().\n\nThis hint should be set before calling SDL_SetCurrentThreadPriority()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_THREAD_PRIORITY_POLICY",
          "kind": "def",
          "value": "\"SDL_THREAD_PRIORITY_POLICY\""
        },
        "SDL_HINT_TIMER_RESOLUTION": {
          "doc": "A variable that controls the timer resolution, in milliseconds.\n\nThe higher resolution the timer, the more frequently the CPU services timer\ninterrupts, and the more precise delays are, but this takes up power and\nCPU time. This hint is only used on Windows.\n\nSee this blog post for more information:\nhttp://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/\n\nThe default value is \"1\".\n\nIf this variable is set to \"0\", the system timer resolution is not set.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_TIMER_RESOLUTION",
          "kind": "def",
          "value": "\"SDL_TIMER_RESOLUTION\""
        },
        "SDL_HINT_TOUCH_MOUSE_EVENTS": {
          "doc": "A variable controlling whether touch events should generate synthetic mouse\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Touch events will not generate mouse events.\n- \"1\": Touch events will generate mouse events. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_TOUCH_MOUSE_EVENTS",
          "kind": "def",
          "value": "\"SDL_TOUCH_MOUSE_EVENTS\""
        },
        "SDL_HINT_TRACKPAD_IS_TOUCH_ONLY": {
          "doc": "A variable controlling whether trackpads should be treated as touch\ndevices.\n\nOn macOS (and possibly other platforms in the future), SDL will report\ntouches on a trackpad as mouse input, which is generally what users expect\nfrom this device; however, these are often actually full multitouch-capable\ntouch devices, so it might be preferable to some apps to treat them as\nsuch.\n\nThe variable can be set to the following values:\n\n- \"0\": Trackpad will send mouse events. (default)\n- \"1\": Trackpad will send touch events.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_TRACKPAD_IS_TOUCH_ONLY",
          "kind": "def",
          "value": "\"SDL_TRACKPAD_IS_TOUCH_ONLY\""
        },
        "SDL_HINT_TV_REMOTE_AS_JOYSTICK": {
          "doc": "A variable controlling whether the Android / tvOS remotes should be listed\nas joystick devices, instead of sending keyboard events.\n\nThe variable can be set to the following values:\n\n- \"0\": Remotes send enter/escape/arrow key events.\n- \"1\": Remotes are available as 2 axis, 2 button joysticks. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_TV_REMOTE_AS_JOYSTICK",
          "kind": "def",
          "value": "\"SDL_TV_REMOTE_AS_JOYSTICK\""
        },
        "SDL_HINT_VIDEO_ALLOW_SCREENSAVER": {
          "doc": "A variable controlling whether the screensaver is enabled.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable screensaver. (default)\n- \"1\": Enable screensaver.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_ALLOW_SCREENSAVER",
          "kind": "def",
          "value": "\"SDL_VIDEO_ALLOW_SCREENSAVER\""
        },
        "SDL_HINT_VIDEO_DISPLAY_PRIORITY": {
          "doc": "A comma separated list containing the names of the displays that SDL should\nsort to the front of the display list.\n\nWhen this hint is set, displays with matching name strings will be\nprioritized in the list of displays, as exposed by calling\nSDL_GetDisplays(), with the first listed becoming the primary display. The\nnaming convention can vary depending on the environment, but it is usually\na connector name (e.g. 'DP-1', 'DP-2', 'HDMI-A-1',etc...).\n\nOn Wayland and X11 desktops, the connector names associated with displays\ncan typically be found by using the `xrandr` utility.\n\nThis hint is currently supported on the following drivers:\n\n- KMSDRM (kmsdrm)\n- Wayland (wayland)\n- X11 (x11)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_DISPLAY_PRIORITY",
          "kind": "def",
          "value": "\"SDL_VIDEO_DISPLAY_PRIORITY\""
        },
        "SDL_HINT_VIDEO_DOUBLE_BUFFER": {
          "doc": "Tell the video driver that we only want a double buffer.\n\nBy default, most lowlevel 2D APIs will use a triple buffer scheme that\nwastes no CPU time on waiting for vsync after issuing a flip, but\nintroduces a frame of latency. On the other hand, using a double buffer\nscheme instead is recommended for cases where low latency is an important\nfactor because we save a whole frame of latency.\n\nWe do so by waiting for vsync immediately after issuing a flip, usually\njust after eglSwapBuffers call in the backend's *_SwapWindow function.\n\nThis hint is currently supported on the following drivers:\n\n- Raspberry Pi (raspberrypi)\n- Wayland (wayland)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_DOUBLE_BUFFER",
          "kind": "def",
          "value": "\"SDL_VIDEO_DOUBLE_BUFFER\""
        },
        "SDL_HINT_VIDEO_DRIVER": {
          "doc": "A variable that specifies a video backend to use.\n\nBy default, SDL will try all available video backends in a reasonable order\nuntil it finds one that can work, but this hint allows the app or user to\nforce a specific target, such as \"x11\" if, say, you are on Wayland but want\nto try talking to the X server instead.\n\nThis hint accepts a comma-separated list of driver names, and each will be\ntried in the order listed during init, until one succeeds or all of them\nfail.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_DRIVER",
          "kind": "def",
          "value": "\"SDL_VIDEO_DRIVER\""
        },
        "SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES": {
          "doc": "A variable controlling whether the dummy video driver saves output frames.\n\n- \"0\": Video frames are not saved to disk. (default)\n- \"1\": Video frames are saved to files in the format \"SDL_windowX-Y.bmp\",\n  where X is the window ID, and Y is the frame number.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES",
          "kind": "def",
          "value": "\"SDL_VIDEO_DUMMY_SAVE_FRAMES\""
        },
        "SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK": {
          "doc": "If eglGetPlatformDisplay fails, fall back to calling eglGetDisplay.\n\nThe variable can be set to one of the following values:\n\n- \"0\": Do not fall back to eglGetDisplay.\n- \"1\": Fall back to eglGetDisplay if eglGetPlatformDisplay fails. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK",
          "kind": "def",
          "value": "\"SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK\""
        },
        "SDL_HINT_VIDEO_FORCE_EGL": {
          "doc": "A variable controlling whether the OpenGL context should be created with\nEGL.\n\nThe variable can be set to the following values:\n\n- \"0\": Use platform-specific GL context creation API (GLX, WGL, CGL, etc).\n  (default)\n- \"1\": Use EGL\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_FORCE_EGL",
          "kind": "def",
          "value": "\"SDL_VIDEO_FORCE_EGL\""
        },
        "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES": {
          "doc": "A variable that specifies the policy for fullscreen Spaces on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable Spaces support (FULLSCREEN_DESKTOP won't use them and\n  SDL_WINDOW_RESIZABLE windows won't offer the \"fullscreen\" button on their\n  titlebars).\n- \"1\": Enable Spaces support (FULLSCREEN_DESKTOP will use them and\n  SDL_WINDOW_RESIZABLE windows will offer the \"fullscreen\" button on their\n  titlebars). (default)\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES",
          "kind": "def",
          "value": "\"SDL_VIDEO_MAC_FULLSCREEN_SPACES\""
        },
        "SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY": {
          "doc": "A variable that specifies the menu visibility when a window is fullscreen\nin Spaces on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": The menu will be hidden when the window is in a fullscreen space,\n  and not accessible by moving the mouse to the top of the screen.\n- \"1\": The menu will be accessible when the window is in a fullscreen\n  space.\n- \"auto\": The menu will be hidden if fullscreen mode was toggled on\n  programmatically via `SDL_SetWindowFullscreen()`, and accessible if\n  fullscreen was entered via the \"fullscreen\" button on the window title\n  bar. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY",
          "kind": "def",
          "value": "\"SDL_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY\""
        },
        "SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS": {
          "doc": "A variable controlling whether fullscreen windows are minimized when they\nlose focus.\n\nThe variable can be set to the following values:\n\n- \"0\": Fullscreen windows will not be minimized when they lose focus.\n  (default)\n- \"1\": Fullscreen windows are minimized when they lose focus.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS",
          "kind": "def",
          "value": "\"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\""
        },
        "SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES": {
          "doc": "A variable controlling whether the offscreen video driver saves output\nframes.\n\nThis only saves frames that are generated using software rendering, not\naccelerated OpenGL rendering.\n\n- \"0\": Video frames are not saved to disk. (default)\n- \"1\": Video frames are saved to files in the format \"SDL_windowX-Y.bmp\",\n  where X is the window ID, and Y is the frame number.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES",
          "kind": "def",
          "value": "\"SDL_VIDEO_OFFSCREEN_SAVE_FRAMES\""
        },
        "SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS": {
          "doc": "A variable controlling whether all window operations will block until\ncomplete.\n\nWindow systems that run asynchronously may not have the results of window\noperations that resize or move the window applied immediately upon the\nreturn of the requesting function. Setting this hint will cause such\noperations to block after every call until the pending operation has\ncompleted. Setting this to '1' is the equivalent of calling\nSDL_SyncWindow() after every function call.\n\nBe aware that amount of time spent blocking while waiting for window\noperations to complete can be quite lengthy, as animations may have to\ncomplete, which can take upwards of multiple seconds in some cases.\n\nThe variable can be set to the following values:\n\n- \"0\": Window operations are non-blocking. (default)\n- \"1\": Window operations will block until completed.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS",
          "kind": "def",
          "value": "\"SDL_VIDEO_SYNC_WINDOW_OPERATIONS\""
        },
        "SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR": {
          "doc": "A variable controlling whether the libdecor Wayland backend is allowed to\nbe used.\n\nlibdecor is used over xdg-shell when xdg-decoration protocol is\nunavailable.\n\nThe variable can be set to the following values:\n\n- \"0\": libdecor use is disabled.\n- \"1\": libdecor use is enabled. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR",
          "kind": "def",
          "value": "\"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\""
        },
        "SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION": {
          "doc": "A variable controlling whether video mode emulation is enabled under\nWayland.\n\nWhen this hint is set, a standard set of emulated CVT video modes will be\nexposed for use by the application. If it is disabled, the only modes\nexposed will be the logical desktop size and, in the case of a scaled\ndesktop, the native display resolution.\n\nThe variable can be set to the following values:\n\n- \"0\": Video mode emulation is disabled.\n- \"1\": Video mode emulation is enabled. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION",
          "kind": "def",
          "value": "\"SDL_VIDEO_WAYLAND_MODE_EMULATION\""
        },
        "SDL_HINT_VIDEO_WAYLAND_MODE_SCALING": {
          "doc": "A variable controlling how modes with a non-native aspect ratio are\ndisplayed under Wayland.\n\nWhen this hint is set, the requested scaling will be used when displaying\nfullscreen video modes that don't match the display's native aspect ratio.\nThis is contingent on compositor viewport support.\n\nThe variable can be set to the following values:\n\n- \"aspect\" - Video modes will be displayed scaled, in their proper aspect\n  ratio, with black bars.\n- \"stretch\" - Video modes will be scaled to fill the entire display.\n  (default)\n- \"none\" - Video modes will be displayed as 1:1 with no scaling.\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_WAYLAND_MODE_SCALING",
          "kind": "def",
          "value": "\"SDL_VIDEO_WAYLAND_MODE_SCALING\""
        },
        "SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR": {
          "doc": "A variable controlling whether the libdecor Wayland backend is preferred\nover native decorations.\n\nWhen this hint is set, libdecor will be used to provide window decorations,\neven if xdg-decoration is available. (Note that, by default, libdecor will\nuse xdg-decoration itself if available).\n\nThe variable can be set to the following values:\n\n- \"0\": libdecor is enabled only if server-side decorations are unavailable.\n  (default)\n- \"1\": libdecor is always enabled if available.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR",
          "kind": "def",
          "value": "\"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\""
        },
        "SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY": {
          "doc": "A variable forcing non-DPI-aware Wayland windows to output at 1:1 scaling.\n\nThis must be set before initializing the video subsystem.\n\nWhen this hint is set, Wayland windows that are not flagged as being\nDPI-aware will be output with scaling designed to force 1:1 pixel mapping.\n\nThis is intended to allow legacy applications to be displayed without\ndesktop scaling being applied, and has issues with certain display\nconfigurations, as this forces the window to behave in a way that Wayland\ndesktops were not designed to accommodate:\n\n- Rounding errors can result with odd window sizes and/or desktop scales,\n  which can cause the window contents to appear slightly blurry.\n- Positioning the window may be imprecise due to unit conversions and\n  rounding.\n- The window may be unusably small on scaled desktops.\n- The window may jump in size when moving between displays of different\n  scale factors.\n- Displays may appear to overlap when using a multi-monitor setup with\n  scaling enabled.\n- Possible loss of cursor precision due to the logical size of the window\n  being reduced.\n\nNew applications should be designed with proper DPI awareness handling\ninstead of enabling this.\n\nThe variable can be set to the following values:\n\n- \"0\": Windows will be scaled normally.\n- \"1\": Windows will be forced to scale to achieve 1:1 output.\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY",
          "kind": "def",
          "value": "\"SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY\""
        },
        "SDL_HINT_VIDEO_WIN_D3DCOMPILER": {
          "doc": "A variable specifying which shader compiler to preload when using the\nChrome ANGLE binaries.\n\nSDL has EGL and OpenGL ES2 support on Windows via the ANGLE project. It can\nuse two different sets of binaries, those compiled by the user from source\nor those provided by the Chrome browser. In the later case, these binaries\nrequire that SDL loads a DLL providing the shader compiler.\n\nThe variable can be set to the following values:\n\n- \"d3dcompiler_46.dll\" - best for Vista or later. (default)\n- \"d3dcompiler_43.dll\" - for XP support.\n- \"none\" - do not load any library, useful if you compiled ANGLE from\n  source and included the compiler in your binaries.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_WIN_D3DCOMPILER",
          "kind": "def",
          "value": "\"SDL_VIDEO_WIN_D3DCOMPILER\""
        },
        "SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT": {
          "doc": "A variable controlling whether SDL should call XSelectInput() to enable\ninput events on X11 windows wrapped by SDL windows.\n\nThe variable can be set to the following values:\n\n- \"0\": Don't call XSelectInput(), assuming the native window code has done\n  it already.\n- \"1\": Call XSelectInput() to enable input events. (default)\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.10.",
          "name": "SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_EXTERNAL_WINDOW_INPUT\""
        },
        "SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR": {
          "doc": "A variable controlling whether the X11 _NET_WM_BYPASS_COMPOSITOR hint\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable _NET_WM_BYPASS_COMPOSITOR.\n- \"1\": Enable _NET_WM_BYPASS_COMPOSITOR. (default)\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\""
        },
        "SDL_HINT_VIDEO_X11_NET_WM_PING": {
          "doc": "A variable controlling whether the X11 _NET_WM_PING protocol should be\nsupported.\n\nBy default SDL will use _NET_WM_PING, but for applications that know they\nwill not always be able to respond to ping requests in a timely manner they\ncan turn it off to avoid the window manager thinking the app is hung.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable _NET_WM_PING.\n- \"1\": Enable _NET_WM_PING. (default)\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_NET_WM_PING",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_NET_WM_PING\""
        },
        "SDL_HINT_VIDEO_X11_NODIRECTCOLOR": {
          "doc": "A variable controlling whether SDL uses DirectColor visuals.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable DirectColor visuals.\n- \"1\": Enable DirectColor visuals. (default)\n\nThis hint should be set before initializing the video subsystem.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_NODIRECTCOLOR",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_NODIRECTCOLOR\""
        },
        "SDL_HINT_VIDEO_X11_SCALING_FACTOR": {
          "doc": "A variable forcing the content scaling factor for X11 displays.\n\nThe variable can be set to a floating point value in the range 1.0-10.0f\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_SCALING_FACTOR",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_SCALING_FACTOR\""
        },
        "SDL_HINT_VIDEO_X11_VISUALID": {
          "doc": "A variable forcing the visual ID used for X11 display modes.\n\nThis hint should be set before initializing the video subsystem.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_VISUALID",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_VISUALID\""
        },
        "SDL_HINT_VIDEO_X11_WINDOW_VISUALID": {
          "doc": "A variable forcing the visual ID chosen for new X11 windows.\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_WINDOW_VISUALID",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_WINDOW_VISUALID\""
        },
        "SDL_HINT_VIDEO_X11_XRANDR": {
          "doc": "A variable controlling whether the X11 XRandR extension should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable XRandR.\n- \"1\": Enable XRandR. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VIDEO_X11_XRANDR",
          "kind": "def",
          "value": "\"SDL_VIDEO_X11_XRANDR\""
        },
        "SDL_HINT_VITA_ENABLE_BACK_TOUCH": {
          "doc": "A variable controlling whether touch should be enabled on the back panel of\nthe PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable touch on the back panel.\n- \"1\": Enable touch on the back panel. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_ENABLE_BACK_TOUCH",
          "kind": "def",
          "value": "\"SDL_VITA_ENABLE_BACK_TOUCH\""
        },
        "SDL_HINT_VITA_ENABLE_FRONT_TOUCH": {
          "doc": "A variable controlling whether touch should be enabled on the front panel\nof the PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable touch on the front panel.\n- \"1\": Enable touch on the front panel. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_ENABLE_FRONT_TOUCH",
          "kind": "def",
          "value": "\"SDL_VITA_ENABLE_FRONT_TOUCH\""
        },
        "SDL_HINT_VITA_MODULE_PATH": {
          "doc": "A variable controlling the module path on the PlayStation Vita.\n\nThis hint defaults to \"app0:module\"\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_MODULE_PATH",
          "kind": "def",
          "value": "\"SDL_VITA_MODULE_PATH\""
        },
        "SDL_HINT_VITA_PVR_INIT": {
          "doc": "A variable controlling whether to perform PVR initialization on the\nPlayStation Vita.\n\n- \"0\": Skip PVR initialization.\n- \"1\": Perform the normal PVR initialization. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_PVR_INIT",
          "kind": "def",
          "value": "\"SDL_VITA_PVR_INIT\""
        },
        "SDL_HINT_VITA_RESOLUTION": {
          "doc": "A variable overriding the resolution reported on the PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"544\": 544p (default)\n- \"720\": 725p for PSTV\n- \"1080\": 1088i for PSTV\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_RESOLUTION",
          "kind": "def",
          "value": "\"SDL_VITA_RESOLUTION\""
        },
        "SDL_HINT_VITA_PVR_OPENGL": {
          "doc": "A variable controlling whether OpenGL should be used instead of OpenGL ES\non the PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"0\": Use OpenGL ES. (default)\n- \"1\": Use OpenGL.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_PVR_OPENGL",
          "kind": "def",
          "value": "\"SDL_VITA_PVR_OPENGL\""
        },
        "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE": {
          "doc": "A variable controlling which touchpad should generate synthetic mouse\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Only front touchpad should generate mouse events. (default)\n- \"1\": Only back touchpad should generate mouse events.\n- \"2\": Both touchpads should generate mouse events.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE",
          "kind": "def",
          "value": "\"SDL_VITA_TOUCH_MOUSE_DEVICE\""
        },
        "SDL_HINT_VULKAN_DISPLAY": {
          "doc": "A variable overriding the display index used in SDL_Vulkan_CreateSurface()\n\nThe display index starts at 0, which is the default.\n\nThis hint should be set before calling SDL_Vulkan_CreateSurface()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VULKAN_DISPLAY",
          "kind": "def",
          "value": "\"SDL_VULKAN_DISPLAY\""
        },
        "SDL_HINT_VULKAN_LIBRARY": {
          "doc": "Specify the Vulkan library to load.\n\nThis hint should be set before creating a Vulkan window or calling\nSDL_Vulkan_LoadLibrary().\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_VULKAN_LIBRARY",
          "kind": "def",
          "value": "\"SDL_VULKAN_LIBRARY\""
        },
        "SDL_HINT_WAVE_FACT_CHUNK": {
          "doc": "A variable controlling how the fact chunk affects the loading of a WAVE\nfile.\n\nThe fact chunk stores information about the number of samples of a WAVE\nfile. The Standards Update from Microsoft notes that this value can be used\nto 'determine the length of the data in seconds'. This is especially useful\nfor compressed formats (for which this is a mandatory chunk) if they\nproduce multiple sample frames per block and truncating the block is not\nallowed. The fact chunk can exactly specify how many sample frames there\nshould be in this case.\n\nUnfortunately, most application seem to ignore the fact chunk and so SDL\nignores it by default as well.\n\nThe variable can be set to the following values:\n\n- \"truncate\" - Use the number of samples to truncate the wave data if the\n  fact chunk is present and valid.\n- \"strict\" - Like \"truncate\", but raise an error if the fact chunk is\n  invalid, not present for non-PCM formats, or if the data chunk doesn't\n  have that many samples.\n- \"ignorezero\" - Like \"truncate\", but ignore fact chunk if the number of\n  samples is zero.\n- \"ignore\" - Ignore fact chunk entirely. (default)\n\nThis hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WAVE_FACT_CHUNK",
          "kind": "def",
          "value": "\"SDL_WAVE_FACT_CHUNK\""
        },
        "SDL_HINT_WAVE_CHUNK_LIMIT": {
          "doc": "A variable controlling the maximum number of chunks in a WAVE file.\n\nThis sets an upper bound on the number of chunks in a WAVE file to avoid\nwasting time on malformed or corrupt WAVE files. This defaults to \"10000\".\n\nThis hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WAVE_CHUNK_LIMIT",
          "kind": "def",
          "value": "\"SDL_WAVE_CHUNK_LIMIT\""
        },
        "SDL_HINT_WAVE_RIFF_CHUNK_SIZE": {
          "doc": "A variable controlling how the size of the RIFF chunk affects the loading\nof a WAVE file.\n\nThe size of the RIFF chunk (which includes all the sub-chunks of the WAVE\nfile) is not always reliable. In case the size is wrong, it's possible to\njust ignore it and step through the chunks until a fixed limit is reached.\n\nNote that files that have trailing data unrelated to the WAVE file or\ncorrupt files may slow down the loading process without a reliable\nboundary. By default, SDL stops after 10000 chunks to prevent wasting time.\nUse SDL_HINT_WAVE_CHUNK_LIMIT to adjust this value.\n\nThe variable can be set to the following values:\n\n- \"force\" - Always use the RIFF chunk size as a boundary for the chunk\n  search.\n- \"ignorezero\" - Like \"force\", but a zero size searches up to 4 GiB.\n  (default)\n- \"ignore\" - Ignore the RIFF chunk size and always search up to 4 GiB.\n- \"maximum\" - Search for chunks until the end of file. (not recommended)\n\nThis hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WAVE_RIFF_CHUNK_SIZE",
          "kind": "def",
          "value": "\"SDL_WAVE_RIFF_CHUNK_SIZE\""
        },
        "SDL_HINT_WAVE_TRUNCATION": {
          "doc": "A variable controlling how a truncated WAVE file is handled.\n\nA WAVE file is considered truncated if any of the chunks are incomplete or\nthe data chunk size is not a multiple of the block size. By default, SDL\ndecodes until the first incomplete block, as most applications seem to do.\n\nThe variable can be set to the following values:\n\n- \"verystrict\" - Raise an error if the file is truncated.\n- \"strict\" - Like \"verystrict\", but the size of the RIFF chunk is ignored.\n- \"dropframe\" - Decode until the first incomplete sample frame.\n- \"dropblock\" - Decode until the first incomplete block. (default)\n\nThis hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WAVE_TRUNCATION",
          "kind": "def",
          "value": "\"SDL_WAVE_TRUNCATION\""
        },
        "SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED": {
          "doc": "A variable controlling whether the window is activated when the\nSDL_RaiseWindow function is called.\n\nThe variable can be set to the following values:\n\n- \"0\": The window is not activated when the SDL_RaiseWindow function is\n  called.\n- \"1\": The window is activated when the SDL_RaiseWindow function is called.\n  (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED",
          "kind": "def",
          "value": "\"SDL_WINDOW_ACTIVATE_WHEN_RAISED\""
        },
        "SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN": {
          "doc": "A variable controlling whether the window is activated when the\nSDL_ShowWindow function is called.\n\nThe variable can be set to the following values:\n\n- \"0\": The window is not activated when the SDL_ShowWindow function is\n  called.\n- \"1\": The window is activated when the SDL_ShowWindow function is called.\n  (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN",
          "kind": "def",
          "value": "\"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\""
        },
        "SDL_HINT_WINDOW_ALLOW_TOPMOST": {
          "doc": "If set to \"0\" then never set the top-most flag on an SDL Window even if the\napplication requests it.\n\nThis is a debugging aid for developers and not expected to be used by end\nusers.\n\nThe variable can be set to the following values:\n\n- \"0\": don't allow topmost\n- \"1\": allow topmost (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOW_ALLOW_TOPMOST",
          "kind": "def",
          "value": "\"SDL_WINDOW_ALLOW_TOPMOST\""
        },
        "SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN": {
          "doc": "A variable controlling whether the window frame and title bar are\ninteractive when the cursor is hidden.\n\nThe variable can be set to the following values:\n\n- \"0\": The window frame is not interactive when the cursor is hidden (no\n  move, resize, etc).\n- \"1\": The window frame is interactive when the cursor is hidden. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN",
          "kind": "def",
          "value": "\"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\""
        },
        "SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4": {
          "doc": "A variable controlling whether SDL generates window-close events for Alt+F4\non Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will only do normal key handling for Alt+F4.\n- \"1\": SDL will generate a window-close event when it sees Alt+F4.\n  (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4",
          "kind": "def",
          "value": "\"SDL_WINDOWS_CLOSE_ON_ALT_F4\""
        },
        "SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS": {
          "doc": "A variable controlling whether menus can be opened with their keyboard\nshortcut (Alt+mnemonic).\n\nIf the mnemonics are enabled, then menus can be opened by pressing the Alt\nkey and the corresponding mnemonic (for example, Alt+F opens the File\nmenu). However, in case an invalid mnemonic is pressed, Windows makes an\naudible beep to convey that nothing happened. This is true even if the\nwindow has no menu at all!\n\nBecause most SDL applications don't have menus, and some want to use the\nAlt key for other purposes, SDL disables mnemonics (and the beeping) by\ndefault.\n\nNote: This also affects keyboard events: with mnemonics enabled, when a\nmenu is opened from the keyboard, you will not receive a KEYUP event for\nthe mnemonic key, and *might* not receive one for Alt.\n\nThe variable can be set to the following values:\n\n- \"0\": Alt+mnemonic does nothing, no beeping. (default)\n- \"1\": Alt+mnemonic opens menus, invalid mnemonics produce a beep.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS",
          "kind": "def",
          "value": "\"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\""
        },
        "SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP": {
          "doc": "A variable controlling whether the windows message loop is processed by\nSDL.\n\nThe variable can be set to the following values:\n\n- \"0\": The window message loop is not run.\n- \"1\": The window message loop is processed in SDL_PumpEvents(). (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP",
          "kind": "def",
          "value": "\"SDL_WINDOWS_ENABLE_MESSAGELOOP\""
        },
        "SDL_HINT_WINDOWS_GAMEINPUT": {
          "doc": "A variable controlling whether GameInput is used for raw keyboard and mouse\non Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": GameInput is not used for raw keyboard and mouse events.\n- \"1\": GameInput is used for raw keyboard and mouse events, if available.\n  (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_GAMEINPUT",
          "kind": "def",
          "value": "\"SDL_WINDOWS_GAMEINPUT\""
        },
        "SDL_HINT_WINDOWS_RAW_KEYBOARD": {
          "doc": "A variable controlling whether raw keyboard events are used on Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": The Windows message loop is used for keyboard events. (default)\n- \"1\": Low latency raw keyboard events are used.\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_RAW_KEYBOARD",
          "kind": "def",
          "value": "\"SDL_WINDOWS_RAW_KEYBOARD\""
        },
        "SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL": {
          "doc": "A variable controlling whether SDL uses Kernel Semaphores on Windows.\n\nKernel Semaphores are inter-process and require a context switch on every\ninteraction. On Windows 8 and newer, the WaitOnAddress API is available.\nUsing that and atomics to implement semaphores increases performance. SDL\nwill fall back to Kernel Objects on older OS versions or if forced to by\nthis hint.\n\nThe variable can be set to the following values:\n\n- \"0\": Use Atomics and WaitOnAddress API when available, otherwise fall\n  back to Kernel Objects. (default)\n- \"1\": Force the use of Kernel Objects in all cases.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL",
          "kind": "def",
          "value": "\"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\""
        },
        "SDL_HINT_WINDOWS_INTRESOURCE_ICON": {
          "doc": "A variable to specify custom icon resource id from RC file on Windows\nplatform.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_INTRESOURCE_ICON",
          "kind": "def",
          "value": "\"SDL_WINDOWS_INTRESOURCE_ICON\""
        },
        "SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL": {
          "doc": "A variable to specify custom icon resource id from RC file on Windows\nplatform.\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL",
          "kind": "def",
          "value": "\"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\""
        },
        "SDL_HINT_WINDOWS_USE_D3D9EX": {
          "doc": "A variable controlling whether SDL uses the D3D9Ex API introduced in\nWindows Vista, instead of normal D3D9.\n\nDirect3D 9Ex contains changes to state management that can eliminate device\nloss errors during scenarios like Alt+Tab or UAC prompts. D3D9Ex may\nrequire some changes to your application to cope with the new behavior, so\nthis is disabled by default.\n\nFor more information on Direct3D 9Ex, see:\n\n- https://docs.microsoft.com/en-us/windows/win32/direct3darticles/graphics-apis-in-windows-vista#direct3d-9ex\n- https://docs.microsoft.com/en-us/windows/win32/direct3darticles/direct3d-9ex-improvements\n\nThe variable can be set to the following values:\n\n- \"0\": Use the original Direct3D 9 API. (default)\n- \"1\": Use the Direct3D 9Ex API on Vista and later (and fall back if D3D9Ex\n  is unavailable)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_USE_D3D9EX",
          "kind": "def",
          "value": "\"SDL_WINDOWS_USE_D3D9EX\""
        },
        "SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE": {
          "doc": "A variable controlling whether SDL will clear the window contents when the\nWM_ERASEBKGND message is received.\n\nThe variable can be set to the following values:\n\n- \"0\"/\"never\": Never clear the window.\n- \"1\"/\"initial\": Clear the window when the first WM_ERASEBKGND event fires.\n  (default)\n- \"2\"/\"always\": Clear the window on every WM_ERASEBKGND event.\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE",
          "kind": "def",
          "value": "\"SDL_WINDOWS_ERASE_BACKGROUND_MODE\""
        },
        "SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT": {
          "doc": "A variable controlling whether X11 windows are marked as override-redirect.\n\nIf set, this _might_ increase framerate at the expense of the desktop not\nworking as expected. Override-redirect windows aren't noticed by the window\nmanager at all.\n\nYou should probably only use this for fullscreen windows, and you probably\nshouldn't even use it for that. But it's here if you want to try!\n\nThe variable can be set to the following values:\n\n- \"0\": Do not mark the window as override-redirect. (default)\n- \"1\": Mark the window as override-redirect.\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT",
          "kind": "def",
          "value": "\"SDL_X11_FORCE_OVERRIDE_REDIRECT\""
        },
        "SDL_HINT_X11_WINDOW_TYPE": {
          "doc": "A variable specifying the type of an X11 window.\n\nDuring SDL_CreateWindow, SDL uses the _NET_WM_WINDOW_TYPE X11 property to\nreport to the window manager the type of window it wants to create. This\nmight be set to various things if SDL_WINDOW_TOOLTIP or\nSDL_WINDOW_POPUP_MENU, etc, were specified. For \"normal\" windows that\nhaven't set a specific type, this hint can be used to specify a custom\ntype. For example, a dock window might set this to\n\"_NET_WM_WINDOW_TYPE_DOCK\".\n\nThis hint should be set before creating a window.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_X11_WINDOW_TYPE",
          "kind": "def",
          "value": "\"SDL_X11_WINDOW_TYPE\""
        },
        "SDL_HINT_X11_XCB_LIBRARY": {
          "doc": "Specify the XCB library to load for the X11 driver.\n\nThe default is platform-specific, often \"libX11-xcb.so.1\".\n\nThis hint should be set before initializing the video subsystem.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_X11_XCB_LIBRARY",
          "kind": "def",
          "value": "\"SDL_X11_XCB_LIBRARY\""
        },
        "SDL_HINT_XINPUT_ENABLED": {
          "doc": "A variable controlling whether XInput should be used for controller\nhandling.\n\nThe variable can be set to the following values:\n\n- \"0\": XInput is not enabled.\n- \"1\": XInput is enabled. (default)\n\nThis hint should be set before SDL is initialized.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_XINPUT_ENABLED",
          "kind": "def",
          "value": "\"SDL_XINPUT_ENABLED\""
        },
        "SDL_HINT_ASSERT": {
          "doc": "A variable controlling response to SDL_assert failures.\n\nThe variable can be set to the following case-sensitive values:\n\n- \"abort\": Program terminates immediately.\n- \"break\": Program triggers a debugger breakpoint.\n- \"retry\": Program reruns the SDL_assert's test again.\n- \"ignore\": Program continues on, ignoring this assertion failure this\n  time.\n- \"always_ignore\": Program continues on, ignoring this assertion failure\n  for the rest of the run.\n\nNote that SDL_SetAssertionHandler offers a programmatic means to deal with\nassertion failures through a callback, and this hint is largely intended to\nbe used via environment variables by end users and automated tools.\n\nThis hint should be set before an assertion failure is triggered and can be\nchanged at any time.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_ASSERT",
          "kind": "def",
          "value": "\"SDL_ASSERT\""
        },
        "SDL_HINT_PEN_MOUSE_EVENTS": {
          "doc": "A variable controlling whether pen events should generate synthetic mouse\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Pen events will not generate mouse events.\n- \"1\": Pen events will generate mouse events. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_PEN_MOUSE_EVENTS",
          "kind": "def",
          "value": "\"SDL_PEN_MOUSE_EVENTS\""
        },
        "SDL_HINT_PEN_TOUCH_EVENTS": {
          "doc": "A variable controlling whether pen events should generate synthetic touch\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Pen events will not generate touch events.\n- \"1\": Pen events will generate touch events. (default)\n\nThis hint can be set anytime.\n\n\\since This hint is available since SDL 3.2.0.",
          "name": "SDL_HINT_PEN_TOUCH_EVENTS",
          "kind": "def",
          "value": "\"SDL_PEN_TOUCH_EVENTS\""
        },
        "SDL_HintPriority": {
          "doc": "An enumeration of hint priorities.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_HintPriority",
          "kind": "enum",
          "entries": {
            "SDL_HINT_DEFAULT": {
              "doc": "",
              "name": "SDL_HINT_DEFAULT",
              "kind": "var",
              "type": ""
            },
            "SDL_HINT_NORMAL": {
              "doc": "",
              "name": "SDL_HINT_NORMAL",
              "kind": "var",
              "type": ""
            },
            "SDL_HINT_OVERRIDE": {
              "doc": "",
              "name": "SDL_HINT_OVERRIDE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_SetHintWithPriority": {
          "doc": "Set a hint with a specific priority.\n\nThe priority controls the behavior when setting a hint that already has a\nvalue. Hints will replace existing hints of their priority and lower.\nEnvironment variables are considered to have override priority.\n\n\\param name the hint to set.\n\\param value the value of the hint variable.\n\\param priority the SDL_HintPriority level for the hint.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetHint\n\\sa SDL_ResetHint\n\\sa SDL_SetHint",
          "name": "SDL_SetHintWithPriority",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            },
            {
              "name": "priority",
              "type": "SDL_HintPriority"
            }
          ]
        },
        "SDL_SetHint": {
          "doc": "Set a hint with normal priority.\n\nHints will not be set if there is an existing override hint or environment\nvariable that takes precedence. You can use SDL_SetHintWithPriority() to\nset the hint with override priority instead.\n\n\\param name the hint to set.\n\\param value the value of the hint variable.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetHint\n\\sa SDL_ResetHint\n\\sa SDL_SetHintWithPriority",
          "name": "SDL_SetHint",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            }
          ]
        },
        "SDL_ResetHint": {
          "doc": "Reset a hint to the default value.\n\nThis will reset a hint to the value of the environment variable, or NULL if\nthe environment isn't set. Callbacks will be called normally with this\nchange.\n\n\\param name the hint to set.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetHint\n\\sa SDL_ResetHints",
          "name": "SDL_ResetHint",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_ResetHints": {
          "doc": "Reset all hints to the default values.\n\nThis will reset all hints to the value of the associated environment\nvariable, or NULL if the environment isn't set. Callbacks will be called\nnormally with this change.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ResetHint",
          "name": "SDL_ResetHints",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_GetHint": {
          "doc": "Get the value of a hint.\n\n\\param name the hint to query.\n\\returns the string value of a hint or NULL if the hint isn't set.\n\n\\threadsafety It is safe to call this function from any thread, however the\n              return value only remains valid until the hint is changed; if\n              another thread might do so, the app should supply locks\n              and/or make a copy of the string. Note that using a hint\n              callback instead is always thread-safe, as SDL holds a lock\n              on the thread subsystem during the callback.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetHint\n\\sa SDL_SetHintWithPriority",
          "name": "SDL_GetHint",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetHintBoolean": {
          "doc": "Get the boolean value of a hint variable.\n\n\\param name the name of the hint to get the boolean value from.\n\\param default_value the value to return if the hint does not exist.\n\\returns the boolean value of a hint or the provided default value if the\n         hint does not exist.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetHint\n\\sa SDL_SetHint",
          "name": "SDL_GetHintBoolean",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "bool"
            }
          ]
        },
        "SDL_HintCallback": {
          "doc": "A callback used to send notifications of hint value changes.\n\nThis is called an initial time during SDL_AddHintCallback with the hint's\ncurrent value, and then again each time the hint's value changes.\n\n\\param userdata what was passed as `userdata` to SDL_AddHintCallback().\n\\param name what was passed as `name` to SDL_AddHintCallback().\n\\param oldValue the previous hint value.\n\\param newValue the new value hint is to be set to.\n\n\\threadsafety This callback is fired from whatever thread is setting a new\n              hint value. SDL holds a lock on the hint subsystem when\n              calling this callback.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_AddHintCallback",
          "name": "SDL_HintCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "oldValue",
              "type": "const char *"
            },
            {
              "name": "newValue",
              "type": "const char *"
            }
          ]
        },
        "SDL_AddHintCallback": {
          "doc": "Add a function to watch a particular hint.\n\nThe callback function is called _during_ this function, to provide it an\ninitial value, and again each time the hint's value changes.\n\n\\param name the hint to watch.\n\\param callback An SDL_HintCallback function that will be called when the\n                hint value changes.\n\\param userdata a pointer to pass to the callback function.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RemoveHintCallback",
          "name": "SDL_AddHintCallback",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "callback",
              "type": "SDL_HintCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_RemoveHintCallback": {
          "doc": "Remove a function watching a particular hint.\n\n\\param name the hint being watched.\n\\param callback an SDL_HintCallback function that will be called when the\n                hint value changes.\n\\param userdata a pointer being passed to the callback function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddHintCallback",
          "name": "SDL_RemoveHintCallback",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "callback",
              "type": "SDL_HintCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        }
      }
    },
    "SDL_properties.h": {
      "name": "SDL_properties.h",
      "doc": "# CategoryProperties\n\nA property is a variable that can be created and retrieved by name at\nruntime.\n\nAll properties are part of a property group (SDL_PropertiesID). A property\ngroup can be created with the SDL_CreateProperties function and destroyed\nwith the SDL_DestroyProperties function.\n\nProperties can be added to and retrieved from a property group through the\nfollowing functions:\n\n- SDL_SetPointerProperty and SDL_GetPointerProperty operate on `void*`\n  pointer types.\n- SDL_SetStringProperty and SDL_GetStringProperty operate on string types.\n- SDL_SetNumberProperty and SDL_GetNumberProperty operate on signed 64-bit\n  integer types.\n- SDL_SetFloatProperty and SDL_GetFloatProperty operate on floating point\n  types.\n- SDL_SetBooleanProperty and SDL_GetBooleanProperty operate on boolean\n  types.\n\nProperties can be removed from a group by using SDL_ClearProperty.",
      "entries": {
        "SDL_PropertiesID": {
          "doc": "SDL properties ID\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_PropertiesID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_PropertyType": {
          "doc": "SDL property type\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PropertyType",
          "kind": "enum",
          "entries": {
            "SDL_PROPERTY_TYPE_INVALID": {
              "doc": "",
              "name": "SDL_PROPERTY_TYPE_INVALID",
              "kind": "var",
              "type": ""
            },
            "SDL_PROPERTY_TYPE_POINTER": {
              "doc": "",
              "name": "SDL_PROPERTY_TYPE_POINTER",
              "kind": "var",
              "type": ""
            },
            "SDL_PROPERTY_TYPE_STRING": {
              "doc": "",
              "name": "SDL_PROPERTY_TYPE_STRING",
              "kind": "var",
              "type": ""
            },
            "SDL_PROPERTY_TYPE_NUMBER": {
              "doc": "",
              "name": "SDL_PROPERTY_TYPE_NUMBER",
              "kind": "var",
              "type": ""
            },
            "SDL_PROPERTY_TYPE_FLOAT": {
              "doc": "",
              "name": "SDL_PROPERTY_TYPE_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PROPERTY_TYPE_BOOLEAN": {
              "doc": "",
              "name": "SDL_PROPERTY_TYPE_BOOLEAN",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GetGlobalProperties": {
          "doc": "Get the global SDL properties.\n\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetGlobalProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": []
        },
        "SDL_CreateProperties": {
          "doc": "Create a group of properties.\n\nAll properties are automatically destroyed when SDL_Quit() is called.\n\n\\returns an ID for a new group of properties, or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyProperties",
          "name": "SDL_CreateProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": []
        },
        "SDL_CopyProperties": {
          "doc": "Copy a group of properties.\n\nCopy all the properties from one group of properties to another, with the\nexception of properties requiring cleanup (set using\nSDL_SetPointerPropertyWithCleanup()), which will not be copied. Any\nproperty that already exists on `dst` will be overwritten.\n\n\\param src the properties to copy.\n\\param dst the destination properties.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_CopyProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "dst",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_LockProperties": {
          "doc": "Lock a group of properties.\n\nObtain a multi-threaded lock for these properties. Other threads will wait\nwhile trying to lock these properties until they are unlocked. Properties\nmust be unlocked before they are destroyed.\n\nThe lock is automatically taken when setting individual properties, this\nfunction is only needed when you want to set several properties atomically\nor want to guarantee that properties being queried aren't freed in another\nthread.\n\n\\param props the properties to lock.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UnlockProperties",
          "name": "SDL_LockProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_UnlockProperties": {
          "doc": "Unlock a group of properties.\n\n\\param props the properties to unlock.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockProperties",
          "name": "SDL_UnlockProperties",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_CleanupPropertyCallback": {
          "doc": "A callback used to free resources when a property is deleted.\n\nThis should release any resources associated with `value` that are no\nlonger needed.\n\nThis callback is set per-property. Different properties in the same group\ncan have different cleanup callbacks.\n\nThis callback will be called _during_ SDL_SetPointerPropertyWithCleanup if\nthe function fails for any reason.\n\n\\param userdata an app-defined pointer passed to the callback.\n\\param value the pointer assigned to the property to clean up.\n\n\\threadsafety This callback may fire without any locks held; if this is a\n              concern, the app should provide its own locking.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetPointerPropertyWithCleanup",
          "name": "SDL_CleanupPropertyCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "value",
              "type": "void *"
            }
          ]
        },
        "SDL_SetPointerPropertyWithCleanup": {
          "doc": "Set a pointer property in a group of properties with a cleanup function\nthat is called when the property is deleted.\n\nThe cleanup function is also called if setting the property fails for any\nreason.\n\nFor simply setting basic data types, like numbers, bools, or strings, use\nSDL_SetNumberProperty, SDL_SetBooleanProperty, or SDL_SetStringProperty\ninstead, as those functions will handle cleanup on your behalf. This\nfunction is only for more complex, custom data.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property, or NULL to delete the property.\n\\param cleanup the function to call when this property is deleted, or NULL\n               if no cleanup is necessary.\n\\param userdata a pointer that is passed to the cleanup function.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPointerProperty\n\\sa SDL_SetPointerProperty\n\\sa SDL_CleanupPropertyCallback",
          "name": "SDL_SetPointerPropertyWithCleanup",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "void *"
            },
            {
              "name": "cleanup",
              "type": "SDL_CleanupPropertyCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetPointerProperty": {
          "doc": "Set a pointer property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property, or NULL to delete the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPointerProperty\n\\sa SDL_HasProperty\n\\sa SDL_SetBooleanProperty\n\\sa SDL_SetFloatProperty\n\\sa SDL_SetNumberProperty\n\\sa SDL_SetPointerPropertyWithCleanup\n\\sa SDL_SetStringProperty",
          "name": "SDL_SetPointerProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "void *"
            }
          ]
        },
        "SDL_SetStringProperty": {
          "doc": "Set a string property in a group of properties.\n\nThis function makes a copy of the string; the caller does not have to\npreserve the data after this call completes.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property, or NULL to delete the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetStringProperty",
          "name": "SDL_SetStringProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            }
          ]
        },
        "SDL_SetNumberProperty": {
          "doc": "Set an integer property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumberProperty",
          "name": "SDL_SetNumberProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "Sint64"
            }
          ]
        },
        "SDL_SetFloatProperty": {
          "doc": "Set a floating point property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetFloatProperty",
          "name": "SDL_SetFloatProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "float"
            }
          ]
        },
        "SDL_SetBooleanProperty": {
          "doc": "Set a boolean property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetBooleanProperty",
          "name": "SDL_SetBooleanProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ]
        },
        "SDL_HasProperty": {
          "doc": "Return whether a property exists in a group of properties.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\returns true if the property exists, or false if it doesn't.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType",
          "name": "SDL_HasProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetPropertyType": {
          "doc": "Get the type of a property in a group of properties.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\returns the type of the property, or SDL_PROPERTY_TYPE_INVALID if it is\n         not set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasProperty",
          "name": "SDL_GetPropertyType",
          "kind": "function",
          "type": "SDL_PropertyType",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetPointerProperty": {
          "doc": "Get a pointer property from a group of properties.\n\nBy convention, the names of properties that SDL exposes on objects will\nstart with \"SDL.\", and properties that SDL uses internally will start with\n\"SDL.internal.\". These should be considered read-only and should not be\nmodified by applications.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a pointer property.\n\n\\threadsafety It is safe to call this function from any thread, although\n              the data returned is not protected and could potentially be\n              freed if you call SDL_SetPointerProperty() or\n              SDL_ClearProperty() on these properties from another thread.\n              If you need to avoid this, use SDL_LockProperties() and\n              SDL_UnlockProperties().\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetBooleanProperty\n\\sa SDL_GetFloatProperty\n\\sa SDL_GetNumberProperty\n\\sa SDL_GetPropertyType\n\\sa SDL_GetStringProperty\n\\sa SDL_HasProperty\n\\sa SDL_SetPointerProperty",
          "name": "SDL_GetPointerProperty",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "void *"
            }
          ]
        },
        "SDL_GetStringProperty": {
          "doc": "Get a string property from a group of properties.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a string property.\n\n\\threadsafety It is safe to call this function from any thread, although\n              the data returned is not protected and could potentially be\n              freed if you call SDL_SetStringProperty() or\n              SDL_ClearProperty() on these properties from another thread.\n              If you need to avoid this, use SDL_LockProperties() and\n              SDL_UnlockProperties().\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetStringProperty",
          "name": "SDL_GetStringProperty",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetNumberProperty": {
          "doc": "Get a number property from a group of properties.\n\nYou can use SDL_GetPropertyType() to query whether the property exists and\nis a number property.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a number property.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetNumberProperty",
          "name": "SDL_GetNumberProperty",
          "kind": "function",
          "type": "Sint64",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "Sint64"
            }
          ]
        },
        "SDL_GetFloatProperty": {
          "doc": "Get a floating point property from a group of properties.\n\nYou can use SDL_GetPropertyType() to query whether the property exists and\nis a floating point property.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a float property.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetFloatProperty",
          "name": "SDL_GetFloatProperty",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "float"
            }
          ]
        },
        "SDL_GetBooleanProperty": {
          "doc": "Get a boolean property from a group of properties.\n\nYou can use SDL_GetPropertyType() to query whether the property exists and\nis a boolean property.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a boolean property.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetBooleanProperty",
          "name": "SDL_GetBooleanProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "bool"
            }
          ]
        },
        "SDL_ClearProperty": {
          "doc": "Clear a property from a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to clear.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ClearProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumeratePropertiesCallback": {
          "doc": "A callback used to enumerate all the properties in a group of properties.\n\nThis callback is called from SDL_EnumerateProperties(), and is called once\nper property in the set.\n\n\\param userdata an app-defined pointer passed to the callback.\n\\param props the SDL_PropertiesID that is being enumerated.\n\\param name the next property name in the enumeration.\n\n\\threadsafety SDL_EnumerateProperties holds a lock on `props` during this\n              callback.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EnumerateProperties",
          "name": "SDL_EnumeratePropertiesCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumerateProperties": {
          "doc": "Enumerate the properties contained in a group of properties.\n\nThe callback function is called for each property in the group of\nproperties. The properties are locked during enumeration.\n\n\\param props the properties to query.\n\\param callback the function to call for each property.\n\\param userdata a pointer that is passed to `callback`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EnumerateProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "callback",
              "type": "SDL_EnumeratePropertiesCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_DestroyProperties": {
          "doc": "Destroy a group of properties.\n\nAll properties are deleted and their cleanup functions will be called, if\nany.\n\n\\param props the properties to destroy.\n\n\\threadsafety This function should not be called while these properties are\n              locked or other threads might be setting or getting values\n              from these properties.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties",
          "name": "SDL_DestroyProperties",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        }
      }
    },
    "SDL_error.h": {
      "name": "SDL_error.h",
      "doc": "# CategoryError\n\nSimple error message routines for SDL.\n\nMost apps will interface with these APIs in exactly one function: when\nalmost any SDL function call reports failure, you can get a human-readable\nstring of the problem from SDL_GetError().\n\nThese strings are maintained per-thread, and apps are welcome to set their\nown errors, which is popular when building libraries on top of SDL for\nother apps to consume. These strings are set by calling SDL_SetError().\n\nA common usage pattern is to have a function that returns true for success\nand false for failure, and do this when something fails:\n\n```c\nif (something_went_wrong) {\n   return SDL_SetError(\"The thing broke in this specific way: %d\", errcode);\n}\n```\n\nIt's also common to just return `false` in this case if the failing thing\nis known to call SDL_SetError(), so errors simply propagate through.",
      "entries": {
        "SDL_SetError": {
          "doc": "Set the SDL error message for the current thread.\n\nCalling this function will replace any previous error message that was set.\n\nThis function always returns false, since SDL frequently uses false to\nsignify a failing result, leading to this idiom:\n\n```c\nif (error_code) {\n    return SDL_SetError(\"This operation has failed: %d\", error_code);\n}\n```\n\n\\param fmt a printf()-style message format string.\n\\param ... additional parameters matching % tokens in the `fmt` string, if\n           any.\n\\returns false.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ClearError\n\\sa SDL_GetError\n\\sa SDL_SetErrorV",
          "name": "SDL_SetError",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_SetErrorV": {
          "doc": "Set the SDL error message for the current thread.\n\nCalling this function will replace any previous error message that was set.\n\n\\param fmt a printf()-style message format string.\n\\param ap a variable argument list.\n\\returns false.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ClearError\n\\sa SDL_GetError\n\\sa SDL_SetError",
          "name": "SDL_SetErrorV",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_OutOfMemory": {
          "doc": "Set an error indicating that memory allocation failed.\n\nThis function does not do any memory allocation.\n\n\\returns false.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OutOfMemory",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GetError": {
          "doc": "Retrieve a message about the last error that occurred on the current\nthread.\n\nIt is possible for multiple errors to occur before calling SDL_GetError().\nOnly the last error is returned.\n\nThe message is only applicable when an SDL function has signaled an error.\nYou must check the return values of SDL function calls to determine when to\nappropriately call SDL_GetError(). You should *not* use the results of\nSDL_GetError() to decide if an error has occurred! Sometimes SDL will set\nan error string even when reporting success.\n\nSDL will *not* clear the error string for successful API calls. You *must*\ncheck return values for failure cases before you can assume the error\nstring applies.\n\nError strings are set per-thread, so an error set in a different thread\nwill not interfere with the current thread's operation.\n\nThe returned value is a thread-local string which will remain valid until\nthe current thread's error string is changed. The caller should make a copy\nif the value is needed after the next SDL API call.\n\n\\returns a message with information about the specific error that occurred,\n         or an empty string if there hasn't been an error message set since\n         the last call to SDL_ClearError().\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ClearError\n\\sa SDL_SetError",
          "name": "SDL_GetError",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_ClearError": {
          "doc": "Clear any previous error message for this thread.\n\n\\returns true.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetError\n\\sa SDL_SetError",
          "name": "SDL_ClearError",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_Unsupported": {
          "doc": "A macro to standardize error reporting on unsupported operations.\n\nThis simply calls SDL_SetError() with a standardized error string, for\nconvenience, consistency, and clarity.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Unsupported",
          "kind": "def",
          "parameters": [],
          "value": "SDL_SetError(\"That operation is not supported\")"
        },
        "SDL_InvalidParamError": {
          "doc": "A macro to standardize error reporting on unsupported operations.\n\nThis simply calls SDL_SetError() with a standardized error string, for\nconvenience, consistency, and clarity.\n\nA common usage pattern inside SDL is this:\n\n```c\nbool MyFunction(const char *str) {\n    if (!str) {\n        return SDL_InvalidParamError(\"str\");  // returns false.\n    }\n    DoSomething(str);\n    return true;\n}\n```\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_InvalidParamError",
          "kind": "def",
          "parameters": [
            "param"
          ],
          "value": "SDL_SetError(\"Parameter '%s' is invalid\", (param))"
        }
      }
    },
    "SDL_log.h": {
      "name": "SDL_log.h",
      "doc": "# CategoryLog\n\nSimple log messages with priorities and categories. A message's\nSDL_LogPriority signifies how important the message is. A message's\nSDL_LogCategory signifies from what domain it belongs to. Every category\nhas a minimum priority specified: when a message belongs to that category,\nit will only be sent out if it has that minimum priority or higher.\n\nSDL's own logs are sent below the default priority threshold, so they are\nquiet by default.\n\nYou can change the log verbosity programmatically using\nSDL_SetLogPriority() or with SDL_SetHint(SDL_HINT_LOGGING, ...), or with\nthe \"SDL_LOGGING\" environment variable. This variable is a comma separated\nset of category=level tokens that define the default logging levels for SDL\napplications.\n\nThe category can be a numeric category, one of \"app\", \"error\", \"assert\",\n\"system\", \"audio\", \"video\", \"render\", \"input\", \"test\", or `*` for any\nunspecified category.\n\nThe level can be a numeric level, one of \"trace\", \"verbose\", \"debug\",\n\"info\", \"warn\", \"error\", \"critical\", or \"quiet\" to disable that category.\n\nYou can omit the category if you want to set the logging level for all\ncategories.\n\nIf this hint isn't set, the default log levels are equivalent to:\n\n`app=info,assert=warn,test=verbose,*=error`\n\nHere's where the messages go on different platforms:\n\n- Windows: debug output stream\n- Android: log output\n- Others: standard error output (stderr)\n\nYou don't need to have a newline (`\\n`) on the end of messages, the\nfunctions will do that for you. For consistent behavior cross-platform, you\nshouldn't have any newlines in messages, such as to log multiple lines in\none call; unusual platform-specific behavior can be observed in such usage.\nDo one log call per line instead, with no newlines in messages.\n\nEach log call is atomic, so you won't see log messages cut off one another\nwhen logging from multiple threads.",
      "entries": {
        "SDL_LogCategory": {
          "doc": "The predefined log categories\n\nBy default the application and gpu categories are enabled at the INFO\nlevel, the assert category is enabled at the WARN level, test is enabled at\nthe VERBOSE level and all other categories are enabled at the ERROR level.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_LogCategory",
          "kind": "enum",
          "entries": {
            "SDL_LOG_CATEGORY_APPLICATION": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_APPLICATION",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_ERROR": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_ERROR",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_ASSERT": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_ASSERT",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_SYSTEM": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_SYSTEM",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_AUDIO": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_AUDIO",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_VIDEO": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_VIDEO",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RENDER": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RENDER",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_INPUT": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_INPUT",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_TEST": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_TEST",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_GPU": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_GPU",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED2": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED2",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED3": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED3",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED4": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED4",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED5": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED5",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED6": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED6",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED7": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED7",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED8": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED8",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED9": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED9",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_RESERVED10": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_RESERVED10",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_CATEGORY_CUSTOM": {
              "doc": "",
              "name": "SDL_LOG_CATEGORY_CUSTOM",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_LogPriority": {
          "doc": "The predefined log priorities\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_LogPriority",
          "kind": "enum",
          "entries": {
            "SDL_LOG_PRIORITY_INVALID": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_INVALID",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_TRACE": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_TRACE",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_VERBOSE": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_VERBOSE",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_DEBUG": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_DEBUG",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_INFO": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_INFO",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_WARN": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_WARN",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_ERROR": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_ERROR",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_CRITICAL": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_CRITICAL",
              "kind": "var",
              "type": ""
            },
            "SDL_LOG_PRIORITY_COUNT": {
              "doc": "",
              "name": "SDL_LOG_PRIORITY_COUNT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_SetLogPriorities": {
          "doc": "Set the priority of all log categories.\n\n\\param priority the SDL_LogPriority to assign.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ResetLogPriorities\n\\sa SDL_SetLogPriority",
          "name": "SDL_SetLogPriorities",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "priority",
              "type": "SDL_LogPriority"
            }
          ]
        },
        "SDL_SetLogPriority": {
          "doc": "Set the priority of a particular log category.\n\n\\param category the category to assign a priority to.\n\\param priority the SDL_LogPriority to assign.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetLogPriority\n\\sa SDL_ResetLogPriorities\n\\sa SDL_SetLogPriorities",
          "name": "SDL_SetLogPriority",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "priority",
              "type": "SDL_LogPriority"
            }
          ]
        },
        "SDL_GetLogPriority": {
          "doc": "Get the priority of a particular log category.\n\n\\param category the category to query.\n\\returns the SDL_LogPriority for the requested category.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetLogPriority",
          "name": "SDL_GetLogPriority",
          "kind": "function",
          "type": "SDL_LogPriority",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            }
          ]
        },
        "SDL_ResetLogPriorities": {
          "doc": "Reset all priorities to default.\n\nThis is called by SDL_Quit().\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetLogPriorities\n\\sa SDL_SetLogPriority",
          "name": "SDL_ResetLogPriorities",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_SetLogPriorityPrefix": {
          "doc": "Set the text prepended to log messages of a given priority.\n\nBy default SDL_LOG_PRIORITY_INFO and below have no prefix, and\nSDL_LOG_PRIORITY_WARN and higher have a prefix showing their priority, e.g.\n\"WARNING: \".\n\n\\param priority the SDL_LogPriority to modify.\n\\param prefix the prefix to use for that log priority, or NULL to use no\n              prefix.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetLogPriorities\n\\sa SDL_SetLogPriority",
          "name": "SDL_SetLogPriorityPrefix",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "priority",
              "type": "SDL_LogPriority"
            },
            {
              "name": "prefix",
              "type": "const char *"
            }
          ]
        },
        "SDL_Log": {
          "doc": "Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.\n\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the `fmt` string, if\n           any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_Log",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogTrace": {
          "doc": "Log a message with SDL_LOG_PRIORITY_TRACE.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogTrace",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogVerbose": {
          "doc": "Log a message with SDL_LOG_PRIORITY_VERBOSE.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogWarn",
          "name": "SDL_LogVerbose",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogDebug": {
          "doc": "Log a message with SDL_LOG_PRIORITY_DEBUG.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogDebug",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogInfo": {
          "doc": "Log a message with SDL_LOG_PRIORITY_INFO.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogInfo",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogWarn": {
          "doc": "Log a message with SDL_LOG_PRIORITY_WARN.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose",
          "name": "SDL_LogWarn",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogError": {
          "doc": "Log a message with SDL_LOG_PRIORITY_ERROR.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogError",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogCritical": {
          "doc": "Log a message with SDL_LOG_PRIORITY_CRITICAL.\n\n\\param category the category of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogCritical",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogMessage": {
          "doc": "Log a message with the specified category and priority.\n\n\\param category the category of the message.\n\\param priority the priority of the message.\n\\param fmt a printf() style message format string.\n\\param ... additional parameters matching % tokens in the **fmt** string,\n           if any.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessageV\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogMessage",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "priority",
              "type": "SDL_LogPriority"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_LogMessageV": {
          "doc": "Log a message with the specified category and priority.\n\n\\param category the category of the message.\n\\param priority the priority of the message.\n\\param fmt a printf() style message format string.\n\\param ap a variable argument list.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Log\n\\sa SDL_LogCritical\n\\sa SDL_LogDebug\n\\sa SDL_LogError\n\\sa SDL_LogInfo\n\\sa SDL_LogMessage\n\\sa SDL_LogTrace\n\\sa SDL_LogVerbose\n\\sa SDL_LogWarn",
          "name": "SDL_LogMessageV",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "priority",
              "type": "SDL_LogPriority"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_LogOutputFunction": {
          "doc": "The prototype for the log output callback function.\n\nThis function is called by SDL when there is new text to be logged. A mutex\nis held so that this function is never called by more than one thread at\nonce.\n\n\\param userdata what was passed as `userdata` to\n                SDL_SetLogOutputFunction().\n\\param category the category of the message.\n\\param priority the priority of the message.\n\\param message the message being output.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_LogOutputFunction",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "category",
              "type": "int"
            },
            {
              "name": "priority",
              "type": "SDL_LogPriority"
            },
            {
              "name": "message",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetDefaultLogOutputFunction": {
          "doc": "Get the default log output function.\n\n\\returns the default log output callback.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetLogOutputFunction\n\\sa SDL_GetLogOutputFunction",
          "name": "SDL_GetDefaultLogOutputFunction",
          "kind": "function",
          "type": "SDL_LogOutputFunction",
          "parameters": []
        },
        "SDL_GetLogOutputFunction": {
          "doc": "Get the current log output function.\n\n\\param callback an SDL_LogOutputFunction filled in with the current log\n                callback.\n\\param userdata a pointer filled in with the pointer that is passed to\n                `callback`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDefaultLogOutputFunction\n\\sa SDL_SetLogOutputFunction",
          "name": "SDL_GetLogOutputFunction",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_LogOutputFunction *"
            },
            {
              "name": "userdata",
              "type": "void **"
            }
          ]
        },
        "SDL_SetLogOutputFunction": {
          "doc": "Replace the default log output function with one of your own.\n\n\\param callback an SDL_LogOutputFunction to call instead of the default.\n\\param userdata a pointer that is passed to `callback`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDefaultLogOutputFunction\n\\sa SDL_GetLogOutputFunction",
          "name": "SDL_SetLogOutputFunction",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_LogOutputFunction"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        }
      }
    },
    "SDL_assert.h": {
      "name": "SDL_assert.h",
      "doc": "# CategoryAssert\n\nA helpful assertion macro!\n\nSDL assertions operate like your usual `assert` macro, but with some added\nfeatures:\n\n- It uses a trick with the `sizeof` operator, so disabled assertions\n  vaporize out of the compiled code, but variables only referenced in the\n  assertion won't trigger compiler warnings about being unused.\n- It is safe to use with a dangling-else: `if (x) SDL_assert(y); else\n  do_something();`\n- It works the same everywhere, instead of counting on various platforms'\n  compiler and C runtime to behave.\n- It provides multiple levels of assertion (SDL_assert, SDL_assert_release,\n  SDL_assert_paranoid) instead of a single all-or-nothing option.\n- It offers a variety of responses when an assertion fails (retry, trigger\n  the debugger, abort the program, ignore the failure once, ignore it for\n  the rest of the program's run).\n- It tries to show the user a dialog by default, if possible, but the app\n  can provide a callback to handle assertion failures however they like.\n- It lets failed assertions be retried. Perhaps you had a network failure\n  and just want to retry the test after plugging your network cable back\n  in? You can.\n- It lets the user ignore an assertion failure, if there's a harmless\n  problem that one can continue past.\n- It lets the user mark an assertion as ignored for the rest of the\n  program's run; if there's a harmless problem that keeps popping up.\n- It provides statistics and data on all failed assertions to the app.\n- It allows the default assertion handler to be controlled with environment\n  variables, in case an automated script needs to control it.\n- It can be used as an aid to Clang's static analysis; it will treat SDL\n  assertions as universally true (under the assumption that you are serious\n  about the asserted claims and that your debug builds will detect when\n  these claims were wrong). This can help the analyzer avoid false\n  positives.\n\nTo use it: compile a debug build and just sprinkle around tests to check\nyour code!",
      "entries": {
        "SDL_ASSERT_LEVEL": {
          "doc": "The level of assertion aggressiveness.\n\nThis value changes depending on compiler options and other preprocessor\ndefines.\n\nIt is currently one of the following values, but future SDL releases might\nadd more:\n\n- 0: All SDL assertion macros are disabled.\n- 1: Release settings: SDL_assert disabled, SDL_assert_release enabled.\n- 2: Debug settings: SDL_assert and SDL_assert_release enabled.\n- 3: Paranoid settings: All SDL assertion macros enabled, including\n  SDL_assert_paranoid.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ASSERT_LEVEL",
          "kind": "def",
          "value": "SomeNumberBasedOnVariousFactors"
        },
        "SDL_TriggerBreakpoint": {
          "doc": "Attempt to tell an attached debugger to pause.\n\nThis allows an app to programmatically halt (\"break\") the debugger as if it\nhad hit a breakpoint, allowing the developer to examine program state, etc.\n\nThis is a macro--not a function--so that the debugger breaks on the source\ncode line that used SDL_TriggerBreakpoint and not in some random guts of\nSDL. SDL_assert uses this macro for the same reason.\n\nIf the program is not running under a debugger, SDL_TriggerBreakpoint will\nlikely terminate the app, possibly without warning. If the current platform\nisn't supported, this macro is left undefined.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_TriggerBreakpoint",
          "kind": "def",
          "parameters": [],
          "value": "TriggerABreakpointInAPlatformSpecificManner"
        },
        "SDL_FUNCTION": {
          "doc": "A macro that reports the current function being compiled.\n\nIf SDL can't figure how the compiler reports this, it will use \"???\".\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_FUNCTION",
          "kind": "def",
          "value": "__FUNCTION__"
        },
        "SDL_FILE": {
          "doc": "A macro that reports the current file being compiled.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_FILE",
          "kind": "def",
          "value": "__FILE__"
        },
        "SDL_LINE": {
          "doc": "A macro that reports the current line number of the file being compiled.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_LINE",
          "kind": "def",
          "value": "__LINE__"
        },
        "SDL_NULL_WHILE_LOOP_CONDITION": {
          "doc": "A macro for wrapping code in `do {} while (0);` without compiler warnings.\n\nVisual Studio with really aggressive warnings enabled needs this to avoid\ncompiler complaints.\n\nthe `do {} while (0);` trick is useful for wrapping code in a macro that\nmay or may not be a single statement, to avoid various C language\naccidents.\n\nTo use:\n\n```c\ndo { SomethingOnce(); } while (SDL_NULL_WHILE_LOOP_CONDITION (0));\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NULL_WHILE_LOOP_CONDITION",
          "kind": "def",
          "value": "(0)"
        },
        "SDL_disabled_assert": {
          "doc": "The macro used when an assertion is disabled.\n\nThis isn't for direct use by apps, but this is the code that is inserted\nwhen an SDL_assert is disabled (perhaps in a release build).\n\nThe code does nothing, but wraps `condition` in a sizeof operator, which\ngenerates no code and has no side effects, but avoid compiler warnings\nabout unused variables.\n\n\\param condition the condition to assert (but not actually run here).\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_disabled_assert",
          "kind": "def",
          "parameters": [
            "condition"
          ],
          "value": "    do { (void) sizeof ((condition)); } while (SDL_NULL_WHILE_LOOP_CONDITION)"
        },
        "SDL_AssertState": {
          "doc": "Possible outcomes from a triggered assertion.\n\nWhen an enabled assertion triggers, it may call the assertion handler\n(possibly one provided by the app via SDL_SetAssertionHandler), which will\nreturn one of these values, possibly after asking the user.\n\nThen SDL will respond based on this outcome (loop around to retry the\ncondition, try to break in a debugger, kill the program, or ignore the\nproblem).\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_AssertState",
          "kind": "enum",
          "entries": {
            "SDL_ASSERTION_RETRY": {
              "doc": "Retry the assert immediately.",
              "name": "SDL_ASSERTION_RETRY",
              "kind": "var",
              "type": ""
            },
            "SDL_ASSERTION_BREAK": {
              "doc": "Make the debugger trigger a breakpoint.",
              "name": "SDL_ASSERTION_BREAK",
              "kind": "var",
              "type": ""
            },
            "SDL_ASSERTION_ABORT": {
              "doc": "Terminate the program.",
              "name": "SDL_ASSERTION_ABORT",
              "kind": "var",
              "type": ""
            },
            "SDL_ASSERTION_IGNORE": {
              "doc": "Ignore the assert.",
              "name": "SDL_ASSERTION_IGNORE",
              "kind": "var",
              "type": ""
            },
            "SDL_ASSERTION_ALWAYS_IGNORE": {
              "doc": "Ignore the assert from now on.",
              "name": "SDL_ASSERTION_ALWAYS_IGNORE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_AssertData": {
          "doc": "Information about an assertion failure.\n\nThis structure is filled in with information about a triggered assertion,\nused by the assertion handler, then added to the assertion report. This is\nreturned as a linked list from SDL_GetAssertionReport().\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_AssertData",
          "kind": "struct",
          "entries": {
            "always_ignore": {
              "doc": "true if app should always continue when assertion is triggered.",
              "name": "always_ignore",
              "kind": "var",
              "type": "bool"
            },
            "trigger_count": {
              "doc": "Number of times this assertion has been triggered.",
              "name": "trigger_count",
              "kind": "var",
              "type": "unsigned int"
            },
            "condition": {
              "doc": "A string of this assert's test code.",
              "name": "condition",
              "kind": "var",
              "type": "const char *"
            },
            "filename": {
              "doc": "The source file where this assert lives.",
              "name": "filename",
              "kind": "var",
              "type": "const char *"
            },
            "linenum": {
              "doc": "The line in `filename` where this assert lives.",
              "name": "linenum",
              "kind": "var",
              "type": "int"
            },
            "function": {
              "doc": "The name of the function where this assert lives.",
              "name": "function",
              "kind": "var",
              "type": "const char *"
            },
            "next": {
              "doc": "next item in the linked list.",
              "name": "next",
              "kind": "var",
              "type": "SDL_AssertData"
            }
          }
        },
        "SDL_ReportAssertion": {
          "doc": "Never call this directly.\n\nUse the SDL_assert macros instead.\n\n\\param data assert data structure.\n\\param func function name.\n\\param file file name.\n\\param line line number.\n\\returns assert state.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReportAssertion",
          "kind": "function",
          "type": "SDL_AssertState",
          "parameters": [
            {
              "name": "data",
              "type": "SDL_AssertData *"
            },
            {
              "name": "func",
              "type": "const char *"
            },
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "SDL_ANALYZER_NORETUR",
              "type": "int line)"
            }
          ]
        },
        "SDL_AssertBreakpoint": {
          "doc": "The macro used when an assertion triggers a breakpoint.\n\nThis isn't for direct use by apps; use SDL_assert or SDL_TriggerBreakpoint\ninstead.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AssertBreakpoint",
          "kind": "def",
          "parameters": [],
          "value": "SDL_TriggerBreakpoint()"
        },
        "SDL_enabled_assert": {
          "doc": "The macro used when an assertion is enabled.\n\nThis isn't for direct use by apps, but this is the code that is inserted\nwhen an SDL_assert is enabled.\n\nThe `do {} while(0)` avoids dangling else problems:\n\n```c\nif (x) SDL_assert(y); else blah();\n```\n\n... without the do/while, the \"else\" could attach to this macro's \"if\". We\ntry to handle just the minimum we need here in a macro...the loop, the\nstatic vars, and break points. The heavy lifting is handled in\nSDL_ReportAssertion().\n\n\\param condition the condition to assert.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_enabled_assert",
          "kind": "def",
          "parameters": [
            "condition"
          ],
          "value": "[object Object]"
        },
        "SDL_assert": {
          "doc": "An assertion test that is normally performed only in debug builds.\n\nThis macro is enabled when the SDL_ASSERT_LEVEL is >= 2, otherwise it is\ndisabled. This is meant to only do these tests in debug builds, so they can\ntend to be more expensive, and they are meant to bring everything to a halt\nwhen they fail, with the programmer there to assess the problem.\n\nIn short: you can sprinkle these around liberally and assume they will\nevaporate out of the build when building for end-users.\n\nWhen assertions are disabled, this wraps `condition` in a `sizeof`\noperator, which means any function calls and side effects will not run, but\nthe compiler will not complain about any otherwise-unused variables that\nare only referenced in the assertion.\n\nOne can set the environment variable \"SDL_ASSERT\" to one of several strings\n(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default\nbehavior, which may be desirable for automation purposes. If your platform\nrequires GUI interfaces to happen on the main thread but you're debugging\nan assertion in a background thread, it might be desirable to set this to\n\"break\" so that your debugger takes control as soon as assert is triggered,\ninstead of risking a bad UI interaction (deadlock, etc) in the application.\n\n\\param condition boolean value to test.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_assert",
          "kind": "def",
          "parameters": [
            "condition"
          ],
          "value": "if (assertion_enabled && (condition)) { trigger_assertion; }"
        },
        "SDL_assert_release": {
          "doc": "An assertion test that is performed even in release builds.\n\nThis macro is enabled when the SDL_ASSERT_LEVEL is >= 1, otherwise it is\ndisabled. This is meant to be for tests that are cheap to make and\nextremely unlikely to fail; generally it is frowned upon to have an\nassertion failure in a release build, so these assertions generally need to\nbe of more than life-and-death importance if there's a chance they might\ntrigger. You should almost always consider handling these cases more\ngracefully than an assert allows.\n\nWhen assertions are disabled, this wraps `condition` in a `sizeof`\noperator, which means any function calls and side effects will not run, but\nthe compiler will not complain about any otherwise-unused variables that\nare only referenced in the assertion.\n\nOne can set the environment variable \"SDL_ASSERT\" to one of several strings\n(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default\nbehavior, which may be desirable for automation purposes. If your platform\nrequires GUI interfaces to happen on the main thread but you're debugging\nan assertion in a background thread, it might be desirable to set this to\n\"break\" so that your debugger takes control as soon as assert is triggered,\ninstead of risking a bad UI interaction (deadlock, etc) in the application.\n*\n\n\\param condition boolean value to test.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_assert_release",
          "kind": "def",
          "parameters": [
            "condition"
          ],
          "value": "SDL_disabled_assert(condition)"
        },
        "SDL_assert_paranoid": {
          "doc": "An assertion test that is performed only when built with paranoid settings.\n\nThis macro is enabled when the SDL_ASSERT_LEVEL is >= 3, otherwise it is\ndisabled. This is a higher level than both release and debug, so these\ntests are meant to be expensive and only run when specifically looking for\nextremely unexpected failure cases in a special build.\n\nWhen assertions are disabled, this wraps `condition` in a `sizeof`\noperator, which means any function calls and side effects will not run, but\nthe compiler will not complain about any otherwise-unused variables that\nare only referenced in the assertion.\n\nOne can set the environment variable \"SDL_ASSERT\" to one of several strings\n(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default\nbehavior, which may be desirable for automation purposes. If your platform\nrequires GUI interfaces to happen on the main thread but you're debugging\nan assertion in a background thread, it might be desirable to set this to\n\"break\" so that your debugger takes control as soon as assert is triggered,\ninstead of risking a bad UI interaction (deadlock, etc) in the application.\n\n\\param condition boolean value to test.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_assert_paranoid",
          "kind": "def",
          "parameters": [
            "condition"
          ],
          "value": "SDL_disabled_assert(condition)"
        },
        "SDL_assert_always": {
          "doc": "An assertion test that is always performed.\n\nThis macro is always enabled no matter what SDL_ASSERT_LEVEL is set to. You\nalmost never want to use this, as it could trigger on an end-user's system,\ncrashing your program.\n\nOne can set the environment variable \"SDL_ASSERT\" to one of several strings\n(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default\nbehavior, which may be desirable for automation purposes. If your platform\nrequires GUI interfaces to happen on the main thread but you're debugging\nan assertion in a background thread, it might be desirable to set this to\n\"break\" so that your debugger takes control as soon as assert is triggered,\ninstead of risking a bad UI interaction (deadlock, etc) in the application.\n\n\\param condition boolean value to test.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_assert_always",
          "kind": "def",
          "parameters": [
            "condition"
          ],
          "value": "SDL_enabled_assert(condition)"
        },
        "SDL_AssertionHandler": {
          "doc": "A callback that fires when an SDL assertion fails.\n\n\\param data a pointer to the SDL_AssertData structure corresponding to the\n            current assertion.\n\\param userdata what was passed as `userdata` to SDL_SetAssertionHandler().\n\\returns an SDL_AssertState value indicating how to handle the failure.\n\n\\threadsafety This callback may be called from any thread that triggers an\n              assert at any time.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_AssertionHandler",
          "kind": "callback",
          "type": "SDL_AssertState",
          "parameters": [
            {
              "name": "data",
              "type": "const SDL_AssertData *"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetAssertionHandler": {
          "doc": "Set an application-defined assertion handler.\n\nThis function allows an application to show its own assertion UI and/or\nforce the response to an assertion failure. If the application doesn't\nprovide this, SDL will try to do the right thing, popping up a\nsystem-specific GUI dialog, and probably minimizing any fullscreen windows.\n\nThis callback may fire from any thread, but it runs wrapped in a mutex, so\nit will only fire from one thread at a time.\n\nThis callback is NOT reset to SDL's internal handler upon SDL_Quit()!\n\n\\param handler the SDL_AssertionHandler function to call when an assertion\n               fails or NULL for the default handler.\n\\param userdata a pointer that is passed to `handler`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAssertionHandler",
          "name": "SDL_SetAssertionHandler",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "handler",
              "type": "SDL_AssertionHandler"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_GetDefaultAssertionHandler": {
          "doc": "Get the default assertion handler.\n\nThis returns the function pointer that is called by default when an\nassertion is triggered. This is an internal function provided by SDL, that\nis used for assertions when SDL_SetAssertionHandler() hasn't been used to\nprovide a different function.\n\n\\returns the default SDL_AssertionHandler that is called when an assert\n         triggers.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAssertionHandler",
          "name": "SDL_GetDefaultAssertionHandler",
          "kind": "function",
          "type": "SDL_AssertionHandler",
          "parameters": []
        },
        "SDL_GetAssertionHandler": {
          "doc": "Get the current assertion handler.\n\nThis returns the function pointer that is called when an assertion is\ntriggered. This is either the value last passed to\nSDL_SetAssertionHandler(), or if no application-specified function is set,\nis equivalent to calling SDL_GetDefaultAssertionHandler().\n\nThe parameter `puserdata` is a pointer to a void*, which will store the\n\"userdata\" pointer that was passed to SDL_SetAssertionHandler(). This value\nwill always be NULL for the default handler. If you don't care about this\ndata, it is safe to pass a NULL pointer to this function to ignore it.\n\n\\param puserdata pointer which is filled with the \"userdata\" pointer that\n                 was passed to SDL_SetAssertionHandler().\n\\returns the SDL_AssertionHandler that is called when an assert triggers.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAssertionHandler",
          "name": "SDL_GetAssertionHandler",
          "kind": "function",
          "type": "SDL_AssertionHandler",
          "parameters": [
            {
              "name": "puserdata",
              "type": "void **"
            }
          ]
        },
        "SDL_GetAssertionReport": {
          "doc": "Get a list of all assertion failures.\n\nThis function gets all assertions triggered since the last call to\nSDL_ResetAssertionReport(), or the start of the program.\n\nThe proper way to examine this data looks something like this:\n\n```c\nconst SDL_AssertData *item = SDL_GetAssertionReport();\nwhile (item) {\n   printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\\\n\",\n          item->condition, item->function, item->filename,\n          item->linenum, item->trigger_count,\n          item->always_ignore ? \"yes\" : \"no\");\n   item = item->next;\n}\n```\n\n\\returns a list of all failed assertions or NULL if the list is empty. This\n         memory should not be modified or freed by the application. This\n         pointer remains valid until the next call to SDL_Quit() or\n         SDL_ResetAssertionReport().\n\n\\threadsafety This function is not thread safe. Other threads calling\n              SDL_ResetAssertionReport() simultaneously, may render the\n              returned pointer invalid.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ResetAssertionReport",
          "name": "SDL_GetAssertionReport",
          "kind": "function",
          "type": "const SDL_AssertData *",
          "parameters": []
        },
        "SDL_ResetAssertionReport": {
          "doc": "Clear the list of all assertion failures.\n\nThis function will clear the list of all assertions triggered up to that\npoint. Immediately following this call, SDL_GetAssertionReport will return\nno items. In addition, any previously-triggered assertions will be reset to\na trigger_count of zero, and their always_ignore state will be false.\n\n\\threadsafety This function is not thread safe. Other threads triggering an\n              assertion, or simultaneously calling this function may cause\n              memory leaks or crashes.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAssertionReport",
          "name": "SDL_ResetAssertionReport",
          "kind": "function",
          "type": "void",
          "parameters": []
        }
      }
    },
    "SDL_version.h": {
      "name": "SDL_version.h",
      "doc": "# CategoryVersion\n\nFunctionality to query the current SDL version, both as headers the app was\ncompiled against, and a library the app is linked to.",
      "entries": {
        "SDL_MAJOR_VERSION": {
          "doc": "The current major version of SDL headers.\n\nIf this were SDL version 3.2.1, this value would be 3.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MAJOR_VERSION",
          "kind": "def",
          "value": "3"
        },
        "SDL_MINOR_VERSION": {
          "doc": "The current minor version of the SDL headers.\n\nIf this were SDL version 3.2.1, this value would be 2.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MINOR_VERSION",
          "kind": "def",
          "value": "2"
        },
        "SDL_MICRO_VERSION": {
          "doc": "The current micro (or patchlevel) version of the SDL headers.\n\nIf this were SDL version 3.2.1, this value would be 1.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MICRO_VERSION",
          "kind": "def",
          "value": "13"
        },
        "SDL_VERSIONNUM": {
          "doc": "This macro turns the version numbers into a numeric value.\n\n(1,2,3) becomes 1002003.\n\n\\param major the major version number.\n\\param minor the minorversion number.\n\\param patch the patch version number.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_VERSIONNUM",
          "kind": "def",
          "parameters": [
            "major",
            "minor",
            "patch"
          ],
          "value": "    ((major) * 1000000 + (minor) * 1000 + (patch))"
        },
        "SDL_VERSIONNUM_MAJOR": {
          "doc": "This macro extracts the major version from a version number\n\n1002003 becomes 1.\n\n\\param version the version number.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_VERSIONNUM_MAJOR",
          "kind": "def",
          "parameters": [
            "version"
          ],
          "value": "((version) / 1000000)"
        },
        "SDL_VERSIONNUM_MINOR": {
          "doc": "This macro extracts the minor version from a version number\n\n1002003 becomes 2.\n\n\\param version the version number.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_VERSIONNUM_MINOR",
          "kind": "def",
          "parameters": [
            "version"
          ],
          "value": "(((version) / 1000) % 1000)"
        },
        "SDL_VERSIONNUM_MICRO": {
          "doc": "This macro extracts the micro version from a version number\n\n1002003 becomes 3.\n\n\\param version the version number.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_VERSIONNUM_MICRO",
          "kind": "def",
          "parameters": [
            "version"
          ],
          "value": "((version) % 1000)"
        },
        "SDL_VERSION": {
          "doc": "This is the version number macro for the current SDL version.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_GetVersion",
          "name": "SDL_VERSION",
          "kind": "def",
          "value": "    SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_MICRO_VERSION)"
        },
        "SDL_VERSION_ATLEAST": {
          "doc": "This macro will evaluate to true if compiled with SDL at least X.Y.Z.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_VERSION_ATLEAST",
          "kind": "def",
          "parameters": [
            "X",
            "Y",
            "Z"
          ],
          "value": "    (SDL_VERSION >= SDL_VERSIONNUM(X, Y, Z))"
        },
        "SDL_GetVersion": {
          "doc": "Get the version of SDL that is linked against your program.\n\nIf you are linking to SDL dynamically, then it is possible that the current\nversion will be different than the version you compiled against. This\nfunction returns the current version, while SDL_VERSION is the version you\ncompiled with.\n\nThis function may be called safely at any time, even before SDL_Init().\n\n\\returns the version of the linked library.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRevision",
          "name": "SDL_GetVersion",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetRevision": {
          "doc": "Get the code revision of SDL that is linked against your program.\n\nThis value is the revision of the code you are linked with and may be\ndifferent from the code you are compiling with, which is found in the\nconstant SDL_REVISION.\n\nThe revision is arbitrary string (a hash value) uniquely identifying the\nexact revision of the SDL library in use, and is only useful in comparing\nagainst other revisions. It is NOT an incrementing number.\n\nIf SDL wasn't built from a git repository with the appropriate tools, this\nwill return an empty string.\n\nYou shouldn't use this function for anything but logging it for debugging\npurposes. The string is not intended to be reliable in any way.\n\n\\returns an arbitrary string, uniquely identifying the exact revision of\n         the SDL library in use.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetVersion",
          "name": "SDL_GetRevision",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        }
      }
    },
    "SDL_video.h": {
      "name": "SDL_video.h",
      "doc": "# CategoryVideo\n\nSDL's video subsystem is largely interested in abstracting window\nmanagement from the underlying operating system. You can create windows,\nmanage them in various ways, set them fullscreen, and get events when\ninteresting things happen with them, such as the mouse or keyboard\ninteracting with a window.\n\nThe video subsystem is also interested in abstracting away some\nplatform-specific differences in OpenGL: context creation, swapping\nbuffers, etc. This may be crucial to your app, but also you are not\nrequired to use OpenGL at all. In fact, SDL can provide rendering to those\nwindows as well, either with an easy-to-use\n[2D API](https://wiki.libsdl.org/SDL3/CategoryRender)\nor with a more-powerful\n[GPU API](https://wiki.libsdl.org/SDL3/CategoryGPU)\n. Of course, it can simply get out of your way and give you the window\nhandles you need to use Vulkan, Direct3D, Metal, or whatever else you like\ndirectly, too.\n\nThe video subsystem covers a lot of functionality, out of necessity, so it\nis worth perusing the list of functions just to see what's available, but\nmost apps can get by with simply creating a window and listening for\nevents, so start with SDL_CreateWindow() and SDL_PollEvent().",
      "entries": {
        "SDL_DisplayID": {
          "doc": "This is a unique ID for a display for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the display is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_DisplayID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_WindowID": {
          "doc": "This is a unique ID for a window.\n\nThe value 0 is an invalid ID.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_WindowID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER": {
          "doc": "The pointer to the global `wl_display` object used by the Wayland video\nbackend.\n\nCan be set before the video subsystem is initialized to import an external\n`wl_display` object from an application or toolkit for use in SDL, or read\nafter initialization to export the `wl_display` used by the Wayland video\nbackend. Setting this property after the video subsystem has been\ninitialized has no effect, and reading it when the video subsystem is\nuninitialized will either return the user provided value, if one was set\nprior to initialization, or NULL. See docs/README-wayland.md for more\ninformation.",
          "name": "SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER",
          "kind": "def",
          "value": "\"SDL.video.wayland.wl_display\""
        },
        "SDL_SystemTheme": {
          "doc": "System theme.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_SystemTheme",
          "kind": "enum",
          "entries": {
            "SDL_SYSTEM_THEME_UNKNOWN": {
              "doc": "Unknown system theme.",
              "name": "SDL_SYSTEM_THEME_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_THEME_LIGHT": {
              "doc": "Light colored system theme.",
              "name": "SDL_SYSTEM_THEME_LIGHT",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_THEME_DARK": {
              "doc": "Dark colored system theme.",
              "name": "SDL_SYSTEM_THEME_DARK",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_DisplayModeData": {
          "doc": "Internal display mode data.\n\nThis lives as a field in SDL_DisplayMode, as opaque data.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_DisplayMode",
          "name": "SDL_DisplayModeData",
          "kind": "alias",
          "type": "struct SDL_DisplayModeData"
        },
        "SDL_DisplayMode": {
          "doc": "The structure that defines a display mode.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetFullscreenDisplayModes\n\\sa SDL_GetDesktopDisplayMode\n\\sa SDL_GetCurrentDisplayMode\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_GetWindowFullscreenMode",
          "name": "SDL_DisplayMode",
          "kind": "struct",
          "entries": {
            "displayID": {
              "doc": "the display this mode is associated with",
              "name": "displayID",
              "kind": "var",
              "type": "SDL_DisplayID"
            },
            "format": {
              "doc": "pixel format",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "w": {
              "doc": "width",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "height",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "pixel_density": {
              "doc": "scale converting size to pixels (e.g. a 1920x1080 mode with 2.0 scale would have 3840x2160 pixels)",
              "name": "pixel_density",
              "kind": "var",
              "type": "float"
            },
            "refresh_rate": {
              "doc": "refresh rate (or 0.0f for unspecified)",
              "name": "refresh_rate",
              "kind": "var",
              "type": "float"
            },
            "refresh_rate_numerator": {
              "doc": "precise refresh rate numerator (or 0 for unspecified)",
              "name": "refresh_rate_numerator",
              "kind": "var",
              "type": "int"
            },
            "refresh_rate_denominator": {
              "doc": "precise refresh rate denominator",
              "name": "refresh_rate_denominator",
              "kind": "var",
              "type": "int"
            },
            "internal": {
              "doc": "Private",
              "name": "internal",
              "kind": "var",
              "type": "SDL_DisplayModeData *"
            }
          }
        },
        "SDL_DisplayOrientation": {
          "doc": "Display orientation values; the way a display is rotated.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_DisplayOrientation",
          "kind": "enum",
          "entries": {
            "SDL_ORIENTATION_UNKNOWN": {
              "doc": "The display orientation can't be determined.",
              "name": "SDL_ORIENTATION_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_ORIENTATION_LANDSCAPE": {
              "doc": "The display is in landscape mode, with the right side up, relative to portrait mode.",
              "name": "SDL_ORIENTATION_LANDSCAPE",
              "kind": "var",
              "type": ""
            },
            "SDL_ORIENTATION_LANDSCAPE_FLIPPED": {
              "doc": "The display is in landscape mode, with the left side up, relative to portrait mode.",
              "name": "SDL_ORIENTATION_LANDSCAPE_FLIPPED",
              "kind": "var",
              "type": ""
            },
            "SDL_ORIENTATION_PORTRAIT": {
              "doc": "The display is in portrait mode.",
              "name": "SDL_ORIENTATION_PORTRAIT",
              "kind": "var",
              "type": ""
            },
            "SDL_ORIENTATION_PORTRAIT_FLIPPED": {
              "doc": "The display is in portrait mode, upside down.",
              "name": "SDL_ORIENTATION_PORTRAIT_FLIPPED",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_Window": {
          "doc": "The struct used as an opaque handle to a window.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow",
          "name": "SDL_Window",
          "kind": "alias",
          "type": "struct SDL_Window"
        },
        "SDL_WindowFlags": {
          "doc": "The flags on a window.\n\nThese cover a lot of true/false, or on/off, window state. Some of it is\nimmutable after being set through SDL_CreateWindow(), some of it can be\nchanged on existing windows by the app, and some of it might be altered by\nthe user or system outside of the app's control.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_WindowFlags",
          "kind": "alias",
          "type": "Uint64"
        },
        "SDL_WINDOW_FULLSCREEN": {
          "doc": "window is in fullscreen mode",
          "name": "SDL_WINDOW_FULLSCREEN",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000001)"
        },
        "SDL_WINDOW_OPENGL": {
          "doc": "window usable with OpenGL context",
          "name": "SDL_WINDOW_OPENGL",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000002)"
        },
        "SDL_WINDOW_OCCLUDED": {
          "doc": "window is occluded",
          "name": "SDL_WINDOW_OCCLUDED",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000004)"
        },
        "SDL_WINDOW_HIDDEN": {
          "doc": "window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; SDL_ShowWindow() is required for it to become visible",
          "name": "SDL_WINDOW_HIDDEN",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000008)"
        },
        "SDL_WINDOW_BORDERLESS": {
          "doc": "no window decoration",
          "name": "SDL_WINDOW_BORDERLESS",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000010)"
        },
        "SDL_WINDOW_RESIZABLE": {
          "doc": "window can be resized",
          "name": "SDL_WINDOW_RESIZABLE",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000020)"
        },
        "SDL_WINDOW_MINIMIZED": {
          "doc": "window is minimized",
          "name": "SDL_WINDOW_MINIMIZED",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000040)"
        },
        "SDL_WINDOW_MAXIMIZED": {
          "doc": "window is maximized",
          "name": "SDL_WINDOW_MAXIMIZED",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000080)"
        },
        "SDL_WINDOW_MOUSE_GRABBED": {
          "doc": "window has grabbed mouse input",
          "name": "SDL_WINDOW_MOUSE_GRABBED",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000100)"
        },
        "SDL_WINDOW_INPUT_FOCUS": {
          "doc": "window has input focus",
          "name": "SDL_WINDOW_INPUT_FOCUS",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000200)"
        },
        "SDL_WINDOW_MOUSE_FOCUS": {
          "doc": "window has mouse focus",
          "name": "SDL_WINDOW_MOUSE_FOCUS",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000400)"
        },
        "SDL_WINDOW_EXTERNAL": {
          "doc": "window not created by SDL",
          "name": "SDL_WINDOW_EXTERNAL",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000800)"
        },
        "SDL_WINDOW_MODAL": {
          "doc": "window is modal",
          "name": "SDL_WINDOW_MODAL",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000001000)"
        },
        "SDL_WINDOW_HIGH_PIXEL_DENSITY": {
          "doc": "window uses high pixel density back buffer if possible",
          "name": "SDL_WINDOW_HIGH_PIXEL_DENSITY",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000002000)"
        },
        "SDL_WINDOW_MOUSE_CAPTURE": {
          "doc": "window has mouse captured (unrelated to MOUSE_GRABBED)",
          "name": "SDL_WINDOW_MOUSE_CAPTURE",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000004000)"
        },
        "SDL_WINDOW_MOUSE_RELATIVE_MODE": {
          "doc": "window has relative mode enabled",
          "name": "SDL_WINDOW_MOUSE_RELATIVE_MODE",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000008000)"
        },
        "SDL_WINDOW_ALWAYS_ON_TOP": {
          "doc": "window should always be above others",
          "name": "SDL_WINDOW_ALWAYS_ON_TOP",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000010000)"
        },
        "SDL_WINDOW_UTILITY": {
          "doc": "window should be treated as a utility window, not showing in the task bar and window list",
          "name": "SDL_WINDOW_UTILITY",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000020000)"
        },
        "SDL_WINDOW_TOOLTIP": {
          "doc": "window should be treated as a tooltip and does not get mouse or keyboard focus, requires a parent window",
          "name": "SDL_WINDOW_TOOLTIP",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000040000)"
        },
        "SDL_WINDOW_POPUP_MENU": {
          "doc": "window should be treated as a popup menu, requires a parent window",
          "name": "SDL_WINDOW_POPUP_MENU",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000080000)"
        },
        "SDL_WINDOW_KEYBOARD_GRABBED": {
          "doc": "window has grabbed keyboard input",
          "name": "SDL_WINDOW_KEYBOARD_GRABBED",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000100000)"
        },
        "SDL_WINDOW_VULKAN": {
          "doc": "window usable for Vulkan surface",
          "name": "SDL_WINDOW_VULKAN",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000010000000)"
        },
        "SDL_WINDOW_METAL": {
          "doc": "window usable for Metal view",
          "name": "SDL_WINDOW_METAL",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000020000000)"
        },
        "SDL_WINDOW_TRANSPARENT": {
          "doc": "window with transparent buffer",
          "name": "SDL_WINDOW_TRANSPARENT",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000040000000)"
        },
        "SDL_WINDOW_NOT_FOCUSABLE": {
          "doc": "window should not be focusable",
          "name": "SDL_WINDOW_NOT_FOCUSABLE",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000080000000)"
        },
        "SDL_WINDOWPOS_UNDEFINED_MASK": {
          "doc": "A magic value used with SDL_WINDOWPOS_UNDEFINED.\n\nGenerally this macro isn't used directly, but rather through\nSDL_WINDOWPOS_UNDEFINED or SDL_WINDOWPOS_UNDEFINED_DISPLAY.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_UNDEFINED_MASK",
          "kind": "def",
          "value": "0x1FFF0000u"
        },
        "SDL_WINDOWPOS_UNDEFINED_DISPLAY": {
          "doc": "Used to indicate that you don't care what the window position is.\n\nIf you _really_ don't care, SDL_WINDOWPOS_UNDEFINED is the same, but always\nuses the primary display instead of specifying one.\n\n\\param X the SDL_DisplayID of the display to use.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_UNDEFINED_DISPLAY",
          "kind": "def",
          "parameters": [
            "X"
          ],
          "value": "(SDL_WINDOWPOS_UNDEFINED_MASK|(X))"
        },
        "SDL_WINDOWPOS_UNDEFINED": {
          "doc": "Used to indicate that you don't care what the window position/display is.\n\nThis always uses the primary display.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_UNDEFINED",
          "kind": "def",
          "value": "SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)"
        },
        "SDL_WINDOWPOS_ISUNDEFINED": {
          "doc": "A macro to test if the window position is marked as \"undefined.\"\n\n\\param X the window position value.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_ISUNDEFINED",
          "kind": "def",
          "parameters": [
            "X"
          ],
          "value": "(((X)&0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK)"
        },
        "SDL_WINDOWPOS_CENTERED_MASK": {
          "doc": "A magic value used with SDL_WINDOWPOS_CENTERED.\n\nGenerally this macro isn't used directly, but rather through\nSDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_CENTERED_DISPLAY.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_CENTERED_MASK",
          "kind": "def",
          "value": "0x2FFF0000u"
        },
        "SDL_WINDOWPOS_CENTERED_DISPLAY": {
          "doc": "Used to indicate that the window position should be centered.\n\nSDL_WINDOWPOS_CENTERED is the same, but always uses the primary display\ninstead of specifying one.\n\n\\param X the SDL_DisplayID of the display to use.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_CENTERED_DISPLAY",
          "kind": "def",
          "parameters": [
            "X"
          ],
          "value": "(SDL_WINDOWPOS_CENTERED_MASK|(X))"
        },
        "SDL_WINDOWPOS_CENTERED": {
          "doc": "Used to indicate that the window position should be centered.\n\nThis always uses the primary display.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_CENTERED",
          "kind": "def",
          "value": "SDL_WINDOWPOS_CENTERED_DISPLAY(0)"
        },
        "SDL_WINDOWPOS_ISCENTERED": {
          "doc": "A macro to test if the window position is marked as \"centered.\"\n\n\\param X the window position value.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_ISCENTERED",
          "kind": "def",
          "parameters": [
            "X"
          ],
          "value": "            (((X)&0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK)"
        },
        "SDL_FlashOperation": {
          "doc": "Window flash operation.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_FlashOperation",
          "kind": "enum",
          "entries": {
            "SDL_FLASH_CANCEL": {
              "doc": "Cancel any window flash state.",
              "name": "SDL_FLASH_CANCEL",
              "kind": "var",
              "type": ""
            },
            "SDL_FLASH_BRIEFLY": {
              "doc": "Flash the window briefly to get attention.",
              "name": "SDL_FLASH_BRIEFLY",
              "kind": "var",
              "type": ""
            },
            "SDL_FLASH_UNTIL_FOCUSED": {
              "doc": "Flash the window until it gets focus.",
              "name": "SDL_FLASH_UNTIL_FOCUSED",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GLContext": {
          "doc": "An opaque handle to an OpenGL context.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GL_CreateContext",
          "name": "SDL_GLContext",
          "kind": "alias",
          "type": "struct SDL_GLContextState *"
        },
        "SDL_EGLDisplay": {
          "doc": "Opaque type for an EGL display.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLDisplay",
          "kind": "alias",
          "type": "void *"
        },
        "SDL_EGLConfig": {
          "doc": "Opaque type for an EGL config.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLConfig",
          "kind": "alias",
          "type": "void *"
        },
        "SDL_EGLSurface": {
          "doc": "Opaque type for an EGL surface.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLSurface",
          "kind": "alias",
          "type": "void *"
        },
        "SDL_EGLAttrib": {
          "doc": "An EGL attribute, used when creating an EGL context.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLAttrib",
          "kind": "alias",
          "type": "intptr_t"
        },
        "SDL_EGLint": {
          "doc": "An EGL integer attribute, used when creating an EGL surface.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLint",
          "kind": "alias",
          "type": "int"
        },
        "SDL_EGLAttribArrayCallback": {
          "doc": "EGL platform attribute initialization callback.\n\nThis is called when SDL is attempting to create an EGL context, to let the\napp add extra attributes to its eglGetPlatformDisplay() call.\n\nThe callback should return a pointer to an EGL attribute array terminated\nwith `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow\nprocess will fail gracefully.\n\nThe returned pointer should be allocated with SDL_malloc() and will be\npassed to SDL_free().\n\nThe arrays returned by each callback will be appended to the existing\nattribute arrays defined by SDL.\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\returns a newly-allocated array of attributes, terminated with `EGL_NONE`.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EGL_SetAttributeCallbacks",
          "name": "SDL_EGLAttribArrayCallback",
          "kind": "callback",
          "type": "SDL_EGLAttrib *",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_EGLIntArrayCallback": {
          "doc": "EGL surface/context attribute initialization callback types.\n\nThis is called when SDL is attempting to create an EGL surface, to let the\napp add extra attributes to its eglCreateWindowSurface() or\neglCreateContext calls.\n\nFor convenience, the EGLDisplay and EGLConfig to use are provided to the\ncallback.\n\nThe callback should return a pointer to an EGL attribute array terminated\nwith `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow\nprocess will fail gracefully.\n\nThe returned pointer should be allocated with SDL_malloc() and will be\npassed to SDL_free().\n\nThe arrays returned by each callback will be appended to the existing\nattribute arrays defined by SDL.\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\param display the EGL display to be used.\n\\param config the EGL config to be used.\n\\returns a newly-allocated array of attributes, terminated with `EGL_NONE`.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EGL_SetAttributeCallbacks",
          "name": "SDL_EGLIntArrayCallback",
          "kind": "callback",
          "type": "SDL_EGLint *",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "display",
              "type": "SDL_EGLDisplay"
            },
            {
              "name": "config",
              "type": "SDL_EGLConfig"
            }
          ]
        },
        "SDL_GLAttr": {
          "doc": "An enumeration of OpenGL configuration attributes.\n\nWhile you can set most OpenGL attributes normally, the attributes listed\nabove must be known before SDL creates the window that will be used with\nthe OpenGL context. These attributes are set and read with\nSDL_GL_SetAttribute() and SDL_GL_GetAttribute().\n\nIn some cases, these attributes are minimum requests; the GL does not\npromise to give you exactly what you asked for. It's possible to ask for a\n16-bit depth buffer and get a 24-bit one instead, for example, or to ask\nfor no stencil buffer and still have one available. Context creation should\nfail if the GL can't provide your requested attributes at a minimum, but\nyou should check to see exactly what you got.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_GLAttr",
          "kind": "enum",
          "entries": {
            "SDL_GL_RED_SIZE": {
              "doc": "the minimum number of bits for the red channel of the color buffer; defaults to 8.",
              "name": "SDL_GL_RED_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_GREEN_SIZE": {
              "doc": "the minimum number of bits for the green channel of the color buffer; defaults to 8.",
              "name": "SDL_GL_GREEN_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_BLUE_SIZE": {
              "doc": "the minimum number of bits for the blue channel of the color buffer; defaults to 8.",
              "name": "SDL_GL_BLUE_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_ALPHA_SIZE": {
              "doc": "the minimum number of bits for the alpha channel of the color buffer; defaults to 8.",
              "name": "SDL_GL_ALPHA_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_BUFFER_SIZE": {
              "doc": "the minimum number of bits for frame buffer size; defaults to 0.",
              "name": "SDL_GL_BUFFER_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_DOUBLEBUFFER": {
              "doc": "whether the output is single or double buffered; defaults to double buffering on.",
              "name": "SDL_GL_DOUBLEBUFFER",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_DEPTH_SIZE": {
              "doc": "the minimum number of bits in the depth buffer; defaults to 16.",
              "name": "SDL_GL_DEPTH_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_STENCIL_SIZE": {
              "doc": "the minimum number of bits in the stencil buffer; defaults to 0.",
              "name": "SDL_GL_STENCIL_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_ACCUM_RED_SIZE": {
              "doc": "the minimum number of bits for the red channel of the accumulation buffer; defaults to 0.",
              "name": "SDL_GL_ACCUM_RED_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_ACCUM_GREEN_SIZE": {
              "doc": "the minimum number of bits for the green channel of the accumulation buffer; defaults to 0.",
              "name": "SDL_GL_ACCUM_GREEN_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_ACCUM_BLUE_SIZE": {
              "doc": "the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0.",
              "name": "SDL_GL_ACCUM_BLUE_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_ACCUM_ALPHA_SIZE": {
              "doc": "the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0.",
              "name": "SDL_GL_ACCUM_ALPHA_SIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_STEREO": {
              "doc": "whether the output is stereo 3D; defaults to off.",
              "name": "SDL_GL_STEREO",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_MULTISAMPLEBUFFERS": {
              "doc": "the number of buffers used for multisample anti-aliasing; defaults to 0.",
              "name": "SDL_GL_MULTISAMPLEBUFFERS",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_MULTISAMPLESAMPLES": {
              "doc": "the number of samples used around the current pixel used for multisample anti-aliasing.",
              "name": "SDL_GL_MULTISAMPLESAMPLES",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_ACCELERATED_VISUAL": {
              "doc": "set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either.",
              "name": "SDL_GL_ACCELERATED_VISUAL",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_RETAINED_BACKING": {
              "doc": "not used (deprecated).",
              "name": "SDL_GL_RETAINED_BACKING",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_MAJOR_VERSION": {
              "doc": "OpenGL context major version.",
              "name": "SDL_GL_CONTEXT_MAJOR_VERSION",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_MINOR_VERSION": {
              "doc": "OpenGL context minor version.",
              "name": "SDL_GL_CONTEXT_MINOR_VERSION",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_FLAGS": {
              "doc": "some combination of 0 or more of elements of the SDL_GLContextFlag enumeration; defaults to 0.",
              "name": "SDL_GL_CONTEXT_FLAGS",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_PROFILE_MASK": {
              "doc": "type of GL context (Core, Compatibility, ES).  See SDL_GLProfile; default value depends on platform.",
              "name": "SDL_GL_CONTEXT_PROFILE_MASK",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_SHARE_WITH_CURRENT_CONTEXT": {
              "doc": "OpenGL context sharing; defaults to 0.",
              "name": "SDL_GL_SHARE_WITH_CURRENT_CONTEXT",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_FRAMEBUFFER_SRGB_CAPABLE": {
              "doc": "requests sRGB capable visual; defaults to 0.",
              "name": "SDL_GL_FRAMEBUFFER_SRGB_CAPABLE",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_RELEASE_BEHAVIOR": {
              "doc": "sets context the release behavior.  See SDL_GLContextReleaseFlag; defaults to FLUSH.",
              "name": "SDL_GL_CONTEXT_RELEASE_BEHAVIOR",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_RESET_NOTIFICATION": {
              "doc": "set context reset notification.  See SDL_GLContextResetNotification; defaults to NO_NOTIFICATION.",
              "name": "SDL_GL_CONTEXT_RESET_NOTIFICATION",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_CONTEXT_NO_ERROR": {
              "doc": "",
              "name": "SDL_GL_CONTEXT_NO_ERROR",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_FLOATBUFFERS": {
              "doc": "",
              "name": "SDL_GL_FLOATBUFFERS",
              "kind": "var",
              "type": ""
            },
            "SDL_GL_EGL_PLATFORM": {
              "doc": "",
              "name": "SDL_GL_EGL_PLATFORM",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GLProfile": {
          "doc": "Possible values to be set for the SDL_GL_CONTEXT_PROFILE_MASK attribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLProfile",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_PROFILE_CORE": {
          "doc": "OpenGL Core Profile context",
          "name": "SDL_GL_CONTEXT_PROFILE_CORE",
          "kind": "def",
          "value": "0x0001"
        },
        "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY": {
          "doc": "OpenGL Compatibility Profile context",
          "name": "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY",
          "kind": "def",
          "value": "0x0002"
        },
        "SDL_GL_CONTEXT_PROFILE_ES": {
          "doc": "GLX_CONTEXT_ES2_PROFILE_BIT_EXT",
          "name": "SDL_GL_CONTEXT_PROFILE_ES",
          "kind": "def",
          "value": "0x0004"
        },
        "SDL_GLContextFlag": {
          "doc": "Possible flags to be set for the SDL_GL_CONTEXT_FLAGS attribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLContextFlag",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_DEBUG_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_DEBUG_FLAG",
          "kind": "def",
          "value": "0x0001"
        },
        "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG",
          "kind": "def",
          "value": "0x0002"
        },
        "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG",
          "kind": "def",
          "value": "0x0004"
        },
        "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG",
          "kind": "def",
          "value": "0x0008"
        },
        "SDL_GLContextReleaseFlag": {
          "doc": "Possible values to be set for the SDL_GL_CONTEXT_RELEASE_BEHAVIOR\nattribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLContextReleaseFlag",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE",
          "kind": "def",
          "value": "0x0000"
        },
        "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH",
          "kind": "def",
          "value": "0x0001"
        },
        "SDL_GLContextResetNotification": {
          "doc": "Possible values to be set SDL_GL_CONTEXT_RESET_NOTIFICATION attribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLContextResetNotification",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION",
          "kind": "def",
          "value": "0x0000"
        },
        "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT",
          "kind": "def",
          "value": "0x0001"
        },
        "SDL_GetNumVideoDrivers": {
          "doc": "Get the number of video drivers compiled into SDL.\n\n\\returns the number of built in video drivers.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetVideoDriver",
          "name": "SDL_GetNumVideoDrivers",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetVideoDriver": {
          "doc": "Get the name of a built in video driver.\n\nThe video drivers are presented in the order in which they are normally\nchecked during initialization.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"cocoa\",\n\"x11\" or \"windows\". These never have Unicode characters, and are not meant\nto be proper names.\n\n\\param index the index of a video driver.\n\\returns the name of the video driver with the given **index**.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumVideoDrivers",
          "name": "SDL_GetVideoDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "index",
              "type": "int"
            }
          ]
        },
        "SDL_GetCurrentVideoDriver": {
          "doc": "Get the name of the currently initialized video driver.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"cocoa\",\n\"x11\" or \"windows\". These never have Unicode characters, and are not meant\nto be proper names.\n\n\\returns the name of the current video driver or NULL if no driver has been\n         initialized.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumVideoDrivers\n\\sa SDL_GetVideoDriver",
          "name": "SDL_GetCurrentVideoDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_GetSystemTheme": {
          "doc": "Get the current system theme.\n\n\\returns the current system theme, light, dark, or unknown.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSystemTheme",
          "kind": "function",
          "type": "SDL_SystemTheme",
          "parameters": []
        },
        "SDL_GetDisplays": {
          "doc": "Get a list of currently connected displays.\n\n\\param count a pointer filled in with the number of displays returned, may\n             be NULL.\n\\returns a 0 terminated array of display instance IDs or NULL on failure;\n         call SDL_GetError() for more information. This should be freed\n         with SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDisplays",
          "kind": "function",
          "type": "SDL_DisplayID *",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetPrimaryDisplay": {
          "doc": "Return the primary display.\n\n\\returns the instance ID of the primary display on success or 0 on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetPrimaryDisplay",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": []
        },
        "SDL_GetDisplayProperties": {
          "doc": "Get the properties associated with a display.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN`: true if the display has HDR\n  headroom above the SDR white point. This is for informational and\n  diagnostic purposes only, as not all platforms provide this information\n  at the display level.\n\nOn KMS/DRM:\n\n- `SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER`: the \"panel\n  orientation\" property for the display in degrees of clockwise rotation.\n  Note that this is provided only as a hint, and the application is\n  responsible for any coordinate transformations needed to conform to the\n  requested display orientation.\n\n\\param displayID the instance ID of the display to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDisplayProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.display.HDR_enabled\""
        },
        "SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER",
          "kind": "def",
          "value": "\"SDL.display.KMSDRM.panel_orientation\""
        },
        "SDL_GetDisplayName": {
          "doc": "Get the name of a display in UTF-8 encoding.\n\n\\param displayID the instance ID of the display to query.\n\\returns the name of a display or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDisplayBounds": {
          "doc": "Get the desktop area represented by a display.\n\nThe primary display is often located at (0,0), but may be placed at a\ndifferent location depending on monitor layout.\n\n\\param displayID the instance ID of the display to query.\n\\param rect the SDL_Rect structure filled in with the display bounds.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayUsableBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayBounds",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetDisplayUsableBounds": {
          "doc": "Get the usable desktop area represented by a display, in screen\ncoordinates.\n\nThis is the same area as SDL_GetDisplayBounds() reports, but with portions\nreserved by the system removed. For example, on Apple's macOS, this\nsubtracts the area occupied by the menu bar and dock.\n\nSetting a window to be fullscreen generally bypasses these unusable areas,\nso these are good guidelines for the maximum space available to a\nnon-fullscreen window.\n\n\\param displayID the instance ID of the display to query.\n\\param rect the SDL_Rect structure filled in with the display bounds.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayUsableBounds",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetNaturalDisplayOrientation": {
          "doc": "Get the orientation of a display when it is unrotated.\n\n\\param displayID the instance ID of the display to query.\n\\returns the SDL_DisplayOrientation enum value of the display, or\n         `SDL_ORIENTATION_UNKNOWN` if it isn't available.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetNaturalDisplayOrientation",
          "kind": "function",
          "type": "SDL_DisplayOrientation",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetCurrentDisplayOrientation": {
          "doc": "Get the orientation of a display.\n\n\\param displayID the instance ID of the display to query.\n\\returns the SDL_DisplayOrientation enum value of the display, or\n         `SDL_ORIENTATION_UNKNOWN` if it isn't available.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetCurrentDisplayOrientation",
          "kind": "function",
          "type": "SDL_DisplayOrientation",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDisplayContentScale": {
          "doc": "Get the content scale of a display.\n\nThe content scale is the expected scale for content based on the DPI\nsettings of the display. For example, a 4K display might have a 2.0 (200%)\ndisplay scale, which means that the user expects UI elements to be twice as\nbig on this display, to aid in readability.\n\nAfter window creation, SDL_GetWindowDisplayScale() should be used to query\nthe content scale factor for individual windows instead of querying the\ndisplay for a window and calling this function, as the per-window content\nscale factor may differ from the base value of the display it is on,\nparticularly on high-DPI and/or multi-monitor desktop configurations.\n\n\\param displayID the instance ID of the display to query.\n\\returns the content scale of the display, or 0.0f on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowDisplayScale\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayContentScale",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetFullscreenDisplayModes": {
          "doc": "Get a list of fullscreen display modes available on a display.\n\nThe display modes are sorted in this priority:\n\n- w -> largest to smallest\n- h -> largest to smallest\n- bits per pixel -> more colors to fewer colors\n- packed pixel layout -> largest to smallest\n- refresh rate -> highest to lowest\n- pixel density -> lowest to highest\n\n\\param displayID the instance ID of the display to query.\n\\param count a pointer filled in with the number of display modes returned,\n             may be NULL.\n\\returns a NULL terminated array of display mode pointers or NULL on\n         failure; call SDL_GetError() for more information. This is a\n         single allocation that should be freed with SDL_free() when it is\n         no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetFullscreenDisplayModes",
          "kind": "function",
          "type": "SDL_DisplayMode **",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetClosestFullscreenDisplayMode": {
          "doc": "Get the closest match to the requested display mode.\n\nThe available display modes are scanned and `closest` is filled in with the\nclosest mode matching the requested mode and returned. The mode format and\nrefresh rate default to the desktop mode if they are set to 0. The modes\nare scanned with size being first priority, format being second priority,\nand finally checking the refresh rate. If all the available modes are too\nsmall, then false is returned.\n\n\\param displayID the instance ID of the display to query.\n\\param w the width in pixels of the desired display mode.\n\\param h the height in pixels of the desired display mode.\n\\param refresh_rate the refresh rate of the desired display mode, or 0.0f\n                    for the desktop refresh rate.\n\\param include_high_density_modes boolean to include high density modes in\n                                  the search.\n\\param closest a pointer filled in with the closest display mode equal to\n               or larger than the desired mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays\n\\sa SDL_GetFullscreenDisplayModes",
          "name": "SDL_GetClosestFullscreenDisplayMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "refresh_rate",
              "type": "float"
            },
            {
              "name": "include_high_density_modes",
              "type": "bool"
            },
            {
              "name": "closest",
              "type": "SDL_DisplayMode *"
            }
          ]
        },
        "SDL_GetDesktopDisplayMode": {
          "doc": "Get information about the desktop's display mode.\n\nThere's a difference between this function and SDL_GetCurrentDisplayMode()\nwhen SDL runs fullscreen and has changed the resolution. In that case this\nfunction will return the previous native display mode, and not the current\ndisplay mode.\n\n\\param displayID the instance ID of the display to query.\n\\returns a pointer to the desktop display mode or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetCurrentDisplayMode\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDesktopDisplayMode",
          "kind": "function",
          "type": "const SDL_DisplayMode *",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetCurrentDisplayMode": {
          "doc": "Get information about the current display mode.\n\nThere's a difference between this function and SDL_GetDesktopDisplayMode()\nwhen SDL runs fullscreen and has changed the resolution. In that case this\nfunction will return the current display mode, and not the previous native\ndisplay mode.\n\n\\param displayID the instance ID of the display to query.\n\\returns a pointer to the desktop display mode or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDesktopDisplayMode\n\\sa SDL_GetDisplays",
          "name": "SDL_GetCurrentDisplayMode",
          "kind": "function",
          "type": "const SDL_DisplayMode *",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDisplayForPoint": {
          "doc": "Get the display containing a point.\n\n\\param point the point to query.\n\\returns the instance ID of the display containing the point or 0 on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayForPoint",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": [
            {
              "name": "point",
              "type": "const SDL_Point *"
            }
          ]
        },
        "SDL_GetDisplayForRect": {
          "doc": "Get the display primarily containing a rect.\n\n\\param rect the rect to query.\n\\returns the instance ID of the display entirely containing the rect or\n         closest to the center of the rect on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayForRect",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetDisplayForWindow": {
          "doc": "Get the display associated with a window.\n\n\\param window the window to query.\n\\returns the instance ID of the display containing the center of the window\n         on success or 0 on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayForWindow",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowPixelDensity": {
          "doc": "Get the pixel density of a window.\n\nThis is a ratio of pixel size to window size. For example, if the window is\n1920x1080 and it has a high density back buffer of 3840x2160 pixels, it\nwould have a pixel density of 2.0.\n\n\\param window the window to query.\n\\returns the pixel density or 0.0f on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowDisplayScale",
          "name": "SDL_GetWindowPixelDensity",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowDisplayScale": {
          "doc": "Get the content display scale relative to a window's pixel size.\n\nThis is a combination of the window pixel density and the display content\nscale, and is the expected scale for displaying content in this window. For\nexample, if a 3840x2160 window had a display scale of 2.0, the user expects\nthe content to take twice as many pixels and be the same physical size as\nif it were being displayed in a 1920x1080 window with a display scale of\n1.0.\n\nConceptually this value corresponds to the scale display setting, and is\nupdated when that setting is changed, or the window moves to a display with\na different scale setting.\n\n\\param window the window to query.\n\\returns the display scale, or 0.0f on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowDisplayScale",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowFullscreenMode": {
          "doc": "Set the display mode to use when a window is visible and fullscreen.\n\nThis only affects the display mode used when the window is fullscreen. To\nchange the window size when the window is not fullscreen, use\nSDL_SetWindowSize().\n\nIf the window is currently in the fullscreen state, this request is\nasynchronous on some windowing systems and the new mode dimensions may not\nbe applied immediately upon the return of this function. If an immediate\nchange is required, call SDL_SyncWindow() to block until the changes have\ntaken effect.\n\nWhen the new mode takes effect, an SDL_EVENT_WINDOW_RESIZED and/or an\nSDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event will be emitted with the new mode\ndimensions.\n\n\\param window the window to affect.\n\\param mode a pointer to the display mode to use, which can be NULL for\n            borderless fullscreen desktop mode, or one of the fullscreen\n            modes returned by SDL_GetFullscreenDisplayModes() to set an\n            exclusive fullscreen mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFullscreenMode\n\\sa SDL_SetWindowFullscreen\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowFullscreenMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "mode",
              "type": "const SDL_DisplayMode *"
            }
          ]
        },
        "SDL_GetWindowFullscreenMode": {
          "doc": "Query the display mode to use when a window is visible at fullscreen.\n\n\\param window the window to query.\n\\returns a pointer to the exclusive fullscreen mode to use or NULL for\n         borderless fullscreen desktop mode.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_SetWindowFullscreen",
          "name": "SDL_GetWindowFullscreenMode",
          "kind": "function",
          "type": "const SDL_DisplayMode *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowICCProfile": {
          "doc": "Get the raw ICC profile data for the screen the window is currently on.\n\n\\param window the window to query.\n\\param size the size of the ICC profile.\n\\returns the raw ICC profile data on success or NULL on failure; call\n         SDL_GetError() for more information. This should be freed with\n         SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowICCProfile",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "size",
              "type": "size_t *"
            }
          ]
        },
        "SDL_GetWindowPixelFormat": {
          "doc": "Get the pixel format associated with the window.\n\n\\param window the window to query.\n\\returns the pixel format of the window on success or\n         SDL_PIXELFORMAT_UNKNOWN on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowPixelFormat",
          "kind": "function",
          "type": "SDL_PixelFormat",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindows": {
          "doc": "Get a list of valid windows.\n\n\\param count a pointer filled in with the number of windows returned, may\n             be NULL.\n\\returns a NULL terminated array of SDL_Window pointers or NULL on failure;\n         call SDL_GetError() for more information. This is a single\n         allocation that should be freed with SDL_free() when it is no\n         longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindows",
          "kind": "function",
          "type": "SDL_Window **",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_CreateWindow": {
          "doc": "Create a window with the specified dimensions and flags.\n\nThe window size is a request and may be different than expected based on\nthe desktop layout and window manager policies. Your application should be\nprepared to handle a window of any size.\n\n`flags` may be any of the following OR'd together:\n\n- `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution\n- `SDL_WINDOW_OPENGL`: window usable with an OpenGL context\n- `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another\n  window\n- `SDL_WINDOW_HIDDEN`: window is not visible\n- `SDL_WINDOW_BORDERLESS`: no window decoration\n- `SDL_WINDOW_RESIZABLE`: window can be resized\n- `SDL_WINDOW_MINIMIZED`: window is minimized\n- `SDL_WINDOW_MAXIMIZED`: window is maximized\n- `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus\n- `SDL_WINDOW_INPUT_FOCUS`: window has input focus\n- `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus\n- `SDL_WINDOW_EXTERNAL`: window not created by SDL\n- `SDL_WINDOW_MODAL`: window is modal\n- `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back\n  buffer if possible\n- `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to\n  MOUSE_GRABBED)\n- `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others\n- `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not\n  showing in the task bar and window list\n- `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not\n  get mouse or keyboard focus, requires a parent window\n- `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,\n  requires a parent window\n- `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input\n- `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance\n- `SDL_WINDOW_METAL`: window usable with a Metal instance\n- `SDL_WINDOW_TRANSPARENT`: window with transparent buffer\n- `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable\n\nThe SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.\n\nOn Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist\nproperty to YES, otherwise you will not receive a High-DPI OpenGL canvas.\n\nThe window pixel size may differ from its window coordinate size if the\nwindow is on a high pixel density display. Use SDL_GetWindowSize() to query\nthe client area's size in window coordinates, and\nSDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the\ndrawable size in pixels. Note that the drawable size can vary after the\nwindow is created and should be queried again if you get an\nSDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.\n\nIf the window is created with any of the SDL_WINDOW_OPENGL or\nSDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function\n(SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the\ncorresponding UnloadLibrary function is called by SDL_DestroyWindow().\n\nIf SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,\nSDL_CreateWindow() will fail, because SDL_Vulkan_LoadLibrary() will fail.\n\nIf SDL_WINDOW_METAL is specified on an OS that does not support Metal,\nSDL_CreateWindow() will fail.\n\nIf you intend to use this window with an SDL_Renderer, you should use\nSDL_CreateWindowAndRenderer() instead of this function, to avoid window\nflicker.\n\nOn non-Apple devices, SDL requires you to either not link to the Vulkan\nloader or link to a dynamic library version. This limitation may be removed\nin a future version of SDL.\n\n\\param title the title of the window, in UTF-8 encoding.\n\\param w the width of the window.\n\\param h the height of the window.\n\\param flags 0, or one or more SDL_WindowFlags OR'd together.\n\\returns the window that was created or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindowAndRenderer\n\\sa SDL_CreatePopupWindow\n\\sa SDL_CreateWindowWithProperties\n\\sa SDL_DestroyWindow",
          "name": "SDL_CreateWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "title",
              "type": "const char *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "SDL_WindowFlags"
            }
          ]
        },
        "SDL_CreatePopupWindow": {
          "doc": "Create a child popup window of the specified parent window.\n\nThe window size is a request and may be different than expected based on\nthe desktop layout and window manager policies. Your application should be\nprepared to handle a window of any size.\n\nThe flags parameter **must** contain at least one of the following:\n\n- `SDL_WINDOW_TOOLTIP`: The popup window is a tooltip and will not pass any\n  input events.\n- `SDL_WINDOW_POPUP_MENU`: The popup window is a popup menu. The topmost\n  popup menu will implicitly gain the keyboard focus.\n\nThe following flags are not relevant to popup window creation and will be\nignored:\n\n- `SDL_WINDOW_MINIMIZED`\n- `SDL_WINDOW_MAXIMIZED`\n- `SDL_WINDOW_FULLSCREEN`\n- `SDL_WINDOW_BORDERLESS`\n\nThe following flags are incompatible with popup window creation and will\ncause it to fail:\n\n- `SDL_WINDOW_UTILITY`\n- `SDL_WINDOW_MODAL`\n\nThe parent parameter **must** be non-null and a valid window. The parent of\na popup window can be either a regular, toplevel window, or another popup\nwindow.\n\nPopup windows cannot be minimized, maximized, made fullscreen, raised,\nflash, be made a modal window, be the parent of a toplevel window, or grab\nthe mouse and/or keyboard. Attempts to do so will fail.\n\nPopup windows implicitly do not have a border/decorations and do not appear\non the taskbar/dock or in lists of windows such as alt-tab menus.\n\nIf a parent window is hidden or destroyed, any child popup windows will be\nrecursively hidden or destroyed as well. Child popup windows not explicitly\nhidden will be restored when the parent is shown.\n\n\\param parent the parent of the window, must not be NULL.\n\\param offset_x the x position of the popup window relative to the origin\n                of the parent.\n\\param offset_y the y position of the popup window relative to the origin\n                of the parent window.\n\\param w the width of the window.\n\\param h the height of the window.\n\\param flags SDL_WINDOW_TOOLTIP or SDL_WINDOW_POPUP_MENU, and zero or more\n             additional SDL_WindowFlags OR'd together.\n\\returns the window that was created or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow\n\\sa SDL_CreateWindowWithProperties\n\\sa SDL_DestroyWindow\n\\sa SDL_GetWindowParent",
          "name": "SDL_CreatePopupWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "parent",
              "type": "SDL_Window *"
            },
            {
              "name": "offset_x",
              "type": "int"
            },
            {
              "name": "offset_y",
              "type": "int"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "SDL_WindowFlags"
            }
          ]
        },
        "SDL_CreateWindowWithProperties": {
          "doc": "Create a window with the specified properties.\n\nThe window size is a request and may be different than expected based on\nthe desktop layout and window manager policies. Your application should be\nprepared to handle a window of any size.\n\nThese are the supported properties:\n\n- `SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN`: true if the window should\n  be always on top\n- `SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN`: true if the window has no\n  window decoration\n- `SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN`: true if the\n  window will be used with an externally managed graphics context.\n- `SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN`: true if the window should\n  accept keyboard input (defaults true)\n- `SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN`: true if the window should\n  start in fullscreen mode at desktop resolution\n- `SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER`: the height of the window\n- `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN`: true if the window should start\n  hidden\n- `SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN`: true if the window\n  uses a high pixel density buffer if possible\n- `SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN`: true if the window should\n  start maximized\n- `SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN`: true if the window is a popup menu\n- `SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN`: true if the window will be used\n  with Metal rendering\n- `SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN`: true if the window should\n  start minimized\n- `SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN`: true if the window is modal to\n  its parent\n- `SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN`: true if the window starts\n  with grabbed mouse focus\n- `SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`: true if the window will be used\n  with OpenGL rendering\n- `SDL_PROP_WINDOW_CREATE_PARENT_POINTER`: an SDL_Window that will be the\n  parent of this window, required for windows with the \"tooltip\", \"menu\",\n  and \"modal\" properties\n- `SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN`: true if the window should be\n  resizable\n- `SDL_PROP_WINDOW_CREATE_TITLE_STRING`: the title of the window, in UTF-8\n  encoding\n- `SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN`: true if the window show\n  transparent in the areas with alpha of 0\n- `SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN`: true if the window is a tooltip\n- `SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN`: true if the window is a utility\n  window, not showing in the task bar and window list\n- `SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN`: true if the window will be used\n  with Vulkan rendering\n- `SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER`: the width of the window\n- `SDL_PROP_WINDOW_CREATE_X_NUMBER`: the x position of the window, or\n  `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is\n  relative to the parent for windows with the \"tooltip\" or \"menu\" property\n  set.\n- `SDL_PROP_WINDOW_CREATE_Y_NUMBER`: the y position of the window, or\n  `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is\n  relative to the parent for windows with the \"tooltip\" or \"menu\" property\n  set.\n\nThese are additional supported properties on macOS:\n\n- `SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER`: the\n  `(__unsafe_unretained)` NSWindow associated with the window, if you want\n  to wrap an existing window.\n- `SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER`: the `(__unsafe_unretained)`\n  NSView associated with the window, defaults to `[window contentView]`\n\nThese are additional supported properties on Wayland:\n\n- `SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN` - true if\n  the application wants to use the Wayland surface for a custom role and\n  does not want it attached to an XDG toplevel window. See\n  [README/wayland](README/wayland) for more information on using custom\n  surfaces.\n- `SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN` - true if the\n  application wants an associated `wl_egl_window` object to be created and\n  attached to the window, even if the window does not have the OpenGL\n  property or `SDL_WINDOW_OPENGL` flag set.\n- `SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER` - the wl_surface\n  associated with the window, if you want to wrap an existing window. See\n  [README/wayland](README/wayland) for more information.\n\nThese are additional supported properties on Windows:\n\n- `SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER`: the HWND associated with the\n  window, if you want to wrap an existing window.\n- `SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER`: optional,\n  another window to share pixel format with, useful for OpenGL windows\n\nThese are additional supported properties with X11:\n\n- `SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER`: the X11 Window associated\n  with the window, if you want to wrap an existing window.\n\nThe window is implicitly shown if the \"hidden\" property is not set.\n\nWindows with the \"tooltip\" and \"menu\" properties are popup windows and have\nthe behaviors and guidelines outlined in SDL_CreatePopupWindow().\n\nIf this window is being created to be used with an SDL_Renderer, you should\nnot add a graphics API specific property\n(`SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`, etc), as SDL will handle that\ninternally when it chooses a renderer. However, SDL might need to recreate\nyour window at that point, which may cause the window to appear briefly,\nand then flicker as it is recreated. The correct approach to this is to\ncreate the window with the `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN` property\nset to true, then create the renderer, then show the window with\nSDL_ShowWindow().\n\n\\param props the properties to use.\n\\returns the window that was created or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties\n\\sa SDL_CreateWindow\n\\sa SDL_DestroyWindow",
          "name": "SDL_CreateWindowWithProperties",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.always_on_top\""
        },
        "SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.borderless\""
        },
        "SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.focusable\""
        },
        "SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.external_graphics_context\""
        },
        "SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.create.flags\""
        },
        "SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.fullscreen\""
        },
        "SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.create.height\""
        },
        "SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.hidden\""
        },
        "SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.high_pixel_density\""
        },
        "SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.maximized\""
        },
        "SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.menu\""
        },
        "SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.metal\""
        },
        "SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.minimized\""
        },
        "SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.modal\""
        },
        "SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.mouse_grabbed\""
        },
        "SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.opengl\""
        },
        "SDL_PROP_WINDOW_CREATE_PARENT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_PARENT_POINTER",
          "kind": "def",
          "value": "\"SDL.window.create.parent\""
        },
        "SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.resizable\""
        },
        "SDL_PROP_WINDOW_CREATE_TITLE_STRING": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_TITLE_STRING",
          "kind": "def",
          "value": "\"SDL.window.create.title\""
        },
        "SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.transparent\""
        },
        "SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.tooltip\""
        },
        "SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.utility\""
        },
        "SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.vulkan\""
        },
        "SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.create.width\""
        },
        "SDL_PROP_WINDOW_CREATE_X_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_X_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.create.x\""
        },
        "SDL_PROP_WINDOW_CREATE_Y_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_Y_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.create.y\""
        },
        "SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.create.cocoa.window\""
        },
        "SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.create.cocoa.view\""
        },
        "SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.wayland.surface_role_custom\""
        },
        "SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.create.wayland.create_egl_window\""
        },
        "SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.create.wayland.wl_surface\""
        },
        "SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER",
          "kind": "def",
          "value": "\"SDL.window.create.win32.hwnd\""
        },
        "SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER",
          "kind": "def",
          "value": "\"SDL.window.create.win32.pixel_format_hwnd\""
        },
        "SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.create.x11.window\""
        },
        "SDL_GetWindowID": {
          "doc": "Get the numeric ID of a window.\n\nThe numeric ID is what SDL_WindowEvent references, and is necessary to map\nthese events to specific SDL_Window objects.\n\n\\param window the window to query.\n\\returns the ID of the window on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFromID",
          "name": "SDL_GetWindowID",
          "kind": "function",
          "type": "SDL_WindowID",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowFromID": {
          "doc": "Get a window from a stored ID.\n\nThe numeric ID is what SDL_WindowEvent references, and is necessary to map\nthese events to specific SDL_Window objects.\n\n\\param id the ID of the window.\n\\returns the window associated with `id` or NULL if it doesn't exist; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowID",
          "name": "SDL_GetWindowFromID",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "id",
              "type": "SDL_WindowID"
            }
          ]
        },
        "SDL_GetWindowParent": {
          "doc": "Get parent of a window.\n\n\\param window the window to query.\n\\returns the parent of the window on success or NULL if the window has no\n         parent.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePopupWindow",
          "name": "SDL_GetWindowParent",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowProperties": {
          "doc": "Get the properties associated with a window.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_WINDOW_SHAPE_POINTER`: the surface associated with a shaped\n  window\n- `SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN`: true if the window has HDR\n  headroom above the SDR white point. This property can change dynamically\n  when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the\n  SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the\n  SDR white level in scRGB colorspace, and on Apple platforms this is\n  always 1.0 for EDR content. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT`: the additional high dynamic range\n  that can be displayed, in terms of the SDR white point. When HDR is not\n  enabled, this will be 1.0. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n\nOn Android:\n\n- `SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER`: the ANativeWindow associated\n  with the window\n- `SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER`: the EGLSurface associated with\n  the window\n\nOn iOS:\n\n- `SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`\n  UIWindow associated with the window\n- `SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag\n  associated with metal views on the window\n- `SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's\n  framebuffer object. It must be bound when rendering to the screen using\n  OpenGL.\n- `SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's\n  renderbuffer object. It must be bound when SDL_GL_SwapWindow is called.\n- `SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL\n  view's resolve framebuffer, when MSAA is used.\n\nOn KMS/DRM:\n\n- `SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated\n  with the window (e.g. the X in /dev/dri/cardX)\n- `SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the\n  window\n- `SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated\n  with the window\n\nOn macOS:\n\n- `SDL_PROP_WINDOW_COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`\n  NSWindow associated with the window\n- `SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag\n  assocated with metal views on the window\n\nOn OpenVR:\n\n- `SDL_PROP_WINDOW_OPENVR_OVERLAY_ID`: the OpenVR Overlay Handle ID for the\n  associated overlay window.\n\nOn Vivante:\n\n- `SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType\n  associated with the window\n- `SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType\n  associated with the window\n- `SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER`: the EGLSurface associated with\n  the window\n\nOn Windows:\n\n- `SDL_PROP_WINDOW_WIN32_HWND_POINTER`: the HWND associated with the window\n- `SDL_PROP_WINDOW_WIN32_HDC_POINTER`: the HDC associated with the window\n- `SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER`: the HINSTANCE associated with\n  the window\n\nOn Wayland:\n\nNote: The `xdg_*` window objects do not internally persist across window\nshow/hide calls. They will be null if the window is hidden and must be\nqueried each time it is shown.\n\n- `SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER`: the wl_display associated with\n  the window\n- `SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER`: the wl_surface associated with\n  the window\n- `SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER`: the wp_viewport associated\n  with the window\n- `SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window\n  associated with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated\n  with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role\n  associated with the window\n- 'SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export\n  handle associated with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role\n  associated with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner\n  associated with the window, in popup mode\n\nOn X11:\n\n- `SDL_PROP_WINDOW_X11_DISPLAY_POINTER`: the X11 Display associated with\n  the window\n- `SDL_PROP_WINDOW_X11_SCREEN_NUMBER`: the screen number associated with\n  the window\n- `SDL_PROP_WINDOW_X11_WINDOW_NUMBER`: the X11 Window associated with the\n  window\n\n\\param window the window to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_PROP_WINDOW_SHAPE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_SHAPE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.shape\""
        },
        "SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.window.HDR_enabled\""
        },
        "SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT",
          "kind": "def",
          "value": "\"SDL.window.SDR_white_level\""
        },
        "SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT",
          "kind": "def",
          "value": "\"SDL.window.HDR_headroom\""
        },
        "SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.android.window\""
        },
        "SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.android.surface\""
        },
        "SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.uikit.window\""
        },
        "SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.uikit.metal_view_tag\""
        },
        "SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.uikit.opengl.framebuffer\""
        },
        "SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.uikit.opengl.renderbuffer\""
        },
        "SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.uikit.opengl.resolve_framebuffer\""
        },
        "SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.kmsdrm.dev_index\""
        },
        "SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.kmsdrm.drm_fd\""
        },
        "SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.kmsdrm.gbm_dev\""
        },
        "SDL_PROP_WINDOW_COCOA_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_COCOA_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.cocoa.window\""
        },
        "SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.cocoa.metal_view_tag\""
        },
        "SDL_PROP_WINDOW_OPENVR_OVERLAY_ID": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_OPENVR_OVERLAY_ID",
          "kind": "def",
          "value": "\"SDL.window.openvr.overlay_id\""
        },
        "SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER",
          "kind": "def",
          "value": "\"SDL.window.vivante.display\""
        },
        "SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.vivante.window\""
        },
        "SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.vivante.surface\""
        },
        "SDL_PROP_WINDOW_WIN32_HWND_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WIN32_HWND_POINTER",
          "kind": "def",
          "value": "\"SDL.window.win32.hwnd\""
        },
        "SDL_PROP_WINDOW_WIN32_HDC_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WIN32_HDC_POINTER",
          "kind": "def",
          "value": "\"SDL.window.win32.hdc\""
        },
        "SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.win32.instance\""
        },
        "SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.display\""
        },
        "SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.surface\""
        },
        "SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.viewport\""
        },
        "SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.egl_window\""
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.xdg_surface\""
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.xdg_toplevel\""
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING",
          "kind": "def",
          "value": "\"SDL.window.wayland.xdg_toplevel_export_handle\""
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.xdg_popup\""
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER",
          "kind": "def",
          "value": "\"SDL.window.wayland.xdg_positioner\""
        },
        "SDL_PROP_WINDOW_X11_DISPLAY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_X11_DISPLAY_POINTER",
          "kind": "def",
          "value": "\"SDL.window.x11.display\""
        },
        "SDL_PROP_WINDOW_X11_SCREEN_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_X11_SCREEN_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.x11.screen\""
        },
        "SDL_PROP_WINDOW_X11_WINDOW_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_X11_WINDOW_NUMBER",
          "kind": "def",
          "value": "\"SDL.window.x11.window\""
        },
        "SDL_GetWindowFlags": {
          "doc": "Get the window flags.\n\n\\param window the window to query.\n\\returns a mask of the SDL_WindowFlags associated with `window`.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow\n\\sa SDL_HideWindow\n\\sa SDL_MaximizeWindow\n\\sa SDL_MinimizeWindow\n\\sa SDL_SetWindowFullscreen\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_ShowWindow",
          "name": "SDL_GetWindowFlags",
          "kind": "function",
          "type": "SDL_WindowFlags",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowTitle": {
          "doc": "Set the title of a window.\n\nThis string is expected to be in UTF-8 encoding.\n\n\\param window the window to change.\n\\param title the desired window title in UTF-8 format.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowTitle",
          "name": "SDL_SetWindowTitle",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "title",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetWindowTitle": {
          "doc": "Get the title of a window.\n\n\\param window the window to query.\n\\returns the title of the window in UTF-8 format or \"\" if there is no\n         title.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowTitle",
          "name": "SDL_GetWindowTitle",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowIcon": {
          "doc": "Set the icon for a window.\n\nIf this function is passed a surface with alternate representations, the\nsurface will be interpreted as the content to be used for 100% display\nscale, and the alternate representations will be used for high DPI\nsituations. For example, if the original surface is 32x32, then on a 2x\nmacOS display or 200% display scale on Windows, a 64x64 version of the\nimage will be used, if available. If a matching version of the image isn't\navailable, the closest larger size image will be downscaled to the\nappropriate size and be used instead, if available. Otherwise, the closest\nsmaller image will be upscaled and be used instead.\n\n\\param window the window to change.\n\\param icon an SDL_Surface structure containing the icon for the window.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowIcon",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "icon",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetWindowPosition": {
          "doc": "Request that the window's position be set.\n\nIf the window is in an exclusive fullscreen or maximized state, this\nrequest has no effect.\n\nThis can be used to reposition fullscreen-desktop windows onto a different\ndisplay, however, as exclusive fullscreen windows are locked to a specific\ndisplay, they can only be repositioned programmatically via\nSDL_SetWindowFullscreenMode().\n\nOn some windowing systems this request is asynchronous and the new\ncoordinates may not have have been applied immediately upon the return of\nthis function. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window position changes, an SDL_EVENT_WINDOW_MOVED event will be\nemitted with the window's new coordinates. Note that the new coordinates\nmay not match the exact coordinates requested, as some windowing systems\ncan restrict the position of the window in certain scenarios (e.g.\nconstraining the position so the window is always within desktop bounds).\nAdditionally, as this is just a request, it can be denied by the windowing\nsystem.\n\n\\param window the window to reposition.\n\\param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or\n         `SDL_WINDOWPOS_UNDEFINED`.\n\\param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or\n         `SDL_WINDOWPOS_UNDEFINED`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowPosition\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowPosition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowPosition": {
          "doc": "Get the position of a window.\n\nThis is the current position of the window as last reported by the\nwindowing system.\n\nIf you do not need the value for one of the positions a NULL may be passed\nin the `x` or `y` parameter.\n\n\\param window the window to query.\n\\param x a pointer filled in with the x position of the window, may be\n         NULL.\n\\param y a pointer filled in with the y position of the window, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowPosition",
          "name": "SDL_GetWindowPosition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "int *"
            },
            {
              "name": "y",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowSize": {
          "doc": "Request that the size of a window's client area be set.\n\nIf the window is in a fullscreen or maximized state, this request has no\neffect.\n\nTo change the exclusive fullscreen mode of a window, use\nSDL_SetWindowFullscreenMode().\n\nOn some windowing systems, this request is asynchronous and the new window\nsize may not have have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be\nemitted with the new window dimensions. Note that the new dimensions may\nnot match the exact size requested, as some windowing systems can restrict\nthe window size in certain scenarios (e.g. constraining the size of the\ncontent area to remain within the usable desktop bounds). Additionally, as\nthis is just a request, it can be denied by the windowing system.\n\n\\param window the window to change.\n\\param w the width of the window, must be > 0.\n\\param h the height of the window, must be > 0.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSize\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowSize": {
          "doc": "Get the size of a window's client area.\n\nThe window pixel size may differ from its window coordinate size if the\nwindow is on a high pixel density display. Use SDL_GetWindowSizeInPixels()\nor SDL_GetRenderOutputSize() to get the real client area size in pixels.\n\n\\param window the window to query the width and height from.\n\\param w a pointer filled in with the width of the window, may be NULL.\n\\param h a pointer filled in with the height of the window, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderOutputSize\n\\sa SDL_GetWindowSizeInPixels\n\\sa SDL_SetWindowSize",
          "name": "SDL_GetWindowSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_GetWindowSafeArea": {
          "doc": "Get the safe area for this window.\n\nSome devices have portions of the screen which are partially obscured or\nnot interactive, possibly due to on-screen controls, curved edges, camera\nnotches, TV overscan, etc. This function provides the area of the window\nwhich is safe to have interactable content. You should continue rendering\ninto the rest of the window, but it should not contain visually important\nor interactible content.\n\n\\param window the window to query.\n\\param rect a pointer filled in with the client area that is safe for\n            interactive content.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowSafeArea",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_SetWindowAspectRatio": {
          "doc": "Request that the aspect ratio of a window's client area be set.\n\nThe aspect ratio is the ratio of width divided by height, e.g. 2560x1600\nwould be 1.6. Larger aspect ratios are wider and smaller aspect ratios are\nnarrower.\n\nIf, at the time of this request, the window in a fixed-size state, such as\nmaximized or fullscreen, the request will be deferred until the window\nexits this state and becomes resizable again.\n\nOn some windowing systems, this request is asynchronous and the new window\naspect ratio may not have have been applied immediately upon the return of\nthis function. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be\nemitted with the new window dimensions. Note that the new dimensions may\nnot match the exact aspect ratio requested, as some windowing systems can\nrestrict the window size in certain scenarios (e.g. constraining the size\nof the content area to remain within the usable desktop bounds).\nAdditionally, as this is just a request, it can be denied by the windowing\nsystem.\n\n\\param window the window to change.\n\\param min_aspect the minimum aspect ratio of the window, or 0.0f for no\n                  limit.\n\\param max_aspect the maximum aspect ratio of the window, or 0.0f for no\n                  limit.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowAspectRatio\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowAspectRatio",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "min_aspect",
              "type": "float"
            },
            {
              "name": "max_aspect",
              "type": "float"
            }
          ]
        },
        "SDL_GetWindowAspectRatio": {
          "doc": "Get the size of a window's client area.\n\n\\param window the window to query the width and height from.\n\\param min_aspect a pointer filled in with the minimum aspect ratio of the\n                  window, may be NULL.\n\\param max_aspect a pointer filled in with the maximum aspect ratio of the\n                  window, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowAspectRatio",
          "name": "SDL_GetWindowAspectRatio",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "min_aspect",
              "type": "float *"
            },
            {
              "name": "max_aspect",
              "type": "float *"
            }
          ]
        },
        "SDL_GetWindowBordersSize": {
          "doc": "Get the size of a window's borders (decorations) around the client area.\n\nNote: If this function fails (returns false), the size values will be\ninitialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the\nwindow in question was borderless.\n\nNote: This function may fail on systems where the window has not yet been\ndecorated by the display server (for example, immediately after calling\nSDL_CreateWindow). It is recommended that you wait at least until the\nwindow has been presented and composited, so that the window system has a\nchance to decorate the window and provide the border dimensions to SDL.\n\nThis function also returns false if getting the information is not\nsupported.\n\n\\param window the window to query the size values of the border\n              (decorations) from.\n\\param top pointer to variable for storing the size of the top border; NULL\n           is permitted.\n\\param left pointer to variable for storing the size of the left border;\n            NULL is permitted.\n\\param bottom pointer to variable for storing the size of the bottom\n              border; NULL is permitted.\n\\param right pointer to variable for storing the size of the right border;\n             NULL is permitted.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSize",
          "name": "SDL_GetWindowBordersSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "top",
              "type": "int *"
            },
            {
              "name": "left",
              "type": "int *"
            },
            {
              "name": "bottom",
              "type": "int *"
            },
            {
              "name": "right",
              "type": "int *"
            }
          ]
        },
        "SDL_GetWindowSizeInPixels": {
          "doc": "Get the size of a window's client area, in pixels.\n\n\\param window the window from which the drawable size should be queried.\n\\param w a pointer to variable for storing the width in pixels, may be\n         NULL.\n\\param h a pointer to variable for storing the height in pixels, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow\n\\sa SDL_GetWindowSize",
          "name": "SDL_GetWindowSizeInPixels",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowMinimumSize": {
          "doc": "Set the minimum size of a window's client area.\n\n\\param window the window to change.\n\\param min_w the minimum width of the window, or 0 for no limit.\n\\param min_h the minimum height of the window, or 0 for no limit.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMinimumSize\n\\sa SDL_SetWindowMaximumSize",
          "name": "SDL_SetWindowMinimumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "min_w",
              "type": "int"
            },
            {
              "name": "min_h",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowMinimumSize": {
          "doc": "Get the minimum size of a window's client area.\n\n\\param window the window to query.\n\\param w a pointer filled in with the minimum width of the window, may be\n         NULL.\n\\param h a pointer filled in with the minimum height of the window, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMaximumSize\n\\sa SDL_SetWindowMinimumSize",
          "name": "SDL_GetWindowMinimumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowMaximumSize": {
          "doc": "Set the maximum size of a window's client area.\n\n\\param window the window to change.\n\\param max_w the maximum width of the window, or 0 for no limit.\n\\param max_h the maximum height of the window, or 0 for no limit.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMaximumSize\n\\sa SDL_SetWindowMinimumSize",
          "name": "SDL_SetWindowMaximumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "max_w",
              "type": "int"
            },
            {
              "name": "max_h",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowMaximumSize": {
          "doc": "Get the maximum size of a window's client area.\n\n\\param window the window to query.\n\\param w a pointer filled in with the maximum width of the window, may be\n         NULL.\n\\param h a pointer filled in with the maximum height of the window, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMinimumSize\n\\sa SDL_SetWindowMaximumSize",
          "name": "SDL_GetWindowMaximumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowBordered": {
          "doc": "Set the border state of a window.\n\nThis will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add\nor remove the border from the actual window. This is a no-op if the\nwindow's border already matches the requested state.\n\nYou can't change the border state of a fullscreen window.\n\n\\param window the window of which to change the border state.\n\\param bordered false to remove border, true to add border.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_SetWindowBordered",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "bordered",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowResizable": {
          "doc": "Set the user-resizable state of a window.\n\nThis will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and\nallow/disallow user resizing of the window. This is a no-op if the window's\nresizable state already matches the requested state.\n\nYou can't change the resizable state of a fullscreen window.\n\n\\param window the window of which to change the resizable state.\n\\param resizable true to allow resizing, false to disallow.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_SetWindowResizable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "resizable",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowAlwaysOnTop": {
          "doc": "Set the window to always be above the others.\n\nThis will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This\nwill bring the window to the front and keep the window above the rest.\n\n\\param window the window of which to change the always on top state.\n\\param on_top true to set the window always on top, false to disable.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_SetWindowAlwaysOnTop",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "on_top",
              "type": "bool"
            }
          ]
        },
        "SDL_ShowWindow": {
          "doc": "Show a window.\n\n\\param window the window to show.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HideWindow\n\\sa SDL_RaiseWindow",
          "name": "SDL_ShowWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_HideWindow": {
          "doc": "Hide a window.\n\n\\param window the window to hide.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ShowWindow\n\\sa SDL_WINDOW_HIDDEN",
          "name": "SDL_HideWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_RaiseWindow": {
          "doc": "Request that a window be raised above other windows and gain the input\nfocus.\n\nThe result of this request is subject to desktop window manager policy,\nparticularly if raising the requested window would result in stealing focus\nfrom another application. If the window is successfully raised and gains\ninput focus, an SDL_EVENT_WINDOW_FOCUS_GAINED event will be emitted, and\nthe window will have the SDL_WINDOW_INPUT_FOCUS flag set.\n\n\\param window the window to raise.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RaiseWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_MaximizeWindow": {
          "doc": "Request that the window be made as large as possible.\n\nNon-resizable windows can't be maximized. The window must have the\nSDL_WINDOW_RESIZABLE flag set, or this will have no effect.\n\nOn some windowing systems this request is asynchronous and the new window\nstate may not have have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be\nemitted. Note that, as this is just a request, the windowing system can\ndeny the state change.\n\nWhen maximizing a window, whether the constraints set via\nSDL_SetWindowMaximumSize() are honored depends on the policy of the window\nmanager. Win32 and macOS enforce the constraints when maximizing, while X11\nand Wayland window managers may vary.\n\n\\param window the window to maximize.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MinimizeWindow\n\\sa SDL_RestoreWindow\n\\sa SDL_SyncWindow",
          "name": "SDL_MaximizeWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_MinimizeWindow": {
          "doc": "Request that the window be minimized to an iconic representation.\n\nIf the window is in a fullscreen state, this request has no direct effect.\nIt may alter the state the window is returned to when leaving fullscreen.\n\nOn some windowing systems this request is asynchronous and the new window\nstate may not have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be\nemitted. Note that, as this is just a request, the windowing system can\ndeny the state change.\n\n\\param window the window to minimize.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MaximizeWindow\n\\sa SDL_RestoreWindow\n\\sa SDL_SyncWindow",
          "name": "SDL_MinimizeWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_RestoreWindow": {
          "doc": "Request that the size and position of a minimized or maximized window be\nrestored.\n\nIf the window is in a fullscreen state, this request has no direct effect.\nIt may alter the state the window is returned to when leaving fullscreen.\n\nOn some windowing systems this request is asynchronous and the new window\nstate may not have have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be\nemitted. Note that, as this is just a request, the windowing system can\ndeny the state change.\n\n\\param window the window to restore.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MaximizeWindow\n\\sa SDL_MinimizeWindow\n\\sa SDL_SyncWindow",
          "name": "SDL_RestoreWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowFullscreen": {
          "doc": "Request that the window's fullscreen state be changed.\n\nBy default a window in fullscreen state uses borderless fullscreen desktop\nmode, but a specific exclusive display mode can be set using\nSDL_SetWindowFullscreenMode().\n\nOn some windowing systems this request is asynchronous and the new\nfullscreen state may not have have been applied immediately upon the return\nof this function. If an immediate change is required, call SDL_SyncWindow()\nto block until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_ENTER_FULLSCREEN or\nSDL_EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this\nis just a request, it can be denied by the windowing system.\n\n\\param window the window to change.\n\\param fullscreen true for fullscreen mode, false for windowed mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFullscreenMode\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_SyncWindow\n\\sa SDL_WINDOW_FULLSCREEN",
          "name": "SDL_SetWindowFullscreen",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "fullscreen",
              "type": "bool"
            }
          ]
        },
        "SDL_SyncWindow": {
          "doc": "Block until any pending window state is finalized.\n\nOn asynchronous windowing systems, this acts as a synchronization barrier\nfor pending window state. It will attempt to wait until any pending window\nstate has been applied and is guaranteed to return within finite time. Note\nthat for how long it can potentially block depends on the underlying window\nsystem, as window state changes may involve somewhat lengthy animations\nthat must complete before the window is in its final requested state.\n\nOn windowing systems where changes are immediate, this does nothing.\n\n\\param window the window for which to wait for the pending state to be\n              applied.\n\\returns true on success or false if the operation timed out before the\n         window was in the requested state.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowSize\n\\sa SDL_SetWindowPosition\n\\sa SDL_SetWindowFullscreen\n\\sa SDL_MinimizeWindow\n\\sa SDL_MaximizeWindow\n\\sa SDL_RestoreWindow\n\\sa SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS",
          "name": "SDL_SyncWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_WindowHasSurface": {
          "doc": "Return whether the window has a surface associated with it.\n\n\\param window the window to query.\n\\returns true if there is a surface associated with the window, or false\n         otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface",
          "name": "SDL_WindowHasSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowSurface": {
          "doc": "Get the SDL surface associated with the window.\n\nA new surface will be created with the optimal format for the window, if\nnecessary. This surface will be freed when the window is destroyed. Do not\nfree this surface.\n\nThis surface will be invalidated if the window is resized. After resizing a\nwindow this function must be called again to return a valid surface.\n\nYou may not combine this with 3D or the rendering API on this window.\n\nThis function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.\n\n\\param window the window to query.\n\\returns the surface associated with the window, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyWindowSurface\n\\sa SDL_WindowHasSurface\n\\sa SDL_UpdateWindowSurface\n\\sa SDL_UpdateWindowSurfaceRects",
          "name": "SDL_GetWindowSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowSurfaceVSync": {
          "doc": "Toggle VSync for the window surface.\n\nWhen a window surface is created, vsync defaults to\nSDL_WINDOW_SURFACE_VSYNC_DISABLED.\n\nThe `vsync` parameter can be 1 to synchronize present with every vertical\nrefresh, 2 to synchronize present with every second vertical refresh, etc.,\nSDL_WINDOW_SURFACE_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync),\nor SDL_WINDOW_SURFACE_VSYNC_DISABLED to disable. Not every value is\nsupported by every driver, so you should check the return value to see\nwhether the requested setting is supported.\n\n\\param window the window.\n\\param vsync the vertical refresh sync interval.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurfaceVSync",
          "name": "SDL_SetWindowSurfaceVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "vsync",
              "type": "int"
            }
          ]
        },
        "SDL_WINDOW_SURFACE_VSYNC_DISABLED": {
          "doc": "",
          "name": "SDL_WINDOW_SURFACE_VSYNC_DISABLED",
          "kind": "def",
          "value": "0"
        },
        "SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE": {
          "doc": "",
          "name": "SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE",
          "kind": "def",
          "value": "(-1)"
        },
        "SDL_GetWindowSurfaceVSync": {
          "doc": "Get VSync for the window surface.\n\n\\param window the window to query.\n\\param vsync an int filled with the current vertical refresh sync interval.\n             See SDL_SetWindowSurfaceVSync() for the meaning of the value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowSurfaceVSync",
          "name": "SDL_GetWindowSurfaceVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "vsync",
              "type": "int *"
            }
          ]
        },
        "SDL_UpdateWindowSurface": {
          "doc": "Copy the window surface to the screen.\n\nThis is the function you use to reflect any changes to the surface on the\nscreen.\n\nThis function is equivalent to the SDL 1.2 API SDL_Flip().\n\n\\param window the window to update.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface\n\\sa SDL_UpdateWindowSurfaceRects",
          "name": "SDL_UpdateWindowSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_UpdateWindowSurfaceRects": {
          "doc": "Copy areas of the window surface to the screen.\n\nThis is the function you use to reflect changes to portions of the surface\non the screen.\n\nThis function is equivalent to the SDL 1.2 API SDL_UpdateRects().\n\nNote that this function will update _at least_ the rectangles specified,\nbut this is only intended as an optimization; in practice, this might\nupdate more of the screen (or all of the screen!), depending on what method\nSDL uses to send pixels to the system.\n\n\\param window the window to update.\n\\param rects an array of SDL_Rect structures representing areas of the\n             surface to copy, in pixels.\n\\param numrects the number of rectangles.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface\n\\sa SDL_UpdateWindowSurface",
          "name": "SDL_UpdateWindowSurfaceRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rects",
              "type": "const SDL_Rect *"
            },
            {
              "name": "numrects",
              "type": "int"
            }
          ]
        },
        "SDL_DestroyWindowSurface": {
          "doc": "Destroy the surface associated with the window.\n\n\\param window the window to update.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface\n\\sa SDL_WindowHasSurface",
          "name": "SDL_DestroyWindowSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowKeyboardGrab": {
          "doc": "Set a window's keyboard grab mode.\n\nKeyboard grab enables capture of system keyboard shortcuts like Alt+Tab or\nthe Meta/Super key. Note that not all system keyboard shortcuts can be\ncaptured by applications (one example is Ctrl+Alt+Del on Windows).\n\nThis is primarily intended for specialized applications such as VNC clients\nor VM frontends. Normal games should not use keyboard grab.\n\nWhen keyboard grab is enabled, SDL will continue to handle Alt+Tab when the\nwindow is full-screen to ensure the user is not trapped in your\napplication. If you have a custom keyboard shortcut to exit fullscreen\nmode, you may suppress this behavior with\n`SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.\n\nIf the caller enables a grab while another window is currently grabbed, the\nother window loses its grab in favor of the caller's window.\n\n\\param window the window for which the keyboard grab mode should be set.\n\\param grabbed this is true to grab keyboard, and false to release.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowKeyboardGrab\n\\sa SDL_SetWindowMouseGrab",
          "name": "SDL_SetWindowKeyboardGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "grabbed",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowMouseGrab": {
          "doc": "Set a window's mouse grab mode.\n\nMouse grab confines the mouse cursor to the window.\n\n\\param window the window for which the mouse grab mode should be set.\n\\param grabbed this is true to grab mouse, and false to release.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMouseRect\n\\sa SDL_SetWindowMouseRect\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_SetWindowMouseGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "grabbed",
              "type": "bool"
            }
          ]
        },
        "SDL_GetWindowKeyboardGrab": {
          "doc": "Get a window's keyboard grab mode.\n\n\\param window the window to query.\n\\returns true if keyboard is grabbed, and false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_GetWindowKeyboardGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowMouseGrab": {
          "doc": "Get a window's mouse grab mode.\n\n\\param window the window to query.\n\\returns true if mouse is grabbed, and false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMouseRect\n\\sa SDL_SetWindowMouseRect\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_GetWindowMouseGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetGrabbedWindow": {
          "doc": "Get the window that currently has an input grab enabled.\n\n\\returns the window if input is grabbed or NULL otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_GetGrabbedWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": []
        },
        "SDL_SetWindowMouseRect": {
          "doc": "Confines the cursor to the specified area of a window.\n\nNote that this does NOT grab the cursor, it only defines the area a cursor\nis restricted to when the window has mouse focus.\n\n\\param window the window that will be associated with the barrier.\n\\param rect a rectangle area in window-relative coordinates. If NULL the\n            barrier for the specified window will be destroyed.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMouseRect\n\\sa SDL_GetWindowMouseGrab\n\\sa SDL_SetWindowMouseGrab",
          "name": "SDL_SetWindowMouseRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetWindowMouseRect": {
          "doc": "Get the mouse confinement rectangle of a window.\n\n\\param window the window to query.\n\\returns a pointer to the mouse confinement rectangle of a window, or NULL\n         if there isn't one.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowMouseRect\n\\sa SDL_GetWindowMouseGrab\n\\sa SDL_SetWindowMouseGrab",
          "name": "SDL_GetWindowMouseRect",
          "kind": "function",
          "type": "const SDL_Rect *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowOpacity": {
          "doc": "Set the opacity for a window.\n\nThe parameter `opacity` will be clamped internally between 0.0f\n(transparent) and 1.0f (opaque).\n\nThis function also returns false if setting the opacity isn't supported.\n\n\\param window the window which will be made transparent or opaque.\n\\param opacity the opacity value (0.0f - transparent, 1.0f - opaque).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowOpacity",
          "name": "SDL_SetWindowOpacity",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "opacity",
              "type": "float"
            }
          ]
        },
        "SDL_GetWindowOpacity": {
          "doc": "Get the opacity of a window.\n\nIf transparency isn't supported on this platform, opacity will be returned\nas 1.0f without error.\n\n\\param window the window to get the current opacity value from.\n\\returns the opacity, (0.0f - transparent, 1.0f - opaque), or -1.0f on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowOpacity",
          "name": "SDL_GetWindowOpacity",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowParent": {
          "doc": "Set the window as a child of a parent window.\n\nIf the window is already the child of an existing window, it will be\nreparented to the new owner. Setting the parent window to NULL unparents\nthe window and removes child window status.\n\nIf a parent window is hidden or destroyed, the operation will be\nrecursively applied to child windows. Child windows hidden with the parent\nthat did not have their hidden status explicitly set will be restored when\nthe parent is shown.\n\nAttempting to set the parent of a window that is currently in the modal\nstate will fail. Use SDL_SetWindowModal() to cancel the modal status before\nattempting to change the parent.\n\nPopup windows cannot change parents and attempts to do so will fail.\n\nSetting a parent window that is currently the sibling or descendent of the\nchild window results in undefined behavior.\n\n\\param window the window that should become the child of a parent.\n\\param parent the new parent window for the child window.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowModal",
          "name": "SDL_SetWindowParent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "parent",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowModal": {
          "doc": "Toggle the state of the window as modal.\n\nTo enable modal status on a window, the window must currently be the child\nwindow of a parent, or toggling modal status on will fail.\n\n\\param window the window on which to set the modal state.\n\\param modal true to toggle modal status on, false to toggle it off.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowParent\n\\sa SDL_WINDOW_MODAL",
          "name": "SDL_SetWindowModal",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "modal",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowFocusable": {
          "doc": "Set whether the window may have input focus.\n\n\\param window the window to set focusable state.\n\\param focusable true to allow input focus, false to not allow input focus.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowFocusable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "focusable",
              "type": "bool"
            }
          ]
        },
        "SDL_ShowWindowSystemMenu": {
          "doc": "Display the system-level window menu.\n\nThis default window menu is provided by the system and on some platforms\nprovides functionality for setting or changing privileged state on the\nwindow, such as moving it between workspaces or displays, or toggling the\nalways-on-top property.\n\nOn platforms or desktops where this is unsupported, this function does\nnothing.\n\n\\param window the window for which the menu will be displayed.\n\\param x the x coordinate of the menu, relative to the origin (top-left) of\n         the client area.\n\\param y the y coordinate of the menu, relative to the origin (top-left) of\n         the client area.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ShowWindowSystemMenu",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            }
          ]
        },
        "SDL_HitTestResult": {
          "doc": "Possible return values from the SDL_HitTest callback.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_HitTest",
          "name": "SDL_HitTestResult",
          "kind": "enum",
          "entries": {
            "SDL_HITTEST_NORMAL": {
              "doc": "Region is normal.  No special properties.",
              "name": "SDL_HITTEST_NORMAL",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_DRAGGABLE": {
              "doc": "Region can drag entire window.",
              "name": "SDL_HITTEST_DRAGGABLE",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_TOPLEFT": {
              "doc": "Region is the resizable top-left corner border.",
              "name": "SDL_HITTEST_RESIZE_TOPLEFT",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_TOP": {
              "doc": "Region is the resizable top border.",
              "name": "SDL_HITTEST_RESIZE_TOP",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_TOPRIGHT": {
              "doc": "Region is the resizable top-right corner border.",
              "name": "SDL_HITTEST_RESIZE_TOPRIGHT",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_RIGHT": {
              "doc": "Region is the resizable right border.",
              "name": "SDL_HITTEST_RESIZE_RIGHT",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_BOTTOMRIGHT": {
              "doc": "Region is the resizable bottom-right corner border.",
              "name": "SDL_HITTEST_RESIZE_BOTTOMRIGHT",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_BOTTOM": {
              "doc": "Region is the resizable bottom border.",
              "name": "SDL_HITTEST_RESIZE_BOTTOM",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_BOTTOMLEFT": {
              "doc": "Region is the resizable bottom-left corner border.",
              "name": "SDL_HITTEST_RESIZE_BOTTOMLEFT",
              "kind": "var",
              "type": ""
            },
            "SDL_HITTEST_RESIZE_LEFT": {
              "doc": "Region is the resizable left border.",
              "name": "SDL_HITTEST_RESIZE_LEFT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_HitTest": {
          "doc": "Callback used for hit-testing.\n\n\\param win the SDL_Window where hit-testing was set on.\n\\param area an SDL_Point which should be hit-tested.\n\\param data what was passed as `callback_data` to SDL_SetWindowHitTest().\n\\returns an SDL_HitTestResult value.\n\n\\sa SDL_SetWindowHitTest",
          "name": "SDL_HitTest",
          "kind": "callback",
          "type": "SDL_HitTestResult",
          "parameters": [
            {
              "name": "win",
              "type": "SDL_Window *"
            },
            {
              "name": "area",
              "type": "const SDL_Point *"
            },
            {
              "name": "data",
              "type": "void *"
            }
          ]
        },
        "SDL_SetWindowHitTest": {
          "doc": "Provide a callback that decides if a window region has special properties.\n\nNormally windows are dragged and resized by decorations provided by the\nsystem window manager (a title bar, borders, etc), but for some apps, it\nmakes sense to drag them from somewhere else inside the window itself; for\nexample, one might have a borderless window that wants to be draggable from\nany part, or simulate its own title bar, etc.\n\nThis function lets the app provide a callback that designates pieces of a\ngiven window as special. This callback is run during event processing if we\nneed to tell the OS to treat a region of the window specially; the use of\nthis callback is known as \"hit testing.\"\n\nMouse input may not be delivered to your application if it is within a\nspecial area; the OS will often apply that input to moving the window or\nresizing the window and not deliver it to the application.\n\nSpecifying NULL for a callback disables hit-testing. Hit-testing is\ndisabled by default.\n\nPlatforms that don't support this functionality will return false\nunconditionally, even if you're attempting to disable hit-testing.\n\nYour callback may fire at any time, and its firing does not indicate any\nspecific behavior (for example, on Windows, this certainly might fire when\nthe OS is deciding whether to drag your window, but it fires for lots of\nother reasons, too, some unrelated to anything you probably care about _and\nwhen the mouse isn't actually at the location it is testing_). Since this\ncan fire at any time, you should try to keep your callback efficient,\ndevoid of allocations, etc.\n\n\\param window the window to set hit-testing on.\n\\param callback the function to call when doing a hit-test.\n\\param callback_data an app-defined void pointer passed to **callback**.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowHitTest",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "callback",
              "type": "SDL_HitTest"
            },
            {
              "name": "callback_data",
              "type": "void *"
            }
          ]
        },
        "SDL_SetWindowShape": {
          "doc": "Set the shape of a transparent window.\n\nThis sets the alpha channel of a transparent window and any fully\ntransparent areas are also transparent to mouse clicks. If you are using\nsomething besides the SDL render API, then you are responsible for drawing\nthe alpha channel of the window to match the shape alpha channel to get\nconsistent cross-platform results.\n\nThe shape is copied inside this function, so you can free it afterwards. If\nyour shape surface changes, you should call SDL_SetWindowShape() again to\nupdate the window. This is an expensive operation, so should be done\nsparingly.\n\nThe window must have been created with the SDL_WINDOW_TRANSPARENT flag.\n\n\\param window the window.\n\\param shape the surface representing the shape of the window, or NULL to\n             remove any current shape.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowShape",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "shape",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_FlashWindow": {
          "doc": "Request a window to demand attention from the user.\n\n\\param window the window to be flashed.\n\\param operation the operation to perform.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_FlashWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "operation",
              "type": "SDL_FlashOperation"
            }
          ]
        },
        "SDL_DestroyWindow": {
          "doc": "Destroy a window.\n\nAny child windows owned by the window will be recursively destroyed as\nwell.\n\nNote that on some platforms, the visible window may not actually be removed\nfrom the screen until the SDL event loop is pumped again, even though the\nSDL_Window is no longer valid after this call.\n\n\\param window the window to destroy.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePopupWindow\n\\sa SDL_CreateWindow\n\\sa SDL_CreateWindowWithProperties",
          "name": "SDL_DestroyWindow",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_ScreenSaverEnabled": {
          "doc": "Check whether the screensaver is currently enabled.\n\nThe screensaver is disabled by default.\n\nThe default can also be changed using `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`.\n\n\\returns true if the screensaver is enabled, false if it is disabled.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DisableScreenSaver\n\\sa SDL_EnableScreenSaver",
          "name": "SDL_ScreenSaverEnabled",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_EnableScreenSaver": {
          "doc": "Allow the screen to be blanked by a screen saver.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DisableScreenSaver\n\\sa SDL_ScreenSaverEnabled",
          "name": "SDL_EnableScreenSaver",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_DisableScreenSaver": {
          "doc": "Prevent the screen from being blanked by a screen saver.\n\nIf you disable the screensaver, it is automatically re-enabled when SDL\nquits.\n\nThe screensaver is disabled by default, but this may by changed by\nSDL_HINT_VIDEO_ALLOW_SCREENSAVER.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_EnableScreenSaver\n\\sa SDL_ScreenSaverEnabled",
          "name": "SDL_DisableScreenSaver",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GL_LoadLibrary": {
          "doc": "Dynamically load an OpenGL library.\n\nThis should be done after initializing the video driver, but before\ncreating any OpenGL windows. If no OpenGL library is loaded, the default\nlibrary will be loaded upon creation of the first OpenGL window.\n\nIf you do this, you need to retrieve all of the GL functions used in your\nprogram from the dynamic library using SDL_GL_GetProcAddress().\n\n\\param path the platform dependent OpenGL library name, or NULL to open the\n            default OpenGL library.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetProcAddress\n\\sa SDL_GL_UnloadLibrary",
          "name": "SDL_GL_LoadLibrary",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_GL_GetProcAddress": {
          "doc": "Get an OpenGL function by name.\n\nIf the GL library is loaded at runtime with SDL_GL_LoadLibrary(), then all\nGL functions must be retrieved this way. Usually this is used to retrieve\nfunction pointers to OpenGL extensions.\n\nThere are some quirks to looking up OpenGL functions that require some\nextra care from the application. If you code carefully, you can handle\nthese quirks without any platform-specific code, though:\n\n- On Windows, function pointers are specific to the current GL context;\n  this means you need to have created a GL context and made it current\n  before calling SDL_GL_GetProcAddress(). If you recreate your context or\n  create a second context, you should assume that any existing function\n  pointers aren't valid to use with it. This is (currently) a\n  Windows-specific limitation, and in practice lots of drivers don't suffer\n  this limitation, but it is still the way the wgl API is documented to\n  work and you should expect crashes if you don't respect it. Store a copy\n  of the function pointers that comes and goes with context lifespan.\n- On X11, function pointers returned by this function are valid for any\n  context, and can even be looked up before a context is created at all.\n  This means that, for at least some common OpenGL implementations, if you\n  look up a function that doesn't exist, you'll get a non-NULL result that\n  is _NOT_ safe to call. You must always make sure the function is actually\n  available for a given GL context before calling it, by checking for the\n  existence of the appropriate extension with SDL_GL_ExtensionSupported(),\n  or verifying that the version of OpenGL you're using offers the function\n  as core functionality.\n- Some OpenGL drivers, on all platforms, *will* return NULL if a function\n  isn't supported, but you can't count on this behavior. Check for\n  extensions you use, and if you get a NULL anyway, act as if that\n  extension wasn't available. This is probably a bug in the driver, but you\n  can code defensively for this scenario anyhow.\n- Just because you're on Linux/Unix, don't assume you'll be using X11.\n  Next-gen display servers are waiting to replace it, and may or may not\n  make the same promises about function pointers.\n- OpenGL function pointers must be declared `APIENTRY` as in the example\n  code. This will ensure the proper calling convention is followed on\n  platforms where this matters (Win32) thereby avoiding stack corruption.\n\n\\param proc the name of an OpenGL function.\n\\returns a pointer to the named OpenGL function. The returned pointer\n         should be cast to the appropriate function signature.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_ExtensionSupported\n\\sa SDL_GL_LoadLibrary\n\\sa SDL_GL_UnloadLibrary",
          "name": "SDL_GL_GetProcAddress",
          "kind": "function",
          "type": "SDL_FunctionPointer",
          "parameters": [
            {
              "name": "proc",
              "type": "const char *"
            }
          ]
        },
        "SDL_EGL_GetProcAddress": {
          "doc": "Get an EGL library function by name.\n\nIf an EGL library is loaded, this function allows applications to get entry\npoints for EGL functions. This is useful to provide to an EGL API and\nextension loader.\n\n\\param proc the name of an EGL function.\n\\returns a pointer to the named EGL function. The returned pointer should\n         be cast to the appropriate function signature.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_EGL_GetCurrentDisplay",
          "name": "SDL_EGL_GetProcAddress",
          "kind": "function",
          "type": "SDL_FunctionPointer",
          "parameters": [
            {
              "name": "proc",
              "type": "const char *"
            }
          ]
        },
        "SDL_GL_UnloadLibrary": {
          "doc": "Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_LoadLibrary",
          "name": "SDL_GL_UnloadLibrary",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_GL_ExtensionSupported": {
          "doc": "Check if an OpenGL extension is supported for the current context.\n\nThis function operates on the current GL context; you must have created a\ncontext and it must be current before calling this function. Do not assume\nthat all contexts you create will have the same set of extensions\navailable, or that recreating an existing context will offer the same\nextensions again.\n\nWhile it's probably not a massive overhead, this function is not an O(1)\noperation. Check the extensions you care about after creating the GL\ncontext and save that information somewhere instead of calling the function\nevery time you need to know.\n\n\\param extension the name of the extension to check.\n\\returns true if the extension is supported, false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GL_ExtensionSupported",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "extension",
              "type": "const char *"
            }
          ]
        },
        "SDL_GL_ResetAttributes": {
          "doc": "Reset all previously set OpenGL context attributes to their default values.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetAttribute\n\\sa SDL_GL_SetAttribute",
          "name": "SDL_GL_ResetAttributes",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_GL_SetAttribute": {
          "doc": "Set an OpenGL window attribute before window creation.\n\nThis function sets the OpenGL attribute `attr` to `value`. The requested\nattributes should be set before creating an OpenGL window. You should use\nSDL_GL_GetAttribute() to check the values after creating the OpenGL\ncontext, since the values obtained can differ from the requested ones.\n\n\\param attr an SDL_GLAttr enum value specifying the OpenGL attribute to\n            set.\n\\param value the desired value for the attribute.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetAttribute\n\\sa SDL_GL_ResetAttributes",
          "name": "SDL_GL_SetAttribute",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "attr",
              "type": "SDL_GLAttr"
            },
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "SDL_GL_GetAttribute": {
          "doc": "Get the actual value for an attribute from the current context.\n\n\\param attr an SDL_GLAttr enum value specifying the OpenGL attribute to\n            get.\n\\param value a pointer filled in with the current value of `attr`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_ResetAttributes\n\\sa SDL_GL_SetAttribute",
          "name": "SDL_GL_GetAttribute",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "attr",
              "type": "SDL_GLAttr"
            },
            {
              "name": "value",
              "type": "int *"
            }
          ]
        },
        "SDL_GL_CreateContext": {
          "doc": "Create an OpenGL context for an OpenGL window, and make it current.\n\nWindows users new to OpenGL should note that, for historical reasons, GL\nfunctions added after OpenGL version 1.1 are not available by default.\nThose functions must be loaded at run-time, either with an OpenGL\nextension-handling library or with SDL_GL_GetProcAddress() and its related\nfunctions.\n\nSDL_GLContext is opaque to the application.\n\n\\param window the window to associate with the context.\n\\returns the OpenGL context associated with `window` or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_DestroyContext\n\\sa SDL_GL_MakeCurrent",
          "name": "SDL_GL_CreateContext",
          "kind": "function",
          "type": "SDL_GLContext",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GL_MakeCurrent": {
          "doc": "Set up an OpenGL context for rendering into an OpenGL window.\n\nThe context must have been created with a compatible window.\n\n\\param window the window to associate with the context.\n\\param context the OpenGL context to associate with the window.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_CreateContext",
          "name": "SDL_GL_MakeCurrent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "context",
              "type": "SDL_GLContext"
            }
          ]
        },
        "SDL_GL_GetCurrentWindow": {
          "doc": "Get the currently active OpenGL window.\n\n\\returns the currently active OpenGL window on success or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GL_GetCurrentWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": []
        },
        "SDL_GL_GetCurrentContext": {
          "doc": "Get the currently active OpenGL context.\n\n\\returns the currently active OpenGL context or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_MakeCurrent",
          "name": "SDL_GL_GetCurrentContext",
          "kind": "function",
          "type": "SDL_GLContext",
          "parameters": []
        },
        "SDL_EGL_GetCurrentDisplay": {
          "doc": "Get the currently active EGL display.\n\n\\returns the currently active EGL display or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_GetCurrentDisplay",
          "kind": "function",
          "type": "SDL_EGLDisplay",
          "parameters": []
        },
        "SDL_EGL_GetCurrentConfig": {
          "doc": "Get the currently active EGL config.\n\n\\returns the currently active EGL config or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_GetCurrentConfig",
          "kind": "function",
          "type": "SDL_EGLConfig",
          "parameters": []
        },
        "SDL_EGL_GetWindowSurface": {
          "doc": "Get the EGL surface associated with the window.\n\n\\param window the window to query.\n\\returns the EGLSurface pointer associated with the window, or NULL on\n         failure.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_GetWindowSurface",
          "kind": "function",
          "type": "SDL_EGLSurface",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_EGL_SetAttributeCallbacks": {
          "doc": "Sets the callbacks for defining custom EGLAttrib arrays for EGL\ninitialization.\n\nCallbacks that aren't needed can be set to NULL.\n\nNOTE: These callback pointers will be reset after SDL_GL_ResetAttributes.\n\n\\param platformAttribCallback callback for attributes to pass to\n                              eglGetPlatformDisplay. May be NULL.\n\\param surfaceAttribCallback callback for attributes to pass to\n                             eglCreateSurface. May be NULL.\n\\param contextAttribCallback callback for attributes to pass to\n                             eglCreateContext. May be NULL.\n\\param userdata a pointer that is passed to the callbacks.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_SetAttributeCallbacks",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "platformAttribCallback",
              "type": "SDL_EGLAttribArrayCallback"
            },
            {
              "name": "surfaceAttribCallback",
              "type": "SDL_EGLIntArrayCallback"
            },
            {
              "name": "contextAttribCallback",
              "type": "SDL_EGLIntArrayCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_GL_SetSwapInterval": {
          "doc": "Set the swap interval for the current OpenGL context.\n\nSome systems allow specifying -1 for the interval, to enable adaptive\nvsync. Adaptive vsync works the same as vsync, but if you've already missed\nthe vertical retrace for a given frame, it swaps buffers immediately, which\nmight be less jarring for the user during occasional framerate drops. If an\napplication requests adaptive vsync and the system does not support it,\nthis function will fail and return false. In such a case, you should\nprobably retry the call with 1 for the interval.\n\nAdaptive vsync is implemented for some glX drivers with\nGLX_EXT_swap_control_tear, and for some Windows drivers with\nWGL_EXT_swap_control_tear.\n\nRead more on the Khronos wiki:\nhttps://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync\n\n\\param interval 0 for immediate updates, 1 for updates synchronized with\n                the vertical retrace, -1 for adaptive vsync.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetSwapInterval",
          "name": "SDL_GL_SetSwapInterval",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "interval",
              "type": "int"
            }
          ]
        },
        "SDL_GL_GetSwapInterval": {
          "doc": "Get the swap interval for the current OpenGL context.\n\nIf the system can't determine the swap interval, or there isn't a valid\ncurrent context, this function will set *interval to 0 as a safe default.\n\n\\param interval output interval value. 0 if there is no vertical retrace\n                synchronization, 1 if the buffer swap is synchronized with\n                the vertical retrace, and -1 if late swaps happen\n                immediately instead of waiting for the next retrace.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_SetSwapInterval",
          "name": "SDL_GL_GetSwapInterval",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "interval",
              "type": "int *"
            }
          ]
        },
        "SDL_GL_SwapWindow": {
          "doc": "Update a window with OpenGL rendering.\n\nThis is used with double-buffered OpenGL contexts, which are the default.\n\nOn macOS, make sure you bind 0 to the draw framebuffer before swapping the\nwindow, otherwise nothing will happen. If you aren't using\nglBindFramebuffer(), this is the default and you won't have to do anything\nextra.\n\n\\param window the window to change.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GL_SwapWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GL_DestroyContext": {
          "doc": "Delete an OpenGL context.\n\n\\param context the OpenGL context to be deleted.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_CreateContext",
          "name": "SDL_GL_DestroyContext",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_GLContext"
            }
          ]
        }
      }
    },
    "SDL_render.h": {
      "name": "SDL_render.h",
      "doc": "# CategoryRender\n\nHeader file for SDL 2D rendering functions.\n\nThis API supports the following features:\n\n- single pixel points\n- single pixel lines\n- filled rectangles\n- texture images\n- 2D polygons\n\nThe primitives may be drawn in opaque, blended, or additive modes.\n\nThe texture images may be drawn in opaque, blended, or additive modes. They\ncan have an additional color tint or alpha modulation applied to them, and\nmay also be stretched with linear interpolation.\n\nThis API is designed to accelerate simple 2D operations. You may want more\nfunctionality such as polygons and particle effects and in that case you\nshould use SDL's OpenGL/Direct3D support, the SDL3 GPU API, or one of the\nmany good 3D engines.\n\nThese functions must be called from the main thread. See this bug for\ndetails: https://github.com/libsdl-org/SDL/issues/986",
      "entries": {
        "SDL_SOFTWARE_RENDERER": {
          "doc": "The name of the software renderer.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SOFTWARE_RENDERER",
          "kind": "def",
          "value": "\"software\""
        },
        "SDL_Vertex": {
          "doc": "Vertex structure.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Vertex",
          "kind": "struct",
          "entries": {
            "position": {
              "doc": "Vertex position, in SDL_Renderer coordinates",
              "name": "position",
              "kind": "var",
              "type": "SDL_FPoint"
            },
            "color": {
              "doc": "Vertex color",
              "name": "color",
              "kind": "var",
              "type": "SDL_FColor"
            },
            "tex_coord": {
              "doc": "Normalized texture coordinates, if needed",
              "name": "tex_coord",
              "kind": "var",
              "type": "SDL_FPoint"
            }
          }
        },
        "SDL_TextureAccess": {
          "doc": "The access pattern allowed for a texture.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_TextureAccess",
          "kind": "enum",
          "entries": {
            "SDL_TEXTUREACCESS_STATIC": {
              "doc": "Changes rarely, not lockable.",
              "name": "SDL_TEXTUREACCESS_STATIC",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTUREACCESS_STREAMING": {
              "doc": "Changes frequently, lockable.",
              "name": "SDL_TEXTUREACCESS_STREAMING",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTUREACCESS_TARGET": {
              "doc": "Texture can be used as a render target.",
              "name": "SDL_TEXTUREACCESS_TARGET",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_RendererLogicalPresentation": {
          "doc": "How the logical size is mapped to the output.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_RendererLogicalPresentation",
          "kind": "enum",
          "entries": {
            "SDL_LOGICAL_PRESENTATION_DISABLED": {
              "doc": "There is no logical size in effect.",
              "name": "SDL_LOGICAL_PRESENTATION_DISABLED",
              "kind": "var",
              "type": ""
            },
            "SDL_LOGICAL_PRESENTATION_STRETCH": {
              "doc": "The rendered content is stretched to the output resolution.",
              "name": "SDL_LOGICAL_PRESENTATION_STRETCH",
              "kind": "var",
              "type": ""
            },
            "SDL_LOGICAL_PRESENTATION_LETTERBOX": {
              "doc": "The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars.",
              "name": "SDL_LOGICAL_PRESENTATION_LETTERBOX",
              "kind": "var",
              "type": ""
            },
            "SDL_LOGICAL_PRESENTATION_OVERSCAN": {
              "doc": "The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds.",
              "name": "SDL_LOGICAL_PRESENTATION_OVERSCAN",
              "kind": "var",
              "type": ""
            },
            "SDL_LOGICAL_PRESENTATION_INTEGER_SCALE": {
              "doc": "The rendered content is scaled up by integer multiples to fit the output resolution.",
              "name": "SDL_LOGICAL_PRESENTATION_INTEGER_SCALE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_Renderer": {
          "doc": "A structure representing rendering state\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Renderer",
          "kind": "alias",
          "type": "struct SDL_Renderer"
        },
        "SDL_Texture": {
          "doc": "An efficient driver-specific representation of pixel data\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureFromSurface\n\\sa SDL_CreateTextureWithProperties\n\\sa SDL_DestroyTexture",
          "name": "SDL_Texture",
          "kind": "struct",
          "entries": {
            "format": {
              "doc": "The format of the texture, read-only",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "w": {
              "doc": "The width of the texture, read-only.",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "The height of the texture, read-only.",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "refcount": {
              "doc": "Application reference count, used when freeing texture",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_GetNumRenderDrivers": {
          "doc": "Get the number of 2D rendering drivers available for the current display.\n\nA render driver is a set of code that handles rendering and texture\nmanagement on a particular display. Normally there is only one, but some\ndrivers may have several available with different capabilities.\n\nThere may be none if SDL was compiled without render support.\n\n\\returns the number of built in render drivers.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_GetRenderDriver",
          "name": "SDL_GetNumRenderDrivers",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetRenderDriver": {
          "doc": "Use this function to get the name of a built in 2D rendering driver.\n\nThe list of rendering drivers is given in the order that they are normally\ninitialized by default; the drivers that seem more reasonable to choose\nfirst (as far as the SDL developers believe) are earlier in the list.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"opengl\",\n\"direct3d12\" or \"metal\". These never have Unicode characters, and are not\nmeant to be proper names.\n\n\\param index the index of the rendering driver; the value ranges from 0 to\n             SDL_GetNumRenderDrivers() - 1.\n\\returns the name of the rendering driver at the requested index, or NULL\n         if an invalid index was specified.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumRenderDrivers",
          "name": "SDL_GetRenderDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "index",
              "type": "int"
            }
          ]
        },
        "SDL_CreateWindowAndRenderer": {
          "doc": "Create a window and default renderer.\n\n\\param title the title of the window, in UTF-8 encoding.\n\\param width the width of the window.\n\\param height the height of the window.\n\\param window_flags the flags used to create the window (see\n                    SDL_CreateWindow()).\n\\param window a pointer filled with the window, or NULL on error.\n\\param renderer a pointer filled with the renderer, or NULL on error.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_CreateWindow",
          "name": "SDL_CreateWindowAndRenderer",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "title",
              "type": "const char *"
            },
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "window_flags",
              "type": "SDL_WindowFlags"
            },
            {
              "name": "window",
              "type": "SDL_Window **"
            },
            {
              "name": "renderer",
              "type": "SDL_Renderer **"
            }
          ]
        },
        "SDL_CreateRenderer": {
          "doc": "Create a 2D rendering context for a window.\n\nIf you want a specific renderer, you can specify its name here. A list of\navailable renderers can be obtained by calling SDL_GetRenderDriver()\nmultiple times, with indices from 0 to SDL_GetNumRenderDrivers()-1. If you\ndon't need a specific renderer, specify NULL and SDL will attempt to choose\nthe best option for you, based on what is available on the user's system.\n\nIf `name` is a comma-separated list, SDL will try each name, in the order\nlisted, until one succeeds or all of them fail.\n\nBy default the rendering size matches the window size in pixels, but you\ncan call SDL_SetRenderLogicalPresentation() to change the content size and\nscaling options.\n\n\\param window the window where rendering is displayed.\n\\param name the name of the rendering driver to initialize, or NULL to let\n            SDL choose one.\n\\returns a valid rendering context or NULL if there was an error; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRendererWithProperties\n\\sa SDL_CreateSoftwareRenderer\n\\sa SDL_DestroyRenderer\n\\sa SDL_GetNumRenderDrivers\n\\sa SDL_GetRenderDriver\n\\sa SDL_GetRendererName",
          "name": "SDL_CreateRenderer",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_CreateRendererWithProperties": {
          "doc": "Create a 2D rendering context for a window, with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_RENDERER_CREATE_NAME_STRING`: the name of the rendering driver\n  to use, if a specific one is desired\n- `SDL_PROP_RENDERER_CREATE_WINDOW_POINTER`: the window where rendering is\n  displayed, required if this isn't a software renderer using a surface\n- `SDL_PROP_RENDERER_CREATE_SURFACE_POINTER`: the surface where rendering\n  is displayed, if you want a software renderer without a window\n- `SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER`: an SDL_Colorspace\n  value describing the colorspace for output to the display, defaults to\n  SDL_COLORSPACE_SRGB. The direct3d11, direct3d12, and metal renderers\n  support SDL_COLORSPACE_SRGB_LINEAR, which is a linear color space and\n  supports HDR output. If you select SDL_COLORSPACE_SRGB_LINEAR, drawing\n  still uses the sRGB colorspace, but values can go beyond 1.0 and float\n  (linear) format textures can be used for HDR content.\n- `SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER`: non-zero if you want\n  present synchronized with the refresh rate. This property can take any\n  value that is supported by SDL_SetRenderVSync() for the renderer.\n\nWith the vulkan renderer:\n\n- `SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER`: the VkInstance to use\n  with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR to use\n  with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER`: the\n  VkPhysicalDevice to use with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER`: the VkDevice to use\n  with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the\n  queue family index used for rendering.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the\n  queue family index used for presentation.\n\n\\param props the properties to use.\n\\returns a valid rendering context or NULL if there was an error; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties\n\\sa SDL_CreateRenderer\n\\sa SDL_CreateSoftwareRenderer\n\\sa SDL_DestroyRenderer\n\\sa SDL_GetRendererName",
          "name": "SDL_CreateRendererWithProperties",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_RENDERER_CREATE_NAME_STRING": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_NAME_STRING",
          "kind": "def",
          "value": "\"SDL.renderer.create.name\""
        },
        "SDL_PROP_RENDERER_CREATE_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.create.window\""
        },
        "SDL_PROP_RENDERER_CREATE_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.create.surface\""
        },
        "SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.create.output_colorspace\""
        },
        "SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.create.present_vsync\""
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.create.vulkan.instance\""
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.create.vulkan.surface\""
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.create.vulkan.physical_device\""
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.create.vulkan.device\""
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.create.vulkan.graphics_queue_family_index\""
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.create.vulkan.present_queue_family_index\""
        },
        "SDL_CreateSoftwareRenderer": {
          "doc": "Create a 2D software rendering context for a surface.\n\nTwo other API which can be used to create SDL_Renderer:\nSDL_CreateRenderer() and SDL_CreateWindowAndRenderer(). These can _also_\ncreate a software renderer, but they are intended to be used with an\nSDL_Window as the final destination and not an SDL_Surface.\n\n\\param surface the SDL_Surface structure representing the surface where\n               rendering is done.\n\\returns a valid rendering context or NULL if there was an error; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyRenderer",
          "name": "SDL_CreateSoftwareRenderer",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetRenderer": {
          "doc": "Get the renderer associated with a window.\n\n\\param window the window to query.\n\\returns the rendering context on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRenderer",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetRenderWindow": {
          "doc": "Get the window associated with a renderer.\n\n\\param renderer the renderer to query.\n\\returns the window on success or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRenderWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRendererName": {
          "doc": "Get the name of a renderer.\n\n\\param renderer the rendering context.\n\\returns the name of the selected renderer, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_CreateRendererWithProperties",
          "name": "SDL_GetRendererName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRendererProperties": {
          "doc": "Get the properties associated with a renderer.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_RENDERER_NAME_STRING`: the name of the rendering driver\n- `SDL_PROP_RENDERER_WINDOW_POINTER`: the window where rendering is\n  displayed, if any\n- `SDL_PROP_RENDERER_SURFACE_POINTER`: the surface where rendering is\n  displayed, if this is a software renderer without a window\n- `SDL_PROP_RENDERER_VSYNC_NUMBER`: the current vsync setting\n- `SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER`: the maximum texture width\n  and height\n- `SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER`: a (const SDL_PixelFormat *)\n  array of pixel formats, terminated with SDL_PIXELFORMAT_UNKNOWN,\n  representing the available texture formats for this renderer.\n- `SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER`: an SDL_Colorspace value\n  describing the colorspace for output to the display, defaults to\n  SDL_COLORSPACE_SRGB.\n- `SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN`: true if the output colorspace is\n  SDL_COLORSPACE_SRGB_LINEAR and the renderer is showing on a display with\n  HDR enabled. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT`: the value of SDR white in the\n  SDL_COLORSPACE_SRGB_LINEAR colorspace. When HDR is enabled, this value is\n  automatically multiplied into the color scale. This property can change\n  dynamically when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT`: the additional high dynamic range\n  that can be displayed, in terms of the SDR white point. When HDR is not\n  enabled, this will be 1.0. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n\nWith the direct3d renderer:\n\n- `SDL_PROP_RENDERER_D3D9_DEVICE_POINTER`: the IDirect3DDevice9 associated\n  with the renderer\n\nWith the direct3d11 renderer:\n\n- `SDL_PROP_RENDERER_D3D11_DEVICE_POINTER`: the ID3D11Device associated\n  with the renderer\n- `SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER`: the IDXGISwapChain1\n  associated with the renderer. This may change when the window is resized.\n\nWith the direct3d12 renderer:\n\n- `SDL_PROP_RENDERER_D3D12_DEVICE_POINTER`: the ID3D12Device associated\n  with the renderer\n- `SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER`: the IDXGISwapChain4\n  associated with the renderer.\n- `SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER`: the ID3D12CommandQueue\n  associated with the renderer\n\nWith the vulkan renderer:\n\n- `SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER`: the VkInstance associated\n  with the renderer\n- `SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR associated\n  with the renderer\n- `SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER`: the VkPhysicalDevice\n  associated with the renderer\n- `SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER`: the VkDevice associated with\n  the renderer\n- `SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the queue\n  family index used for rendering\n- `SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the queue\n  family index used for presentation\n- `SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER`: the number of\n  swapchain images, or potential frames in flight, used by the Vulkan\n  renderer\n\nWith the gpu renderer:\n\n- `SDL_PROP_RENDERER_GPU_DEVICE_POINTER`: the SDL_GPUDevice associated with\n  the renderer\n\n\\param renderer the rendering context.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRendererProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_PROP_RENDERER_NAME_STRING": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_NAME_STRING",
          "kind": "def",
          "value": "\"SDL.renderer.name\""
        },
        "SDL_PROP_RENDERER_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.window\""
        },
        "SDL_PROP_RENDERER_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_SURFACE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.surface\""
        },
        "SDL_PROP_RENDERER_VSYNC_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VSYNC_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.vsync\""
        },
        "SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.max_texture_size\""
        },
        "SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.texture_formats\""
        },
        "SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.output_colorspace\""
        },
        "SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.renderer.HDR_enabled\""
        },
        "SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT",
          "kind": "def",
          "value": "\"SDL.renderer.SDR_white_point\""
        },
        "SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT",
          "kind": "def",
          "value": "\"SDL.renderer.HDR_headroom\""
        },
        "SDL_PROP_RENDERER_D3D9_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D9_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.d3d9.device\""
        },
        "SDL_PROP_RENDERER_D3D11_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D11_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.d3d11.device\""
        },
        "SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.d3d11.swap_chain\""
        },
        "SDL_PROP_RENDERER_D3D12_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D12_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.d3d12.device\""
        },
        "SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.d3d12.swap_chain\""
        },
        "SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.d3d12.command_queue\""
        },
        "SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.instance\""
        },
        "SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.surface\""
        },
        "SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.physical_device\""
        },
        "SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.device\""
        },
        "SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.graphics_queue_family_index\""
        },
        "SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.present_queue_family_index\""
        },
        "SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER",
          "kind": "def",
          "value": "\"SDL.renderer.vulkan.swapchain_image_count\""
        },
        "SDL_PROP_RENDERER_GPU_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_GPU_DEVICE_POINTER",
          "kind": "def",
          "value": "\"SDL.renderer.gpu.device\""
        },
        "SDL_GetRenderOutputSize": {
          "doc": "Get the output size in pixels of a rendering context.\n\nThis returns the true output size in pixels, ignoring any render targets or\nlogical size and presentation.\n\nFor the output size of the current rendering target, with logical size\nadjustments, use SDL_GetCurrentRenderOutputSize() instead.\n\n\\param renderer the rendering context.\n\\param w a pointer filled in with the width in pixels.\n\\param h a pointer filled in with the height in pixels.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetCurrentRenderOutputSize",
          "name": "SDL_GetRenderOutputSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_GetCurrentRenderOutputSize": {
          "doc": "Get the current output size in pixels of a rendering context.\n\nIf a rendering target is active, this will return the size of the rendering\ntarget in pixels, otherwise return the value of SDL_GetRenderOutputSize().\n\nRendering target or not, the output will be adjusted by the current logical\npresentation state, dictated by SDL_SetRenderLogicalPresentation().\n\n\\param renderer the rendering context.\n\\param w a pointer filled in with the current width.\n\\param h a pointer filled in with the current height.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderOutputSize",
          "name": "SDL_GetCurrentRenderOutputSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_CreateTexture": {
          "doc": "Create a texture for a rendering context.\n\nThe contents of a texture when first created are not defined.\n\n\\param renderer the rendering context.\n\\param format one of the enumerated values in SDL_PixelFormat.\n\\param access one of the enumerated values in SDL_TextureAccess.\n\\param w the width of the texture in pixels.\n\\param h the height of the texture in pixels.\n\\returns the created texture or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTextureFromSurface\n\\sa SDL_CreateTextureWithProperties\n\\sa SDL_DestroyTexture\n\\sa SDL_GetTextureSize\n\\sa SDL_UpdateTexture",
          "name": "SDL_CreateTexture",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "access",
              "type": "SDL_TextureAccess"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            }
          ]
        },
        "SDL_CreateTextureFromSurface": {
          "doc": "Create a texture from an existing surface.\n\nThe surface is not modified or freed by this function.\n\nThe SDL_TextureAccess hint for the created texture is\n`SDL_TEXTUREACCESS_STATIC`.\n\nThe pixel format of the created texture may be different from the pixel\nformat of the surface, and can be queried using the\nSDL_PROP_TEXTURE_FORMAT_NUMBER property.\n\n\\param renderer the rendering context.\n\\param surface the SDL_Surface structure containing pixel data used to fill\n               the texture.\n\\returns the created texture or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureWithProperties\n\\sa SDL_DestroyTexture",
          "name": "SDL_CreateTextureFromSurface",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_CreateTextureWithProperties": {
          "doc": "Create a texture for a rendering context with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER`: an SDL_Colorspace value\n  describing the texture colorspace, defaults to SDL_COLORSPACE_SRGB_LINEAR\n  for floating point textures, SDL_COLORSPACE_HDR10 for 10-bit textures,\n  SDL_COLORSPACE_SRGB for other RGB textures and SDL_COLORSPACE_JPEG for\n  YUV textures.\n- `SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER`: one of the enumerated values in\n  SDL_PixelFormat, defaults to the best RGBA format for the renderer\n- `SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER`: one of the enumerated values in\n  SDL_TextureAccess, defaults to SDL_TEXTUREACCESS_STATIC\n- `SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER`: the width of the texture in\n  pixels, required\n- `SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER`: the height of the texture in\n  pixels, required\n- `SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating\n  point textures, this defines the value of 100% diffuse white, with higher\n  values being displayed in the High Dynamic Range headroom. This defaults\n  to 100 for HDR10 textures and 1.0 for floating point textures.\n- `SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT`: for HDR10 and floating\n  point textures, this defines the maximum dynamic range used by the\n  content, in terms of the SDR white point. This would be equivalent to\n  maxCLL / SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT for HDR10 content.\n  If this is defined, any values outside the range supported by the display\n  will be scaled into the available HDR headroom, otherwise they are\n  clipped.\n\nWith the direct3d11 renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the direct3d12 renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER`: the ID3D12Resource\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the metal renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER`: the CVPixelBufferRef\n  associated with the texture, if you want to create a texture from an\n  existing pixel buffer.\n\nWith the opengl renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the opengles2 renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the vulkan renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER`: the VkImage with layout\n  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL associated with the texture, if\n  you want to wrap an existing texture.\n\n\\param renderer the rendering context.\n\\param props the properties to use.\n\\returns the created texture or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureFromSurface\n\\sa SDL_DestroyTexture\n\\sa SDL_GetTextureSize\n\\sa SDL_UpdateTexture",
          "name": "SDL_CreateTextureWithProperties",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.colorspace\""
        },
        "SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.format\""
        },
        "SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.access\""
        },
        "SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.width\""
        },
        "SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.height\""
        },
        "SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT",
          "kind": "def",
          "value": "\"SDL.texture.create.SDR_white_point\""
        },
        "SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT",
          "kind": "def",
          "value": "\"SDL.texture.create.HDR_headroom\""
        },
        "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.d3d11.texture\""
        },
        "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.d3d11.texture_u\""
        },
        "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.d3d11.texture_v\""
        },
        "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.d3d12.texture\""
        },
        "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.d3d12.texture_u\""
        },
        "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.d3d12.texture_v\""
        },
        "SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.create.metal.pixelbuffer\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengl.texture\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengl.texture_uv\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengl.texture_u\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengl.texture_v\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengles2.texture\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengles2.texture_uv\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengles2.texture_u\""
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.opengles2.texture_v\""
        },
        "SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.create.vulkan.texture\""
        },
        "SDL_GetTextureProperties": {
          "doc": "Get the properties associated with a texture.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_TEXTURE_COLORSPACE_NUMBER`: an SDL_Colorspace value describing\n  the texture colorspace.\n- `SDL_PROP_TEXTURE_FORMAT_NUMBER`: one of the enumerated values in\n  SDL_PixelFormat.\n- `SDL_PROP_TEXTURE_ACCESS_NUMBER`: one of the enumerated values in\n  SDL_TextureAccess.\n- `SDL_PROP_TEXTURE_WIDTH_NUMBER`: the width of the texture in pixels.\n- `SDL_PROP_TEXTURE_HEIGHT_NUMBER`: the height of the texture in pixels.\n- `SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point\n  textures, this defines the value of 100% diffuse white, with higher\n  values being displayed in the High Dynamic Range headroom. This defaults\n  to 100 for HDR10 textures and 1.0 for other textures.\n- `SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point\n  textures, this defines the maximum dynamic range used by the content, in\n  terms of the SDR white point. If this is defined, any values outside the\n  range supported by the display will be scaled into the available HDR\n  headroom, otherwise they are clipped. This defaults to 1.0 for SDR\n  textures, 4.0 for HDR10 textures, and no default for floating point\n  textures.\n\nWith the direct3d11 renderer:\n\n- `SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D associated\n  with the texture\n- `SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D\n  associated with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D\n  associated with the V plane of a YUV texture\n\nWith the direct3d12 renderer:\n\n- `SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER`: the ID3D12Resource associated\n  with the texture\n- `SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource associated\n  with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource associated\n  with the V plane of a YUV texture\n\nWith the vulkan renderer:\n\n- `SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER`: the VkImage associated with the\n  texture\n\nWith the opengl renderer:\n\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER`: the GLuint texture associated\n  with the texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture associated\n  with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture associated\n  with the V plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER`: the GLenum for the\n  texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_RECTANGLE_ARB`, etc)\n- `SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT`: the texture coordinate width of\n  the texture (0.0 - 1.0)\n- `SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT`: the texture coordinate height of\n  the texture (0.0 - 1.0)\n\nWith the opengles2 renderer:\n\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture\n  associated with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture\n  associated with the V plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER`: the GLenum for the\n  texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_EXTERNAL_OES`, etc)\n\n\\param texture the texture to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetTextureProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_PROP_TEXTURE_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_COLORSPACE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.colorspace\""
        },
        "SDL_PROP_TEXTURE_FORMAT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_FORMAT_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.format\""
        },
        "SDL_PROP_TEXTURE_ACCESS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_ACCESS_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.access\""
        },
        "SDL_PROP_TEXTURE_WIDTH_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_WIDTH_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.width\""
        },
        "SDL_PROP_TEXTURE_HEIGHT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_HEIGHT_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.height\""
        },
        "SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT",
          "kind": "def",
          "value": "\"SDL.texture.SDR_white_point\""
        },
        "SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT",
          "kind": "def",
          "value": "\"SDL.texture.HDR_headroom\""
        },
        "SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.d3d11.texture\""
        },
        "SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.d3d11.texture_u\""
        },
        "SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.d3d11.texture_v\""
        },
        "SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.d3d12.texture\""
        },
        "SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.d3d12.texture_u\""
        },
        "SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER",
          "kind": "def",
          "value": "\"SDL.texture.d3d12.texture_v\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengl.texture\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengl.texture_uv\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengl.texture_u\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengl.texture_v\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengl.target\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT",
          "kind": "def",
          "value": "\"SDL.texture.opengl.tex_w\""
        },
        "SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT",
          "kind": "def",
          "value": "\"SDL.texture.opengl.tex_h\""
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengles2.texture\""
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengles2.texture_uv\""
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengles2.texture_u\""
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengles2.texture_v\""
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.opengles2.target\""
        },
        "SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER",
          "kind": "def",
          "value": "\"SDL.texture.vulkan.texture\""
        },
        "SDL_GetRendererFromTexture": {
          "doc": "Get the renderer that created an SDL_Texture.\n\n\\param texture the texture to query.\n\\returns a pointer to the SDL_Renderer that created the texture, or NULL on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRendererFromTexture",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_GetTextureSize": {
          "doc": "Get the size of a texture, as floating point values.\n\n\\param texture the texture to query.\n\\param w a pointer filled in with the width of the texture in pixels. This\n         argument can be NULL if you don't need this information.\n\\param h a pointer filled in with the height of the texture in pixels. This\n         argument can be NULL if you don't need this information.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetTextureSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "w",
              "type": "float *"
            },
            {
              "name": "h",
              "type": "float *"
            }
          ]
        },
        "SDL_SetTextureColorMod": {
          "doc": "Set an additional color value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation each source color\nchannel is modulated by the appropriate color value according to the\nfollowing formula:\n\n`srcC = srcC * (color / 255)`\n\nColor modulation is not always supported by the renderer; it will return\nfalse if color modulation is not supported.\n\n\\param texture the texture to update.\n\\param r the red color value multiplied into copy operations.\n\\param g the green color value multiplied into copy operations.\n\\param b the blue color value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureColorMod\n\\sa SDL_SetTextureAlphaMod\n\\sa SDL_SetTextureColorModFloat",
          "name": "SDL_SetTextureColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_SetTextureColorModFloat": {
          "doc": "Set an additional color value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation each source color\nchannel is modulated by the appropriate color value according to the\nfollowing formula:\n\n`srcC = srcC * color`\n\nColor modulation is not always supported by the renderer; it will return\nfalse if color modulation is not supported.\n\n\\param texture the texture to update.\n\\param r the red color value multiplied into copy operations.\n\\param g the green color value multiplied into copy operations.\n\\param b the blue color value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureColorModFloat\n\\sa SDL_SetTextureAlphaModFloat\n\\sa SDL_SetTextureColorMod",
          "name": "SDL_SetTextureColorModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            }
          ]
        },
        "SDL_GetTextureColorMod": {
          "doc": "Get the additional color value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param r a pointer filled in with the current red color value.\n\\param g a pointer filled in with the current green color value.\n\\param b a pointer filled in with the current blue color value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaMod\n\\sa SDL_GetTextureColorModFloat\n\\sa SDL_SetTextureColorMod",
          "name": "SDL_GetTextureColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetTextureColorModFloat": {
          "doc": "Get the additional color value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param r a pointer filled in with the current red color value.\n\\param g a pointer filled in with the current green color value.\n\\param b a pointer filled in with the current blue color value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaModFloat\n\\sa SDL_GetTextureColorMod\n\\sa SDL_SetTextureColorModFloat",
          "name": "SDL_GetTextureColorModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            }
          ]
        },
        "SDL_SetTextureAlphaMod": {
          "doc": "Set an additional alpha value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation the source alpha\nvalue is modulated by this alpha value according to the following formula:\n\n`srcA = srcA * (alpha / 255)`\n\nAlpha modulation is not always supported by the renderer; it will return\nfalse if alpha modulation is not supported.\n\n\\param texture the texture to update.\n\\param alpha the source alpha value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaMod\n\\sa SDL_SetTextureAlphaModFloat\n\\sa SDL_SetTextureColorMod",
          "name": "SDL_SetTextureAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "Uint8"
            }
          ]
        },
        "SDL_SetTextureAlphaModFloat": {
          "doc": "Set an additional alpha value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation the source alpha\nvalue is modulated by this alpha value according to the following formula:\n\n`srcA = srcA * alpha`\n\nAlpha modulation is not always supported by the renderer; it will return\nfalse if alpha modulation is not supported.\n\n\\param texture the texture to update.\n\\param alpha the source alpha value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaModFloat\n\\sa SDL_SetTextureAlphaMod\n\\sa SDL_SetTextureColorModFloat",
          "name": "SDL_SetTextureAlphaModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "float"
            }
          ]
        },
        "SDL_GetTextureAlphaMod": {
          "doc": "Get the additional alpha value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param alpha a pointer filled in with the current alpha value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaModFloat\n\\sa SDL_GetTextureColorMod\n\\sa SDL_SetTextureAlphaMod",
          "name": "SDL_GetTextureAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetTextureAlphaModFloat": {
          "doc": "Get the additional alpha value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param alpha a pointer filled in with the current alpha value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaMod\n\\sa SDL_GetTextureColorModFloat\n\\sa SDL_SetTextureAlphaModFloat",
          "name": "SDL_GetTextureAlphaModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "float *"
            }
          ]
        },
        "SDL_SetTextureBlendMode": {
          "doc": "Set the blend mode for a texture, used by SDL_RenderTexture().\n\nIf the blend mode is not supported, the closest supported mode is chosen\nand this function returns false.\n\n\\param texture the texture to update.\n\\param blendMode the SDL_BlendMode to use for texture blending.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureBlendMode",
          "name": "SDL_SetTextureBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode"
            }
          ]
        },
        "SDL_GetTextureBlendMode": {
          "doc": "Get the blend mode used for texture copy operations.\n\n\\param texture the texture to query.\n\\param blendMode a pointer filled in with the current SDL_BlendMode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextureBlendMode",
          "name": "SDL_GetTextureBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode *"
            }
          ]
        },
        "SDL_SetTextureScaleMode": {
          "doc": "Set the scale mode used for texture scale operations.\n\nThe default texture scale mode is SDL_SCALEMODE_LINEAR.\n\nIf the scale mode is not supported, the closest supported mode is chosen.\n\n\\param texture the texture to update.\n\\param scaleMode the SDL_ScaleMode to use for texture scaling.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureScaleMode",
          "name": "SDL_SetTextureScaleMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_GetTextureScaleMode": {
          "doc": "Get the scale mode used for texture scale operations.\n\n\\param texture the texture to query.\n\\param scaleMode a pointer filled in with the current scale mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextureScaleMode",
          "name": "SDL_GetTextureScaleMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode *"
            }
          ]
        },
        "SDL_UpdateTexture": {
          "doc": "Update the given texture rectangle with new pixel data.\n\nThe pixel data must be in the pixel format of the texture, which can be\nqueried using the SDL_PROP_TEXTURE_FORMAT_NUMBER property.\n\nThis is a fairly slow function, intended for use with static textures that\ndo not change often.\n\nIf the texture is intended to be updated often, it is preferred to create\nthe texture as streaming and use the locking functions referenced below.\nWhile this function will work with streaming textures, for optimization\nreasons you may not get the pixels back if you lock the texture afterward.\n\n\\param texture the texture to update.\n\\param rect an SDL_Rect structure representing the area to update, or NULL\n            to update the entire texture.\n\\param pixels the raw pixel data in the format of the texture.\n\\param pitch the number of bytes in a row of pixel data, including padding\n             between lines.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTexture\n\\sa SDL_UnlockTexture\n\\sa SDL_UpdateNVTexture\n\\sa SDL_UpdateYUVTexture",
          "name": "SDL_UpdateTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "pixels",
              "type": "const void *"
            },
            {
              "name": "pitch",
              "type": "int"
            }
          ]
        },
        "SDL_UpdateYUVTexture": {
          "doc": "Update a rectangle within a planar YV12 or IYUV texture with new pixel\ndata.\n\nYou can use SDL_UpdateTexture() as long as your pixel data is a contiguous\nblock of Y and U/V planes in the proper order, but this function is\navailable if your pixel data is not contiguous.\n\n\\param texture the texture to update.\n\\param rect a pointer to the rectangle of pixels to update, or NULL to\n            update the entire texture.\n\\param Yplane the raw pixel data for the Y plane.\n\\param Ypitch the number of bytes between rows of pixel data for the Y\n              plane.\n\\param Uplane the raw pixel data for the U plane.\n\\param Upitch the number of bytes between rows of pixel data for the U\n              plane.\n\\param Vplane the raw pixel data for the V plane.\n\\param Vpitch the number of bytes between rows of pixel data for the V\n              plane.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UpdateNVTexture\n\\sa SDL_UpdateTexture",
          "name": "SDL_UpdateYUVTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "Yplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Ypitch",
              "type": "int"
            },
            {
              "name": "Uplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Upitch",
              "type": "int"
            },
            {
              "name": "Vplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Vpitch",
              "type": "int"
            }
          ]
        },
        "SDL_UpdateNVTexture": {
          "doc": "Update a rectangle within a planar NV12 or NV21 texture with new pixels.\n\nYou can use SDL_UpdateTexture() as long as your pixel data is a contiguous\nblock of NV12/21 planes in the proper order, but this function is available\nif your pixel data is not contiguous.\n\n\\param texture the texture to update.\n\\param rect a pointer to the rectangle of pixels to update, or NULL to\n            update the entire texture.\n\\param Yplane the raw pixel data for the Y plane.\n\\param Ypitch the number of bytes between rows of pixel data for the Y\n              plane.\n\\param UVplane the raw pixel data for the UV plane.\n\\param UVpitch the number of bytes between rows of pixel data for the UV\n               plane.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UpdateTexture\n\\sa SDL_UpdateYUVTexture",
          "name": "SDL_UpdateNVTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "Yplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Ypitch",
              "type": "int"
            },
            {
              "name": "UVplane",
              "type": "const Uint8 *"
            },
            {
              "name": "UVpitch",
              "type": "int"
            }
          ]
        },
        "SDL_LockTexture": {
          "doc": "Lock a portion of the texture for **write-only** pixel access.\n\nAs an optimization, the pixels made available for editing don't necessarily\ncontain the old texture data. This is a write-only operation, and if you\nneed to keep a copy of the texture data you should do that at the\napplication level.\n\nYou must use SDL_UnlockTexture() to unlock the pixels and apply any\nchanges.\n\n\\param texture the texture to lock for access, which was created with\n               `SDL_TEXTUREACCESS_STREAMING`.\n\\param rect an SDL_Rect structure representing the area to lock for access;\n            NULL to lock the entire texture.\n\\param pixels this is filled in with a pointer to the locked pixels,\n              appropriately offset by the locked area.\n\\param pitch this is filled in with the pitch of the locked pixels; the\n             pitch is the length of one row in bytes.\n\\returns true on success or false if the texture is not valid or was not\n         created with `SDL_TEXTUREACCESS_STREAMING`; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTextureToSurface\n\\sa SDL_UnlockTexture",
          "name": "SDL_LockTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "pixels",
              "type": "void **"
            },
            {
              "name": "pitch",
              "type": "int *"
            }
          ]
        },
        "SDL_LockTextureToSurface": {
          "doc": "Lock a portion of the texture for **write-only** pixel access, and expose\nit as a SDL surface.\n\nBesides providing an SDL_Surface instead of raw pixel data, this function\noperates like SDL_LockTexture.\n\nAs an optimization, the pixels made available for editing don't necessarily\ncontain the old texture data. This is a write-only operation, and if you\nneed to keep a copy of the texture data you should do that at the\napplication level.\n\nYou must use SDL_UnlockTexture() to unlock the pixels and apply any\nchanges.\n\nThe returned surface is freed internally after calling SDL_UnlockTexture()\nor SDL_DestroyTexture(). The caller should not free it.\n\n\\param texture the texture to lock for access, which must be created with\n               `SDL_TEXTUREACCESS_STREAMING`.\n\\param rect a pointer to the rectangle to lock for access. If the rect is\n            NULL, the entire texture will be locked.\n\\param surface a pointer to an SDL surface of size **rect**. Don't assume\n               any specific pixel content.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTexture\n\\sa SDL_UnlockTexture",
          "name": "SDL_LockTextureToSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "surface",
              "type": "SDL_Surface **"
            }
          ]
        },
        "SDL_UnlockTexture": {
          "doc": "Unlock a texture, uploading the changes to video memory, if needed.\n\n**Warning**: Please note that SDL_LockTexture() is intended to be\nwrite-only; it will not guarantee the previous contents of the texture will\nbe provided. You must fully initialize any area of a texture that you lock\nbefore unlocking it, as the pixels might otherwise be uninitialized memory.\n\nWhich is to say: locking and immediately unlocking a texture can result in\ncorrupted textures, depending on the renderer in use.\n\n\\param texture a texture locked by SDL_LockTexture().\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTexture",
          "name": "SDL_UnlockTexture",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_SetRenderTarget": {
          "doc": "Set a texture as the current rendering target.\n\nThe default render target is the window for which the renderer was created.\nTo stop rendering to a texture and render to the window again, call this\nfunction with a NULL `texture`.\n\nViewport, cliprect, scale, and logical presentation are unique to each\nrender target. Get and set functions for these states apply to the current\nrender target set by this function, and those states persist on each target\nwhen the current render target changes.\n\n\\param renderer the rendering context.\n\\param texture the targeted texture, which must be created with the\n               `SDL_TEXTUREACCESS_TARGET` flag, or NULL to render to the\n               window instead of a texture.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderTarget",
          "name": "SDL_SetRenderTarget",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_GetRenderTarget": {
          "doc": "Get the current render target.\n\nThe default render target is the window for which the renderer was created,\nand is reported a NULL here.\n\n\\param renderer the rendering context.\n\\returns the current render target or NULL for the default render target.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderTarget",
          "name": "SDL_GetRenderTarget",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_SetRenderLogicalPresentation": {
          "doc": "Set a device-independent resolution and presentation mode for rendering.\n\nThis function sets the width and height of the logical rendering output.\nThe renderer will act as if the current render target is always the\nrequested dimensions, scaling to the actual resolution as necessary.\n\nThis can be useful for games that expect a fixed size, but would like to\nscale the output to whatever is available, regardless of how a user resizes\na window, or if the display is high DPI.\n\nLogical presentation can be used with both render target textures and the\nrenderer's window; the state is unique to each render target, and this\nfunction sets the state for the current render target. It might be useful\nto draw to a texture that matches the window dimensions with logical\npresentation enabled, and then draw that texture across the entire window\nwith logical presentation disabled. Be careful not to render both with\nlogical presentation enabled, however, as this could produce\ndouble-letterboxing, etc.\n\nYou can disable logical coordinates by setting the mode to\nSDL_LOGICAL_PRESENTATION_DISABLED, and in that case you get the full pixel\nresolution of the render target; it is safe to toggle logical presentation\nduring the rendering of a frame: perhaps most of the rendering is done to\nspecific dimensions but to make fonts look sharp, the app turns off logical\npresentation while drawing text, for example.\n\nFor the renderer's window, letterboxing is drawn into the framebuffer if\nlogical presentation is enabled during SDL_RenderPresent; be sure to\nreenable it before presenting if you were toggling it, otherwise the\nletterbox areas might have artifacts from previous frames (or artifacts\nfrom external overlays, etc). Letterboxing is never drawn into texture\nrender targets; be sure to call SDL_RenderClear() before drawing into the\ntexture so the letterboxing areas are cleared, if appropriate.\n\nYou can convert coordinates in an event into rendering coordinates using\nSDL_ConvertEventToRenderCoordinates().\n\n\\param renderer the rendering context.\n\\param w the width of the logical resolution.\n\\param h the height of the logical resolution.\n\\param mode the presentation mode used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertEventToRenderCoordinates\n\\sa SDL_GetRenderLogicalPresentation\n\\sa SDL_GetRenderLogicalPresentationRect",
          "name": "SDL_SetRenderLogicalPresentation",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "mode",
              "type": "SDL_RendererLogicalPresentation"
            }
          ]
        },
        "SDL_GetRenderLogicalPresentation": {
          "doc": "Get device independent resolution and presentation mode for rendering.\n\nThis function gets the width and height of the logical rendering output, or\nthe output size in pixels if a logical resolution is not enabled.\n\nEach render target has its own logical presentation state. This function\ngets the state for the current render target.\n\n\\param renderer the rendering context.\n\\param w an int to be filled with the width.\n\\param h an int to be filled with the height.\n\\param mode the presentation mode used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation",
          "name": "SDL_GetRenderLogicalPresentation",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            },
            {
              "name": "mode",
              "type": "SDL_RendererLogicalPresentation *"
            }
          ]
        },
        "SDL_GetRenderLogicalPresentationRect": {
          "doc": "Get the final presentation rectangle for rendering.\n\nThis function returns the calculated rectangle used for logical\npresentation, based on the presentation mode and output size. If logical\npresentation is disabled, it will fill the rectangle with the output size,\nin pixels.\n\nEach render target has its own logical presentation state. This function\ngets the rectangle for the current render target.\n\n\\param renderer the rendering context.\n\\param rect a pointer filled in with the final presentation rectangle, may\n            be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation",
          "name": "SDL_GetRenderLogicalPresentationRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_RenderCoordinatesFromWindow": {
          "doc": "Get a point in render coordinates when given a point in window coordinates.\n\nThis takes into account several states:\n\n- The window dimensions.\n- The logical presentation settings (SDL_SetRenderLogicalPresentation)\n- The scale (SDL_SetRenderScale)\n- The viewport (SDL_SetRenderViewport)\n\n\\param renderer the rendering context.\n\\param window_x the x coordinate in window coordinates.\n\\param window_y the y coordinate in window coordinates.\n\\param x a pointer filled with the x coordinate in render coordinates.\n\\param y a pointer filled with the y coordinate in render coordinates.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation\n\\sa SDL_SetRenderScale",
          "name": "SDL_RenderCoordinatesFromWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "window_x",
              "type": "float"
            },
            {
              "name": "window_y",
              "type": "float"
            },
            {
              "name": "x",
              "type": "float *"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_RenderCoordinatesToWindow": {
          "doc": "Get a point in window coordinates when given a point in render coordinates.\n\nThis takes into account several states:\n\n- The window dimensions.\n- The logical presentation settings (SDL_SetRenderLogicalPresentation)\n- The scale (SDL_SetRenderScale)\n- The viewport (SDL_SetRenderViewport)\n\n\\param renderer the rendering context.\n\\param x the x coordinate in render coordinates.\n\\param y the y coordinate in render coordinates.\n\\param window_x a pointer filled with the x coordinate in window\n                coordinates.\n\\param window_y a pointer filled with the y coordinate in window\n                coordinates.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation\n\\sa SDL_SetRenderScale\n\\sa SDL_SetRenderViewport",
          "name": "SDL_RenderCoordinatesToWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "window_x",
              "type": "float *"
            },
            {
              "name": "window_y",
              "type": "float *"
            }
          ]
        },
        "SDL_ConvertEventToRenderCoordinates": {
          "doc": "Convert the coordinates in an event to render coordinates.\n\nThis takes into account several states:\n\n- The window dimensions.\n- The logical presentation settings (SDL_SetRenderLogicalPresentation)\n- The scale (SDL_SetRenderScale)\n- The viewport (SDL_SetRenderViewport)\n\nVarious event types are converted with this function: mouse, touch, pen,\netc.\n\nTouch coordinates are converted from normalized coordinates in the window\nto non-normalized rendering coordinates.\n\nRelative mouse coordinates (xrel and yrel event fields) are _also_\nconverted. Applications that do not want these fields converted should use\nSDL_RenderCoordinatesFromWindow() on the specific event fields instead of\nconverting the entire event structure.\n\nOnce converted, coordinates may be outside the rendering area.\n\n\\param renderer the rendering context.\n\\param event the event to modify.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderCoordinatesFromWindow",
          "name": "SDL_ConvertEventToRenderCoordinates",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_SetRenderViewport": {
          "doc": "Set the drawing area for rendering on the current target.\n\nDrawing will clip to this area (separately from any clipping done with\nSDL_SetRenderClipRect), and the top left of the area will become coordinate\n(0, 0) for future drawing commands.\n\nThe area's width and height must be >= 0.\n\nEach render target has its own viewport. This function sets the viewport\nfor the current render target.\n\n\\param renderer the rendering context.\n\\param rect the SDL_Rect structure representing the drawing area, or NULL\n            to set the viewport to the entire target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderViewport\n\\sa SDL_RenderViewportSet",
          "name": "SDL_SetRenderViewport",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetRenderViewport": {
          "doc": "Get the drawing area for the current target.\n\nEach render target has its own viewport. This function gets the viewport\nfor the current render target.\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure filled in with the current drawing area.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderViewportSet\n\\sa SDL_SetRenderViewport",
          "name": "SDL_GetRenderViewport",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_RenderViewportSet": {
          "doc": "Return whether an explicit rectangle was set as the viewport.\n\nThis is useful if you're saving and restoring the viewport and want to know\nwhether you should restore a specific rectangle or NULL.\n\nEach render target has its own viewport. This function checks the viewport\nfor the current render target.\n\n\\param renderer the rendering context.\n\\returns true if the viewport was set to a specific rectangle, or false if\n         it was set to NULL (the entire target).\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderViewport\n\\sa SDL_SetRenderViewport",
          "name": "SDL_RenderViewportSet",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRenderSafeArea": {
          "doc": "Get the safe area for rendering within the current viewport.\n\nSome devices have portions of the screen which are partially obscured or\nnot interactive, possibly due to on-screen controls, curved edges, camera\nnotches, TV overscan, etc. This function provides the area of the current\nviewport which is safe to have interactible content. You should continue\nrendering into the rest of the render target, but it should not contain\nvisually important or interactible content.\n\n\\param renderer the rendering context.\n\\param rect a pointer filled in with the area that is safe for interactive\n            content.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRenderSafeArea",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_SetRenderClipRect": {
          "doc": "Set the clip rectangle for rendering on the specified target.\n\nEach render target has its own clip rectangle. This function sets the\ncliprect for the current render target.\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure representing the clip area, relative to\n            the viewport, or NULL to disable clipping.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderClipRect\n\\sa SDL_RenderClipEnabled",
          "name": "SDL_SetRenderClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetRenderClipRect": {
          "doc": "Get the clip rectangle for the current target.\n\nEach render target has its own clip rectangle. This function gets the\ncliprect for the current render target.\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure filled in with the current clipping area\n            or an empty rectangle if clipping is disabled.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderClipEnabled\n\\sa SDL_SetRenderClipRect",
          "name": "SDL_GetRenderClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_RenderClipEnabled": {
          "doc": "Get whether clipping is enabled on the given render target.\n\nEach render target has its own clip rectangle. This function checks the\ncliprect for the current render target.\n\n\\param renderer the rendering context.\n\\returns true if clipping is enabled or false if not; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderClipRect\n\\sa SDL_SetRenderClipRect",
          "name": "SDL_RenderClipEnabled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_SetRenderScale": {
          "doc": "Set the drawing scale for rendering on the current target.\n\nThe drawing coordinates are scaled by the x/y scaling factors before they\nare used by the renderer. This allows resolution independent drawing with a\nsingle coordinate system.\n\nIf this results in scaling or subpixel drawing by the rendering backend, it\nwill be handled using the appropriate quality hints. For best results use\ninteger scaling factors.\n\nEach render target has its own scale. This function sets the scale for the\ncurrent render target.\n\n\\param renderer the rendering context.\n\\param scaleX the horizontal scaling factor.\n\\param scaleY the vertical scaling factor.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderScale",
          "name": "SDL_SetRenderScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scaleX",
              "type": "float"
            },
            {
              "name": "scaleY",
              "type": "float"
            }
          ]
        },
        "SDL_GetRenderScale": {
          "doc": "Get the drawing scale for the current target.\n\nEach render target has its own scale. This function gets the scale for the\ncurrent render target.\n\n\\param renderer the rendering context.\n\\param scaleX a pointer filled in with the horizontal scaling factor.\n\\param scaleY a pointer filled in with the vertical scaling factor.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderScale",
          "name": "SDL_GetRenderScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scaleX",
              "type": "float *"
            },
            {
              "name": "scaleY",
              "type": "float *"
            }
          ]
        },
        "SDL_SetRenderDrawColor": {
          "doc": "Set the color used for drawing operations.\n\nSet the color for drawing or filling rectangles, lines, and points, and for\nSDL_RenderClear().\n\n\\param renderer the rendering context.\n\\param r the red value used to draw on the rendering target.\n\\param g the green value used to draw on the rendering target.\n\\param b the blue value used to draw on the rendering target.\n\\param a the alpha value used to draw on the rendering target; usually\n         `SDL_ALPHA_OPAQUE` (255). Use SDL_SetRenderDrawBlendMode to\n         specify how the alpha channel is used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawColor\n\\sa SDL_SetRenderDrawColorFloat",
          "name": "SDL_SetRenderDrawColor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_SetRenderDrawColorFloat": {
          "doc": "Set the color used for drawing operations (Rect, Line and Clear).\n\nSet the color for drawing or filling rectangles, lines, and points, and for\nSDL_RenderClear().\n\n\\param renderer the rendering context.\n\\param r the red value used to draw on the rendering target.\n\\param g the green value used to draw on the rendering target.\n\\param b the blue value used to draw on the rendering target.\n\\param a the alpha value used to draw on the rendering target. Use\n         SDL_SetRenderDrawBlendMode to specify how the alpha channel is\n         used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawColorFloat\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_SetRenderDrawColorFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        },
        "SDL_GetRenderDrawColor": {
          "doc": "Get the color used for drawing operations (Rect, Line and Clear).\n\n\\param renderer the rendering context.\n\\param r a pointer filled in with the red value used to draw on the\n         rendering target.\n\\param g a pointer filled in with the green value used to draw on the\n         rendering target.\n\\param b a pointer filled in with the blue value used to draw on the\n         rendering target.\n\\param a a pointer filled in with the alpha value used to draw on the\n         rendering target; usually `SDL_ALPHA_OPAQUE` (255).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawColorFloat\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_GetRenderDrawColor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetRenderDrawColorFloat": {
          "doc": "Get the color used for drawing operations (Rect, Line and Clear).\n\n\\param renderer the rendering context.\n\\param r a pointer filled in with the red value used to draw on the\n         rendering target.\n\\param g a pointer filled in with the green value used to draw on the\n         rendering target.\n\\param b a pointer filled in with the blue value used to draw on the\n         rendering target.\n\\param a a pointer filled in with the alpha value used to draw on the\n         rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawColorFloat\n\\sa SDL_GetRenderDrawColor",
          "name": "SDL_GetRenderDrawColorFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            },
            {
              "name": "a",
              "type": "float *"
            }
          ]
        },
        "SDL_SetRenderColorScale": {
          "doc": "Set the color scale used for render operations.\n\nThe color scale is an additional scale multiplied into the pixel color\nvalue while rendering. This can be used to adjust the brightness of colors\nduring HDR rendering, or changing HDR video brightness when playing on an\nSDR display.\n\nThe color scale does not affect the alpha channel, only the color\nbrightness.\n\n\\param renderer the rendering context.\n\\param scale the color scale value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderColorScale",
          "name": "SDL_SetRenderColorScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scale",
              "type": "float"
            }
          ]
        },
        "SDL_GetRenderColorScale": {
          "doc": "Get the color scale used for render operations.\n\n\\param renderer the rendering context.\n\\param scale a pointer filled in with the current color scale value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderColorScale",
          "name": "SDL_GetRenderColorScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scale",
              "type": "float *"
            }
          ]
        },
        "SDL_SetRenderDrawBlendMode": {
          "doc": "Set the blend mode used for drawing operations (Fill and Line).\n\nIf the blend mode is not supported, the closest supported mode is chosen.\n\n\\param renderer the rendering context.\n\\param blendMode the SDL_BlendMode to use for blending.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawBlendMode",
          "name": "SDL_SetRenderDrawBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode"
            }
          ]
        },
        "SDL_GetRenderDrawBlendMode": {
          "doc": "Get the blend mode used for drawing operations.\n\n\\param renderer the rendering context.\n\\param blendMode a pointer filled in with the current SDL_BlendMode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawBlendMode",
          "name": "SDL_GetRenderDrawBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode *"
            }
          ]
        },
        "SDL_RenderClear": {
          "doc": "Clear the current rendering target with the drawing color.\n\nThis function clears the entire rendering target, ignoring the viewport and\nthe clip rectangle. Note, that clearing will also set/fill all pixels of\nthe rendering target to current renderer draw color, so make sure to invoke\nSDL_SetRenderDrawColor() when needed.\n\n\\param renderer the rendering context.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_RenderClear",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_RenderPoint": {
          "doc": "Draw a point on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw a point.\n\\param x the x coordinate of the point.\n\\param y the y coordinate of the point.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderPoints",
          "name": "SDL_RenderPoint",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_RenderPoints": {
          "doc": "Draw multiple points on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw multiple points.\n\\param points the points to draw.\n\\param count the number of points to draw.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderPoint",
          "name": "SDL_RenderPoints",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "points",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderLine": {
          "doc": "Draw a line on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw a line.\n\\param x1 the x coordinate of the start point.\n\\param y1 the y coordinate of the start point.\n\\param x2 the x coordinate of the end point.\n\\param y2 the y coordinate of the end point.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderLines",
          "name": "SDL_RenderLine",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            }
          ]
        },
        "SDL_RenderLines": {
          "doc": "Draw a series of connected lines on the current rendering target at\nsubpixel precision.\n\n\\param renderer the renderer which should draw multiple lines.\n\\param points the points along the lines.\n\\param count the number of points, drawing count-1 lines.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderLine",
          "name": "SDL_RenderLines",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "points",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderRect": {
          "doc": "Draw a rectangle on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw a rectangle.\n\\param rect a pointer to the destination rectangle, or NULL to outline the\n            entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderRects",
          "name": "SDL_RenderRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderRects": {
          "doc": "Draw some number of rectangles on the current rendering target at subpixel\nprecision.\n\n\\param renderer the renderer which should draw multiple rectangles.\n\\param rects a pointer to an array of destination rectangles.\n\\param count the number of rectangles.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderRect",
          "name": "SDL_RenderRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rects",
              "type": "const SDL_FRect *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderFillRect": {
          "doc": "Fill a rectangle on the current rendering target with the drawing color at\nsubpixel precision.\n\n\\param renderer the renderer which should fill a rectangle.\n\\param rect a pointer to the destination rectangle, or NULL for the entire\n            rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderFillRects",
          "name": "SDL_RenderFillRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderFillRects": {
          "doc": "Fill some number of rectangles on the current rendering target with the\ndrawing color at subpixel precision.\n\n\\param renderer the renderer which should fill multiple rectangles.\n\\param rects a pointer to an array of destination rectangles.\n\\param count the number of rectangles.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderFillRect",
          "name": "SDL_RenderFillRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rects",
              "type": "const SDL_FRect *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderTexture": {
          "doc": "Copy a portion of the texture to the current rendering target at subpixel\nprecision.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTextureRotated\n\\sa SDL_RenderTextureTiled",
          "name": "SDL_RenderTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderTextureRotated": {
          "doc": "Copy a portion of the source texture to the current rendering target, with\nrotation and flipping, at subpixel precision.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\param angle an angle in degrees that indicates the rotation that will be\n             applied to dstrect, rotating it in a clockwise direction.\n\\param center a pointer to a point indicating the point around which\n              dstrect will be rotated (if NULL, rotation will be done\n              around dstrect.w/2, dstrect.h/2).\n\\param flip an SDL_FlipMode value stating which flipping actions should be\n            performed on the texture.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTextureRotated",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "angle",
              "type": "double"
            },
            {
              "name": "center",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "flip",
              "type": "SDL_FlipMode"
            }
          ]
        },
        "SDL_RenderTextureAffine": {
          "doc": "Copy a portion of the source texture to the current rendering target, with\naffine transform, at subpixel precision.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param origin a pointer to a point indicating where the top-left corner of\n              srcrect should be mapped to, or NULL for the rendering\n              target's origin.\n\\param right a pointer to a point indicating where the top-right corner of\n             srcrect should be mapped to, or NULL for the rendering\n             target's top-right corner.\n\\param down a pointer to a point indicating where the bottom-left corner of\n            srcrect should be mapped to, or NULL for the rendering target's\n            bottom-left corner.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety You may only call this function from the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTextureAffine",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "origin",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "right",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "down",
              "type": "const SDL_FPoint *"
            }
          ]
        },
        "SDL_RenderTextureTiled": {
          "doc": "Tile a portion of the texture to the current rendering target at subpixel\nprecision.\n\nThe pixels in `srcrect` will be repeated as many times as needed to\ncompletely fill `dstrect`.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param scale the scale used to transform srcrect into the destination\n             rectangle, e.g. a 32x32 texture with a scale of 2 would fill\n             64x64 tiles.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTextureTiled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderTexture9Grid": {
          "doc": "Perform a scaled copy using the 9-grid algorithm to the current rendering\ntarget at subpixel precision.\n\nThe pixels in the texture are split into a 3x3 grid, using the different\ncorner sizes for each corner, and the sides and center making up the\nremaining pixels. The corners are then scaled using `scale` and fit into\nthe corners of the destination rectangle. The sides and center are then\nstretched into place to cover the remaining destination rectangle.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect the SDL_Rect structure representing the rectangle to be used\n               for the 9-grid, or NULL to use the entire texture.\n\\param left_width the width, in pixels, of the left corners in `srcrect`.\n\\param right_width the width, in pixels, of the right corners in `srcrect`.\n\\param top_height the height, in pixels, of the top corners in `srcrect`.\n\\param bottom_height the height, in pixels, of the bottom corners in\n                     `srcrect`.\n\\param scale the scale used to transform the corner of `srcrect` into the\n             corner of `dstrect`, or 0.0f for an unscaled copy.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTexture9Grid",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "left_width",
              "type": "float"
            },
            {
              "name": "right_width",
              "type": "float"
            },
            {
              "name": "top_height",
              "type": "float"
            },
            {
              "name": "bottom_height",
              "type": "float"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderGeometry": {
          "doc": "Render a list of triangles, optionally using a texture and indices into the\nvertex array Color and alpha modulation is done per vertex\n(SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n\n\\param renderer the rendering context.\n\\param texture (optional) The SDL texture to use.\n\\param vertices vertices.\n\\param num_vertices number of vertices.\n\\param indices (optional) An array of integer indices into the 'vertices'\n               array, if NULL all vertices will be rendered in sequential\n               order.\n\\param num_indices number of indices.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderGeometryRaw",
          "name": "SDL_RenderGeometry",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "vertices",
              "type": "const SDL_Vertex *"
            },
            {
              "name": "num_vertices",
              "type": "int"
            },
            {
              "name": "indices",
              "type": "const int *"
            },
            {
              "name": "num_indices",
              "type": "int"
            }
          ]
        },
        "SDL_RenderGeometryRaw": {
          "doc": "Render a list of triangles, optionally using a texture and indices into the\nvertex arrays Color and alpha modulation is done per vertex\n(SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n\n\\param renderer the rendering context.\n\\param texture (optional) The SDL texture to use.\n\\param xy vertex positions.\n\\param xy_stride byte size to move from one element to the next element.\n\\param color vertex colors (as SDL_FColor).\n\\param color_stride byte size to move from one element to the next element.\n\\param uv vertex normalized texture coordinates.\n\\param uv_stride byte size to move from one element to the next element.\n\\param num_vertices number of vertices.\n\\param indices (optional) An array of indices into the 'vertices' arrays,\n               if NULL all vertices will be rendered in sequential order.\n\\param num_indices number of indices.\n\\param size_indices index size: 1 (byte), 2 (short), 4 (int).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderGeometry",
          "name": "SDL_RenderGeometryRaw",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "xy",
              "type": "const float *"
            },
            {
              "name": "xy_stride",
              "type": "int"
            },
            {
              "name": "color",
              "type": "const SDL_FColor *"
            },
            {
              "name": "color_stride",
              "type": "int"
            },
            {
              "name": "uv",
              "type": "const float *"
            },
            {
              "name": "uv_stride",
              "type": "int"
            },
            {
              "name": "num_vertices",
              "type": "int"
            },
            {
              "name": "indices",
              "type": "const void *"
            },
            {
              "name": "num_indices",
              "type": "int"
            },
            {
              "name": "size_indices",
              "type": "int"
            }
          ]
        },
        "SDL_RenderReadPixels": {
          "doc": "Read pixels from the current rendering target.\n\nThe returned surface contains pixels inside the desired area clipped to the\ncurrent viewport, and should be freed with SDL_DestroySurface().\n\nNote that this returns the actual pixels on the screen, so if you are using\nlogical presentation you should use SDL_GetRenderLogicalPresentationRect()\nto get the area containing your content.\n\n**WARNING**: This is a very slow operation, and should not be used\nfrequently. If you're using this on the main rendering target, it should be\ncalled after rendering and before SDL_RenderPresent().\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure representing the area to read, which will\n            be clipped to the current viewport, or NULL for the entire\n            viewport.\n\\returns a new SDL_Surface on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RenderReadPixels",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_RenderPresent": {
          "doc": "Update the screen with any rendering performed since the previous call.\n\nSDL's rendering functions operate on a backbuffer; that is, calling a\nrendering function such as SDL_RenderLine() does not directly put a line on\nthe screen, but rather updates the backbuffer. As such, you compose your\nentire scene and *present* the composed backbuffer to the screen as a\ncomplete picture.\n\nTherefore, when using SDL's rendering API, one does all drawing intended\nfor the frame, and then calls this function once per frame to present the\nfinal drawing to the user.\n\nThe backbuffer should be considered invalidated after each present; do not\nassume that previous contents will exist between frames. You are strongly\nencouraged to call SDL_RenderClear() to initialize the backbuffer before\nstarting each new frame's drawing, even if you plan to overwrite every\npixel.\n\nPlease note, that in case of rendering to a texture - there is **no need**\nto call `SDL_RenderPresent` after drawing needed objects to a texture, and\nshould not be done; you are only required to change back the rendering\ntarget to default via `SDL_SetRenderTarget(renderer, NULL)` afterwards, as\ntextures by themselves do not have a concept of backbuffers. Calling\nSDL_RenderPresent while rendering to a texture will still update the screen\nwith any current drawing that has been done _to the window itself_.\n\n\\param renderer the rendering context.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_RenderClear\n\\sa SDL_RenderFillRect\n\\sa SDL_RenderFillRects\n\\sa SDL_RenderLine\n\\sa SDL_RenderLines\n\\sa SDL_RenderPoint\n\\sa SDL_RenderPoints\n\\sa SDL_RenderRect\n\\sa SDL_RenderRects\n\\sa SDL_SetRenderDrawBlendMode\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_RenderPresent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_DestroyTexture": {
          "doc": "Destroy the specified texture.\n\nPassing NULL or an otherwise invalid texture will set the SDL error message\nto \"Invalid texture\".\n\n\\param texture the texture to destroy.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureFromSurface",
          "name": "SDL_DestroyTexture",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_DestroyRenderer": {
          "doc": "Destroy the rendering context for a window and free all associated\ntextures.\n\nThis should be called before destroying the associated window.\n\n\\param renderer the rendering context.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer",
          "name": "SDL_DestroyRenderer",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_FlushRenderer": {
          "doc": "Force the rendering context to flush any pending commands and state.\n\nYou do not need to (and in fact, shouldn't) call this function unless you\nare planning to call into OpenGL/Direct3D/Metal/whatever directly, in\naddition to using an SDL_Renderer.\n\nThis is for a very-specific case: if you are using SDL's render API, and\nyou plan to make OpenGL/D3D/whatever calls in addition to SDL render API\ncalls. If this applies, you should call this function between calls to\nSDL's render API and the low-level API you're using in cooperation.\n\nIn all other cases, you can ignore this function.\n\nThis call makes SDL flush any pending rendering work it was queueing up to\ndo later in a single batch, and marks any internal cached state as invalid,\nso it'll prepare all its state again later, from scratch.\n\nThis means you do not need to save state in your rendering code to protect\nthe SDL renderer. However, there lots of arbitrary pieces of Direct3D and\nOpenGL state that can confuse things; you should use your best judgment and\nbe prepared to make changes if specific state needs to be protected.\n\n\\param renderer the rendering context.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_FlushRenderer",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRenderMetalLayer": {
          "doc": "Get the CAMetalLayer associated with the given Metal renderer.\n\nThis function returns `void *`, so SDL doesn't have to include Metal's\nheaders, but it can be safely cast to a `CAMetalLayer *`.\n\n\\param renderer the renderer to query.\n\\returns a `CAMetalLayer *` on success, or NULL if the renderer isn't a\n         Metal renderer.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderMetalCommandEncoder",
          "name": "SDL_GetRenderMetalLayer",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRenderMetalCommandEncoder": {
          "doc": "Get the Metal command encoder for the current frame.\n\nThis function returns `void *`, so SDL doesn't have to include Metal's\nheaders, but it can be safely cast to an `id<MTLRenderCommandEncoder>`.\n\nThis will return NULL if Metal refuses to give SDL a drawable to render to,\nwhich might happen if the window is hidden/minimized/offscreen. This\ndoesn't apply to command encoders for render targets, just the window's\nbackbuffer. Check your return values!\n\n\\param renderer the renderer to query.\n\\returns an `id<MTLRenderCommandEncoder>` on success, or NULL if the\n         renderer isn't a Metal renderer or there was an error.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderMetalLayer",
          "name": "SDL_GetRenderMetalCommandEncoder",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_AddVulkanRenderSemaphores": {
          "doc": "Add a set of synchronization semaphores for the current frame.\n\nThe Vulkan renderer will wait for `wait_semaphore` before submitting\nrendering commands and signal `signal_semaphore` after rendering commands\nare complete for this frame.\n\nThis should be called each frame that you want semaphore synchronization.\nThe Vulkan renderer may have multiple frames in flight on the GPU, so you\nshould have multiple semaphores that are used for synchronization. Querying\nSDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER will give you the\nmaximum number of semaphores you'll need.\n\n\\param renderer the rendering context.\n\\param wait_stage_mask the VkPipelineStageFlags for the wait.\n\\param wait_semaphore a VkSempahore to wait on before rendering the current\n                      frame, or 0 if not needed.\n\\param signal_semaphore a VkSempahore that SDL will signal when rendering\n                        for the current frame is complete, or 0 if not\n                        needed.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is **NOT** safe to call this function from two threads at\n              once.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_AddVulkanRenderSemaphores",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "wait_stage_mask",
              "type": "Uint32"
            },
            {
              "name": "wait_semaphore",
              "type": "Sint64"
            },
            {
              "name": "signal_semaphore",
              "type": "Sint64"
            }
          ]
        },
        "SDL_SetRenderVSync": {
          "doc": "Toggle VSync of the given renderer.\n\nWhen a renderer is created, vsync defaults to SDL_RENDERER_VSYNC_DISABLED.\n\nThe `vsync` parameter can be 1 to synchronize present with every vertical\nrefresh, 2 to synchronize present with every second vertical refresh, etc.,\nSDL_RENDERER_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync), or\nSDL_RENDERER_VSYNC_DISABLED to disable. Not every value is supported by\nevery driver, so you should check the return value to see whether the\nrequested setting is supported.\n\n\\param renderer the renderer to toggle.\n\\param vsync the vertical refresh sync interval.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderVSync",
          "name": "SDL_SetRenderVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "vsync",
              "type": "int"
            }
          ]
        },
        "SDL_RENDERER_VSYNC_DISABLED": {
          "doc": "",
          "name": "SDL_RENDERER_VSYNC_DISABLED",
          "kind": "def",
          "value": "0"
        },
        "SDL_RENDERER_VSYNC_ADAPTIVE": {
          "doc": "",
          "name": "SDL_RENDERER_VSYNC_ADAPTIVE",
          "kind": "def",
          "value": "(-1)"
        },
        "SDL_GetRenderVSync": {
          "doc": "Get VSync of the given renderer.\n\n\\param renderer the renderer to toggle.\n\\param vsync an int filled with the current vertical refresh sync interval.\n             See SDL_SetRenderVSync() for the meaning of the value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderVSync",
          "name": "SDL_GetRenderVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "vsync",
              "type": "int *"
            }
          ]
        },
        "SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE": {
          "doc": "The size, in pixels, of a single SDL_RenderDebugText() character.\n\nThe font is monospaced and square, so this applies to all characters.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_RenderDebugText",
          "name": "SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE",
          "kind": "def",
          "value": "8"
        },
        "SDL_RenderDebugText": {
          "doc": "Draw debug text to an SDL_Renderer.\n\nThis function will render a string of text to an SDL_Renderer. Note that\nthis is a convenience function for debugging, with severe limitations, and\nnot intended to be used for production apps and games.\n\nAmong these limitations:\n\n- It accepts UTF-8 strings, but will only renders ASCII characters.\n- It has a single, tiny size (8x8 pixels). One can use logical presentation\n  or scaling to adjust it, but it will be blurry.\n- It uses a simple, hardcoded bitmap font. It does not allow different font\n  selections and it does not support truetype, for proper scaling.\n- It does no word-wrapping and does not treat newline characters as a line\n  break. If the text goes out of the window, it's gone.\n\nFor serious text rendering, there are several good options, such as\nSDL_ttf, stb_truetype, or other external libraries.\n\nOn first use, this will create an internal texture for rendering glyphs.\nThis texture will live until the renderer is destroyed.\n\nThe text is drawn in the color specified by SDL_SetRenderDrawColor().\n\n\\param renderer the renderer which should draw a line of text.\n\\param x the x coordinate where the top-left corner of the text will draw.\n\\param y the y coordinate where the top-left corner of the text will draw.\n\\param str the string to render.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderDebugTextFormat\n\\sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE",
          "name": "SDL_RenderDebugText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_RenderDebugTextFormat": {
          "doc": "Draw debug text to an SDL_Renderer.\n\nThis function will render a printf()-style format string to a renderer.\nNote that this is a convinence function for debugging, with severe\nlimitations, and is not intended to be used for production apps and games.\n\nFor the full list of limitations and other useful information, see\nSDL_RenderDebugText.\n\n\\param renderer the renderer which should draw the text.\n\\param x the x coordinate where the top-left corner of the text will draw.\n\\param y the y coordinate where the top-left corner of the text will draw.\n\\param fmt the format string to draw.\n\\param ... additional parameters matching % tokens in the `fmt` string, if\n           any.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderDebugText\n\\sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE",
          "name": "SDL_RenderDebugTextFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        }
      }
    },
    "SDL_pixels.h": {
      "name": "SDL_pixels.h",
      "doc": "# CategoryPixels\n\nSDL offers facilities for pixel management.\n\nLargely these facilities deal with pixel _format_: what does this set of\nbits represent?\n\nIf you mostly want to think of a pixel as some combination of red, green,\nblue, and maybe alpha intensities, this is all pretty straightforward, and\nin many cases, is enough information to build a perfectly fine game.\n\nHowever, the actual definition of a pixel is more complex than that:\n\nPixels are a representation of a color in a particular color space.\n\nThe first characteristic of a color space is the color type. SDL\nunderstands two different color types, RGB and YCbCr, or in SDL also\nreferred to as YUV.\n\nRGB colors consist of red, green, and blue channels of color that are added\ntogether to represent the colors we see on the screen.\n\nhttps://en.wikipedia.org/wiki/RGB_color_model\n\nYCbCr colors represent colors as a Y luma brightness component and red and\nblue chroma color offsets. This color representation takes advantage of the\nfact that the human eye is more sensitive to brightness than the color in\nan image. The Cb and Cr components are often compressed and have lower\nresolution than the luma component.\n\nhttps://en.wikipedia.org/wiki/YCbCr\n\nWhen the color information in YCbCr is compressed, the Y pixels are left at\nfull resolution and each Cr and Cb pixel represents an average of the color\ninformation in a block of Y pixels. The chroma location determines where in\nthat block of pixels the color information is coming from.\n\nThe color range defines how much of the pixel to use when converting a\npixel into a color on the display. When the full color range is used, the\nentire numeric range of the pixel bits is significant. When narrow color\nrange is used, for historical reasons, the pixel uses only a portion of the\nnumeric range to represent colors.\n\nThe color primaries and white point are a definition of the colors in the\ncolor space relative to the standard XYZ color space.\n\nhttps://en.wikipedia.org/wiki/CIE_1931_color_space\n\nThe transfer characteristic, or opto-electrical transfer function (OETF),\nis the way a color is converted from mathematically linear space into a\nnon-linear output signals.\n\nhttps://en.wikipedia.org/wiki/Rec._709#Transfer_characteristics\n\nThe matrix coefficients are used to convert between YCbCr and RGB colors.",
      "entries": {
        "SDL_ALPHA_OPAQUE": {
          "doc": "A fully opaque 8-bit alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_TRANSPARENT",
          "name": "SDL_ALPHA_OPAQUE",
          "kind": "def",
          "value": "255"
        },
        "SDL_ALPHA_OPAQUE_FLOAT": {
          "doc": "A fully opaque floating point alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_TRANSPARENT_FLOAT",
          "name": "SDL_ALPHA_OPAQUE_FLOAT",
          "kind": "def",
          "value": "1.0f"
        },
        "SDL_ALPHA_TRANSPARENT": {
          "doc": "A fully transparent 8-bit alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_OPAQUE",
          "name": "SDL_ALPHA_TRANSPARENT",
          "kind": "def",
          "value": "0"
        },
        "SDL_ALPHA_TRANSPARENT_FLOAT": {
          "doc": "A fully transparent floating point alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_OPAQUE_FLOAT",
          "name": "SDL_ALPHA_TRANSPARENT_FLOAT",
          "kind": "def",
          "value": "0.0f"
        },
        "SDL_PixelType": {
          "doc": "Pixel type.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PixelType",
          "kind": "enum",
          "entries": {
            "SDL_PIXELTYPE_UNKNOWN": {
              "doc": "",
              "name": "SDL_PIXELTYPE_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_INDEX1": {
              "doc": "",
              "name": "SDL_PIXELTYPE_INDEX1",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_INDEX4": {
              "doc": "",
              "name": "SDL_PIXELTYPE_INDEX4",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_INDEX8": {
              "doc": "",
              "name": "SDL_PIXELTYPE_INDEX8",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_PACKED8": {
              "doc": "",
              "name": "SDL_PIXELTYPE_PACKED8",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_PACKED16": {
              "doc": "",
              "name": "SDL_PIXELTYPE_PACKED16",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_PACKED32": {
              "doc": "",
              "name": "SDL_PIXELTYPE_PACKED32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_ARRAYU8": {
              "doc": "",
              "name": "SDL_PIXELTYPE_ARRAYU8",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_ARRAYU16": {
              "doc": "",
              "name": "SDL_PIXELTYPE_ARRAYU16",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_ARRAYU32": {
              "doc": "",
              "name": "SDL_PIXELTYPE_ARRAYU32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_ARRAYF16": {
              "doc": "",
              "name": "SDL_PIXELTYPE_ARRAYF16",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_ARRAYF32": {
              "doc": "",
              "name": "SDL_PIXELTYPE_ARRAYF32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELTYPE_INDEX2": {
              "doc": "",
              "name": "SDL_PIXELTYPE_INDEX2",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_BitmapOrder": {
          "doc": "Bitmap pixel order, high bit -> low bit.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_BitmapOrder",
          "kind": "enum",
          "entries": {
            "SDL_BITMAPORDER_NONE": {
              "doc": "",
              "name": "SDL_BITMAPORDER_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_BITMAPORDER_4321": {
              "doc": "",
              "name": "SDL_BITMAPORDER_4321",
              "kind": "var",
              "type": ""
            },
            "SDL_BITMAPORDER_1234": {
              "doc": "",
              "name": "SDL_BITMAPORDER_1234",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_PackedOrder": {
          "doc": "Packed component order, high bit -> low bit.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PackedOrder",
          "kind": "enum",
          "entries": {
            "SDL_PACKEDORDER_NONE": {
              "doc": "",
              "name": "SDL_PACKEDORDER_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_XRGB": {
              "doc": "",
              "name": "SDL_PACKEDORDER_XRGB",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_RGBX": {
              "doc": "",
              "name": "SDL_PACKEDORDER_RGBX",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_ARGB": {
              "doc": "",
              "name": "SDL_PACKEDORDER_ARGB",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_RGBA": {
              "doc": "",
              "name": "SDL_PACKEDORDER_RGBA",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_XBGR": {
              "doc": "",
              "name": "SDL_PACKEDORDER_XBGR",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_BGRX": {
              "doc": "",
              "name": "SDL_PACKEDORDER_BGRX",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_ABGR": {
              "doc": "",
              "name": "SDL_PACKEDORDER_ABGR",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDORDER_BGRA": {
              "doc": "",
              "name": "SDL_PACKEDORDER_BGRA",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ArrayOrder": {
          "doc": "Array component order, low byte -> high byte.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ArrayOrder",
          "kind": "enum",
          "entries": {
            "SDL_ARRAYORDER_NONE": {
              "doc": "",
              "name": "SDL_ARRAYORDER_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_ARRAYORDER_RGB": {
              "doc": "",
              "name": "SDL_ARRAYORDER_RGB",
              "kind": "var",
              "type": ""
            },
            "SDL_ARRAYORDER_RGBA": {
              "doc": "",
              "name": "SDL_ARRAYORDER_RGBA",
              "kind": "var",
              "type": ""
            },
            "SDL_ARRAYORDER_ARGB": {
              "doc": "",
              "name": "SDL_ARRAYORDER_ARGB",
              "kind": "var",
              "type": ""
            },
            "SDL_ARRAYORDER_BGR": {
              "doc": "",
              "name": "SDL_ARRAYORDER_BGR",
              "kind": "var",
              "type": ""
            },
            "SDL_ARRAYORDER_BGRA": {
              "doc": "",
              "name": "SDL_ARRAYORDER_BGRA",
              "kind": "var",
              "type": ""
            },
            "SDL_ARRAYORDER_ABGR": {
              "doc": "",
              "name": "SDL_ARRAYORDER_ABGR",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_PackedLayout": {
          "doc": "Packed component layout.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PackedLayout",
          "kind": "enum",
          "entries": {
            "SDL_PACKEDLAYOUT_NONE": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_332": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_332",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_4444": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_1555": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_1555",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_5551": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_5551",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_565": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_565",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_8888": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_2101010": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_2101010",
              "kind": "var",
              "type": ""
            },
            "SDL_PACKEDLAYOUT_1010102": {
              "doc": "",
              "name": "SDL_PACKEDLAYOUT_1010102",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_DEFINE_PIXELFOURCC": {
          "doc": "A macro for defining custom FourCC pixel formats.\n\nFor example, defining SDL_PIXELFORMAT_YV12 looks like this:\n\n```c\nSDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2')\n```\n\n\\param A the first character of the FourCC code.\n\\param B the second character of the FourCC code.\n\\param C the third character of the FourCC code.\n\\param D the fourth character of the FourCC code.\n\\returns a format value in the style of SDL_PixelFormat.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_PIXELFOURCC",
          "kind": "def",
          "parameters": [
            "A",
            "B",
            "C",
            "D"
          ],
          "value": "SDL_FOURCC(A, B, C, D)"
        },
        "SDL_DEFINE_PIXELFORMAT": {
          "doc": "A macro for defining custom non-FourCC pixel formats.\n\nFor example, defining SDL_PIXELFORMAT_RGBA8888 looks like this:\n\n```c\nSDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4)\n```\n\n\\param type the type of the new format, probably a SDL_PixelType value.\n\\param order the order of the new format, probably a SDL_BitmapOrder,\n             SDL_PackedOrder, or SDL_ArrayOrder value.\n\\param layout the layout of the new format, probably an SDL_PackedLayout\n              value or zero.\n\\param bits the number of bits per pixel of the new format.\n\\param bytes the number of bytes per pixel of the new format.\n\\returns a format value in the style of SDL_PixelFormat.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_PIXELFORMAT",
          "kind": "def",
          "parameters": [
            "type",
            "order",
            "layout",
            "bits",
            "bytes"
          ],
          "value": "    ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | \\\n     ((bits) << 8) | ((bytes) << 0))"
        },
        "SDL_PIXELFLAG": {
          "doc": "A macro to retrieve the flags of an SDL_PixelFormat.\n\nThis macro is generally not needed directly by an app, which should use\nspecific tests, like SDL_ISPIXELFORMAT_FOURCC, instead.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the flags of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELFLAG",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "(((format) >> 28) & 0x0F)"
        },
        "SDL_PIXELTYPE": {
          "doc": "A macro to retrieve the type of an SDL_PixelFormat.\n\nThis is usually a value from the SDL_PixelType enumeration.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the type of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELTYPE",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "(((format) >> 24) & 0x0F)"
        },
        "SDL_PIXELORDER": {
          "doc": "A macro to retrieve the order of an SDL_PixelFormat.\n\nThis is usually a value from the SDL_BitmapOrder, SDL_PackedOrder, or\nSDL_ArrayOrder enumerations, depending on the format type.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the order of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELORDER",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "(((format) >> 20) & 0x0F)"
        },
        "SDL_PIXELLAYOUT": {
          "doc": "A macro to retrieve the layout of an SDL_PixelFormat.\n\nThis is usually a value from the SDL_PackedLayout enumeration, or zero if a\nlayout doesn't make sense for the format type.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the layout of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELLAYOUT",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "(((format) >> 16) & 0x0F)"
        },
        "SDL_BITSPERPIXEL": {
          "doc": "A macro to determine an SDL_PixelFormat's bits per pixel.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\nFourCC formats will report zero here, as it rarely makes sense to measure\nthem per-pixel.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the bits-per-pixel of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_BYTESPERPIXEL",
          "name": "SDL_BITSPERPIXEL",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    (SDL_ISPIXELFORMAT_FOURCC(format) ? 0 : (((format) >> 8) & 0xFF))"
        },
        "SDL_BYTESPERPIXEL": {
          "doc": "A macro to determine an SDL_PixelFormat's bytes per pixel.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\nFourCC formats do their best here, but many of them don't have a meaningful\nmeasurement of bytes per pixel.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the bytes-per-pixel of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_BITSPERPIXEL",
          "name": "SDL_BYTESPERPIXEL",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    (SDL_ISPIXELFORMAT_FOURCC(format) ? \\\n        ((((format) == SDL_PIXELFORMAT_YUY2) || \\\n          ((format) == SDL_PIXELFORMAT_UYVY) || \\\n          ((format) == SDL_PIXELFORMAT_YVYU) || \\\n          ((format) == SDL_PIXELFORMAT_P010)) ? 2 : 1) : (((format) >> 0) & 0xFF))"
        },
        "SDL_ISPIXELFORMAT_INDEXED": {
          "doc": "A macro to determine if an SDL_PixelFormat is an indexed format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is indexed, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_INDEXED",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n     ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)))"
        },
        "SDL_ISPIXELFORMAT_PACKED": {
          "doc": "A macro to determine if an SDL_PixelFormat is a packed format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is packed, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_PACKED",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n     ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32)))"
        },
        "SDL_ISPIXELFORMAT_ARRAY": {
          "doc": "A macro to determine if an SDL_PixelFormat is an array format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is an array, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_ARRAY",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n     ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)))"
        },
        "SDL_ISPIXELFORMAT_10BIT": {
          "doc": "A macro to determine if an SDL_PixelFormat is a 10-bit format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is 10-bit, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_10BIT",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "      (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n       ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32) && \\\n        (SDL_PIXELLAYOUT(format) == SDL_PACKEDLAYOUT_2101010)))"
        },
        "SDL_ISPIXELFORMAT_FLOAT": {
          "doc": "A macro to determine if an SDL_PixelFormat is a floating point format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is 10-bit, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_FLOAT",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "      (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n       ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || \\\n        (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)))"
        },
        "SDL_ISPIXELFORMAT_ALPHA": {
          "doc": "A macro to determine if an SDL_PixelFormat has an alpha channel.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format has alpha, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_ALPHA",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    ((SDL_ISPIXELFORMAT_PACKED(format) && \\\n      ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || \\\n       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || \\\n       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || \\\n       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) || \\\n     (SDL_ISPIXELFORMAT_ARRAY(format) && \\\n      ((SDL_PIXELORDER(format) == SDL_ARRAYORDER_ARGB) || \\\n       (SDL_PIXELORDER(format) == SDL_ARRAYORDER_RGBA) || \\\n       (SDL_PIXELORDER(format) == SDL_ARRAYORDER_ABGR) || \\\n       (SDL_PIXELORDER(format) == SDL_ARRAYORDER_BGRA))))"
        },
        "SDL_ISPIXELFORMAT_FOURCC": {
          "doc": "A macro to determine if an SDL_PixelFormat is a \"FourCC\" format.\n\nThis covers custom and other unusual formats.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format has alpha, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_FOURCC",
          "kind": "def",
          "parameters": [
            "format"
          ],
          "value": "    /* The flag is set to 1 because 0x1? is not in the printable ASCII range */ \\\n    ((format) && (SDL_PIXELFLAG(format) != 1))"
        },
        "SDL_PixelFormat": {
          "doc": "Pixel format.\n\nSDL's pixel formats have the following naming convention:\n\n- Names with a list of components and a single bit count, such as RGB24 and\n  ABGR32, define a platform-independent encoding into bytes in the order\n  specified. For example, in RGB24 data, each pixel is encoded in 3 bytes\n  (red, green, blue) in that order, and in ABGR32 data, each pixel is\n  encoded in 4 bytes alpha, blue, green, red) in that order. Use these\n  names if the property of a format that is important to you is the order\n  of the bytes in memory or on disk.\n- Names with a bit count per component, such as ARGB8888 and XRGB1555, are\n  \"packed\" into an appropriately-sized integer in the platform's native\n  endianness. For example, ARGB8888 is a sequence of 32-bit integers; in\n  each integer, the most significant bits are alpha, and the least\n  significant bits are blue. On a little-endian CPU such as x86, the least\n  significant bits of each integer are arranged first in memory, but on a\n  big-endian CPU such as s390x, the most significant bits are arranged\n  first. Use these names if the property of a format that is important to\n  you is the meaning of each bit position within a native-endianness\n  integer.\n- In indexed formats such as INDEX4LSB, each pixel is represented by\n  encoding an index into the palette into the indicated number of bits,\n  with multiple pixels packed into each byte if appropriate. In LSB\n  formats, the first (leftmost) pixel is stored in the least-significant\n  bits of the byte; in MSB formats, it's stored in the most-significant\n  bits. INDEX8 does not need LSB/MSB variants, because each pixel exactly\n  fills one byte.\n\nThe 32-bit byte-array encodings such as RGBA32 are aliases for the\nappropriate 8888 encoding for the current platform. For example, RGBA32 is\nan alias for ABGR8888 on little-endian CPUs like x86, or an alias for\nRGBA8888 on big-endian CPUs.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PixelFormat",
          "kind": "enum",
          "entries": {
            "SDL_PIXELFORMAT_UNKNOWN": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX1LSB": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX1LSB",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX1MSB": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX1MSB",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX2LSB": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX2LSB",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX2MSB": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX2MSB",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX4LSB": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX4LSB",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX4MSB": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX4MSB",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_INDEX8": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_INDEX8",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGB332": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGB332",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XRGB4444": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XRGB4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XBGR4444": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XBGR4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XRGB1555": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XRGB1555",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XBGR1555": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XBGR1555",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB4444": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA4444": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR4444": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA4444": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA4444",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB1555": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB1555",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA5551": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA5551",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR1555": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR1555",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA5551": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA5551",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGB565": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGB565",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGR565": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGR565",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGB24": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGB24",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGR24": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGR24",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XRGB8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XRGB8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBX8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBX8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XBGR8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XBGR8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRX8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRX8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA8888": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA8888",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XRGB2101010": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XRGB2101010",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XBGR2101010": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XBGR2101010",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB2101010": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB2101010",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR2101010": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR2101010",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGB48": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGB48",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGR48": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGR48",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA64": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA64",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB64": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB64",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA64": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA64",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR64": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR64",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGB48_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGB48_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGR48_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGR48_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA64_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA64_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB64_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB64_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA64_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA64_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR64_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR64_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGB96_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGB96_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGR96_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGR96_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA128_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA128_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB128_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB128_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA128_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA128_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR128_FLOAT": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR128_FLOAT",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_YV12": {
              "doc": "Planar mode: Y + V + U (3 planes)",
              "name": "SDL_PIXELFORMAT_YV12",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_IYUV": {
              "doc": "Planar mode: Y + U + V (3 planes)",
              "name": "SDL_PIXELFORMAT_IYUV",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_YUY2": {
              "doc": "Packed mode: Y0+U0+Y1+V0 (1 plane)",
              "name": "SDL_PIXELFORMAT_YUY2",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_UYVY": {
              "doc": "Packed mode: U0+Y0+V0+Y1 (1 plane)",
              "name": "SDL_PIXELFORMAT_UYVY",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_YVYU": {
              "doc": "Packed mode: Y0+V0+Y1+U0 (1 plane)",
              "name": "SDL_PIXELFORMAT_YVYU",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_NV12": {
              "doc": "Planar mode: Y + U/V interleaved (2 planes)",
              "name": "SDL_PIXELFORMAT_NV12",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_NV21": {
              "doc": "Planar mode: Y + V/U interleaved (2 planes)",
              "name": "SDL_PIXELFORMAT_NV21",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_P010": {
              "doc": "Planar mode: Y + U/V interleaved (2 planes)",
              "name": "SDL_PIXELFORMAT_P010",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_EXTERNAL_OES": {
              "doc": "Android video texture format.",
              "name": "SDL_PIXELFORMAT_EXTERNAL_OES",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_MJPG": {
              "doc": "Motion JPEG.",
              "name": "SDL_PIXELFORMAT_MJPG",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBA32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBA32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ARGB32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ARGB32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRA32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRA32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_ABGR32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_ABGR32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_RGBX32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_RGBX32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XRGB32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XRGB32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_BGRX32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_BGRX32",
              "kind": "var",
              "type": ""
            },
            "SDL_PIXELFORMAT_XBGR32": {
              "doc": "",
              "name": "SDL_PIXELFORMAT_XBGR32",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ColorType": {
          "doc": "Colorspace color type.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ColorType",
          "kind": "enum",
          "entries": {
            "SDL_COLOR_TYPE_UNKNOWN": {
              "doc": "",
              "name": "SDL_COLOR_TYPE_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_TYPE_RGB": {
              "doc": "",
              "name": "SDL_COLOR_TYPE_RGB",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_TYPE_YCBCR": {
              "doc": "",
              "name": "SDL_COLOR_TYPE_YCBCR",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ColorRange": {
          "doc": "Colorspace color range, as described by\nhttps://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ColorRange",
          "kind": "enum",
          "entries": {
            "SDL_COLOR_RANGE_UNKNOWN": {
              "doc": "",
              "name": "SDL_COLOR_RANGE_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_RANGE_LIMITED": {
              "doc": "Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma",
              "name": "SDL_COLOR_RANGE_LIMITED",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_RANGE_FULL": {
              "doc": "Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma",
              "name": "SDL_COLOR_RANGE_FULL",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ColorPrimaries": {
          "doc": "Colorspace color primaries, as described by\nhttps://www.itu.int/rec/T-REC-H.273-201612-S/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ColorPrimaries",
          "kind": "enum",
          "entries": {
            "SDL_COLOR_PRIMARIES_UNKNOWN": {
              "doc": "",
              "name": "SDL_COLOR_PRIMARIES_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_BT709": {
              "doc": "ITU-R BT.709-6.",
              "name": "SDL_COLOR_PRIMARIES_BT709",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_UNSPECIFIED": {
              "doc": "",
              "name": "SDL_COLOR_PRIMARIES_UNSPECIFIED",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_BT470M": {
              "doc": "ITU-R BT.470-6 System M.",
              "name": "SDL_COLOR_PRIMARIES_BT470M",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_BT470BG": {
              "doc": "ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625.",
              "name": "SDL_COLOR_PRIMARIES_BT470BG",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_BT601": {
              "doc": "ITU-R BT.601-7 525, SMPTE 170M.",
              "name": "SDL_COLOR_PRIMARIES_BT601",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_SMPTE240": {
              "doc": "SMPTE 240M, functionally the same as SDL_COLOR_PRIMARIES_BT601.",
              "name": "SDL_COLOR_PRIMARIES_SMPTE240",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_GENERIC_FILM": {
              "doc": "Generic film (color filters using Illuminant C)",
              "name": "SDL_COLOR_PRIMARIES_GENERIC_FILM",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_BT2020": {
              "doc": "ITU-R BT.2020-2 / ITU-R BT.2100-0.",
              "name": "SDL_COLOR_PRIMARIES_BT2020",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_XYZ": {
              "doc": "SMPTE ST 428-1.",
              "name": "SDL_COLOR_PRIMARIES_XYZ",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_SMPTE431": {
              "doc": "SMPTE RP 431-2.",
              "name": "SDL_COLOR_PRIMARIES_SMPTE431",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_SMPTE432": {
              "doc": "SMPTE EG 432-1 / DCI P3.",
              "name": "SDL_COLOR_PRIMARIES_SMPTE432",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_EBU3213": {
              "doc": "EBU Tech.  3213-E",
              "name": "SDL_COLOR_PRIMARIES_EBU3213",
              "kind": "var",
              "type": ""
            },
            "SDL_COLOR_PRIMARIES_CUSTOM": {
              "doc": "",
              "name": "SDL_COLOR_PRIMARIES_CUSTOM",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_TransferCharacteristics": {
          "doc": "Colorspace transfer characteristics.\n\nThese are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_TransferCharacteristics",
          "kind": "enum",
          "entries": {
            "SDL_TRANSFER_CHARACTERISTICS_UNKNOWN": {
              "doc": "",
              "name": "SDL_TRANSFER_CHARACTERISTICS_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_BT709": {
              "doc": "Rec.  ITU-R BT.709-6 / ITU-R BT1361",
              "name": "SDL_TRANSFER_CHARACTERISTICS_BT709",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED": {
              "doc": "",
              "name": "SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_GAMMA22": {
              "doc": "ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_GAMMA22",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_GAMMA28": {
              "doc": "ITU-R BT.470-6 System B, G.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_GAMMA28",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_BT601": {
              "doc": "SMPTE ST 170M / ITU-R BT.601-7 525 or 625.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_BT601",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_SMPTE240": {
              "doc": "SMPTE ST 240M.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_SMPTE240",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_LINEAR": {
              "doc": "",
              "name": "SDL_TRANSFER_CHARACTERISTICS_LINEAR",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_LOG100": {
              "doc": "",
              "name": "SDL_TRANSFER_CHARACTERISTICS_LOG100",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10": {
              "doc": "",
              "name": "SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_IEC61966": {
              "doc": "IEC 61966-2-4.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_IEC61966",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_BT1361": {
              "doc": "ITU-R BT1361 Extended Colour Gamut.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_BT1361",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_SRGB": {
              "doc": "IEC 61966-2-1 (sRGB or sYCC)",
              "name": "SDL_TRANSFER_CHARACTERISTICS_SRGB",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT": {
              "doc": "ITU-R BT2020 for 10-bit system.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT": {
              "doc": "ITU-R BT2020 for 12-bit system.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_PQ": {
              "doc": "SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_PQ",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_SMPTE428": {
              "doc": "SMPTE ST 428-1.",
              "name": "SDL_TRANSFER_CHARACTERISTICS_SMPTE428",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_HLG": {
              "doc": "ARIB STD-B67, known as \"hybrid log-gamma\" (HLG)",
              "name": "SDL_TRANSFER_CHARACTERISTICS_HLG",
              "kind": "var",
              "type": ""
            },
            "SDL_TRANSFER_CHARACTERISTICS_CUSTOM": {
              "doc": "",
              "name": "SDL_TRANSFER_CHARACTERISTICS_CUSTOM",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_MatrixCoefficients": {
          "doc": "Colorspace matrix coefficients.\n\nThese are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_MatrixCoefficients",
          "kind": "enum",
          "entries": {
            "SDL_MATRIX_COEFFICIENTS_IDENTITY": {
              "doc": "",
              "name": "SDL_MATRIX_COEFFICIENTS_IDENTITY",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_BT709": {
              "doc": "ITU-R BT.709-6.",
              "name": "SDL_MATRIX_COEFFICIENTS_BT709",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_UNSPECIFIED": {
              "doc": "",
              "name": "SDL_MATRIX_COEFFICIENTS_UNSPECIFIED",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_FCC": {
              "doc": "US FCC Title 47.",
              "name": "SDL_MATRIX_COEFFICIENTS_FCC",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_BT470BG": {
              "doc": "ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as SDL_MATRIX_COEFFICIENTS_BT601.",
              "name": "SDL_MATRIX_COEFFICIENTS_BT470BG",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_BT601": {
              "doc": "ITU-R BT.601-7 525.",
              "name": "SDL_MATRIX_COEFFICIENTS_BT601",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_SMPTE240": {
              "doc": "SMPTE 240M.",
              "name": "SDL_MATRIX_COEFFICIENTS_SMPTE240",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_YCGCO": {
              "doc": "",
              "name": "SDL_MATRIX_COEFFICIENTS_YCGCO",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_BT2020_NCL": {
              "doc": "ITU-R BT.2020-2 non-constant luminance.",
              "name": "SDL_MATRIX_COEFFICIENTS_BT2020_NCL",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_BT2020_CL": {
              "doc": "ITU-R BT.2020-2 constant luminance.",
              "name": "SDL_MATRIX_COEFFICIENTS_BT2020_CL",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_SMPTE2085": {
              "doc": "SMPTE ST 2085.",
              "name": "SDL_MATRIX_COEFFICIENTS_SMPTE2085",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL": {
              "doc": "",
              "name": "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL": {
              "doc": "",
              "name": "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_ICTCP": {
              "doc": "ITU-R BT.2100-0 ICTCP.",
              "name": "SDL_MATRIX_COEFFICIENTS_ICTCP",
              "kind": "var",
              "type": ""
            },
            "SDL_MATRIX_COEFFICIENTS_CUSTOM": {
              "doc": "",
              "name": "SDL_MATRIX_COEFFICIENTS_CUSTOM",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ChromaLocation": {
          "doc": "Colorspace chroma sample location.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ChromaLocation",
          "kind": "enum",
          "entries": {
            "SDL_CHROMA_LOCATION_NONE": {
              "doc": "RGB, no chroma sampling.",
              "name": "SDL_CHROMA_LOCATION_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_CHROMA_LOCATION_LEFT": {
              "doc": "In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square.  In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically.",
              "name": "SDL_CHROMA_LOCATION_LEFT",
              "kind": "var",
              "type": ""
            },
            "SDL_CHROMA_LOCATION_CENTER": {
              "doc": "In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square.  In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel.",
              "name": "SDL_CHROMA_LOCATION_CENTER",
              "kind": "var",
              "type": ""
            },
            "SDL_CHROMA_LOCATION_TOPLEFT": {
              "doc": "In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel (\"co-sited\", \"co-located\").",
              "name": "SDL_CHROMA_LOCATION_TOPLEFT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_DEFINE_COLORSPACE": {
          "doc": "A macro for defining custom SDL_Colorspace formats.\n\nFor example, defining SDL_COLORSPACE_SRGB looks like this:\n\n```c\nSDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,\n                      SDL_COLOR_RANGE_FULL,\n                      SDL_COLOR_PRIMARIES_BT709,\n                      SDL_TRANSFER_CHARACTERISTICS_SRGB,\n                      SDL_MATRIX_COEFFICIENTS_IDENTITY,\n                      SDL_CHROMA_LOCATION_NONE)\n```\n\n\\param type the type of the new format, probably an SDL_ColorType value.\n\\param range the range of the new format, probably a SDL_ColorRange value.\n\\param primaries the primaries of the new format, probably an\n                 SDL_ColorPrimaries value.\n\\param transfer the transfer characteristics of the new format, probably an\n                SDL_TransferCharacteristics value.\n\\param matrix the matrix coefficients of the new format, probably an\n              SDL_MatrixCoefficients value.\n\\param chroma the chroma sample location of the new format, probably an\n              SDL_ChromaLocation value.\n\\returns a format value in the style of SDL_Colorspace.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_COLORSPACE",
          "kind": "def",
          "parameters": [
            "type",
            "range",
            "primaries",
            "transfer",
            "matrix",
            "chroma"
          ],
          "value": "    (((Uint32)(type) << 28) | ((Uint32)(range) << 24) | ((Uint32)(chroma) << 20) | \\\n    ((Uint32)(primaries) << 10) | ((Uint32)(transfer) << 5) | ((Uint32)(matrix) << 0))"
        },
        "SDL_COLORSPACETYPE": {
          "doc": "A macro to retrieve the type of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ColorType for `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACETYPE",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_ColorType)(((cspace) >> 28) & 0x0F)"
        },
        "SDL_COLORSPACERANGE": {
          "doc": "A macro to retrieve the range of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ColorRange of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACERANGE",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_ColorRange)(((cspace) >> 24) & 0x0F)"
        },
        "SDL_COLORSPACECHROMA": {
          "doc": "A macro to retrieve the chroma sample location of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ChromaLocation of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACECHROMA",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_ChromaLocation)(((cspace) >> 20) & 0x0F)"
        },
        "SDL_COLORSPACEPRIMARIES": {
          "doc": "A macro to retrieve the primaries of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ColorPrimaries of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACEPRIMARIES",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_ColorPrimaries)(((cspace) >> 10) & 0x1F)"
        },
        "SDL_COLORSPACETRANSFER": {
          "doc": "A macro to retrieve the transfer characteristics of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_TransferCharacteristics of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACETRANSFER",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_TransferCharacteristics)(((cspace) >> 5) & 0x1F)"
        },
        "SDL_COLORSPACEMATRIX": {
          "doc": "A macro to retrieve the matrix coefficients of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_MatrixCoefficients of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACEMATRIX",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_MatrixCoefficients)((cspace) & 0x1F)"
        },
        "SDL_ISCOLORSPACE_MATRIX_BT601": {
          "doc": "A macro to determine if an SDL_Colorspace uses BT601 (or BT470BG) matrix\ncoefficients.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if BT601 or BT470BG, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_MATRIX_BT601",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT601 || SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT470BG)"
        },
        "SDL_ISCOLORSPACE_MATRIX_BT709": {
          "doc": "A macro to determine if an SDL_Colorspace uses BT709 matrix coefficients.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if BT709, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_MATRIX_BT709",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT709)"
        },
        "SDL_ISCOLORSPACE_MATRIX_BT2020_NCL": {
          "doc": "A macro to determine if an SDL_Colorspace uses BT2020_NCL matrix\ncoefficients.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if BT2020_NCL, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_MATRIX_BT2020_NCL",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL)"
        },
        "SDL_ISCOLORSPACE_LIMITED_RANGE": {
          "doc": "A macro to determine if an SDL_Colorspace has a limited range.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if limited range, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_LIMITED_RANGE",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_COLORSPACERANGE(cspace) != SDL_COLOR_RANGE_FULL)"
        },
        "SDL_ISCOLORSPACE_FULL_RANGE": {
          "doc": "A macro to determine if an SDL_Colorspace has a full range.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if full range, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_FULL_RANGE",
          "kind": "def",
          "parameters": [
            "cspace"
          ],
          "value": "(SDL_COLORSPACERANGE(cspace) == SDL_COLOR_RANGE_FULL)"
        },
        "SDL_Colorspace": {
          "doc": "Colorspace definitions.\n\nSince similar colorspaces may vary in their details (matrix, transfer\nfunction, etc.), this is not an exhaustive list, but rather a\nrepresentative sample of the kinds of colorspaces supported in SDL.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_ColorPrimaries\n\\sa SDL_ColorRange\n\\sa SDL_ColorType\n\\sa SDL_MatrixCoefficients\n\\sa SDL_TransferCharacteristics",
          "name": "SDL_Colorspace",
          "kind": "enum",
          "entries": {
            "SDL_COLORSPACE_UNKNOWN": {
              "doc": "",
              "name": "SDL_COLORSPACE_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_SRGB": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709.",
              "name": "SDL_COLORSPACE_SRGB",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_SRGB_LINEAR": {
              "doc": "[object Object]",
              "name": "SDL_COLORSPACE_SRGB_LINEAR",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_HDR10": {
              "doc": "[object Object]",
              "name": "SDL_COLORSPACE_HDR10",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_JPEG": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601.",
              "name": "SDL_COLORSPACE_JPEG",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_BT601_LIMITED": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601.",
              "name": "SDL_COLORSPACE_BT601_LIMITED",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_BT601_FULL": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601.",
              "name": "SDL_COLORSPACE_BT601_FULL",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_BT709_LIMITED": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709.",
              "name": "SDL_COLORSPACE_BT709_LIMITED",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_BT709_FULL": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709.",
              "name": "SDL_COLORSPACE_BT709_FULL",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_BT2020_LIMITED": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020.",
              "name": "SDL_COLORSPACE_BT2020_LIMITED",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_BT2020_FULL": {
              "doc": "Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020.",
              "name": "SDL_COLORSPACE_BT2020_FULL",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_RGB_DEFAULT": {
              "doc": "The default colorspace for RGB surfaces if no colorspace is specified.",
              "name": "SDL_COLORSPACE_RGB_DEFAULT",
              "kind": "var",
              "type": ""
            },
            "SDL_COLORSPACE_YUV_DEFAULT": {
              "doc": "The default colorspace for YUV surfaces if no colorspace is specified.",
              "name": "SDL_COLORSPACE_YUV_DEFAULT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_Color": {
          "doc": "A structure that represents a color as RGBA components.\n\nThe bits of this structure can be directly reinterpreted as an\ninteger-packed color which uses the SDL_PIXELFORMAT_RGBA32 format\n(SDL_PIXELFORMAT_ABGR8888 on little-endian systems and\nSDL_PIXELFORMAT_RGBA8888 on big-endian systems).\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Color",
          "kind": "struct",
          "entries": {
            "r": {
              "doc": "",
              "name": "r",
              "kind": "var",
              "type": "Uint8"
            },
            "g": {
              "doc": "",
              "name": "g",
              "kind": "var",
              "type": "Uint8"
            },
            "b": {
              "doc": "",
              "name": "b",
              "kind": "var",
              "type": "Uint8"
            },
            "a": {
              "doc": "",
              "name": "a",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_FColor": {
          "doc": "The bits of this structure can be directly reinterpreted as a float-packed\ncolor which uses the SDL_PIXELFORMAT_RGBA128_FLOAT format\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_FColor",
          "kind": "struct",
          "entries": {
            "r": {
              "doc": "",
              "name": "r",
              "kind": "var",
              "type": "float"
            },
            "g": {
              "doc": "",
              "name": "g",
              "kind": "var",
              "type": "float"
            },
            "b": {
              "doc": "",
              "name": "b",
              "kind": "var",
              "type": "float"
            },
            "a": {
              "doc": "",
              "name": "a",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_Palette": {
          "doc": "A set of indexed colors representing a palette.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_SetPaletteColors",
          "name": "SDL_Palette",
          "kind": "struct",
          "entries": {
            "ncolors": {
              "doc": "number of elements in `colors`.",
              "name": "ncolors",
              "kind": "var",
              "type": "int"
            },
            "colors": {
              "doc": "an array of colors, `ncolors` long.",
              "name": "colors",
              "kind": "var",
              "type": "SDL_Color"
            },
            "version": {
              "doc": "internal use only, do not touch.",
              "name": "version",
              "kind": "var",
              "type": "Uint32"
            },
            "refcount": {
              "doc": "internal use only, do not touch.",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_PixelFormatDetails": {
          "doc": "Details about the format of a pixel.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PixelFormatDetails",
          "kind": "struct",
          "entries": {
            "format": {
              "doc": "",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "bits_per_pixel": {
              "doc": "",
              "name": "bits_per_pixel",
              "kind": "var",
              "type": "Uint8"
            },
            "bytes_per_pixel": {
              "doc": "",
              "name": "bytes_per_pixel",
              "kind": "var",
              "type": "Uint8"
            },
            "padding": {
              "doc": "",
              "name": "padding",
              "kind": "var",
              "type": "Uint8"
            },
            "Rmask": {
              "doc": "",
              "name": "Rmask",
              "kind": "var",
              "type": "Uint32"
            },
            "Gmask": {
              "doc": "",
              "name": "Gmask",
              "kind": "var",
              "type": "Uint32"
            },
            "Bmask": {
              "doc": "",
              "name": "Bmask",
              "kind": "var",
              "type": "Uint32"
            },
            "Amask": {
              "doc": "",
              "name": "Amask",
              "kind": "var",
              "type": "Uint32"
            },
            "Rbits": {
              "doc": "",
              "name": "Rbits",
              "kind": "var",
              "type": "Uint8"
            },
            "Gbits": {
              "doc": "",
              "name": "Gbits",
              "kind": "var",
              "type": "Uint8"
            },
            "Bbits": {
              "doc": "",
              "name": "Bbits",
              "kind": "var",
              "type": "Uint8"
            },
            "Abits": {
              "doc": "",
              "name": "Abits",
              "kind": "var",
              "type": "Uint8"
            },
            "Rshift": {
              "doc": "",
              "name": "Rshift",
              "kind": "var",
              "type": "Uint8"
            },
            "Gshift": {
              "doc": "",
              "name": "Gshift",
              "kind": "var",
              "type": "Uint8"
            },
            "Bshift": {
              "doc": "",
              "name": "Bshift",
              "kind": "var",
              "type": "Uint8"
            },
            "Ashift": {
              "doc": "",
              "name": "Ashift",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_GetPixelFormatName": {
          "doc": "Get the human readable name of a pixel format.\n\n\\param format the pixel format to query.\n\\returns the human readable name of the specified pixel format or\n         \"SDL_PIXELFORMAT_UNKNOWN\" if the format isn't recognized.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPixelFormatName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_GetMasksForPixelFormat": {
          "doc": "Convert one of the enumerated pixel formats to a bpp value and RGBA masks.\n\n\\param format one of the SDL_PixelFormat values.\n\\param bpp a bits per pixel value; usually 15, 16, or 32.\n\\param Rmask a pointer filled in with the red mask for the format.\n\\param Gmask a pointer filled in with the green mask for the format.\n\\param Bmask a pointer filled in with the blue mask for the format.\n\\param Amask a pointer filled in with the alpha mask for the format.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatForMasks",
          "name": "SDL_GetMasksForPixelFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "bpp",
              "type": "int *"
            },
            {
              "name": "Rmask",
              "type": "Uint32 *"
            },
            {
              "name": "Gmask",
              "type": "Uint32 *"
            },
            {
              "name": "Bmask",
              "type": "Uint32 *"
            },
            {
              "name": "Amask",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_GetPixelFormatForMasks": {
          "doc": "Convert a bpp value and RGBA masks to an enumerated pixel format.\n\nThis will return `SDL_PIXELFORMAT_UNKNOWN` if the conversion wasn't\npossible.\n\n\\param bpp a bits per pixel value; usually 15, 16, or 32.\n\\param Rmask the red mask for the format.\n\\param Gmask the green mask for the format.\n\\param Bmask the blue mask for the format.\n\\param Amask the alpha mask for the format.\n\\returns the SDL_PixelFormat value corresponding to the format masks, or\n         SDL_PIXELFORMAT_UNKNOWN if there isn't a match.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMasksForPixelFormat",
          "name": "SDL_GetPixelFormatForMasks",
          "kind": "function",
          "type": "SDL_PixelFormat",
          "parameters": [
            {
              "name": "bpp",
              "type": "int"
            },
            {
              "name": "Rmask",
              "type": "Uint32"
            },
            {
              "name": "Gmask",
              "type": "Uint32"
            },
            {
              "name": "Bmask",
              "type": "Uint32"
            },
            {
              "name": "Amask",
              "type": "Uint32"
            }
          ]
        },
        "SDL_GetPixelFormatDetails": {
          "doc": "Create an SDL_PixelFormatDetails structure corresponding to a pixel format.\n\nReturned structure may come from a shared global cache (i.e. not newly\nallocated), and hence should not be modified, especially the palette. Weird\nerrors such as `Blit combination not supported` may occur.\n\n\\param format one of the SDL_PixelFormat values.\n\\returns a pointer to a SDL_PixelFormatDetails structure or NULL on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPixelFormatDetails",
          "kind": "function",
          "type": "const SDL_PixelFormatDetails *",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_CreatePalette": {
          "doc": "Create a palette structure with the specified number of color entries.\n\nThe palette entries are initialized to white.\n\n\\param ncolors represents the number of color entries in the color palette.\n\\returns a new SDL_Palette structure on success or NULL on failure (e.g. if\n         there wasn't enough memory); call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyPalette\n\\sa SDL_SetPaletteColors\n\\sa SDL_SetSurfacePalette",
          "name": "SDL_CreatePalette",
          "kind": "function",
          "type": "SDL_Palette *",
          "parameters": [
            {
              "name": "ncolors",
              "type": "int"
            }
          ]
        },
        "SDL_SetPaletteColors": {
          "doc": "Set a range of colors in a palette.\n\n\\param palette the SDL_Palette structure to modify.\n\\param colors an array of SDL_Color structures to copy into the palette.\n\\param firstcolor the index of the first palette entry to modify.\n\\param ncolors the number of entries to modify.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified or destroyed in another thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetPaletteColors",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "palette",
              "type": "SDL_Palette *"
            },
            {
              "name": "colors",
              "type": "const SDL_Color *"
            },
            {
              "name": "firstcolor",
              "type": "int"
            },
            {
              "name": "ncolors",
              "type": "int"
            }
          ]
        },
        "SDL_DestroyPalette": {
          "doc": "Free a palette created with SDL_CreatePalette().\n\n\\param palette the SDL_Palette structure to be freed.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified or destroyed in another thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePalette",
          "name": "SDL_DestroyPalette",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "palette",
              "type": "SDL_Palette *"
            }
          ]
        },
        "SDL_MapRGB": {
          "doc": "Map an RGB triple to an opaque pixel value for a given pixel format.\n\nThis function maps the RGB color value to the specified pixel format and\nreturns the pixel value best approximating the given RGB color value for\nthe given pixel format.\n\nIf the format has a palette (8-bit) the index of the closest matching color\nin the palette will be returned.\n\nIf the specified pixel format has an alpha component it will be returned as\nall 1 bits (fully opaque).\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGB\n\\sa SDL_MapRGBA\n\\sa SDL_MapSurfaceRGB",
          "name": "SDL_MapRGB",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_MapRGBA": {
          "doc": "Map an RGBA quadruple to a pixel value for a given pixel format.\n\nThis function maps the RGBA color value to the specified pixel format and\nreturns the pixel value best approximating the given RGBA color value for\nthe given pixel format.\n\nIf the specified pixel format has no alpha component the alpha value will\nbe ignored (as it will be in formats with a palette).\n\nIf the format has a palette (8-bit) the index of the closest matching color\nin the palette will be returned.\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\param a the alpha component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGBA\n\\sa SDL_MapRGB\n\\sa SDL_MapSurfaceRGBA",
          "name": "SDL_MapRGBA",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_GetRGB": {
          "doc": "Get RGB values from a pixel in the specified format.\n\nThis function uses the entire 8-bit [0..255] range when converting color\ncomponents from pixel formats with less than 8-bits per RGB component\n(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n\n\\param pixel a pixel value.\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r a pointer filled in with the red component, may be NULL.\n\\param g a pointer filled in with the green component, may be NULL.\n\\param b a pointer filled in with the blue component, may be NULL.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGBA\n\\sa SDL_MapRGB\n\\sa SDL_MapRGBA",
          "name": "SDL_GetRGB",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "pixel",
              "type": "Uint32"
            },
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetRGBA": {
          "doc": "Get RGBA values from a pixel in the specified format.\n\nThis function uses the entire 8-bit [0..255] range when converting color\ncomponents from pixel formats with less than 8-bits per RGB component\n(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n\nIf the surface has no alpha component, the alpha will be returned as 0xff\n(100% opaque).\n\n\\param pixel a pixel value.\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r a pointer filled in with the red component, may be NULL.\n\\param g a pointer filled in with the green component, may be NULL.\n\\param b a pointer filled in with the blue component, may be NULL.\n\\param a a pointer filled in with the alpha component, may be NULL.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGB\n\\sa SDL_MapRGB\n\\sa SDL_MapRGBA",
          "name": "SDL_GetRGBA",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "pixel",
              "type": "Uint32"
            },
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        }
      }
    },
    "SDL_blendmode.h": {
      "name": "SDL_blendmode.h",
      "doc": "# CategoryBlendmode\n\nBlend modes decide how two colors will mix together. There are both\nstandard modes for basic needs and a means to create custom modes,\ndictating what sort of math to do on what color components.",
      "entries": {
        "SDL_BlendMode": {
          "doc": "A set of blend modes used in drawing operations.\n\nThese predefined blend modes are supported everywhere.\n\nAdditional values may be obtained from SDL_ComposeCustomBlendMode.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_ComposeCustomBlendMode",
          "name": "SDL_BlendMode",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_BLENDMODE_NONE": {
          "doc": "no blending: dstRGBA = srcRGBA",
          "name": "SDL_BLENDMODE_NONE",
          "kind": "def",
          "value": "0x00000000u"
        },
        "SDL_BLENDMODE_BLEND": {
          "doc": "alpha blending: dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA)), dstA = srcA + (dstA * (1-srcA))",
          "name": "SDL_BLENDMODE_BLEND",
          "kind": "def",
          "value": "0x00000001u"
        },
        "SDL_BLENDMODE_BLEND_PREMULTIPLIED": {
          "doc": "pre-multiplied alpha blending: dstRGBA = srcRGBA + (dstRGBA * (1-srcA))",
          "name": "SDL_BLENDMODE_BLEND_PREMULTIPLIED",
          "kind": "def",
          "value": "0x00000010u"
        },
        "SDL_BLENDMODE_ADD": {
          "doc": "additive blending: dstRGB = (srcRGB * srcA) + dstRGB, dstA = dstA",
          "name": "SDL_BLENDMODE_ADD",
          "kind": "def",
          "value": "0x00000002u"
        },
        "SDL_BLENDMODE_ADD_PREMULTIPLIED": {
          "doc": "pre-multiplied additive blending: dstRGB = srcRGB + dstRGB, dstA = dstA",
          "name": "SDL_BLENDMODE_ADD_PREMULTIPLIED",
          "kind": "def",
          "value": "0x00000020u"
        },
        "SDL_BLENDMODE_MOD": {
          "doc": "color modulate: dstRGB = srcRGB * dstRGB, dstA = dstA",
          "name": "SDL_BLENDMODE_MOD",
          "kind": "def",
          "value": "0x00000004u"
        },
        "SDL_BLENDMODE_MUL": {
          "doc": "color multiply: dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA)), dstA = dstA",
          "name": "SDL_BLENDMODE_MUL",
          "kind": "def",
          "value": "0x00000008u"
        },
        "SDL_BLENDMODE_INVALID": {
          "doc": "",
          "name": "SDL_BLENDMODE_INVALID",
          "kind": "def",
          "value": "0x7FFFFFFFu"
        },
        "SDL_BlendOperation": {
          "doc": "The blend operation used when combining source and destination pixel\ncomponents.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_BlendOperation",
          "kind": "enum",
          "entries": {
            "SDL_BLENDOPERATION_ADD": {
              "doc": "dst + src: supported by all renderers",
              "name": "SDL_BLENDOPERATION_ADD",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDOPERATION_SUBTRACT": {
              "doc": "src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan",
              "name": "SDL_BLENDOPERATION_SUBTRACT",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDOPERATION_REV_SUBTRACT": {
              "doc": "dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan",
              "name": "SDL_BLENDOPERATION_REV_SUBTRACT",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDOPERATION_MINIMUM": {
              "doc": "min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan",
              "name": "SDL_BLENDOPERATION_MINIMUM",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDOPERATION_MAXIMUM": {
              "doc": "max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan",
              "name": "SDL_BLENDOPERATION_MAXIMUM",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_BlendFactor": {
          "doc": "The normalized factor used to multiply pixel components.\n\nThe blend factors are multiplied with the pixels from a drawing operation\n(src) and the pixels from the render target (dst) before the blend\noperation. The comma-separated factors listed above are always applied in\nthe component order red, green, blue, and alpha.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_BlendFactor",
          "kind": "enum",
          "entries": {
            "SDL_BLENDFACTOR_ZERO": {
              "doc": "0, 0, 0, 0",
              "name": "SDL_BLENDFACTOR_ZERO",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_ONE": {
              "doc": "1, 1, 1, 1",
              "name": "SDL_BLENDFACTOR_ONE",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_SRC_COLOR": {
              "doc": "srcR, srcG, srcB, srcA",
              "name": "SDL_BLENDFACTOR_SRC_COLOR",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR": {
              "doc": "1-srcR, 1-srcG, 1-srcB, 1-srcA",
              "name": "SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_SRC_ALPHA": {
              "doc": "srcA, srcA, srcA, srcA",
              "name": "SDL_BLENDFACTOR_SRC_ALPHA",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA": {
              "doc": "1-srcA, 1-srcA, 1-srcA, 1-srcA",
              "name": "SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_DST_COLOR": {
              "doc": "dstR, dstG, dstB, dstA",
              "name": "SDL_BLENDFACTOR_DST_COLOR",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR": {
              "doc": "1-dstR, 1-dstG, 1-dstB, 1-dstA",
              "name": "SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_DST_ALPHA": {
              "doc": "dstA, dstA, dstA, dstA",
              "name": "SDL_BLENDFACTOR_DST_ALPHA",
              "kind": "var",
              "type": ""
            },
            "SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA": {
              "doc": "1-dstA, 1-dstA, 1-dstA, 1-dstA",
              "name": "SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ComposeCustomBlendMode": {
          "doc": "Compose a custom blend mode for renderers.\n\nThe functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept\nthe SDL_BlendMode returned by this function if the renderer supports it.\n\nA blend mode controls how the pixels from a drawing operation (source) get\ncombined with the pixels from the render target (destination). First, the\ncomponents of the source and destination pixels get multiplied with their\nblend factors. Then, the blend operation takes the two products and\ncalculates the result that will get stored in the render target.\n\nExpressed in pseudocode, it would look like this:\n\n```c\ndstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);\ndstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);\n```\n\nWhere the functions `colorOperation(src, dst)` and `alphaOperation(src,\ndst)` can return one of the following:\n\n- `src + dst`\n- `src - dst`\n- `dst - src`\n- `min(src, dst)`\n- `max(src, dst)`\n\nThe red, green, and blue components are always multiplied with the first,\nsecond, and third components of the SDL_BlendFactor, respectively. The\nfourth component is not used.\n\nThe alpha component is always multiplied with the fourth component of the\nSDL_BlendFactor. The other components are not used in the alpha\ncalculation.\n\nSupport for these blend modes varies for each renderer. To check if a\nspecific SDL_BlendMode is supported, create a renderer and pass it to\neither SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will\nreturn with an error if the blend mode is not supported.\n\nThis list describes the support of custom blend modes for each renderer.\nAll renderers support the four blend modes listed in the SDL_BlendMode\nenumeration.\n\n- **direct3d**: Supports all operations with all factors. However, some\n  factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and\n  `SDL_BLENDOPERATION_MAXIMUM`.\n- **direct3d11**: Same as Direct3D 9.\n- **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all\n  factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly here.\n- **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,\n  `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`\n  operations with all factors.\n- **psp**: No custom blend mode support.\n- **software**: No custom blend mode support.\n\nSome renderers do not provide an alpha component for the default render\ntarget. The `SDL_BLENDFACTOR_DST_ALPHA` and\n`SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this\ncase.\n\n\\param srcColorFactor the SDL_BlendFactor applied to the red, green, and\n                      blue components of the source pixels.\n\\param dstColorFactor the SDL_BlendFactor applied to the red, green, and\n                      blue components of the destination pixels.\n\\param colorOperation the SDL_BlendOperation used to combine the red,\n                      green, and blue components of the source and\n                      destination pixels.\n\\param srcAlphaFactor the SDL_BlendFactor applied to the alpha component of\n                      the source pixels.\n\\param dstAlphaFactor the SDL_BlendFactor applied to the alpha component of\n                      the destination pixels.\n\\param alphaOperation the SDL_BlendOperation used to combine the alpha\n                      component of the source and destination pixels.\n\\returns an SDL_BlendMode that represents the chosen factors and\n         operations.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawBlendMode\n\\sa SDL_GetRenderDrawBlendMode\n\\sa SDL_SetTextureBlendMode\n\\sa SDL_GetTextureBlendMode",
          "name": "SDL_ComposeCustomBlendMode",
          "kind": "function",
          "type": "SDL_BlendMode",
          "parameters": [
            {
              "name": "srcColorFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "dstColorFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "colorOperation",
              "type": "SDL_BlendOperation"
            },
            {
              "name": "srcAlphaFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "dstAlphaFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "alphaOperation",
              "type": "SDL_BlendOperation"
            }
          ]
        }
      }
    },
    "SDL_rect.h": {
      "name": "SDL_rect.h",
      "doc": "# CategoryRect\n\nSome helper functions for managing rectangles and 2D points, in both\ninteger and floating point versions.",
      "entries": {
        "SDL_Point": {
          "doc": "The structure that defines a point (using integers).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetRectEnclosingPoints\n\\sa SDL_PointInRect",
          "name": "SDL_Point",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "int"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_FPoint": {
          "doc": "The structure that defines a point (using floating point values).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetRectEnclosingPointsFloat\n\\sa SDL_PointInRectFloat",
          "name": "SDL_FPoint",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_Rect": {
          "doc": "A rectangle, with the origin at the upper left (using integers).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_RectEmpty\n\\sa SDL_RectsEqual\n\\sa SDL_HasRectIntersection\n\\sa SDL_GetRectIntersection\n\\sa SDL_GetRectAndLineIntersection\n\\sa SDL_GetRectUnion\n\\sa SDL_GetRectEnclosingPoints",
          "name": "SDL_Rect",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "int"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "int"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_FRect": {
          "doc": "A rectangle, with the origin at the upper left (using floating point\nvalues).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_RectEmptyFloat\n\\sa SDL_RectsEqualFloat\n\\sa SDL_RectsEqualEpsilon\n\\sa SDL_HasRectIntersectionFloat\n\\sa SDL_GetRectIntersectionFloat\n\\sa SDL_GetRectAndLineIntersectionFloat\n\\sa SDL_GetRectUnionFloat\n\\sa SDL_GetRectEnclosingPointsFloat\n\\sa SDL_PointInRectFloat",
          "name": "SDL_FRect",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "float"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_RectToFRect": {
          "doc": "Convert an SDL_Rect to SDL_FRect\n\n\\param rect a pointer to an SDL_Rect.\n\\param frect a pointer filled in with the floating point representation of\n             `rect`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectToFRect",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "frect",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_PointInRect": {
          "doc": "Determine whether a point resides inside a rectangle.\n\nA point is considered part of a rectangle if both `p` and `r` are not NULL,\nand `p`'s x and y coordinates are >= to the rectangle's top left corner,\nand < the rectangle's x+w and y+h. So a 1x1 rectangle considers point (0,0)\nas \"inside\" and (0,1) as not.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param p the point to test.\n\\param r the rectangle to test.\n\\returns true if `p` is contained by `r`, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PointInRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "p",
              "type": "const SDL_Point *"
            },
            {
              "name": "r",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_RectEmpty": {
          "doc": "Determine whether a rectangle has no area.\n\nA rectangle is considered \"empty\" for this function if `r` is NULL, or if\n`r`'s width and/or height are <= 0.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param r the rectangle to test.\n\\returns true if the rectangle is \"empty\", false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectEmpty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "r",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_RectsEqual": {
          "doc": "Determine whether two rectangles are equal.\n\nRectangles are considered equal if both are not NULL and each of their x,\ny, width and height match.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param a the first rectangle to test.\n\\param b the second rectangle to test.\n\\returns true if the rectangles are equal, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectsEqual",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "const SDL_Rect *"
            },
            {
              "name": "b",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_HasRectIntersection": {
          "doc": "Determine whether two rectangles intersect.\n\nIf either pointer is NULL the function will return false.\n\n\\param A an SDL_Rect structure representing the first rectangle.\n\\param B an SDL_Rect structure representing the second rectangle.\n\\returns true if there is an intersection, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRectIntersection",
          "name": "SDL_HasRectIntersection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_Rect *"
            },
            {
              "name": "B",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectIntersection": {
          "doc": "Calculate the intersection of two rectangles.\n\nIf `result` is NULL then this function will return false.\n\n\\param A an SDL_Rect structure representing the first rectangle.\n\\param B an SDL_Rect structure representing the second rectangle.\n\\param result an SDL_Rect structure filled in with the intersection of\n              rectangles `A` and `B`.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasRectIntersection",
          "name": "SDL_GetRectIntersection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_Rect *"
            },
            {
              "name": "B",
              "type": "const SDL_Rect *"
            },
            {
              "name": "result",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectUnion": {
          "doc": "Calculate the union of two rectangles.\n\n\\param A an SDL_Rect structure representing the first rectangle.\n\\param B an SDL_Rect structure representing the second rectangle.\n\\param result an SDL_Rect structure filled in with the union of rectangles\n              `A` and `B`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectUnion",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_Rect *"
            },
            {
              "name": "B",
              "type": "const SDL_Rect *"
            },
            {
              "name": "result",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectEnclosingPoints": {
          "doc": "Calculate a minimal rectangle enclosing a set of points.\n\nIf `clip` is not NULL then only points inside of the clipping rectangle are\nconsidered.\n\n\\param points an array of SDL_Point structures representing points to be\n              enclosed.\n\\param count the number of structures in the `points` array.\n\\param clip an SDL_Rect used for clipping or NULL to enclose all points.\n\\param result an SDL_Rect structure filled in with the minimal enclosing\n              rectangle.\n\\returns true if any points were enclosed or false if all the points were\n         outside of the clipping rectangle.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectEnclosingPoints",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "points",
              "type": "const SDL_Point *"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "clip",
              "type": "const SDL_Rect *"
            },
            {
              "name": "result",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectAndLineIntersection": {
          "doc": "Calculate the intersection of a rectangle and line segment.\n\nThis function is used to clip a line segment to a rectangle. A line segment\ncontained entirely within the rectangle or that does not intersect will\nremain unchanged. A line segment that crosses the rectangle at either or\nboth ends will be clipped to the boundary of the rectangle and the new\ncoordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.\n\n\\param rect an SDL_Rect structure representing the rectangle to intersect.\n\\param X1 a pointer to the starting X-coordinate of the line.\n\\param Y1 a pointer to the starting Y-coordinate of the line.\n\\param X2 a pointer to the ending X-coordinate of the line.\n\\param Y2 a pointer to the ending Y-coordinate of the line.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectAndLineIntersection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "X1",
              "type": "int *"
            },
            {
              "name": "Y1",
              "type": "int *"
            },
            {
              "name": "X2",
              "type": "int *"
            },
            {
              "name": "Y2",
              "type": "int *"
            }
          ]
        },
        "SDL_PointInRectFloat": {
          "doc": "Determine whether a point resides inside a floating point rectangle.\n\nA point is considered part of a rectangle if both `p` and `r` are not NULL,\nand `p`'s x and y coordinates are >= to the rectangle's top left corner,\nand <= the rectangle's x+w and y+h. So a 1x1 rectangle considers point\n(0,0) and (0,1) as \"inside\" and (0,2) as not.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param p the point to test.\n\\param r the rectangle to test.\n\\returns true if `p` is contained by `r`, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PointInRectFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "p",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "r",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RectEmptyFloat": {
          "doc": "Determine whether a floating point rectangle can contain any point.\n\nA rectangle is considered \"empty\" for this function if `r` is NULL, or if\n`r`'s width and/or height are < 0.0f.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param r the rectangle to test.\n\\returns true if the rectangle is \"empty\", false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectEmptyFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "r",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RectsEqualEpsilon": {
          "doc": "Determine whether two floating point rectangles are equal, within some\ngiven epsilon.\n\nRectangles are considered equal if both are not NULL and each of their x,\ny, width and height are within `epsilon` of each other. If you don't know\nwhat value to use for `epsilon`, you should call the SDL_RectsEqualFloat\nfunction instead.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param a the first rectangle to test.\n\\param b the second rectangle to test.\n\\param epsilon the epsilon value for comparison.\n\\returns true if the rectangles are equal, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RectsEqualFloat",
          "name": "SDL_RectsEqualEpsilon",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "const SDL_FRect *"
            },
            {
              "name": "b",
              "type": "const SDL_FRect *"
            },
            {
              "name": "epsilon",
              "type": "float"
            }
          ]
        },
        "SDL_RectsEqualFloat": {
          "doc": "Determine whether two floating point rectangles are equal, within a default\nepsilon.\n\nRectangles are considered equal if both are not NULL and each of their x,\ny, width and height are within SDL_FLT_EPSILON of each other. This is often\na reasonable way to compare two floating point rectangles and deal with the\nslight precision variations in floating point calculations that tend to pop\nup.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param a the first rectangle to test.\n\\param b the second rectangle to test.\n\\returns true if the rectangles are equal, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RectsEqualEpsilon",
          "name": "SDL_RectsEqualFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "const SDL_FRect *"
            },
            {
              "name": "b",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_HasRectIntersectionFloat": {
          "doc": "Determine whether two rectangles intersect with float precision.\n\nIf either pointer is NULL the function will return false.\n\n\\param A an SDL_FRect structure representing the first rectangle.\n\\param B an SDL_FRect structure representing the second rectangle.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRectIntersection",
          "name": "SDL_HasRectIntersectionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_FRect *"
            },
            {
              "name": "B",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectIntersectionFloat": {
          "doc": "Calculate the intersection of two rectangles with float precision.\n\nIf `result` is NULL then this function will return false.\n\n\\param A an SDL_FRect structure representing the first rectangle.\n\\param B an SDL_FRect structure representing the second rectangle.\n\\param result an SDL_FRect structure filled in with the intersection of\n              rectangles `A` and `B`.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasRectIntersectionFloat",
          "name": "SDL_GetRectIntersectionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_FRect *"
            },
            {
              "name": "B",
              "type": "const SDL_FRect *"
            },
            {
              "name": "result",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectUnionFloat": {
          "doc": "Calculate the union of two rectangles with float precision.\n\n\\param A an SDL_FRect structure representing the first rectangle.\n\\param B an SDL_FRect structure representing the second rectangle.\n\\param result an SDL_FRect structure filled in with the union of rectangles\n              `A` and `B`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectUnionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_FRect *"
            },
            {
              "name": "B",
              "type": "const SDL_FRect *"
            },
            {
              "name": "result",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectEnclosingPointsFloat": {
          "doc": "Calculate a minimal rectangle enclosing a set of points with float\nprecision.\n\nIf `clip` is not NULL then only points inside of the clipping rectangle are\nconsidered.\n\n\\param points an array of SDL_FPoint structures representing points to be\n              enclosed.\n\\param count the number of structures in the `points` array.\n\\param clip an SDL_FRect used for clipping or NULL to enclose all points.\n\\param result an SDL_FRect structure filled in with the minimal enclosing\n              rectangle.\n\\returns true if any points were enclosed or false if all the points were\n         outside of the clipping rectangle.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectEnclosingPointsFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "points",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "clip",
              "type": "const SDL_FRect *"
            },
            {
              "name": "result",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectAndLineIntersectionFloat": {
          "doc": "Calculate the intersection of a rectangle and line segment with float\nprecision.\n\nThis function is used to clip a line segment to a rectangle. A line segment\ncontained entirely within the rectangle or that does not intersect will\nremain unchanged. A line segment that crosses the rectangle at either or\nboth ends will be clipped to the boundary of the rectangle and the new\ncoordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.\n\n\\param rect an SDL_FRect structure representing the rectangle to intersect.\n\\param X1 a pointer to the starting X-coordinate of the line.\n\\param Y1 a pointer to the starting Y-coordinate of the line.\n\\param X2 a pointer to the ending X-coordinate of the line.\n\\param Y2 a pointer to the ending Y-coordinate of the line.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectAndLineIntersectionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "X1",
              "type": "float *"
            },
            {
              "name": "Y1",
              "type": "float *"
            },
            {
              "name": "X2",
              "type": "float *"
            },
            {
              "name": "Y2",
              "type": "float *"
            }
          ]
        }
      }
    },
    "SDL_surface.h": {
      "name": "SDL_surface.h",
      "doc": "# CategorySurface\n\nSDL surfaces are buffers of pixels in system RAM. These are useful for\npassing around and manipulating images that are not stored in GPU memory.\n\nSDL_Surface makes serious efforts to manage images in various formats, and\nprovides a reasonable toolbox for transforming the data, including copying\nbetween surfaces, filling rectangles in the image data, etc.\n\nThere is also a simple .bmp loader, SDL_LoadBMP(). SDL itself does not\nprovide loaders for various other file formats, but there are several\nexcellent external libraries that do, including its own satellite library,\nSDL_image:\n\nhttps://github.com/libsdl-org/SDL_image",
      "entries": {
        "SDL_SurfaceFlags": {
          "doc": "The flags on an SDL_Surface.\n\nThese are generally considered read-only.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_SurfaceFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_SURFACE_PREALLOCATED": {
          "doc": "Surface uses preallocated pixel memory",
          "name": "SDL_SURFACE_PREALLOCATED",
          "kind": "def",
          "value": "0x00000001u"
        },
        "SDL_SURFACE_LOCK_NEEDED": {
          "doc": "Surface needs to be locked to access pixels",
          "name": "SDL_SURFACE_LOCK_NEEDED",
          "kind": "def",
          "value": "0x00000002u"
        },
        "SDL_SURFACE_LOCKED": {
          "doc": "Surface is currently locked",
          "name": "SDL_SURFACE_LOCKED",
          "kind": "def",
          "value": "0x00000004u"
        },
        "SDL_SURFACE_SIMD_ALIGNED": {
          "doc": "Surface uses pixel memory allocated with SDL_aligned_alloc()",
          "name": "SDL_SURFACE_SIMD_ALIGNED",
          "kind": "def",
          "value": "0x00000008u"
        },
        "SDL_MUSTLOCK": {
          "doc": "Evaluates to true if the surface needs to be locked before access.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MUSTLOCK",
          "kind": "def",
          "parameters": [
            "S"
          ],
          "value": "(((S)->flags & SDL_SURFACE_LOCK_NEEDED) == SDL_SURFACE_LOCK_NEEDED)"
        },
        "SDL_ScaleMode": {
          "doc": "The scaling mode.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ScaleMode",
          "kind": "enum",
          "entries": {
            "SDL_SCALEMODE_INVALID": {
              "doc": "",
              "name": "SDL_SCALEMODE_INVALID",
              "kind": "var",
              "type": ""
            },
            "SDL_SCALEMODE_NEAREST": {
              "doc": "nearest pixel sampling",
              "name": "SDL_SCALEMODE_NEAREST",
              "kind": "var",
              "type": ""
            },
            "SDL_SCALEMODE_LINEAR": {
              "doc": "linear filtering",
              "name": "SDL_SCALEMODE_LINEAR",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_FlipMode": {
          "doc": "The flip mode.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_FlipMode",
          "kind": "enum",
          "entries": {
            "SDL_FLIP_NONE": {
              "doc": "Do not flip.",
              "name": "SDL_FLIP_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_FLIP_HORIZONTAL": {
              "doc": "flip horizontally",
              "name": "SDL_FLIP_HORIZONTAL",
              "kind": "var",
              "type": ""
            },
            "SDL_FLIP_VERTICAL": {
              "doc": "flip vertically",
              "name": "SDL_FLIP_VERTICAL",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_Surface": {
          "doc": "A collection of pixels used in software blitting.\n\nPixels are arranged in memory in rows, with the top row first. Each row\noccupies an amount of memory given by the pitch (sometimes known as the row\nstride in non-SDL APIs).\n\nWithin each row, pixels are arranged from left to right until the width is\nreached. Each pixel occupies a number of bits appropriate for its format,\nwith most formats representing each pixel as one or more whole bytes (in\nsome indexed formats, instead multiple pixels are packed into each byte),\nand a byte order given by the format. After encoding all pixels, any\nremaining bytes to reach the pitch are used as padding to reach a desired\nalignment, and have undefined contents.\n\nWhen a surface holds YUV format data, the planes are assumed to be\ncontiguous without padding between them, e.g. a 32x32 surface in NV12\nformat with a pitch of 32 would consist of 32x32 bytes of Y plane followed\nby 32x16 bytes of UV plane.\n\nWhen a surface holds MJPG format data, pixels points at the compressed JPEG\nimage and pitch is the length of that data.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurface\n\\sa SDL_DestroySurface",
          "name": "SDL_Surface",
          "kind": "struct",
          "entries": {
            "flags": {
              "doc": "The flags of the surface, read-only",
              "name": "flags",
              "kind": "var",
              "type": "SDL_SurfaceFlags"
            },
            "format": {
              "doc": "The format of the surface, read-only",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "w": {
              "doc": "The width of the surface, read-only.",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "The height of the surface, read-only.",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "pitch": {
              "doc": "The distance in bytes between rows of pixels, read-only",
              "name": "pitch",
              "kind": "var",
              "type": "int"
            },
            "pixels": {
              "doc": "A pointer to the pixels of the surface, the pixels are writeable if non-NULL",
              "name": "pixels",
              "kind": "var",
              "type": "void *"
            },
            "refcount": {
              "doc": "Application reference count, used when freeing surface",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            },
            "reserved": {
              "doc": "Reserved for internal use",
              "name": "reserved",
              "kind": "var",
              "type": "void *"
            }
          }
        },
        "SDL_CreateSurface": {
          "doc": "Allocate a new surface with a specific pixel format.\n\nThe pixels of the new surface are initialized to zero.\n\n\\param width the width of the surface.\n\\param height the height of the surface.\n\\param format the SDL_PixelFormat for the new surface's pixel format.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurfaceFrom\n\\sa SDL_DestroySurface",
          "name": "SDL_CreateSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_CreateSurfaceFrom": {
          "doc": "Allocate a new surface with a specific pixel format and existing pixel\ndata.\n\nNo copy is made of the pixel data. Pixel data is not managed automatically;\nyou must free the surface before you free the pixel data.\n\nPitch is the offset in bytes from one row of pixels to the next, e.g.\n`width*4` for `SDL_PIXELFORMAT_RGBA8888`.\n\nYou may pass NULL for pixels and 0 for pitch to create a surface that you\nwill fill in with valid values later.\n\n\\param width the width of the surface.\n\\param height the height of the surface.\n\\param format the SDL_PixelFormat for the new surface's pixel format.\n\\param pixels a pointer to existing pixel data.\n\\param pitch the number of bytes between each row, including padding.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurface\n\\sa SDL_DestroySurface",
          "name": "SDL_CreateSurfaceFrom",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "pixels",
              "type": "void *"
            },
            {
              "name": "pitch",
              "type": "int"
            }
          ]
        },
        "SDL_DestroySurface": {
          "doc": "Free a surface.\n\nIt is safe to pass NULL to this function.\n\n\\param surface the SDL_Surface to free.\n\n\\threadsafety No other thread should be using the surface when it is freed.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurface\n\\sa SDL_CreateSurfaceFrom",
          "name": "SDL_DestroySurface",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetSurfaceProperties": {
          "doc": "Get the properties associated with a surface.\n\nThe following properties are understood by SDL:\n\n- `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point\n  surfaces, this defines the value of 100% diffuse white, with higher\n  values being displayed in the High Dynamic Range headroom. This defaults\n  to 203 for HDR10 surfaces and 1.0 for floating point surfaces.\n- `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point\n  surfaces, this defines the maximum dynamic range used by the content, in\n  terms of the SDR white point. This defaults to 0.0, which disables tone\n  mapping.\n- `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator\n  used when compressing from a surface with high dynamic range to another\n  with lower dynamic range. Currently this supports \"chrome\", which uses\n  the same tone mapping that Chrome uses for HDR content, the form \"*=N\",\n  where N is a floating point scale factor applied in linear space, and\n  \"none\", which disables tone mapping. This defaults to \"chrome\".\n- `SDL_PROP_SURFACE_HOTSPOT_X_NUMBER`: the hotspot pixel offset from the\n  left edge of the image, if this surface is being used as a cursor.\n- `SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER`: the hotspot pixel offset from the\n  top edge of the image, if this surface is being used as a cursor.\n\n\\param surface the SDL_Surface structure to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSurfaceProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT",
          "kind": "def",
          "value": "\"SDL.surface.SDR_white_point\""
        },
        "SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT",
          "kind": "def",
          "value": "\"SDL.surface.HDR_headroom\""
        },
        "SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING",
          "kind": "def",
          "value": "\"SDL.surface.tonemap\""
        },
        "SDL_PROP_SURFACE_HOTSPOT_X_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_HOTSPOT_X_NUMBER",
          "kind": "def",
          "value": "\"SDL.surface.hotspot.x\""
        },
        "SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER",
          "kind": "def",
          "value": "\"SDL.surface.hotspot.y\""
        },
        "SDL_SetSurfaceColorspace": {
          "doc": "Set the colorspace used by a surface.\n\nSetting the colorspace doesn't change the pixels, only how they are\ninterpreted in color operations.\n\n\\param surface the SDL_Surface structure to update.\n\\param colorspace an SDL_Colorspace value describing the surface\n                  colorspace.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorspace",
          "name": "SDL_SetSurfaceColorspace",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "colorspace",
              "type": "SDL_Colorspace"
            }
          ]
        },
        "SDL_GetSurfaceColorspace": {
          "doc": "Get the colorspace used by a surface.\n\nThe colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point\nformats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for\nother RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.\n\n\\param surface the SDL_Surface structure to query.\n\\returns the colorspace used by the surface, or SDL_COLORSPACE_UNKNOWN if\n         the surface is NULL.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceColorspace",
          "name": "SDL_GetSurfaceColorspace",
          "kind": "function",
          "type": "SDL_Colorspace",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_CreateSurfacePalette": {
          "doc": "Create a palette and associate it with a surface.\n\nThis function creates a palette compatible with the provided surface. The\npalette is then returned for you to modify, and the surface will\nautomatically use the new palette in future operations. You do not need to\ndestroy the returned palette, it will be freed when the reference count\nreaches 0, usually when the surface is destroyed.\n\nBitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or\nSDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as\nwhite and 1 as black. Other surfaces will get a palette initialized with\nwhite in every entry.\n\nIf this function is called for a surface that already has a palette, a new\npalette will be created to replace it.\n\n\\param surface the SDL_Surface structure to update.\n\\returns a new SDL_Palette structure on success or NULL on failure (e.g. if\n         the surface didn't have an index format); call SDL_GetError() for\n         more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetPaletteColors",
          "name": "SDL_CreateSurfacePalette",
          "kind": "function",
          "type": "SDL_Palette *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetSurfacePalette": {
          "doc": "Set the palette used by a surface.\n\nA single palette can be shared with many surfaces.\n\n\\param surface the SDL_Surface structure to update.\n\\param palette the SDL_Palette structure to use.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePalette\n\\sa SDL_GetSurfacePalette",
          "name": "SDL_SetSurfacePalette",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "palette",
              "type": "SDL_Palette *"
            }
          ]
        },
        "SDL_GetSurfacePalette": {
          "doc": "Get the palette used by a surface.\n\n\\param surface the SDL_Surface structure to query.\n\\returns a pointer to the palette used by the surface, or NULL if there is\n         no palette used.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfacePalette",
          "name": "SDL_GetSurfacePalette",
          "kind": "function",
          "type": "SDL_Palette *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_AddSurfaceAlternateImage": {
          "doc": "Add an alternate version of a surface.\n\nThis function adds an alternate version of this surface, usually used for\ncontent with high DPI representations like cursors or icons. The size,\nformat, and content do not need to match the original surface, and these\nalternate versions will not be updated when the original surface changes.\n\nThis function adds a reference to the alternate version, so you should call\nSDL_DestroySurface() on the image after this call.\n\n\\param surface the SDL_Surface structure to update.\n\\param image a pointer to an alternate SDL_Surface to associate with this\n             surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RemoveSurfaceAlternateImages\n\\sa SDL_GetSurfaceImages\n\\sa SDL_SurfaceHasAlternateImages",
          "name": "SDL_AddSurfaceAlternateImage",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "image",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SurfaceHasAlternateImages": {
          "doc": "Return whether a surface has alternate versions available.\n\n\\param surface the SDL_Surface structure to query.\n\\returns true if alternate versions are available or false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddSurfaceAlternateImage\n\\sa SDL_RemoveSurfaceAlternateImages\n\\sa SDL_GetSurfaceImages",
          "name": "SDL_SurfaceHasAlternateImages",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetSurfaceImages": {
          "doc": "Get an array including all versions of a surface.\n\nThis returns all versions of a surface, with the surface being queried as\nthe first element in the returned array.\n\nFreeing the array of surfaces does not affect the surfaces in the array.\nThey are still referenced by the surface being queried and will be cleaned\nup normally.\n\n\\param surface the SDL_Surface structure to query.\n\\param count a pointer filled in with the number of surface pointers\n             returned, may be NULL.\n\\returns a NULL terminated array of SDL_Surface pointers or NULL on\n         failure; call SDL_GetError() for more information. This should be\n         freed with SDL_free() when it is no longer needed.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddSurfaceAlternateImage\n\\sa SDL_RemoveSurfaceAlternateImages\n\\sa SDL_SurfaceHasAlternateImages",
          "name": "SDL_GetSurfaceImages",
          "kind": "function",
          "type": "SDL_Surface **",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_RemoveSurfaceAlternateImages": {
          "doc": "Remove all alternate versions of a surface.\n\nThis function removes a reference from all the alternative versions,\ndestroying them if this is the last reference to them.\n\n\\param surface the SDL_Surface structure to update.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddSurfaceAlternateImage\n\\sa SDL_GetSurfaceImages\n\\sa SDL_SurfaceHasAlternateImages",
          "name": "SDL_RemoveSurfaceAlternateImages",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_LockSurface": {
          "doc": "Set up a surface for directly accessing the pixels.\n\nBetween calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to\nand read from `surface->pixels`, using the pixel format stored in\n`surface->format`. Once you are done accessing the surface, you should use\nSDL_UnlockSurface() to release it.\n\nNot all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to\n0, then you can read and write to the surface at any time, and the pixel\nformat of the surface will not change.\n\n\\param surface the SDL_Surface structure to be locked.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe. The locking referred to by\n              this function is making the pixels available for direct\n              access, not thread-safe locking.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MUSTLOCK\n\\sa SDL_UnlockSurface",
          "name": "SDL_LockSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_UnlockSurface": {
          "doc": "Release a surface after directly accessing the pixels.\n\n\\param surface the SDL_Surface structure to be unlocked.\n\n\\threadsafety This function is not thread safe. The locking referred to by\n              this function is making the pixels available for direct\n              access, not thread-safe locking.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockSurface",
          "name": "SDL_UnlockSurface",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_LoadBMP_IO": {
          "doc": "Load a BMP image from a seekable SDL data stream.\n\nThe new surface should be freed with SDL_DestroySurface(). Not doing so\nwill result in a memory leak.\n\n\\param src the data stream for the surface.\n\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even\n               in the case of an error.\n\\returns a pointer to a new SDL_Surface structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface\n\\sa SDL_LoadBMP\n\\sa SDL_SaveBMP_IO",
          "name": "SDL_LoadBMP_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "SDL_LoadBMP": {
          "doc": "Load a BMP image from a file.\n\nThe new surface should be freed with SDL_DestroySurface(). Not doing so\nwill result in a memory leak.\n\n\\param file the BMP file to load.\n\\returns a pointer to a new SDL_Surface structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface\n\\sa SDL_LoadBMP_IO\n\\sa SDL_SaveBMP",
          "name": "SDL_LoadBMP",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "SDL_SaveBMP_IO": {
          "doc": "Save a surface to a seekable SDL data stream in BMP format.\n\nSurfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\nBMP directly. Other RGB formats with 8-bit or higher get converted to a\n24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\nsurface before they are saved. YUV and paletted 1-bit and 4-bit formats are\nnot supported.\n\n\\param surface the SDL_Surface structure containing the image to be saved.\n\\param dst a data stream to save to.\n\\param closeio if true, calls SDL_CloseIO() on `dst` before returning, even\n               in the case of an error.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadBMP_IO\n\\sa SDL_SaveBMP",
          "name": "SDL_SaveBMP_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "SDL_SaveBMP": {
          "doc": "Save a surface to a file.\n\nSurfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\nBMP directly. Other RGB formats with 8-bit or higher get converted to a\n24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\nsurface before they are saved. YUV and paletted 1-bit and 4-bit formats are\nnot supported.\n\n\\param surface the SDL_Surface structure containing the image to be saved.\n\\param file a file to save to.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadBMP\n\\sa SDL_SaveBMP_IO",
          "name": "SDL_SaveBMP",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "SDL_SetSurfaceRLE": {
          "doc": "Set the RLE acceleration hint for a surface.\n\nIf RLE is enabled, color key and alpha blending blits are much faster, but\nthe surface must be locked before directly accessing the pixels.\n\n\\param surface the SDL_Surface structure to optimize.\n\\param enabled true to enable RLE acceleration, false to disable it.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface\n\\sa SDL_LockSurface\n\\sa SDL_UnlockSurface",
          "name": "SDL_SetSurfaceRLE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_SurfaceHasRLE": {
          "doc": "Returns whether the surface is RLE enabled.\n\nIt is safe to pass a NULL `surface` here; it will return false.\n\n\\param surface the SDL_Surface structure to query.\n\\returns true if the surface is RLE enabled, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceRLE",
          "name": "SDL_SurfaceHasRLE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetSurfaceColorKey": {
          "doc": "Set the color key (transparent pixel) in a surface.\n\nThe color key defines a pixel value that will be treated as transparent in\na blit. For example, one can use this to specify that cyan pixels should be\nconsidered transparent, and therefore not rendered.\n\nIt is a pixel of the format used by the surface, as generated by\nSDL_MapRGB().\n\n\\param surface the SDL_Surface structure to update.\n\\param enabled true to enable color key, false to disable color key.\n\\param key the transparent pixel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorKey\n\\sa SDL_SetSurfaceRLE\n\\sa SDL_SurfaceHasColorKey",
          "name": "SDL_SetSurfaceColorKey",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "enabled",
              "type": "bool"
            },
            {
              "name": "key",
              "type": "Uint32"
            }
          ]
        },
        "SDL_SurfaceHasColorKey": {
          "doc": "Returns whether the surface has a color key.\n\nIt is safe to pass a NULL `surface` here; it will return false.\n\n\\param surface the SDL_Surface structure to query.\n\\returns true if the surface has a color key, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceColorKey\n\\sa SDL_GetSurfaceColorKey",
          "name": "SDL_SurfaceHasColorKey",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetSurfaceColorKey": {
          "doc": "Get the color key (transparent pixel) for a surface.\n\nThe color key is a pixel of the format used by the surface, as generated by\nSDL_MapRGB().\n\nIf the surface doesn't have color key enabled this function returns false.\n\n\\param surface the SDL_Surface structure to query.\n\\param key a pointer filled in with the transparent pixel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceColorKey\n\\sa SDL_SurfaceHasColorKey",
          "name": "SDL_GetSurfaceColorKey",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "key",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_SetSurfaceColorMod": {
          "doc": "Set an additional color value multiplied into blit operations.\n\nWhen this surface is blitted, during the blit operation each source color\nchannel is modulated by the appropriate color value according to the\nfollowing formula:\n\n`srcC = srcC * (color / 255)`\n\n\\param surface the SDL_Surface structure to update.\n\\param r the red color value multiplied into blit operations.\n\\param g the green color value multiplied into blit operations.\n\\param b the blue color value multiplied into blit operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorMod\n\\sa SDL_SetSurfaceAlphaMod",
          "name": "SDL_SetSurfaceColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_GetSurfaceColorMod": {
          "doc": "Get the additional color value multiplied into blit operations.\n\n\\param surface the SDL_Surface structure to query.\n\\param r a pointer filled in with the current red color value.\n\\param g a pointer filled in with the current green color value.\n\\param b a pointer filled in with the current blue color value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceAlphaMod\n\\sa SDL_SetSurfaceColorMod",
          "name": "SDL_GetSurfaceColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_SetSurfaceAlphaMod": {
          "doc": "Set an additional alpha value used in blit operations.\n\nWhen this surface is blitted, during the blit operation the source alpha\nvalue is modulated by this alpha value according to the following formula:\n\n`srcA = srcA * (alpha / 255)`\n\n\\param surface the SDL_Surface structure to update.\n\\param alpha the alpha value multiplied into blit operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceAlphaMod\n\\sa SDL_SetSurfaceColorMod",
          "name": "SDL_SetSurfaceAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "alpha",
              "type": "Uint8"
            }
          ]
        },
        "SDL_GetSurfaceAlphaMod": {
          "doc": "Get the additional alpha value used in blit operations.\n\n\\param surface the SDL_Surface structure to query.\n\\param alpha a pointer filled in with the current alpha value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorMod\n\\sa SDL_SetSurfaceAlphaMod",
          "name": "SDL_GetSurfaceAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "alpha",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_SetSurfaceBlendMode": {
          "doc": "Set the blend mode used for blit operations.\n\nTo copy a surface to another surface (or texture) without blending with the\nexisting data, the blendmode of the SOURCE surface should be set to\n`SDL_BLENDMODE_NONE`.\n\n\\param surface the SDL_Surface structure to update.\n\\param blendMode the SDL_BlendMode to use for blit blending.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceBlendMode",
          "name": "SDL_SetSurfaceBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode"
            }
          ]
        },
        "SDL_GetSurfaceBlendMode": {
          "doc": "Get the blend mode used for blit operations.\n\n\\param surface the SDL_Surface structure to query.\n\\param blendMode a pointer filled in with the current SDL_BlendMode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceBlendMode",
          "name": "SDL_GetSurfaceBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode *"
            }
          ]
        },
        "SDL_SetSurfaceClipRect": {
          "doc": "Set the clipping rectangle for a surface.\n\nWhen `surface` is the destination of a blit, only the area within the clip\nrectangle is drawn into.\n\nNote that blits are automatically clipped to the edges of the source and\ndestination surfaces.\n\n\\param surface the SDL_Surface structure to be clipped.\n\\param rect the SDL_Rect structure representing the clipping rectangle, or\n            NULL to disable clipping.\n\\returns true if the rectangle intersects the surface, otherwise false and\n         blits will be completely clipped.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceClipRect",
          "name": "SDL_SetSurfaceClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetSurfaceClipRect": {
          "doc": "Get the clipping rectangle for a surface.\n\nWhen `surface` is the destination of a blit, only the area within the clip\nrectangle is drawn into.\n\n\\param surface the SDL_Surface structure representing the surface to be\n               clipped.\n\\param rect an SDL_Rect structure filled in with the clipping rectangle for\n            the surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceClipRect",
          "name": "SDL_GetSurfaceClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_FlipSurface": {
          "doc": "Flip a surface vertically or horizontally.\n\n\\param surface the surface to flip.\n\\param flip the direction to flip.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_FlipSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "flip",
              "type": "SDL_FlipMode"
            }
          ]
        },
        "SDL_DuplicateSurface": {
          "doc": "Creates a new surface identical to the existing surface.\n\nIf the original surface has alternate images, the new surface will have a\nreference to them as well.\n\nThe returned surface should be freed with SDL_DestroySurface().\n\n\\param surface the surface to duplicate.\n\\returns a copy of the surface or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface",
          "name": "SDL_DuplicateSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_ScaleSurface": {
          "doc": "Creates a new surface identical to the existing surface, scaled to the\ndesired size.\n\nThe returned surface should be freed with SDL_DestroySurface().\n\n\\param surface the surface to duplicate and scale.\n\\param width the width of the new surface.\n\\param height the height of the new surface.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns a copy of the surface or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface",
          "name": "SDL_ScaleSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_ConvertSurface": {
          "doc": "Copy an existing surface to a new surface of the specified format.\n\nThis function is used to optimize images for faster *repeat* blitting. This\nis accomplished by converting the original and storing the result as a new\nsurface. The new, optimized surface can then be used as the source for\nfuture blits, making them faster.\n\nIf you are converting to an indexed surface and want to map colors to a\npalette, you can use SDL_ConvertSurfaceAndColorspace() instead.\n\nIf the original surface has alternate images, the new surface will have a\nreference to them as well.\n\n\\param surface the existing SDL_Surface structure to convert.\n\\param format the new pixel format.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertSurfaceAndColorspace\n\\sa SDL_DestroySurface",
          "name": "SDL_ConvertSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_ConvertSurfaceAndColorspace": {
          "doc": "Copy an existing surface to a new surface of the specified format and\ncolorspace.\n\nThis function converts an existing surface to a new format and colorspace\nand returns the new surface. This will perform any pixel format and\ncolorspace conversion needed.\n\nIf the original surface has alternate images, the new surface will have a\nreference to them as well.\n\n\\param surface the existing SDL_Surface structure to convert.\n\\param format the new pixel format.\n\\param palette an optional palette to use for indexed formats, may be NULL.\n\\param colorspace the new colorspace.\n\\param props an SDL_PropertiesID with additional color properties, or 0.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertSurface\n\\sa SDL_DestroySurface",
          "name": "SDL_ConvertSurfaceAndColorspace",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "palette",
              "type": "SDL_Palette *"
            },
            {
              "name": "colorspace",
              "type": "SDL_Colorspace"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_ConvertPixels": {
          "doc": "Copy a block of pixels of one format to another format.\n\n\\param width the width of the block to copy, in pixels.\n\\param height the height of the block to copy, in pixels.\n\\param src_format an SDL_PixelFormat value of the `src` pixels format.\n\\param src a pointer to the source pixels.\n\\param src_pitch the pitch of the source pixels, in bytes.\n\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.\n\\param dst a pointer to be filled in with new pixel data.\n\\param dst_pitch the pitch of the destination pixels, in bytes.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination pixels should not be used from two\n              threads at once. It is safe to use the same source pixels\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertPixelsAndColorspace",
          "name": "SDL_ConvertPixels",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "src_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "src_pitch",
              "type": "int"
            },
            {
              "name": "dst_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "dst_pitch",
              "type": "int"
            }
          ]
        },
        "SDL_ConvertPixelsAndColorspace": {
          "doc": "Copy a block of pixels of one format and colorspace to another format and\ncolorspace.\n\n\\param width the width of the block to copy, in pixels.\n\\param height the height of the block to copy, in pixels.\n\\param src_format an SDL_PixelFormat value of the `src` pixels format.\n\\param src_colorspace an SDL_Colorspace value describing the colorspace of\n                      the `src` pixels.\n\\param src_properties an SDL_PropertiesID with additional source color\n                      properties, or 0.\n\\param src a pointer to the source pixels.\n\\param src_pitch the pitch of the source pixels, in bytes.\n\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.\n\\param dst_colorspace an SDL_Colorspace value describing the colorspace of\n                      the `dst` pixels.\n\\param dst_properties an SDL_PropertiesID with additional destination color\n                      properties, or 0.\n\\param dst a pointer to be filled in with new pixel data.\n\\param dst_pitch the pitch of the destination pixels, in bytes.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination pixels should not be used from two\n              threads at once. It is safe to use the same source pixels\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertPixels",
          "name": "SDL_ConvertPixelsAndColorspace",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "src_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "src_colorspace",
              "type": "SDL_Colorspace"
            },
            {
              "name": "src_properties",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "src_pitch",
              "type": "int"
            },
            {
              "name": "dst_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "dst_colorspace",
              "type": "SDL_Colorspace"
            },
            {
              "name": "dst_properties",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "dst_pitch",
              "type": "int"
            }
          ]
        },
        "SDL_PremultiplyAlpha": {
          "doc": "Premultiply the alpha on a block of pixels.\n\nThis is safe to use with src == dst, but not for other overlapping areas.\n\n\\param width the width of the block to convert, in pixels.\n\\param height the height of the block to convert, in pixels.\n\\param src_format an SDL_PixelFormat value of the `src` pixels format.\n\\param src a pointer to the source pixels.\n\\param src_pitch the pitch of the source pixels, in bytes.\n\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.\n\\param dst a pointer to be filled in with premultiplied pixel data.\n\\param dst_pitch the pitch of the destination pixels, in bytes.\n\\param linear true to convert from sRGB to linear space for the alpha\n              multiplication, false to do multiplication in sRGB space.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination pixels should not be used from two\n              threads at once. It is safe to use the same source pixels\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PremultiplyAlpha",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "src_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "src_pitch",
              "type": "int"
            },
            {
              "name": "dst_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "dst_pitch",
              "type": "int"
            },
            {
              "name": "linear",
              "type": "bool"
            }
          ]
        },
        "SDL_PremultiplySurfaceAlpha": {
          "doc": "Premultiply the alpha in a surface.\n\nThis is safe to use with src == dst, but not for other overlapping areas.\n\n\\param surface the surface to modify.\n\\param linear true to convert from sRGB to linear space for the alpha\n              multiplication, false to do multiplication in sRGB space.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PremultiplySurfaceAlpha",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "linear",
              "type": "bool"
            }
          ]
        },
        "SDL_ClearSurface": {
          "doc": "Clear a surface with a specific color, with floating point precision.\n\nThis function handles all surface formats, and ignores any clip rectangle.\n\nIf the surface is YUV, the color is assumed to be in the sRGB colorspace,\notherwise the color is assumed to be in the colorspace of the suface.\n\n\\param surface the SDL_Surface to clear.\n\\param r the red component of the pixel, normally in the range 0-1.\n\\param g the green component of the pixel, normally in the range 0-1.\n\\param b the blue component of the pixel, normally in the range 0-1.\n\\param a the alpha component of the pixel, normally in the range 0-1.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ClearSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        },
        "SDL_FillSurfaceRect": {
          "doc": "Perform a fast fill of a rectangle with a specific color.\n\n`color` should be a pixel of the format used by the surface, and can be\ngenerated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\nalpha component then the destination is simply filled with that alpha\ninformation, no blending takes place.\n\nIf there is a clip rectangle set on the destination (set via\nSDL_SetSurfaceClipRect()), then this function will fill based on the\nintersection of the clip rectangle and `rect`.\n\n\\param dst the SDL_Surface structure that is the drawing target.\n\\param rect the SDL_Rect structure representing the rectangle to fill, or\n            NULL to fill the entire surface.\n\\param color the color to fill with.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FillSurfaceRects",
          "name": "SDL_FillSurfaceRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "color",
              "type": "Uint32"
            }
          ]
        },
        "SDL_FillSurfaceRects": {
          "doc": "Perform a fast fill of a set of rectangles with a specific color.\n\n`color` should be a pixel of the format used by the surface, and can be\ngenerated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\nalpha component then the destination is simply filled with that alpha\ninformation, no blending takes place.\n\nIf there is a clip rectangle set on the destination (set via\nSDL_SetSurfaceClipRect()), then this function will fill based on the\nintersection of the clip rectangle and `rect`.\n\n\\param dst the SDL_Surface structure that is the drawing target.\n\\param rects an array of SDL_Rects representing the rectangles to fill.\n\\param count the number of rectangles in the array.\n\\param color the color to fill with.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FillSurfaceRect",
          "name": "SDL_FillSurfaceRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "rects",
              "type": "const SDL_Rect *"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "color",
              "type": "Uint32"
            }
          ]
        },
        "SDL_BlitSurface": {
          "doc": "Performs a fast blit from the source surface to the destination surface\nwith clipping.\n\nIf either `srcrect` or `dstrect` are NULL, the entire surface (`src` or\n`dst`) is copied while ensuring clipping to `dst->clip_rect`.\n\nThe blit function should not be called on a locked surface.\n\nThe blit semantics for surfaces with and without blending and colorkey are\ndefined as follows:\n\n```\n   RGBA->RGB:\n     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source alpha-channel and per-surface alpha)\n      SDL_SRCCOLORKEY ignored.\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy RGB.\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      RGB values of the source color key, ignoring alpha in the\n      comparison.\n\n  RGB->RGBA:\n    Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source per-surface alpha)\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy RGB, set destination alpha to source per-surface alpha value.\n    both:\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      source color key.\n\n  RGBA->RGBA:\n    Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source alpha-channel and per-surface alpha)\n      SDL_SRCCOLORKEY ignored.\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy all of RGBA to the destination.\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      RGB values of the source color key, ignoring alpha in the\n      comparison.\n\n  RGB->RGB:\n    Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source per-surface alpha)\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy RGB.\n    both:\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      source color key.\n```\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the x and y position in\n               the destination surface, or NULL for (0,0). The width and\n               height are ignored, and are copied from `srcrect`. If you\n               want a specific width and height, you should use\n               SDL_BlitSurfaceScaled().\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurfaceScaled",
          "name": "SDL_BlitSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurfaceUnchecked": {
          "doc": "Perform low-level surface blitting only.\n\nThis is a semi-private blit function and it performs low-level surface\nblitting, assuming the input rectangles have already been clipped.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, may not be NULL.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, may not be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceUnchecked",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurfaceScaled": {
          "doc": "Perform a scaled blit to a destination surface, which may be of a different\nformat.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire\n               destination surface.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceScaled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_BlitSurfaceUncheckedScaled": {
          "doc": "Perform low-level surface scaled blitting only.\n\nThis is a semi-private function and it performs low-level surface blitting,\nassuming the input rectangles have already been clipped.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, may not be NULL.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, may not be NULL.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurfaceScaled",
          "name": "SDL_BlitSurfaceUncheckedScaled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_StretchSurface": {
          "doc": "Perform a stretched pixel copy from one surface to another.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, may not be NULL.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, may not be NULL.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.4.0.\n\n\\sa SDL_BlitSurfaceScaled",
          "name": "SDL_StretchSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_BlitSurfaceTiled": {
          "doc": "Perform a tiled blit to a destination surface, which may be of a different\nformat.\n\nThe pixels in `srcrect` will be repeated as many times as needed to\ncompletely fill `dstrect`.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceTiled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurfaceTiledWithScale": {
          "doc": "Perform a scaled and tiled blit to a destination surface, which may be of a\ndifferent format.\n\nThe pixels in `srcrect` will be scaled and repeated as many times as needed\nto completely fill `dstrect`.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param scale the scale used to transform srcrect into the destination\n             rectangle, e.g. a 32x32 texture with a scale of 2 would fill\n             64x64 tiles.\n\\param scaleMode scale algorithm to be used.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceTiledWithScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurface9Grid": {
          "doc": "Perform a scaled blit using the 9-grid algorithm to a destination surface,\nwhich may be of a different format.\n\nThe pixels in the source surface are split into a 3x3 grid, using the\ndifferent corner sizes for each corner, and the sides and center making up\nthe remaining pixels. The corners are then scaled using `scale` and fit\ninto the corners of the destination rectangle. The sides and center are\nthen stretched into place to cover the remaining destination rectangle.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be used\n               for the 9-grid, or NULL to use the entire surface.\n\\param left_width the width, in pixels, of the left corners in `srcrect`.\n\\param right_width the width, in pixels, of the right corners in `srcrect`.\n\\param top_height the height, in pixels, of the top corners in `srcrect`.\n\\param bottom_height the height, in pixels, of the bottom corners in\n                     `srcrect`.\n\\param scale the scale used to transform the corner of `srcrect` into the\n             corner of `dstrect`, or 0.0f for an unscaled blit.\n\\param scaleMode scale algorithm to be used.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety Only one thread should be using the `src` and `dst` surfaces\n              at any given time.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurface9Grid",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "left_width",
              "type": "int"
            },
            {
              "name": "right_width",
              "type": "int"
            },
            {
              "name": "top_height",
              "type": "int"
            },
            {
              "name": "bottom_height",
              "type": "int"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_MapSurfaceRGB": {
          "doc": "Map an RGB triple to an opaque pixel value for a surface.\n\nThis function maps the RGB color value to the specified pixel format and\nreturns the pixel value best approximating the given RGB color value for\nthe given pixel format.\n\nIf the surface has a palette, the index of the closest matching color in\nthe palette will be returned.\n\nIf the surface pixel format has an alpha component it will be returned as\nall 1 bits (fully opaque).\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param surface the surface to use for the pixel format and palette.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MapSurfaceRGBA",
          "name": "SDL_MapSurfaceRGB",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_MapSurfaceRGBA": {
          "doc": "Map an RGBA quadruple to a pixel value for a surface.\n\nThis function maps the RGBA color value to the specified pixel format and\nreturns the pixel value best approximating the given RGBA color value for\nthe given pixel format.\n\nIf the surface pixel format has no alpha component the alpha value will be\nignored (as it will be in formats with a palette).\n\nIf the surface has a palette, the index of the closest matching color in\nthe palette will be returned.\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param surface the surface to use for the pixel format and palette.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\param a the alpha component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MapSurfaceRGB",
          "name": "SDL_MapSurfaceRGBA",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_ReadSurfacePixel": {
          "doc": "Retrieves a single pixel from a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\nLike SDL_GetRGBA, this uses the entire 0..255 range when converting color\ncomponents from pixel formats with less than 8 bits per RGB component.\n\n\\param surface the surface to read.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r a pointer filled in with the red channel, 0-255, or NULL to ignore\n         this channel.\n\\param g a pointer filled in with the green channel, 0-255, or NULL to\n         ignore this channel.\n\\param b a pointer filled in with the blue channel, 0-255, or NULL to\n         ignore this channel.\n\\param a a pointer filled in with the alpha channel, 0-255, or NULL to\n         ignore this channel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadSurfacePixel",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_ReadSurfacePixelFloat": {
          "doc": "Retrieves a single pixel from a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\n\\param surface the surface to read.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r a pointer filled in with the red channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\param g a pointer filled in with the green channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\param b a pointer filled in with the blue channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\param a a pointer filled in with the alpha channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadSurfacePixelFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            },
            {
              "name": "a",
              "type": "float *"
            }
          ]
        },
        "SDL_WriteSurfacePixel": {
          "doc": "Writes a single pixel to a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\nLike SDL_MapRGBA, this uses the entire 0..255 range when converting color\ncomponents from pixel formats with less than 8 bits per RGB component.\n\n\\param surface the surface to write.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r the red channel value, 0-255.\n\\param g the green channel value, 0-255.\n\\param b the blue channel value, 0-255.\n\\param a the alpha channel value, 0-255.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteSurfacePixel",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_WriteSurfacePixelFloat": {
          "doc": "Writes a single pixel to a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\n\\param surface the surface to write.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r the red channel value, normally in the range 0-1.\n\\param g the green channel value, normally in the range 0-1.\n\\param b the blue channel value, normally in the range 0-1.\n\\param a the alpha channel value, normally in the range 0-1.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteSurfacePixelFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        }
      }
    },
    "SDL_clipboard.h": {
      "name": "SDL_clipboard.h",
      "doc": "# CategoryClipboard\n\nSDL provides access to the system clipboard, both for reading information\nfrom other processes and publishing information of its own.\n\nThis is not just text! SDL apps can access and publish data by mimetype.\n\n## Basic use (text)\n\nObtaining and publishing simple text to the system clipboard is as easy as\ncalling SDL_GetClipboardText() and SDL_SetClipboardText(), respectively.\nThese deal with C strings in UTF-8 encoding. Data transmission and encoding\nconversion is completely managed by SDL.\n\n## Clipboard callbacks (data other than text)\n\nThings get more complicated when the clipboard contains something other\nthan text. Not only can the system clipboard contain data of any type, in\nsome cases it can contain the same data in different formats! For example,\nan image painting app might let the user copy a graphic to the clipboard,\nand offers it in .BMP, .JPG, or .PNG format for other apps to consume.\n\nObtaining clipboard data (\"pasting\") like this is a matter of calling\nSDL_GetClipboardData() and telling it the mimetype of the data you want.\nBut how does one know if that format is available? SDL_HasClipboardData()\ncan report if a specific mimetype is offered, and\nSDL_GetClipboardMimeTypes() can provide the entire list of mimetypes\navailable, so the app can decide what to do with the data and what formats\nit can support.\n\nSetting the clipboard (\"copying\") to arbitrary data is done with\nSDL_SetClipboardData. The app does not provide the data in this call, but\nrather the mimetypes it is willing to provide and a callback function.\nDuring the callback, the app will generate the data. This allows massive\ndata sets to be provided to the clipboard, without any data being copied\nbefore it is explicitly requested. More specifically, it allows an app to\noffer data in multiple formats without providing a copy of all of them\nupfront. If the app has an image that it could provide in PNG or JPG\nformat, it doesn't have to encode it to either of those unless and until\nsomething tries to paste it.\n\n## Primary Selection\n\nThe X11 and Wayland video targets have a concept of the \"primary selection\"\nin addition to the usual clipboard. This is generally highlighted (but not\nexplicitly copied) text from various apps. SDL offers APIs for this through\nSDL_GetPrimarySelectionText() and SDL_SetPrimarySelectionText(). SDL offers\nthese APIs on platforms without this concept, too, but only so far that it\nwill keep a copy of a string that the app sets for later retrieval; the\noperating system will not ever attempt to change the string externally if\nit doesn't support a primary selection.",
      "entries": {
        "SDL_SetClipboardText": {
          "doc": "Put UTF-8 text into the clipboard.\n\n\\param text the text to store in the clipboard.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetClipboardText\n\\sa SDL_HasClipboardText",
          "name": "SDL_SetClipboardText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetClipboardText": {
          "doc": "Get UTF-8 text from the clipboard.\n\nThis functions returns an empty string if there was not enough memory left\nfor a copy of the clipboard's content.\n\n\\returns the clipboard text on success or an empty string on failure; call\n         SDL_GetError() for more information. This should be freed with\n         SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasClipboardText\n\\sa SDL_SetClipboardText",
          "name": "SDL_GetClipboardText",
          "kind": "function",
          "type": "char *",
          "parameters": []
        },
        "SDL_HasClipboardText": {
          "doc": "Query whether the clipboard exists and contains a non-empty text string.\n\n\\returns true if the clipboard has text, or false if it does not.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetClipboardText\n\\sa SDL_SetClipboardText",
          "name": "SDL_HasClipboardText",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_SetPrimarySelectionText": {
          "doc": "Put UTF-8 text into the primary selection.\n\n\\param text the text to store in the primary selection.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPrimarySelectionText\n\\sa SDL_HasPrimarySelectionText",
          "name": "SDL_SetPrimarySelectionText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetPrimarySelectionText": {
          "doc": "Get UTF-8 text from the primary selection.\n\nThis functions returns an empty string if there was not enough memory left\nfor a copy of the primary selection's content.\n\n\\returns the primary selection text on success or an empty string on\n         failure; call SDL_GetError() for more information. This should be\n         freed with SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasPrimarySelectionText\n\\sa SDL_SetPrimarySelectionText",
          "name": "SDL_GetPrimarySelectionText",
          "kind": "function",
          "type": "char *",
          "parameters": []
        },
        "SDL_HasPrimarySelectionText": {
          "doc": "Query whether the primary selection exists and contains a non-empty text\nstring.\n\n\\returns true if the primary selection has text, or false if it does not.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPrimarySelectionText\n\\sa SDL_SetPrimarySelectionText",
          "name": "SDL_HasPrimarySelectionText",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_ClipboardDataCallback": {
          "doc": "Callback function that will be called when data for the specified mime-type\nis requested by the OS.\n\nThe callback function is called with NULL as the mime_type when the\nclipboard is cleared or new data is set. The clipboard is automatically\ncleared in SDL_Quit().\n\n\\param userdata a pointer to provided user data.\n\\param mime_type the requested mime-type.\n\\param size a pointer filled in with the length of the returned data.\n\\returns a pointer to the data for the provided mime-type. Returning NULL\n         or setting length to 0 will cause no data to be sent to the\n         \"receiver\". It is up to the receiver to handle this. Essentially\n         returning no data is more or less undefined behavior and may cause\n         breakage in receiving applications. The returned data will not be\n         freed so it needs to be retained and dealt with internally.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetClipboardData",
          "name": "SDL_ClipboardDataCallback",
          "kind": "callback",
          "type": "const void *",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "mime_type",
              "type": "const char *"
            },
            {
              "name": "size",
              "type": "size_t *"
            }
          ]
        },
        "SDL_ClipboardCleanupCallback": {
          "doc": "Callback function that will be called when the clipboard is cleared, or new\ndata is set.\n\n\\param userdata a pointer to provided user data.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetClipboardData",
          "name": "SDL_ClipboardCleanupCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetClipboardData": {
          "doc": "Offer clipboard data to the OS.\n\nTell the operating system that the application is offering clipboard data\nfor each of the provided mime-types. Once another application requests the\ndata the callback function will be called, allowing it to generate and\nrespond with the data for the requested mime-type.\n\nThe size of text data does not include any terminator, and the text does\nnot need to be null terminated (e.g. you can directly copy a portion of a\ndocument).\n\n\\param callback a function pointer to the function that provides the\n                clipboard data.\n\\param cleanup a function pointer to the function that cleans up the\n               clipboard data.\n\\param userdata an opaque pointer that will be forwarded to the callbacks.\n\\param mime_types a list of mime-types that are being offered.\n\\param num_mime_types the number of mime-types in the mime_types list.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ClearClipboardData\n\\sa SDL_GetClipboardData\n\\sa SDL_HasClipboardData",
          "name": "SDL_SetClipboardData",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_ClipboardDataCallback"
            },
            {
              "name": "cleanup",
              "type": "SDL_ClipboardCleanupCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "mime_types",
              "type": "const char **"
            },
            {
              "name": "num_mime_types",
              "type": "size_t"
            }
          ]
        },
        "SDL_ClearClipboardData": {
          "doc": "Clear the clipboard data.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetClipboardData",
          "name": "SDL_ClearClipboardData",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GetClipboardData": {
          "doc": "Get the data from clipboard for a given mime type.\n\nThe size of text data does not include the terminator, but the text is\nguaranteed to be null terminated.\n\n\\param mime_type the mime type to read from the clipboard.\n\\param size a pointer filled in with the length of the returned data.\n\\returns the retrieved data buffer or NULL on failure; call SDL_GetError()\n         for more information. This should be freed with SDL_free() when it\n         is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasClipboardData\n\\sa SDL_SetClipboardData",
          "name": "SDL_GetClipboardData",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "mime_type",
              "type": "const char *"
            },
            {
              "name": "size",
              "type": "size_t *"
            }
          ]
        },
        "SDL_HasClipboardData": {
          "doc": "Query whether there is data in the clipboard for the provided mime type.\n\n\\param mime_type the mime type to check for data for.\n\\returns true if there exists data in clipboard for the provided mime type,\n         false if it does not.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetClipboardData\n\\sa SDL_GetClipboardData",
          "name": "SDL_HasClipboardData",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "mime_type",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetClipboardMimeTypes": {
          "doc": "Retrieve the list of mime types available in the clipboard.\n\n\\param num_mime_types a pointer filled with the number of mime types, may\n                      be NULL.\n\\returns a null terminated array of strings with mime types, or NULL on\n         failure; call SDL_GetError() for more information. This should be\n         freed with SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetClipboardData",
          "name": "SDL_GetClipboardMimeTypes",
          "kind": "function",
          "type": "char **",
          "parameters": [
            {
              "name": "num_mime_types",
              "type": "size_t *"
            }
          ]
        }
      }
    },
    "SDL_audio.h": {
      "name": "SDL_audio.h",
      "doc": "# CategoryAudio\n\nAudio functionality for the SDL library.\n\nAll audio in SDL3 revolves around SDL_AudioStream. Whether you want to play\nor record audio, convert it, stream it, buffer it, or mix it, you're going\nto be passing it through an audio stream.\n\nAudio streams are quite flexible; they can accept any amount of data at a\ntime, in any supported format, and output it as needed in any other format,\neven if the data format changes on either side halfway through.\n\nAn app opens an audio device and binds any number of audio streams to it,\nfeeding more data to the streams as available. When the device needs more\ndata, it will pull it from all bound streams and mix them together for\nplayback.\n\nAudio streams can also use an app-provided callback to supply data\non-demand, which maps pretty closely to the SDL2 audio model.\n\nSDL also provides a simple .WAV loader in SDL_LoadWAV (and SDL_LoadWAV_IO\nif you aren't reading from a file) as a basic means to load sound data into\nyour program.\n\n## Logical audio devices\n\nIn SDL3, opening a physical device (like a SoundBlaster 16 Pro) gives you a\nlogical device ID that you can bind audio streams to. In almost all cases,\nlogical devices can be used anywhere in the API that a physical device is\nnormally used. However, since each device opening generates a new logical\ndevice, different parts of the program (say, a VoIP library, or\ntext-to-speech framework, or maybe some other sort of mixer on top of SDL)\ncan have their own device opens that do not interfere with each other; each\nlogical device will mix its separate audio down to a single buffer, fed to\nthe physical device, behind the scenes. As many logical devices as you like\ncan come and go; SDL will only have to open the physical device at the OS\nlevel once, and will manage all the logical devices on top of it\ninternally.\n\nOne other benefit of logical devices: if you don't open a specific physical\ndevice, instead opting for the default, SDL can automatically migrate those\nlogical devices to different hardware as circumstances change: a user\nplugged in headphones? The system default changed? SDL can transparently\nmigrate the logical devices to the correct physical device seamlessly and\nkeep playing; the app doesn't even have to know it happened if it doesn't\nwant to.\n\n## Simplified audio\n\nAs a simplified model for when a single source of audio is all that's\nneeded, an app can use SDL_OpenAudioDeviceStream, which is a single\nfunction to open an audio device, create an audio stream, bind that stream\nto the newly-opened device, and (optionally) provide a callback for\nobtaining audio data. When using this function, the primary interface is\nthe SDL_AudioStream and the device handle is mostly hidden away; destroying\na stream created through this function will also close the device, stream\nbindings cannot be changed, etc. One other quirk of this is that the device\nis started in a _paused_ state and must be explicitly resumed; this is\npartially to offer a clean migration for SDL2 apps and partially because\nthe app might have to do more setup before playback begins; in the\nnon-simplified form, nothing will play until a stream is bound to a device,\nso they start _unpaused_.\n\n## Channel layouts\n\nAudio data passing through SDL is uncompressed PCM data, interleaved. One\ncan provide their own decompression through an MP3, etc, decoder, but SDL\ndoes not provide this directly. Each interleaved channel of data is meant\nto be in a specific order.\n\nAbbreviations:\n\n- FRONT = single mono speaker\n- FL = front left speaker\n- FR = front right speaker\n- FC = front center speaker\n- BL = back left speaker\n- BR = back right speaker\n- SR = surround right speaker\n- SL = surround left speaker\n- BC = back center speaker\n- LFE = low-frequency speaker\n\nThese are listed in the order they are laid out in memory, so \"FL, FR\"\nmeans \"the front left speaker is laid out in memory first, then the front\nright, then it repeats for the next audio frame\".\n\n- 1 channel (mono) layout: FRONT\n- 2 channels (stereo) layout: FL, FR\n- 3 channels (2.1) layout: FL, FR, LFE\n- 4 channels (quad) layout: FL, FR, BL, BR\n- 5 channels (4.1) layout: FL, FR, LFE, BL, BR\n- 6 channels (5.1) layout: FL, FR, FC, LFE, BL, BR (last two can also be\n  SL, SR)\n- 7 channels (6.1) layout: FL, FR, FC, LFE, BC, SL, SR\n- 8 channels (7.1) layout: FL, FR, FC, LFE, BL, BR, SL, SR\n\nThis is the same order as DirectSound expects, but applied to all\nplatforms; SDL will swizzle the channels as necessary if a platform expects\nsomething different.\n\nSDL_AudioStream can also be provided channel maps to change this ordering\nto whatever is necessary, in other audio processing scenarios.",
      "entries": {
        "SDL_AUDIO_MASK_BITSIZE": {
          "doc": "Mask of bits in an SDL_AudioFormat that contains the format bit size.\n\nGenerally one should use SDL_AUDIO_BITSIZE instead of this macro directly.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_MASK_BITSIZE",
          "kind": "def",
          "value": "(0xFFu)"
        },
        "SDL_AUDIO_MASK_FLOAT": {
          "doc": "Mask of bits in an SDL_AudioFormat that contain the floating point flag.\n\nGenerally one should use SDL_AUDIO_ISFLOAT instead of this macro directly.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_MASK_FLOAT",
          "kind": "def",
          "value": "(1u<<8)"
        },
        "SDL_AUDIO_MASK_BIG_ENDIAN": {
          "doc": "Mask of bits in an SDL_AudioFormat that contain the bigendian flag.\n\nGenerally one should use SDL_AUDIO_ISBIGENDIAN or SDL_AUDIO_ISLITTLEENDIAN\ninstead of this macro directly.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_MASK_BIG_ENDIAN",
          "kind": "def",
          "value": "(1u<<12)"
        },
        "SDL_AUDIO_MASK_SIGNED": {
          "doc": "Mask of bits in an SDL_AudioFormat that contain the signed data flag.\n\nGenerally one should use SDL_AUDIO_ISSIGNED instead of this macro directly.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_MASK_SIGNED",
          "kind": "def",
          "value": "(1u<<15)"
        },
        "SDL_DEFINE_AUDIO_FORMAT": {
          "doc": "Define an SDL_AudioFormat value.\n\nSDL does not support custom audio formats, so this macro is not of much use\nexternally, but it can be illustrative as to what the various bits of an\nSDL_AudioFormat mean.\n\nFor example, SDL_AUDIO_S32LE looks like this:\n\n```c\nSDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 32)\n```\n\n\\param signed 1 for signed data, 0 for unsigned data.\n\\param bigendian 1 for bigendian data, 0 for littleendian data.\n\\param flt 1 for floating point data, 0 for integer data.\n\\param size number of bits per sample.\n\\returns a format value in the style of SDL_AudioFormat.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_AUDIO_FORMAT",
          "kind": "def",
          "parameters": [
            "signed",
            "bigendian",
            "flt",
            "size"
          ],
          "value": "    (((Uint16)(signed) << 15) | ((Uint16)(bigendian) << 12) | ((Uint16)(flt) << 8) | ((size) & SDL_AUDIO_MASK_BITSIZE))"
        },
        "SDL_AudioFormat": {
          "doc": "Audio format.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_AUDIO_BITSIZE\n\\sa SDL_AUDIO_BYTESIZE\n\\sa SDL_AUDIO_ISINT\n\\sa SDL_AUDIO_ISFLOAT\n\\sa SDL_AUDIO_ISBIGENDIAN\n\\sa SDL_AUDIO_ISLITTLEENDIAN\n\\sa SDL_AUDIO_ISSIGNED\n\\sa SDL_AUDIO_ISUNSIGNED",
          "name": "SDL_AudioFormat",
          "kind": "enum",
          "entries": {
            "SDL_AUDIO_UNKNOWN": {
              "doc": "Unspecified audio format.",
              "name": "SDL_AUDIO_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_U8": {
              "doc": "Unsigned 8-bit samples.",
              "name": "SDL_AUDIO_U8",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S8": {
              "doc": "Signed 8-bit samples.",
              "name": "SDL_AUDIO_S8",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S16LE": {
              "doc": "Signed 16-bit samples.",
              "name": "SDL_AUDIO_S16LE",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S16BE": {
              "doc": "As above, but big-endian byte order.",
              "name": "SDL_AUDIO_S16BE",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S32LE": {
              "doc": "32-bit integer samples",
              "name": "SDL_AUDIO_S32LE",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S32BE": {
              "doc": "As above, but big-endian byte order.",
              "name": "SDL_AUDIO_S32BE",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_F32LE": {
              "doc": "32-bit floating point samples",
              "name": "SDL_AUDIO_F32LE",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_F32BE": {
              "doc": "As above, but big-endian byte order.",
              "name": "SDL_AUDIO_F32BE",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S16": {
              "doc": "",
              "name": "SDL_AUDIO_S16",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_S32": {
              "doc": "",
              "name": "SDL_AUDIO_S32",
              "kind": "var",
              "type": ""
            },
            "SDL_AUDIO_F32": {
              "doc": "",
              "name": "SDL_AUDIO_F32",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_AUDIO_BITSIZE": {
          "doc": "Retrieve the size, in bits, from an SDL_AudioFormat.\n\nFor example, `SDL_AUDIO_BITSIZE(SDL_AUDIO_S16)` returns 16.\n\n\\param x an SDL_AudioFormat value.\n\\returns data size in bits.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_BITSIZE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "((x) & SDL_AUDIO_MASK_BITSIZE)"
        },
        "SDL_AUDIO_BYTESIZE": {
          "doc": "Retrieve the size, in bytes, from an SDL_AudioFormat.\n\nFor example, `SDL_AUDIO_BYTESIZE(SDL_AUDIO_S16)` returns 2.\n\n\\param x an SDL_AudioFormat value.\n\\returns data size in bytes.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_BYTESIZE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "(SDL_AUDIO_BITSIZE(x) / 8)"
        },
        "SDL_AUDIO_ISFLOAT": {
          "doc": "Determine if an SDL_AudioFormat represents floating point data.\n\nFor example, `SDL_AUDIO_ISFLOAT(SDL_AUDIO_S16)` returns 0.\n\n\\param x an SDL_AudioFormat value.\n\\returns non-zero if format is floating point, zero otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_ISFLOAT",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "((x) & SDL_AUDIO_MASK_FLOAT)"
        },
        "SDL_AUDIO_ISBIGENDIAN": {
          "doc": "Determine if an SDL_AudioFormat represents bigendian data.\n\nFor example, `SDL_AUDIO_ISBIGENDIAN(SDL_AUDIO_S16LE)` returns 0.\n\n\\param x an SDL_AudioFormat value.\n\\returns non-zero if format is bigendian, zero otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_ISBIGENDIAN",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "((x) & SDL_AUDIO_MASK_BIG_ENDIAN)"
        },
        "SDL_AUDIO_ISLITTLEENDIAN": {
          "doc": "Determine if an SDL_AudioFormat represents littleendian data.\n\nFor example, `SDL_AUDIO_ISLITTLEENDIAN(SDL_AUDIO_S16BE)` returns 0.\n\n\\param x an SDL_AudioFormat value.\n\\returns non-zero if format is littleendian, zero otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_ISLITTLEENDIAN",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "(!SDL_AUDIO_ISBIGENDIAN(x))"
        },
        "SDL_AUDIO_ISSIGNED": {
          "doc": "Determine if an SDL_AudioFormat represents signed data.\n\nFor example, `SDL_AUDIO_ISSIGNED(SDL_AUDIO_U8)` returns 0.\n\n\\param x an SDL_AudioFormat value.\n\\returns non-zero if format is signed, zero otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_ISSIGNED",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "((x) & SDL_AUDIO_MASK_SIGNED)"
        },
        "SDL_AUDIO_ISINT": {
          "doc": "Determine if an SDL_AudioFormat represents integer data.\n\nFor example, `SDL_AUDIO_ISINT(SDL_AUDIO_F32)` returns 0.\n\n\\param x an SDL_AudioFormat value.\n\\returns non-zero if format is integer, zero otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_ISINT",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "(!SDL_AUDIO_ISFLOAT(x))"
        },
        "SDL_AUDIO_ISUNSIGNED": {
          "doc": "Determine if an SDL_AudioFormat represents unsigned data.\n\nFor example, `SDL_AUDIO_ISUNSIGNED(SDL_AUDIO_S16)` returns 0.\n\n\\param x an SDL_AudioFormat value.\n\\returns non-zero if format is unsigned, zero otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_ISUNSIGNED",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "(!SDL_AUDIO_ISSIGNED(x))"
        },
        "SDL_AudioDeviceID": {
          "doc": "SDL Audio Device instance IDs.\n\nZero is used to signify an invalid/null device.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_AudioDeviceID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK": {
          "doc": "A value used to request a default playback audio device.\n\nSeveral functions that require an SDL_AudioDeviceID will accept this value\nto signify the app just wants the system to choose a default device instead\nof the app providing a specific one.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK",
          "kind": "def",
          "value": "((SDL_AudioDeviceID) 0xFFFFFFFFu)"
        },
        "SDL_AUDIO_DEVICE_DEFAULT_RECORDING": {
          "doc": "A value used to request a default recording audio device.\n\nSeveral functions that require an SDL_AudioDeviceID will accept this value\nto signify the app just wants the system to choose a default device instead\nof the app providing a specific one.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_DEVICE_DEFAULT_RECORDING",
          "kind": "def",
          "value": "((SDL_AudioDeviceID) 0xFFFFFFFEu)"
        },
        "SDL_AudioSpec": {
          "doc": "Format specifier for audio data.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_AudioFormat",
          "name": "SDL_AudioSpec",
          "kind": "struct",
          "entries": {
            "format": {
              "doc": "Audio data format",
              "name": "format",
              "kind": "var",
              "type": "SDL_AudioFormat"
            },
            "channels": {
              "doc": "Number of channels: 1 mono, 2 stereo, etc",
              "name": "channels",
              "kind": "var",
              "type": "int"
            },
            "freq": {
              "doc": "sample rate: sample frames per second",
              "name": "freq",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_AUDIO_FRAMESIZE": {
          "doc": "Calculate the size of each audio frame (in bytes) from an SDL_AudioSpec.\n\nThis reports on the size of an audio sample frame: stereo Sint16 data (2\nchannels of 2 bytes each) would be 4 bytes per frame, for example.\n\n\\param x an SDL_AudioSpec to query.\n\\returns the number of bytes used per sample frame.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_AUDIO_FRAMESIZE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "(SDL_AUDIO_BYTESIZE((x).format) * (x).channels)"
        },
        "SDL_AudioStream": {
          "doc": "The opaque handle that represents an audio stream.\n\nSDL_AudioStream is an audio conversion interface.\n\n- It can handle resampling data in chunks without generating artifacts,\n  when it doesn't have the complete buffer available.\n- It can handle incoming data in any variable size.\n- It can handle input/output format changes on the fly.\n- It can remap audio channels between inputs and outputs.\n- You push data as you have it, and pull it when you need it\n- It can also function as a basic audio data queue even if you just have\n  sound that needs to pass from one place to another.\n- You can hook callbacks up to them when more data is added or requested,\n  to manage data on-the-fly.\n\nAudio streams are the core of the SDL3 audio interface. You create one or\nmore of them, bind them to an opened audio device, and feed data to them\n(or for recording, consume data from them).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateAudioStream",
          "name": "SDL_AudioStream",
          "kind": "alias",
          "type": "struct SDL_AudioStream"
        },
        "SDL_GetNumAudioDrivers": {
          "doc": "Use this function to get the number of built-in audio drivers.\n\nThis function returns a hardcoded number. This never returns a negative\nvalue; if there are no drivers compiled into this build of SDL, this\nfunction returns zero. The presence of a driver in this list does not mean\nit will function, it just means SDL is capable of interacting with that\ninterface. For example, a build of SDL might have esound support, but if\nthere's no esound server available, SDL's esound driver would fail if used.\n\nBy default, SDL tries all drivers, in its preferred order, until one is\nfound to be usable.\n\n\\returns the number of built-in audio drivers.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioDriver",
          "name": "SDL_GetNumAudioDrivers",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetAudioDriver": {
          "doc": "Use this function to get the name of a built in audio driver.\n\nThe list of audio drivers is given in the order that they are normally\ninitialized by default; the drivers that seem more reasonable to choose\nfirst (as far as the SDL developers believe) are earlier in the list.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"alsa\",\n\"coreaudio\" or \"wasapi\". These never have Unicode characters, and are not\nmeant to be proper names.\n\n\\param index the index of the audio driver; the value ranges from 0 to\n             SDL_GetNumAudioDrivers() - 1.\n\\returns the name of the audio driver at the requested index, or NULL if an\n         invalid index was specified.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumAudioDrivers",
          "name": "SDL_GetAudioDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "index",
              "type": "int"
            }
          ]
        },
        "SDL_GetCurrentAudioDriver": {
          "doc": "Get the name of the current audio driver.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"alsa\",\n\"coreaudio\" or \"wasapi\". These never have Unicode characters, and are not\nmeant to be proper names.\n\n\\returns the name of the current audio driver or NULL if no driver has been\n         initialized.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetCurrentAudioDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_GetAudioPlaybackDevices": {
          "doc": "Get a list of currently-connected audio playback devices.\n\nThis returns of list of available devices that play sound, perhaps to\nspeakers or headphones (\"playback\" devices). If you want devices that\nrecord audio, like a microphone (\"recording\" devices), use\nSDL_GetAudioRecordingDevices() instead.\n\nThis only returns a list of physical devices; it will not have any device\nIDs returned by SDL_OpenAudioDevice().\n\nIf this function returns NULL, to signify an error, `*count` will be set to\nzero.\n\n\\param count a pointer filled in with the number of devices returned, may\n             be NULL.\n\\returns a 0 terminated array of device instance IDs or NULL on error; call\n         SDL_GetError() for more information. This should be freed with\n         SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_OpenAudioDevice\n\\sa SDL_GetAudioRecordingDevices",
          "name": "SDL_GetAudioPlaybackDevices",
          "kind": "function",
          "type": "SDL_AudioDeviceID *",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetAudioRecordingDevices": {
          "doc": "Get a list of currently-connected audio recording devices.\n\nThis returns of list of available devices that record audio, like a\nmicrophone (\"recording\" devices). If you want devices that play sound,\nperhaps to speakers or headphones (\"playback\" devices), use\nSDL_GetAudioPlaybackDevices() instead.\n\nThis only returns a list of physical devices; it will not have any device\nIDs returned by SDL_OpenAudioDevice().\n\nIf this function returns NULL, to signify an error, `*count` will be set to\nzero.\n\n\\param count a pointer filled in with the number of devices returned, may\n             be NULL.\n\\returns a 0 terminated array of device instance IDs, or NULL on failure;\n         call SDL_GetError() for more information. This should be freed\n         with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_OpenAudioDevice\n\\sa SDL_GetAudioPlaybackDevices",
          "name": "SDL_GetAudioRecordingDevices",
          "kind": "function",
          "type": "SDL_AudioDeviceID *",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetAudioDeviceName": {
          "doc": "Get the human-readable name of a specific audio device.\n\n\\param devid the instance ID of the device to query.\n\\returns the name of the audio device, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioPlaybackDevices\n\\sa SDL_GetAudioRecordingDevices",
          "name": "SDL_GetAudioDeviceName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_GetAudioDeviceFormat": {
          "doc": "Get the current audio format of a specific audio device.\n\nFor an opened device, this will report the format the device is currently\nusing. If the device isn't yet opened, this will report the device's\npreferred format (or a reasonable default if this can't be determined).\n\nYou may also specify SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK or\nSDL_AUDIO_DEVICE_DEFAULT_RECORDING here, which is useful for getting a\nreasonable recommendation before opening the system-recommended default\ndevice.\n\nYou can also use this to request the current device buffer size. This is\nspecified in sample frames and represents the amount of data SDL will feed\nto the physical hardware in each chunk. This can be converted to\nmilliseconds of audio with the following equation:\n\n`ms = (int) ((((Sint64) frames) * 1000) / spec.freq);`\n\nBuffer size is only important if you need low-level control over the audio\nplayback timing. Most apps do not need this.\n\n\\param devid the instance ID of the device to query.\n\\param spec on return, will be filled with device details.\n\\param sample_frames pointer to store device buffer size, in sample frames.\n                     Can be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetAudioDeviceFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "spec",
              "type": "SDL_AudioSpec *"
            },
            {
              "name": "sample_frames",
              "type": "int *"
            }
          ]
        },
        "SDL_GetAudioDeviceChannelMap": {
          "doc": "Get the current channel map of an audio device.\n\nChannel maps are optional; most things do not need them, instead passing\ndata in the [order that SDL expects](CategoryAudio#channel-layouts).\n\nAudio devices usually have no remapping applied. This is represented by\nreturning NULL, and does not signify an error.\n\n\\param devid the instance ID of the device to query.\n\\param count On output, set to number of channels in the map. Can be NULL.\n\\returns an array of the current channel mapping, with as many elements as\n         the current output spec's channels, or NULL if default. This\n         should be freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamInputChannelMap",
          "name": "SDL_GetAudioDeviceChannelMap",
          "kind": "function",
          "type": "int *",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_OpenAudioDevice": {
          "doc": "Open a specific audio device.\n\nYou can open both playback and recording devices through this function.\nPlayback devices will take data from bound audio streams, mix it, and send\nit to the hardware. Recording devices will feed any bound audio streams\nwith a copy of any incoming data.\n\nAn opened audio device starts out with no audio streams bound. To start\naudio playing, bind a stream and supply audio data to it. Unlike SDL2,\nthere is no audio callback; you only bind audio streams and make sure they\nhave data flowing into them (however, you can simulate SDL2's semantics\nfairly closely by using SDL_OpenAudioDeviceStream instead of this\nfunction).\n\nIf you don't care about opening a specific device, pass a `devid` of either\n`SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK` or\n`SDL_AUDIO_DEVICE_DEFAULT_RECORDING`. In this case, SDL will try to pick\nthe most reasonable default, and may also switch between physical devices\nseamlessly later, if the most reasonable default changes during the\nlifetime of this opened device (user changed the default in the OS's system\npreferences, the default got unplugged so the system jumped to a new\ndefault, the user plugged in headphones on a mobile device, etc). Unless\nyou have a good reason to choose a specific device, this is probably what\nyou want.\n\nYou may request a specific format for the audio device, but there is no\npromise the device will honor that request for several reasons. As such,\nit's only meant to be a hint as to what data your app will provide. Audio\nstreams will accept data in whatever format you specify and manage\nconversion for you as appropriate. SDL_GetAudioDeviceFormat can tell you\nthe preferred format for the device before opening and the actual format\nthe device is using after opening.\n\nIt's legal to open the same device ID more than once; each successful open\nwill generate a new logical SDL_AudioDeviceID that is managed separately\nfrom others on the same physical device. This allows libraries to open a\ndevice separately from the main app and bind its own streams without\nconflicting.\n\nIt is also legal to open a device ID returned by a previous call to this\nfunction; doing so just creates another logical device on the same physical\ndevice. This may be useful for making logical groupings of audio streams.\n\nThis function returns the opened device ID on success. This is a new,\nunique SDL_AudioDeviceID that represents a logical device.\n\nSome backends might offer arbitrary devices (for example, a networked audio\nprotocol that can connect to an arbitrary server). For these, as a change\nfrom SDL2, you should open a default device ID and use an SDL hint to\nspecify the target if you care, or otherwise let the backend figure out a\nreasonable default. Most backends don't offer anything like this, and often\nthis would be an end user setting an environment variable for their custom\nneed, and not something an application should specifically manage.\n\nWhen done with an audio device, possibly at the end of the app's life, one\nshould call SDL_CloseAudioDevice() on the returned device id.\n\n\\param devid the device instance id to open, or\n             SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK or\n             SDL_AUDIO_DEVICE_DEFAULT_RECORDING for the most reasonable\n             default device.\n\\param spec the requested device configuration. Can be NULL to use\n            reasonable defaults.\n\\returns the device ID on success or 0 on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseAudioDevice\n\\sa SDL_GetAudioDeviceFormat",
          "name": "SDL_OpenAudioDevice",
          "kind": "function",
          "type": "SDL_AudioDeviceID",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "spec",
              "type": "const SDL_AudioSpec *"
            }
          ]
        },
        "SDL_IsAudioDevicePhysical": {
          "doc": "Determine if an audio device is physical (instead of logical).\n\nAn SDL_AudioDeviceID that represents physical hardware is a physical\ndevice; there is one for each piece of hardware that SDL can see. Logical\ndevices are created by calling SDL_OpenAudioDevice or\nSDL_OpenAudioDeviceStream, and while each is associated with a physical\ndevice, there can be any number of logical devices on one physical device.\n\nFor the most part, logical and physical IDs are interchangeable--if you try\nto open a logical device, SDL understands to assign that effort to the\nunderlying physical device, etc. However, it might be useful to know if an\narbitrary device ID is physical or logical. This function reports which.\n\nThis function may return either true or false for invalid device IDs.\n\n\\param devid the device ID to query.\n\\returns true if devid is a physical device, false if it is logical.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_IsAudioDevicePhysical",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_IsAudioDevicePlayback": {
          "doc": "Determine if an audio device is a playback device (instead of recording).\n\nThis function may return either true or false for invalid device IDs.\n\n\\param devid the device ID to query.\n\\returns true if devid is a playback device, false if it is recording.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_IsAudioDevicePlayback",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_PauseAudioDevice": {
          "doc": "Use this function to pause audio playback on a specified device.\n\nThis function pauses audio processing for a given device. Any bound audio\nstreams will not progress, and no audio will be generated. Pausing one\ndevice does not prevent other unpaused devices from running.\n\nUnlike in SDL2, audio devices start in an _unpaused_ state, since an app\nhas to bind a stream before any audio will flow. Pausing a paused device is\na legal no-op.\n\nPausing a device can be useful to halt all audio without unbinding all the\naudio streams. This might be useful while a game is paused, or a level is\nloading, etc.\n\nPhysical devices can not be paused or unpaused, only logical devices\ncreated through SDL_OpenAudioDevice() can be.\n\n\\param devid a device opened by SDL_OpenAudioDevice().\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ResumeAudioDevice\n\\sa SDL_AudioDevicePaused",
          "name": "SDL_PauseAudioDevice",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_ResumeAudioDevice": {
          "doc": "Use this function to unpause audio playback on a specified device.\n\nThis function unpauses audio processing for a given device that has\npreviously been paused with SDL_PauseAudioDevice(). Once unpaused, any\nbound audio streams will begin to progress again, and audio can be\ngenerated.\n\nUnlike in SDL2, audio devices start in an _unpaused_ state, since an app\nhas to bind a stream before any audio will flow. Unpausing an unpaused\ndevice is a legal no-op.\n\nPhysical devices can not be paused or unpaused, only logical devices\ncreated through SDL_OpenAudioDevice() can be.\n\n\\param devid a device opened by SDL_OpenAudioDevice().\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AudioDevicePaused\n\\sa SDL_PauseAudioDevice",
          "name": "SDL_ResumeAudioDevice",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_AudioDevicePaused": {
          "doc": "Use this function to query if an audio device is paused.\n\nUnlike in SDL2, audio devices start in an _unpaused_ state, since an app\nhas to bind a stream before any audio will flow.\n\nPhysical devices can not be paused or unpaused, only logical devices\ncreated through SDL_OpenAudioDevice() can be. Physical and invalid device\nIDs will report themselves as unpaused here.\n\n\\param devid a device opened by SDL_OpenAudioDevice().\n\\returns true if device is valid and paused, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PauseAudioDevice\n\\sa SDL_ResumeAudioDevice",
          "name": "SDL_AudioDevicePaused",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_GetAudioDeviceGain": {
          "doc": "Get the gain of an audio device.\n\nThe gain of a device is its volume; a larger gain means a louder output,\nwith a gain of zero being silence.\n\nAudio devices default to a gain of 1.0f (no change in output).\n\nPhysical devices may not have their gain changed, only logical devices, and\nthis function will always return -1.0f when used on physical devices.\n\n\\param devid the audio device to query.\n\\returns the gain of the device or -1.0f on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioDeviceGain",
          "name": "SDL_GetAudioDeviceGain",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_SetAudioDeviceGain": {
          "doc": "Change the gain of an audio device.\n\nThe gain of a device is its volume; a larger gain means a louder output,\nwith a gain of zero being silence.\n\nAudio devices default to a gain of 1.0f (no change in output).\n\nPhysical devices may not have their gain changed, only logical devices, and\nthis function will always return false when used on physical devices. While\nit might seem attractive to adjust several logical devices at once in this\nway, it would allow an app or library to interfere with another portion of\nthe program's otherwise-isolated devices.\n\nThis is applied, along with any per-audiostream gain, during playback to\nthe hardware, and can be continuously changed to create various effects. On\nrecording devices, this will adjust the gain before passing the data into\nan audiostream; that recording audiostream can then adjust its gain further\nwhen outputting the data elsewhere, if it likes, but that second gain is\nnot applied until the data leaves the audiostream again.\n\n\\param devid the audio device on which to change gain.\n\\param gain the gain. 1.0f is no change, 0.0f is silence.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioDeviceGain",
          "name": "SDL_SetAudioDeviceGain",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "gain",
              "type": "float"
            }
          ]
        },
        "SDL_CloseAudioDevice": {
          "doc": "Close a previously-opened audio device.\n\nThe application should close open audio devices once they are no longer\nneeded.\n\nThis function may block briefly while pending audio data is played by the\nhardware, so that applications don't drop the last buffer of data they\nsupplied if terminating immediately afterwards.\n\n\\param devid an audio device id previously returned by\n             SDL_OpenAudioDevice().\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_OpenAudioDevice",
          "name": "SDL_CloseAudioDevice",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            }
          ]
        },
        "SDL_BindAudioStreams": {
          "doc": "Bind a list of audio streams to an audio device.\n\nAudio data will flow through any bound streams. For a playback device, data\nfor all bound streams will be mixed together and fed to the device. For a\nrecording device, a copy of recorded data will be provided to each bound\nstream.\n\nAudio streams can only be bound to an open device. This operation is\natomic--all streams bound in the same call will start processing at the\nsame time, so they can stay in sync. Also: either all streams will be bound\nor none of them will be.\n\nIt is an error to bind an already-bound stream; it must be explicitly\nunbound first.\n\nBinding a stream to a device will set its output format for playback\ndevices, and its input format for recording devices, so they match the\ndevice's settings. The caller is welcome to change the other end of the\nstream's format at any time with SDL_SetAudioStreamFormat().\n\n\\param devid an audio device to bind a stream to.\n\\param streams an array of audio streams to bind.\n\\param num_streams number streams listed in the `streams` array.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BindAudioStreams\n\\sa SDL_UnbindAudioStream\n\\sa SDL_GetAudioStreamDevice",
          "name": "SDL_BindAudioStreams",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "streams",
              "type": "SDL_AudioStream *const *"
            },
            {
              "name": "num_streams",
              "type": "int"
            }
          ]
        },
        "SDL_BindAudioStream": {
          "doc": "Bind a single audio stream to an audio device.\n\nThis is a convenience function, equivalent to calling\n`SDL_BindAudioStreams(devid, &stream, 1)`.\n\n\\param devid an audio device to bind a stream to.\n\\param stream an audio stream to bind to a device.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BindAudioStreams\n\\sa SDL_UnbindAudioStream\n\\sa SDL_GetAudioStreamDevice",
          "name": "SDL_BindAudioStream",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_UnbindAudioStreams": {
          "doc": "Unbind a list of audio streams from their audio devices.\n\nThe streams being unbound do not all have to be on the same device. All\nstreams on the same device will be unbound atomically (data will stop\nflowing through all unbound streams on the same device at the same time).\n\nUnbinding a stream that isn't bound to a device is a legal no-op.\n\n\\param streams an array of audio streams to unbind. Can be NULL or contain\n               NULL.\n\\param num_streams number streams listed in the `streams` array.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BindAudioStreams",
          "name": "SDL_UnbindAudioStreams",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "streams",
              "type": "SDL_AudioStream *const *"
            },
            {
              "name": "num_streams",
              "type": "int"
            }
          ]
        },
        "SDL_UnbindAudioStream": {
          "doc": "Unbind a single audio stream from its audio device.\n\nThis is a convenience function, equivalent to calling\n`SDL_UnbindAudioStreams(&stream, 1)`.\n\n\\param stream an audio stream to unbind from a device. Can be NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BindAudioStream",
          "name": "SDL_UnbindAudioStream",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_GetAudioStreamDevice": {
          "doc": "Query an audio stream for its currently-bound device.\n\nThis reports the audio device that an audio stream is currently bound to.\n\nIf not bound, or invalid, this returns zero, which is not a valid device\nID.\n\n\\param stream the audio stream to query.\n\\returns the bound audio device, or 0 if not bound or invalid.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BindAudioStream\n\\sa SDL_BindAudioStreams",
          "name": "SDL_GetAudioStreamDevice",
          "kind": "function",
          "type": "SDL_AudioDeviceID",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_CreateAudioStream": {
          "doc": "Create a new audio stream.\n\n\\param src_spec the format details of the input audio.\n\\param dst_spec the format details of the output audio.\n\\returns a new audio stream on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PutAudioStreamData\n\\sa SDL_GetAudioStreamData\n\\sa SDL_GetAudioStreamAvailable\n\\sa SDL_FlushAudioStream\n\\sa SDL_ClearAudioStream\n\\sa SDL_SetAudioStreamFormat\n\\sa SDL_DestroyAudioStream",
          "name": "SDL_CreateAudioStream",
          "kind": "function",
          "type": "SDL_AudioStream *",
          "parameters": [
            {
              "name": "src_spec",
              "type": "const SDL_AudioSpec *"
            },
            {
              "name": "dst_spec",
              "type": "const SDL_AudioSpec *"
            }
          ]
        },
        "SDL_GetAudioStreamProperties": {
          "doc": "Get the properties associated with an audio stream.\n\n\\param stream the SDL_AudioStream to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetAudioStreamProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_GetAudioStreamFormat": {
          "doc": "Query the current format of an audio stream.\n\n\\param stream the SDL_AudioStream to query.\n\\param src_spec where to store the input audio format; ignored if NULL.\n\\param dst_spec where to store the output audio format; ignored if NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamFormat",
          "name": "SDL_GetAudioStreamFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "src_spec",
              "type": "SDL_AudioSpec *"
            },
            {
              "name": "dst_spec",
              "type": "SDL_AudioSpec *"
            }
          ]
        },
        "SDL_SetAudioStreamFormat": {
          "doc": "Change the input and output formats of an audio stream.\n\nFuture calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData\nwill reflect the new format, and future calls to SDL_PutAudioStreamData\nmust provide data in the new input formats.\n\nData that was previously queued in the stream will still be operated on in\nthe format that was current when it was added, which is to say you can put\nthe end of a sound file in one format to a stream, change formats for the\nnext sound file, and start putting that new data while the previous sound\nfile is still queued, and everything will still play back correctly.\n\nIf a stream is bound to a device, then the format of the side of the stream\nbound to a device cannot be changed (src_spec for recording devices,\ndst_spec for playback devices). Attempts to make a change to this side will\nbe ignored, but this will not report an error. The other side's format can\nbe changed.\n\n\\param stream the stream the format is being changed.\n\\param src_spec the new format of the audio input; if NULL, it is not\n                changed.\n\\param dst_spec the new format of the audio output; if NULL, it is not\n                changed.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioStreamFormat\n\\sa SDL_SetAudioStreamFrequencyRatio",
          "name": "SDL_SetAudioStreamFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "src_spec",
              "type": "const SDL_AudioSpec *"
            },
            {
              "name": "dst_spec",
              "type": "const SDL_AudioSpec *"
            }
          ]
        },
        "SDL_GetAudioStreamFrequencyRatio": {
          "doc": "Get the frequency ratio of an audio stream.\n\n\\param stream the SDL_AudioStream to query.\n\\returns the frequency ratio of the stream or 0.0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamFrequencyRatio",
          "name": "SDL_GetAudioStreamFrequencyRatio",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_SetAudioStreamFrequencyRatio": {
          "doc": "Change the frequency ratio of an audio stream.\n\nThe frequency ratio is used to adjust the rate at which input data is\nconsumed. Changing this effectively modifies the speed and pitch of the\naudio. A value greater than 1.0 will play the audio faster, and at a higher\npitch. A value less than 1.0 will play the audio slower, and at a lower\npitch.\n\nThis is applied during SDL_GetAudioStreamData, and can be continuously\nchanged to create various effects.\n\n\\param stream the stream the frequency ratio is being changed.\n\\param ratio the frequency ratio. 1.0 is normal speed. Must be between 0.01\n             and 100.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioStreamFrequencyRatio\n\\sa SDL_SetAudioStreamFormat",
          "name": "SDL_SetAudioStreamFrequencyRatio",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "ratio",
              "type": "float"
            }
          ]
        },
        "SDL_GetAudioStreamGain": {
          "doc": "Get the gain of an audio stream.\n\nThe gain of a stream is its volume; a larger gain means a louder output,\nwith a gain of zero being silence.\n\nAudio streams default to a gain of 1.0f (no change in output).\n\n\\param stream the SDL_AudioStream to query.\n\\returns the gain of the stream or -1.0f on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamGain",
          "name": "SDL_GetAudioStreamGain",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_SetAudioStreamGain": {
          "doc": "Change the gain of an audio stream.\n\nThe gain of a stream is its volume; a larger gain means a louder output,\nwith a gain of zero being silence.\n\nAudio streams default to a gain of 1.0f (no change in output).\n\nThis is applied during SDL_GetAudioStreamData, and can be continuously\nchanged to create various effects.\n\n\\param stream the stream on which the gain is being changed.\n\\param gain the gain. 1.0f is no change, 0.0f is silence.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioStreamGain",
          "name": "SDL_SetAudioStreamGain",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "gain",
              "type": "float"
            }
          ]
        },
        "SDL_GetAudioStreamInputChannelMap": {
          "doc": "Get the current input channel map of an audio stream.\n\nChannel maps are optional; most things do not need them, instead passing\ndata in the [order that SDL expects](CategoryAudio#channel-layouts).\n\nAudio streams default to no remapping applied. This is represented by\nreturning NULL, and does not signify an error.\n\n\\param stream the SDL_AudioStream to query.\n\\param count On output, set to number of channels in the map. Can be NULL.\n\\returns an array of the current channel mapping, with as many elements as\n         the current output spec's channels, or NULL if default. This\n         should be freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamInputChannelMap",
          "name": "SDL_GetAudioStreamInputChannelMap",
          "kind": "function",
          "type": "int *",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetAudioStreamOutputChannelMap": {
          "doc": "Get the current output channel map of an audio stream.\n\nChannel maps are optional; most things do not need them, instead passing\ndata in the [order that SDL expects](CategoryAudio#channel-layouts).\n\nAudio streams default to no remapping applied. This is represented by\nreturning NULL, and does not signify an error.\n\n\\param stream the SDL_AudioStream to query.\n\\param count On output, set to number of channels in the map. Can be NULL.\n\\returns an array of the current channel mapping, with as many elements as\n         the current output spec's channels, or NULL if default. This\n         should be freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamInputChannelMap",
          "name": "SDL_GetAudioStreamOutputChannelMap",
          "kind": "function",
          "type": "int *",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_SetAudioStreamInputChannelMap": {
          "doc": "Set the current input channel map of an audio stream.\n\nChannel maps are optional; most things do not need them, instead passing\ndata in the [order that SDL expects](CategoryAudio#channel-layouts).\n\nThe input channel map reorders data that is added to a stream via\nSDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide\ndata in the new channel order.\n\nEach item in the array represents an input channel, and its value is the\nchannel that it should be remapped to. To reverse a stereo signal's left\nand right values, you'd have an array of `{ 1, 0 }`. It is legal to remap\nmultiple channels to the same thing, so `{ 1, 1 }` would duplicate the\nright channel to both channels of a stereo signal. An element in the\nchannel map set to -1 instead of a valid channel will mute that channel,\nsetting it to a silence value.\n\nYou cannot change the number of channels through a channel map, just\nreorder/mute them.\n\nData that was previously queued in the stream will still be operated on in\nthe order that was current when it was added, which is to say you can put\nthe end of a sound file in one order to a stream, change orders for the\nnext sound file, and start putting that new data while the previous sound\nfile is still queued, and everything will still play back correctly.\n\nAudio streams default to no remapping applied. Passing a NULL channel map\nis legal, and turns off remapping.\n\nSDL will copy the channel map; the caller does not have to save this array\nafter this call.\n\nIf `count` is not equal to the current number of channels in the audio\nstream's format, this will fail. This is a safety measure to make sure a\nrace condition hasn't changed the format while this call is setting the\nchannel map.\n\nUnlike attempting to change the stream's format, the input channel map on a\nstream bound to a recording device is permitted to change at any time; any\ndata added to the stream from the device after this call will have the new\nmapping, but previously-added data will still have the prior mapping.\n\n\\param stream the SDL_AudioStream to change.\n\\param chmap the new channel map, NULL to reset to default.\n\\param count The number of channels in the map.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running. Don't change the\n              stream's format to have a different number of channels from a\n              a different thread at the same time, though!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamInputChannelMap",
          "name": "SDL_SetAudioStreamInputChannelMap",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "chmap",
              "type": "const int *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_SetAudioStreamOutputChannelMap": {
          "doc": "Set the current output channel map of an audio stream.\n\nChannel maps are optional; most things do not need them, instead passing\ndata in the [order that SDL expects](CategoryAudio#channel-layouts).\n\nThe output channel map reorders data that leaving a stream via\nSDL_GetAudioStreamData.\n\nEach item in the array represents an input channel, and its value is the\nchannel that it should be remapped to. To reverse a stereo signal's left\nand right values, you'd have an array of `{ 1, 0 }`. It is legal to remap\nmultiple channels to the same thing, so `{ 1, 1 }` would duplicate the\nright channel to both channels of a stereo signal. An element in the\nchannel map set to -1 instead of a valid channel will mute that channel,\nsetting it to a silence value.\n\nYou cannot change the number of channels through a channel map, just\nreorder/mute them.\n\nThe output channel map can be changed at any time, as output remapping is\napplied during SDL_GetAudioStreamData.\n\nAudio streams default to no remapping applied. Passing a NULL channel map\nis legal, and turns off remapping.\n\nSDL will copy the channel map; the caller does not have to save this array\nafter this call.\n\nIf `count` is not equal to the current number of channels in the audio\nstream's format, this will fail. This is a safety measure to make sure a\nrace condition hasn't changed the format while this call is setting the\nchannel map.\n\nUnlike attempting to change the stream's format, the output channel map on\na stream bound to a recording device is permitted to change at any time;\nany data added to the stream after this call will have the new mapping, but\npreviously-added data will still have the prior mapping. When the channel\nmap doesn't match the hardware's channel layout, SDL will convert the data\nbefore feeding it to the device for playback.\n\n\\param stream the SDL_AudioStream to change.\n\\param chmap the new channel map, NULL to reset to default.\n\\param count The number of channels in the map.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as it holds\n              a stream-specific mutex while running. Don't change the\n              stream's format to have a different number of channels from a\n              a different thread at the same time, though!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamInputChannelMap",
          "name": "SDL_SetAudioStreamOutputChannelMap",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "chmap",
              "type": "const int *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_PutAudioStreamData": {
          "doc": "Add data to the stream.\n\nThis data must match the format/channels/samplerate specified in the latest\ncall to SDL_SetAudioStreamFormat, or the format specified when creating the\nstream if it hasn't been changed.\n\nNote that this call simply copies the unconverted data for later. This is\ndifferent than SDL2, where data was converted during the Put call and the\nGet call would just dequeue the previously-converted data.\n\n\\param stream the stream the audio data is being added to.\n\\param buf a pointer to the audio data to add.\n\\param len the number of bytes to write to the stream.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, but if the\n              stream has a callback set, the caller might need to manage\n              extra locking.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ClearAudioStream\n\\sa SDL_FlushAudioStream\n\\sa SDL_GetAudioStreamData\n\\sa SDL_GetAudioStreamQueued",
          "name": "SDL_PutAudioStreamData",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "buf",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "int"
            }
          ]
        },
        "SDL_GetAudioStreamData": {
          "doc": "Get converted/resampled data from the stream.\n\nThe input/output data format/channels/samplerate is specified when creating\nthe stream, and can be changed after creation by calling\nSDL_SetAudioStreamFormat.\n\nNote that any conversion and resampling necessary is done during this call,\nand SDL_PutAudioStreamData simply queues unconverted data for later. This\nis different than SDL2, where that work was done while inputting new data\nto the stream and requesting the output just copied the converted data.\n\n\\param stream the stream the audio is being requested from.\n\\param buf a buffer to fill with audio data.\n\\param len the maximum number of bytes to fill.\n\\returns the number of bytes read from the stream or -1 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread, but if the\n              stream has a callback set, the caller might need to manage\n              extra locking.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ClearAudioStream\n\\sa SDL_GetAudioStreamAvailable\n\\sa SDL_PutAudioStreamData",
          "name": "SDL_GetAudioStreamData",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "buf",
              "type": "void *"
            },
            {
              "name": "len",
              "type": "int"
            }
          ]
        },
        "SDL_GetAudioStreamAvailable": {
          "doc": "Get the number of converted/resampled bytes available.\n\nThe stream may be buffering data behind the scenes until it has enough to\nresample correctly, so this number might be lower than what you expect, or\neven be zero. Add more data or flush the stream if you need the data now.\n\nIf the stream has so much data that it would overflow an int, the return\nvalue is clamped to a maximum value, but no queued data is lost; if there\nare gigabytes of data queued, the app might need to read some of it with\nSDL_GetAudioStreamData before this function's return value is no longer\nclamped.\n\n\\param stream the audio stream to query.\n\\returns the number of converted/resampled bytes available or -1 on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioStreamData\n\\sa SDL_PutAudioStreamData",
          "name": "SDL_GetAudioStreamAvailable",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_GetAudioStreamQueued": {
          "doc": "Get the number of bytes currently queued.\n\nThis is the number of bytes put into a stream as input, not the number that\ncan be retrieved as output. Because of several details, it's not possible\nto calculate one number directly from the other. If you need to know how\nmuch usable data can be retrieved right now, you should use\nSDL_GetAudioStreamAvailable() and not this function.\n\nNote that audio streams can change their input format at any time, even if\nthere is still data queued in a different format, so the returned byte\ncount will not necessarily match the number of _sample frames_ available.\nUsers of this API should be aware of format changes they make when feeding\na stream and plan accordingly.\n\nQueued data is not converted until it is consumed by\nSDL_GetAudioStreamData, so this value should be representative of the exact\ndata that was put into the stream.\n\nIf the stream has so much data that it would overflow an int, the return\nvalue is clamped to a maximum value, but no queued data is lost; if there\nare gigabytes of data queued, the app might need to read some of it with\nSDL_GetAudioStreamData before this function's return value is no longer\nclamped.\n\n\\param stream the audio stream to query.\n\\returns the number of bytes queued or -1 on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PutAudioStreamData\n\\sa SDL_ClearAudioStream",
          "name": "SDL_GetAudioStreamQueued",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_FlushAudioStream": {
          "doc": "Tell the stream that you're done sending data, and anything being buffered\nshould be converted/resampled and made available immediately.\n\nIt is legal to add more data to a stream after flushing, but there may be\naudio gaps in the output. Generally this is intended to signal the end of\ninput, so the complete output becomes available.\n\n\\param stream the audio stream to flush.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PutAudioStreamData",
          "name": "SDL_FlushAudioStream",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_ClearAudioStream": {
          "doc": "Clear any pending data in the stream.\n\nThis drops any queued data, so there will be nothing to read from the\nstream until more is added.\n\n\\param stream the audio stream to clear.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioStreamAvailable\n\\sa SDL_GetAudioStreamData\n\\sa SDL_GetAudioStreamQueued\n\\sa SDL_PutAudioStreamData",
          "name": "SDL_ClearAudioStream",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_PauseAudioStreamDevice": {
          "doc": "Use this function to pause audio playback on the audio device associated\nwith an audio stream.\n\nThis function pauses audio processing for a given device. Any bound audio\nstreams will not progress, and no audio will be generated. Pausing one\ndevice does not prevent other unpaused devices from running.\n\nPausing a device can be useful to halt all audio without unbinding all the\naudio streams. This might be useful while a game is paused, or a level is\nloading, etc.\n\n\\param stream the audio stream associated with the audio device to pause.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ResumeAudioStreamDevice",
          "name": "SDL_PauseAudioStreamDevice",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_ResumeAudioStreamDevice": {
          "doc": "Use this function to unpause audio playback on the audio device associated\nwith an audio stream.\n\nThis function unpauses audio processing for a given device that has\npreviously been paused. Once unpaused, any bound audio streams will begin\nto progress again, and audio can be generated.\n\nRemember, SDL_OpenAudioDeviceStream opens device in a paused state, so this\nfunction call is required for audio playback to begin on such device.\n\n\\param stream the audio stream associated with the audio device to resume.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PauseAudioStreamDevice",
          "name": "SDL_ResumeAudioStreamDevice",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_AudioStreamDevicePaused": {
          "doc": "Use this function to query if an audio device associated with a stream is\npaused.\n\nUnlike in SDL2, audio devices start in an _unpaused_ state, since an app\nhas to bind a stream before any audio will flow.\n\n\\param stream the audio stream associated with the audio device to query.\n\\returns true if device is valid and paused, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PauseAudioStreamDevice\n\\sa SDL_ResumeAudioStreamDevice",
          "name": "SDL_AudioStreamDevicePaused",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_LockAudioStream": {
          "doc": "Lock an audio stream for serialized access.\n\nEach SDL_AudioStream has an internal mutex it uses to protect its data\nstructures from threading conflicts. This function allows an app to lock\nthat mutex, which could be useful if registering callbacks on this stream.\n\nOne does not need to lock a stream to use in it most cases, as the stream\nmanages this lock internally. However, this lock is held during callbacks,\nwhich may run from arbitrary threads at any time, so if an app needs to\nprotect shared data during those callbacks, locking the stream guarantees\nthat the callback is not running while the lock is held.\n\nAs this is just a wrapper over SDL_LockMutex for an internal lock; it has\nall the same attributes (recursive locks are allowed, etc).\n\n\\param stream the audio stream to lock.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UnlockAudioStream",
          "name": "SDL_LockAudioStream",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_UnlockAudioStream": {
          "doc": "Unlock an audio stream for serialized access.\n\nThis unlocks an audio stream after a call to SDL_LockAudioStream.\n\n\\param stream the audio stream to unlock.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety You should only call this from the same thread that\n              previously called SDL_LockAudioStream.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockAudioStream",
          "name": "SDL_UnlockAudioStream",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_AudioStreamCallback": {
          "doc": "A callback that fires when data passes through an SDL_AudioStream.\n\nApps can (optionally) register a callback with an audio stream that is\ncalled when data is added with SDL_PutAudioStreamData, or requested with\nSDL_GetAudioStreamData.\n\nTwo values are offered here: one is the amount of additional data needed to\nsatisfy the immediate request (which might be zero if the stream already\nhas enough data queued) and the other is the total amount being requested.\nIn a Get call triggering a Put callback, these values can be different. In\na Put call triggering a Get callback, these values are always the same.\n\nByte counts might be slightly overestimated due to buffering or resampling,\nand may change from call to call.\n\nThis callback is not required to do anything. Generally this is useful for\nadding/reading data on demand, and the app will often put/get data as\nappropriate, but the system goes on with the data currently available to it\nif this callback does nothing.\n\n\\param stream the SDL audio stream associated with this callback.\n\\param additional_amount the amount of data, in bytes, that is needed right\n                         now.\n\\param total_amount the total amount of data requested, in bytes, that is\n                    requested or available.\n\\param userdata an opaque pointer provided by the app for their personal\n                use.\n\n\\threadsafety This callbacks may run from any thread, so if you need to\n              protect shared data, you should use SDL_LockAudioStream to\n              serialize access; this lock will be held before your callback\n              is called, so your callback does not need to manage the lock\n              explicitly.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamGetCallback\n\\sa SDL_SetAudioStreamPutCallback",
          "name": "SDL_AudioStreamCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "additional_amount",
              "type": "int"
            },
            {
              "name": "total_amount",
              "type": "int"
            }
          ]
        },
        "SDL_SetAudioStreamGetCallback": {
          "doc": "Set a callback that runs when data is requested from an audio stream.\n\nThis callback is called _before_ data is obtained from the stream, giving\nthe callback the chance to add more on-demand.\n\nThe callback can (optionally) call SDL_PutAudioStreamData() to add more\naudio to the stream during this call; if needed, the request that triggered\nthis callback will obtain the new data immediately.\n\nThe callback's `additional_amount` argument is roughly how many bytes of\n_unconverted_ data (in the stream's input format) is needed by the caller,\nalthough this may overestimate a little for safety. This takes into account\nhow much is already in the stream and only asks for any extra necessary to\nresolve the request, which means the callback may be asked for zero bytes,\nand a different amount on each call.\n\nThe callback is not required to supply exact amounts; it is allowed to\nsupply too much or too little or none at all. The caller will get what's\navailable, up to the amount they requested, regardless of this callback's\noutcome.\n\nClearing or flushing an audio stream does not call this callback.\n\nThis function obtains the stream's lock, which means any existing callback\n(get or put) in progress will finish running before setting the new\ncallback.\n\nSetting a NULL function turns off the callback.\n\n\\param stream the audio stream to set the new callback on.\n\\param callback the new callback function to call when data is requested\n                from the stream.\n\\param userdata an opaque pointer provided to the callback for its own\n                personal use.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information. This only fails if `stream` is NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamPutCallback",
          "name": "SDL_SetAudioStreamGetCallback",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "callback",
              "type": "SDL_AudioStreamCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetAudioStreamPutCallback": {
          "doc": "Set a callback that runs when data is added to an audio stream.\n\nThis callback is called _after_ the data is added to the stream, giving the\ncallback the chance to obtain it immediately.\n\nThe callback can (optionally) call SDL_GetAudioStreamData() to obtain audio\nfrom the stream during this call.\n\nThe callback's `additional_amount` argument is how many bytes of\n_converted_ data (in the stream's output format) was provided by the\ncaller, although this may underestimate a little for safety. This value\nmight be less than what is currently available in the stream, if data was\nalready there, and might be less than the caller provided if the stream\nneeds to keep a buffer to aid in resampling. Which means the callback may\nbe provided with zero bytes, and a different amount on each call.\n\nThe callback may call SDL_GetAudioStreamAvailable to see the total amount\ncurrently available to read from the stream, instead of the total provided\nby the current call.\n\nThe callback is not required to obtain all data. It is allowed to read less\nor none at all. Anything not read now simply remains in the stream for\nlater access.\n\nClearing or flushing an audio stream does not call this callback.\n\nThis function obtains the stream's lock, which means any existing callback\n(get or put) in progress will finish running before setting the new\ncallback.\n\nSetting a NULL function turns off the callback.\n\n\\param stream the audio stream to set the new callback on.\n\\param callback the new callback function to call when data is added to the\n                stream.\n\\param userdata an opaque pointer provided to the callback for its own\n                personal use.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information. This only fails if `stream` is NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioStreamGetCallback",
          "name": "SDL_SetAudioStreamPutCallback",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            },
            {
              "name": "callback",
              "type": "SDL_AudioStreamCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_DestroyAudioStream": {
          "doc": "Free an audio stream.\n\nThis will release all allocated data, including any audio that is still\nqueued. You do not need to manually clear the stream first.\n\nIf this stream was bound to an audio device, it is unbound during this\ncall. If this stream was created with SDL_OpenAudioDeviceStream, the audio\ndevice that was opened alongside this stream's creation will be closed,\ntoo.\n\n\\param stream the audio stream to destroy.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateAudioStream",
          "name": "SDL_DestroyAudioStream",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "stream",
              "type": "SDL_AudioStream *"
            }
          ]
        },
        "SDL_OpenAudioDeviceStream": {
          "doc": "Convenience function for straightforward audio init for the common case.\n\nIf all your app intends to do is provide a single source of PCM audio, this\nfunction allows you to do all your audio setup in a single call.\n\nThis is also intended to be a clean means to migrate apps from SDL2.\n\nThis function will open an audio device, create a stream and bind it.\nUnlike other methods of setup, the audio device will be closed when this\nstream is destroyed, so the app can treat the returned SDL_AudioStream as\nthe only object needed to manage audio playback.\n\nAlso unlike other functions, the audio device begins paused. This is to map\nmore closely to SDL2-style behavior, since there is no extra step here to\nbind a stream to begin audio flowing. The audio device should be resumed\nwith `SDL_ResumeAudioStreamDevice(stream);`\n\nThis function works with both playback and recording devices.\n\nThe `spec` parameter represents the app's side of the audio stream. That\nis, for recording audio, this will be the output format, and for playing\naudio, this will be the input format. If spec is NULL, the system will\nchoose the format, and the app can use SDL_GetAudioStreamFormat() to obtain\nthis information later.\n\nIf you don't care about opening a specific audio device, you can (and\nprobably _should_), use SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and\nSDL_AUDIO_DEVICE_DEFAULT_RECORDING for recording.\n\nOne can optionally provide a callback function; if NULL, the app is\nexpected to queue audio data for playback (or unqueue audio data if\ncapturing). Otherwise, the callback will begin to fire once the device is\nunpaused.\n\nDestroying the returned stream with SDL_DestroyAudioStream will also close\nthe audio device associated with this stream.\n\n\\param devid an audio device to open, or SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK\n             or SDL_AUDIO_DEVICE_DEFAULT_RECORDING.\n\\param spec the audio stream's data format. Can be NULL.\n\\param callback a callback where the app will provide new data for\n                playback, or receive new data for recording. Can be NULL,\n                in which case the app will need to call\n                SDL_PutAudioStreamData or SDL_GetAudioStreamData as\n                necessary.\n\\param userdata app-controlled pointer passed to callback. Can be NULL.\n                Ignored if callback is NULL.\n\\returns an audio stream on success, ready to use, or NULL on failure; call\n         SDL_GetError() for more information. When done with this stream,\n         call SDL_DestroyAudioStream to free resources and close the\n         device.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAudioStreamDevice\n\\sa SDL_ResumeAudioStreamDevice",
          "name": "SDL_OpenAudioDeviceStream",
          "kind": "function",
          "type": "SDL_AudioStream *",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "spec",
              "type": "const SDL_AudioSpec *"
            },
            {
              "name": "callback",
              "type": "SDL_AudioStreamCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_AudioPostmixCallback": {
          "doc": "A callback that fires when data is about to be fed to an audio device.\n\nThis is useful for accessing the final mix, perhaps for writing a\nvisualizer or applying a final effect to the audio data before playback.\n\nThis callback should run as quickly as possible and not block for any\nsignificant time, as this callback delays submission of data to the audio\ndevice, which can cause audio playback problems.\n\nThe postmix callback _must_ be able to handle any audio data format\nspecified in `spec`, which can change between callbacks if the audio device\nchanged. However, this only covers frequency and channel count; data is\nalways provided here in SDL_AUDIO_F32 format.\n\nThe postmix callback runs _after_ logical device gain and audiostream gain\nhave been applied, which is to say you can make the output data louder at\nthis point than the gain settings would suggest.\n\n\\param userdata a pointer provided by the app through\n                SDL_SetAudioPostmixCallback, for its own use.\n\\param spec the current format of audio that is to be submitted to the\n            audio device.\n\\param buffer the buffer of audio samples to be submitted. The callback can\n              inspect and/or modify this data.\n\\param buflen the size of `buffer` in bytes.\n\n\\threadsafety This will run from a background thread owned by SDL. The\n              application is responsible for locking resources the callback\n              touches that need to be protected.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetAudioPostmixCallback",
          "name": "SDL_AudioPostmixCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "spec",
              "type": "const SDL_AudioSpec *"
            },
            {
              "name": "buffer",
              "type": "float *"
            },
            {
              "name": "buflen",
              "type": "int"
            }
          ]
        },
        "SDL_SetAudioPostmixCallback": {
          "doc": "Set a callback that fires when data is about to be fed to an audio device.\n\nThis is useful for accessing the final mix, perhaps for writing a\nvisualizer or applying a final effect to the audio data before playback.\n\nThe buffer is the final mix of all bound audio streams on an opened device;\nthis callback will fire regularly for any device that is both opened and\nunpaused. If there is no new data to mix, either because no streams are\nbound to the device or all the streams are empty, this callback will still\nfire with the entire buffer set to silence.\n\nThis callback is allowed to make changes to the data; the contents of the\nbuffer after this call is what is ultimately passed along to the hardware.\n\nThe callback is always provided the data in float format (values from -1.0f\nto 1.0f), but the number of channels or sample rate may be different than\nthe format the app requested when opening the device; SDL might have had to\nmanage a conversion behind the scenes, or the playback might have jumped to\nnew physical hardware when a system default changed, etc. These details may\nchange between calls. Accordingly, the size of the buffer might change\nbetween calls as well.\n\nThis callback can run at any time, and from any thread; if you need to\nserialize access to your app's data, you should provide and use a mutex or\nother synchronization device.\n\nAll of this to say: there are specific needs this callback can fulfill, but\nit is not the simplest interface. Apps should generally provide audio in\ntheir preferred format through an SDL_AudioStream and let SDL handle the\ndifference.\n\nThis function is extremely time-sensitive; the callback should do the least\namount of work possible and return as quickly as it can. The longer the\ncallback runs, the higher the risk of audio dropouts or other problems.\n\nThis function will block until the audio device is in between iterations,\nso any existing callback that might be running will finish before this\nfunction sets the new callback and returns.\n\nSetting a NULL callback function disables any previously-set callback.\n\n\\param devid the ID of an opened audio device.\n\\param callback a callback function to be called. Can be NULL.\n\\param userdata app-controlled pointer passed to callback. Can be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetAudioPostmixCallback",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "devid",
              "type": "SDL_AudioDeviceID"
            },
            {
              "name": "callback",
              "type": "SDL_AudioPostmixCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_LoadWAV_IO": {
          "doc": "Load the audio data of a WAVE file into memory.\n\nLoading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to\nbe valid pointers. The entire data portion of the file is then loaded into\nmemory and decoded if necessary.\n\nSupported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and\n32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and\nA-law and mu-law (8 bits). Other formats are currently unsupported and\ncause an error.\n\nIf this function succeeds, the return value is zero and the pointer to the\naudio data allocated by the function is written to `audio_buf` and its\nlength in bytes to `audio_len`. The SDL_AudioSpec members `freq`,\n`channels`, and `format` are set to the values of the audio data in the\nbuffer.\n\nIt's necessary to use SDL_free() to free the audio data returned in\n`audio_buf` when it is no longer used.\n\nBecause of the underspecification of the .WAV format, there are many\nproblematic files in the wild that cause issues with strict decoders. To\nprovide compatibility with these files, this decoder is lenient in regards\nto the truncation of the file, the fact chunk, and the size of the RIFF\nchunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,\n`SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to\ntune the behavior of the loading process.\n\nAny file that is invalid (due to truncation, corruption, or wrong values in\nthe headers), too big, or unsupported causes an error. Additionally, any\ncritical I/O error from the data source will terminate the loading process\nwith an error. The function returns NULL on error and in all cases (with\nthe exception of `src` being NULL), an appropriate error message will be\nset.\n\nIt is required that the data source supports seeking.\n\nExample:\n\n```c\nSDL_LoadWAV_IO(SDL_IOFromFile(\"sample.wav\", \"rb\"), true, &spec, &buf, &len);\n```\n\nNote that the SDL_LoadWAV function does this same thing for you, but in a\nless messy way:\n\n```c\nSDL_LoadWAV(\"sample.wav\", &spec, &buf, &len);\n```\n\n\\param src the data source for the WAVE data.\n\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even\n               in the case of an error.\n\\param spec a pointer to an SDL_AudioSpec that will be set to the WAVE\n            data's format details on successful return.\n\\param audio_buf a pointer filled with the audio data, allocated by the\n                 function.\n\\param audio_len a pointer filled with the length of the audio data buffer\n                 in bytes.\n\\returns true on success. `audio_buf` will be filled with a pointer to an\n         allocated buffer containing the audio data, and `audio_len` is\n         filled with the length of that audio buffer in bytes.\n\n         This function returns false if the .WAV file cannot be opened,\n         uses an unknown data format, or is corrupt; call SDL_GetError()\n         for more information.\n\n         When the application is done with the data returned in\n         `audio_buf`, it should call SDL_free() to dispose of it.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_LoadWAV",
          "name": "SDL_LoadWAV_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "spec",
              "type": "SDL_AudioSpec *"
            },
            {
              "name": "audio_buf",
              "type": "Uint8 **"
            },
            {
              "name": "audio_len",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_LoadWAV": {
          "doc": "Loads a WAV from a file path.\n\nThis is a convenience function that is effectively the same as:\n\n```c\nSDL_LoadWAV_IO(SDL_IOFromFile(path, \"rb\"), true, spec, audio_buf, audio_len);\n```\n\n\\param path the file path of the WAV file to open.\n\\param spec a pointer to an SDL_AudioSpec that will be set to the WAVE\n            data's format details on successful return.\n\\param audio_buf a pointer filled with the audio data, allocated by the\n                 function.\n\\param audio_len a pointer filled with the length of the audio data buffer\n                 in bytes.\n\\returns true on success. `audio_buf` will be filled with a pointer to an\n         allocated buffer containing the audio data, and `audio_len` is\n         filled with the length of that audio buffer in bytes.\n\n         This function returns false if the .WAV file cannot be opened,\n         uses an unknown data format, or is corrupt; call SDL_GetError()\n         for more information.\n\n         When the application is done with the data returned in\n         `audio_buf`, it should call SDL_free() to dispose of it.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_LoadWAV_IO",
          "name": "SDL_LoadWAV",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "spec",
              "type": "SDL_AudioSpec *"
            },
            {
              "name": "audio_buf",
              "type": "Uint8 **"
            },
            {
              "name": "audio_len",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_MixAudio": {
          "doc": "Mix audio data in a specified format.\n\nThis takes an audio buffer `src` of `len` bytes of `format` data and mixes\nit into `dst`, performing addition, volume adjustment, and overflow\nclipping. The buffer pointed to by `dst` must also be `len` bytes of\n`format` data.\n\nThis is provided for convenience -- you can mix your own audio data.\n\nDo not use this function for mixing together more than two streams of\nsample data. The output from repeated application of this function may be\ndistorted by clipping, because there is no accumulator with greater range\nthan the input (not to mention this being an inefficient way of doing it).\n\nIt is a common misconception that this function is required to write audio\ndata to an output stream in an audio callback. While you can do that,\nSDL_MixAudio() is really only needed when you're mixing a single audio\nstream with a volume adjustment.\n\n\\param dst the destination for the mixed audio.\n\\param src the source audio buffer to be mixed.\n\\param format the SDL_AudioFormat structure representing the desired audio\n              format.\n\\param len the length of the audio buffer in bytes.\n\\param volume ranges from 0.0 - 1.0, and should be set to 1.0 for full\n              audio volume.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_MixAudio",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "Uint8 *"
            },
            {
              "name": "src",
              "type": "const Uint8 *"
            },
            {
              "name": "format",
              "type": "SDL_AudioFormat"
            },
            {
              "name": "len",
              "type": "Uint32"
            },
            {
              "name": "volume",
              "type": "float"
            }
          ]
        },
        "SDL_ConvertAudioSamples": {
          "doc": "Convert some audio data of one format to another format.\n\nPlease note that this function is for convenience, but should not be used\nto resample audio in blocks, as it will introduce audio artifacts on the\nboundaries. You should only use this function if you are converting audio\ndata in its entirety in one call. If you want to convert audio in smaller\nchunks, use an SDL_AudioStream, which is designed for this situation.\n\nInternally, this function creates and destroys an SDL_AudioStream on each\nuse, so it's also less efficient than using one directly, if you need to\nconvert multiple times.\n\n\\param src_spec the format details of the input audio.\n\\param src_data the audio data to be converted.\n\\param src_len the len of src_data.\n\\param dst_spec the format details of the output audio.\n\\param dst_data will be filled with a pointer to converted audio data,\n                which should be freed with SDL_free(). On error, it will be\n                NULL.\n\\param dst_len will be filled with the len of dst_data.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ConvertAudioSamples",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src_spec",
              "type": "const SDL_AudioSpec *"
            },
            {
              "name": "src_data",
              "type": "const Uint8 *"
            },
            {
              "name": "src_len",
              "type": "int"
            },
            {
              "name": "dst_spec",
              "type": "const SDL_AudioSpec *"
            },
            {
              "name": "dst_data",
              "type": "Uint8 **"
            },
            {
              "name": "dst_len",
              "type": "int *"
            }
          ]
        },
        "SDL_GetAudioFormatName": {
          "doc": "Get the human readable name of an audio format.\n\n\\param format the audio format to query.\n\\returns the human readable name of the specified audio format or\n         \"SDL_AUDIO_UNKNOWN\" if the format isn't recognized.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetAudioFormatName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_AudioFormat"
            }
          ]
        },
        "SDL_GetSilenceValueForFormat": {
          "doc": "Get the appropriate memset value for silencing an audio format.\n\nThe value returned by this function can be used as the second argument to\nmemset (or SDL_memset) to set an audio buffer in a specific format to\nsilence.\n\n\\param format the audio data format to query.\n\\returns a byte value that can be passed to memset.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSilenceValueForFormat",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_AudioFormat"
            }
          ]
        }
      }
    },
    "SDL_events.h": {
      "name": "SDL_events.h",
      "doc": "# CategoryEvents\n\nEvent queue management.\n\nIt's extremely common--often required--that an app deal with SDL's event\nqueue. Almost all useful information about interactions with the real world\nflow through here: the user interacting with the computer and app, hardware\ncoming and going, the system changing in some way, etc.\n\nAn app generally takes a moment, perhaps at the start of a new frame, to\nexamine any events that have occured since the last time and process or\nignore them. This is generally done by calling SDL_PollEvent() in a loop\nuntil it returns false (or, if using the main callbacks, events are\nprovided one at a time in calls to SDL_AppEvent() before the next call to\nSDL_AppIterate(); in this scenario, the app does not call SDL_PollEvent()\nat all).\n\nThere is other forms of control, too: SDL_PeepEvents() has more\nfunctionality at the cost of more complexity, and SDL_WaitEvent() can block\nthe process until something interesting happens, which might be beneficial\nfor certain types of programs on low-power hardware. One may also call\nSDL_AddEventWatch() to set a callback when new events arrive.\n\nThe app is free to generate their own events, too: SDL_PushEvent allows the\napp to put events onto the queue for later retrieval; SDL_RegisterEvents\ncan guarantee that these events have a type that isn't in use by other\nparts of the system.",
      "entries": {
        "SDL_EventType": {
          "doc": "The types of events that can be delivered.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_EventType",
          "kind": "enum",
          "entries": {
            "SDL_EVENT_FIRST": {
              "doc": "Unused (do not remove)",
              "name": "SDL_EVENT_FIRST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_QUIT": {
              "doc": "User-requested quit.",
              "name": "SDL_EVENT_QUIT",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_TERMINATING": {
              "doc": "The application is being terminated by the OS.  This event must be handled in a callback set with SDL_AddEventWatch(). Called on iOS in applicationWillTerminate() Called on Android in onDestroy()",
              "name": "SDL_EVENT_TERMINATING",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_LOW_MEMORY": {
              "doc": "The application is low on memory, free memory if possible.  This event must be handled in a callback set with SDL_AddEventWatch(). Called on iOS in applicationDidReceiveMemoryWarning() Called on Android in onTrimMemory()",
              "name": "SDL_EVENT_LOW_MEMORY",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WILL_ENTER_BACKGROUND": {
              "doc": "The application is about to enter the background.  This event must be handled in a callback set with SDL_AddEventWatch(). Called on iOS in applicationWillResignActive() Called on Android in onPause()",
              "name": "SDL_EVENT_WILL_ENTER_BACKGROUND",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DID_ENTER_BACKGROUND": {
              "doc": "The application did enter the background and may not get CPU for some time.  This event must be handled in a callback set with SDL_AddEventWatch(). Called on iOS in applicationDidEnterBackground() Called on Android in onPause()",
              "name": "SDL_EVENT_DID_ENTER_BACKGROUND",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WILL_ENTER_FOREGROUND": {
              "doc": "The application is about to enter the foreground.  This event must be handled in a callback set with SDL_AddEventWatch(). Called on iOS in applicationWillEnterForeground() Called on Android in onResume()",
              "name": "SDL_EVENT_WILL_ENTER_FOREGROUND",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DID_ENTER_FOREGROUND": {
              "doc": "The application is now interactive.  This event must be handled in a callback set with SDL_AddEventWatch(). Called on iOS in applicationDidBecomeActive() Called on Android in onResume()",
              "name": "SDL_EVENT_DID_ENTER_FOREGROUND",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_LOCALE_CHANGED": {
              "doc": "The user's locale preferences have changed.",
              "name": "SDL_EVENT_LOCALE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_SYSTEM_THEME_CHANGED": {
              "doc": "The system theme changed.",
              "name": "SDL_EVENT_SYSTEM_THEME_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_ORIENTATION": {
              "doc": "Display orientation has changed to data1.",
              "name": "SDL_EVENT_DISPLAY_ORIENTATION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_ADDED": {
              "doc": "Display has been added to the system.",
              "name": "SDL_EVENT_DISPLAY_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_REMOVED": {
              "doc": "Display has been removed from the system.",
              "name": "SDL_EVENT_DISPLAY_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_MOVED": {
              "doc": "Display has changed position.",
              "name": "SDL_EVENT_DISPLAY_MOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED": {
              "doc": "Display has changed desktop mode.",
              "name": "SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED": {
              "doc": "Display has changed current mode.",
              "name": "SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED": {
              "doc": "Display has changed content scale.",
              "name": "SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_FIRST": {
              "doc": "",
              "name": "SDL_EVENT_DISPLAY_FIRST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DISPLAY_LAST": {
              "doc": "",
              "name": "SDL_EVENT_DISPLAY_LAST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_SHOWN": {
              "doc": "Window has been shown.",
              "name": "SDL_EVENT_WINDOW_SHOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_HIDDEN": {
              "doc": "Window has been hidden.",
              "name": "SDL_EVENT_WINDOW_HIDDEN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_EXPOSED": {
              "doc": "Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event.",
              "name": "SDL_EVENT_WINDOW_EXPOSED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_MOVED": {
              "doc": "Window has been moved to data1, data2.",
              "name": "SDL_EVENT_WINDOW_MOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_RESIZED": {
              "doc": "Window has been resized to data1xdata2.",
              "name": "SDL_EVENT_WINDOW_RESIZED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED": {
              "doc": "The pixel size of the window has changed to data1xdata2.",
              "name": "SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_METAL_VIEW_RESIZED": {
              "doc": "The pixel size of a Metal view associated with the window has changed.",
              "name": "SDL_EVENT_WINDOW_METAL_VIEW_RESIZED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_MINIMIZED": {
              "doc": "Window has been minimized.",
              "name": "SDL_EVENT_WINDOW_MINIMIZED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_MAXIMIZED": {
              "doc": "Window has been maximized.",
              "name": "SDL_EVENT_WINDOW_MAXIMIZED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_RESTORED": {
              "doc": "Window has been restored to normal size and position.",
              "name": "SDL_EVENT_WINDOW_RESTORED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_MOUSE_ENTER": {
              "doc": "Window has gained mouse focus.",
              "name": "SDL_EVENT_WINDOW_MOUSE_ENTER",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_MOUSE_LEAVE": {
              "doc": "Window has lost mouse focus.",
              "name": "SDL_EVENT_WINDOW_MOUSE_LEAVE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_FOCUS_GAINED": {
              "doc": "Window has gained keyboard focus.",
              "name": "SDL_EVENT_WINDOW_FOCUS_GAINED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_FOCUS_LOST": {
              "doc": "Window has lost keyboard focus.",
              "name": "SDL_EVENT_WINDOW_FOCUS_LOST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_CLOSE_REQUESTED": {
              "doc": "The window manager requests that the window be closed.",
              "name": "SDL_EVENT_WINDOW_CLOSE_REQUESTED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_HIT_TEST": {
              "doc": "Window had a hit test that wasn't SDL_HITTEST_NORMAL.",
              "name": "SDL_EVENT_WINDOW_HIT_TEST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_ICCPROF_CHANGED": {
              "doc": "The ICC profile of the window's display has changed.",
              "name": "SDL_EVENT_WINDOW_ICCPROF_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_DISPLAY_CHANGED": {
              "doc": "Window has been moved to display data1.",
              "name": "SDL_EVENT_WINDOW_DISPLAY_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED": {
              "doc": "Window display scale has been changed.",
              "name": "SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_SAFE_AREA_CHANGED": {
              "doc": "The window safe area has been changed.",
              "name": "SDL_EVENT_WINDOW_SAFE_AREA_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_OCCLUDED": {
              "doc": "The window has been occluded.",
              "name": "SDL_EVENT_WINDOW_OCCLUDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_ENTER_FULLSCREEN": {
              "doc": "The window has entered fullscreen mode.",
              "name": "SDL_EVENT_WINDOW_ENTER_FULLSCREEN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_LEAVE_FULLSCREEN": {
              "doc": "The window has left fullscreen mode.",
              "name": "SDL_EVENT_WINDOW_LEAVE_FULLSCREEN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_DESTROYED": {
              "doc": "The window with the associated ID is being or has been destroyed.  If this message is being handled in an event watcher, the window handle is still valid and can still be used to retrieve any properties associated with the window. Otherwise, the handle has already been destroyed and all resources associated with it are invalid",
              "name": "SDL_EVENT_WINDOW_DESTROYED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_HDR_STATE_CHANGED": {
              "doc": "Window HDR properties have changed.",
              "name": "SDL_EVENT_WINDOW_HDR_STATE_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_FIRST": {
              "doc": "",
              "name": "SDL_EVENT_WINDOW_FIRST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_WINDOW_LAST": {
              "doc": "",
              "name": "SDL_EVENT_WINDOW_LAST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_KEY_DOWN": {
              "doc": "Key pressed.",
              "name": "SDL_EVENT_KEY_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_KEY_UP": {
              "doc": "Key released.",
              "name": "SDL_EVENT_KEY_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_TEXT_EDITING": {
              "doc": "Keyboard text editing (composition)",
              "name": "SDL_EVENT_TEXT_EDITING",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_TEXT_INPUT": {
              "doc": "Keyboard text input.",
              "name": "SDL_EVENT_TEXT_INPUT",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_KEYMAP_CHANGED": {
              "doc": "Keymap changed due to a system event such as an input language or keyboard layout change.",
              "name": "SDL_EVENT_KEYMAP_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_KEYBOARD_ADDED": {
              "doc": "A new keyboard has been inserted into the system.",
              "name": "SDL_EVENT_KEYBOARD_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_KEYBOARD_REMOVED": {
              "doc": "A keyboard has been removed.",
              "name": "SDL_EVENT_KEYBOARD_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_TEXT_EDITING_CANDIDATES": {
              "doc": "Keyboard text editing candidates.",
              "name": "SDL_EVENT_TEXT_EDITING_CANDIDATES",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_MOUSE_MOTION": {
              "doc": "Mouse moved.",
              "name": "SDL_EVENT_MOUSE_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_MOUSE_BUTTON_DOWN": {
              "doc": "Mouse button pressed.",
              "name": "SDL_EVENT_MOUSE_BUTTON_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_MOUSE_BUTTON_UP": {
              "doc": "Mouse button released.",
              "name": "SDL_EVENT_MOUSE_BUTTON_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_MOUSE_WHEEL": {
              "doc": "Mouse wheel motion.",
              "name": "SDL_EVENT_MOUSE_WHEEL",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_MOUSE_ADDED": {
              "doc": "A new mouse has been inserted into the system.",
              "name": "SDL_EVENT_MOUSE_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_MOUSE_REMOVED": {
              "doc": "A mouse has been removed.",
              "name": "SDL_EVENT_MOUSE_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_AXIS_MOTION": {
              "doc": "Joystick axis motion.",
              "name": "SDL_EVENT_JOYSTICK_AXIS_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_BALL_MOTION": {
              "doc": "Joystick trackball motion.",
              "name": "SDL_EVENT_JOYSTICK_BALL_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_HAT_MOTION": {
              "doc": "Joystick hat position change.",
              "name": "SDL_EVENT_JOYSTICK_HAT_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_BUTTON_DOWN": {
              "doc": "Joystick button pressed.",
              "name": "SDL_EVENT_JOYSTICK_BUTTON_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_BUTTON_UP": {
              "doc": "Joystick button released.",
              "name": "SDL_EVENT_JOYSTICK_BUTTON_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_ADDED": {
              "doc": "A new joystick has been inserted into the system.",
              "name": "SDL_EVENT_JOYSTICK_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_REMOVED": {
              "doc": "An opened joystick has been removed.",
              "name": "SDL_EVENT_JOYSTICK_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_BATTERY_UPDATED": {
              "doc": "Joystick battery level change.",
              "name": "SDL_EVENT_JOYSTICK_BATTERY_UPDATED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_JOYSTICK_UPDATE_COMPLETE": {
              "doc": "Joystick update is complete.",
              "name": "SDL_EVENT_JOYSTICK_UPDATE_COMPLETE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_AXIS_MOTION": {
              "doc": "Gamepad axis motion.",
              "name": "SDL_EVENT_GAMEPAD_AXIS_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_BUTTON_DOWN": {
              "doc": "Gamepad button pressed.",
              "name": "SDL_EVENT_GAMEPAD_BUTTON_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_BUTTON_UP": {
              "doc": "Gamepad button released.",
              "name": "SDL_EVENT_GAMEPAD_BUTTON_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_ADDED": {
              "doc": "A new gamepad has been inserted into the system.",
              "name": "SDL_EVENT_GAMEPAD_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_REMOVED": {
              "doc": "A gamepad has been removed.",
              "name": "SDL_EVENT_GAMEPAD_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_REMAPPED": {
              "doc": "The gamepad mapping was updated.",
              "name": "SDL_EVENT_GAMEPAD_REMAPPED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN": {
              "doc": "Gamepad touchpad was touched.",
              "name": "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION": {
              "doc": "Gamepad touchpad finger was moved.",
              "name": "SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_TOUCHPAD_UP": {
              "doc": "Gamepad touchpad finger was lifted.",
              "name": "SDL_EVENT_GAMEPAD_TOUCHPAD_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_SENSOR_UPDATE": {
              "doc": "Gamepad sensor was updated.",
              "name": "SDL_EVENT_GAMEPAD_SENSOR_UPDATE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_UPDATE_COMPLETE": {
              "doc": "Gamepad update is complete.",
              "name": "SDL_EVENT_GAMEPAD_UPDATE_COMPLETE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED": {
              "doc": "Gamepad Steam handle has changed.",
              "name": "SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_FINGER_DOWN": {
              "doc": "",
              "name": "SDL_EVENT_FINGER_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_FINGER_UP": {
              "doc": "",
              "name": "SDL_EVENT_FINGER_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_FINGER_MOTION": {
              "doc": "",
              "name": "SDL_EVENT_FINGER_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_FINGER_CANCELED": {
              "doc": "",
              "name": "SDL_EVENT_FINGER_CANCELED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_CLIPBOARD_UPDATE": {
              "doc": "The clipboard or primary selection changed.",
              "name": "SDL_EVENT_CLIPBOARD_UPDATE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DROP_FILE": {
              "doc": "The system requests a file open.",
              "name": "SDL_EVENT_DROP_FILE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DROP_TEXT": {
              "doc": "text/plain drag-and-drop event",
              "name": "SDL_EVENT_DROP_TEXT",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DROP_BEGIN": {
              "doc": "A new set of drops is beginning (NULL filename)",
              "name": "SDL_EVENT_DROP_BEGIN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DROP_COMPLETE": {
              "doc": "Current set of drops is now complete (NULL filename)",
              "name": "SDL_EVENT_DROP_COMPLETE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_DROP_POSITION": {
              "doc": "Position while moving over the window.",
              "name": "SDL_EVENT_DROP_POSITION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_AUDIO_DEVICE_ADDED": {
              "doc": "A new audio device is available.",
              "name": "SDL_EVENT_AUDIO_DEVICE_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_AUDIO_DEVICE_REMOVED": {
              "doc": "An audio device has been removed.",
              "name": "SDL_EVENT_AUDIO_DEVICE_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED": {
              "doc": "An audio device's format has been changed by the system.",
              "name": "SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_SENSOR_UPDATE": {
              "doc": "A sensor was updated.",
              "name": "SDL_EVENT_SENSOR_UPDATE",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_PROXIMITY_IN": {
              "doc": "Pressure-sensitive pen has become available.",
              "name": "SDL_EVENT_PEN_PROXIMITY_IN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_PROXIMITY_OUT": {
              "doc": "Pressure-sensitive pen has become unavailable.",
              "name": "SDL_EVENT_PEN_PROXIMITY_OUT",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_DOWN": {
              "doc": "Pressure-sensitive pen touched drawing surface.",
              "name": "SDL_EVENT_PEN_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_UP": {
              "doc": "Pressure-sensitive pen stopped touching drawing surface.",
              "name": "SDL_EVENT_PEN_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_BUTTON_DOWN": {
              "doc": "Pressure-sensitive pen button pressed.",
              "name": "SDL_EVENT_PEN_BUTTON_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_BUTTON_UP": {
              "doc": "Pressure-sensitive pen button released.",
              "name": "SDL_EVENT_PEN_BUTTON_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_MOTION": {
              "doc": "Pressure-sensitive pen is moving on the tablet.",
              "name": "SDL_EVENT_PEN_MOTION",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PEN_AXIS": {
              "doc": "Pressure-sensitive pen angle/pressure/etc changed.",
              "name": "SDL_EVENT_PEN_AXIS",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_CAMERA_DEVICE_ADDED": {
              "doc": "A new camera device is available.",
              "name": "SDL_EVENT_CAMERA_DEVICE_ADDED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_CAMERA_DEVICE_REMOVED": {
              "doc": "A camera device has been removed.",
              "name": "SDL_EVENT_CAMERA_DEVICE_REMOVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_CAMERA_DEVICE_APPROVED": {
              "doc": "A camera device has been approved for use by the user.",
              "name": "SDL_EVENT_CAMERA_DEVICE_APPROVED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_CAMERA_DEVICE_DENIED": {
              "doc": "A camera device has been denied for use by the user.",
              "name": "SDL_EVENT_CAMERA_DEVICE_DENIED",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_RENDER_TARGETS_RESET": {
              "doc": "The render targets have been reset and their contents need to be updated.",
              "name": "SDL_EVENT_RENDER_TARGETS_RESET",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_RENDER_DEVICE_RESET": {
              "doc": "The device has been reset and all textures need to be recreated.",
              "name": "SDL_EVENT_RENDER_DEVICE_RESET",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_RENDER_DEVICE_LOST": {
              "doc": "The device has been lost and can't be recovered.",
              "name": "SDL_EVENT_RENDER_DEVICE_LOST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PRIVATE0": {
              "doc": "",
              "name": "SDL_EVENT_PRIVATE0",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PRIVATE1": {
              "doc": "",
              "name": "SDL_EVENT_PRIVATE1",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PRIVATE2": {
              "doc": "",
              "name": "SDL_EVENT_PRIVATE2",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_PRIVATE3": {
              "doc": "",
              "name": "SDL_EVENT_PRIVATE3",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_POLL_SENTINEL": {
              "doc": "Signals the end of an event poll cycle.",
              "name": "SDL_EVENT_POLL_SENTINEL",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_USER": {
              "doc": "Events SDL_EVENT_USER through SDL_EVENT_LAST are for your use, and should be allocated with SDL_RegisterEvents()",
              "name": "SDL_EVENT_USER",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_LAST": {
              "doc": "This last event is only for bounding internal arrays.",
              "name": "SDL_EVENT_LAST",
              "kind": "var",
              "type": ""
            },
            "SDL_EVENT_ENUM_PADDING": {
              "doc": "",
              "name": "SDL_EVENT_ENUM_PADDING",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_CommonEvent": {
          "doc": "Fields shared by every event\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_CommonEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration",
              "name": "type",
              "kind": "var",
              "type": "Uint32"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            }
          }
        },
        "SDL_DisplayEvent": {
          "doc": "Display state change event data (event.display.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_DisplayEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_DISPLAYEVENT_*",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "displayID": {
              "doc": "The associated display",
              "name": "displayID",
              "kind": "var",
              "type": "SDL_DisplayID"
            },
            "data1": {
              "doc": "event dependent data",
              "name": "data1",
              "kind": "var",
              "type": "Sint32"
            },
            "data2": {
              "doc": "event dependent data",
              "name": "data2",
              "kind": "var",
              "type": "Sint32"
            }
          }
        },
        "SDL_WindowEvent": {
          "doc": "Window state change event data (event.window.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_WindowEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_WINDOW_*",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The associated window",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "data1": {
              "doc": "event dependent data",
              "name": "data1",
              "kind": "var",
              "type": "Sint32"
            },
            "data2": {
              "doc": "event dependent data",
              "name": "data2",
              "kind": "var",
              "type": "Sint32"
            }
          }
        },
        "SDL_KeyboardDeviceEvent": {
          "doc": "Keyboard device event structure (event.kdevice.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_KeyboardDeviceEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_KEYBOARD_ADDED or SDL_EVENT_KEYBOARD_REMOVED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The keyboard instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_KeyboardID"
            }
          }
        },
        "SDL_KeyboardEvent": {
          "doc": "Keyboard button event structure (event.key.*)\n\nThe `key` is the base SDL_Keycode generated by pressing the `scancode`\nusing the current keyboard layout, applying any options specified in\nSDL_HINT_KEYCODE_OPTIONS. You can get the SDL_Keycode corresponding to the\nevent scancode and modifiers directly from the keyboard layout, bypassing\nSDL_HINT_KEYCODE_OPTIONS, by calling SDL_GetKeyFromScancode().\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyFromScancode\n\\sa SDL_HINT_KEYCODE_OPTIONS",
          "name": "SDL_KeyboardEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_KEY_DOWN or SDL_EVENT_KEY_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with keyboard focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The keyboard instance id, or 0 if unknown or virtual",
              "name": "which",
              "kind": "var",
              "type": "SDL_KeyboardID"
            },
            "scancode": {
              "doc": "SDL physical key code",
              "name": "scancode",
              "kind": "var",
              "type": "SDL_Scancode"
            },
            "key": {
              "doc": "SDL virtual key code",
              "name": "key",
              "kind": "var",
              "type": "SDL_Keycode"
            },
            "mod": {
              "doc": "current key modifiers",
              "name": "mod",
              "kind": "var",
              "type": "SDL_Keymod"
            },
            "raw": {
              "doc": "The platform dependent scancode for this event",
              "name": "raw",
              "kind": "var",
              "type": "Uint16"
            },
            "down": {
              "doc": "true if the key is pressed",
              "name": "down",
              "kind": "var",
              "type": "bool"
            },
            "repeat": {
              "doc": "true if this is a key repeat",
              "name": "repeat",
              "kind": "var",
              "type": "bool"
            }
          }
        },
        "SDL_TextEditingEvent": {
          "doc": "Keyboard text editing event structure (event.edit.*)\n\nThe start cursor is the position, in UTF-8 characters, where new typing\nwill be inserted into the editing text. The length is the number of UTF-8\ncharacters that will be replaced by new typing.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_TextEditingEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_TEXT_EDITING",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with keyboard focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "text": {
              "doc": "The editing text",
              "name": "text",
              "kind": "var",
              "type": "const char *"
            },
            "start": {
              "doc": "The start cursor of selected editing text, or -1 if not set",
              "name": "start",
              "kind": "var",
              "type": "Sint32"
            },
            "length": {
              "doc": "The length of selected editing text, or -1 if not set",
              "name": "length",
              "kind": "var",
              "type": "Sint32"
            }
          }
        },
        "SDL_TextEditingCandidatesEvent": {
          "doc": "Keyboard IME candidates event structure (event.edit_candidates.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_TextEditingCandidatesEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_TEXT_EDITING_CANDIDATES",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with keyboard focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "candidates": {
              "doc": "The list of candidates, or NULL if there are no candidates available",
              "name": "candidates",
              "kind": "var",
              "type": "const char *const  *"
            },
            "num_candidates": {
              "doc": "The number of strings in `candidates`",
              "name": "num_candidates",
              "kind": "var",
              "type": "Sint32"
            },
            "selected_candidate": {
              "doc": "The index of the selected candidate, or -1 if no candidate is selected",
              "name": "selected_candidate",
              "kind": "var",
              "type": "Sint32"
            },
            "horizontal": {
              "doc": "true if the list is horizontal, false if it's vertical",
              "name": "horizontal",
              "kind": "var",
              "type": "bool"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            },
            "padding3": {
              "doc": "",
              "name": "padding3",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_TextInputEvent": {
          "doc": "Keyboard text input event structure (event.text.*)\n\nThis event will never be delivered unless text input is enabled by calling\nSDL_StartTextInput(). Text input is disabled by default!\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInput\n\\sa SDL_StopTextInput",
          "name": "SDL_TextInputEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_TEXT_INPUT",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with keyboard focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "text": {
              "doc": "The input text, UTF-8 encoded",
              "name": "text",
              "kind": "var",
              "type": "const char *"
            }
          }
        },
        "SDL_MouseDeviceEvent": {
          "doc": "Mouse device event structure (event.mdevice.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MouseDeviceEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_MOUSE_ADDED or SDL_EVENT_MOUSE_REMOVED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The mouse instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_MouseID"
            }
          }
        },
        "SDL_MouseMotionEvent": {
          "doc": "Mouse motion event structure (event.motion.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MouseMotionEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_MOUSE_MOTION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with mouse focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The mouse instance id in relative mode, SDL_TOUCH_MOUSEID for touch events, or 0",
              "name": "which",
              "kind": "var",
              "type": "SDL_MouseID"
            },
            "state": {
              "doc": "The current button state",
              "name": "state",
              "kind": "var",
              "type": "SDL_MouseButtonFlags"
            },
            "x": {
              "doc": "X coordinate, relative to window",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "xrel": {
              "doc": "The relative motion in the X direction",
              "name": "xrel",
              "kind": "var",
              "type": "float"
            },
            "yrel": {
              "doc": "The relative motion in the Y direction",
              "name": "yrel",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_MouseButtonEvent": {
          "doc": "Mouse button event structure (event.button.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MouseButtonEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_MOUSE_BUTTON_DOWN or SDL_EVENT_MOUSE_BUTTON_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with mouse focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The mouse instance id in relative mode, SDL_TOUCH_MOUSEID for touch events, or 0",
              "name": "which",
              "kind": "var",
              "type": "SDL_MouseID"
            },
            "button": {
              "doc": "The mouse button index",
              "name": "button",
              "kind": "var",
              "type": "Uint8"
            },
            "down": {
              "doc": "true if the button is pressed",
              "name": "down",
              "kind": "var",
              "type": "bool"
            },
            "clicks": {
              "doc": "1 for single-click, 2 for double-click, etc.",
              "name": "clicks",
              "kind": "var",
              "type": "Uint8"
            },
            "padding": {
              "doc": "",
              "name": "padding",
              "kind": "var",
              "type": "Uint8"
            },
            "x": {
              "doc": "X coordinate, relative to window",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window",
              "name": "y",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_MouseWheelEvent": {
          "doc": "Mouse wheel event structure (event.wheel.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MouseWheelEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_MOUSE_WHEEL",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with mouse focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The mouse instance id in relative mode or 0",
              "name": "which",
              "kind": "var",
              "type": "SDL_MouseID"
            },
            "x": {
              "doc": "The amount scrolled horizontally, positive to the right and negative to the left",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "The amount scrolled vertically, positive away from the user and negative toward the user",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "direction": {
              "doc": "Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back",
              "name": "direction",
              "kind": "var",
              "type": "SDL_MouseWheelDirection"
            },
            "mouse_x": {
              "doc": "X coordinate, relative to window",
              "name": "mouse_x",
              "kind": "var",
              "type": "float"
            },
            "mouse_y": {
              "doc": "Y coordinate, relative to window",
              "name": "mouse_y",
              "kind": "var",
              "type": "float"
            },
            "integer_x": {
              "doc": "The amount scrolled horizontally, accumulated to whole scroll \"ticks\" (added in 3.2.12)",
              "name": "integer_x",
              "kind": "var",
              "type": "Sint32"
            },
            "integer_y": {
              "doc": "The amount scrolled vertically, accumulated to whole scroll \"ticks\" (added in 3.2.12)",
              "name": "integer_y",
              "kind": "var",
              "type": "Sint32"
            }
          }
        },
        "SDL_JoyAxisEvent": {
          "doc": "Joystick axis motion event structure (event.jaxis.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_JoyAxisEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_JOYSTICK_AXIS_MOTION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "axis": {
              "doc": "The joystick axis index",
              "name": "axis",
              "kind": "var",
              "type": "Uint8"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            },
            "padding3": {
              "doc": "",
              "name": "padding3",
              "kind": "var",
              "type": "Uint8"
            },
            "value": {
              "doc": "The axis value (range: -32768 to 32767)",
              "name": "value",
              "kind": "var",
              "type": "Sint16"
            },
            "padding4": {
              "doc": "",
              "name": "padding4",
              "kind": "var",
              "type": "Uint16"
            }
          }
        },
        "SDL_JoyBallEvent": {
          "doc": "Joystick trackball motion event structure (event.jball.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_JoyBallEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_JOYSTICK_BALL_MOTION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "ball": {
              "doc": "The joystick trackball index",
              "name": "ball",
              "kind": "var",
              "type": "Uint8"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            },
            "padding3": {
              "doc": "",
              "name": "padding3",
              "kind": "var",
              "type": "Uint8"
            },
            "xrel": {
              "doc": "The relative motion in the X direction",
              "name": "xrel",
              "kind": "var",
              "type": "Sint16"
            },
            "yrel": {
              "doc": "The relative motion in the Y direction",
              "name": "yrel",
              "kind": "var",
              "type": "Sint16"
            }
          }
        },
        "SDL_JoyHatEvent": {
          "doc": "Joystick hat position change event structure (event.jhat.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_JoyHatEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_JOYSTICK_HAT_MOTION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "hat": {
              "doc": "The joystick hat index",
              "name": "hat",
              "kind": "var",
              "type": "Uint8"
            },
            "value": {
              "doc": "",
              "name": "value",
              "kind": "var",
              "type": "Uint8"
            },
            "padding1": {
              "doc": "Joystick hat position change event structure (event.jhat.*)\n\n\\since This struct is available since SDL 3.2.0.\n/\ntypedef struct SDL_JoyHatEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_HAT_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 hat;          /**< The joystick hat index */\n    Uint8 value;        /**< The hat position value.\n  \\sa SDL_HAT_LEFTUP SDL_HAT_UP SDL_HAT_RIGHTUP\n  \\sa SDL_HAT_LEFT SDL_HAT_CENTERED SDL_HAT_RIGHT\n  \\sa SDL_HAT_LEFTDOWN SDL_HAT_DOWN SDL_HAT_RIGHTDOWN\n\n  Note that zero means the POV is centered.",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_JoyButtonEvent": {
          "doc": "Joystick button event structure (event.jbutton.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_JoyButtonEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_JOYSTICK_BUTTON_DOWN or SDL_EVENT_JOYSTICK_BUTTON_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "button": {
              "doc": "The joystick button index",
              "name": "button",
              "kind": "var",
              "type": "Uint8"
            },
            "down": {
              "doc": "true if the button is pressed",
              "name": "down",
              "kind": "var",
              "type": "bool"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_JoyDeviceEvent": {
          "doc": "Joystick device event structure (event.jdevice.*)\n\nSDL will send JOYSTICK_ADDED events for devices that are already plugged in\nduring SDL_Init.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GamepadDeviceEvent",
          "name": "SDL_JoyDeviceEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_JOYSTICK_ADDED or SDL_EVENT_JOYSTICK_REMOVED or SDL_EVENT_JOYSTICK_UPDATE_COMPLETE",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            }
          }
        },
        "SDL_JoyBatteryEvent": {
          "doc": "Joystick battery level change event structure (event.jbattery.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_JoyBatteryEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_JOYSTICK_BATTERY_UPDATED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "state": {
              "doc": "The joystick battery state",
              "name": "state",
              "kind": "var",
              "type": "SDL_PowerState"
            },
            "percent": {
              "doc": "The joystick battery percent charge remaining",
              "name": "percent",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_GamepadAxisEvent": {
          "doc": "Gamepad axis motion event structure (event.gaxis.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_GamepadAxisEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_GAMEPAD_AXIS_MOTION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "axis": {
              "doc": "The gamepad axis (SDL_GamepadAxis)",
              "name": "axis",
              "kind": "var",
              "type": "Uint8"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            },
            "padding3": {
              "doc": "",
              "name": "padding3",
              "kind": "var",
              "type": "Uint8"
            },
            "value": {
              "doc": "The axis value (range: -32768 to 32767)",
              "name": "value",
              "kind": "var",
              "type": "Sint16"
            },
            "padding4": {
              "doc": "",
              "name": "padding4",
              "kind": "var",
              "type": "Uint16"
            }
          }
        },
        "SDL_GamepadButtonEvent": {
          "doc": "Gamepad button event structure (event.gbutton.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_GamepadButtonEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_GAMEPAD_BUTTON_DOWN or SDL_EVENT_GAMEPAD_BUTTON_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "button": {
              "doc": "The gamepad button (SDL_GamepadButton)",
              "name": "button",
              "kind": "var",
              "type": "Uint8"
            },
            "down": {
              "doc": "true if the button is pressed",
              "name": "down",
              "kind": "var",
              "type": "bool"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_GamepadDeviceEvent": {
          "doc": "Gamepad device event structure (event.gdevice.*)\n\nJoysticks that are supported gamepads receive both an SDL_JoyDeviceEvent\nand an SDL_GamepadDeviceEvent.\n\nSDL will send GAMEPAD_ADDED events for joysticks that are already plugged\nin during SDL_Init() and are recognized as gamepads. It will also send\nevents for joysticks that get gamepad mappings at runtime.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_JoyDeviceEvent",
          "name": "SDL_GamepadDeviceEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_GAMEPAD_ADDED, SDL_EVENT_GAMEPAD_REMOVED, or SDL_EVENT_GAMEPAD_REMAPPED, SDL_EVENT_GAMEPAD_UPDATE_COMPLETE or SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            }
          }
        },
        "SDL_GamepadTouchpadEvent": {
          "doc": "Gamepad touchpad event structure (event.gtouchpad.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_GamepadTouchpadEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN or SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION or SDL_EVENT_GAMEPAD_TOUCHPAD_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "touchpad": {
              "doc": "The index of the touchpad",
              "name": "touchpad",
              "kind": "var",
              "type": "Sint32"
            },
            "finger": {
              "doc": "The index of the finger on the touchpad",
              "name": "finger",
              "kind": "var",
              "type": "Sint32"
            },
            "x": {
              "doc": "Normalized in the range 0...1 with 0 being on the left",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Normalized in the range 0...1 with 0 being at the top",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "pressure": {
              "doc": "Normalized in the range 0...1",
              "name": "pressure",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_GamepadSensorEvent": {
          "doc": "Gamepad sensor event structure (event.gsensor.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_GamepadSensorEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_GAMEPAD_SENSOR_UPDATE",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The joystick instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_JoystickID"
            },
            "sensor": {
              "doc": "The type of the sensor, one of the values of SDL_SensorType",
              "name": "sensor",
              "kind": "var",
              "type": "Sint32"
            },
            "data": {
              "doc": "Up to 3 values from the sensor, as defined in SDL_sensor.h",
              "name": "data",
              "kind": "var",
              "type": "float"
            },
            "sensor_timestamp": {
              "doc": "The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock",
              "name": "sensor_timestamp",
              "kind": "var",
              "type": "Uint64"
            }
          }
        },
        "SDL_AudioDeviceEvent": {
          "doc": "Audio device event structure (event.adevice.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_AudioDeviceEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_AUDIO_DEVICE_ADDED, or SDL_EVENT_AUDIO_DEVICE_REMOVED, or SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "SDL_AudioDeviceID for the device being added or removed or changing",
              "name": "which",
              "kind": "var",
              "type": "SDL_AudioDeviceID"
            },
            "recording": {
              "doc": "false if a playback device, true if a recording device.",
              "name": "recording",
              "kind": "var",
              "type": "bool"
            },
            "padding1": {
              "doc": "",
              "name": "padding1",
              "kind": "var",
              "type": "Uint8"
            },
            "padding2": {
              "doc": "",
              "name": "padding2",
              "kind": "var",
              "type": "Uint8"
            },
            "padding3": {
              "doc": "",
              "name": "padding3",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_CameraDeviceEvent": {
          "doc": "Camera device event structure (event.cdevice.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_CameraDeviceEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_CAMERA_DEVICE_ADDED, SDL_EVENT_CAMERA_DEVICE_REMOVED, SDL_EVENT_CAMERA_DEVICE_APPROVED, SDL_EVENT_CAMERA_DEVICE_DENIED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "SDL_CameraID for the device being added or removed or changing",
              "name": "which",
              "kind": "var",
              "type": "SDL_CameraID"
            }
          }
        },
        "SDL_RenderEvent": {
          "doc": "Renderer event structure (event.render.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_RenderEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_RENDER_TARGETS_RESET, SDL_EVENT_RENDER_DEVICE_RESET, SDL_EVENT_RENDER_DEVICE_LOST",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window containing the renderer in question.",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            }
          }
        },
        "SDL_TouchFingerEvent": {
          "doc": "Touch finger event structure (event.tfinger.*)\n\nCoordinates in this event are normalized. `x` and `y` are normalized to a\nrange between 0.0f and 1.0f, relative to the window, so (0,0) is the top\nleft and (1,1) is the bottom right. Delta coordinates `dx` and `dy` are\nnormalized in the ranges of -1.0f (traversed all the way from the bottom or\nright to all the way up or left) to 1.0f (traversed all the way from the\ntop or left to all the way down or right).\n\nNote that while the coordinates are _normalized_, they are not _clamped_,\nwhich means in some circumstances you can get a value outside of this\nrange. For example, a renderer using logical presentation might give a\nnegative value when the touch is in the letterboxing. Some platforms might\nreport a touch outside of the window, which will also be outside of the\nrange.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_TouchFingerEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_FINGER_DOWN, SDL_EVENT_FINGER_UP, SDL_EVENT_FINGER_MOTION, or SDL_EVENT_FINGER_CANCELED",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "touchID": {
              "doc": "The touch device id",
              "name": "touchID",
              "kind": "var",
              "type": "SDL_TouchID"
            },
            "fingerID": {
              "doc": "",
              "name": "fingerID",
              "kind": "var",
              "type": "SDL_FingerID"
            },
            "x": {
              "doc": "Normalized in the range 0...1",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Normalized in the range 0...1",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "dx": {
              "doc": "Normalized in the range -1...1",
              "name": "dx",
              "kind": "var",
              "type": "float"
            },
            "dy": {
              "doc": "Normalized in the range -1...1",
              "name": "dy",
              "kind": "var",
              "type": "float"
            },
            "pressure": {
              "doc": "Normalized in the range 0...1",
              "name": "pressure",
              "kind": "var",
              "type": "float"
            },
            "windowID": {
              "doc": "The window underneath the finger, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            }
          }
        },
        "SDL_PenProximityEvent": {
          "doc": "Pressure-sensitive pen proximity event structure (event.pmotion.*)\n\nWhen a pen becomes visible to the system (it is close enough to a tablet,\netc), SDL will send an SDL_EVENT_PEN_PROXIMITY_IN event with the new pen's\nID. This ID is valid until the pen leaves proximity again (has been removed\nfrom the tablet's area, the tablet has been unplugged, etc). If the same\npen reenters proximity again, it will be given a new ID.\n\nNote that \"proximity\" means \"close enough for the tablet to know the tool\nis there.\" The pen touching and lifting off from the tablet while not\nleaving the area are handled by SDL_EVENT_PEN_DOWN and SDL_EVENT_PEN_UP.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PenProximityEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_PEN_PROXIMITY_IN or SDL_EVENT_PEN_PROXIMITY_OUT",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with pen focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The pen instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_PenID"
            }
          }
        },
        "SDL_PenMotionEvent": {
          "doc": "Pressure-sensitive pen motion event structure (event.pmotion.*)\n\nDepending on the hardware, you may get motion events when the pen is not\ntouching a tablet, for tracking a pen even when it isn't drawing. You\nshould listen for SDL_EVENT_PEN_DOWN and SDL_EVENT_PEN_UP events, or check\n`pen_state & SDL_PEN_INPUT_DOWN` to decide if a pen is \"drawing\" when\ndealing with pen motion.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PenMotionEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_PEN_MOTION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with pen focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The pen instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_PenID"
            },
            "pen_state": {
              "doc": "Complete pen input state at time of event",
              "name": "pen_state",
              "kind": "var",
              "type": "SDL_PenInputFlags"
            },
            "x": {
              "doc": "X coordinate, relative to window",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window",
              "name": "y",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_PenTouchEvent": {
          "doc": "Pressure-sensitive pen touched event structure (event.ptouch.*)\n\nThese events come when a pen touches a surface (a tablet, etc), or lifts\noff from one.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PenTouchEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_PEN_DOWN or SDL_EVENT_PEN_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with pen focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The pen instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_PenID"
            },
            "pen_state": {
              "doc": "Complete pen input state at time of event",
              "name": "pen_state",
              "kind": "var",
              "type": "SDL_PenInputFlags"
            },
            "x": {
              "doc": "X coordinate, relative to window",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "eraser": {
              "doc": "true if eraser end is used (not all pens support this).",
              "name": "eraser",
              "kind": "var",
              "type": "bool"
            },
            "down": {
              "doc": "true if the pen is touching or false if the pen is lifted off",
              "name": "down",
              "kind": "var",
              "type": "bool"
            }
          }
        },
        "SDL_PenButtonEvent": {
          "doc": "Pressure-sensitive pen button event structure (event.pbutton.*)\n\nThis is for buttons on the pen itself that the user might click. The pen\nitself pressing down to draw triggers a SDL_EVENT_PEN_DOWN event instead.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PenButtonEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_PEN_BUTTON_DOWN or SDL_EVENT_PEN_BUTTON_UP",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with mouse focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The pen instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_PenID"
            },
            "pen_state": {
              "doc": "Complete pen input state at time of event",
              "name": "pen_state",
              "kind": "var",
              "type": "SDL_PenInputFlags"
            },
            "x": {
              "doc": "X coordinate, relative to window",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "button": {
              "doc": "The pen button index (first button is 1).",
              "name": "button",
              "kind": "var",
              "type": "Uint8"
            },
            "down": {
              "doc": "true if the button is pressed",
              "name": "down",
              "kind": "var",
              "type": "bool"
            }
          }
        },
        "SDL_PenAxisEvent": {
          "doc": "Pressure-sensitive pen pressure / angle event structure (event.paxis.*)\n\nYou might get some of these events even if the pen isn't touching the\ntablet.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PenAxisEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_PEN_AXIS",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window with pen focus, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "which": {
              "doc": "The pen instance id",
              "name": "which",
              "kind": "var",
              "type": "SDL_PenID"
            },
            "pen_state": {
              "doc": "Complete pen input state at time of event",
              "name": "pen_state",
              "kind": "var",
              "type": "SDL_PenInputFlags"
            },
            "x": {
              "doc": "X coordinate, relative to window",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "axis": {
              "doc": "Axis that has changed",
              "name": "axis",
              "kind": "var",
              "type": "SDL_PenAxis"
            },
            "value": {
              "doc": "New value of axis",
              "name": "value",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_DropEvent": {
          "doc": "An event used to drop text or request a file open by the system\n(event.drop.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_DropEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_DROP_BEGIN or SDL_EVENT_DROP_FILE or SDL_EVENT_DROP_TEXT or SDL_EVENT_DROP_COMPLETE or SDL_EVENT_DROP_POSITION",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The window that was dropped on, if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "x": {
              "doc": "X coordinate, relative to window (not on begin)",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "Y coordinate, relative to window (not on begin)",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "source": {
              "doc": "The source app that sent this drop event, or NULL if that isn't available",
              "name": "source",
              "kind": "var",
              "type": "const char *"
            },
            "data": {
              "doc": "The text for SDL_EVENT_DROP_TEXT and the file name for SDL_EVENT_DROP_FILE, NULL for other events",
              "name": "data",
              "kind": "var",
              "type": "const char *"
            }
          }
        },
        "SDL_ClipboardEvent": {
          "doc": "An event triggered when the clipboard contents have changed\n(event.clipboard.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_ClipboardEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_CLIPBOARD_UPDATE",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "owner": {
              "doc": "are we owning the clipboard (internal update)",
              "name": "owner",
              "kind": "var",
              "type": "bool"
            },
            "num_mime_types": {
              "doc": "number of mime types",
              "name": "num_mime_types",
              "kind": "var",
              "type": "Sint32"
            },
            "mime_types": {
              "doc": "current mime types",
              "name": "mime_types",
              "kind": "var",
              "type": "const char **"
            }
          }
        },
        "SDL_SensorEvent": {
          "doc": "Sensor event structure (event.sensor.*)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_SensorEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_SENSOR_UPDATE",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "which": {
              "doc": "The instance ID of the sensor",
              "name": "which",
              "kind": "var",
              "type": "SDL_SensorID"
            },
            "data": {
              "doc": "Up to 6 values from the sensor - additional values can be queried using SDL_GetSensorData()",
              "name": "data",
              "kind": "var",
              "type": "float"
            },
            "sensor_timestamp": {
              "doc": "The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock",
              "name": "sensor_timestamp",
              "kind": "var",
              "type": "Uint64"
            }
          }
        },
        "SDL_QuitEvent": {
          "doc": "The \"quit requested\" event\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_QuitEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_QUIT",
              "name": "type",
              "kind": "var",
              "type": "SDL_EventType"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            }
          }
        },
        "SDL_UserEvent": {
          "doc": "A user-defined event type (event.user.*)\n\nThis event is unique; it is never created by SDL, but only by the\napplication. The event can be pushed onto the event queue using\nSDL_PushEvent(). The contents of the structure members are completely up to\nthe programmer; the only requirement is that '''type''' is a value obtained\nfrom SDL_RegisterEvents().\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_UserEvent",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "SDL_EVENT_USER through SDL_EVENT_LAST-1, Uint32 because these are not in the SDL_EventType enumeration",
              "name": "type",
              "kind": "var",
              "type": "Uint32"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "Uint32"
            },
            "timestamp": {
              "doc": "In nanoseconds, populated using SDL_GetTicksNS()",
              "name": "timestamp",
              "kind": "var",
              "type": "Uint64"
            },
            "windowID": {
              "doc": "The associated window if any",
              "name": "windowID",
              "kind": "var",
              "type": "SDL_WindowID"
            },
            "code": {
              "doc": "User defined event code",
              "name": "code",
              "kind": "var",
              "type": "Sint32"
            },
            "data1": {
              "doc": "User defined data pointer",
              "name": "data1",
              "kind": "var",
              "type": "void *"
            },
            "data2": {
              "doc": "User defined data pointer",
              "name": "data2",
              "kind": "var",
              "type": "void *"
            }
          }
        },
        "SDL_Event": {
          "doc": "The structure for all events in SDL.\n\nThe SDL_Event structure is the core of all event handling in SDL. SDL_Event\nis a union of all event structures used in SDL.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Event",
          "kind": "union"
        },
        "SDL_PumpEvents": {
          "doc": "Pump the event loop, gathering events from the input devices.\n\nThis function updates the event queue and internal input device state.\n\nSDL_PumpEvents() gathers all the pending input information from devices and\nplaces it in the event queue. Without calls to SDL_PumpEvents() no events\nwould ever be placed on the queue. Often the need for calls to\nSDL_PumpEvents() is hidden from the user since SDL_PollEvent() and\nSDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not\npolling or waiting for events (e.g. you are filtering them), then you must\ncall SDL_PumpEvents() to force an event queue update.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PollEvent\n\\sa SDL_WaitEvent",
          "name": "SDL_PumpEvents",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_EventAction": {
          "doc": "The type of action to request from SDL_PeepEvents().\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_EventAction",
          "kind": "enum",
          "entries": {
            "SDL_ADDEVENT": {
              "doc": "Add events to the back of the queue.",
              "name": "SDL_ADDEVENT",
              "kind": "var",
              "type": ""
            },
            "SDL_PEEKEVENT": {
              "doc": "Check but don't remove events from the queue front.",
              "name": "SDL_PEEKEVENT",
              "kind": "var",
              "type": ""
            },
            "SDL_GETEVENT": {
              "doc": "Retrieve/remove events from the front of the queue.",
              "name": "SDL_GETEVENT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_PeepEvents": {
          "doc": "Check the event queue for messages and optionally return them.\n\n`action` may be any of the following:\n\n- `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the\n  event queue.\n- `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,\n  within the specified minimum and maximum type, will be returned to the\n  caller and will _not_ be removed from the queue. If you pass NULL for\n  `events`, then `numevents` is ignored and the total number of matching\n  events will be returned.\n- `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,\n  within the specified minimum and maximum type, will be returned to the\n  caller and will be removed from the queue.\n\nYou may have to call SDL_PumpEvents() before calling this function.\nOtherwise, the events may not be ready to be filtered when you call\nSDL_PeepEvents().\n\n\\param events destination buffer for the retrieved events, may be NULL to\n              leave the events in the queue and return the number of events\n              that would have been stored.\n\\param numevents if action is SDL_ADDEVENT, the number of events to add\n                 back to the event queue; if action is SDL_PEEKEVENT or\n                 SDL_GETEVENT, the maximum number of events to retrieve.\n\\param action action to take; see [Remarks](#remarks) for details.\n\\param minType minimum value of the event type to be considered;\n               SDL_EVENT_FIRST is a safe choice.\n\\param maxType maximum value of the event type to be considered;\n               SDL_EVENT_LAST is a safe choice.\n\\returns the number of events actually stored or -1 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PollEvent\n\\sa SDL_PumpEvents\n\\sa SDL_PushEvent",
          "name": "SDL_PeepEvents",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "events",
              "type": "SDL_Event *"
            },
            {
              "name": "numevents",
              "type": "int"
            },
            {
              "name": "action",
              "type": "SDL_EventAction"
            },
            {
              "name": "minType",
              "type": "Uint32"
            },
            {
              "name": "maxType",
              "type": "Uint32"
            }
          ]
        },
        "SDL_HasEvent": {
          "doc": "Check for the existence of a certain event type in the event queue.\n\nIf you need to check for a range of event types, use SDL_HasEvents()\ninstead.\n\n\\param type the type of event to be queried; see SDL_EventType for details.\n\\returns true if events matching `type` are present, or false if events\n         matching `type` are not present.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasEvents",
          "name": "SDL_HasEvent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "type",
              "type": "Uint32"
            }
          ]
        },
        "SDL_HasEvents": {
          "doc": "Check for the existence of certain event types in the event queue.\n\nIf you need to check for a single event type, use SDL_HasEvent() instead.\n\n\\param minType the low end of event type to be queried, inclusive; see\n               SDL_EventType for details.\n\\param maxType the high end of event type to be queried, inclusive; see\n               SDL_EventType for details.\n\\returns true if events with type >= `minType` and <= `maxType` are\n         present, or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasEvents",
          "name": "SDL_HasEvents",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "minType",
              "type": "Uint32"
            },
            {
              "name": "maxType",
              "type": "Uint32"
            }
          ]
        },
        "SDL_FlushEvent": {
          "doc": "Clear events of a specific type from the event queue.\n\nThis will unconditionally remove any events from the queue that match\n`type`. If you need to remove a range of event types, use SDL_FlushEvents()\ninstead.\n\nIt's also normal to just ignore events you don't care about in your event\nloop without calling this function.\n\nThis function only affects currently queued events. If you want to make\nsure that all pending OS events are flushed, you can call SDL_PumpEvents()\non the main thread immediately before the flush call.\n\nIf you have user events with custom data that needs to be freed, you should\nuse SDL_PeepEvents() to remove and clean up those events before calling\nthis function.\n\n\\param type the type of event to be cleared; see SDL_EventType for details.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FlushEvents",
          "name": "SDL_FlushEvent",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "type",
              "type": "Uint32"
            }
          ]
        },
        "SDL_FlushEvents": {
          "doc": "Clear events of a range of types from the event queue.\n\nThis will unconditionally remove any events from the queue that are in the\nrange of `minType` to `maxType`, inclusive. If you need to remove a single\nevent type, use SDL_FlushEvent() instead.\n\nIt's also normal to just ignore events you don't care about in your event\nloop without calling this function.\n\nThis function only affects currently queued events. If you want to make\nsure that all pending OS events are flushed, you can call SDL_PumpEvents()\non the main thread immediately before the flush call.\n\n\\param minType the low end of event type to be cleared, inclusive; see\n               SDL_EventType for details.\n\\param maxType the high end of event type to be cleared, inclusive; see\n               SDL_EventType for details.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FlushEvent",
          "name": "SDL_FlushEvents",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "minType",
              "type": "Uint32"
            },
            {
              "name": "maxType",
              "type": "Uint32"
            }
          ]
        },
        "SDL_PollEvent": {
          "doc": "Poll for currently pending events.\n\nIf `event` is not NULL, the next event is removed from the queue and stored\nin the SDL_Event structure pointed to by `event`. The 1 returned refers to\nthis event, immediately stored in the SDL Event structure -- not an event\nto follow.\n\nIf `event` is NULL, it simply returns 1 if there is an event in the queue,\nbut will not remove it from the queue.\n\nAs this function may implicitly call SDL_PumpEvents(), you can only call\nthis function in the thread that set the video mode.\n\nSDL_PollEvent() is the favored way of receiving system events since it can\nbe done from the main loop and does not suspend the main loop while waiting\non an event to be posted.\n\nThe common practice is to fully process the event queue once every frame,\nusually as a first step before updating the game's state:\n\n```c\nwhile (game_is_still_running) {\n    SDL_Event event;\n    while (SDL_PollEvent(&event)) {  // poll until all events are handled!\n        // decide what to do with this event.\n    }\n\n    // update game state, draw the current frame\n}\n```\n\n\\param event the SDL_Event structure to be filled with the next event from\n             the queue, or NULL.\n\\returns true if this got an event or false if there are none available.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PushEvent\n\\sa SDL_WaitEvent\n\\sa SDL_WaitEventTimeout",
          "name": "SDL_PollEvent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_WaitEvent": {
          "doc": "Wait indefinitely for the next available event.\n\nIf `event` is not NULL, the next event is removed from the queue and stored\nin the SDL_Event structure pointed to by `event`.\n\nAs this function may implicitly call SDL_PumpEvents(), you can only call\nthis function in the thread that initialized the video subsystem.\n\n\\param event the SDL_Event structure to be filled in with the next event\n             from the queue, or NULL.\n\\returns true on success or false if there was an error while waiting for\n         events; call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PollEvent\n\\sa SDL_PushEvent\n\\sa SDL_WaitEventTimeout",
          "name": "SDL_WaitEvent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_WaitEventTimeout": {
          "doc": "Wait until the specified timeout (in milliseconds) for the next available\nevent.\n\nIf `event` is not NULL, the next event is removed from the queue and stored\nin the SDL_Event structure pointed to by `event`.\n\nAs this function may implicitly call SDL_PumpEvents(), you can only call\nthis function in the thread that initialized the video subsystem.\n\nThe timeout is not guaranteed, the actual wait time could be longer due to\nsystem scheduling.\n\n\\param event the SDL_Event structure to be filled in with the next event\n             from the queue, or NULL.\n\\param timeoutMS the maximum number of milliseconds to wait for the next\n                 available event.\n\\returns true if this got an event or false if the timeout elapsed without\n         any events available.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PollEvent\n\\sa SDL_PushEvent\n\\sa SDL_WaitEvent",
          "name": "SDL_WaitEventTimeout",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "event",
              "type": "SDL_Event *"
            },
            {
              "name": "timeoutMS",
              "type": "Sint32"
            }
          ]
        },
        "SDL_PushEvent": {
          "doc": "Add an event to the event queue.\n\nThe event queue can actually be used as a two way communication channel.\nNot only can events be read from the queue, but the user can also push\ntheir own events onto it. `event` is a pointer to the event structure you\nwish to push onto the queue. The event is copied into the queue, and the\ncaller may dispose of the memory pointed to after SDL_PushEvent() returns.\n\nNote: Pushing device input events onto the queue doesn't modify the state\nof the device within SDL.\n\nNote: Events pushed onto the queue with SDL_PushEvent() get passed through\nthe event filter but events added with SDL_PeepEvents() do not.\n\nFor pushing application-specific events, please use SDL_RegisterEvents() to\nget an event type that does not conflict with other code that also wants\nits own custom event types.\n\n\\param event the SDL_Event to be added to the queue.\n\\returns true on success, false if the event was filtered or on failure;\n         call SDL_GetError() for more information. A common reason for\n         error is the event queue being full.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PeepEvents\n\\sa SDL_PollEvent\n\\sa SDL_RegisterEvents",
          "name": "SDL_PushEvent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_EventFilter": {
          "doc": "A function pointer used for callbacks that watch the event queue.\n\n\\param userdata what was passed as `userdata` to SDL_SetEventFilter() or\n                SDL_AddEventWatch, etc.\n\\param event the event that triggered the callback.\n\\returns true to permit event to be added to the queue, and false to\n         disallow it. When used with SDL_AddEventWatch, the return value is\n         ignored.\n\n\\threadsafety SDL may call this callback at any time from any thread; the\n              application is responsible for locking resources the callback\n              touches that need to be protected.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetEventFilter\n\\sa SDL_AddEventWatch",
          "name": "SDL_EventFilter",
          "kind": "callback",
          "type": "bool",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_SetEventFilter": {
          "doc": "Set up a filter to process all events before they are added to the internal\nevent queue.\n\nIf you just want to see events without modifying them or preventing them\nfrom being queued, you should use SDL_AddEventWatch() instead.\n\nIf the filter function returns true when called, then the event will be\nadded to the internal queue. If it returns false, then the event will be\ndropped from the queue, but the internal state will still be updated. This\nallows selective filtering of dynamically arriving events.\n\n**WARNING**: Be very careful of what you do in the event filter function,\nas it may run in a different thread!\n\nOn platforms that support it, if the quit event is generated by an\ninterrupt signal (e.g. pressing Ctrl-C), it will be delivered to the\napplication at the next event poll.\n\nNote: Disabled events never make it to the event filter function; see\nSDL_SetEventEnabled().\n\nNote: Events pushed onto the queue with SDL_PushEvent() get passed through\nthe event filter, but events pushed onto the queue with SDL_PeepEvents() do\nnot.\n\n\\param filter an SDL_EventFilter function to call when an event happens.\n\\param userdata a pointer that is passed to `filter`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddEventWatch\n\\sa SDL_SetEventEnabled\n\\sa SDL_GetEventFilter\n\\sa SDL_PeepEvents\n\\sa SDL_PushEvent",
          "name": "SDL_SetEventFilter",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "filter",
              "type": "SDL_EventFilter"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_GetEventFilter": {
          "doc": "Query the current event filter.\n\nThis function can be used to \"chain\" filters, by saving the existing filter\nbefore replacing it with a function that will call that saved filter.\n\n\\param filter the current callback function will be stored here.\n\\param userdata the pointer that is passed to the current event filter will\n                be stored here.\n\\returns true on success or false if there is no event filter set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetEventFilter",
          "name": "SDL_GetEventFilter",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "filter",
              "type": "SDL_EventFilter *"
            },
            {
              "name": "userdata",
              "type": "void **"
            }
          ]
        },
        "SDL_AddEventWatch": {
          "doc": "Add a callback to be triggered when an event is added to the event queue.\n\n`filter` will be called when an event happens, and its return value is\nignored.\n\n**WARNING**: Be very careful of what you do in the event filter function,\nas it may run in a different thread!\n\nIf the quit event is generated by a signal (e.g. SIGINT), it will bypass\nthe internal queue and be delivered to the watch callback immediately, and\narrive at the next event poll.\n\nNote: the callback is called for events posted by the user through\nSDL_PushEvent(), but not for disabled events, nor for events by a filter\ncallback set with SDL_SetEventFilter(), nor for events posted by the user\nthrough SDL_PeepEvents().\n\n\\param filter an SDL_EventFilter function to call when an event happens.\n\\param userdata a pointer that is passed to `filter`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RemoveEventWatch\n\\sa SDL_SetEventFilter",
          "name": "SDL_AddEventWatch",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "filter",
              "type": "SDL_EventFilter"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_RemoveEventWatch": {
          "doc": "Remove an event watch callback added with SDL_AddEventWatch().\n\nThis function takes the same input as SDL_AddEventWatch() to identify and\ndelete the corresponding callback.\n\n\\param filter the function originally passed to SDL_AddEventWatch().\n\\param userdata the pointer originally passed to SDL_AddEventWatch().\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddEventWatch",
          "name": "SDL_RemoveEventWatch",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "filter",
              "type": "SDL_EventFilter"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_FilterEvents": {
          "doc": "Run a specific filter function on the current event queue, removing any\nevents for which the filter returns false.\n\nSee SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),\nthis function does not change the filter permanently, it only uses the\nsupplied filter until this function returns.\n\n\\param filter the SDL_EventFilter function to call when an event happens.\n\\param userdata a pointer that is passed to `filter`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEventFilter\n\\sa SDL_SetEventFilter",
          "name": "SDL_FilterEvents",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "filter",
              "type": "SDL_EventFilter"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetEventEnabled": {
          "doc": "Set the state of processing events by type.\n\n\\param type the type of event; see SDL_EventType for details.\n\\param enabled whether to process the event or not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_EventEnabled",
          "name": "SDL_SetEventEnabled",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "type",
              "type": "Uint32"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_EventEnabled": {
          "doc": "Query the state of processing events by type.\n\n\\param type the type of event; see SDL_EventType for details.\n\\returns true if the event is being processed, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetEventEnabled",
          "name": "SDL_EventEnabled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "type",
              "type": "Uint32"
            }
          ]
        },
        "SDL_RegisterEvents": {
          "doc": "Allocate a set of user-defined events, and return the beginning event\nnumber for that set of events.\n\n\\param numevents the number of events to be allocated.\n\\returns the beginning event number, or 0 if numevents is invalid or if\n         there are not enough user-defined events left.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PushEvent",
          "name": "SDL_RegisterEvents",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "numevents",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowFromEvent": {
          "doc": "Get window associated with an event.\n\n\\param event an event containing a `windowID`.\n\\returns the associated window on success or NULL if there is none.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PollEvent\n\\sa SDL_WaitEvent\n\\sa SDL_WaitEventTimeout",
          "name": "SDL_GetWindowFromEvent",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "event",
              "type": "const SDL_Event *"
            }
          ]
        }
      }
    },
    "SDL_keyboard.h": {
      "name": "SDL_keyboard.h",
      "doc": "# CategoryKeyboard\n\nSDL keyboard management.\n\nPlease refer to the Best Keyboard Practices document for details on how\nbest to accept keyboard input in various types of programs:\n\nhttps://wiki.libsdl.org/SDL3/BestKeyboardPractices",
      "entries": {
        "SDL_KeyboardID": {
          "doc": "This is a unique ID for a keyboard for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the keyboard is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_KeyboardID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_HasKeyboard": {
          "doc": "Return whether a keyboard is currently connected.\n\n\\returns true if a keyboard is connected, false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyboards",
          "name": "SDL_HasKeyboard",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GetKeyboards": {
          "doc": "Get a list of currently connected keyboards.\n\nNote that this will include any device or virtual driver that includes\nkeyboard functionality, including some mice, KVM switches, motherboard\npower buttons, etc. You should wait for input from a device before you\nconsider it actively in use.\n\n\\param count a pointer filled in with the number of keyboards returned, may\n             be NULL.\n\\returns a 0 terminated array of keyboards instance IDs or NULL on failure;\n         call SDL_GetError() for more information. This should be freed\n         with SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyboardNameForID\n\\sa SDL_HasKeyboard",
          "name": "SDL_GetKeyboards",
          "kind": "function",
          "type": "SDL_KeyboardID *",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetKeyboardNameForID": {
          "doc": "Get the name of a keyboard.\n\nThis function returns \"\" if the keyboard doesn't have a name.\n\n\\param instance_id the keyboard instance ID.\n\\returns the name of the selected keyboard or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyboards",
          "name": "SDL_GetKeyboardNameForID",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "instance_id",
              "type": "SDL_KeyboardID"
            }
          ]
        },
        "SDL_GetKeyboardFocus": {
          "doc": "Query the window which currently has keyboard focus.\n\n\\returns the window with keyboard focus.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetKeyboardFocus",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": []
        },
        "SDL_GetKeyboardState": {
          "doc": "Get a snapshot of the current state of the keyboard.\n\nThe pointer returned is a pointer to an internal SDL array. It will be\nvalid for the whole lifetime of the application and should not be freed by\nthe caller.\n\nA array element with a value of true means that the key is pressed and a\nvalue of false means that it is not. Indexes into this array are obtained\nby using SDL_Scancode values.\n\nUse SDL_PumpEvents() to update the state array.\n\nThis function gives you the current state after all events have been\nprocessed, so if a key or button has been pressed and released before you\nprocess events, then the pressed state will never show up in the\nSDL_GetKeyboardState() calls.\n\nNote: This function doesn't take into account whether shift has been\npressed or not.\n\n\\param numkeys if non-NULL, receives the length of the returned array.\n\\returns a pointer to an array of key states.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_PumpEvents\n\\sa SDL_ResetKeyboard",
          "name": "SDL_GetKeyboardState",
          "kind": "function",
          "type": "const bool *",
          "parameters": [
            {
              "name": "numkeys",
              "type": "int *"
            }
          ]
        },
        "SDL_ResetKeyboard": {
          "doc": "Clear the state of the keyboard.\n\nThis function will generate key up events for all pressed keys.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyboardState",
          "name": "SDL_ResetKeyboard",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_GetModState": {
          "doc": "Get the current key modifier state for the keyboard.\n\n\\returns an OR'd combination of the modifier keys for the keyboard. See\n         SDL_Keymod for details.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyboardState\n\\sa SDL_SetModState",
          "name": "SDL_GetModState",
          "kind": "function",
          "type": "SDL_Keymod",
          "parameters": []
        },
        "SDL_SetModState": {
          "doc": "Set the current key modifier state for the keyboard.\n\nThe inverse of SDL_GetModState(), SDL_SetModState() allows you to impose\nmodifier key states on your application. Simply pass your desired modifier\nstates into `modstate`. This value may be a bitwise, OR'd combination of\nSDL_Keymod values.\n\nThis does not change the keyboard state, only the key modifier flags that\nSDL reports.\n\n\\param modstate the desired SDL_Keymod for the keyboard.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetModState",
          "name": "SDL_SetModState",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "modstate",
              "type": "SDL_Keymod"
            }
          ]
        },
        "SDL_GetKeyFromScancode": {
          "doc": "Get the key code corresponding to the given scancode according to the\ncurrent keyboard layout.\n\nIf you want to get the keycode as it would be delivered in key events,\nincluding options specified in SDL_HINT_KEYCODE_OPTIONS, then you should\npass `key_event` as true. Otherwise this function simply translates the\nscancode based on the given modifier state.\n\n\\param scancode the desired SDL_Scancode to query.\n\\param modstate the modifier state to use when translating the scancode to\n                a keycode.\n\\param key_event true if the keycode will be used in key events.\n\\returns the SDL_Keycode that corresponds to the given SDL_Scancode.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyName\n\\sa SDL_GetScancodeFromKey",
          "name": "SDL_GetKeyFromScancode",
          "kind": "function",
          "type": "SDL_Keycode",
          "parameters": [
            {
              "name": "scancode",
              "type": "SDL_Scancode"
            },
            {
              "name": "modstate",
              "type": "SDL_Keymod"
            },
            {
              "name": "key_event",
              "type": "bool"
            }
          ]
        },
        "SDL_GetScancodeFromKey": {
          "doc": "Get the scancode corresponding to the given key code according to the\ncurrent keyboard layout.\n\nNote that there may be multiple scancode+modifier states that can generate\nthis keycode, this will just return the first one found.\n\n\\param key the desired SDL_Keycode to query.\n\\param modstate a pointer to the modifier state that would be used when the\n                scancode generates this key, may be NULL.\n\\returns the SDL_Scancode that corresponds to the given SDL_Keycode.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyFromScancode\n\\sa SDL_GetScancodeName",
          "name": "SDL_GetScancodeFromKey",
          "kind": "function",
          "type": "SDL_Scancode",
          "parameters": [
            {
              "name": "key",
              "type": "SDL_Keycode"
            },
            {
              "name": "modstate",
              "type": "SDL_Keymod *"
            }
          ]
        },
        "SDL_SetScancodeName": {
          "doc": "Set a human-readable name for a scancode.\n\n\\param scancode the desired SDL_Scancode.\n\\param name the name to use for the scancode, encoded as UTF-8. The string\n            is not copied, so the pointer given to this function must stay\n            valid while SDL is being used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetScancodeName",
          "name": "SDL_SetScancodeName",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "scancode",
              "type": "SDL_Scancode"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetScancodeName": {
          "doc": "Get a human-readable name for a scancode.\n\n**Warning**: The returned name is by design not stable across platforms,\ne.g. the name for `SDL_SCANCODE_LGUI` is \"Left GUI\" under Linux but \"Left\nWindows\" under Microsoft Windows, and some scancodes like\n`SDL_SCANCODE_NONUSBACKSLASH` don't have any name at all. There are even\nscancodes that share names, e.g. `SDL_SCANCODE_RETURN` and\n`SDL_SCANCODE_RETURN2` (both called \"Return\"). This function is therefore\nunsuitable for creating a stable cross-platform two-way mapping between\nstrings and scancodes.\n\n\\param scancode the desired SDL_Scancode to query.\n\\returns a pointer to the name for the scancode. If the scancode doesn't\n         have a name this function returns an empty string (\"\").\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetScancodeFromKey\n\\sa SDL_GetScancodeFromName\n\\sa SDL_SetScancodeName",
          "name": "SDL_GetScancodeName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "scancode",
              "type": "SDL_Scancode"
            }
          ]
        },
        "SDL_GetScancodeFromName": {
          "doc": "Get a scancode from a human-readable name.\n\n\\param name the human-readable scancode name.\n\\returns the SDL_Scancode, or `SDL_SCANCODE_UNKNOWN` if the name wasn't\n         recognized; call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyFromName\n\\sa SDL_GetScancodeFromKey\n\\sa SDL_GetScancodeName",
          "name": "SDL_GetScancodeFromName",
          "kind": "function",
          "type": "SDL_Scancode",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetKeyName": {
          "doc": "Get a human-readable name for a key.\n\nIf the key doesn't have a name, this function returns an empty string (\"\").\n\nLetters will be presented in their uppercase form, if applicable.\n\n\\param key the desired SDL_Keycode to query.\n\\returns a UTF-8 encoded string of the key name.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyFromName\n\\sa SDL_GetKeyFromScancode\n\\sa SDL_GetScancodeFromKey",
          "name": "SDL_GetKeyName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "key",
              "type": "SDL_Keycode"
            }
          ]
        },
        "SDL_GetKeyFromName": {
          "doc": "Get a key code from a human-readable name.\n\n\\param name the human-readable key name.\n\\returns key code, or `SDLK_UNKNOWN` if the name wasn't recognized; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetKeyFromScancode\n\\sa SDL_GetKeyName\n\\sa SDL_GetScancodeFromName",
          "name": "SDL_GetKeyFromName",
          "kind": "function",
          "type": "SDL_Keycode",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_StartTextInput": {
          "doc": "Start accepting Unicode text input events in a window.\n\nThis function will enable text input (SDL_EVENT_TEXT_INPUT and\nSDL_EVENT_TEXT_EDITING events) in the specified window. Please use this\nfunction paired with SDL_StopTextInput().\n\nText input events are not received by default.\n\nOn some platforms using this function shows the screen keyboard and/or\nactivates an IME, which can prevent some key press events from being passed\nthrough.\n\n\\param window the window to enable text input.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextInputArea\n\\sa SDL_StartTextInputWithProperties\n\\sa SDL_StopTextInput\n\\sa SDL_TextInputActive",
          "name": "SDL_StartTextInput",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_TextInputType": {
          "doc": "Text input type.\n\nThese are the valid values for SDL_PROP_TEXTINPUT_TYPE_NUMBER. Not every\nvalue is valid on every platform, but where a value isn't supported, a\nreasonable fallback will be used.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInputWithProperties",
          "name": "SDL_TextInputType",
          "kind": "enum",
          "entries": {
            "SDL_TEXTINPUT_TYPE_TEXT": {
              "doc": "The input is text.",
              "name": "SDL_TEXTINPUT_TYPE_TEXT",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_TEXT_NAME": {
              "doc": "The input is a person's name.",
              "name": "SDL_TEXTINPUT_TYPE_TEXT_NAME",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_TEXT_EMAIL": {
              "doc": "The input is an e-mail address.",
              "name": "SDL_TEXTINPUT_TYPE_TEXT_EMAIL",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_TEXT_USERNAME": {
              "doc": "The input is a username.",
              "name": "SDL_TEXTINPUT_TYPE_TEXT_USERNAME",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN": {
              "doc": "The input is a secure password that is hidden.",
              "name": "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE": {
              "doc": "The input is a secure password that is visible.",
              "name": "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_NUMBER": {
              "doc": "The input is a number.",
              "name": "SDL_TEXTINPUT_TYPE_NUMBER",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN": {
              "doc": "The input is a secure PIN that is hidden.",
              "name": "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN",
              "kind": "var",
              "type": ""
            },
            "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE": {
              "doc": "The input is a secure PIN that is visible.",
              "name": "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_Capitalization": {
          "doc": "Auto capitalization type.\n\nThese are the valid values for SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER.\nNot every value is valid on every platform, but where a value isn't\nsupported, a reasonable fallback will be used.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInputWithProperties",
          "name": "SDL_Capitalization",
          "kind": "enum",
          "entries": {
            "SDL_CAPITALIZE_NONE": {
              "doc": "No auto-capitalization will be done.",
              "name": "SDL_CAPITALIZE_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_CAPITALIZE_SENTENCES": {
              "doc": "The first letter of sentences will be capitalized.",
              "name": "SDL_CAPITALIZE_SENTENCES",
              "kind": "var",
              "type": ""
            },
            "SDL_CAPITALIZE_WORDS": {
              "doc": "The first letter of words will be capitalized.",
              "name": "SDL_CAPITALIZE_WORDS",
              "kind": "var",
              "type": ""
            },
            "SDL_CAPITALIZE_LETTERS": {
              "doc": "All letters will be capitalized.",
              "name": "SDL_CAPITALIZE_LETTERS",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_StartTextInputWithProperties": {
          "doc": "Start accepting Unicode text input events in a window, with properties\ndescribing the input.\n\nThis function will enable text input (SDL_EVENT_TEXT_INPUT and\nSDL_EVENT_TEXT_EDITING events) in the specified window. Please use this\nfunction paired with SDL_StopTextInput().\n\nText input events are not received by default.\n\nOn some platforms using this function shows the screen keyboard and/or\nactivates an IME, which can prevent some key press events from being passed\nthrough.\n\nThese are the supported properties:\n\n- `SDL_PROP_TEXTINPUT_TYPE_NUMBER` - an SDL_TextInputType value that\n  describes text being input, defaults to SDL_TEXTINPUT_TYPE_TEXT.\n- `SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER` - an SDL_Capitalization value\n  that describes how text should be capitalized, defaults to\n  SDL_CAPITALIZE_SENTENCES for normal text entry, SDL_CAPITALIZE_WORDS for\n  SDL_TEXTINPUT_TYPE_TEXT_NAME, and SDL_CAPITALIZE_NONE for e-mail\n  addresses, usernames, and passwords.\n- `SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN` - true to enable auto completion\n  and auto correction, defaults to true.\n- `SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN` - true if multiple lines of text\n  are allowed. This defaults to true if SDL_HINT_RETURN_KEY_HIDES_IME is\n  \"0\" or is not set, and defaults to false if SDL_HINT_RETURN_KEY_HIDES_IME\n  is \"1\".\n\nOn Android you can directly specify the input type:\n\n- `SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER` - the text input type to\n  use, overriding other properties. This is documented at\n  https://developer.android.com/reference/android/text/InputType\n\n\\param window the window to enable text input.\n\\param props the properties to use.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextInputArea\n\\sa SDL_StartTextInput\n\\sa SDL_StopTextInput\n\\sa SDL_TextInputActive",
          "name": "SDL_StartTextInputWithProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_TEXTINPUT_TYPE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTINPUT_TYPE_NUMBER",
          "kind": "def",
          "value": "\"SDL.textinput.type\""
        },
        "SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER",
          "kind": "def",
          "value": "\"SDL.textinput.capitalization\""
        },
        "SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.textinput.autocorrect\""
        },
        "SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.textinput.multiline\""
        },
        "SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER",
          "kind": "def",
          "value": "\"SDL.textinput.android.inputtype\""
        },
        "SDL_TextInputActive": {
          "doc": "Check whether or not Unicode text input events are enabled for a window.\n\n\\param window the window to check.\n\\returns true if text input events are enabled else false.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInput",
          "name": "SDL_TextInputActive",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_StopTextInput": {
          "doc": "Stop receiving any text input events in a window.\n\nIf SDL_StartTextInput() showed the screen keyboard, this function will hide\nit.\n\n\\param window the window to disable text input.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInput",
          "name": "SDL_StopTextInput",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_ClearComposition": {
          "doc": "Dismiss the composition window/IME without disabling the subsystem.\n\n\\param window the window to affect.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInput\n\\sa SDL_StopTextInput",
          "name": "SDL_ClearComposition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetTextInputArea": {
          "doc": "Set the area used to type Unicode text input.\n\nNative input methods may place a window with word suggestions near the\ncursor, without covering the text being entered.\n\n\\param window the window for which to set the text input area.\n\\param rect the SDL_Rect representing the text input area, in window\n            coordinates, or NULL to clear it.\n\\param cursor the offset of the current cursor location relative to\n              `rect->x`, in window coordinates.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextInputArea\n\\sa SDL_StartTextInput",
          "name": "SDL_SetTextInputArea",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "cursor",
              "type": "int"
            }
          ]
        },
        "SDL_GetTextInputArea": {
          "doc": "Get the area used to type Unicode text input.\n\nThis returns the values previously set by SDL_SetTextInputArea().\n\n\\param window the window for which to query the text input area.\n\\param rect a pointer to an SDL_Rect filled in with the text input area,\n            may be NULL.\n\\param cursor a pointer to the offset of the current cursor location\n              relative to `rect->x`, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextInputArea",
          "name": "SDL_GetTextInputArea",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            },
            {
              "name": "cursor",
              "type": "int *"
            }
          ]
        },
        "SDL_HasScreenKeyboardSupport": {
          "doc": "Check whether the platform has screen keyboard support.\n\n\\returns true if the platform has some screen keyboard support or false if\n         not.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StartTextInput\n\\sa SDL_ScreenKeyboardShown",
          "name": "SDL_HasScreenKeyboardSupport",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_ScreenKeyboardShown": {
          "doc": "Check whether the screen keyboard is shown for given window.\n\n\\param window the window for which screen keyboard should be queried.\n\\returns true if screen keyboard is shown or false if not.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasScreenKeyboardSupport",
          "name": "SDL_ScreenKeyboardShown",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        }
      }
    },
    "SDL_keycode.h": {
      "name": "SDL_keycode.h",
      "doc": "# CategoryKeycode\n\nDefines constants which identify keyboard keys and modifiers.\n\nPlease refer to the Best Keyboard Practices document for details on what\nthis information means and how best to use it.\n\nhttps://wiki.libsdl.org/SDL3/BestKeyboardPractices",
      "entries": {
        "SDL_Keycode": {
          "doc": "The SDL virtual key representation.\n\nValues of this type are used to represent keyboard keys using the current\nlayout of the keyboard. These values include Unicode values representing\nthe unmodified character that would be generated by pressing the key, or an\n`SDLK_*` constant for those keys that do not generate characters.\n\nA special exception is the number keys at the top of the keyboard which map\nto SDLK_0...SDLK_9 on AZERTY layouts.\n\nKeys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or\nunicode code point.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_Keycode",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDLK_EXTENDED_MASK": {
          "doc": "",
          "name": "SDLK_EXTENDED_MASK",
          "kind": "def",
          "value": "(1u << 29)"
        },
        "SDLK_SCANCODE_MASK": {
          "doc": "",
          "name": "SDLK_SCANCODE_MASK",
          "kind": "def",
          "value": "(1u << 30)"
        },
        "SDL_SCANCODE_TO_KEYCODE": {
          "doc": "",
          "name": "SDL_SCANCODE_TO_KEYCODE",
          "kind": "def",
          "parameters": [
            "X"
          ],
          "value": "(X | SDLK_SCANCODE_MASK)"
        },
        "SDLK_UNKNOWN": {
          "doc": "0",
          "name": "SDLK_UNKNOWN",
          "kind": "def",
          "value": "0x00000000u"
        },
        "SDLK_RETURN": {
          "doc": "'\\r'",
          "name": "SDLK_RETURN",
          "kind": "def",
          "value": "0x0000000du"
        },
        "SDLK_ESCAPE": {
          "doc": "'\\x1B'",
          "name": "SDLK_ESCAPE",
          "kind": "def",
          "value": "0x0000001bu"
        },
        "SDLK_BACKSPACE": {
          "doc": "'\\b'",
          "name": "SDLK_BACKSPACE",
          "kind": "def",
          "value": "0x00000008u"
        },
        "SDLK_TAB": {
          "doc": "'\\t'",
          "name": "SDLK_TAB",
          "kind": "def",
          "value": "0x00000009u"
        },
        "SDLK_SPACE": {
          "doc": "' '",
          "name": "SDLK_SPACE",
          "kind": "def",
          "value": "0x00000020u"
        },
        "SDLK_EXCLAIM": {
          "doc": "'!'",
          "name": "SDLK_EXCLAIM",
          "kind": "def",
          "value": "0x00000021u"
        },
        "SDLK_DBLAPOSTROPHE": {
          "doc": "'\"'",
          "name": "SDLK_DBLAPOSTROPHE",
          "kind": "def",
          "value": "0x00000022u"
        },
        "SDLK_HASH": {
          "doc": "'#'",
          "name": "SDLK_HASH",
          "kind": "def",
          "value": "0x00000023u"
        },
        "SDLK_DOLLAR": {
          "doc": "'$'",
          "name": "SDLK_DOLLAR",
          "kind": "def",
          "value": "0x00000024u"
        },
        "SDLK_PERCENT": {
          "doc": "'%'",
          "name": "SDLK_PERCENT",
          "kind": "def",
          "value": "0x00000025u"
        },
        "SDLK_AMPERSAND": {
          "doc": "'&'",
          "name": "SDLK_AMPERSAND",
          "kind": "def",
          "value": "0x00000026u"
        },
        "SDLK_APOSTROPHE": {
          "doc": "'\\''",
          "name": "SDLK_APOSTROPHE",
          "kind": "def",
          "value": "0x00000027u"
        },
        "SDLK_LEFTPAREN": {
          "doc": "'('",
          "name": "SDLK_LEFTPAREN",
          "kind": "def",
          "value": "0x00000028u"
        },
        "SDLK_RIGHTPAREN": {
          "doc": "')'",
          "name": "SDLK_RIGHTPAREN",
          "kind": "def",
          "value": "0x00000029u"
        },
        "SDLK_ASTERISK": {
          "doc": "'*'",
          "name": "SDLK_ASTERISK",
          "kind": "def",
          "value": "0x0000002au"
        },
        "SDLK_PLUS": {
          "doc": "'+'",
          "name": "SDLK_PLUS",
          "kind": "def",
          "value": "0x0000002bu"
        },
        "SDLK_COMMA": {
          "doc": "','",
          "name": "SDLK_COMMA",
          "kind": "def",
          "value": "0x0000002cu"
        },
        "SDLK_MINUS": {
          "doc": "'-'",
          "name": "SDLK_MINUS",
          "kind": "def",
          "value": "0x0000002du"
        },
        "SDLK_PERIOD": {
          "doc": "'.'",
          "name": "SDLK_PERIOD",
          "kind": "def",
          "value": "0x0000002eu"
        },
        "SDLK_SLASH": {
          "doc": "'/'",
          "name": "SDLK_SLASH",
          "kind": "def",
          "value": "0x0000002fu"
        },
        "SDLK_0": {
          "doc": "'0'",
          "name": "SDLK_0",
          "kind": "def",
          "value": "0x00000030u"
        },
        "SDLK_1": {
          "doc": "'1'",
          "name": "SDLK_1",
          "kind": "def",
          "value": "0x00000031u"
        },
        "SDLK_2": {
          "doc": "'2'",
          "name": "SDLK_2",
          "kind": "def",
          "value": "0x00000032u"
        },
        "SDLK_3": {
          "doc": "'3'",
          "name": "SDLK_3",
          "kind": "def",
          "value": "0x00000033u"
        },
        "SDLK_4": {
          "doc": "'4'",
          "name": "SDLK_4",
          "kind": "def",
          "value": "0x00000034u"
        },
        "SDLK_5": {
          "doc": "'5'",
          "name": "SDLK_5",
          "kind": "def",
          "value": "0x00000035u"
        },
        "SDLK_6": {
          "doc": "'6'",
          "name": "SDLK_6",
          "kind": "def",
          "value": "0x00000036u"
        },
        "SDLK_7": {
          "doc": "'7'",
          "name": "SDLK_7",
          "kind": "def",
          "value": "0x00000037u"
        },
        "SDLK_8": {
          "doc": "'8'",
          "name": "SDLK_8",
          "kind": "def",
          "value": "0x00000038u"
        },
        "SDLK_9": {
          "doc": "'9'",
          "name": "SDLK_9",
          "kind": "def",
          "value": "0x00000039u"
        },
        "SDLK_COLON": {
          "doc": "':'",
          "name": "SDLK_COLON",
          "kind": "def",
          "value": "0x0000003au"
        },
        "SDLK_SEMICOLON": {
          "doc": "';'",
          "name": "SDLK_SEMICOLON",
          "kind": "def",
          "value": "0x0000003bu"
        },
        "SDLK_LESS": {
          "doc": "'<'",
          "name": "SDLK_LESS",
          "kind": "def",
          "value": "0x0000003cu"
        },
        "SDLK_EQUALS": {
          "doc": "'='",
          "name": "SDLK_EQUALS",
          "kind": "def",
          "value": "0x0000003du"
        },
        "SDLK_GREATER": {
          "doc": "'>'",
          "name": "SDLK_GREATER",
          "kind": "def",
          "value": "0x0000003eu"
        },
        "SDLK_QUESTION": {
          "doc": "'?'",
          "name": "SDLK_QUESTION",
          "kind": "def",
          "value": "0x0000003fu"
        },
        "SDLK_AT": {
          "doc": "'@'",
          "name": "SDLK_AT",
          "kind": "def",
          "value": "0x00000040u"
        },
        "SDLK_LEFTBRACKET": {
          "doc": "'['",
          "name": "SDLK_LEFTBRACKET",
          "kind": "def",
          "value": "0x0000005bu"
        },
        "SDLK_BACKSLASH": {
          "doc": "'\\\\'",
          "name": "SDLK_BACKSLASH",
          "kind": "def",
          "value": "0x0000005cu"
        },
        "SDLK_RIGHTBRACKET": {
          "doc": "']'",
          "name": "SDLK_RIGHTBRACKET",
          "kind": "def",
          "value": "0x0000005du"
        },
        "SDLK_CARET": {
          "doc": "'^'",
          "name": "SDLK_CARET",
          "kind": "def",
          "value": "0x0000005eu"
        },
        "SDLK_UNDERSCORE": {
          "doc": "'_'",
          "name": "SDLK_UNDERSCORE",
          "kind": "def",
          "value": "0x0000005fu"
        },
        "SDLK_GRAVE": {
          "doc": "'`'",
          "name": "SDLK_GRAVE",
          "kind": "def",
          "value": "0x00000060u"
        },
        "SDLK_A": {
          "doc": "'a'",
          "name": "SDLK_A",
          "kind": "def",
          "value": "0x00000061u"
        },
        "SDLK_B": {
          "doc": "'b'",
          "name": "SDLK_B",
          "kind": "def",
          "value": "0x00000062u"
        },
        "SDLK_C": {
          "doc": "'c'",
          "name": "SDLK_C",
          "kind": "def",
          "value": "0x00000063u"
        },
        "SDLK_D": {
          "doc": "'d'",
          "name": "SDLK_D",
          "kind": "def",
          "value": "0x00000064u"
        },
        "SDLK_E": {
          "doc": "'e'",
          "name": "SDLK_E",
          "kind": "def",
          "value": "0x00000065u"
        },
        "SDLK_F": {
          "doc": "'f'",
          "name": "SDLK_F",
          "kind": "def",
          "value": "0x00000066u"
        },
        "SDLK_G": {
          "doc": "'g'",
          "name": "SDLK_G",
          "kind": "def",
          "value": "0x00000067u"
        },
        "SDLK_H": {
          "doc": "'h'",
          "name": "SDLK_H",
          "kind": "def",
          "value": "0x00000068u"
        },
        "SDLK_I": {
          "doc": "'i'",
          "name": "SDLK_I",
          "kind": "def",
          "value": "0x00000069u"
        },
        "SDLK_J": {
          "doc": "'j'",
          "name": "SDLK_J",
          "kind": "def",
          "value": "0x0000006au"
        },
        "SDLK_K": {
          "doc": "'k'",
          "name": "SDLK_K",
          "kind": "def",
          "value": "0x0000006bu"
        },
        "SDLK_L": {
          "doc": "'l'",
          "name": "SDLK_L",
          "kind": "def",
          "value": "0x0000006cu"
        },
        "SDLK_M": {
          "doc": "'m'",
          "name": "SDLK_M",
          "kind": "def",
          "value": "0x0000006du"
        },
        "SDLK_N": {
          "doc": "'n'",
          "name": "SDLK_N",
          "kind": "def",
          "value": "0x0000006eu"
        },
        "SDLK_O": {
          "doc": "'o'",
          "name": "SDLK_O",
          "kind": "def",
          "value": "0x0000006fu"
        },
        "SDLK_P": {
          "doc": "'p'",
          "name": "SDLK_P",
          "kind": "def",
          "value": "0x00000070u"
        },
        "SDLK_Q": {
          "doc": "'q'",
          "name": "SDLK_Q",
          "kind": "def",
          "value": "0x00000071u"
        },
        "SDLK_R": {
          "doc": "'r'",
          "name": "SDLK_R",
          "kind": "def",
          "value": "0x00000072u"
        },
        "SDLK_S": {
          "doc": "'s'",
          "name": "SDLK_S",
          "kind": "def",
          "value": "0x00000073u"
        },
        "SDLK_T": {
          "doc": "'t'",
          "name": "SDLK_T",
          "kind": "def",
          "value": "0x00000074u"
        },
        "SDLK_U": {
          "doc": "'u'",
          "name": "SDLK_U",
          "kind": "def",
          "value": "0x00000075u"
        },
        "SDLK_V": {
          "doc": "'v'",
          "name": "SDLK_V",
          "kind": "def",
          "value": "0x00000076u"
        },
        "SDLK_W": {
          "doc": "'w'",
          "name": "SDLK_W",
          "kind": "def",
          "value": "0x00000077u"
        },
        "SDLK_X": {
          "doc": "'x'",
          "name": "SDLK_X",
          "kind": "def",
          "value": "0x00000078u"
        },
        "SDLK_Y": {
          "doc": "'y'",
          "name": "SDLK_Y",
          "kind": "def",
          "value": "0x00000079u"
        },
        "SDLK_Z": {
          "doc": "'z'",
          "name": "SDLK_Z",
          "kind": "def",
          "value": "0x0000007au"
        },
        "SDLK_LEFTBRACE": {
          "doc": "'{'",
          "name": "SDLK_LEFTBRACE",
          "kind": "def",
          "value": "0x0000007bu"
        },
        "SDLK_PIPE": {
          "doc": "'|'",
          "name": "SDLK_PIPE",
          "kind": "def",
          "value": "0x0000007cu"
        },
        "SDLK_RIGHTBRACE": {
          "doc": "'}'",
          "name": "SDLK_RIGHTBRACE",
          "kind": "def",
          "value": "0x0000007du"
        },
        "SDLK_TILDE": {
          "doc": "'~'",
          "name": "SDLK_TILDE",
          "kind": "def",
          "value": "0x0000007eu"
        },
        "SDLK_DELETE": {
          "doc": "'\\x7F'",
          "name": "SDLK_DELETE",
          "kind": "def",
          "value": "0x0000007fu"
        },
        "SDLK_PLUSMINUS": {
          "doc": "'\\xB1'",
          "name": "SDLK_PLUSMINUS",
          "kind": "def",
          "value": "0x000000b1u"
        },
        "SDLK_CAPSLOCK": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK)",
          "name": "SDLK_CAPSLOCK",
          "kind": "def",
          "value": "0x40000039u"
        },
        "SDLK_F1": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1)",
          "name": "SDLK_F1",
          "kind": "def",
          "value": "0x4000003au"
        },
        "SDLK_F2": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2)",
          "name": "SDLK_F2",
          "kind": "def",
          "value": "0x4000003bu"
        },
        "SDLK_F3": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3)",
          "name": "SDLK_F3",
          "kind": "def",
          "value": "0x4000003cu"
        },
        "SDLK_F4": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4)",
          "name": "SDLK_F4",
          "kind": "def",
          "value": "0x4000003du"
        },
        "SDLK_F5": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5)",
          "name": "SDLK_F5",
          "kind": "def",
          "value": "0x4000003eu"
        },
        "SDLK_F6": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6)",
          "name": "SDLK_F6",
          "kind": "def",
          "value": "0x4000003fu"
        },
        "SDLK_F7": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7)",
          "name": "SDLK_F7",
          "kind": "def",
          "value": "0x40000040u"
        },
        "SDLK_F8": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8)",
          "name": "SDLK_F8",
          "kind": "def",
          "value": "0x40000041u"
        },
        "SDLK_F9": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9)",
          "name": "SDLK_F9",
          "kind": "def",
          "value": "0x40000042u"
        },
        "SDLK_F10": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10)",
          "name": "SDLK_F10",
          "kind": "def",
          "value": "0x40000043u"
        },
        "SDLK_F11": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11)",
          "name": "SDLK_F11",
          "kind": "def",
          "value": "0x40000044u"
        },
        "SDLK_F12": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12)",
          "name": "SDLK_F12",
          "kind": "def",
          "value": "0x40000045u"
        },
        "SDLK_PRINTSCREEN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN)",
          "name": "SDLK_PRINTSCREEN",
          "kind": "def",
          "value": "0x40000046u"
        },
        "SDLK_SCROLLLOCK": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK)",
          "name": "SDLK_SCROLLLOCK",
          "kind": "def",
          "value": "0x40000047u"
        },
        "SDLK_PAUSE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE)",
          "name": "SDLK_PAUSE",
          "kind": "def",
          "value": "0x40000048u"
        },
        "SDLK_INSERT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT)",
          "name": "SDLK_INSERT",
          "kind": "def",
          "value": "0x40000049u"
        },
        "SDLK_HOME": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME)",
          "name": "SDLK_HOME",
          "kind": "def",
          "value": "0x4000004au"
        },
        "SDLK_PAGEUP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP)",
          "name": "SDLK_PAGEUP",
          "kind": "def",
          "value": "0x4000004bu"
        },
        "SDLK_END": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END)",
          "name": "SDLK_END",
          "kind": "def",
          "value": "0x4000004du"
        },
        "SDLK_PAGEDOWN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN)",
          "name": "SDLK_PAGEDOWN",
          "kind": "def",
          "value": "0x4000004eu"
        },
        "SDLK_RIGHT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT)",
          "name": "SDLK_RIGHT",
          "kind": "def",
          "value": "0x4000004fu"
        },
        "SDLK_LEFT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT)",
          "name": "SDLK_LEFT",
          "kind": "def",
          "value": "0x40000050u"
        },
        "SDLK_DOWN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN)",
          "name": "SDLK_DOWN",
          "kind": "def",
          "value": "0x40000051u"
        },
        "SDLK_UP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP)",
          "name": "SDLK_UP",
          "kind": "def",
          "value": "0x40000052u"
        },
        "SDLK_NUMLOCKCLEAR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR)",
          "name": "SDLK_NUMLOCKCLEAR",
          "kind": "def",
          "value": "0x40000053u"
        },
        "SDLK_KP_DIVIDE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE)",
          "name": "SDLK_KP_DIVIDE",
          "kind": "def",
          "value": "0x40000054u"
        },
        "SDLK_KP_MULTIPLY": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY)",
          "name": "SDLK_KP_MULTIPLY",
          "kind": "def",
          "value": "0x40000055u"
        },
        "SDLK_KP_MINUS": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS)",
          "name": "SDLK_KP_MINUS",
          "kind": "def",
          "value": "0x40000056u"
        },
        "SDLK_KP_PLUS": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS)",
          "name": "SDLK_KP_PLUS",
          "kind": "def",
          "value": "0x40000057u"
        },
        "SDLK_KP_ENTER": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER)",
          "name": "SDLK_KP_ENTER",
          "kind": "def",
          "value": "0x40000058u"
        },
        "SDLK_KP_1": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1)",
          "name": "SDLK_KP_1",
          "kind": "def",
          "value": "0x40000059u"
        },
        "SDLK_KP_2": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2)",
          "name": "SDLK_KP_2",
          "kind": "def",
          "value": "0x4000005au"
        },
        "SDLK_KP_3": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3)",
          "name": "SDLK_KP_3",
          "kind": "def",
          "value": "0x4000005bu"
        },
        "SDLK_KP_4": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4)",
          "name": "SDLK_KP_4",
          "kind": "def",
          "value": "0x4000005cu"
        },
        "SDLK_KP_5": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5)",
          "name": "SDLK_KP_5",
          "kind": "def",
          "value": "0x4000005du"
        },
        "SDLK_KP_6": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6)",
          "name": "SDLK_KP_6",
          "kind": "def",
          "value": "0x4000005eu"
        },
        "SDLK_KP_7": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7)",
          "name": "SDLK_KP_7",
          "kind": "def",
          "value": "0x4000005fu"
        },
        "SDLK_KP_8": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8)",
          "name": "SDLK_KP_8",
          "kind": "def",
          "value": "0x40000060u"
        },
        "SDLK_KP_9": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9)",
          "name": "SDLK_KP_9",
          "kind": "def",
          "value": "0x40000061u"
        },
        "SDLK_KP_0": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0)",
          "name": "SDLK_KP_0",
          "kind": "def",
          "value": "0x40000062u"
        },
        "SDLK_KP_PERIOD": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD)",
          "name": "SDLK_KP_PERIOD",
          "kind": "def",
          "value": "0x40000063u"
        },
        "SDLK_APPLICATION": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION)",
          "name": "SDLK_APPLICATION",
          "kind": "def",
          "value": "0x40000065u"
        },
        "SDLK_POWER": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER)",
          "name": "SDLK_POWER",
          "kind": "def",
          "value": "0x40000066u"
        },
        "SDLK_KP_EQUALS": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS)",
          "name": "SDLK_KP_EQUALS",
          "kind": "def",
          "value": "0x40000067u"
        },
        "SDLK_F13": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13)",
          "name": "SDLK_F13",
          "kind": "def",
          "value": "0x40000068u"
        },
        "SDLK_F14": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14)",
          "name": "SDLK_F14",
          "kind": "def",
          "value": "0x40000069u"
        },
        "SDLK_F15": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15)",
          "name": "SDLK_F15",
          "kind": "def",
          "value": "0x4000006au"
        },
        "SDLK_F16": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16)",
          "name": "SDLK_F16",
          "kind": "def",
          "value": "0x4000006bu"
        },
        "SDLK_F17": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17)",
          "name": "SDLK_F17",
          "kind": "def",
          "value": "0x4000006cu"
        },
        "SDLK_F18": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18)",
          "name": "SDLK_F18",
          "kind": "def",
          "value": "0x4000006du"
        },
        "SDLK_F19": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19)",
          "name": "SDLK_F19",
          "kind": "def",
          "value": "0x4000006eu"
        },
        "SDLK_F20": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20)",
          "name": "SDLK_F20",
          "kind": "def",
          "value": "0x4000006fu"
        },
        "SDLK_F21": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21)",
          "name": "SDLK_F21",
          "kind": "def",
          "value": "0x40000070u"
        },
        "SDLK_F22": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22)",
          "name": "SDLK_F22",
          "kind": "def",
          "value": "0x40000071u"
        },
        "SDLK_F23": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23)",
          "name": "SDLK_F23",
          "kind": "def",
          "value": "0x40000072u"
        },
        "SDLK_F24": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24)",
          "name": "SDLK_F24",
          "kind": "def",
          "value": "0x40000073u"
        },
        "SDLK_EXECUTE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE)",
          "name": "SDLK_EXECUTE",
          "kind": "def",
          "value": "0x40000074u"
        },
        "SDLK_HELP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP)",
          "name": "SDLK_HELP",
          "kind": "def",
          "value": "0x40000075u"
        },
        "SDLK_MENU": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU)",
          "name": "SDLK_MENU",
          "kind": "def",
          "value": "0x40000076u"
        },
        "SDLK_SELECT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT)",
          "name": "SDLK_SELECT",
          "kind": "def",
          "value": "0x40000077u"
        },
        "SDLK_STOP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP)",
          "name": "SDLK_STOP",
          "kind": "def",
          "value": "0x40000078u"
        },
        "SDLK_AGAIN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN)",
          "name": "SDLK_AGAIN",
          "kind": "def",
          "value": "0x40000079u"
        },
        "SDLK_UNDO": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO)",
          "name": "SDLK_UNDO",
          "kind": "def",
          "value": "0x4000007au"
        },
        "SDLK_CUT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT)",
          "name": "SDLK_CUT",
          "kind": "def",
          "value": "0x4000007bu"
        },
        "SDLK_COPY": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY)",
          "name": "SDLK_COPY",
          "kind": "def",
          "value": "0x4000007cu"
        },
        "SDLK_PASTE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE)",
          "name": "SDLK_PASTE",
          "kind": "def",
          "value": "0x4000007du"
        },
        "SDLK_FIND": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND)",
          "name": "SDLK_FIND",
          "kind": "def",
          "value": "0x4000007eu"
        },
        "SDLK_MUTE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE)",
          "name": "SDLK_MUTE",
          "kind": "def",
          "value": "0x4000007fu"
        },
        "SDLK_VOLUMEUP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP)",
          "name": "SDLK_VOLUMEUP",
          "kind": "def",
          "value": "0x40000080u"
        },
        "SDLK_VOLUMEDOWN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN)",
          "name": "SDLK_VOLUMEDOWN",
          "kind": "def",
          "value": "0x40000081u"
        },
        "SDLK_KP_COMMA": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA)",
          "name": "SDLK_KP_COMMA",
          "kind": "def",
          "value": "0x40000085u"
        },
        "SDLK_KP_EQUALSAS400": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400)",
          "name": "SDLK_KP_EQUALSAS400",
          "kind": "def",
          "value": "0x40000086u"
        },
        "SDLK_ALTERASE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE)",
          "name": "SDLK_ALTERASE",
          "kind": "def",
          "value": "0x40000099u"
        },
        "SDLK_SYSREQ": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ)",
          "name": "SDLK_SYSREQ",
          "kind": "def",
          "value": "0x4000009au"
        },
        "SDLK_CANCEL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL)",
          "name": "SDLK_CANCEL",
          "kind": "def",
          "value": "0x4000009bu"
        },
        "SDLK_CLEAR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR)",
          "name": "SDLK_CLEAR",
          "kind": "def",
          "value": "0x4000009cu"
        },
        "SDLK_PRIOR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR)",
          "name": "SDLK_PRIOR",
          "kind": "def",
          "value": "0x4000009du"
        },
        "SDLK_RETURN2": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2)",
          "name": "SDLK_RETURN2",
          "kind": "def",
          "value": "0x4000009eu"
        },
        "SDLK_SEPARATOR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR)",
          "name": "SDLK_SEPARATOR",
          "kind": "def",
          "value": "0x4000009fu"
        },
        "SDLK_OUT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT)",
          "name": "SDLK_OUT",
          "kind": "def",
          "value": "0x400000a0u"
        },
        "SDLK_OPER": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER)",
          "name": "SDLK_OPER",
          "kind": "def",
          "value": "0x400000a1u"
        },
        "SDLK_CLEARAGAIN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN)",
          "name": "SDLK_CLEARAGAIN",
          "kind": "def",
          "value": "0x400000a2u"
        },
        "SDLK_CRSEL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL)",
          "name": "SDLK_CRSEL",
          "kind": "def",
          "value": "0x400000a3u"
        },
        "SDLK_EXSEL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL)",
          "name": "SDLK_EXSEL",
          "kind": "def",
          "value": "0x400000a4u"
        },
        "SDLK_KP_00": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00)",
          "name": "SDLK_KP_00",
          "kind": "def",
          "value": "0x400000b0u"
        },
        "SDLK_KP_000": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000)",
          "name": "SDLK_KP_000",
          "kind": "def",
          "value": "0x400000b1u"
        },
        "SDLK_THOUSANDSSEPARATOR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR)",
          "name": "SDLK_THOUSANDSSEPARATOR",
          "kind": "def",
          "value": "0x400000b2u"
        },
        "SDLK_DECIMALSEPARATOR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR)",
          "name": "SDLK_DECIMALSEPARATOR",
          "kind": "def",
          "value": "0x400000b3u"
        },
        "SDLK_CURRENCYUNIT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT)",
          "name": "SDLK_CURRENCYUNIT",
          "kind": "def",
          "value": "0x400000b4u"
        },
        "SDLK_CURRENCYSUBUNIT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT)",
          "name": "SDLK_CURRENCYSUBUNIT",
          "kind": "def",
          "value": "0x400000b5u"
        },
        "SDLK_KP_LEFTPAREN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN)",
          "name": "SDLK_KP_LEFTPAREN",
          "kind": "def",
          "value": "0x400000b6u"
        },
        "SDLK_KP_RIGHTPAREN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN)",
          "name": "SDLK_KP_RIGHTPAREN",
          "kind": "def",
          "value": "0x400000b7u"
        },
        "SDLK_KP_LEFTBRACE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE)",
          "name": "SDLK_KP_LEFTBRACE",
          "kind": "def",
          "value": "0x400000b8u"
        },
        "SDLK_KP_RIGHTBRACE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE)",
          "name": "SDLK_KP_RIGHTBRACE",
          "kind": "def",
          "value": "0x400000b9u"
        },
        "SDLK_KP_TAB": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB)",
          "name": "SDLK_KP_TAB",
          "kind": "def",
          "value": "0x400000bau"
        },
        "SDLK_KP_BACKSPACE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE)",
          "name": "SDLK_KP_BACKSPACE",
          "kind": "def",
          "value": "0x400000bbu"
        },
        "SDLK_KP_A": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A)",
          "name": "SDLK_KP_A",
          "kind": "def",
          "value": "0x400000bcu"
        },
        "SDLK_KP_B": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B)",
          "name": "SDLK_KP_B",
          "kind": "def",
          "value": "0x400000bdu"
        },
        "SDLK_KP_C": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C)",
          "name": "SDLK_KP_C",
          "kind": "def",
          "value": "0x400000beu"
        },
        "SDLK_KP_D": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D)",
          "name": "SDLK_KP_D",
          "kind": "def",
          "value": "0x400000bfu"
        },
        "SDLK_KP_E": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E)",
          "name": "SDLK_KP_E",
          "kind": "def",
          "value": "0x400000c0u"
        },
        "SDLK_KP_F": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F)",
          "name": "SDLK_KP_F",
          "kind": "def",
          "value": "0x400000c1u"
        },
        "SDLK_KP_XOR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR)",
          "name": "SDLK_KP_XOR",
          "kind": "def",
          "value": "0x400000c2u"
        },
        "SDLK_KP_POWER": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER)",
          "name": "SDLK_KP_POWER",
          "kind": "def",
          "value": "0x400000c3u"
        },
        "SDLK_KP_PERCENT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT)",
          "name": "SDLK_KP_PERCENT",
          "kind": "def",
          "value": "0x400000c4u"
        },
        "SDLK_KP_LESS": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS)",
          "name": "SDLK_KP_LESS",
          "kind": "def",
          "value": "0x400000c5u"
        },
        "SDLK_KP_GREATER": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER)",
          "name": "SDLK_KP_GREATER",
          "kind": "def",
          "value": "0x400000c6u"
        },
        "SDLK_KP_AMPERSAND": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND)",
          "name": "SDLK_KP_AMPERSAND",
          "kind": "def",
          "value": "0x400000c7u"
        },
        "SDLK_KP_DBLAMPERSAND": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND)",
          "name": "SDLK_KP_DBLAMPERSAND",
          "kind": "def",
          "value": "0x400000c8u"
        },
        "SDLK_KP_VERTICALBAR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR)",
          "name": "SDLK_KP_VERTICALBAR",
          "kind": "def",
          "value": "0x400000c9u"
        },
        "SDLK_KP_DBLVERTICALBAR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR)",
          "name": "SDLK_KP_DBLVERTICALBAR",
          "kind": "def",
          "value": "0x400000cau"
        },
        "SDLK_KP_COLON": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON)",
          "name": "SDLK_KP_COLON",
          "kind": "def",
          "value": "0x400000cbu"
        },
        "SDLK_KP_HASH": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH)",
          "name": "SDLK_KP_HASH",
          "kind": "def",
          "value": "0x400000ccu"
        },
        "SDLK_KP_SPACE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE)",
          "name": "SDLK_KP_SPACE",
          "kind": "def",
          "value": "0x400000cdu"
        },
        "SDLK_KP_AT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT)",
          "name": "SDLK_KP_AT",
          "kind": "def",
          "value": "0x400000ceu"
        },
        "SDLK_KP_EXCLAM": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM)",
          "name": "SDLK_KP_EXCLAM",
          "kind": "def",
          "value": "0x400000cfu"
        },
        "SDLK_KP_MEMSTORE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE)",
          "name": "SDLK_KP_MEMSTORE",
          "kind": "def",
          "value": "0x400000d0u"
        },
        "SDLK_KP_MEMRECALL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL)",
          "name": "SDLK_KP_MEMRECALL",
          "kind": "def",
          "value": "0x400000d1u"
        },
        "SDLK_KP_MEMCLEAR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR)",
          "name": "SDLK_KP_MEMCLEAR",
          "kind": "def",
          "value": "0x400000d2u"
        },
        "SDLK_KP_MEMADD": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD)",
          "name": "SDLK_KP_MEMADD",
          "kind": "def",
          "value": "0x400000d3u"
        },
        "SDLK_KP_MEMSUBTRACT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT)",
          "name": "SDLK_KP_MEMSUBTRACT",
          "kind": "def",
          "value": "0x400000d4u"
        },
        "SDLK_KP_MEMMULTIPLY": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY)",
          "name": "SDLK_KP_MEMMULTIPLY",
          "kind": "def",
          "value": "0x400000d5u"
        },
        "SDLK_KP_MEMDIVIDE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE)",
          "name": "SDLK_KP_MEMDIVIDE",
          "kind": "def",
          "value": "0x400000d6u"
        },
        "SDLK_KP_PLUSMINUS": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS)",
          "name": "SDLK_KP_PLUSMINUS",
          "kind": "def",
          "value": "0x400000d7u"
        },
        "SDLK_KP_CLEAR": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR)",
          "name": "SDLK_KP_CLEAR",
          "kind": "def",
          "value": "0x400000d8u"
        },
        "SDLK_KP_CLEARENTRY": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY)",
          "name": "SDLK_KP_CLEARENTRY",
          "kind": "def",
          "value": "0x400000d9u"
        },
        "SDLK_KP_BINARY": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY)",
          "name": "SDLK_KP_BINARY",
          "kind": "def",
          "value": "0x400000dau"
        },
        "SDLK_KP_OCTAL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL)",
          "name": "SDLK_KP_OCTAL",
          "kind": "def",
          "value": "0x400000dbu"
        },
        "SDLK_KP_DECIMAL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL)",
          "name": "SDLK_KP_DECIMAL",
          "kind": "def",
          "value": "0x400000dcu"
        },
        "SDLK_KP_HEXADECIMAL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL)",
          "name": "SDLK_KP_HEXADECIMAL",
          "kind": "def",
          "value": "0x400000ddu"
        },
        "SDLK_LCTRL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL)",
          "name": "SDLK_LCTRL",
          "kind": "def",
          "value": "0x400000e0u"
        },
        "SDLK_LSHIFT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT)",
          "name": "SDLK_LSHIFT",
          "kind": "def",
          "value": "0x400000e1u"
        },
        "SDLK_LALT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT)",
          "name": "SDLK_LALT",
          "kind": "def",
          "value": "0x400000e2u"
        },
        "SDLK_LGUI": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI)",
          "name": "SDLK_LGUI",
          "kind": "def",
          "value": "0x400000e3u"
        },
        "SDLK_RCTRL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL)",
          "name": "SDLK_RCTRL",
          "kind": "def",
          "value": "0x400000e4u"
        },
        "SDLK_RSHIFT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT)",
          "name": "SDLK_RSHIFT",
          "kind": "def",
          "value": "0x400000e5u"
        },
        "SDLK_RALT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT)",
          "name": "SDLK_RALT",
          "kind": "def",
          "value": "0x400000e6u"
        },
        "SDLK_RGUI": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI)",
          "name": "SDLK_RGUI",
          "kind": "def",
          "value": "0x400000e7u"
        },
        "SDLK_MODE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE)",
          "name": "SDLK_MODE",
          "kind": "def",
          "value": "0x40000101u"
        },
        "SDLK_SLEEP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP)",
          "name": "SDLK_SLEEP",
          "kind": "def",
          "value": "0x40000102u"
        },
        "SDLK_WAKE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WAKE)",
          "name": "SDLK_WAKE",
          "kind": "def",
          "value": "0x40000103u"
        },
        "SDLK_CHANNEL_INCREMENT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_INCREMENT)",
          "name": "SDLK_CHANNEL_INCREMENT",
          "kind": "def",
          "value": "0x40000104u"
        },
        "SDLK_CHANNEL_DECREMENT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_DECREMENT)",
          "name": "SDLK_CHANNEL_DECREMENT",
          "kind": "def",
          "value": "0x40000105u"
        },
        "SDLK_MEDIA_PLAY": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY)",
          "name": "SDLK_MEDIA_PLAY",
          "kind": "def",
          "value": "0x40000106u"
        },
        "SDLK_MEDIA_PAUSE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PAUSE)",
          "name": "SDLK_MEDIA_PAUSE",
          "kind": "def",
          "value": "0x40000107u"
        },
        "SDLK_MEDIA_RECORD": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_RECORD)",
          "name": "SDLK_MEDIA_RECORD",
          "kind": "def",
          "value": "0x40000108u"
        },
        "SDLK_MEDIA_FAST_FORWARD": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_FAST_FORWARD)",
          "name": "SDLK_MEDIA_FAST_FORWARD",
          "kind": "def",
          "value": "0x40000109u"
        },
        "SDLK_MEDIA_REWIND": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_REWIND)",
          "name": "SDLK_MEDIA_REWIND",
          "kind": "def",
          "value": "0x4000010au"
        },
        "SDLK_MEDIA_NEXT_TRACK": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_NEXT_TRACK)",
          "name": "SDLK_MEDIA_NEXT_TRACK",
          "kind": "def",
          "value": "0x4000010bu"
        },
        "SDLK_MEDIA_PREVIOUS_TRACK": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PREVIOUS_TRACK)",
          "name": "SDLK_MEDIA_PREVIOUS_TRACK",
          "kind": "def",
          "value": "0x4000010cu"
        },
        "SDLK_MEDIA_STOP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_STOP)",
          "name": "SDLK_MEDIA_STOP",
          "kind": "def",
          "value": "0x4000010du"
        },
        "SDLK_MEDIA_EJECT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_EJECT)",
          "name": "SDLK_MEDIA_EJECT",
          "kind": "def",
          "value": "0x4000010eu"
        },
        "SDLK_MEDIA_PLAY_PAUSE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY_PAUSE)",
          "name": "SDLK_MEDIA_PLAY_PAUSE",
          "kind": "def",
          "value": "0x4000010fu"
        },
        "SDLK_MEDIA_SELECT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_SELECT)",
          "name": "SDLK_MEDIA_SELECT",
          "kind": "def",
          "value": "0x40000110u"
        },
        "SDLK_AC_NEW": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_NEW)",
          "name": "SDLK_AC_NEW",
          "kind": "def",
          "value": "0x40000111u"
        },
        "SDLK_AC_OPEN": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_OPEN)",
          "name": "SDLK_AC_OPEN",
          "kind": "def",
          "value": "0x40000112u"
        },
        "SDLK_AC_CLOSE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_CLOSE)",
          "name": "SDLK_AC_CLOSE",
          "kind": "def",
          "value": "0x40000113u"
        },
        "SDLK_AC_EXIT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_EXIT)",
          "name": "SDLK_AC_EXIT",
          "kind": "def",
          "value": "0x40000114u"
        },
        "SDLK_AC_SAVE": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SAVE)",
          "name": "SDLK_AC_SAVE",
          "kind": "def",
          "value": "0x40000115u"
        },
        "SDLK_AC_PRINT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PRINT)",
          "name": "SDLK_AC_PRINT",
          "kind": "def",
          "value": "0x40000116u"
        },
        "SDLK_AC_PROPERTIES": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PROPERTIES)",
          "name": "SDLK_AC_PROPERTIES",
          "kind": "def",
          "value": "0x40000117u"
        },
        "SDLK_AC_SEARCH": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH)",
          "name": "SDLK_AC_SEARCH",
          "kind": "def",
          "value": "0x40000118u"
        },
        "SDLK_AC_HOME": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME)",
          "name": "SDLK_AC_HOME",
          "kind": "def",
          "value": "0x40000119u"
        },
        "SDLK_AC_BACK": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK)",
          "name": "SDLK_AC_BACK",
          "kind": "def",
          "value": "0x4000011au"
        },
        "SDLK_AC_FORWARD": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD)",
          "name": "SDLK_AC_FORWARD",
          "kind": "def",
          "value": "0x4000011bu"
        },
        "SDLK_AC_STOP": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP)",
          "name": "SDLK_AC_STOP",
          "kind": "def",
          "value": "0x4000011cu"
        },
        "SDLK_AC_REFRESH": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH)",
          "name": "SDLK_AC_REFRESH",
          "kind": "def",
          "value": "0x4000011du"
        },
        "SDLK_AC_BOOKMARKS": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS)",
          "name": "SDLK_AC_BOOKMARKS",
          "kind": "def",
          "value": "0x4000011eu"
        },
        "SDLK_SOFTLEFT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTLEFT)",
          "name": "SDLK_SOFTLEFT",
          "kind": "def",
          "value": "0x4000011fu"
        },
        "SDLK_SOFTRIGHT": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTRIGHT)",
          "name": "SDLK_SOFTRIGHT",
          "kind": "def",
          "value": "0x40000120u"
        },
        "SDLK_CALL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALL)",
          "name": "SDLK_CALL",
          "kind": "def",
          "value": "0x40000121u"
        },
        "SDLK_ENDCALL": {
          "doc": "SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ENDCALL)",
          "name": "SDLK_ENDCALL",
          "kind": "def",
          "value": "0x40000122u"
        },
        "SDLK_LEFT_TAB": {
          "doc": "Extended key Left Tab",
          "name": "SDLK_LEFT_TAB",
          "kind": "def",
          "value": "0x20000001u"
        },
        "SDLK_LEVEL5_SHIFT": {
          "doc": "Extended key Level 5 Shift",
          "name": "SDLK_LEVEL5_SHIFT",
          "kind": "def",
          "value": "0x20000002u"
        },
        "SDLK_MULTI_KEY_COMPOSE": {
          "doc": "Extended key Multi-key Compose",
          "name": "SDLK_MULTI_KEY_COMPOSE",
          "kind": "def",
          "value": "0x20000003u"
        },
        "SDLK_LMETA": {
          "doc": "Extended key Left Meta",
          "name": "SDLK_LMETA",
          "kind": "def",
          "value": "0x20000004u"
        },
        "SDLK_RMETA": {
          "doc": "Extended key Right Meta",
          "name": "SDLK_RMETA",
          "kind": "def",
          "value": "0x20000005u"
        },
        "SDLK_LHYPER": {
          "doc": "Extended key Left Hyper",
          "name": "SDLK_LHYPER",
          "kind": "def",
          "value": "0x20000006u"
        },
        "SDLK_RHYPER": {
          "doc": "Extended key Right Hyper",
          "name": "SDLK_RHYPER",
          "kind": "def",
          "value": "0x20000007u"
        },
        "SDL_Keymod": {
          "doc": "Valid key modifiers (possibly OR'd together).\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_Keymod",
          "kind": "alias",
          "type": "Uint16"
        },
        "SDL_KMOD_NONE": {
          "doc": "no modifier is applicable.",
          "name": "SDL_KMOD_NONE",
          "kind": "def",
          "value": "0x0000u"
        },
        "SDL_KMOD_LSHIFT": {
          "doc": "the left Shift key is down.",
          "name": "SDL_KMOD_LSHIFT",
          "kind": "def",
          "value": "0x0001u"
        },
        "SDL_KMOD_RSHIFT": {
          "doc": "the right Shift key is down.",
          "name": "SDL_KMOD_RSHIFT",
          "kind": "def",
          "value": "0x0002u"
        },
        "SDL_KMOD_LEVEL5": {
          "doc": "the Level 5 Shift key is down.",
          "name": "SDL_KMOD_LEVEL5",
          "kind": "def",
          "value": "0x0004u"
        },
        "SDL_KMOD_LCTRL": {
          "doc": "the left Ctrl (Control) key is down.",
          "name": "SDL_KMOD_LCTRL",
          "kind": "def",
          "value": "0x0040u"
        },
        "SDL_KMOD_RCTRL": {
          "doc": "the right Ctrl (Control) key is down.",
          "name": "SDL_KMOD_RCTRL",
          "kind": "def",
          "value": "0x0080u"
        },
        "SDL_KMOD_LALT": {
          "doc": "the left Alt key is down.",
          "name": "SDL_KMOD_LALT",
          "kind": "def",
          "value": "0x0100u"
        },
        "SDL_KMOD_RALT": {
          "doc": "the right Alt key is down.",
          "name": "SDL_KMOD_RALT",
          "kind": "def",
          "value": "0x0200u"
        },
        "SDL_KMOD_LGUI": {
          "doc": "the left GUI key (often the Windows key) is down.",
          "name": "SDL_KMOD_LGUI",
          "kind": "def",
          "value": "0x0400u"
        },
        "SDL_KMOD_RGUI": {
          "doc": "the right GUI key (often the Windows key) is down.",
          "name": "SDL_KMOD_RGUI",
          "kind": "def",
          "value": "0x0800u"
        },
        "SDL_KMOD_NUM": {
          "doc": "the Num Lock key (may be located on an extended keypad) is down.",
          "name": "SDL_KMOD_NUM",
          "kind": "def",
          "value": "0x1000u"
        },
        "SDL_KMOD_CAPS": {
          "doc": "the Caps Lock key is down.",
          "name": "SDL_KMOD_CAPS",
          "kind": "def",
          "value": "0x2000u"
        },
        "SDL_KMOD_MODE": {
          "doc": "the !AltGr key is down.",
          "name": "SDL_KMOD_MODE",
          "kind": "def",
          "value": "0x4000u"
        },
        "SDL_KMOD_SCROLL": {
          "doc": "the Scroll Lock key is down.",
          "name": "SDL_KMOD_SCROLL",
          "kind": "def",
          "value": "0x8000u"
        },
        "SDL_KMOD_CTRL": {
          "doc": "Any Ctrl key is down.",
          "name": "SDL_KMOD_CTRL",
          "kind": "def",
          "value": "(SDL_KMOD_LCTRL | SDL_KMOD_RCTRL)"
        },
        "SDL_KMOD_SHIFT": {
          "doc": "Any Shift key is down.",
          "name": "SDL_KMOD_SHIFT",
          "kind": "def",
          "value": "(SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT)"
        },
        "SDL_KMOD_ALT": {
          "doc": "Any Alt key is down.",
          "name": "SDL_KMOD_ALT",
          "kind": "def",
          "value": "(SDL_KMOD_LALT | SDL_KMOD_RALT)"
        },
        "SDL_KMOD_GUI": {
          "doc": "Any GUI key is down.",
          "name": "SDL_KMOD_GUI",
          "kind": "def",
          "value": "(SDL_KMOD_LGUI | SDL_KMOD_RGUI)"
        }
      }
    },
    "SDL_scancode.h": {
      "name": "SDL_scancode.h",
      "doc": "# CategoryScancode\n\nDefines keyboard scancodes.\n\nPlease refer to the Best Keyboard Practices document for details on what\nthis information means and how best to use it.\n\nhttps://wiki.libsdl.org/SDL3/BestKeyboardPractices",
      "entries": {
        "SDL_Scancode": {
          "doc": "The SDL keyboard scancode representation.\n\nAn SDL scancode is the physical representation of a key on the keyboard,\nindependent of language and keyboard mapping.\n\nValues of this type are used to represent keyboard keys, among other places\nin the `scancode` field of the SDL_KeyboardEvent structure.\n\nThe values in this enumeration are based on the USB usage page standard:\nhttps://usb.org/sites/default/files/hut1_5.pdf\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_Scancode",
          "kind": "enum",
          "entries": {
            "SDL_SCANCODE_UNKNOWN": {
              "doc": "",
              "name": "SDL_SCANCODE_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_A": {
              "doc": "",
              "name": "SDL_SCANCODE_A",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_B": {
              "doc": "",
              "name": "SDL_SCANCODE_B",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_C": {
              "doc": "",
              "name": "SDL_SCANCODE_C",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_D": {
              "doc": "",
              "name": "SDL_SCANCODE_D",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_E": {
              "doc": "",
              "name": "SDL_SCANCODE_E",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F": {
              "doc": "",
              "name": "SDL_SCANCODE_F",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_G": {
              "doc": "",
              "name": "SDL_SCANCODE_G",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_H": {
              "doc": "",
              "name": "SDL_SCANCODE_H",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_I": {
              "doc": "",
              "name": "SDL_SCANCODE_I",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_J": {
              "doc": "",
              "name": "SDL_SCANCODE_J",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_K": {
              "doc": "",
              "name": "SDL_SCANCODE_K",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_L": {
              "doc": "",
              "name": "SDL_SCANCODE_L",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_M": {
              "doc": "",
              "name": "SDL_SCANCODE_M",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_N": {
              "doc": "",
              "name": "SDL_SCANCODE_N",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_O": {
              "doc": "",
              "name": "SDL_SCANCODE_O",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_P": {
              "doc": "",
              "name": "SDL_SCANCODE_P",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_Q": {
              "doc": "",
              "name": "SDL_SCANCODE_Q",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_R": {
              "doc": "",
              "name": "SDL_SCANCODE_R",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_S": {
              "doc": "",
              "name": "SDL_SCANCODE_S",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_T": {
              "doc": "",
              "name": "SDL_SCANCODE_T",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_U": {
              "doc": "",
              "name": "SDL_SCANCODE_U",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_V": {
              "doc": "",
              "name": "SDL_SCANCODE_V",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_W": {
              "doc": "",
              "name": "SDL_SCANCODE_W",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_X": {
              "doc": "",
              "name": "SDL_SCANCODE_X",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_Y": {
              "doc": "",
              "name": "SDL_SCANCODE_Y",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_Z": {
              "doc": "",
              "name": "SDL_SCANCODE_Z",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_1": {
              "doc": "",
              "name": "SDL_SCANCODE_1",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_2": {
              "doc": "",
              "name": "SDL_SCANCODE_2",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_3": {
              "doc": "",
              "name": "SDL_SCANCODE_3",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_4": {
              "doc": "",
              "name": "SDL_SCANCODE_4",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_5": {
              "doc": "",
              "name": "SDL_SCANCODE_5",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_6": {
              "doc": "",
              "name": "SDL_SCANCODE_6",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_7": {
              "doc": "",
              "name": "SDL_SCANCODE_7",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_8": {
              "doc": "",
              "name": "SDL_SCANCODE_8",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_9": {
              "doc": "",
              "name": "SDL_SCANCODE_9",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_0": {
              "doc": "",
              "name": "SDL_SCANCODE_0",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RETURN": {
              "doc": "",
              "name": "SDL_SCANCODE_RETURN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_ESCAPE": {
              "doc": "",
              "name": "SDL_SCANCODE_ESCAPE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_BACKSPACE": {
              "doc": "",
              "name": "SDL_SCANCODE_BACKSPACE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_TAB": {
              "doc": "",
              "name": "SDL_SCANCODE_TAB",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SPACE": {
              "doc": "",
              "name": "SDL_SCANCODE_SPACE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MINUS": {
              "doc": "",
              "name": "SDL_SCANCODE_MINUS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_EQUALS": {
              "doc": "",
              "name": "SDL_SCANCODE_EQUALS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LEFTBRACKET": {
              "doc": "",
              "name": "SDL_SCANCODE_LEFTBRACKET",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RIGHTBRACKET": {
              "doc": "",
              "name": "SDL_SCANCODE_RIGHTBRACKET",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_BACKSLASH": {
              "doc": "Located at the lower left of the return key on ISO keyboards and at the right end of the QWERTY row on ANSI keyboards.  Produces REVERSE SOLIDUS (backslash) and VERTICAL LINE in a US layout, REVERSE SOLIDUS and VERTICAL LINE in a UK Mac layout, NUMBER SIGN and TILDE in a UK Windows layout, DOLLAR SIGN and POUND SIGN in a Swiss German layout, NUMBER SIGN and APOSTROPHE in a German layout, GRAVE ACCENT and POUND SIGN in a French Mac layout, and ASTERISK and MICRO SIGN in a French Windows layout.",
              "name": "SDL_SCANCODE_BACKSLASH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_NONUSHASH": {
              "doc": "ISO USB keyboards actually use this code instead of 49 for the same key, but all OSes I've seen treat the two codes identically.  So, as an implementor, unless your keyboard generates both of those codes and your OS treats them differently, you should generate SDL_SCANCODE_BACKSLASH instead of this code. As a user, you should not rely on this code because SDL will never generate it with most (all?) keyboards.",
              "name": "SDL_SCANCODE_NONUSHASH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SEMICOLON": {
              "doc": "",
              "name": "SDL_SCANCODE_SEMICOLON",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_APOSTROPHE": {
              "doc": "",
              "name": "SDL_SCANCODE_APOSTROPHE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_GRAVE": {
              "doc": "Located in the top left corner (on both ANSI and ISO keyboards).  Produces GRAVE ACCENT and TILDE in a US Windows layout and in US and UK Mac layouts on ANSI keyboards, GRAVE ACCENT and NOT SIGN in a UK Windows layout, SECTION SIGN and PLUS-MINUS SIGN in US and UK Mac layouts on ISO keyboards, SECTION SIGN and DEGREE SIGN in a Swiss German layout (Mac: only on ISO keyboards), CIRCUMFLEX ACCENT and DEGREE SIGN in a German layout (Mac: only on ISO keyboards), SUPERSCRIPT TWO and TILDE in a French Windows layout, COMMERCIAL AT and NUMBER SIGN in a French Mac layout on ISO keyboards, and LESS-THAN SIGN and GREATER-THAN SIGN in a Swiss German, German, or French Mac layout on ANSI keyboards.",
              "name": "SDL_SCANCODE_GRAVE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_COMMA": {
              "doc": "",
              "name": "SDL_SCANCODE_COMMA",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PERIOD": {
              "doc": "",
              "name": "SDL_SCANCODE_PERIOD",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SLASH": {
              "doc": "",
              "name": "SDL_SCANCODE_SLASH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CAPSLOCK": {
              "doc": "",
              "name": "SDL_SCANCODE_CAPSLOCK",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F1": {
              "doc": "",
              "name": "SDL_SCANCODE_F1",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F2": {
              "doc": "",
              "name": "SDL_SCANCODE_F2",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F3": {
              "doc": "",
              "name": "SDL_SCANCODE_F3",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F4": {
              "doc": "",
              "name": "SDL_SCANCODE_F4",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F5": {
              "doc": "",
              "name": "SDL_SCANCODE_F5",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F6": {
              "doc": "",
              "name": "SDL_SCANCODE_F6",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F7": {
              "doc": "",
              "name": "SDL_SCANCODE_F7",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F8": {
              "doc": "",
              "name": "SDL_SCANCODE_F8",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F9": {
              "doc": "",
              "name": "SDL_SCANCODE_F9",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F10": {
              "doc": "",
              "name": "SDL_SCANCODE_F10",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F11": {
              "doc": "",
              "name": "SDL_SCANCODE_F11",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F12": {
              "doc": "",
              "name": "SDL_SCANCODE_F12",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PRINTSCREEN": {
              "doc": "",
              "name": "SDL_SCANCODE_PRINTSCREEN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SCROLLLOCK": {
              "doc": "",
              "name": "SDL_SCANCODE_SCROLLLOCK",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PAUSE": {
              "doc": "",
              "name": "SDL_SCANCODE_PAUSE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INSERT": {
              "doc": "insert on PC, help on some Mac keyboards (but does send code 73, not 117)",
              "name": "SDL_SCANCODE_INSERT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_HOME": {
              "doc": "",
              "name": "SDL_SCANCODE_HOME",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PAGEUP": {
              "doc": "",
              "name": "SDL_SCANCODE_PAGEUP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_DELETE": {
              "doc": "",
              "name": "SDL_SCANCODE_DELETE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_END": {
              "doc": "",
              "name": "SDL_SCANCODE_END",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PAGEDOWN": {
              "doc": "",
              "name": "SDL_SCANCODE_PAGEDOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RIGHT": {
              "doc": "",
              "name": "SDL_SCANCODE_RIGHT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LEFT": {
              "doc": "",
              "name": "SDL_SCANCODE_LEFT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_DOWN": {
              "doc": "",
              "name": "SDL_SCANCODE_DOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_UP": {
              "doc": "",
              "name": "SDL_SCANCODE_UP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_NUMLOCKCLEAR": {
              "doc": "num lock on PC, clear on Mac keyboards",
              "name": "SDL_SCANCODE_NUMLOCKCLEAR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_DIVIDE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_DIVIDE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MULTIPLY": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MULTIPLY",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MINUS": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MINUS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_PLUS": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_PLUS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_ENTER": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_ENTER",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_1": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_1",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_2": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_2",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_3": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_3",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_4": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_4",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_5": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_5",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_6": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_6",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_7": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_7",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_8": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_8",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_9": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_9",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_0": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_0",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_PERIOD": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_PERIOD",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_NONUSBACKSLASH": {
              "doc": "This is the additional key that ISO keyboards have over ANSI ones, located between left shift and Y.  Produces GRAVE ACCENT and TILDE in a US or UK Mac layout, REVERSE SOLIDUS (backslash) and VERTICAL LINE in a US or UK Windows layout, and LESS-THAN SIGN and GREATER-THAN SIGN in a Swiss German, German, or French layout.",
              "name": "SDL_SCANCODE_NONUSBACKSLASH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_APPLICATION": {
              "doc": "windows contextual menu, compose",
              "name": "SDL_SCANCODE_APPLICATION",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_POWER": {
              "doc": "The USB document says this is a status flag, not a physical key - but some Mac keyboards do have a power key.",
              "name": "SDL_SCANCODE_POWER",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_EQUALS": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_EQUALS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F13": {
              "doc": "",
              "name": "SDL_SCANCODE_F13",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F14": {
              "doc": "",
              "name": "SDL_SCANCODE_F14",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F15": {
              "doc": "",
              "name": "SDL_SCANCODE_F15",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F16": {
              "doc": "",
              "name": "SDL_SCANCODE_F16",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F17": {
              "doc": "",
              "name": "SDL_SCANCODE_F17",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F18": {
              "doc": "",
              "name": "SDL_SCANCODE_F18",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F19": {
              "doc": "",
              "name": "SDL_SCANCODE_F19",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F20": {
              "doc": "",
              "name": "SDL_SCANCODE_F20",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F21": {
              "doc": "",
              "name": "SDL_SCANCODE_F21",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F22": {
              "doc": "",
              "name": "SDL_SCANCODE_F22",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F23": {
              "doc": "",
              "name": "SDL_SCANCODE_F23",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_F24": {
              "doc": "",
              "name": "SDL_SCANCODE_F24",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_EXECUTE": {
              "doc": "",
              "name": "SDL_SCANCODE_EXECUTE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_HELP": {
              "doc": "AL Integrated Help Center.",
              "name": "SDL_SCANCODE_HELP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MENU": {
              "doc": "Menu (show menu)",
              "name": "SDL_SCANCODE_MENU",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SELECT": {
              "doc": "",
              "name": "SDL_SCANCODE_SELECT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_STOP": {
              "doc": "AC Stop.",
              "name": "SDL_SCANCODE_STOP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AGAIN": {
              "doc": "AC Redo/Repeat.",
              "name": "SDL_SCANCODE_AGAIN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_UNDO": {
              "doc": "AC Undo.",
              "name": "SDL_SCANCODE_UNDO",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CUT": {
              "doc": "AC Cut.",
              "name": "SDL_SCANCODE_CUT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_COPY": {
              "doc": "AC Copy.",
              "name": "SDL_SCANCODE_COPY",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PASTE": {
              "doc": "AC Paste.",
              "name": "SDL_SCANCODE_PASTE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_FIND": {
              "doc": "AC Find.",
              "name": "SDL_SCANCODE_FIND",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MUTE": {
              "doc": "",
              "name": "SDL_SCANCODE_MUTE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_VOLUMEUP": {
              "doc": "",
              "name": "SDL_SCANCODE_VOLUMEUP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_VOLUMEDOWN": {
              "doc": "",
              "name": "SDL_SCANCODE_VOLUMEDOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_COMMA": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_COMMA",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_EQUALSAS400": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_EQUALSAS400",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL1": {
              "doc": "used on Asian keyboards, see footnotes in USB doc",
              "name": "SDL_SCANCODE_INTERNATIONAL1",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL2": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL2",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL3": {
              "doc": "Yen.",
              "name": "SDL_SCANCODE_INTERNATIONAL3",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL4": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL4",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL5": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL5",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL6": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL6",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL7": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL7",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL8": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL8",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_INTERNATIONAL9": {
              "doc": "",
              "name": "SDL_SCANCODE_INTERNATIONAL9",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG1": {
              "doc": "Hangul/English toggle.",
              "name": "SDL_SCANCODE_LANG1",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG2": {
              "doc": "Hanja conversion.",
              "name": "SDL_SCANCODE_LANG2",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG3": {
              "doc": "Katakana.",
              "name": "SDL_SCANCODE_LANG3",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG4": {
              "doc": "Hiragana.",
              "name": "SDL_SCANCODE_LANG4",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG5": {
              "doc": "Zenkaku/Hankaku.",
              "name": "SDL_SCANCODE_LANG5",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG6": {
              "doc": "reserved",
              "name": "SDL_SCANCODE_LANG6",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG7": {
              "doc": "reserved",
              "name": "SDL_SCANCODE_LANG7",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG8": {
              "doc": "reserved",
              "name": "SDL_SCANCODE_LANG8",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LANG9": {
              "doc": "reserved",
              "name": "SDL_SCANCODE_LANG9",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_ALTERASE": {
              "doc": "Erase-Eaze.",
              "name": "SDL_SCANCODE_ALTERASE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SYSREQ": {
              "doc": "",
              "name": "SDL_SCANCODE_SYSREQ",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CANCEL": {
              "doc": "AC Cancel.",
              "name": "SDL_SCANCODE_CANCEL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CLEAR": {
              "doc": "",
              "name": "SDL_SCANCODE_CLEAR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_PRIOR": {
              "doc": "",
              "name": "SDL_SCANCODE_PRIOR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RETURN2": {
              "doc": "",
              "name": "SDL_SCANCODE_RETURN2",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SEPARATOR": {
              "doc": "",
              "name": "SDL_SCANCODE_SEPARATOR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_OUT": {
              "doc": "",
              "name": "SDL_SCANCODE_OUT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_OPER": {
              "doc": "",
              "name": "SDL_SCANCODE_OPER",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CLEARAGAIN": {
              "doc": "",
              "name": "SDL_SCANCODE_CLEARAGAIN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CRSEL": {
              "doc": "",
              "name": "SDL_SCANCODE_CRSEL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_EXSEL": {
              "doc": "",
              "name": "SDL_SCANCODE_EXSEL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_00": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_00",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_000": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_000",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_THOUSANDSSEPARATOR": {
              "doc": "",
              "name": "SDL_SCANCODE_THOUSANDSSEPARATOR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_DECIMALSEPARATOR": {
              "doc": "",
              "name": "SDL_SCANCODE_DECIMALSEPARATOR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CURRENCYUNIT": {
              "doc": "",
              "name": "SDL_SCANCODE_CURRENCYUNIT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CURRENCYSUBUNIT": {
              "doc": "",
              "name": "SDL_SCANCODE_CURRENCYSUBUNIT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_LEFTPAREN": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_LEFTPAREN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_RIGHTPAREN": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_RIGHTPAREN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_LEFTBRACE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_LEFTBRACE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_RIGHTBRACE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_RIGHTBRACE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_TAB": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_TAB",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_BACKSPACE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_BACKSPACE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_A": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_A",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_B": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_B",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_C": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_C",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_D": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_D",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_E": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_E",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_F": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_F",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_XOR": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_XOR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_POWER": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_POWER",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_PERCENT": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_PERCENT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_LESS": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_LESS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_GREATER": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_GREATER",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_AMPERSAND": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_AMPERSAND",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_DBLAMPERSAND": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_DBLAMPERSAND",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_VERTICALBAR": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_VERTICALBAR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_DBLVERTICALBAR": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_DBLVERTICALBAR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_COLON": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_COLON",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_HASH": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_HASH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_SPACE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_SPACE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_AT": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_AT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_EXCLAM": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_EXCLAM",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMSTORE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMSTORE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMRECALL": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMRECALL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMCLEAR": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMCLEAR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMADD": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMADD",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMSUBTRACT": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMSUBTRACT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMMULTIPLY": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMMULTIPLY",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_MEMDIVIDE": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_MEMDIVIDE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_PLUSMINUS": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_PLUSMINUS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_CLEAR": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_CLEAR",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_CLEARENTRY": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_CLEARENTRY",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_BINARY": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_BINARY",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_OCTAL": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_OCTAL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_DECIMAL": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_DECIMAL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_KP_HEXADECIMAL": {
              "doc": "",
              "name": "SDL_SCANCODE_KP_HEXADECIMAL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LCTRL": {
              "doc": "",
              "name": "SDL_SCANCODE_LCTRL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LSHIFT": {
              "doc": "",
              "name": "SDL_SCANCODE_LSHIFT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LALT": {
              "doc": "alt, option",
              "name": "SDL_SCANCODE_LALT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_LGUI": {
              "doc": "windows, command (apple), meta",
              "name": "SDL_SCANCODE_LGUI",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RCTRL": {
              "doc": "",
              "name": "SDL_SCANCODE_RCTRL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RSHIFT": {
              "doc": "",
              "name": "SDL_SCANCODE_RSHIFT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RALT": {
              "doc": "alt gr, option",
              "name": "SDL_SCANCODE_RALT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RGUI": {
              "doc": "windows, command (apple), meta",
              "name": "SDL_SCANCODE_RGUI",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MODE": {
              "doc": "I'm not sure if this is really not covered by any of the above, but since there's a special SDL_KMOD_MODE for it I'm adding it here.",
              "name": "SDL_SCANCODE_MODE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SLEEP": {
              "doc": "Sleep.",
              "name": "SDL_SCANCODE_SLEEP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_WAKE": {
              "doc": "Wake.",
              "name": "SDL_SCANCODE_WAKE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CHANNEL_INCREMENT": {
              "doc": "Channel Increment.",
              "name": "SDL_SCANCODE_CHANNEL_INCREMENT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CHANNEL_DECREMENT": {
              "doc": "Channel Decrement.",
              "name": "SDL_SCANCODE_CHANNEL_DECREMENT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_PLAY": {
              "doc": "Play.",
              "name": "SDL_SCANCODE_MEDIA_PLAY",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_PAUSE": {
              "doc": "Pause.",
              "name": "SDL_SCANCODE_MEDIA_PAUSE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_RECORD": {
              "doc": "Record.",
              "name": "SDL_SCANCODE_MEDIA_RECORD",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_FAST_FORWARD": {
              "doc": "Fast Forward.",
              "name": "SDL_SCANCODE_MEDIA_FAST_FORWARD",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_REWIND": {
              "doc": "Rewind.",
              "name": "SDL_SCANCODE_MEDIA_REWIND",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_NEXT_TRACK": {
              "doc": "Next Track.",
              "name": "SDL_SCANCODE_MEDIA_NEXT_TRACK",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_PREVIOUS_TRACK": {
              "doc": "Previous Track.",
              "name": "SDL_SCANCODE_MEDIA_PREVIOUS_TRACK",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_STOP": {
              "doc": "Stop.",
              "name": "SDL_SCANCODE_MEDIA_STOP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_EJECT": {
              "doc": "Eject.",
              "name": "SDL_SCANCODE_MEDIA_EJECT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_PLAY_PAUSE": {
              "doc": "Play / Pause.",
              "name": "SDL_SCANCODE_MEDIA_PLAY_PAUSE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_MEDIA_SELECT": {
              "doc": "",
              "name": "SDL_SCANCODE_MEDIA_SELECT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_NEW": {
              "doc": "AC New.",
              "name": "SDL_SCANCODE_AC_NEW",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_OPEN": {
              "doc": "AC Open.",
              "name": "SDL_SCANCODE_AC_OPEN",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_CLOSE": {
              "doc": "AC Close.",
              "name": "SDL_SCANCODE_AC_CLOSE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_EXIT": {
              "doc": "AC Exit.",
              "name": "SDL_SCANCODE_AC_EXIT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_SAVE": {
              "doc": "AC Save.",
              "name": "SDL_SCANCODE_AC_SAVE",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_PRINT": {
              "doc": "AC Print.",
              "name": "SDL_SCANCODE_AC_PRINT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_PROPERTIES": {
              "doc": "AC Properties.",
              "name": "SDL_SCANCODE_AC_PROPERTIES",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_SEARCH": {
              "doc": "AC Search.",
              "name": "SDL_SCANCODE_AC_SEARCH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_HOME": {
              "doc": "AC Home.",
              "name": "SDL_SCANCODE_AC_HOME",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_BACK": {
              "doc": "AC Back.",
              "name": "SDL_SCANCODE_AC_BACK",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_FORWARD": {
              "doc": "AC Forward.",
              "name": "SDL_SCANCODE_AC_FORWARD",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_STOP": {
              "doc": "AC Stop.",
              "name": "SDL_SCANCODE_AC_STOP",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_REFRESH": {
              "doc": "AC Refresh.",
              "name": "SDL_SCANCODE_AC_REFRESH",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_AC_BOOKMARKS": {
              "doc": "AC Bookmarks.",
              "name": "SDL_SCANCODE_AC_BOOKMARKS",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SOFTLEFT": {
              "doc": "Usually situated below the display on phones and used as a multi-function feature key for selecting a software defined function shown on the bottom left of the display.",
              "name": "SDL_SCANCODE_SOFTLEFT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_SOFTRIGHT": {
              "doc": "Usually situated below the display on phones and used as a multi-function feature key for selecting a software defined function shown on the bottom right of the display.",
              "name": "SDL_SCANCODE_SOFTRIGHT",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_CALL": {
              "doc": "Used for accepting phone calls.",
              "name": "SDL_SCANCODE_CALL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_ENDCALL": {
              "doc": "Used for rejecting phone calls.",
              "name": "SDL_SCANCODE_ENDCALL",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_RESERVED": {
              "doc": "400-500 reserved for dynamic keycodes",
              "name": "SDL_SCANCODE_RESERVED",
              "kind": "var",
              "type": ""
            },
            "SDL_SCANCODE_COUNT": {
              "doc": "not a key, just marks the number of scancodes for array bounds",
              "name": "SDL_SCANCODE_COUNT",
              "kind": "var",
              "type": ""
            }
          }
        }
      }
    },
    "SDL_mouse.h": {
      "name": "SDL_mouse.h",
      "doc": "# CategoryMouse\n\nAny GUI application has to deal with the mouse, and SDL provides functions\nto manage mouse input and the displayed cursor.\n\nMost interactions with the mouse will come through the event subsystem.\nMoving a mouse generates an SDL_EVENT_MOUSE_MOTION event, pushing a button\ngenerates SDL_EVENT_MOUSE_BUTTON_DOWN, etc, but one can also query the\ncurrent state of the mouse at any time with SDL_GetMouseState().\n\nFor certain games, it's useful to disassociate the mouse cursor from mouse\ninput. An FPS, for example, would not want the player's motion to stop as\nthe mouse hits the edge of the window. For these scenarios, use\nSDL_SetWindowRelativeMouseMode(), which hides the cursor, grabs mouse input\nto the window, and reads mouse input no matter how far it moves.\n\nGames that want the system to track the mouse but want to draw their own\ncursor can use SDL_HideCursor() and SDL_ShowCursor(). It might be more\nefficient to let the system manage the cursor, if possible, using\nSDL_SetCursor() with a custom image made through SDL_CreateColorCursor(),\nor perhaps just a specific system cursor from SDL_CreateSystemCursor().\n\nSDL can, on many platforms, differentiate between multiple connected mice,\nallowing for interesting input scenarios and multiplayer games. They can be\nenumerated with SDL_GetMice(), and SDL will send SDL_EVENT_MOUSE_ADDED and\nSDL_EVENT_MOUSE_REMOVED events as they are connected and unplugged.\n\nSince many apps only care about basic mouse input, SDL offers a virtual\nmouse device for touch and pen input, which often can make a desktop\napplication work on a touchscreen phone without any code changes. Apps that\ncare about touch/pen separately from mouse input should filter out events\nwith a `which` field of SDL_TOUCH_MOUSEID/SDL_PEN_MOUSEID.",
      "entries": {
        "SDL_MouseID": {
          "doc": "This is a unique ID for a mouse for the time it is connected to the system,\nand is never reused for the lifetime of the application.\n\nIf the mouse is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_MouseID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_Cursor": {
          "doc": "The structure used to identify an SDL cursor.\n\nThis is opaque data.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Cursor",
          "kind": "alias",
          "type": "struct SDL_Cursor"
        },
        "SDL_SystemCursor": {
          "doc": "Cursor types for SDL_CreateSystemCursor().\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_SystemCursor",
          "kind": "enum",
          "entries": {
            "SDL_SYSTEM_CURSOR_DEFAULT": {
              "doc": "Default cursor.  Usually an arrow.",
              "name": "SDL_SYSTEM_CURSOR_DEFAULT",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_TEXT": {
              "doc": "Text selection.  Usually an I-beam.",
              "name": "SDL_SYSTEM_CURSOR_TEXT",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_WAIT": {
              "doc": "Wait.  Usually an hourglass or watch or spinning ball.",
              "name": "SDL_SYSTEM_CURSOR_WAIT",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_CROSSHAIR": {
              "doc": "Crosshair.",
              "name": "SDL_SYSTEM_CURSOR_CROSSHAIR",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_PROGRESS": {
              "doc": "Program is busy but still interactive.  Usually it's WAIT with an arrow.",
              "name": "SDL_SYSTEM_CURSOR_PROGRESS",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_NWSE_RESIZE": {
              "doc": "Double arrow pointing northwest and southeast.",
              "name": "SDL_SYSTEM_CURSOR_NWSE_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_NESW_RESIZE": {
              "doc": "Double arrow pointing northeast and southwest.",
              "name": "SDL_SYSTEM_CURSOR_NESW_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_EW_RESIZE": {
              "doc": "Double arrow pointing west and east.",
              "name": "SDL_SYSTEM_CURSOR_EW_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_NS_RESIZE": {
              "doc": "Double arrow pointing north and south.",
              "name": "SDL_SYSTEM_CURSOR_NS_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_MOVE": {
              "doc": "Four pointed arrow pointing north, south, east, and west.",
              "name": "SDL_SYSTEM_CURSOR_MOVE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_NOT_ALLOWED": {
              "doc": "Not permitted.  Usually a slashed circle or crossbones.",
              "name": "SDL_SYSTEM_CURSOR_NOT_ALLOWED",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_POINTER": {
              "doc": "Pointer that indicates a link.  Usually a pointing hand.",
              "name": "SDL_SYSTEM_CURSOR_POINTER",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_NW_RESIZE": {
              "doc": "Window resize top-left.  This may be a single arrow or a double arrow like NWSE_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_NW_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_N_RESIZE": {
              "doc": "Window resize top.  May be NS_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_N_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_NE_RESIZE": {
              "doc": "Window resize top-right.  May be NESW_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_NE_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_E_RESIZE": {
              "doc": "Window resize right.  May be EW_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_E_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_SE_RESIZE": {
              "doc": "Window resize bottom-right.  May be NWSE_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_SE_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_S_RESIZE": {
              "doc": "Window resize bottom.  May be NS_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_S_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_SW_RESIZE": {
              "doc": "Window resize bottom-left.  May be NESW_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_SW_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_W_RESIZE": {
              "doc": "Window resize left.  May be EW_RESIZE.",
              "name": "SDL_SYSTEM_CURSOR_W_RESIZE",
              "kind": "var",
              "type": ""
            },
            "SDL_SYSTEM_CURSOR_COUNT": {
              "doc": "",
              "name": "SDL_SYSTEM_CURSOR_COUNT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_MouseWheelDirection": {
          "doc": "Scroll direction types for the Scroll event\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_MouseWheelDirection",
          "kind": "enum",
          "entries": {
            "SDL_MOUSEWHEEL_NORMAL": {
              "doc": "The scroll direction is normal.",
              "name": "SDL_MOUSEWHEEL_NORMAL",
              "kind": "var",
              "type": ""
            },
            "SDL_MOUSEWHEEL_FLIPPED": {
              "doc": "The scroll direction is flipped / natural.",
              "name": "SDL_MOUSEWHEEL_FLIPPED",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_MouseButtonFlags": {
          "doc": "A bitmask of pressed mouse buttons, as reported by SDL_GetMouseState, etc.\n\n- Button 1: Left mouse button\n- Button 2: Middle mouse button\n- Button 3: Right mouse button\n- Button 4: Side mouse button 1\n- Button 5: Side mouse button 2\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GetMouseState\n\\sa SDL_GetGlobalMouseState\n\\sa SDL_GetRelativeMouseState",
          "name": "SDL_MouseButtonFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_BUTTON_LEFT": {
          "doc": "",
          "name": "SDL_BUTTON_LEFT",
          "kind": "def",
          "value": "1"
        },
        "SDL_BUTTON_MIDDLE": {
          "doc": "",
          "name": "SDL_BUTTON_MIDDLE",
          "kind": "def",
          "value": "2"
        },
        "SDL_BUTTON_RIGHT": {
          "doc": "",
          "name": "SDL_BUTTON_RIGHT",
          "kind": "def",
          "value": "3"
        },
        "SDL_BUTTON_X1": {
          "doc": "",
          "name": "SDL_BUTTON_X1",
          "kind": "def",
          "value": "4"
        },
        "SDL_BUTTON_X2": {
          "doc": "",
          "name": "SDL_BUTTON_X2",
          "kind": "def",
          "value": "5"
        },
        "SDL_BUTTON_MASK": {
          "doc": "",
          "name": "SDL_BUTTON_MASK",
          "kind": "def",
          "parameters": [
            "X"
          ],
          "value": "(1u << ((X)-1))"
        },
        "SDL_BUTTON_LMASK": {
          "doc": "",
          "name": "SDL_BUTTON_LMASK",
          "kind": "def",
          "value": "SDL_BUTTON_MASK(SDL_BUTTON_LEFT)"
        },
        "SDL_BUTTON_MMASK": {
          "doc": "",
          "name": "SDL_BUTTON_MMASK",
          "kind": "def",
          "value": "SDL_BUTTON_MASK(SDL_BUTTON_MIDDLE)"
        },
        "SDL_BUTTON_RMASK": {
          "doc": "",
          "name": "SDL_BUTTON_RMASK",
          "kind": "def",
          "value": "SDL_BUTTON_MASK(SDL_BUTTON_RIGHT)"
        },
        "SDL_BUTTON_X1MASK": {
          "doc": "",
          "name": "SDL_BUTTON_X1MASK",
          "kind": "def",
          "value": "SDL_BUTTON_MASK(SDL_BUTTON_X1)"
        },
        "SDL_BUTTON_X2MASK": {
          "doc": "",
          "name": "SDL_BUTTON_X2MASK",
          "kind": "def",
          "value": "SDL_BUTTON_MASK(SDL_BUTTON_X2)"
        },
        "SDL_HasMouse": {
          "doc": "Return whether a mouse is currently connected.\n\n\\returns true if a mouse is connected, false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMice",
          "name": "SDL_HasMouse",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GetMice": {
          "doc": "Get a list of currently connected mice.\n\nNote that this will include any device or virtual driver that includes\nmouse functionality, including some game controllers, KVM switches, etc.\nYou should wait for input from a device before you consider it actively in\nuse.\n\n\\param count a pointer filled in with the number of mice returned, may be\n             NULL.\n\\returns a 0 terminated array of mouse instance IDs or NULL on failure;\n         call SDL_GetError() for more information. This should be freed\n         with SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMouseNameForID\n\\sa SDL_HasMouse",
          "name": "SDL_GetMice",
          "kind": "function",
          "type": "SDL_MouseID *",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetMouseNameForID": {
          "doc": "Get the name of a mouse.\n\nThis function returns \"\" if the mouse doesn't have a name.\n\n\\param instance_id the mouse instance ID.\n\\returns the name of the selected mouse, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMice",
          "name": "SDL_GetMouseNameForID",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "instance_id",
              "type": "SDL_MouseID"
            }
          ]
        },
        "SDL_GetMouseFocus": {
          "doc": "Get the window which currently has mouse focus.\n\n\\returns the window with mouse focus.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetMouseFocus",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": []
        },
        "SDL_GetMouseState": {
          "doc": "Query SDL's cache for the synchronous mouse button state and the\nwindow-relative SDL-cursor position.\n\nThis function returns the cached synchronous state as SDL understands it\nfrom the last pump of the event queue.\n\nTo query the platform for immediate asynchronous state, use\nSDL_GetGlobalMouseState.\n\nPassing non-NULL pointers to `x` or `y` will write the destination with\nrespective x or y coordinates relative to the focused window.\n\nIn Relative Mode, the SDL-cursor's position usually contradicts the\nplatform-cursor's position as manually calculated from\nSDL_GetGlobalMouseState() and SDL_GetWindowPosition.\n\n\\param x a pointer to receive the SDL-cursor's x-position from the focused\n         window's top left corner, can be NULL if unused.\n\\param y a pointer to receive the SDL-cursor's y-position from the focused\n         window's top left corner, can be NULL if unused.\n\\returns a 32-bit bitmask of the button state that can be bitwise-compared\n         against the SDL_BUTTON_MASK(X) macro.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetGlobalMouseState\n\\sa SDL_GetRelativeMouseState",
          "name": "SDL_GetMouseState",
          "kind": "function",
          "type": "SDL_MouseButtonFlags",
          "parameters": [
            {
              "name": "x",
              "type": "float *"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_GetGlobalMouseState": {
          "doc": "Query the platform for the asynchronous mouse button state and the\ndesktop-relative platform-cursor position.\n\nThis function immediately queries the platform for the most recent\nasynchronous state, more costly than retrieving SDL's cached state in\nSDL_GetMouseState().\n\nPassing non-NULL pointers to `x` or `y` will write the destination with\nrespective x or y coordinates relative to the desktop.\n\nIn Relative Mode, the platform-cursor's position usually contradicts the\nSDL-cursor's position as manually calculated from SDL_GetMouseState() and\nSDL_GetWindowPosition.\n\nThis function can be useful if you need to track the mouse outside of a\nspecific window and SDL_CaptureMouse() doesn't fit your needs. For example,\nit could be useful if you need to track the mouse while dragging a window,\nwhere coordinates relative to a window might not be in sync at all times.\n\n\\param x a pointer to receive the platform-cursor's x-position from the\n         desktop's top left corner, can be NULL if unused.\n\\param y a pointer to receive the platform-cursor's y-position from the\n         desktop's top left corner, can be NULL if unused.\n\\returns a 32-bit bitmask of the button state that can be bitwise-compared\n         against the SDL_BUTTON_MASK(X) macro.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CaptureMouse\n\\sa SDL_GetMouseState\n\\sa SDL_GetGlobalMouseState",
          "name": "SDL_GetGlobalMouseState",
          "kind": "function",
          "type": "SDL_MouseButtonFlags",
          "parameters": [
            {
              "name": "x",
              "type": "float *"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_GetRelativeMouseState": {
          "doc": "Query SDL's cache for the synchronous mouse button state and accumulated\nmouse delta since last call.\n\nThis function returns the cached synchronous state as SDL understands it\nfrom the last pump of the event queue.\n\nTo query the platform for immediate asynchronous state, use\nSDL_GetGlobalMouseState.\n\nPassing non-NULL pointers to `x` or `y` will write the destination with\nrespective x or y deltas accumulated since the last call to this function\n(or since event initialization).\n\nThis function is useful for reducing overhead by processing relative mouse\ninputs in one go per-frame instead of individually per-event, at the\nexpense of losing the order between events within the frame (e.g. quickly\npressing and releasing a button within the same frame).\n\n\\param x a pointer to receive the x mouse delta accumulated since last\n         call, can be NULL if unused.\n\\param y a pointer to receive the y mouse delta accumulated since last\n         call, can be NULL if unused.\n\\returns a 32-bit bitmask of the button state that can be bitwise-compared\n         against the SDL_BUTTON_MASK(X) macro.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMouseState\n\\sa SDL_GetGlobalMouseState",
          "name": "SDL_GetRelativeMouseState",
          "kind": "function",
          "type": "SDL_MouseButtonFlags",
          "parameters": [
            {
              "name": "x",
              "type": "float *"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_WarpMouseInWindow": {
          "doc": "Move the mouse cursor to the given position within the window.\n\nThis function generates a mouse motion event if relative mode is not\nenabled. If relative mode is enabled, you can force mouse events for the\nwarp by setting the SDL_HINT_MOUSE_RELATIVE_WARP_MOTION hint.\n\nNote that this function will appear to succeed, but not actually move the\nmouse when used over Microsoft Remote Desktop.\n\n\\param window the window to move the mouse into, or NULL for the current\n              mouse focus.\n\\param x the x coordinate within the window.\n\\param y the y coordinate within the window.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_WarpMouseGlobal",
          "name": "SDL_WarpMouseInWindow",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_WarpMouseGlobal": {
          "doc": "Move the mouse to the given position in global screen space.\n\nThis function generates a mouse motion event.\n\nA failure of this function usually means that it is unsupported by a\nplatform.\n\nNote that this function will appear to succeed, but not actually move the\nmouse when used over Microsoft Remote Desktop.\n\n\\param x the x coordinate.\n\\param y the y coordinate.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_WarpMouseInWindow",
          "name": "SDL_WarpMouseGlobal",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_SetWindowRelativeMouseMode": {
          "doc": "Set relative mouse mode for a window.\n\nWhile the window has focus and relative mouse mode is enabled, the cursor\nis hidden, the mouse position is constrained to the window, and SDL will\nreport continuous relative mouse motion even if the mouse is at the edge of\nthe window.\n\nIf you'd like to keep the mouse position fixed while in relative mode you\ncan use SDL_SetWindowMouseRect(). If you'd like the cursor to be at a\nspecific location when relative mode ends, you should use\nSDL_WarpMouseInWindow() before disabling relative mode.\n\nThis function will flush any pending mouse motion for this window.\n\n\\param window the window to change.\n\\param enabled true to enable relative mode, false to disable.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowRelativeMouseMode",
          "name": "SDL_SetWindowRelativeMouseMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_GetWindowRelativeMouseMode": {
          "doc": "Query whether relative mouse mode is enabled for a window.\n\n\\param window the window to query.\n\\returns true if relative mode is enabled for a window or false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowRelativeMouseMode",
          "name": "SDL_GetWindowRelativeMouseMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_CaptureMouse": {
          "doc": "Capture the mouse and to track input outside an SDL window.\n\nCapturing enables your app to obtain mouse events globally, instead of just\nwithin your window. Not all video targets support this function. When\ncapturing is enabled, the current window will get all mouse events, but\nunlike relative mode, no change is made to the cursor and it is not\nrestrained to your window.\n\nThis function may also deny mouse input to other windows--both those in\nyour application and others on the system--so you should use this function\nsparingly, and in small bursts. For example, you might want to track the\nmouse while the user is dragging something, until the user releases a mouse\nbutton. It is not recommended that you capture the mouse for long periods\nof time, such as the entire time your app is running. For that, you should\nprobably use SDL_SetWindowRelativeMouseMode() or SDL_SetWindowMouseGrab(),\ndepending on your goals.\n\nWhile captured, mouse events still report coordinates relative to the\ncurrent (foreground) window, but those coordinates may be outside the\nbounds of the window (including negative values). Capturing is only allowed\nfor the foreground window. If the window loses focus while capturing, the\ncapture will be disabled automatically.\n\nWhile capturing is enabled, the current window will have the\n`SDL_WINDOW_MOUSE_CAPTURE` flag set.\n\nPlease note that SDL will attempt to \"auto capture\" the mouse while the\nuser is pressing a button; this is to try and make mouse behavior more\nconsistent between platforms, and deal with the common case of a user\ndragging the mouse outside of the window. This means that if you are\ncalling SDL_CaptureMouse() only to deal with this situation, you do not\nhave to (although it is safe to do so). If this causes problems for your\napp, you can disable auto capture by setting the\n`SDL_HINT_MOUSE_AUTO_CAPTURE` hint to zero.\n\n\\param enabled true to enable capturing, false to disable.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetGlobalMouseState",
          "name": "SDL_CaptureMouse",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_CreateCursor": {
          "doc": "Create a cursor using the specified bitmap data and mask (in MSB format).\n\n`mask` has to be in MSB (Most Significant Bit) format.\n\nThe cursor width (`w`) must be a multiple of 8 bits.\n\nThe cursor is created in black and white according to the following:\n\n- data=0, mask=1: white\n- data=1, mask=1: black\n- data=0, mask=0: transparent\n- data=1, mask=0: inverted color if possible, black if not.\n\nCursors created with this function must be freed with SDL_DestroyCursor().\n\nIf you want to have a color cursor, or create your cursor from an\nSDL_Surface, you should use SDL_CreateColorCursor(). Alternately, you can\nhide the cursor and draw your own as part of your game's rendering, but it\nwill be bound to the framerate.\n\nAlso, SDL_CreateSystemCursor() is available, which provides several\nreadily-available system cursors to pick from.\n\n\\param data the color value for each pixel of the cursor.\n\\param mask the mask value for each pixel of the cursor.\n\\param w the width of the cursor.\n\\param h the height of the cursor.\n\\param hot_x the x-axis offset from the left of the cursor image to the\n             mouse x position, in the range of 0 to `w` - 1.\n\\param hot_y the y-axis offset from the top of the cursor image to the\n             mouse y position, in the range of 0 to `h` - 1.\n\\returns a new cursor with the specified parameters on success or NULL on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateColorCursor\n\\sa SDL_CreateSystemCursor\n\\sa SDL_DestroyCursor\n\\sa SDL_SetCursor",
          "name": "SDL_CreateCursor",
          "kind": "function",
          "type": "SDL_Cursor *",
          "parameters": [
            {
              "name": "data",
              "type": "const Uint8 *"
            },
            {
              "name": "mask",
              "type": "const Uint8 *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "hot_x",
              "type": "int"
            },
            {
              "name": "hot_y",
              "type": "int"
            }
          ]
        },
        "SDL_CreateColorCursor": {
          "doc": "Create a color cursor.\n\nIf this function is passed a surface with alternate representations, the\nsurface will be interpreted as the content to be used for 100% display\nscale, and the alternate representations will be used for high DPI\nsituations. For example, if the original surface is 32x32, then on a 2x\nmacOS display or 200% display scale on Windows, a 64x64 version of the\nimage will be used, if available. If a matching version of the image isn't\navailable, the closest larger size image will be downscaled to the\nappropriate size and be used instead, if available. Otherwise, the closest\nsmaller image will be upscaled and be used instead.\n\n\\param surface an SDL_Surface structure representing the cursor image.\n\\param hot_x the x position of the cursor hot spot.\n\\param hot_y the y position of the cursor hot spot.\n\\returns the new cursor on success or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateCursor\n\\sa SDL_CreateSystemCursor\n\\sa SDL_DestroyCursor\n\\sa SDL_SetCursor",
          "name": "SDL_CreateColorCursor",
          "kind": "function",
          "type": "SDL_Cursor *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "hot_x",
              "type": "int"
            },
            {
              "name": "hot_y",
              "type": "int"
            }
          ]
        },
        "SDL_CreateSystemCursor": {
          "doc": "Create a system cursor.\n\n\\param id an SDL_SystemCursor enum value.\n\\returns a cursor on success or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyCursor",
          "name": "SDL_CreateSystemCursor",
          "kind": "function",
          "type": "SDL_Cursor *",
          "parameters": [
            {
              "name": "id",
              "type": "SDL_SystemCursor"
            }
          ]
        },
        "SDL_SetCursor": {
          "doc": "Set the active cursor.\n\nThis function sets the currently active cursor to the specified one. If the\ncursor is currently visible, the change will be immediately represented on\nthe display. SDL_SetCursor(NULL) can be used to force cursor redraw, if\nthis is desired for any reason.\n\n\\param cursor a cursor to make active.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetCursor",
          "name": "SDL_SetCursor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "cursor",
              "type": "SDL_Cursor *"
            }
          ]
        },
        "SDL_GetCursor": {
          "doc": "Get the active cursor.\n\nThis function returns a pointer to the current cursor which is owned by the\nlibrary. It is not necessary to free the cursor with SDL_DestroyCursor().\n\n\\returns the active cursor or NULL if there is no mouse.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetCursor",
          "name": "SDL_GetCursor",
          "kind": "function",
          "type": "SDL_Cursor *",
          "parameters": []
        },
        "SDL_GetDefaultCursor": {
          "doc": "Get the default cursor.\n\nYou do not have to call SDL_DestroyCursor() on the return value, but it is\nsafe to do so.\n\n\\returns the default cursor on success or NULL on failuree; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDefaultCursor",
          "kind": "function",
          "type": "SDL_Cursor *",
          "parameters": []
        },
        "SDL_DestroyCursor": {
          "doc": "Free a previously-created cursor.\n\nUse this function to free cursor resources created with SDL_CreateCursor(),\nSDL_CreateColorCursor() or SDL_CreateSystemCursor().\n\n\\param cursor the cursor to free.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateColorCursor\n\\sa SDL_CreateCursor\n\\sa SDL_CreateSystemCursor",
          "name": "SDL_DestroyCursor",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "cursor",
              "type": "SDL_Cursor *"
            }
          ]
        },
        "SDL_ShowCursor": {
          "doc": "Show the cursor.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CursorVisible\n\\sa SDL_HideCursor",
          "name": "SDL_ShowCursor",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HideCursor": {
          "doc": "Hide the cursor.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CursorVisible\n\\sa SDL_ShowCursor",
          "name": "SDL_HideCursor",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_CursorVisible": {
          "doc": "Return whether the cursor is currently being shown.\n\n\\returns `true` if the cursor is being shown, or `false` if the cursor is\n         hidden.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HideCursor\n\\sa SDL_ShowCursor",
          "name": "SDL_CursorVisible",
          "kind": "function",
          "type": "bool",
          "parameters": []
        }
      }
    },
    "SDL_thread.h": {
      "name": "SDL_thread.h",
      "doc": "# CategoryThread\n\nSDL offers cross-platform thread management functions. These are mostly\nconcerned with starting threads, setting their priority, and dealing with\ntheir termination.\n\nIn addition, there is support for Thread Local Storage (data that is unique\nto each thread, but accessed from a single key).\n\nOn platforms without thread support (such as Emscripten when built without\npthreads), these functions still exist, but things like SDL_CreateThread()\nwill report failure without doing anything.\n\nIf you're going to work with threads, you almost certainly need to have a\ngood understanding of [CategoryMutex](CategoryMutex) as well.",
      "entries": {
        "SDL_Thread": {
          "doc": "The SDL thread object.\n\nThese are opaque data.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_CreateThread\n\\sa SDL_WaitThread",
          "name": "SDL_Thread",
          "kind": "alias",
          "type": "struct SDL_Thread"
        },
        "SDL_ThreadID": {
          "doc": "A unique numeric ID that identifies a thread.\n\nThese are different from SDL_Thread objects, which are generally what an\napplication will operate on, but having a way to uniquely identify a thread\ncan be useful at times.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GetThreadID\n\\sa SDL_GetCurrentThreadID",
          "name": "SDL_ThreadID",
          "kind": "alias",
          "type": "Uint64"
        },
        "SDL_TLSID": {
          "doc": "Thread local storage ID.\n\n0 is the invalid ID. An app can create these and then set data for these\nIDs that is unique to each thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GetTLS\n\\sa SDL_SetTLS",
          "name": "SDL_TLSID",
          "kind": "alias"
        },
        "SDL_ThreadPriority": {
          "doc": "The SDL thread priority.\n\nSDL will make system changes as necessary in order to apply the thread\npriority. Code which attempts to control thread state related to priority\nshould be aware that calling SDL_SetCurrentThreadPriority may alter such\nstate. SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of\nthis behavior.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ThreadPriority",
          "kind": "enum",
          "entries": {
            "SDL_THREAD_PRIORITY_LOW": {
              "doc": "",
              "name": "SDL_THREAD_PRIORITY_LOW",
              "kind": "var",
              "type": ""
            },
            "SDL_THREAD_PRIORITY_NORMAL": {
              "doc": "",
              "name": "SDL_THREAD_PRIORITY_NORMAL",
              "kind": "var",
              "type": ""
            },
            "SDL_THREAD_PRIORITY_HIGH": {
              "doc": "",
              "name": "SDL_THREAD_PRIORITY_HIGH",
              "kind": "var",
              "type": ""
            },
            "SDL_THREAD_PRIORITY_TIME_CRITICAL": {
              "doc": "",
              "name": "SDL_THREAD_PRIORITY_TIME_CRITICAL",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ThreadState": {
          "doc": "The SDL thread state.\n\nThe current state of a thread can be checked by calling SDL_GetThreadState.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_GetThreadState",
          "name": "SDL_ThreadState",
          "kind": "enum",
          "entries": {
            "SDL_THREAD_UNKNOWN": {
              "doc": "The thread is not valid.",
              "name": "SDL_THREAD_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_THREAD_ALIVE": {
              "doc": "The thread is currently running.",
              "name": "SDL_THREAD_ALIVE",
              "kind": "var",
              "type": ""
            },
            "SDL_THREAD_DETACHED": {
              "doc": "The thread is detached and can't be waited on.",
              "name": "SDL_THREAD_DETACHED",
              "kind": "var",
              "type": ""
            },
            "SDL_THREAD_COMPLETE": {
              "doc": "The thread has finished and should be cleaned up with SDL_WaitThread()",
              "name": "SDL_THREAD_COMPLETE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ThreadFunction": {
          "doc": "The function passed to SDL_CreateThread() as the new thread's entry point.\n\n\\param data what was passed as `data` to SDL_CreateThread().\n\\returns a value that can be reported through SDL_WaitThread().\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_ThreadFunction",
          "kind": "callback",
          "type": "int",
          "parameters": [
            {
              "name": "data",
              "type": "void *"
            }
          ]
        },
        "SDL_CreateThread": {
          "doc": "Create a new thread with a default stack size.\n\nThis is a convenience function, equivalent to calling\nSDL_CreateThreadWithProperties with the following properties set:\n\n- `SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER`: `fn`\n- `SDL_PROP_THREAD_CREATE_NAME_STRING`: `name`\n- `SDL_PROP_THREAD_CREATE_USERDATA_POINTER`: `data`\n\nNote that this \"function\" is actually a macro that calls an internal\nfunction with two extra parameters not listed here; they are hidden through\npreprocessor macros and are needed to support various C runtimes at the\npoint of the function call. Language bindings that aren't using the C\nheaders will need to deal with this.\n\nUsually, apps should just call this function the same way on every platform\nand let the macros hide the details.\n\n\\param fn the SDL_ThreadFunction function to call in the new thread.\n\\param name the name of the thread.\n\\param data a pointer that is passed to `fn`.\n\\returns an opaque pointer to the new thread object on success, NULL if the\n         new thread could not be created; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateThreadWithProperties\n\\sa SDL_WaitThread",
          "name": "SDL_CreateThread",
          "kind": "function",
          "type": "SDL_Thread *",
          "parameters": [
            {
              "name": "fn",
              "type": "SDL_ThreadFunction"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "data",
              "type": "void *"
            }
          ]
        },
        "SDL_CreateThreadWithProperties": {
          "doc": "Create a new thread with with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER`: an SDL_ThreadFunction\n  value that will be called at the start of the new thread's life.\n  Required.\n- `SDL_PROP_THREAD_CREATE_NAME_STRING`: the name of the new thread, which\n  might be available to debuggers. Optional, defaults to NULL.\n- `SDL_PROP_THREAD_CREATE_USERDATA_POINTER`: an arbitrary app-defined\n  pointer, which is passed to the entry function on the new thread, as its\n  only parameter. Optional, defaults to NULL.\n- `SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER`: the size, in bytes, of the new\n  thread's stack. Optional, defaults to 0 (system-defined default).\n\nSDL makes an attempt to report `SDL_PROP_THREAD_CREATE_NAME_STRING` to the\nsystem, so that debuggers can display it. Not all platforms support this.\n\nThread naming is a little complicated: Most systems have very small limits\nfor the string length (Haiku has 32 bytes, Linux currently has 16, Visual\nC++ 6.0 has _nine_!), and possibly other arbitrary rules. You'll have to\nsee what happens with your system's debugger. The name should be UTF-8 (but\nusing the naming limits of C identifiers is a better bet). There are no\nrequirements for thread naming conventions, so long as the string is\nnull-terminated UTF-8, but these guidelines are helpful in choosing a name:\n\nhttps://stackoverflow.com/questions/149932/naming-conventions-for-threads\n\nIf a system imposes requirements, SDL will try to munge the string for it\n(truncate, etc), but the original string contents will be available from\nSDL_GetThreadName().\n\nThe size (in bytes) of the new stack can be specified with\n`SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER`. Zero means \"use the system\ndefault\" which might be wildly different between platforms. x86 Linux\ngenerally defaults to eight megabytes, an embedded device might be a few\nkilobytes instead. You generally need to specify a stack that is a multiple\nof the system's page size (in many cases, this is 4 kilobytes, but check\nyour system documentation).\n\nNote that this \"function\" is actually a macro that calls an internal\nfunction with two extra parameters not listed here; they are hidden through\npreprocessor macros and are needed to support various C runtimes at the\npoint of the function call. Language bindings that aren't using the C\nheaders will need to deal with this.\n\nThe actual symbol in SDL is `SDL_CreateThreadWithPropertiesRuntime`, so\nthere is no symbol clash, but trying to load an SDL shared library and look\nfor \"SDL_CreateThreadWithProperties\" will fail.\n\nUsually, apps should just call this function the same way on every platform\nand let the macros hide the details.\n\n\\param props the properties to use.\n\\returns an opaque pointer to the new thread object on success, NULL if the\n         new thread could not be created; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateThread\n\\sa SDL_WaitThread",
          "name": "SDL_CreateThreadWithProperties",
          "kind": "function",
          "type": "SDL_Thread *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER": {
          "doc": "",
          "name": "SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER",
          "kind": "def",
          "value": "\"SDL.thread.create.entry_function\""
        },
        "SDL_PROP_THREAD_CREATE_NAME_STRING": {
          "doc": "",
          "name": "SDL_PROP_THREAD_CREATE_NAME_STRING",
          "kind": "def",
          "value": "\"SDL.thread.create.name\""
        },
        "SDL_PROP_THREAD_CREATE_USERDATA_POINTER": {
          "doc": "",
          "name": "SDL_PROP_THREAD_CREATE_USERDATA_POINTER",
          "kind": "def",
          "value": "\"SDL.thread.create.userdata\""
        },
        "SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER",
          "kind": "def",
          "value": "\"SDL.thread.create.stacksize\""
        },
        "SDL_GetThreadName": {
          "doc": "Get the thread name as it was specified in SDL_CreateThread().\n\n\\param thread the thread to query.\n\\returns a pointer to a UTF-8 string that names the specified thread, or\n         NULL if it doesn't have a name.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetThreadName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "thread",
              "type": "SDL_Thread *"
            }
          ]
        },
        "SDL_GetCurrentThreadID": {
          "doc": "Get the thread identifier for the current thread.\n\nThis thread identifier is as reported by the underlying operating system.\nIf SDL is running on a platform that does not support threads the return\nvalue will always be zero.\n\nThis function also returns a valid thread ID when called from the main\nthread.\n\n\\returns the ID of the current thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetThreadID",
          "name": "SDL_GetCurrentThreadID",
          "kind": "function",
          "type": "SDL_ThreadID",
          "parameters": []
        },
        "SDL_GetThreadID": {
          "doc": "Get the thread identifier for the specified thread.\n\nThis thread identifier is as reported by the underlying operating system.\nIf SDL is running on a platform that does not support threads the return\nvalue will always be zero.\n\n\\param thread the thread to query.\n\\returns the ID of the specified thread, or the ID of the current thread if\n         `thread` is NULL.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetCurrentThreadID",
          "name": "SDL_GetThreadID",
          "kind": "function",
          "type": "SDL_ThreadID",
          "parameters": [
            {
              "name": "thread",
              "type": "SDL_Thread *"
            }
          ]
        },
        "SDL_SetCurrentThreadPriority": {
          "doc": "Set the priority for the current thread.\n\nNote that some platforms will not let you alter the priority (or at least,\npromote the thread to a higher priority) at all, and some require you to be\nan administrator account. Be prepared for this to fail.\n\n\\param priority the SDL_ThreadPriority to set.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetCurrentThreadPriority",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "priority",
              "type": "SDL_ThreadPriority"
            }
          ]
        },
        "SDL_WaitThread": {
          "doc": "Wait for a thread to finish.\n\nThreads that haven't been detached will remain until this function cleans\nthem up. Not doing so is a resource leak.\n\nOnce a thread has been cleaned up through this function, the SDL_Thread\nthat references it becomes invalid and should not be referenced again. As\nsuch, only one thread may call SDL_WaitThread() on another.\n\nThe return code from the thread function is placed in the area pointed to\nby `status`, if `status` is not NULL.\n\nYou may not wait on a thread that has been used in a call to\nSDL_DetachThread(). Use either that function or this one, but not both, or\nbehavior is undefined.\n\nIt is safe to pass a NULL thread to this function; it is a no-op.\n\nNote that the thread pointer is freed by this function and is not valid\nafterward.\n\n\\param thread the SDL_Thread pointer that was returned from the\n              SDL_CreateThread() call that started this thread.\n\\param status a pointer filled in with the value returned from the thread\n              function by its 'return', or -1 if the thread has been\n              detached or isn't valid, may be NULL.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateThread\n\\sa SDL_DetachThread",
          "name": "SDL_WaitThread",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "thread",
              "type": "SDL_Thread *"
            },
            {
              "name": "status",
              "type": "int *"
            }
          ]
        },
        "SDL_GetThreadState": {
          "doc": "Get the current state of a thread.\n\n\\param thread the thread to query.\n\\returns the current state of a thread, or SDL_THREAD_UNKNOWN if the thread\n         isn't valid.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ThreadState",
          "name": "SDL_GetThreadState",
          "kind": "function",
          "type": "SDL_ThreadState",
          "parameters": [
            {
              "name": "thread",
              "type": "SDL_Thread *"
            }
          ]
        },
        "SDL_DetachThread": {
          "doc": "Let a thread clean up on exit without intervention.\n\nA thread may be \"detached\" to signify that it should not remain until\nanother thread has called SDL_WaitThread() on it. Detaching a thread is\nuseful for long-running threads that nothing needs to synchronize with or\nfurther manage. When a detached thread is done, it simply goes away.\n\nThere is no way to recover the return code of a detached thread. If you\nneed this, don't detach the thread and instead use SDL_WaitThread().\n\nOnce a thread is detached, you should usually assume the SDL_Thread isn't\nsafe to reference again, as it will become invalid immediately upon the\ndetached thread's exit, instead of remaining until someone has called\nSDL_WaitThread() to finally clean it up. As such, don't detach the same\nthread more than once.\n\nIf a thread has already exited when passed to SDL_DetachThread(), it will\nstop waiting for a call to SDL_WaitThread() and clean up immediately. It is\nnot safe to detach a thread that might be used with SDL_WaitThread().\n\nYou may not call SDL_WaitThread() on a thread that has been detached. Use\neither that function or this one, but not both, or behavior is undefined.\n\nIt is safe to pass NULL to this function; it is a no-op.\n\n\\param thread the SDL_Thread pointer that was returned from the\n              SDL_CreateThread() call that started this thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateThread\n\\sa SDL_WaitThread",
          "name": "SDL_DetachThread",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "thread",
              "type": "SDL_Thread *"
            }
          ]
        },
        "SDL_GetTLS": {
          "doc": "Get the current thread's value associated with a thread local storage ID.\n\n\\param id a pointer to the thread local storage ID, may not be NULL.\n\\returns the value associated with the ID for the current thread or NULL if\n         no value has been set; call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTLS",
          "name": "SDL_GetTLS",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "id",
              "type": "SDL_TLSID *"
            }
          ]
        },
        "SDL_TLSDestructorCallback": {
          "doc": "The callback used to cleanup data passed to SDL_SetTLS.\n\nThis is called when a thread exits, to allow an app to free any resources.\n\n\\param value a pointer previously handed to SDL_SetTLS.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetTLS",
          "name": "SDL_TLSDestructorCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "value",
              "type": "void *"
            }
          ]
        },
        "SDL_SetTLS": {
          "doc": "Set the current thread's value associated with a thread local storage ID.\n\nIf the thread local storage ID is not initialized (the value is 0), a new\nID will be created in a thread-safe way, so all calls using a pointer to\nthe same ID will refer to the same local storage.\n\nNote that replacing a value from a previous call to this function on the\nsame thread does _not_ call the previous value's destructor!\n\n`destructor` can be NULL; it is assumed that `value` does not need to be\ncleaned up if so.\n\n\\param id a pointer to the thread local storage ID, may not be NULL.\n\\param value the value to associate with the ID for the current thread.\n\\param destructor a function called when the thread exits, to free the\n                  value, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTLS",
          "name": "SDL_SetTLS",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "id",
              "type": "SDL_TLSID *"
            },
            {
              "name": "value",
              "type": "const void *"
            },
            {
              "name": "destructor",
              "type": "SDL_TLSDestructorCallback"
            }
          ]
        },
        "SDL_CleanupTLS": {
          "doc": "Cleanup all TLS data for this thread.\n\nIf you are creating your threads outside of SDL and then calling SDL\nfunctions, you should call this function before your thread exits, to\nproperly clean up SDL memory.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_CleanupTLS",
          "kind": "function",
          "type": "void",
          "parameters": []
        }
      }
    },
    "SDL_mutex.h": {
      "name": "SDL_mutex.h",
      "doc": "# CategoryMutex\n\nSDL offers several thread synchronization primitives. This document can't\ncover the complicated topic of thread safety, but reading up on what each\nof these primitives are, why they are useful, and how to correctly use them\nis vital to writing correct and safe multithreaded programs.\n\n- Mutexes: SDL_CreateMutex()\n- Read/Write locks: SDL_CreateRWLock()\n- Semaphores: SDL_CreateSemaphore()\n- Condition variables: SDL_CreateCondition()\n\nSDL also offers a datatype, SDL_InitState, which can be used to make sure\nonly one thread initializes/deinitializes some resource that several\nthreads might try to use for the first time simultaneously.",
      "entries": {
        "SDL_THREAD_ANNOTATION_ATTRIBUTE__": {
          "doc": "Enable thread safety attributes, only with clang.\n\nThe attributes can be safely erased when compiling with other compilers.\n\nTo enable analysis, set these environment variables before running cmake:\n\n```bash\nexport CC=clang\nexport CFLAGS=\"-DSDL_THREAD_SAFETY_ANALYSIS -Wthread-safety\"\n```",
          "name": "SDL_THREAD_ANNOTATION_ATTRIBUTE__",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "__attribute__((x))"
        },
        "SDL_CAPABILITY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_CAPABILITY",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(capability(x))"
        },
        "SDL_SCOPED_CAPABILITY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCOPED_CAPABILITY",
          "kind": "def",
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(scoped_lockable)"
        },
        "SDL_GUARDED_BY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_GUARDED_BY",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x))"
        },
        "SDL_PT_GUARDED_BY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PT_GUARDED_BY",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x))"
        },
        "SDL_ACQUIRED_BEFORE": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ACQUIRED_BEFORE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(x))"
        },
        "SDL_ACQUIRED_AFTER": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ACQUIRED_AFTER",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_after(x))"
        },
        "SDL_REQUIRES": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_REQUIRES",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_capability(x))"
        },
        "SDL_REQUIRES_SHARED": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_REQUIRES_SHARED",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_shared_capability(x))"
        },
        "SDL_ACQUIRE": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ACQUIRE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_capability(x))"
        },
        "SDL_ACQUIRE_SHARED": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ACQUIRE_SHARED",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_shared_capability(x))"
        },
        "SDL_RELEASE": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_RELEASE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_capability(x))"
        },
        "SDL_RELEASE_SHARED": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_RELEASE_SHARED",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_shared_capability(x))"
        },
        "SDL_RELEASE_GENERIC": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_RELEASE_GENERIC",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_generic_capability(x))"
        },
        "SDL_TRY_ACQUIRE": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_TRY_ACQUIRE",
          "kind": "def",
          "parameters": [
            "x",
            "y"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_capability(x, y))"
        },
        "SDL_TRY_ACQUIRE_SHARED": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_TRY_ACQUIRE_SHARED",
          "kind": "def",
          "parameters": [
            "x",
            "y"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_shared_capability(x, y))"
        },
        "SDL_EXCLUDES": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_EXCLUDES",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(locks_excluded(x))"
        },
        "SDL_ASSERT_CAPABILITY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ASSERT_CAPABILITY",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_capability(x))"
        },
        "SDL_ASSERT_SHARED_CAPABILITY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ASSERT_SHARED_CAPABILITY",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_shared_capability(x))"
        },
        "SDL_RETURN_CAPABILITY": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_RETURN_CAPABILITY",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x))"
        },
        "SDL_NO_THREAD_SAFETY_ANALYSIS": {
          "doc": "Wrapper around Clang thread safety analysis annotations.\n\nPlease see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NO_THREAD_SAFETY_ANALYSIS",
          "kind": "def",
          "value": "  SDL_THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)"
        },
        "SDL_Mutex": {
          "doc": "A means to serialize access to a resource between threads.\n\nMutexes (short for \"mutual exclusion\") are a synchronization primitive that\nallows exactly one thread to proceed at a time.\n\nWikipedia has a thorough explanation of the concept:\n\nhttps://en.wikipedia.org/wiki/Mutex\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Mutex",
          "kind": "alias",
          "type": "struct SDL_Mutex"
        },
        "SDL_CreateMutex": {
          "doc": "Create a new mutex.\n\nAll newly-created mutexes begin in the _unlocked_ state.\n\nCalls to SDL_LockMutex() will not return while the mutex is locked by\nanother thread. See SDL_TryLockMutex() to attempt to lock without blocking.\n\nSDL mutexes are reentrant.\n\n\\returns the initialized and unlocked mutex or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyMutex\n\\sa SDL_LockMutex\n\\sa SDL_TryLockMutex\n\\sa SDL_UnlockMutex",
          "name": "SDL_CreateMutex",
          "kind": "function",
          "type": "SDL_Mutex *",
          "parameters": []
        },
        "SDL_LockMutex": {
          "doc": "Lock the mutex.\n\nThis will block until the mutex is available, which is to say it is in the\nunlocked state and the OS has chosen the caller as the next thread to lock\nit. Of all threads waiting to lock the mutex, only one may do so at a time.\n\nIt is legal for the owning thread to lock an already-locked mutex. It must\nunlock it the same number of times before it is actually made available for\nother threads in the system (this is known as a \"recursive mutex\").\n\nThis function does not fail; if mutex is NULL, it will return immediately\nhaving locked nothing. If the mutex is valid, this function will always\nblock until it can lock the mutex, and return with it locked.\n\n\\param mutex the mutex to lock.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_TryLockMutex\n\\sa SDL_UnlockMutex",
          "name": "SDL_LockMutex",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "SDL_ACQUIRE(mutex",
              "type": "SDL_Mutex *mutex)"
            }
          ]
        },
        "SDL_TryLockMutex": {
          "doc": "Try to lock a mutex without blocking.\n\nThis works just like SDL_LockMutex(), but if the mutex is not available,\nthis function returns false immediately.\n\nThis technique is useful if you need exclusive access to a resource but\ndon't want to wait for it, and will return to it to try again later.\n\nThis function returns true if passed a NULL mutex.\n\n\\param mutex the mutex to try to lock.\n\\returns true on success, false if the mutex would block.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockMutex\n\\sa SDL_UnlockMutex",
          "name": "SDL_TryLockMutex",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "SDL_TRY_ACQUIRE(",
              "type": "SDL_Mutex *mutex)"
            }
          ]
        },
        "SDL_UnlockMutex": {
          "doc": "Unlock the mutex.\n\nIt is legal for the owning thread to lock an already-locked mutex. It must\nunlock it the same number of times before it is actually made available for\nother threads in the system (this is known as a \"recursive mutex\").\n\nIt is illegal to unlock a mutex that has not been locked by the current\nthread, and doing so results in undefined behavior.\n\n\\param mutex the mutex to unlock.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockMutex\n\\sa SDL_TryLockMutex",
          "name": "SDL_UnlockMutex",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "SDL_RELEASE(mutex",
              "type": "SDL_Mutex *mutex)"
            }
          ]
        },
        "SDL_DestroyMutex": {
          "doc": "Destroy a mutex created with SDL_CreateMutex().\n\nThis function must be called on any mutex that is no longer needed. Failure\nto destroy a mutex will result in a system memory or resource leak. While\nit is safe to destroy a mutex that is _unlocked_, it is not safe to attempt\nto destroy a locked mutex, and may result in undefined behavior depending\non the platform.\n\n\\param mutex the mutex to destroy.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateMutex",
          "name": "SDL_DestroyMutex",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mutex",
              "type": "SDL_Mutex *"
            }
          ]
        },
        "SDL_RWLock": {
          "doc": "A mutex that allows read-only threads to run in parallel.\n\nA rwlock is roughly the same concept as SDL_Mutex, but allows threads that\nrequest read-only access to all hold the lock at the same time. If a thread\nrequests write access, it will block until all read-only threads have\nreleased the lock, and no one else can hold the thread (for reading or\nwriting) at the same time as the writing thread.\n\nThis can be more efficient in cases where several threads need to access\ndata frequently, but changes to that data are rare.\n\nThere are other rules that apply to rwlocks that don't apply to mutexes,\nabout how threads are scheduled and when they can be recursively locked.\nThese are documented in the other rwlock functions.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_RWLock",
          "kind": "alias",
          "type": "struct SDL_RWLock"
        },
        "SDL_CreateRWLock": {
          "doc": "Create a new read/write lock.\n\nA read/write lock is useful for situations where you have multiple threads\ntrying to access a resource that is rarely updated. All threads requesting\na read-only lock will be allowed to run in parallel; if a thread requests a\nwrite lock, it will be provided exclusive access. This makes it safe for\nmultiple threads to use a resource at the same time if they promise not to\nchange it, and when it has to be changed, the rwlock will serve as a\ngateway to make sure those changes can be made safely.\n\nIn the right situation, a rwlock can be more efficient than a mutex, which\nonly lets a single thread proceed at a time, even if it won't be modifying\nthe data.\n\nAll newly-created read/write locks begin in the _unlocked_ state.\n\nCalls to SDL_LockRWLockForReading() and SDL_LockRWLockForWriting will not\nreturn while the rwlock is locked _for writing_ by another thread. See\nSDL_TryLockRWLockForReading() and SDL_TryLockRWLockForWriting() to attempt\nto lock without blocking.\n\nSDL read/write locks are only recursive for read-only locks! They are not\nguaranteed to be fair, or provide access in a FIFO manner! They are not\nguaranteed to favor writers. You may not lock a rwlock for both read-only\nand write access at the same time from the same thread (so you can't\npromote your read-only lock to a write lock without unlocking first).\n\n\\returns the initialized and unlocked read/write lock or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyRWLock\n\\sa SDL_LockRWLockForReading\n\\sa SDL_LockRWLockForWriting\n\\sa SDL_TryLockRWLockForReading\n\\sa SDL_TryLockRWLockForWriting\n\\sa SDL_UnlockRWLock",
          "name": "SDL_CreateRWLock",
          "kind": "function",
          "type": "SDL_RWLock *",
          "parameters": []
        },
        "SDL_LockRWLockForReading": {
          "doc": "Lock the read/write lock for _read only_ operations.\n\nThis will block until the rwlock is available, which is to say it is not\nlocked for writing by any other thread. Of all threads waiting to lock the\nrwlock, all may do so at the same time as long as they are requesting\nread-only access; if a thread wants to lock for writing, only one may do so\nat a time, and no other threads, read-only or not, may hold the lock at the\nsame time.\n\nIt is legal for the owning thread to lock an already-locked rwlock for\nreading. It must unlock it the same number of times before it is actually\nmade available for other threads in the system (this is known as a\n\"recursive rwlock\").\n\nNote that locking for writing is not recursive (this is only available to\nread-only locks).\n\nIt is illegal to request a read-only lock from a thread that already holds\nthe write lock. Doing so results in undefined behavior. Unlock the write\nlock before requesting a read-only lock. (But, of course, if you have the\nwrite lock, you don't need further locks to read in any case.)\n\nThis function does not fail; if rwlock is NULL, it will return immediately\nhaving locked nothing. If the rwlock is valid, this function will always\nblock until it can lock the mutex, and return with it locked.\n\n\\param rwlock the read/write lock to lock.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockRWLockForWriting\n\\sa SDL_TryLockRWLockForReading\n\\sa SDL_UnlockRWLock",
          "name": "SDL_LockRWLockForReading",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "SDL_ACQUIRE_SHARED(rwlock",
              "type": "SDL_RWLock *rwlock)"
            }
          ]
        },
        "SDL_LockRWLockForWriting": {
          "doc": "Lock the read/write lock for _write_ operations.\n\nThis will block until the rwlock is available, which is to say it is not\nlocked for reading or writing by any other thread. Only one thread may hold\nthe lock when it requests write access; all other threads, whether they\nalso want to write or only want read-only access, must wait until the\nwriter thread has released the lock.\n\nIt is illegal for the owning thread to lock an already-locked rwlock for\nwriting (read-only may be locked recursively, writing can not). Doing so\nresults in undefined behavior.\n\nIt is illegal to request a write lock from a thread that already holds a\nread-only lock. Doing so results in undefined behavior. Unlock the\nread-only lock before requesting a write lock.\n\nThis function does not fail; if rwlock is NULL, it will return immediately\nhaving locked nothing. If the rwlock is valid, this function will always\nblock until it can lock the mutex, and return with it locked.\n\n\\param rwlock the read/write lock to lock.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockRWLockForReading\n\\sa SDL_TryLockRWLockForWriting\n\\sa SDL_UnlockRWLock",
          "name": "SDL_LockRWLockForWriting",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "SDL_ACQUIRE(rwlock",
              "type": "SDL_RWLock *rwlock)"
            }
          ]
        },
        "SDL_TryLockRWLockForReading": {
          "doc": "Try to lock a read/write lock _for reading_ without blocking.\n\nThis works just like SDL_LockRWLockForReading(), but if the rwlock is not\navailable, then this function returns false immediately.\n\nThis technique is useful if you need access to a resource but don't want to\nwait for it, and will return to it to try again later.\n\nTrying to lock for read-only access can succeed if other threads are\nholding read-only locks, as this won't prevent access.\n\nThis function returns true if passed a NULL rwlock.\n\n\\param rwlock the rwlock to try to lock.\n\\returns true on success, false if the lock would block.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockRWLockForReading\n\\sa SDL_TryLockRWLockForWriting\n\\sa SDL_UnlockRWLock",
          "name": "SDL_TryLockRWLockForReading",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "SDL_TRY_ACQUIRE_SHARED(",
              "type": "SDL_RWLock *rwlock)"
            }
          ]
        },
        "SDL_TryLockRWLockForWriting": {
          "doc": "Try to lock a read/write lock _for writing_ without blocking.\n\nThis works just like SDL_LockRWLockForWriting(), but if the rwlock is not\navailable, then this function returns false immediately.\n\nThis technique is useful if you need exclusive access to a resource but\ndon't want to wait for it, and will return to it to try again later.\n\nIt is illegal for the owning thread to lock an already-locked rwlock for\nwriting (read-only may be locked recursively, writing can not). Doing so\nresults in undefined behavior.\n\nIt is illegal to request a write lock from a thread that already holds a\nread-only lock. Doing so results in undefined behavior. Unlock the\nread-only lock before requesting a write lock.\n\nThis function returns true if passed a NULL rwlock.\n\n\\param rwlock the rwlock to try to lock.\n\\returns true on success, false if the lock would block.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockRWLockForWriting\n\\sa SDL_TryLockRWLockForReading\n\\sa SDL_UnlockRWLock",
          "name": "SDL_TryLockRWLockForWriting",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "SDL_TRY_ACQUIRE(",
              "type": "SDL_RWLock *rwlock)"
            }
          ]
        },
        "SDL_UnlockRWLock": {
          "doc": "Unlock the read/write lock.\n\nUse this function to unlock the rwlock, whether it was locked for read-only\nor write operations.\n\nIt is legal for the owning thread to lock an already-locked read-only lock.\nIt must unlock it the same number of times before it is actually made\navailable for other threads in the system (this is known as a \"recursive\nrwlock\").\n\nIt is illegal to unlock a rwlock that has not been locked by the current\nthread, and doing so results in undefined behavior.\n\n\\param rwlock the rwlock to unlock.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockRWLockForReading\n\\sa SDL_LockRWLockForWriting\n\\sa SDL_TryLockRWLockForReading\n\\sa SDL_TryLockRWLockForWriting",
          "name": "SDL_UnlockRWLock",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "SDL_RELEASE_GENERIC(rwlock",
              "type": "SDL_RWLock *rwlock)"
            }
          ]
        },
        "SDL_DestroyRWLock": {
          "doc": "Destroy a read/write lock created with SDL_CreateRWLock().\n\nThis function must be called on any read/write lock that is no longer\nneeded. Failure to destroy a rwlock will result in a system memory or\nresource leak. While it is safe to destroy a rwlock that is _unlocked_, it\nis not safe to attempt to destroy a locked rwlock, and may result in\nundefined behavior depending on the platform.\n\n\\param rwlock the rwlock to destroy.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRWLock",
          "name": "SDL_DestroyRWLock",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "rwlock",
              "type": "SDL_RWLock *"
            }
          ]
        },
        "SDL_Semaphore": {
          "doc": "A means to manage access to a resource, by count, between threads.\n\nSemaphores (specifically, \"counting semaphores\"), let X number of threads\nrequest access at the same time, each thread granted access decrementing a\ncounter. When the counter reaches zero, future requests block until a prior\nthread releases their request, incrementing the counter again.\n\nWikipedia has a thorough explanation of the concept:\n\nhttps://en.wikipedia.org/wiki/Semaphore_(programming)\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Semaphore",
          "kind": "alias",
          "type": "struct SDL_Semaphore"
        },
        "SDL_CreateSemaphore": {
          "doc": "Create a semaphore.\n\nThis function creates a new semaphore and initializes it with the value\n`initial_value`. Each wait operation on the semaphore will atomically\ndecrement the semaphore value and potentially block if the semaphore value\nis 0. Each post operation will atomically increment the semaphore value and\nwake waiting threads and allow them to retry the wait operation.\n\n\\param initial_value the starting value of the semaphore.\n\\returns a new semaphore or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySemaphore\n\\sa SDL_SignalSemaphore\n\\sa SDL_TryWaitSemaphore\n\\sa SDL_GetSemaphoreValue\n\\sa SDL_WaitSemaphore\n\\sa SDL_WaitSemaphoreTimeout",
          "name": "SDL_CreateSemaphore",
          "kind": "function",
          "type": "SDL_Semaphore *",
          "parameters": [
            {
              "name": "initial_value",
              "type": "Uint32"
            }
          ]
        },
        "SDL_DestroySemaphore": {
          "doc": "Destroy a semaphore.\n\nIt is not safe to destroy a semaphore if there are threads currently\nwaiting on it.\n\n\\param sem the semaphore to destroy.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSemaphore",
          "name": "SDL_DestroySemaphore",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "sem",
              "type": "SDL_Semaphore *"
            }
          ]
        },
        "SDL_WaitSemaphore": {
          "doc": "Wait until a semaphore has a positive value and then decrements it.\n\nThis function suspends the calling thread until the semaphore pointed to by\n`sem` has a positive value, and then atomically decrement the semaphore\nvalue.\n\nThis function is the equivalent of calling SDL_WaitSemaphoreTimeout() with\na time length of -1.\n\n\\param sem the semaphore wait on.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SignalSemaphore\n\\sa SDL_TryWaitSemaphore\n\\sa SDL_WaitSemaphoreTimeout",
          "name": "SDL_WaitSemaphore",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "sem",
              "type": "SDL_Semaphore *"
            }
          ]
        },
        "SDL_TryWaitSemaphore": {
          "doc": "See if a semaphore has a positive value and decrement it if it does.\n\nThis function checks to see if the semaphore pointed to by `sem` has a\npositive value and atomically decrements the semaphore value if it does. If\nthe semaphore doesn't have a positive value, the function immediately\nreturns false.\n\n\\param sem the semaphore to wait on.\n\\returns true if the wait succeeds, false if the wait would block.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SignalSemaphore\n\\sa SDL_WaitSemaphore\n\\sa SDL_WaitSemaphoreTimeout",
          "name": "SDL_TryWaitSemaphore",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "sem",
              "type": "SDL_Semaphore *"
            }
          ]
        },
        "SDL_WaitSemaphoreTimeout": {
          "doc": "Wait until a semaphore has a positive value and then decrements it.\n\nThis function suspends the calling thread until either the semaphore\npointed to by `sem` has a positive value or the specified time has elapsed.\nIf the call is successful it will atomically decrement the semaphore value.\n\n\\param sem the semaphore to wait on.\n\\param timeoutMS the length of the timeout, in milliseconds, or -1 to wait\n                 indefinitely.\n\\returns true if the wait succeeds or false if the wait times out.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SignalSemaphore\n\\sa SDL_TryWaitSemaphore\n\\sa SDL_WaitSemaphore",
          "name": "SDL_WaitSemaphoreTimeout",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "sem",
              "type": "SDL_Semaphore *"
            },
            {
              "name": "timeoutMS",
              "type": "Sint32"
            }
          ]
        },
        "SDL_SignalSemaphore": {
          "doc": "Atomically increment a semaphore's value and wake waiting threads.\n\n\\param sem the semaphore to increment.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_TryWaitSemaphore\n\\sa SDL_WaitSemaphore\n\\sa SDL_WaitSemaphoreTimeout",
          "name": "SDL_SignalSemaphore",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "sem",
              "type": "SDL_Semaphore *"
            }
          ]
        },
        "SDL_GetSemaphoreValue": {
          "doc": "Get the current value of a semaphore.\n\n\\param sem the semaphore to query.\n\\returns the current value of the semaphore.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSemaphoreValue",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "sem",
              "type": "SDL_Semaphore *"
            }
          ]
        },
        "SDL_Condition": {
          "doc": "A means to block multiple threads until a condition is satisfied.\n\nCondition variables, paired with an SDL_Mutex, let an app halt multiple\nthreads until a condition has occurred, at which time the app can release\none or all waiting threads.\n\nWikipedia has a thorough explanation of the concept:\n\nhttps://en.wikipedia.org/wiki/Condition_variable\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Condition",
          "kind": "alias",
          "type": "struct SDL_Condition"
        },
        "SDL_CreateCondition": {
          "doc": "Create a condition variable.\n\n\\returns a new condition variable or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BroadcastCondition\n\\sa SDL_SignalCondition\n\\sa SDL_WaitCondition\n\\sa SDL_WaitConditionTimeout\n\\sa SDL_DestroyCondition",
          "name": "SDL_CreateCondition",
          "kind": "function",
          "type": "SDL_Condition *",
          "parameters": []
        },
        "SDL_DestroyCondition": {
          "doc": "Destroy a condition variable.\n\n\\param cond the condition variable to destroy.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateCondition",
          "name": "SDL_DestroyCondition",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "cond",
              "type": "SDL_Condition *"
            }
          ]
        },
        "SDL_SignalCondition": {
          "doc": "Restart one of the threads that are waiting on the condition variable.\n\n\\param cond the condition variable to signal.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BroadcastCondition\n\\sa SDL_WaitCondition\n\\sa SDL_WaitConditionTimeout",
          "name": "SDL_SignalCondition",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "cond",
              "type": "SDL_Condition *"
            }
          ]
        },
        "SDL_BroadcastCondition": {
          "doc": "Restart all threads that are waiting on the condition variable.\n\n\\param cond the condition variable to signal.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SignalCondition\n\\sa SDL_WaitCondition\n\\sa SDL_WaitConditionTimeout",
          "name": "SDL_BroadcastCondition",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "cond",
              "type": "SDL_Condition *"
            }
          ]
        },
        "SDL_WaitCondition": {
          "doc": "Wait until a condition variable is signaled.\n\nThis function unlocks the specified `mutex` and waits for another thread to\ncall SDL_SignalCondition() or SDL_BroadcastCondition() on the condition\nvariable `cond`. Once the condition variable is signaled, the mutex is\nre-locked and the function returns.\n\nThe mutex must be locked before calling this function. Locking the mutex\nrecursively (more than once) is not supported and leads to undefined\nbehavior.\n\nThis function is the equivalent of calling SDL_WaitConditionTimeout() with\na time length of -1.\n\n\\param cond the condition variable to wait on.\n\\param mutex the mutex used to coordinate thread access.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BroadcastCondition\n\\sa SDL_SignalCondition\n\\sa SDL_WaitConditionTimeout",
          "name": "SDL_WaitCondition",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "cond",
              "type": "SDL_Condition *"
            },
            {
              "name": "mutex",
              "type": "SDL_Mutex *"
            }
          ]
        },
        "SDL_WaitConditionTimeout": {
          "doc": "Wait until a condition variable is signaled or a certain time has passed.\n\nThis function unlocks the specified `mutex` and waits for another thread to\ncall SDL_SignalCondition() or SDL_BroadcastCondition() on the condition\nvariable `cond`, or for the specified time to elapse. Once the condition\nvariable is signaled or the time elapsed, the mutex is re-locked and the\nfunction returns.\n\nThe mutex must be locked before calling this function. Locking the mutex\nrecursively (more than once) is not supported and leads to undefined\nbehavior.\n\n\\param cond the condition variable to wait on.\n\\param mutex the mutex used to coordinate thread access.\n\\param timeoutMS the maximum time to wait, in milliseconds, or -1 to wait\n                 indefinitely.\n\\returns true if the condition variable is signaled, false if the condition\n         is not signaled in the allotted time.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BroadcastCondition\n\\sa SDL_SignalCondition\n\\sa SDL_WaitCondition",
          "name": "SDL_WaitConditionTimeout",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "cond",
              "type": "SDL_Condition *"
            },
            {
              "name": "mutex",
              "type": "SDL_Mutex *"
            },
            {
              "name": "timeoutMS",
              "type": "Sint32"
            }
          ]
        },
        "SDL_InitStatus": {
          "doc": "The current status of an SDL_InitState structure.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_InitStatus",
          "kind": "enum",
          "entries": {
            "SDL_INIT_STATUS_UNINITIALIZED": {
              "doc": "",
              "name": "SDL_INIT_STATUS_UNINITIALIZED",
              "kind": "var",
              "type": ""
            },
            "SDL_INIT_STATUS_INITIALIZING": {
              "doc": "",
              "name": "SDL_INIT_STATUS_INITIALIZING",
              "kind": "var",
              "type": ""
            },
            "SDL_INIT_STATUS_INITIALIZED": {
              "doc": "",
              "name": "SDL_INIT_STATUS_INITIALIZED",
              "kind": "var",
              "type": ""
            },
            "SDL_INIT_STATUS_UNINITIALIZING": {
              "doc": "",
              "name": "SDL_INIT_STATUS_UNINITIALIZING",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_InitState": {
          "doc": "A structure used for thread-safe initialization and shutdown.\n\nHere is an example of using this:\n\n```c\n   static SDL_AtomicInitState init;\n\n   bool InitSystem(void)\n   {\n       if (!SDL_ShouldInit(&init)) {\n           // The system is initialized\n           return true;\n       }\n\n       // At this point, you should not leave this function without calling SDL_SetInitialized()\n\n       bool initialized = DoInitTasks();\n       SDL_SetInitialized(&init, initialized);\n       return initialized;\n   }\n\n   bool UseSubsystem(void)\n   {\n       if (SDL_ShouldInit(&init)) {\n           // Error, the subsystem isn't initialized\n           SDL_SetInitialized(&init, false);\n           return false;\n       }\n\n       // Do work using the initialized subsystem\n\n       return true;\n   }\n\n   void QuitSystem(void)\n   {\n       if (!SDL_ShouldQuit(&init)) {\n           // The system is not initialized\n           return;\n       }\n\n       // At this point, you should not leave this function without calling SDL_SetInitialized()\n\n       DoQuitTasks();\n       SDL_SetInitialized(&init, false);\n   }\n```\n\nNote that this doesn't protect any resources created during initialization,\nor guarantee that nobody is using those resources during cleanup. You\nshould use other mechanisms to protect those, if that's a concern for your\ncode.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_InitState",
          "kind": "struct",
          "entries": {
            "status": {
              "doc": "",
              "name": "status",
              "kind": "var",
              "type": "SDL_AtomicInt"
            },
            "thread": {
              "doc": "",
              "name": "thread",
              "kind": "var",
              "type": "SDL_ThreadID"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "void *"
            }
          }
        },
        "SDL_ShouldInit": {
          "doc": "Return whether initialization should be done.\n\nThis function checks the passed in state and if initialization should be\ndone, sets the status to `SDL_INIT_STATUS_INITIALIZING` and returns true.\nIf another thread is already modifying this state, it will wait until\nthat's done before returning.\n\nIf this function returns true, the calling code must call\nSDL_SetInitialized() to complete the initialization.\n\n\\param state the initialization state to check.\n\\returns true if initialization needs to be done, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetInitialized\n\\sa SDL_ShouldQuit",
          "name": "SDL_ShouldInit",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "state",
              "type": "SDL_InitState *"
            }
          ]
        },
        "SDL_ShouldQuit": {
          "doc": "Return whether cleanup should be done.\n\nThis function checks the passed in state and if cleanup should be done,\nsets the status to `SDL_INIT_STATUS_UNINITIALIZING` and returns true.\n\nIf this function returns true, the calling code must call\nSDL_SetInitialized() to complete the cleanup.\n\n\\param state the initialization state to check.\n\\returns true if cleanup needs to be done, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetInitialized\n\\sa SDL_ShouldInit",
          "name": "SDL_ShouldQuit",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "state",
              "type": "SDL_InitState *"
            }
          ]
        },
        "SDL_SetInitialized": {
          "doc": "Finish an initialization state transition.\n\nThis function sets the status of the passed in state to\n`SDL_INIT_STATUS_INITIALIZED` or `SDL_INIT_STATUS_UNINITIALIZED` and allows\nany threads waiting for the status to proceed.\n\n\\param state the initialization state to check.\n\\param initialized the new initialization state.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ShouldInit\n\\sa SDL_ShouldQuit",
          "name": "SDL_SetInitialized",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "state",
              "type": "SDL_InitState *"
            },
            {
              "name": "initialized",
              "type": "bool"
            }
          ]
        }
      }
    },
    "SDL_atomic.h": {
      "name": "SDL_atomic.h",
      "doc": "# CategoryAtomic\n\nAtomic operations.\n\nIMPORTANT: If you are not an expert in concurrent lockless programming, you\nshould not be using any functions in this file. You should be protecting\nyour data structures with full mutexes instead.\n\n***Seriously, here be dragons!***\n\nYou can find out a little more about lockless programming and the subtle\nissues that can arise here:\nhttps://learn.microsoft.com/en-us/windows/win32/dxtecharts/lockless-programming\n\nThere's also lots of good information here:\n\n- https://www.1024cores.net/home/lock-free-algorithms\n- https://preshing.com/\n\nThese operations may or may not actually be implemented using processor\nspecific atomic operations. When possible they are implemented as true\nprocessor specific atomic operations. When that is not possible the are\nimplemented using locks that *do* use the available atomic operations.\n\nAll of the atomic operations that modify memory are full memory barriers.",
      "entries": {
        "SDL_SpinLock": {
          "doc": "An atomic spinlock.\n\nThe atomic locks are efficient spinlocks using CPU instructions, but are\nvulnerable to starvation and can spin forever if a thread holding a lock\nhas been terminated. For this reason you should minimize the code executed\ninside an atomic lock and never do expensive things like API or system\ncalls while holding them.\n\nThey are also vulnerable to starvation if the thread holding the lock is\nlower priority than other threads and doesn't get scheduled. In general you\nshould use mutexes instead, since they have better performance and\ncontention behavior.\n\nThe atomic locks are not safe to lock recursively.\n\nPorting Note: The spin lock functions and type are required and can not be\nemulated because they are used in the atomic emulation code.",
          "name": "SDL_SpinLock",
          "kind": "alias",
          "type": "int"
        },
        "SDL_TryLockSpinlock": {
          "doc": "Try to lock a spin lock by setting it to a non-zero value.\n\n***Please note that spinlocks are dangerous if you don't know what you're\ndoing. Please be careful using any sort of spinlock!***\n\n\\param lock a pointer to a lock variable.\n\\returns true if the lock succeeded, false if the lock is already held.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockSpinlock\n\\sa SDL_UnlockSpinlock",
          "name": "SDL_TryLockSpinlock",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "lock",
              "type": "SDL_SpinLock *"
            }
          ]
        },
        "SDL_LockSpinlock": {
          "doc": "Lock a spin lock by setting it to a non-zero value.\n\n***Please note that spinlocks are dangerous if you don't know what you're\ndoing. Please be careful using any sort of spinlock!***\n\n\\param lock a pointer to a lock variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_TryLockSpinlock\n\\sa SDL_UnlockSpinlock",
          "name": "SDL_LockSpinlock",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "lock",
              "type": "SDL_SpinLock *"
            }
          ]
        },
        "SDL_UnlockSpinlock": {
          "doc": "Unlock a spin lock by setting it to 0.\n\nAlways returns immediately.\n\n***Please note that spinlocks are dangerous if you don't know what you're\ndoing. Please be careful using any sort of spinlock!***\n\n\\param lock a pointer to a lock variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockSpinlock\n\\sa SDL_TryLockSpinlock",
          "name": "SDL_UnlockSpinlock",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "lock",
              "type": "SDL_SpinLock *"
            }
          ]
        },
        "SDL_CompilerBarrier": {
          "doc": "Mark a compiler barrier.\n\nA compiler barrier prevents the compiler from reordering reads and writes\nto globally visible variables across the call.\n\nThis macro only prevents the compiler from reordering reads and writes, it\ndoes not prevent the CPU from reordering reads and writes. However, all of\nthe atomic operations that modify memory are full memory barriers.\n\n\\threadsafety Obviously this macro is safe to use from any thread at any\n              time, but if you find yourself needing this, you are probably\n              dealing with some very sensitive code; be careful!\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_CompilerBarrier",
          "kind": "def",
          "parameters": [],
          "value": "DoCompilerSpecificReadWriteBarrier()"
        },
        "SDL_MemoryBarrierReleaseFunction": {
          "doc": "Insert a memory release barrier (function version).\n\nPlease refer to SDL_MemoryBarrierRelease for details. This is a function\nversion, which might be useful if you need to use this functionality from a\nscripting language, etc. Also, some of the macro versions call this\nfunction behind the scenes, where more heavy lifting can happen inside of\nSDL. Generally, though, an app written in C/C++/etc should use the macro\nversion, as it will be more efficient.\n\n\\threadsafety Obviously this function is safe to use from any thread at any\n              time, but if you find yourself needing this, you are probably\n              dealing with some very sensitive code; be careful!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MemoryBarrierRelease",
          "name": "SDL_MemoryBarrierReleaseFunction",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_MemoryBarrierAcquireFunction": {
          "doc": "Insert a memory acquire barrier (function version).\n\nPlease refer to SDL_MemoryBarrierRelease for details. This is a function\nversion, which might be useful if you need to use this functionality from a\nscripting language, etc. Also, some of the macro versions call this\nfunction behind the scenes, where more heavy lifting can happen inside of\nSDL. Generally, though, an app written in C/C++/etc should use the macro\nversion, as it will be more efficient.\n\n\\threadsafety Obviously this function is safe to use from any thread at any\n              time, but if you find yourself needing this, you are probably\n              dealing with some very sensitive code; be careful!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MemoryBarrierAcquire",
          "name": "SDL_MemoryBarrierAcquireFunction",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_MemoryBarrierRelease": {
          "doc": "Insert a memory release barrier (macro version).\n\nMemory barriers are designed to prevent reads and writes from being\nreordered by the compiler and being seen out of order on multi-core CPUs.\n\nA typical pattern would be for thread A to write some data and a flag, and\nfor thread B to read the flag and get the data. In this case you would\ninsert a release barrier between writing the data and the flag,\nguaranteeing that the data write completes no later than the flag is\nwritten, and you would insert an acquire barrier between reading the flag\nand reading the data, to ensure that all the reads associated with the flag\nhave completed.\n\nIn this pattern you should always see a release barrier paired with an\nacquire barrier and you should gate the data reads/writes with a single\nflag variable.\n\nFor more information on these semantics, take a look at the blog post:\nhttp://preshing.com/20120913/acquire-and-release-semantics\n\nThis is the macro version of this functionality; if possible, SDL will use\ncompiler intrinsics or inline assembly, but some platforms might need to\ncall the function version of this, SDL_MemoryBarrierReleaseFunction to do\nthe heavy lifting. Apps that can use the macro should favor it over the\nfunction.\n\n\\threadsafety Obviously this macro is safe to use from any thread at any\n              time, but if you find yourself needing this, you are probably\n              dealing with some very sensitive code; be careful!\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_MemoryBarrierAcquire\n\\sa SDL_MemoryBarrierReleaseFunction",
          "name": "SDL_MemoryBarrierRelease",
          "kind": "def",
          "parameters": [],
          "value": "SDL_MemoryBarrierReleaseFunction()"
        },
        "SDL_MemoryBarrierAcquire": {
          "doc": "Insert a memory acquire barrier (macro version).\n\nPlease see SDL_MemoryBarrierRelease for the details on what memory barriers\nare and when to use them.\n\nThis is the macro version of this functionality; if possible, SDL will use\ncompiler intrinsics or inline assembly, but some platforms might need to\ncall the function version of this, SDL_MemoryBarrierAcquireFunction, to do\nthe heavy lifting. Apps that can use the macro should favor it over the\nfunction.\n\n\\threadsafety Obviously this macro is safe to use from any thread at any\n              time, but if you find yourself needing this, you are probably\n              dealing with some very sensitive code; be careful!\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_MemoryBarrierRelease\n\\sa SDL_MemoryBarrierAcquireFunction",
          "name": "SDL_MemoryBarrierAcquire",
          "kind": "def",
          "parameters": [],
          "value": "SDL_MemoryBarrierAcquireFunction()"
        },
        "SDL_CPUPauseInstruction": {
          "doc": "A macro to insert a CPU-specific \"pause\" instruction into the program.\n\nThis can be useful in busy-wait loops, as it serves as a hint to the CPU as\nto the program's intent; some CPUs can use this to do more efficient\nprocessing. On some platforms, this doesn't do anything, so using this\nmacro might just be a harmless no-op.\n\nNote that if you are busy-waiting, there are often more-efficient\napproaches with other synchronization primitives: mutexes, semaphores,\ncondition variables, etc.\n\n\\threadsafety This macro is safe to use from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_CPUPauseInstruction",
          "kind": "def",
          "parameters": [],
          "value": "DoACPUPauseInACompilerAndArchitectureSpecificWay"
        },
        "SDL_AtomicInt": {
          "doc": "A type representing an atomic integer value.\n\nThis can be used to manage a value that is synchronized across multiple\nCPUs without a race condition; when an app sets a value with\nSDL_SetAtomicInt all other threads, regardless of the CPU it is running on,\nwill see that value when retrieved with SDL_GetAtomicInt, regardless of CPU\ncaches, etc.\n\nThis is also useful for atomic compare-and-swap operations: a thread can\nchange the value as long as its current value matches expectations. When\ndone in a loop, one can guarantee data consistency across threads without a\nlock (but the usual warnings apply: if you don't know what you're doing, or\nyou don't do it carefully, you can confidently cause any number of\ndisasters with this, so in most cases, you _should_ use a mutex instead of\nthis!).\n\nThis is a struct so people don't accidentally use numeric operations on it\ndirectly. You have to use SDL atomic functions.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicInt\n\\sa SDL_GetAtomicInt\n\\sa SDL_SetAtomicInt\n\\sa SDL_AddAtomicInt",
          "name": "SDL_AtomicInt",
          "kind": "struct",
          "entries": {
            "value": {
              "doc": "A type representing an atomic integer value.\n\nThis can be used to manage a value that is synchronized across multiple\nCPUs without a race condition; when an app sets a value with\nSDL_SetAtomicInt all other threads, regardless of the CPU it is running on,\nwill see that value when retrieved with SDL_GetAtomicInt, regardless of CPU\ncaches, etc.\n\nThis is also useful for atomic compare-and-swap operations: a thread can\nchange the value as long as its current value matches expectations. When\ndone in a loop, one can guarantee data consistency across threads without a\nlock (but the usual warnings apply: if you don't know what you're doing, or\nyou don't do it carefully, you can confidently cause any number of\ndisasters with this, so in most cases, you _should_ use a mutex instead of\nthis!).\n\nThis is a struct so people don't accidentally use numeric operations on it\ndirectly. You have to use SDL atomic functions.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicInt\n\\sa SDL_GetAtomicInt\n\\sa SDL_SetAtomicInt\n\\sa SDL_AddAtomicInt",
              "name": "value",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_CompareAndSwapAtomicInt": {
          "doc": "Set an atomic variable to a new value if it is currently an old value.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicInt variable to be modified.\n\\param oldval the old value.\n\\param newval the new value.\n\\returns true if the atomic variable was set, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAtomicInt\n\\sa SDL_SetAtomicInt",
          "name": "SDL_CompareAndSwapAtomicInt",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicInt *"
            },
            {
              "name": "oldval",
              "type": "int"
            },
            {
              "name": "newval",
              "type": "int"
            }
          ]
        },
        "SDL_SetAtomicInt": {
          "doc": "Set an atomic variable to a value.\n\nThis function also acts as a full memory barrier.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicInt variable to be modified.\n\\param v the desired value.\n\\returns the previous value of the atomic variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAtomicInt",
          "name": "SDL_SetAtomicInt",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicInt *"
            },
            {
              "name": "v",
              "type": "int"
            }
          ]
        },
        "SDL_GetAtomicInt": {
          "doc": "Get the value of an atomic variable.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicInt variable.\n\\returns the current value of an atomic variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAtomicInt",
          "name": "SDL_GetAtomicInt",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicInt *"
            }
          ]
        },
        "SDL_AddAtomicInt": {
          "doc": "Add to an atomic variable.\n\nThis function also acts as a full memory barrier.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicInt variable to be modified.\n\\param v the desired value to add.\n\\returns the previous value of the atomic variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AtomicDecRef\n\\sa SDL_AtomicIncRef",
          "name": "SDL_AddAtomicInt",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicInt *"
            },
            {
              "name": "v",
              "type": "int"
            }
          ]
        },
        "SDL_AtomicIncRef": {
          "doc": "Increment an atomic variable used as a reference count.\n\n***Note: If you don't know what this macro is for, you shouldn't use it!***\n\n\\param a a pointer to an SDL_AtomicInt to increment.\n\\returns the previous value of the atomic variable.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_AtomicDecRef",
          "name": "SDL_AtomicIncRef",
          "kind": "def",
          "parameters": [
            "a"
          ],
          "value": "SDL_AddAtomicInt(a, 1)"
        },
        "SDL_AtomicDecRef": {
          "doc": "Decrement an atomic variable used as a reference count.\n\n***Note: If you don't know what this macro is for, you shouldn't use it!***\n\n\\param a a pointer to an SDL_AtomicInt to decrement.\n\\returns true if the variable reached zero after decrementing, false\n         otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_AtomicIncRef",
          "name": "SDL_AtomicDecRef",
          "kind": "def",
          "parameters": [
            "a"
          ],
          "value": "(SDL_AddAtomicInt(a, -1) == 1)"
        },
        "SDL_AtomicU32": {
          "doc": "A type representing an atomic unsigned 32-bit value.\n\nThis can be used to manage a value that is synchronized across multiple\nCPUs without a race condition; when an app sets a value with\nSDL_SetAtomicU32 all other threads, regardless of the CPU it is running on,\nwill see that value when retrieved with SDL_GetAtomicU32, regardless of CPU\ncaches, etc.\n\nThis is also useful for atomic compare-and-swap operations: a thread can\nchange the value as long as its current value matches expectations. When\ndone in a loop, one can guarantee data consistency across threads without a\nlock (but the usual warnings apply: if you don't know what you're doing, or\nyou don't do it carefully, you can confidently cause any number of\ndisasters with this, so in most cases, you _should_ use a mutex instead of\nthis!).\n\nThis is a struct so people don't accidentally use numeric operations on it\ndirectly. You have to use SDL atomic functions.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicU32\n\\sa SDL_GetAtomicU32\n\\sa SDL_SetAtomicU32",
          "name": "SDL_AtomicU32",
          "kind": "struct",
          "entries": {
            "value": {
              "doc": "A type representing an atomic unsigned 32-bit value.\n\nThis can be used to manage a value that is synchronized across multiple\nCPUs without a race condition; when an app sets a value with\nSDL_SetAtomicU32 all other threads, regardless of the CPU it is running on,\nwill see that value when retrieved with SDL_GetAtomicU32, regardless of CPU\ncaches, etc.\n\nThis is also useful for atomic compare-and-swap operations: a thread can\nchange the value as long as its current value matches expectations. When\ndone in a loop, one can guarantee data consistency across threads without a\nlock (but the usual warnings apply: if you don't know what you're doing, or\nyou don't do it carefully, you can confidently cause any number of\ndisasters with this, so in most cases, you _should_ use a mutex instead of\nthis!).\n\nThis is a struct so people don't accidentally use numeric operations on it\ndirectly. You have to use SDL atomic functions.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicU32\n\\sa SDL_GetAtomicU32\n\\sa SDL_SetAtomicU32",
              "name": "value",
              "kind": "var",
              "type": "Uint32"
            }
          }
        },
        "SDL_CompareAndSwapAtomicU32": {
          "doc": "Set an atomic variable to a new value if it is currently an old value.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicU32 variable to be modified.\n\\param oldval the old value.\n\\param newval the new value.\n\\returns true if the atomic variable was set, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAtomicU32\n\\sa SDL_SetAtomicU32",
          "name": "SDL_CompareAndSwapAtomicU32",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicU32 *"
            },
            {
              "name": "oldval",
              "type": "Uint32"
            },
            {
              "name": "newval",
              "type": "Uint32"
            }
          ]
        },
        "SDL_SetAtomicU32": {
          "doc": "Set an atomic variable to a value.\n\nThis function also acts as a full memory barrier.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicU32 variable to be modified.\n\\param v the desired value.\n\\returns the previous value of the atomic variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAtomicU32",
          "name": "SDL_SetAtomicU32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicU32 *"
            },
            {
              "name": "v",
              "type": "Uint32"
            }
          ]
        },
        "SDL_GetAtomicU32": {
          "doc": "Get the value of an atomic variable.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to an SDL_AtomicU32 variable.\n\\returns the current value of an atomic variable.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetAtomicU32",
          "name": "SDL_GetAtomicU32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "a",
              "type": "SDL_AtomicU32 *"
            }
          ]
        },
        "SDL_CompareAndSwapAtomicPointer": {
          "doc": "Set a pointer to a new value if it is currently an old value.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to a pointer.\n\\param oldval the old pointer value.\n\\param newval the new pointer value.\n\\returns true if the pointer was set, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicInt\n\\sa SDL_GetAtomicPointer\n\\sa SDL_SetAtomicPointer",
          "name": "SDL_CompareAndSwapAtomicPointer",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "void **"
            },
            {
              "name": "oldval",
              "type": "void *"
            },
            {
              "name": "newval",
              "type": "void *"
            }
          ]
        },
        "SDL_SetAtomicPointer": {
          "doc": "Set a pointer to a value atomically.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to a pointer.\n\\param v the desired pointer value.\n\\returns the previous value of the pointer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicPointer\n\\sa SDL_GetAtomicPointer",
          "name": "SDL_SetAtomicPointer",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "a",
              "type": "void **"
            },
            {
              "name": "v",
              "type": "void *"
            }
          ]
        },
        "SDL_GetAtomicPointer": {
          "doc": "Get the value of a pointer atomically.\n\n***Note: If you don't know what this function is for, you shouldn't use\nit!***\n\n\\param a a pointer to a pointer.\n\\returns the current value of a pointer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CompareAndSwapAtomicPointer\n\\sa SDL_SetAtomicPointer",
          "name": "SDL_GetAtomicPointer",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "a",
              "type": "void **"
            }
          ]
        }
      }
    },
    "SDL_timer.h": {
      "name": "SDL_timer.h",
      "doc": "# CategoryTimer\n\nSDL provides time management functionality. It is useful for dealing with\n(usually) small durations of time.\n\nThis is not to be confused with _calendar time_ management, which is\nprovided by [CategoryTime](CategoryTime).\n\nThis category covers measuring time elapsed (SDL_GetTicks(),\nSDL_GetPerformanceCounter()), putting a thread to sleep for a certain\namount of time (SDL_Delay(), SDL_DelayNS(), SDL_DelayPrecise()), and firing\na callback function after a certain amount of time has elasped\n(SDL_AddTimer(), etc).\n\nThere are also useful macros to convert between time units, like\nSDL_SECONDS_TO_NS() and such.",
      "entries": {
        "SDL_MS_PER_SECOND": {
          "doc": "Number of milliseconds in a second.\n\nThis is always 1000.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MS_PER_SECOND",
          "kind": "def",
          "value": "1000"
        },
        "SDL_US_PER_SECOND": {
          "doc": "Number of microseconds in a second.\n\nThis is always 1000000.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_US_PER_SECOND",
          "kind": "def",
          "value": "1000000"
        },
        "SDL_NS_PER_SECOND": {
          "doc": "Number of nanoseconds in a second.\n\nThis is always 1000000000.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NS_PER_SECOND",
          "kind": "def",
          "value": "1000000000LL"
        },
        "SDL_NS_PER_MS": {
          "doc": "Number of nanoseconds in a millisecond.\n\nThis is always 1000000.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NS_PER_MS",
          "kind": "def",
          "value": "1000000"
        },
        "SDL_NS_PER_US": {
          "doc": "Number of nanoseconds in a microsecond.\n\nThis is always 1000.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NS_PER_US",
          "kind": "def",
          "value": "1000"
        },
        "SDL_SECONDS_TO_NS": {
          "doc": "Convert seconds to nanoseconds.\n\nThis only converts whole numbers, not fractional seconds.\n\n\\param S the number of seconds to convert.\n\\returns S, expressed in nanoseconds.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SECONDS_TO_NS",
          "kind": "def",
          "parameters": [
            "S"
          ],
          "value": "(((Uint64)(S)) * SDL_NS_PER_SECOND)"
        },
        "SDL_NS_TO_SECONDS": {
          "doc": "Convert nanoseconds to seconds.\n\nThis performs a division, so the results can be dramatically different if\n`NS` is an integer or floating point value.\n\n\\param NS the number of nanoseconds to convert.\n\\returns NS, expressed in seconds.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NS_TO_SECONDS",
          "kind": "def",
          "parameters": [
            "NS"
          ],
          "value": "((NS) / SDL_NS_PER_SECOND)"
        },
        "SDL_MS_TO_NS": {
          "doc": "Convert milliseconds to nanoseconds.\n\nThis only converts whole numbers, not fractional milliseconds.\n\n\\param MS the number of milliseconds to convert.\n\\returns MS, expressed in nanoseconds.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MS_TO_NS",
          "kind": "def",
          "parameters": [
            "MS"
          ],
          "value": "(((Uint64)(MS)) * SDL_NS_PER_MS)"
        },
        "SDL_NS_TO_MS": {
          "doc": "Convert nanoseconds to milliseconds.\n\nThis performs a division, so the results can be dramatically different if\n`NS` is an integer or floating point value.\n\n\\param NS the number of nanoseconds to convert.\n\\returns NS, expressed in milliseconds.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NS_TO_MS",
          "kind": "def",
          "parameters": [
            "NS"
          ],
          "value": "((NS) / SDL_NS_PER_MS)"
        },
        "SDL_US_TO_NS": {
          "doc": "Convert microseconds to nanoseconds.\n\nThis only converts whole numbers, not fractional microseconds.\n\n\\param US the number of microseconds to convert.\n\\returns US, expressed in nanoseconds.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_US_TO_NS",
          "kind": "def",
          "parameters": [
            "US"
          ],
          "value": "(((Uint64)(US)) * SDL_NS_PER_US)"
        },
        "SDL_NS_TO_US": {
          "doc": "Convert nanoseconds to microseconds.\n\nThis performs a division, so the results can be dramatically different if\n`NS` is an integer or floating point value.\n\n\\param NS the number of nanoseconds to convert.\n\\returns NS, expressed in microseconds.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NS_TO_US",
          "kind": "def",
          "parameters": [
            "NS"
          ],
          "value": "((NS) / SDL_NS_PER_US)"
        },
        "SDL_GetTicks": {
          "doc": "Get the number of milliseconds since SDL library initialization.\n\n\\returns an unsigned 64-bit value representing the number of milliseconds\n         since the SDL library initialized.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetTicks",
          "kind": "function",
          "type": "Uint64",
          "parameters": []
        },
        "SDL_GetTicksNS": {
          "doc": "Get the number of nanoseconds since SDL library initialization.\n\n\\returns an unsigned 64-bit value representing the number of nanoseconds\n         since the SDL library initialized.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetTicksNS",
          "kind": "function",
          "type": "Uint64",
          "parameters": []
        },
        "SDL_GetPerformanceCounter": {
          "doc": "Get the current value of the high resolution counter.\n\nThis function is typically used for profiling.\n\nThe counter values are only meaningful relative to each other. Differences\nbetween values can be converted to times by using\nSDL_GetPerformanceFrequency().\n\n\\returns the current counter value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPerformanceFrequency",
          "name": "SDL_GetPerformanceCounter",
          "kind": "function",
          "type": "Uint64",
          "parameters": []
        },
        "SDL_GetPerformanceFrequency": {
          "doc": "Get the count per second of the high resolution counter.\n\n\\returns a platform-specific count per second.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPerformanceCounter",
          "name": "SDL_GetPerformanceFrequency",
          "kind": "function",
          "type": "Uint64",
          "parameters": []
        },
        "SDL_Delay": {
          "doc": "Wait a specified number of milliseconds before returning.\n\nThis function waits a specified number of milliseconds before returning. It\nwaits at least the specified time, but possibly longer due to OS\nscheduling.\n\n\\param ms the number of milliseconds to delay.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DelayNS\n\\sa SDL_DelayPrecise",
          "name": "SDL_Delay",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "ms",
              "type": "Uint32"
            }
          ]
        },
        "SDL_DelayNS": {
          "doc": "Wait a specified number of nanoseconds before returning.\n\nThis function waits a specified number of nanoseconds before returning. It\nwaits at least the specified time, but possibly longer due to OS\nscheduling.\n\n\\param ns the number of nanoseconds to delay.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Delay\n\\sa SDL_DelayPrecise",
          "name": "SDL_DelayNS",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "ns",
              "type": "Uint64"
            }
          ]
        },
        "SDL_DelayPrecise": {
          "doc": "Wait a specified number of nanoseconds before returning.\n\nThis function waits a specified number of nanoseconds before returning. It\nwill attempt to wait as close to the requested time as possible, busy\nwaiting if necessary, but could return later due to OS scheduling.\n\n\\param ns the number of nanoseconds to delay.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_Delay\n\\sa SDL_DelayNS",
          "name": "SDL_DelayPrecise",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "ns",
              "type": "Uint64"
            }
          ]
        },
        "SDL_TimerID": {
          "doc": "Definition of the timer ID type.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_TimerID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_TimerCallback": {
          "doc": "Function prototype for the millisecond timer callback function.\n\nThe callback function is passed the current timer interval and returns the\nnext timer interval, in milliseconds. If the returned value is the same as\nthe one passed in, the periodic alarm continues, otherwise a new alarm is\nscheduled. If the callback returns 0, the periodic alarm is canceled and\nwill be removed.\n\n\\param userdata an arbitrary pointer provided by the app through\n                SDL_AddTimer, for its own use.\n\\param timerID the current timer being processed.\n\\param interval the current callback time interval.\n\\returns the new callback time interval, or 0 to disable further runs of\n         the callback.\n\n\\threadsafety SDL may call this callback at any time from a background\n              thread; the application is responsible for locking resources\n              the callback touches that need to be protected.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_AddTimer",
          "name": "SDL_TimerCallback",
          "kind": "callback",
          "type": "Uint32",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "timerID",
              "type": "SDL_TimerID"
            },
            {
              "name": "interval",
              "type": "Uint32"
            }
          ]
        },
        "SDL_AddTimer": {
          "doc": "Call a callback function at a future time.\n\nThe callback function is passed the current timer interval and the user\nsupplied parameter from the SDL_AddTimer() call and should return the next\ntimer interval. If the value returned from the callback is 0, the timer is\ncanceled and will be removed.\n\nThe callback is run on a separate thread, and for short timeouts can\npotentially be called before this function returns.\n\nTimers take into account the amount of time it took to execute the\ncallback. For example, if the callback took 250 ms to execute and returned\n1000 (ms), the timer would only wait another 750 ms before its next\niteration.\n\nTiming may be inexact due to OS scheduling. Be sure to note the current\ntime with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your\ncallback needs to adjust for variances.\n\n\\param interval the timer delay, in milliseconds, passed to `callback`.\n\\param callback the SDL_TimerCallback function to call when the specified\n                `interval` elapses.\n\\param userdata a pointer that is passed to `callback`.\n\\returns a timer ID or 0 on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddTimerNS\n\\sa SDL_RemoveTimer",
          "name": "SDL_AddTimer",
          "kind": "function",
          "type": "SDL_TimerID",
          "parameters": [
            {
              "name": "interval",
              "type": "Uint32"
            },
            {
              "name": "callback",
              "type": "SDL_TimerCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_NSTimerCallback": {
          "doc": "Function prototype for the nanosecond timer callback function.\n\nThe callback function is passed the current timer interval and returns the\nnext timer interval, in nanoseconds. If the returned value is the same as\nthe one passed in, the periodic alarm continues, otherwise a new alarm is\nscheduled. If the callback returns 0, the periodic alarm is canceled and\nwill be removed.\n\n\\param userdata an arbitrary pointer provided by the app through\n                SDL_AddTimer, for its own use.\n\\param timerID the current timer being processed.\n\\param interval the current callback time interval.\n\\returns the new callback time interval, or 0 to disable further runs of\n         the callback.\n\n\\threadsafety SDL may call this callback at any time from a background\n              thread; the application is responsible for locking resources\n              the callback touches that need to be protected.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_AddTimerNS",
          "name": "SDL_NSTimerCallback",
          "kind": "callback",
          "type": "Uint64",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "timerID",
              "type": "SDL_TimerID"
            },
            {
              "name": "interval",
              "type": "Uint64"
            }
          ]
        },
        "SDL_AddTimerNS": {
          "doc": "Call a callback function at a future time.\n\nThe callback function is passed the current timer interval and the user\nsupplied parameter from the SDL_AddTimerNS() call and should return the\nnext timer interval. If the value returned from the callback is 0, the\ntimer is canceled and will be removed.\n\nThe callback is run on a separate thread, and for short timeouts can\npotentially be called before this function returns.\n\nTimers take into account the amount of time it took to execute the\ncallback. For example, if the callback took 250 ns to execute and returned\n1000 (ns), the timer would only wait another 750 ns before its next\niteration.\n\nTiming may be inexact due to OS scheduling. Be sure to note the current\ntime with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your\ncallback needs to adjust for variances.\n\n\\param interval the timer delay, in nanoseconds, passed to `callback`.\n\\param callback the SDL_TimerCallback function to call when the specified\n                `interval` elapses.\n\\param userdata a pointer that is passed to `callback`.\n\\returns a timer ID or 0 on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddTimer\n\\sa SDL_RemoveTimer",
          "name": "SDL_AddTimerNS",
          "kind": "function",
          "type": "SDL_TimerID",
          "parameters": [
            {
              "name": "interval",
              "type": "Uint64"
            },
            {
              "name": "callback",
              "type": "SDL_NSTimerCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_RemoveTimer": {
          "doc": "Remove a timer created with SDL_AddTimer().\n\n\\param id the ID of the timer to remove.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddTimer",
          "name": "SDL_RemoveTimer",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "id",
              "type": "SDL_TimerID"
            }
          ]
        }
      }
    },
    "SDL_time.h": {
      "name": "SDL_time.h",
      "doc": "# CategoryTime\n\nSDL realtime clock and date/time routines.\n\nThere are two data types that are used in this category: SDL_Time, which\nrepresents the nanoseconds since a specific moment (an \"epoch\"), and\nSDL_DateTime, which breaks time down into human-understandable components:\nyears, months, days, hours, etc.\n\nMuch of the functionality is involved in converting those two types to\nother useful forms.",
      "entries": {
        "SDL_DateTime": {
          "doc": "A structure holding a calendar date and time broken down into its\ncomponents.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_DateTime",
          "kind": "struct",
          "entries": {
            "year": {
              "doc": "Year",
              "name": "year",
              "kind": "var",
              "type": "int"
            },
            "month": {
              "doc": "Month [01-12]",
              "name": "month",
              "kind": "var",
              "type": "int"
            },
            "day": {
              "doc": "Day of the month [01-31]",
              "name": "day",
              "kind": "var",
              "type": "int"
            },
            "hour": {
              "doc": "Hour [0-23]",
              "name": "hour",
              "kind": "var",
              "type": "int"
            },
            "minute": {
              "doc": "Minute [0-59]",
              "name": "minute",
              "kind": "var",
              "type": "int"
            },
            "second": {
              "doc": "Seconds [0-60]",
              "name": "second",
              "kind": "var",
              "type": "int"
            },
            "nanosecond": {
              "doc": "Nanoseconds [0-999999999]",
              "name": "nanosecond",
              "kind": "var",
              "type": "int"
            },
            "day_of_week": {
              "doc": "Day of the week [0-6] (0 being Sunday)",
              "name": "day_of_week",
              "kind": "var",
              "type": "int"
            },
            "utc_offset": {
              "doc": "Seconds east of UTC",
              "name": "utc_offset",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_DateFormat": {
          "doc": "The preferred date format of the current system locale.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_GetDateTimeLocalePreferences",
          "name": "SDL_DateFormat",
          "kind": "enum",
          "entries": {
            "SDL_DATE_FORMAT_YYYYMMDD": {
              "doc": "Year/Month/Day.",
              "name": "SDL_DATE_FORMAT_YYYYMMDD",
              "kind": "var",
              "type": ""
            },
            "SDL_DATE_FORMAT_DDMMYYYY": {
              "doc": "Day/Month/Year.",
              "name": "SDL_DATE_FORMAT_DDMMYYYY",
              "kind": "var",
              "type": ""
            },
            "SDL_DATE_FORMAT_MMDDYYYY": {
              "doc": "Month/Day/Year.",
              "name": "SDL_DATE_FORMAT_MMDDYYYY",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_TimeFormat": {
          "doc": "The preferred time format of the current system locale.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_GetDateTimeLocalePreferences",
          "name": "SDL_TimeFormat",
          "kind": "enum",
          "entries": {
            "SDL_TIME_FORMAT_24HR": {
              "doc": "24 hour time",
              "name": "SDL_TIME_FORMAT_24HR",
              "kind": "var",
              "type": ""
            },
            "SDL_TIME_FORMAT_12HR": {
              "doc": "12 hour time",
              "name": "SDL_TIME_FORMAT_12HR",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GetDateTimeLocalePreferences": {
          "doc": "Gets the current preferred date and time format for the system locale.\n\nThis might be a \"slow\" call that has to query the operating system. It's\nbest to ask for this once and save the results. However, the preferred\nformats can change, usually because the user has changed a system\npreference outside of your program.\n\n\\param dateFormat a pointer to the SDL_DateFormat to hold the returned date\n                  format, may be NULL.\n\\param timeFormat a pointer to the SDL_TimeFormat to hold the returned time\n                  format, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDateTimeLocalePreferences",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dateFormat",
              "type": "SDL_DateFormat *"
            },
            {
              "name": "timeFormat",
              "type": "SDL_TimeFormat *"
            }
          ]
        },
        "SDL_GetCurrentTime": {
          "doc": "Gets the current value of the system realtime clock in nanoseconds since\nJan 1, 1970 in Universal Coordinated Time (UTC).\n\n\\param ticks the SDL_Time to hold the returned tick count.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetCurrentTime",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "ticks",
              "type": "SDL_Time *"
            }
          ]
        },
        "SDL_TimeToDateTime": {
          "doc": "Converts an SDL_Time in nanoseconds since the epoch to a calendar time in\nthe SDL_DateTime format.\n\n\\param ticks the SDL_Time to be converted.\n\\param dt the resulting SDL_DateTime.\n\\param localTime the resulting SDL_DateTime will be expressed in local time\n                 if true, otherwise it will be in Universal Coordinated\n                 Time (UTC).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_TimeToDateTime",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "ticks",
              "type": "SDL_Time"
            },
            {
              "name": "dt",
              "type": "SDL_DateTime *"
            },
            {
              "name": "localTime",
              "type": "bool"
            }
          ]
        },
        "SDL_DateTimeToTime": {
          "doc": "Converts a calendar time to an SDL_Time in nanoseconds since the epoch.\n\nThis function ignores the day_of_week member of the SDL_DateTime struct, so\nit may remain unset.\n\n\\param dt the source SDL_DateTime.\n\\param ticks the resulting SDL_Time.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_DateTimeToTime",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dt",
              "type": "const SDL_DateTime *"
            },
            {
              "name": "ticks",
              "type": "SDL_Time *"
            }
          ]
        },
        "SDL_TimeToWindows": {
          "doc": "Converts an SDL time into a Windows FILETIME (100-nanosecond intervals\nsince January 1, 1601).\n\nThis function fills in the two 32-bit values of the FILETIME structure.\n\n\\param ticks the time to convert.\n\\param dwLowDateTime a pointer filled in with the low portion of the\n                     Windows FILETIME value.\n\\param dwHighDateTime a pointer filled in with the high portion of the\n                      Windows FILETIME value.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_TimeToWindows",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "ticks",
              "type": "SDL_Time"
            },
            {
              "name": "dwLowDateTime",
              "type": "Uint32 *"
            },
            {
              "name": "dwHighDateTime",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_TimeFromWindows": {
          "doc": "Converts a Windows FILETIME (100-nanosecond intervals since January 1,\n1601) to an SDL time.\n\nThis function takes the two 32-bit values of the FILETIME structure as\nparameters.\n\n\\param dwLowDateTime the low portion of the Windows FILETIME value.\n\\param dwHighDateTime the high portion of the Windows FILETIME value.\n\\returns the converted SDL time.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_TimeFromWindows",
          "kind": "function",
          "type": "SDL_Time",
          "parameters": [
            {
              "name": "dwLowDateTime",
              "type": "Uint32"
            },
            {
              "name": "dwHighDateTime",
              "type": "Uint32"
            }
          ]
        },
        "SDL_GetDaysInMonth": {
          "doc": "Get the number of days in a month for a given year.\n\n\\param year the year.\n\\param month the month [1-12].\n\\returns the number of days in the requested month or -1 on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDaysInMonth",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "year",
              "type": "int"
            },
            {
              "name": "month",
              "type": "int"
            }
          ]
        },
        "SDL_GetDayOfYear": {
          "doc": "Get the day of year for a calendar date.\n\n\\param year the year component of the date.\n\\param month the month component of the date.\n\\param day the day component of the date.\n\\returns the day of year [0-365] if the date is valid or -1 on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDayOfYear",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "year",
              "type": "int"
            },
            {
              "name": "month",
              "type": "int"
            },
            {
              "name": "day",
              "type": "int"
            }
          ]
        },
        "SDL_GetDayOfWeek": {
          "doc": "Get the day of week for a calendar date.\n\n\\param year the year component of the date.\n\\param month the month component of the date.\n\\param day the day component of the date.\n\\returns a value between 0 and 6 (0 being Sunday) if the date is valid or\n         -1 on failure; call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDayOfWeek",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "year",
              "type": "int"
            },
            {
              "name": "month",
              "type": "int"
            },
            {
              "name": "day",
              "type": "int"
            }
          ]
        }
      }
    },
    "SDL_filesystem.h": {
      "name": "SDL_filesystem.h",
      "doc": "# CategoryFilesystem\n\nSDL offers an API for examining and manipulating the system's filesystem.\nThis covers most things one would need to do with directories, except for\nactual file I/O (which is covered by [CategoryIOStream](CategoryIOStream)\nand [CategoryAsyncIO](CategoryAsyncIO) instead).\n\nThere are functions to answer necessary path questions:\n\n- Where is my app's data? SDL_GetBasePath().\n- Where can I safely write files? SDL_GetPrefPath().\n- Where are paths like Downloads, Desktop, Music? SDL_GetUserFolder().\n- What is this thing at this location? SDL_GetPathInfo().\n- What items live in this folder? SDL_EnumerateDirectory().\n- What items live in this folder by wildcard? SDL_GlobDirectory().\n- What is my current working directory? SDL_GetCurrentDirectory().\n\nSDL also offers functions to manipulate the directory tree: renaming,\nremoving, copying files.",
      "entries": {
        "SDL_GetBasePath": {
          "doc": "Get the directory where the application was run from.\n\nSDL caches the result of this call internally, but the first call to this\nfunction is not necessarily fast, so plan accordingly.\n\n**macOS and iOS Specific Functionality**: If the application is in a \".app\"\nbundle, this function returns the Resource directory (e.g.\nMyApp.app/Contents/Resources/). This behaviour can be overridden by adding\na property to the Info.plist file. Adding a string key with the name\nSDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the\nbehaviour.\n\nSupported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an\napplication in /Applications/SDLApp/MyApp.app):\n\n- `resource`: bundle resource directory (the default). For example:\n  `/Applications/SDLApp/MyApp.app/Contents/Resources`\n- `bundle`: the Bundle directory. For example:\n  `/Applications/SDLApp/MyApp.app/`\n- `parent`: the containing directory of the bundle. For example:\n  `/Applications/SDLApp/`\n\n**Nintendo 3DS Specific Functionality**: This function returns \"romfs\"\ndirectory of the application as it is uncommon to store resources outside\nthe executable. As such it is not a writable directory.\n\nThe returned path is guaranteed to end with a path separator ('\\\\' on\nWindows, '/' on most other platforms).\n\n\\returns an absolute path in UTF-8 encoding to the application data\n         directory. NULL will be returned on error or when the platform\n         doesn't implement this functionality, call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPrefPath",
          "name": "SDL_GetBasePath",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_GetPrefPath": {
          "doc": "Get the user-and-app-specific path where files can be written.\n\nGet the \"pref dir\". This is meant to be where users can write personal\nfiles (preferences and save games, etc) that are specific to your\napplication. This directory is unique per user, per application.\n\nThis function will decide the appropriate location in the native\nfilesystem, create the directory if necessary, and return a string of the\nabsolute path to the directory in UTF-8 encoding.\n\nOn Windows, the string might look like:\n\n`C:\\\\Users\\\\bob\\\\AppData\\\\Roaming\\\\My Company\\\\My Program Name\\\\`\n\nOn Linux, the string might look like:\n\n`/home/bob/.local/share/My Program Name/`\n\nOn macOS, the string might look like:\n\n`/Users/bob/Library/Application Support/My Program Name/`\n\nYou should assume the path returned by this function is the only safe place\nto write files (and that SDL_GetBasePath(), while it might be writable, or\neven the parent of the returned path, isn't where you should be writing\nthings).\n\nBoth the org and app strings may become part of a directory name, so please\nfollow these rules:\n\n- Try to use the same org string (_including case-sensitivity_) for all\n  your applications that use this function.\n- Always use a unique app string for each one, and make sure it never\n  changes for an app once you've decided on it.\n- Unicode characters are legal, as long as they are UTF-8 encoded, but...\n- ...only use letters, numbers, and spaces. Avoid punctuation like \"Game\n  Name 2: Bad Guy's Revenge!\" ... \"Game Name 2\" is sufficient.\n\nThe returned path is guaranteed to end with a path separator ('\\\\' on\nWindows, '/' on most other platforms).\n\n\\param org the name of your organization.\n\\param app the name of your application.\n\\returns a UTF-8 string of the user directory in platform-dependent\n         notation. NULL if there's a problem (creating directory failed,\n         etc.). This should be freed with SDL_free() when it is no longer\n         needed.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetBasePath",
          "name": "SDL_GetPrefPath",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "org",
              "type": "const char *"
            },
            {
              "name": "app",
              "type": "const char *"
            }
          ]
        },
        "SDL_Folder": {
          "doc": "The type of the OS-provided default folder for a specific purpose.\n\nNote that the Trash folder isn't included here, because trashing files\nusually involves extra OS-specific functionality to remember the file's\noriginal location.\n\nThe folders supported per platform are:\n\n|             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |\n| ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |\n| HOME        | X       | X         |      | X          | X     | X          |\n| DESKTOP     | X       | X         |      | X          | X     |            |\n| DOCUMENTS   | X       | X         |      | X          |       |            |\n| DOWNLOADS   | Vista+  | X         |      | X          |       |            |\n| MUSIC       | X       | X         |      | X          |       |            |\n| PICTURES    | X       | X         |      | X          |       |            |\n| PUBLICSHARE |         | X         |      | X          |       |            |\n| SAVEDGAMES  | Vista+  |           |      |            |       |            |\n| SCREENSHOTS | Vista+  |           |      |            |       |            |\n| TEMPLATES   | X       | X         |      | X          |       |            |\n| VIDEOS      | X       | X*        |      | X          |       |            |\n\nNote that on macOS/iOS, the Videos folder is called \"Movies\".\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_GetUserFolder",
          "name": "SDL_Folder",
          "kind": "enum",
          "entries": {
            "SDL_FOLDER_HOME": {
              "doc": "The folder which contains all of the current user's data, preferences, and documents.  It usually contains most of the other folders. If a requested folder does not exist, the home folder can be considered a safe fallback to store a user's documents.",
              "name": "SDL_FOLDER_HOME",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_DESKTOP": {
              "doc": "The folder of files that are displayed on the desktop.  Note that the existence of a desktop folder does not guarantee that the system does show icons on its desktop; certain GNU/Linux distros with a graphical environment may not have desktop icons.",
              "name": "SDL_FOLDER_DESKTOP",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_DOCUMENTS": {
              "doc": "User document files, possibly application-specific.  This is a good place to save a user's projects.",
              "name": "SDL_FOLDER_DOCUMENTS",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_DOWNLOADS": {
              "doc": "Standard folder for user files downloaded from the internet.",
              "name": "SDL_FOLDER_DOWNLOADS",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_MUSIC": {
              "doc": "Music files that can be played using a standard music player (mp3, ogg...).",
              "name": "SDL_FOLDER_MUSIC",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_PICTURES": {
              "doc": "Image files that can be displayed using a standard viewer (png, jpg...).",
              "name": "SDL_FOLDER_PICTURES",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_PUBLICSHARE": {
              "doc": "Files that are meant to be shared with other users on the same computer.",
              "name": "SDL_FOLDER_PUBLICSHARE",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_SAVEDGAMES": {
              "doc": "Save files for games.",
              "name": "SDL_FOLDER_SAVEDGAMES",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_SCREENSHOTS": {
              "doc": "Application screenshots.",
              "name": "SDL_FOLDER_SCREENSHOTS",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_TEMPLATES": {
              "doc": "Template files to be used when the user requests the desktop environment to create a new file in a certain folder, such as \"New Text File.txt\".  Any file in the Templates folder can be used as a starting point for a new file.",
              "name": "SDL_FOLDER_TEMPLATES",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_VIDEOS": {
              "doc": "Video files that can be played using a standard video player (mp4, webm...).",
              "name": "SDL_FOLDER_VIDEOS",
              "kind": "var",
              "type": ""
            },
            "SDL_FOLDER_COUNT": {
              "doc": "Total number of types in this enum, not a folder type by itself.",
              "name": "SDL_FOLDER_COUNT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GetUserFolder": {
          "doc": "Finds the most suitable user folder for a specific purpose.\n\nMany OSes provide certain standard folders for certain purposes, such as\nstoring pictures, music or videos for a certain user. This function gives\nthe path for many of those special locations.\n\nThis function is specifically for _user_ folders, which are meant for the\nuser to access and manage. For application-specific folders, meant to hold\ndata for the application to manage, see SDL_GetBasePath() and\nSDL_GetPrefPath().\n\nThe returned path is guaranteed to end with a path separator ('\\\\' on\nWindows, '/' on most other platforms).\n\nIf NULL is returned, the error may be obtained with SDL_GetError().\n\n\\param folder the type of folder to find.\n\\returns either a null-terminated C string containing the full path to the\n         folder, or NULL if an error happened.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetUserFolder",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "folder",
              "type": "SDL_Folder"
            }
          ]
        },
        "SDL_PathType": {
          "doc": "Types of filesystem entries.\n\nNote that there may be other sorts of items on a filesystem: devices,\nsymlinks, named pipes, etc. They are currently reported as\nSDL_PATHTYPE_OTHER.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_PathInfo",
          "name": "SDL_PathType",
          "kind": "enum",
          "entries": {
            "SDL_PATHTYPE_NONE": {
              "doc": "path does not exist",
              "name": "SDL_PATHTYPE_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_PATHTYPE_FILE": {
              "doc": "a normal file",
              "name": "SDL_PATHTYPE_FILE",
              "kind": "var",
              "type": ""
            },
            "SDL_PATHTYPE_DIRECTORY": {
              "doc": "a directory",
              "name": "SDL_PATHTYPE_DIRECTORY",
              "kind": "var",
              "type": ""
            },
            "SDL_PATHTYPE_OTHER": {
              "doc": "something completely different like a device node (not a symlink, those are always followed)",
              "name": "SDL_PATHTYPE_OTHER",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_PathInfo": {
          "doc": "Information about a path on the filesystem.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GetPathInfo\n\\sa SDL_GetStoragePathInfo",
          "name": "SDL_PathInfo",
          "kind": "struct",
          "entries": {
            "type": {
              "doc": "the path type",
              "name": "type",
              "kind": "var",
              "type": "SDL_PathType"
            },
            "size": {
              "doc": "the file size in bytes",
              "name": "size",
              "kind": "var",
              "type": "Uint64"
            },
            "create_time": {
              "doc": "the time when the path was created",
              "name": "create_time",
              "kind": "var",
              "type": "SDL_Time"
            },
            "modify_time": {
              "doc": "the last time the path was modified",
              "name": "modify_time",
              "kind": "var",
              "type": "SDL_Time"
            },
            "access_time": {
              "doc": "the last time the path was read",
              "name": "access_time",
              "kind": "var",
              "type": "SDL_Time"
            }
          }
        },
        "SDL_GlobFlags": {
          "doc": "Flags for path matching.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GlobDirectory\n\\sa SDL_GlobStorageDirectory",
          "name": "SDL_GlobFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GLOB_CASEINSENSITIVE": {
          "doc": "",
          "name": "SDL_GLOB_CASEINSENSITIVE",
          "kind": "def",
          "value": "(1u << 0)"
        },
        "SDL_CreateDirectory": {
          "doc": "Create a directory, and any missing parent directories.\n\nThis reports success if `path` already exists as a directory.\n\nIf parent directories are missing, it will also create them. Note that if\nthis fails, it will not remove any parent directories it already made.\n\n\\param path the path of the directory to create.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_CreateDirectory",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumerationResult": {
          "doc": "Possible results from an enumeration callback.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_EnumerateDirectoryCallback",
          "name": "SDL_EnumerationResult",
          "kind": "enum",
          "entries": {
            "SDL_ENUM_CONTINUE": {
              "doc": "Value that requests that enumeration continue.",
              "name": "SDL_ENUM_CONTINUE",
              "kind": "var",
              "type": ""
            },
            "SDL_ENUM_SUCCESS": {
              "doc": "Value that requests that enumeration stop, successfully.",
              "name": "SDL_ENUM_SUCCESS",
              "kind": "var",
              "type": ""
            },
            "SDL_ENUM_FAILURE": {
              "doc": "Value that requests that enumeration stop, as a failure.",
              "name": "SDL_ENUM_FAILURE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_EnumerateDirectoryCallback": {
          "doc": "Callback for directory enumeration.\n\nEnumeration of directory entries will continue until either all entries\nhave been provided to the callback, or the callback has requested a stop\nthrough its return value.\n\nReturning SDL_ENUM_CONTINUE will let enumeration proceed, calling the\ncallback with further entries. SDL_ENUM_SUCCESS and SDL_ENUM_FAILURE will\nterminate the enumeration early, and dictate the return value of the\nenumeration function itself.\n\n`dirname` is guaranteed to end with a path separator ('\\\\' on Windows, '/'\non most other platforms).\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\param dirname the directory that is being enumerated.\n\\param fname the next entry in the enumeration.\n\\returns how the enumeration should proceed.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EnumerateDirectory",
          "name": "SDL_EnumerateDirectoryCallback",
          "kind": "callback",
          "type": "SDL_EnumerationResult",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "dirname",
              "type": "const char *"
            },
            {
              "name": "fname",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumerateDirectory": {
          "doc": "Enumerate a directory through a callback function.\n\nThis function provides every directory entry through an app-provided\ncallback, called once for each directory entry, until all results have been\nprovided or the callback returns either SDL_ENUM_SUCCESS or\nSDL_ENUM_FAILURE.\n\nThis will return false if there was a system problem in general, or if a\ncallback returns SDL_ENUM_FAILURE. A successful return means a callback\nreturned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries\nwere enumerated.\n\n\\param path the path of the directory to enumerate.\n\\param callback a function that is called for each entry in the directory.\n\\param userdata a pointer that is passed to `callback`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EnumerateDirectory",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "callback",
              "type": "SDL_EnumerateDirectoryCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_RemovePath": {
          "doc": "Remove a file or an empty directory.\n\nDirectories that are not empty will fail; this function will not recursely\ndelete directory trees.\n\n\\param path the path to remove from the filesystem.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RemovePath",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_RenamePath": {
          "doc": "Rename a file or directory.\n\nIf the file at `newpath` already exists, it will replaced.\n\nNote that this will not copy files across filesystems/drives/volumes, as\nthat is a much more complicated (and possibly time-consuming) operation.\n\nWhich is to say, if this function fails, SDL_CopyFile() to a temporary file\nin the same directory as `newpath`, then SDL_RenamePath() from the\ntemporary file to `newpath` and SDL_RemovePath() on `oldpath` might work\nfor files. Renaming a non-empty directory across filesystems is\ndramatically more complex, however.\n\n\\param oldpath the old path.\n\\param newpath the new path.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RenamePath",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "oldpath",
              "type": "const char *"
            },
            {
              "name": "newpath",
              "type": "const char *"
            }
          ]
        },
        "SDL_CopyFile": {
          "doc": "Copy a file.\n\nIf the file at `newpath` already exists, it will be overwritten with the\ncontents of the file at `oldpath`.\n\nThis function will block until the copy is complete, which might be a\nsignificant time for large files on slow disks. On some platforms, the copy\ncan be handed off to the OS itself, but on others SDL might just open both\npaths, and read from one and write to the other.\n\nNote that this is not an atomic operation! If something tries to read from\n`newpath` while the copy is in progress, it will see an incomplete copy of\nthe data, and if the calling thread terminates (or the power goes out)\nduring the copy, `newpath`'s previous contents will be gone, replaced with\nan incomplete copy of the data. To avoid this risk, it is recommended that\nthe app copy to a temporary file in the same directory as `newpath`, and if\nthe copy is successful, use SDL_RenamePath() to replace `newpath` with the\ntemporary file. This will ensure that reads of `newpath` will either see a\ncomplete copy of the data, or it will see the pre-copy state of `newpath`.\n\nThis function attempts to synchronize the newly-copied data to disk before\nreturning, if the platform allows it, so that the renaming trick will not\nhave a problem in a system crash or power failure, where the file could be\nrenamed but the contents never made it from the system file cache to the\nphysical disk.\n\nIf the copy fails for any reason, the state of `newpath` is undefined. It\nmight be half a copy, it might be the untouched data of what was already\nthere, or it might be a zero-byte file, etc.\n\n\\param oldpath the old path.\n\\param newpath the new path.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_CopyFile",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "oldpath",
              "type": "const char *"
            },
            {
              "name": "newpath",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetPathInfo": {
          "doc": "Get information about a filesystem path.\n\n\\param path the path to query.\n\\param info a pointer filled in with information about the path, or NULL to\n            check for the existence of a file.\n\\returns true on success or false if the file doesn't exist, or another\n         failure; call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPathInfo",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "info",
              "type": "SDL_PathInfo *"
            }
          ]
        },
        "SDL_GlobDirectory": {
          "doc": "Enumerate a directory tree, filtered by pattern, and return a list.\n\nFiles are filtered out if they don't match the string in `pattern`, which\nmay contain wildcard characters '\\*' (match everything) and '?' (match one\ncharacter). If pattern is NULL, no filtering is done and all results are\nreturned. Subdirectories are permitted, and are specified with a path\nseparator of '/'. Wildcard characters '\\*' and '?' never match a path\nseparator.\n\n`flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching\ncase-insensitive.\n\nThe returned array is always NULL-terminated, for your iterating\nconvenience, but if `count` is non-NULL, on return it will contain the\nnumber of items in the array, not counting the NULL terminator.\n\n\\param path the path of the directory to enumerate.\n\\param pattern the pattern that files in the directory must match. Can be\n               NULL.\n\\param flags `SDL_GLOB_*` bitflags that affect this search.\n\\param count on return, will be set to the number of items in the returned\n             array. Can be NULL.\n\\returns an array of strings on success or NULL on failure; call\n         SDL_GetError() for more information. This is a single allocation\n         that should be freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GlobDirectory",
          "kind": "function",
          "type": "char **",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "pattern",
              "type": "const char *"
            },
            {
              "name": "flags",
              "type": "SDL_GlobFlags"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetCurrentDirectory": {
          "doc": "Get what the system believes is the \"current working directory.\"\n\nFor systems without a concept of a current working directory, this will\nstill attempt to provide something reasonable.\n\nSDL does not provide a means to _change_ the current working directory; for\nplatforms without this concept, this would cause surprises with file access\noutside of SDL.\n\nThe returned path is guaranteed to end with a path separator ('\\\\' on\nWindows, '/' on most other platforms).\n\n\\returns a UTF-8 string of the current working directory in\n         platform-dependent notation. NULL if there's a problem. This\n         should be freed with SDL_free() when it is no longer needed.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetCurrentDirectory",
          "kind": "function",
          "type": "char *",
          "parameters": []
        }
      }
    },
    "SDL_storage.h": {
      "name": "SDL_storage.h",
      "doc": "# CategoryStorage\n\nThe storage API is a high-level API designed to abstract away the\nportability issues that come up when using something lower-level (in SDL's\ncase, this sits on top of the [Filesystem](CategoryFilesystem) and\n[IOStream](CategoryIOStream) subsystems). It is significantly more\nrestrictive than a typical filesystem API, for a number of reasons:\n\n1. **What to Access:** A common pitfall with existing filesystem APIs is\nthe assumption that all storage is monolithic. However, many other\nplatforms (game consoles in particular) are more strict about what _type_\nof filesystem is being accessed; for example, game content and user data\nare usually two separate storage devices with entirely different\ncharacteristics (and possibly different low-level APIs altogether!).\n\n2. **How to Access:** Another common mistake is applications assuming that\nall storage is universally writeable - again, many platforms treat game\ncontent and user data as two separate storage devices, and only user data\nis writeable while game content is read-only.\n\n3. **When to Access:** The most common portability issue with filesystem\naccess is _timing_ - you cannot always assume that the storage device is\nalways accessible all of the time, nor can you assume that there are no\nlimits to how long you have access to a particular device.\n\nConsider the following example:\n\n```c\nvoid ReadGameData(void)\n{\n    extern char** fileNames;\n    extern size_t numFiles;\n    for (size_t i = 0; i < numFiles; i += 1) {\n        FILE *data = fopen(fileNames[i], \"rwb\");\n        if (data == NULL) {\n            // Something bad happened!\n        } else {\n            // A bunch of stuff happens here\n            fclose(data);\n        }\n    }\n}\n\nvoid ReadSave(void)\n{\n    FILE *save = fopen(\"saves/save0.sav\", \"rb\");\n    if (save == NULL) {\n        // Something bad happened!\n    } else {\n        // A bunch of stuff happens here\n        fclose(save);\n    }\n}\n\nvoid WriteSave(void)\n{\n    FILE *save = fopen(\"saves/save0.sav\", \"wb\");\n    if (save == NULL) {\n        // Something bad happened!\n    } else {\n        // A bunch of stuff happens here\n        fclose(save);\n    }\n}\n```\n\nGoing over the bullet points again:\n\n1. **What to Access:** This code accesses a global filesystem; game data\nand saves are all presumed to be in the current working directory (which\nmay or may not be the game's installation folder!).\n\n2. **How to Access:** This code assumes that content paths are writeable,\nand that save data is also writeable despite being in the same location as\nthe game data.\n\n3. **When to Access:** This code assumes that they can be called at any\ntime, since the filesystem is always accessible and has no limits on how\nlong the filesystem is being accessed.\n\nDue to these assumptions, the filesystem code is not portable and will fail\nunder these common scenarios:\n\n- The game is installed on a device that is read-only, both content loading\n  and game saves will fail or crash outright\n- Game/User storage is not implicitly mounted, so no files will be found\n  for either scenario when a platform requires explicitly mounting\n  filesystems\n- Save data may not be safe since the I/O is not being flushed or\n  validated, so an error occurring elsewhere in the program may result in\n  missing/corrupted save data\n\nWhen using SDL_Storage, these types of problems are virtually impossible to\ntrip over:\n\n```c\nvoid ReadGameData(void)\n{\n    extern char** fileNames;\n    extern size_t numFiles;\n\n    SDL_Storage *title = SDL_OpenTitleStorage(NULL, 0);\n    if (title == NULL) {\n        // Something bad happened!\n    }\n    while (!SDL_StorageReady(title)) {\n        SDL_Delay(1);\n    }\n\n    for (size_t i = 0; i < numFiles; i += 1) {\n        void* dst;\n        Uint64 dstLen = 0;\n\n        if (SDL_GetStorageFileSize(title, fileNames[i], &dstLen) && dstLen > 0) {\n            dst = SDL_malloc(dstLen);\n            if (SDL_ReadStorageFile(title, fileNames[i], dst, dstLen)) {\n                // A bunch of stuff happens here\n            } else {\n                // Something bad happened!\n            }\n            SDL_free(dst);\n        } else {\n            // Something bad happened!\n        }\n    }\n\n    SDL_CloseStorage(title);\n}\n\nvoid ReadSave(void)\n{\n    SDL_Storage *user = SDL_OpenUserStorage(\"libsdl\", \"Storage Example\", 0);\n    if (user == NULL) {\n        // Something bad happened!\n    }\n    while (!SDL_StorageReady(user)) {\n        SDL_Delay(1);\n    }\n\n    Uint64 saveLen = 0;\n    if (SDL_GetStorageFileSize(user, \"save0.sav\", &saveLen) && saveLen > 0) {\n        void* dst = SDL_malloc(saveLen);\n        if (SDL_ReadStorageFile(user, \"save0.sav\", dst, saveLen)) {\n            // A bunch of stuff happens here\n        } else {\n            // Something bad happened!\n        }\n        SDL_free(dst);\n    } else {\n        // Something bad happened!\n    }\n\n    SDL_CloseStorage(user);\n}\n\nvoid WriteSave(void)\n{\n    SDL_Storage *user = SDL_OpenUserStorage(\"libsdl\", \"Storage Example\", 0);\n    if (user == NULL) {\n        // Something bad happened!\n    }\n    while (!SDL_StorageReady(user)) {\n        SDL_Delay(1);\n    }\n\n    extern void *saveData; // A bunch of stuff happened here...\n    extern Uint64 saveLen;\n    if (!SDL_WriteStorageFile(user, \"save0.sav\", saveData, saveLen)) {\n        // Something bad happened!\n    }\n\n    SDL_CloseStorage(user);\n}\n```\n\nNote the improvements that SDL_Storage makes:\n\n1. **What to Access:** This code explicitly reads from a title or user\nstorage device based on the context of the function.\n\n2. **How to Access:** This code explicitly uses either a read or write\nfunction based on the context of the function.\n\n3. **When to Access:** This code explicitly opens the device when it needs\nto, and closes it when it is finished working with the filesystem.\n\nThe result is an application that is significantly more robust against the\nincreasing demands of platforms and their filesystems!\n\nA publicly available example of an SDL_Storage backend is the\n[Steam Cloud](https://partner.steamgames.com/doc/features/cloud)\nbackend - you can initialize Steamworks when starting the program, and then\nSDL will recognize that Steamworks is initialized and automatically use\nISteamRemoteStorage when the application opens user storage. More\nimportantly, when you _open_ storage it knows to begin a \"batch\" of\nfilesystem operations, and when you _close_ storage it knows to end and\nflush the batch. This is used by Steam to support\n[Dynamic Cloud Sync](https://steamcommunity.com/groups/steamworks/announcements/detail/3142949576401813670)\n; users can save data on one PC, put the device to sleep, and then continue\nplaying on another PC (and vice versa) with the save data fully\nsynchronized across all devices, allowing for a seamless experience without\nhaving to do full restarts of the program.\n\n## Notes on valid paths\n\nAll paths in the Storage API use Unix-style path separators ('/'). Using a\ndifferent path separator will not work, even if the underlying platform\nwould otherwise accept it. This is to keep code using the Storage API\nportable between platforms and Storage implementations and simplify app\ncode.\n\nPaths with relative directories (\".\" and \"..\") are forbidden by the Storage\nAPI.\n\nAll valid UTF-8 strings (discounting the NULL terminator character and the\n'/' path separator) are usable for filenames, however, an underlying\nStorage implementation may not support particularly strange sequences and\nrefuse to create files with those names, etc.",
      "entries": {
        "SDL_StorageInterface": {
          "doc": "Function interface for SDL_Storage.\n\nApps that want to supply a custom implementation of SDL_Storage will fill\nin all the functions in this struct, and then pass it to SDL_OpenStorage to\ncreate a custom SDL_Storage object.\n\nIt is not usually necessary to do this; SDL provides standard\nimplementations for many things you might expect to do with an SDL_Storage.\n\nThis structure should be initialized using SDL_INIT_INTERFACE()\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_INIT_INTERFACE",
          "name": "SDL_StorageInterface",
          "kind": "struct",
          "entries": {
            "version": {
              "doc": "",
              "name": "version",
              "kind": "var",
              "type": "Uint32"
            },
            "path": {
              "doc": "",
              "name": "path",
              "kind": "var",
              "type": "const char *"
            },
            "callback": {
              "doc": "",
              "name": "callback",
              "kind": "var",
              "type": "const char SDL_EnumerateDirectoryCallback"
            },
            "callback_userdata": {
              "doc": "",
              "name": "callback_userdata",
              "kind": "var",
              "type": "const char SDL_EnumerateDirectoryCallback void *"
            },
            "info": {
              "doc": "",
              "name": "info",
              "kind": "var",
              "type": "SDL_PathInfo"
            },
            "destination": {
              "doc": "",
              "name": "destination",
              "kind": "var",
              "type": "const char void *"
            },
            "length": {
              "doc": "",
              "name": "length",
              "kind": "var",
              "type": "const char const void Uint64"
            },
            "source": {
              "doc": "",
              "name": "source",
              "kind": "var",
              "type": "const char const void *"
            },
            "oldpath": {
              "doc": "",
              "name": "oldpath",
              "kind": "var",
              "type": "const char *"
            },
            "newpath": {
              "doc": "",
              "name": "newpath",
              "kind": "var",
              "type": "const char const char *"
            }
          }
        },
        "SDL_Storage": {
          "doc": "An abstract interface for filesystem access.\n\nThis is an opaque datatype. One can create this object using standard SDL\nfunctions like SDL_OpenTitleStorage or SDL_OpenUserStorage, etc, or create\nan object with a custom implementation using SDL_OpenStorage.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Storage",
          "kind": "alias",
          "type": "struct SDL_Storage"
        },
        "SDL_OpenTitleStorage": {
          "doc": "Opens up a read-only container for the application's filesystem.\n\n\\param override a path to override the backend's default title root.\n\\param props a property list that may contain backend-specific information.\n\\returns a title storage container on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseStorage\n\\sa SDL_GetStorageFileSize\n\\sa SDL_OpenUserStorage\n\\sa SDL_ReadStorageFile",
          "name": "SDL_OpenTitleStorage",
          "kind": "function",
          "type": "SDL_Storage *",
          "parameters": [
            {
              "name": "override",
              "type": "const char *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_OpenUserStorage": {
          "doc": "Opens up a container for a user's unique read/write filesystem.\n\nWhile title storage can generally be kept open throughout runtime, user\nstorage should only be opened when the client is ready to read/write files.\nThis allows the backend to properly batch file operations and flush them\nwhen the container has been closed; ensuring safe and optimal save I/O.\n\n\\param org the name of your organization.\n\\param app the name of your application.\n\\param props a property list that may contain backend-specific information.\n\\returns a user storage container on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseStorage\n\\sa SDL_GetStorageFileSize\n\\sa SDL_GetStorageSpaceRemaining\n\\sa SDL_OpenTitleStorage\n\\sa SDL_ReadStorageFile\n\\sa SDL_StorageReady\n\\sa SDL_WriteStorageFile",
          "name": "SDL_OpenUserStorage",
          "kind": "function",
          "type": "SDL_Storage *",
          "parameters": [
            {
              "name": "org",
              "type": "const char *"
            },
            {
              "name": "app",
              "type": "const char *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_OpenFileStorage": {
          "doc": "Opens up a container for local filesystem storage.\n\nThis is provided for development and tools. Portable applications should\nuse SDL_OpenTitleStorage() for access to game data and\nSDL_OpenUserStorage() for access to user data.\n\n\\param path the base path prepended to all storage paths, or NULL for no\n            base path.\n\\returns a filesystem storage container on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseStorage\n\\sa SDL_GetStorageFileSize\n\\sa SDL_GetStorageSpaceRemaining\n\\sa SDL_OpenTitleStorage\n\\sa SDL_OpenUserStorage\n\\sa SDL_ReadStorageFile\n\\sa SDL_WriteStorageFile",
          "name": "SDL_OpenFileStorage",
          "kind": "function",
          "type": "SDL_Storage *",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_OpenStorage": {
          "doc": "Opens up a container using a client-provided storage interface.\n\nApplications do not need to use this function unless they are providing\ntheir own SDL_Storage implementation. If you just need an SDL_Storage, you\nshould use the built-in implementations in SDL, like SDL_OpenTitleStorage()\nor SDL_OpenUserStorage().\n\nThis function makes a copy of `iface` and the caller does not need to keep\nit around after this call.\n\n\\param iface the interface that implements this storage, initialized using\n             SDL_INIT_INTERFACE().\n\\param userdata the pointer that will be passed to the interface functions.\n\\returns a storage container on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseStorage\n\\sa SDL_GetStorageFileSize\n\\sa SDL_GetStorageSpaceRemaining\n\\sa SDL_INIT_INTERFACE\n\\sa SDL_ReadStorageFile\n\\sa SDL_StorageReady\n\\sa SDL_WriteStorageFile",
          "name": "SDL_OpenStorage",
          "kind": "function",
          "type": "SDL_Storage *",
          "parameters": [
            {
              "name": "iface",
              "type": "const SDL_StorageInterface *"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_CloseStorage": {
          "doc": "Closes and frees a storage container.\n\n\\param storage a storage container to close.\n\\returns true if the container was freed with no errors, false otherwise;\n         call SDL_GetError() for more information. Even if the function\n         returns an error, the container data will be freed; the error is\n         only for informational purposes.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_OpenFileStorage\n\\sa SDL_OpenStorage\n\\sa SDL_OpenTitleStorage\n\\sa SDL_OpenUserStorage",
          "name": "SDL_CloseStorage",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            }
          ]
        },
        "SDL_StorageReady": {
          "doc": "Checks if the storage container is ready to use.\n\nThis function should be called in regular intervals until it returns true -\nhowever, it is not recommended to spinwait on this call, as the backend may\ndepend on a synchronous message loop. You might instead poll this in your\ngame's main loop while processing events and drawing a loading screen.\n\n\\param storage a storage container to query.\n\\returns true if the container is ready, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_StorageReady",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            }
          ]
        },
        "SDL_GetStorageFileSize": {
          "doc": "Query the size of a file within a storage container.\n\n\\param storage a storage container to query.\n\\param path the relative path of the file to query.\n\\param length a pointer to be filled with the file's length.\n\\returns true if the file could be queried or false on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ReadStorageFile\n\\sa SDL_StorageReady",
          "name": "SDL_GetStorageFileSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_ReadStorageFile": {
          "doc": "Synchronously read a file from a storage container into a client-provided\nbuffer.\n\nThe value of `length` must match the length of the file exactly; call\nSDL_GetStorageFileSize() to get this value. This behavior may be relaxed in\na future release.\n\n\\param storage a storage container to read from.\n\\param path the relative path of the file to read.\n\\param destination a client-provided buffer to read the file into.\n\\param length the length of the destination buffer.\n\\returns true if the file was read or false on failure; call SDL_GetError()\n         for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetStorageFileSize\n\\sa SDL_StorageReady\n\\sa SDL_WriteStorageFile",
          "name": "SDL_ReadStorageFile",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "destination",
              "type": "void *"
            },
            {
              "name": "length",
              "type": "Uint64"
            }
          ]
        },
        "SDL_WriteStorageFile": {
          "doc": "Synchronously write a file from client memory into a storage container.\n\n\\param storage a storage container to write to.\n\\param path the relative path of the file to write.\n\\param source a client-provided buffer to write from.\n\\param length the length of the source buffer.\n\\returns true if the file was written or false on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetStorageSpaceRemaining\n\\sa SDL_ReadStorageFile\n\\sa SDL_StorageReady",
          "name": "SDL_WriteStorageFile",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "source",
              "type": "const void *"
            },
            {
              "name": "length",
              "type": "Uint64"
            }
          ]
        },
        "SDL_CreateStorageDirectory": {
          "doc": "Create a directory in a writable storage container.\n\n\\param storage a storage container.\n\\param path the path of the directory to create.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady",
          "name": "SDL_CreateStorageDirectory",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumerateStorageDirectory": {
          "doc": "Enumerate a directory in a storage container through a callback function.\n\nThis function provides every directory entry through an app-provided\ncallback, called once for each directory entry, until all results have been\nprovided or the callback returns either SDL_ENUM_SUCCESS or\nSDL_ENUM_FAILURE.\n\nThis will return false if there was a system problem in general, or if a\ncallback returns SDL_ENUM_FAILURE. A successful return means a callback\nreturned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries\nwere enumerated.\n\nIf `path` is NULL, this is treated as a request to enumerate the root of\nthe storage container's tree. An empty string also works for this.\n\n\\param storage a storage container.\n\\param path the path of the directory to enumerate, or NULL for the root.\n\\param callback a function that is called for each entry in the directory.\n\\param userdata a pointer that is passed to `callback`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady",
          "name": "SDL_EnumerateStorageDirectory",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "callback",
              "type": "SDL_EnumerateDirectoryCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_RemoveStoragePath": {
          "doc": "Remove a file or an empty directory in a writable storage container.\n\n\\param storage a storage container.\n\\param path the path of the directory to enumerate.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady",
          "name": "SDL_RemoveStoragePath",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_RenameStoragePath": {
          "doc": "Rename a file or directory in a writable storage container.\n\n\\param storage a storage container.\n\\param oldpath the old path.\n\\param newpath the new path.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady",
          "name": "SDL_RenameStoragePath",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "oldpath",
              "type": "const char *"
            },
            {
              "name": "newpath",
              "type": "const char *"
            }
          ]
        },
        "SDL_CopyStorageFile": {
          "doc": "Copy a file in a writable storage container.\n\n\\param storage a storage container.\n\\param oldpath the old path.\n\\param newpath the new path.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady",
          "name": "SDL_CopyStorageFile",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "oldpath",
              "type": "const char *"
            },
            {
              "name": "newpath",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetStoragePathInfo": {
          "doc": "Get information about a filesystem path in a storage container.\n\n\\param storage a storage container.\n\\param path the path to query.\n\\param info a pointer filled in with information about the path, or NULL to\n            check for the existence of a file.\n\\returns true on success or false if the file doesn't exist, or another\n         failure; call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady",
          "name": "SDL_GetStoragePathInfo",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "info",
              "type": "SDL_PathInfo *"
            }
          ]
        },
        "SDL_GetStorageSpaceRemaining": {
          "doc": "Queries the remaining space in a storage container.\n\n\\param storage a storage container to query.\n\\returns the amount of remaining space, in bytes.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StorageReady\n\\sa SDL_WriteStorageFile",
          "name": "SDL_GetStorageSpaceRemaining",
          "kind": "function",
          "type": "Uint64",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            }
          ]
        },
        "SDL_GlobStorageDirectory": {
          "doc": "Enumerate a directory tree, filtered by pattern, and return a list.\n\nFiles are filtered out if they don't match the string in `pattern`, which\nmay contain wildcard characters `*` (match everything) and `?` (match one\ncharacter). If pattern is NULL, no filtering is done and all results are\nreturned. Subdirectories are permitted, and are specified with a path\nseparator of '/'. Wildcard characters `*` and `?` never match a path\nseparator.\n\n`flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching\ncase-insensitive.\n\nThe returned array is always NULL-terminated, for your iterating\nconvenience, but if `count` is non-NULL, on return it will contain the\nnumber of items in the array, not counting the NULL terminator.\n\nIf `path` is NULL, this is treated as a request to enumerate the root of\nthe storage container's tree. An empty string also works for this.\n\n\\param storage a storage container.\n\\param path the path of the directory to enumerate, or NULL for the root.\n\\param pattern the pattern that files in the directory must match. Can be\n               NULL.\n\\param flags `SDL_GLOB_*` bitflags that affect this search.\n\\param count on return, will be set to the number of items in the returned\n             array. Can be NULL.\n\\returns an array of strings on success or NULL on failure; call\n         SDL_GetError() for more information. The caller should pass the\n         returned pointer to SDL_free when done with it. This is a single\n         allocation that should be freed with SDL_free() when it is no\n         longer needed.\n\n\\threadsafety It is safe to call this function from any thread, assuming\n              the `storage` object is thread-safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GlobStorageDirectory",
          "kind": "function",
          "type": "char **",
          "parameters": [
            {
              "name": "storage",
              "type": "SDL_Storage *"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "pattern",
              "type": "const char *"
            },
            {
              "name": "flags",
              "type": "SDL_GlobFlags"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        }
      }
    },
    "SDL_iostream.h": {
      "name": "SDL_iostream.h",
      "doc": "# CategoryIOStream\n\nSDL provides an abstract interface for reading and writing data streams. It\noffers implementations for files, memory, etc, and the app can provide\ntheir own implementations, too.\n\nSDL_IOStream is not related to the standard C++ iostream class, other than\nboth are abstract interfaces to read/write data.",
      "entries": {
        "SDL_IOStatus": {
          "doc": "SDL_IOStream status, set by a read or write operation.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_IOStatus",
          "kind": "enum",
          "entries": {
            "SDL_IO_STATUS_READY": {
              "doc": "Everything is ready (no errors and not EOF).",
              "name": "SDL_IO_STATUS_READY",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_STATUS_ERROR": {
              "doc": "Read or write I/O error.",
              "name": "SDL_IO_STATUS_ERROR",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_STATUS_EOF": {
              "doc": "End of file.",
              "name": "SDL_IO_STATUS_EOF",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_STATUS_NOT_READY": {
              "doc": "Non blocking I/O, not ready.",
              "name": "SDL_IO_STATUS_NOT_READY",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_STATUS_READONLY": {
              "doc": "Tried to write a read-only buffer.",
              "name": "SDL_IO_STATUS_READONLY",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_STATUS_WRITEONLY": {
              "doc": "Tried to read a write-only buffer.",
              "name": "SDL_IO_STATUS_WRITEONLY",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_IOWhence": {
          "doc": "Possible `whence` values for SDL_IOStream seeking.\n\nThese map to the same \"whence\" concept that `fseek` or `lseek` use in the\nstandard C runtime.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_IOWhence",
          "kind": "enum",
          "entries": {
            "SDL_IO_SEEK_SET": {
              "doc": "Seek from the beginning of data.",
              "name": "SDL_IO_SEEK_SET",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_SEEK_CUR": {
              "doc": "Seek relative to current read point.",
              "name": "SDL_IO_SEEK_CUR",
              "kind": "var",
              "type": ""
            },
            "SDL_IO_SEEK_END": {
              "doc": "Seek relative to the end of data.",
              "name": "SDL_IO_SEEK_END",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_IOStreamInterface": {
          "doc": "The function pointers that drive an SDL_IOStream.\n\nApplications can provide this struct to SDL_OpenIO() to create their own\nimplementation of SDL_IOStream. This is not necessarily required, as SDL\nalready offers several common types of I/O streams, via functions like\nSDL_IOFromFile() and SDL_IOFromMem().\n\nThis structure should be initialized using SDL_INIT_INTERFACE()\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_INIT_INTERFACE",
          "name": "SDL_IOStreamInterface",
          "kind": "struct",
          "entries": {
            "version": {
              "doc": "",
              "name": "version",
              "kind": "var",
              "type": "Uint32"
            },
            "offset": {
              "doc": "Seek to `offset` relative to `whence`, one of stdio's whence values:\n SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END\n\n \\return the final offset in the data stream, or -1 on error.",
              "name": "offset",
              "kind": "var",
              "type": "Sint64"
            },
            "whence": {
              "doc": "Seek to `offset` relative to `whence`, one of stdio's whence values:\n SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END\n\n \\return the final offset in the data stream, or -1 on error.",
              "name": "whence",
              "kind": "var",
              "type": "Sint64"
            },
            "ptr": {
              "doc": "Write exactly `size` bytes from the area pointed at by `ptr`\n to data stream.\n\n On an incomplete write, you should set `*status` to a value from the\n SDL_IOStatus enum. You do not have to explicitly set this on\n a complete, successful write.\n\n \\return the number of bytes written",
              "name": "ptr",
              "kind": "var",
              "type": "const void *"
            },
            "size": {
              "doc": "Write exactly `size` bytes from the area pointed at by `ptr`\n to data stream.\n\n On an incomplete write, you should set `*status` to a value from the\n SDL_IOStatus enum. You do not have to explicitly set this on\n a complete, successful write.\n\n \\return the number of bytes written",
              "name": "size",
              "kind": "var",
              "type": "size_t"
            },
            "status": {
              "doc": "If the stream is buffering, make sure the data is written out.\n\n On failure, you should set `*status` to a value from the\n SDL_IOStatus enum. You do not have to explicitly set this on\n a successful flush.\n\n \\return true if successful or false on write error when flushing data.",
              "name": "status",
              "kind": "var",
              "type": "SDL_IOStatus *"
            }
          }
        },
        "SDL_IOStream": {
          "doc": "The read/write operation structure.\n\nThis operates as an opaque handle. There are several APIs to create various\ntypes of I/O streams, or an app can supply an SDL_IOStreamInterface to\nSDL_OpenIO() to provide their own stream implementation behind this\nstruct's abstract interface.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_IOStream",
          "kind": "alias",
          "type": "struct SDL_IOStream"
        },
        "SDL_IOFromFile": {
          "doc": "Use this function to create a new SDL_IOStream structure for reading from\nand/or writing to a named file.\n\nThe `mode` string is treated roughly the same as in a call to the C\nlibrary's fopen(), even if SDL doesn't happen to use fopen() behind the\nscenes.\n\nAvailable `mode` strings:\n\n- \"r\": Open a file for reading. The file must exist.\n- \"w\": Create an empty file for writing. If a file with the same name\n  already exists its content is erased and the file is treated as a new\n  empty file.\n- \"a\": Append to a file. Writing operations append data at the end of the\n  file. The file is created if it does not exist.\n- \"r+\": Open a file for update both reading and writing. The file must\n  exist.\n- \"w+\": Create an empty file for both reading and writing. If a file with\n  the same name already exists its content is erased and the file is\n  treated as a new empty file.\n- \"a+\": Open a file for reading and appending. All writing operations are\n  performed at the end of the file, protecting the previous content to be\n  overwritten. You can reposition (fseek, rewind) the internal pointer to\n  anywhere in the file for reading, but writing operations will move it\n  back to the end of file. The file is created if it does not exist.\n\n**NOTE**: In order to open a file as a binary file, a \"b\" character has to\nbe included in the `mode` string. This additional \"b\" character can either\nbe appended at the end of the string (thus making the following compound\nmodes: \"rb\", \"wb\", \"ab\", \"r+b\", \"w+b\", \"a+b\") or be inserted between the\nletter and the \"+\" sign for the mixed modes (\"rb+\", \"wb+\", \"ab+\").\nAdditional characters may follow the sequence, although they should have no\neffect. For example, \"t\" is sometimes appended to make explicit the file is\na text file.\n\nThis function supports Unicode filenames, but they must be encoded in UTF-8\nformat, regardless of the underlying operating system.\n\nIn Android, SDL_IOFromFile() can be used to open content:// URIs. As a\nfallback, SDL_IOFromFile() will transparently open a matching filename in\nthe app's `assets`.\n\nClosing the SDL_IOStream will close SDL's internal file handle.\n\nThe following properties may be set at creation time by SDL:\n\n- `SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER`: a pointer, that can be cast\n  to a win32 `HANDLE`, that this SDL_IOStream is using to access the\n  filesystem. If the program isn't running on Windows, or SDL used some\n  other method to access the filesystem, this property will not be set.\n- `SDL_PROP_IOSTREAM_STDIO_FILE_POINTER`: a pointer, that can be cast to a\n  stdio `FILE *`, that this SDL_IOStream is using to access the filesystem.\n  If SDL used some other method to access the filesystem, this property\n  will not be set. PLEASE NOTE that if SDL is using a different C runtime\n  than your app, trying to use this pointer will almost certainly result in\n  a crash! This is mostly a problem on Windows; make sure you build SDL and\n  your app with the same compiler and settings to avoid it.\n- `SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER`: a file descriptor that this\n  SDL_IOStream is using to access the filesystem.\n- `SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER`: a pointer, that can be cast\n  to an Android NDK `AAsset *`, that this SDL_IOStream is using to access\n  the filesystem. If SDL used some other method to access the filesystem,\n  this property will not be set.\n\n\\param file a UTF-8 string representing the filename to open.\n\\param mode an ASCII string representing the mode to be used for opening\n            the file.\n\\returns a pointer to the SDL_IOStream structure that is created or NULL on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseIO\n\\sa SDL_FlushIO\n\\sa SDL_ReadIO\n\\sa SDL_SeekIO\n\\sa SDL_TellIO\n\\sa SDL_WriteIO",
          "name": "SDL_IOFromFile",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "mode",
              "type": "const char *"
            }
          ]
        },
        "SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER",
          "kind": "def",
          "value": "\"SDL.iostream.windows.handle\""
        },
        "SDL_PROP_IOSTREAM_STDIO_FILE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_STDIO_FILE_POINTER",
          "kind": "def",
          "value": "\"SDL.iostream.stdio.file\""
        },
        "SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER",
          "kind": "def",
          "value": "\"SDL.iostream.file_descriptor\""
        },
        "SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER",
          "kind": "def",
          "value": "\"SDL.iostream.android.aasset\""
        },
        "SDL_IOFromMem": {
          "doc": "Use this function to prepare a read-write memory buffer for use with\nSDL_IOStream.\n\nThis function sets up an SDL_IOStream struct based on a memory area of a\ncertain size, for both read and write access.\n\nThis memory buffer is not copied by the SDL_IOStream; the pointer you\nprovide must remain valid until you close the stream. Closing the stream\nwill not free the original buffer.\n\nIf you need to make sure the SDL_IOStream never writes to the memory\nbuffer, you should use SDL_IOFromConstMem() with a read-only buffer of\nmemory instead.\n\nThe following properties will be set at creation time by SDL:\n\n- `SDL_PROP_IOSTREAM_MEMORY_POINTER`: this will be the `mem` parameter that\n  was passed to this function.\n- `SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER`: this will be the `size` parameter\n  that was passed to this function.\n\n\\param mem a pointer to a buffer to feed an SDL_IOStream stream.\n\\param size the buffer size, in bytes.\n\\returns a pointer to a new SDL_IOStream structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_IOFromConstMem\n\\sa SDL_CloseIO\n\\sa SDL_FlushIO\n\\sa SDL_ReadIO\n\\sa SDL_SeekIO\n\\sa SDL_TellIO\n\\sa SDL_WriteIO",
          "name": "SDL_IOFromMem",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_PROP_IOSTREAM_MEMORY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_MEMORY_POINTER",
          "kind": "def",
          "value": "\"SDL.iostream.memory.base\""
        },
        "SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER",
          "kind": "def",
          "value": "\"SDL.iostream.memory.size\""
        },
        "SDL_IOFromConstMem": {
          "doc": "Use this function to prepare a read-only memory buffer for use with\nSDL_IOStream.\n\nThis function sets up an SDL_IOStream struct based on a memory area of a\ncertain size. It assumes the memory area is not writable.\n\nAttempting to write to this SDL_IOStream stream will report an error\nwithout writing to the memory buffer.\n\nThis memory buffer is not copied by the SDL_IOStream; the pointer you\nprovide must remain valid until you close the stream. Closing the stream\nwill not free the original buffer.\n\nIf you need to write to a memory buffer, you should use SDL_IOFromMem()\nwith a writable buffer of memory instead.\n\nThe following properties will be set at creation time by SDL:\n\n- `SDL_PROP_IOSTREAM_MEMORY_POINTER`: this will be the `mem` parameter that\n  was passed to this function.\n- `SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER`: this will be the `size` parameter\n  that was passed to this function.\n\n\\param mem a pointer to a read-only buffer to feed an SDL_IOStream stream.\n\\param size the buffer size, in bytes.\n\\returns a pointer to a new SDL_IOStream structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_IOFromMem\n\\sa SDL_CloseIO\n\\sa SDL_ReadIO\n\\sa SDL_SeekIO\n\\sa SDL_TellIO",
          "name": "SDL_IOFromConstMem",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": [
            {
              "name": "mem",
              "type": "const void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_IOFromDynamicMem": {
          "doc": "Use this function to create an SDL_IOStream that is backed by dynamically\nallocated memory.\n\nThis supports the following properties to provide access to the memory and\ncontrol over allocations:\n\n- `SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER`: a pointer to the internal\n  memory of the stream. This can be set to NULL to transfer ownership of\n  the memory to the application, which should free the memory with\n  SDL_free(). If this is done, the next operation on the stream must be\n  SDL_CloseIO().\n- `SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER`: memory will be allocated in\n  multiples of this size, defaulting to 1024.\n\n\\returns a pointer to a new SDL_IOStream structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseIO\n\\sa SDL_ReadIO\n\\sa SDL_SeekIO\n\\sa SDL_TellIO\n\\sa SDL_WriteIO",
          "name": "SDL_IOFromDynamicMem",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": []
        },
        "SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER",
          "kind": "def",
          "value": "\"SDL.iostream.dynamic.memory\""
        },
        "SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER",
          "kind": "def",
          "value": "\"SDL.iostream.dynamic.chunksize\""
        },
        "SDL_OpenIO": {
          "doc": "Create a custom SDL_IOStream.\n\nApplications do not need to use this function unless they are providing\ntheir own SDL_IOStream implementation. If you just need an SDL_IOStream to\nread/write a common data source, you should use the built-in\nimplementations in SDL, like SDL_IOFromFile() or SDL_IOFromMem(), etc.\n\nThis function makes a copy of `iface` and the caller does not need to keep\nit around after this call.\n\n\\param iface the interface that implements this SDL_IOStream, initialized\n             using SDL_INIT_INTERFACE().\n\\param userdata the pointer that will be passed to the interface functions.\n\\returns a pointer to the allocated memory on success or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CloseIO\n\\sa SDL_INIT_INTERFACE\n\\sa SDL_IOFromConstMem\n\\sa SDL_IOFromFile\n\\sa SDL_IOFromMem",
          "name": "SDL_OpenIO",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": [
            {
              "name": "iface",
              "type": "const SDL_IOStreamInterface *"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_CloseIO": {
          "doc": "Close and free an allocated SDL_IOStream structure.\n\nSDL_CloseIO() closes and cleans up the SDL_IOStream stream. It releases any\nresources used by the stream and frees the SDL_IOStream itself. This\nreturns true on success, or false if the stream failed to flush to its\noutput (e.g. to disk).\n\nNote that if this fails to flush the stream for any reason, this function\nreports an error, but the SDL_IOStream is still invalid once this function\nreturns.\n\nThis call flushes any buffered writes to the operating system, but there\nare no guarantees that those writes have gone to physical media; they might\nbe in the OS's file cache, waiting to go to disk later. If it's absolutely\ncrucial that writes go to disk immediately, so they are definitely stored\neven if the power fails before the file cache would have caught up, one\nshould call SDL_FlushIO() before closing. Note that flushing takes time and\nmakes the system and your app operate less efficiently, so do so sparingly.\n\n\\param context SDL_IOStream structure to close.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_OpenIO",
          "name": "SDL_CloseIO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "SDL_GetIOProperties": {
          "doc": "Get the properties associated with an SDL_IOStream.\n\n\\param context a pointer to an SDL_IOStream structure.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetIOProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "SDL_GetIOStatus": {
          "doc": "Query the stream status of an SDL_IOStream.\n\nThis information can be useful to decide if a short read or write was due\nto an error, an EOF, or a non-blocking operation that isn't yet ready to\ncomplete.\n\nAn SDL_IOStream's status is only expected to change after a SDL_ReadIO or\nSDL_WriteIO call; don't expect it to change if you just call this query\nfunction in a tight loop.\n\n\\param context the SDL_IOStream to query.\n\\returns an SDL_IOStatus enum with the current state.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetIOStatus",
          "kind": "function",
          "type": "SDL_IOStatus",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "SDL_GetIOSize": {
          "doc": "Use this function to get the size of the data stream in an SDL_IOStream.\n\n\\param context the SDL_IOStream to get the size of the data stream from.\n\\returns the size of the data stream in the SDL_IOStream on success or a\n         negative error code on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetIOSize",
          "kind": "function",
          "type": "Sint64",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "SDL_SeekIO": {
          "doc": "Seek within an SDL_IOStream data stream.\n\nThis function seeks to byte `offset`, relative to `whence`.\n\n`whence` may be any of the following values:\n\n- `SDL_IO_SEEK_SET`: seek from the beginning of data\n- `SDL_IO_SEEK_CUR`: seek relative to current read point\n- `SDL_IO_SEEK_END`: seek relative to the end of data\n\nIf this stream can not seek, it will return -1.\n\n\\param context a pointer to an SDL_IOStream structure.\n\\param offset an offset in bytes, relative to `whence` location; can be\n              negative.\n\\param whence any of `SDL_IO_SEEK_SET`, `SDL_IO_SEEK_CUR`,\n              `SDL_IO_SEEK_END`.\n\\returns the final offset in the data stream after the seek or -1 on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_TellIO",
          "name": "SDL_SeekIO",
          "kind": "function",
          "type": "Sint64",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            },
            {
              "name": "offset",
              "type": "Sint64"
            },
            {
              "name": "whence",
              "type": "SDL_IOWhence"
            }
          ]
        },
        "SDL_TellIO": {
          "doc": "Determine the current read/write offset in an SDL_IOStream data stream.\n\nSDL_TellIO is actually a wrapper function that calls the SDL_IOStream's\n`seek` method, with an offset of 0 bytes from `SDL_IO_SEEK_CUR`, to\nsimplify application development.\n\n\\param context an SDL_IOStream data stream object from which to get the\n               current offset.\n\\returns the current offset in the stream, or -1 if the information can not\n         be determined.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SeekIO",
          "name": "SDL_TellIO",
          "kind": "function",
          "type": "Sint64",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "SDL_ReadIO": {
          "doc": "Read from a data source.\n\nThis function reads up `size` bytes from the data source to the area\npointed at by `ptr`. This function may read less bytes than requested.\n\nThis function will return zero when the data stream is completely read, and\nSDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If zero is returned and\nthe stream is not at EOF, SDL_GetIOStatus() will return a different error\nvalue and SDL_GetError() will offer a human-readable message.\n\n\\param context a pointer to an SDL_IOStream structure.\n\\param ptr a pointer to a buffer to read data into.\n\\param size the number of bytes to read from the data source.\n\\returns the number of bytes read, or 0 on end of file or other failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_WriteIO\n\\sa SDL_GetIOStatus",
          "name": "SDL_ReadIO",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            },
            {
              "name": "ptr",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_WriteIO": {
          "doc": "Write to an SDL_IOStream data stream.\n\nThis function writes exactly `size` bytes from the area pointed at by `ptr`\nto the stream. If this fails for any reason, it'll return less than `size`\nto demonstrate how far the write progressed. On success, it returns `size`.\n\nOn error, this function still attempts to write as much as possible, so it\nmight return a positive value less than the requested write size.\n\nThe caller can use SDL_GetIOStatus() to determine if the problem is\nrecoverable, such as a non-blocking write that can simply be retried later,\nor a fatal error.\n\n\\param context a pointer to an SDL_IOStream structure.\n\\param ptr a pointer to a buffer containing data to write.\n\\param size the number of bytes to write.\n\\returns the number of bytes written, which will be less than `size` on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_IOprintf\n\\sa SDL_ReadIO\n\\sa SDL_SeekIO\n\\sa SDL_FlushIO\n\\sa SDL_GetIOStatus",
          "name": "SDL_WriteIO",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            },
            {
              "name": "ptr",
              "type": "const void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_IOprintf": {
          "doc": "Print to an SDL_IOStream data stream.\n\nThis function does formatted printing to the stream.\n\n\\param context a pointer to an SDL_IOStream structure.\n\\param fmt a printf() style format string.\n\\param ... additional parameters matching % tokens in the `fmt` string, if\n           any.\n\\returns the number of bytes written or 0 on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_IOvprintf\n\\sa SDL_WriteIO",
          "name": "SDL_IOprintf",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_IOvprintf": {
          "doc": "Print to an SDL_IOStream data stream.\n\nThis function does formatted printing to the stream.\n\n\\param context a pointer to an SDL_IOStream structure.\n\\param fmt a printf() style format string.\n\\param ap a variable argument list.\n\\returns the number of bytes written or 0 on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_IOprintf\n\\sa SDL_WriteIO",
          "name": "SDL_IOvprintf",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_FlushIO": {
          "doc": "Flush any buffered data in the stream.\n\nThis function makes sure that any buffered data is written to the stream.\nNormally this isn't necessary but if the stream is a pipe or socket it\nguarantees that any pending data is sent.\n\n\\param context SDL_IOStream structure to flush.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_OpenIO\n\\sa SDL_WriteIO",
          "name": "SDL_FlushIO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "SDL_LoadFile_IO": {
          "doc": "Load all the data from an SDL data stream.\n\nThe data is allocated with a zero byte at the end (null terminated) for\nconvenience. This extra byte is not included in the value reported via\n`datasize`.\n\nThe data should be freed with SDL_free().\n\n\\param src the SDL_IOStream to read all available data from.\n\\param datasize a pointer filled in with the number of bytes read, may be\n                NULL.\n\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even\n               in the case of an error.\n\\returns the data or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadFile\n\\sa SDL_SaveFile_IO",
          "name": "SDL_LoadFile_IO",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "datasize",
              "type": "size_t *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "SDL_LoadFile": {
          "doc": "Load all the data from a file path.\n\nThe data is allocated with a zero byte at the end (null terminated) for\nconvenience. This extra byte is not included in the value reported via\n`datasize`.\n\nThe data should be freed with SDL_free().\n\n\\param file the path to read all available data from.\n\\param datasize if not NULL, will store the number of bytes read.\n\\returns the data or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadFile_IO\n\\sa SDL_SaveFile",
          "name": "SDL_LoadFile",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "datasize",
              "type": "size_t *"
            }
          ]
        },
        "SDL_SaveFile_IO": {
          "doc": "Save all the data into an SDL data stream.\n\n\\param src the SDL_IOStream to write all data to.\n\\param data the data to be written. If datasize is 0, may be NULL or a\n            invalid pointer.\n\\param datasize the number of bytes to be written.\n\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even\n               in the case of an error.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SaveFile\n\\sa SDL_LoadFile_IO",
          "name": "SDL_SaveFile_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "datasize",
              "type": "size_t"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "SDL_SaveFile": {
          "doc": "Save all the data into a file path.\n\n\\param file the path to write all available data into.\n\\param data the data to be written. If datasize is 0, may be NULL or a\n            invalid pointer.\n\\param datasize the number of bytes to be written.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SaveFile_IO\n\\sa SDL_LoadFile",
          "name": "SDL_SaveFile",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "datasize",
              "type": "size_t"
            }
          ]
        },
        "SDL_ReadU8": {
          "doc": "Use this function to read a byte from an SDL_IOStream.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the SDL_IOStream to read from.\n\\param value a pointer filled in with the data read.\n\\returns true on success or false on failure or EOF; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU8",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_ReadS8": {
          "doc": "Use this function to read a signed byte from an SDL_IOStream.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the SDL_IOStream to read from.\n\\param value a pointer filled in with the data read.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS8",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint8 *"
            }
          ]
        },
        "SDL_ReadU16LE": {
          "doc": "Use this function to read 16 bits of little-endian data from an\nSDL_IOStream and return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU16LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint16 *"
            }
          ]
        },
        "SDL_ReadS16LE": {
          "doc": "Use this function to read 16 bits of little-endian data from an\nSDL_IOStream and return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS16LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint16 *"
            }
          ]
        },
        "SDL_ReadU16BE": {
          "doc": "Use this function to read 16 bits of big-endian data from an SDL_IOStream\nand return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU16BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint16 *"
            }
          ]
        },
        "SDL_ReadS16BE": {
          "doc": "Use this function to read 16 bits of big-endian data from an SDL_IOStream\nand return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS16BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint16 *"
            }
          ]
        },
        "SDL_ReadU32LE": {
          "doc": "Use this function to read 32 bits of little-endian data from an\nSDL_IOStream and return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU32LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_ReadS32LE": {
          "doc": "Use this function to read 32 bits of little-endian data from an\nSDL_IOStream and return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS32LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint32 *"
            }
          ]
        },
        "SDL_ReadU32BE": {
          "doc": "Use this function to read 32 bits of big-endian data from an SDL_IOStream\nand return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU32BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_ReadS32BE": {
          "doc": "Use this function to read 32 bits of big-endian data from an SDL_IOStream\nand return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS32BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint32 *"
            }
          ]
        },
        "SDL_ReadU64LE": {
          "doc": "Use this function to read 64 bits of little-endian data from an\nSDL_IOStream and return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU64LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_ReadS64LE": {
          "doc": "Use this function to read 64 bits of little-endian data from an\nSDL_IOStream and return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS64LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint64 *"
            }
          ]
        },
        "SDL_ReadU64BE": {
          "doc": "Use this function to read 64 bits of big-endian data from an SDL_IOStream\nand return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadU64BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_ReadS64BE": {
          "doc": "Use this function to read 64 bits of big-endian data from an SDL_IOStream\nand return in native format.\n\nSDL byteswaps the data only if necessary, so the data returned will be in\nthe native byte order.\n\nThis function will return false when the data stream is completely read,\nand SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned\nand the stream is not at EOF, SDL_GetIOStatus() will return a different\nerror value and SDL_GetError() will offer a human-readable message.\n\n\\param src the stream from which to read data.\n\\param value a pointer filled in with the data read.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadS64BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint64 *"
            }
          ]
        },
        "SDL_WriteU8": {
          "doc": "Use this function to write a byte to an SDL_IOStream.\n\n\\param dst the SDL_IOStream to write to.\n\\param value the byte value to write.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU8",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint8"
            }
          ]
        },
        "SDL_WriteS8": {
          "doc": "Use this function to write a signed byte to an SDL_IOStream.\n\n\\param dst the SDL_IOStream to write to.\n\\param value the byte value to write.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS8",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint8"
            }
          ]
        },
        "SDL_WriteU16LE": {
          "doc": "Use this function to write 16 bits in native format to an SDL_IOStream as\nlittle-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in little-endian\nformat.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU16LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint16"
            }
          ]
        },
        "SDL_WriteS16LE": {
          "doc": "Use this function to write 16 bits in native format to an SDL_IOStream as\nlittle-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in little-endian\nformat.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS16LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint16"
            }
          ]
        },
        "SDL_WriteU16BE": {
          "doc": "Use this function to write 16 bits in native format to an SDL_IOStream as\nbig-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in big-endian format.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU16BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint16"
            }
          ]
        },
        "SDL_WriteS16BE": {
          "doc": "Use this function to write 16 bits in native format to an SDL_IOStream as\nbig-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in big-endian format.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS16BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint16"
            }
          ]
        },
        "SDL_WriteU32LE": {
          "doc": "Use this function to write 32 bits in native format to an SDL_IOStream as\nlittle-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in little-endian\nformat.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU32LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint32"
            }
          ]
        },
        "SDL_WriteS32LE": {
          "doc": "Use this function to write 32 bits in native format to an SDL_IOStream as\nlittle-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in little-endian\nformat.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS32LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint32"
            }
          ]
        },
        "SDL_WriteU32BE": {
          "doc": "Use this function to write 32 bits in native format to an SDL_IOStream as\nbig-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in big-endian format.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU32BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint32"
            }
          ]
        },
        "SDL_WriteS32BE": {
          "doc": "Use this function to write 32 bits in native format to an SDL_IOStream as\nbig-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in big-endian format.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS32BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint32"
            }
          ]
        },
        "SDL_WriteU64LE": {
          "doc": "Use this function to write 64 bits in native format to an SDL_IOStream as\nlittle-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in little-endian\nformat.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU64LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint64"
            }
          ]
        },
        "SDL_WriteS64LE": {
          "doc": "Use this function to write 64 bits in native format to an SDL_IOStream as\nlittle-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in little-endian\nformat.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS64LE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint64"
            }
          ]
        },
        "SDL_WriteU64BE": {
          "doc": "Use this function to write 64 bits in native format to an SDL_IOStream as\nbig-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in big-endian format.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteU64BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Uint64"
            }
          ]
        },
        "SDL_WriteS64BE": {
          "doc": "Use this function to write 64 bits in native format to an SDL_IOStream as\nbig-endian data.\n\nSDL byteswaps the data only if necessary, so the application always\nspecifies native format, and the data written will be in big-endian format.\n\n\\param dst the stream to which data will be written.\n\\param value the data to be written, in native format.\n\\returns true on successful write or false on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteS64BE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "value",
              "type": "Sint64"
            }
          ]
        }
      }
    },
    "SDL_platform.h": {
      "name": "SDL_platform.h",
      "doc": "# CategoryPlatform\n\nSDL provides a means to identify the app's platform, both at compile time\nand runtime.",
      "entries": {
        "SDL_GetPlatform": {
          "doc": "Get the name of the platform.\n\nHere are the names returned for some (but not all) supported platforms:\n\n- \"Windows\"\n- \"macOS\"\n- \"Linux\"\n- \"iOS\"\n- \"Android\"\n\n\\returns the name of the platform. If the correct platform name is not\n         available, returns a string beginning with the text \"Unknown\".\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPlatform",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        }
      }
    },
    "SDL_cpuinfo.h": {
      "name": "SDL_cpuinfo.h",
      "doc": "# CategoryCPUInfo\n\nCPU feature detection for SDL.\n\nThese functions are largely concerned with reporting if the system has\naccess to various SIMD instruction sets, but also has other important info\nto share, such as system RAM size and number of logical CPU cores.\n\nCPU instruction set checks, like SDL_HasSSE() and SDL_HasNEON(), are\navailable on all platforms, even if they don't make sense (an ARM processor\nwill never have SSE and an x86 processor will never have NEON, for example,\nbut these functions still exist and will simply return false in these\ncases).",
      "entries": {
        "SDL_CACHELINE_SIZE": {
          "doc": "A guess for the cacheline size used for padding.\n\nMost x86 processors have a 64 byte cache line. The 64-bit PowerPC\nprocessors have a 128 byte cache line. We use the larger value to be\ngenerally safe.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_CACHELINE_SIZE",
          "kind": "def",
          "value": "128"
        },
        "SDL_GetNumLogicalCPUCores": {
          "doc": "Get the number of logical CPU cores available.\n\n\\returns the total number of logical CPU cores. On CPUs that include\n         technologies such as hyperthreading, the number of logical cores\n         may be more than the number of physical cores.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetNumLogicalCPUCores",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetCPUCacheLineSize": {
          "doc": "Determine the L1 cache line size of the CPU.\n\nThis is useful for determining multi-threaded structure padding or SIMD\nprefetch sizes.\n\n\\returns the L1 cache line size of the CPU, in bytes.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetCPUCacheLineSize",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_HasAltiVec": {
          "doc": "Determine whether the CPU has AltiVec features.\n\nThis always returns false on CPUs that aren't using PowerPC instruction\nsets.\n\n\\returns true if the CPU has AltiVec features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_HasAltiVec",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasMMX": {
          "doc": "Determine whether the CPU has MMX features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has MMX features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_HasMMX",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasSSE": {
          "doc": "Determine whether the CPU has SSE features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has SSE features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasSSE2\n\\sa SDL_HasSSE3\n\\sa SDL_HasSSE41\n\\sa SDL_HasSSE42",
          "name": "SDL_HasSSE",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasSSE2": {
          "doc": "Determine whether the CPU has SSE2 features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has SSE2 features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasSSE\n\\sa SDL_HasSSE3\n\\sa SDL_HasSSE41\n\\sa SDL_HasSSE42",
          "name": "SDL_HasSSE2",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasSSE3": {
          "doc": "Determine whether the CPU has SSE3 features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has SSE3 features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasSSE\n\\sa SDL_HasSSE2\n\\sa SDL_HasSSE41\n\\sa SDL_HasSSE42",
          "name": "SDL_HasSSE3",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasSSE41": {
          "doc": "Determine whether the CPU has SSE4.1 features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has SSE4.1 features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasSSE\n\\sa SDL_HasSSE2\n\\sa SDL_HasSSE3\n\\sa SDL_HasSSE42",
          "name": "SDL_HasSSE41",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasSSE42": {
          "doc": "Determine whether the CPU has SSE4.2 features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has SSE4.2 features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasSSE\n\\sa SDL_HasSSE2\n\\sa SDL_HasSSE3\n\\sa SDL_HasSSE41",
          "name": "SDL_HasSSE42",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasAVX": {
          "doc": "Determine whether the CPU has AVX features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has AVX features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasAVX2\n\\sa SDL_HasAVX512F",
          "name": "SDL_HasAVX",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasAVX2": {
          "doc": "Determine whether the CPU has AVX2 features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has AVX2 features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasAVX\n\\sa SDL_HasAVX512F",
          "name": "SDL_HasAVX2",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasAVX512F": {
          "doc": "Determine whether the CPU has AVX-512F (foundation) features.\n\nThis always returns false on CPUs that aren't using Intel instruction sets.\n\n\\returns true if the CPU has AVX-512F features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasAVX\n\\sa SDL_HasAVX2",
          "name": "SDL_HasAVX512F",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasARMSIMD": {
          "doc": "Determine whether the CPU has ARM SIMD (ARMv6) features.\n\nThis is different from ARM NEON, which is a different instruction set.\n\nThis always returns false on CPUs that aren't using ARM instruction sets.\n\n\\returns true if the CPU has ARM SIMD features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasNEON",
          "name": "SDL_HasARMSIMD",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasNEON": {
          "doc": "Determine whether the CPU has NEON (ARM SIMD) features.\n\nThis always returns false on CPUs that aren't using ARM instruction sets.\n\n\\returns true if the CPU has ARM NEON features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_HasNEON",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasLSX": {
          "doc": "Determine whether the CPU has LSX (LOONGARCH SIMD) features.\n\nThis always returns false on CPUs that aren't using LOONGARCH instruction\nsets.\n\n\\returns true if the CPU has LOONGARCH LSX features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_HasLSX",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_HasLASX": {
          "doc": "Determine whether the CPU has LASX (LOONGARCH SIMD) features.\n\nThis always returns false on CPUs that aren't using LOONGARCH instruction\nsets.\n\n\\returns true if the CPU has LOONGARCH LASX features or false if not.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_HasLASX",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GetSystemRAM": {
          "doc": "Get the amount of RAM configured in the system.\n\n\\returns the amount of RAM configured in the system in MiB.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSystemRAM",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetSIMDAlignment": {
          "doc": "Report the alignment this system needs for SIMD allocations.\n\nThis will return the minimum number of bytes to which a pointer must be\naligned to be compatible with SIMD instructions on the current machine. For\nexample, if the machine supports SSE only, it will return 16, but if it\nsupports AVX-512F, it'll return 64 (etc). This only reports values for\ninstruction sets SDL knows about, so if your SDL build doesn't have\nSDL_HasAVX512F(), then it might return 16 for the SSE support it sees and\nnot 64 for the AVX-512 instructions that exist but SDL doesn't know about.\nPlan accordingly.\n\n\\returns the alignment in bytes needed for available, known SIMD\n         instructions.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_alloc\n\\sa SDL_aligned_free",
          "name": "SDL_GetSIMDAlignment",
          "kind": "function",
          "type": "size_t",
          "parameters": []
        }
      }
    },
    "SDL_intrin.h": {
      "name": "SDL_intrin.h",
      "doc": "# CategoryIntrinsics\n\nSDL does some preprocessor gymnastics to determine if any CPU-specific\ncompiler intrinsics are available, as this is not necessarily an easy thing\nto calculate, and sometimes depends on quirks of a system, versions of\nbuild tools, and other external forces.\n\nApps including SDL's headers will be able to check consistent preprocessor\ndefinitions to decide if it's safe to use compiler intrinsics for a\nspecific CPU architecture. This check only tells you that the compiler is\ncapable of using those intrinsics; at runtime, you should still check if\nthey are available on the current system with the\n[CPU info functions](https://wiki.libsdl.org/SDL3/CategoryCPUInfo)\n, such as SDL_HasSSE() or SDL_HasNEON(). Otherwise, the process might crash\nfor using an unsupported CPU instruction.\n\nSDL only sets preprocessor defines for CPU intrinsics if they are\nsupported, so apps should check with `#ifdef` and not `#if`.\n\nSDL will also include the appropriate instruction-set-specific support\nheaders, so if SDL decides to define SDL_SSE2_INTRINSICS, it will also\n`#include <emmintrin.h>` as well.",
      "entries": {
        "SDL_LSX_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Loongarch LSX intrinsics.\n\nIf this macro is defined, SDL will have already included `<lsxintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_LASX_INTRINSICS",
          "name": "SDL_LSX_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_LASX_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Loongarch LSX intrinsics.\n\nIf this macro is defined, SDL will have already included `<lasxintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_LASX_INTRINSICS",
          "name": "SDL_LASX_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_NEON_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports ARM NEON intrinsics.\n\nIf this macro is defined, SDL will have already included `<armintr.h>`\n`<arm_neon.h>`, `<arm64intr.h>`, and `<arm64_neon.h>`, as appropriate.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_NEON_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_ALTIVEC_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports PowerPC Altivec intrinsics.\n\nIf this macro is defined, SDL will have already included `<altivec.h>`\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ALTIVEC_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_MMX_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel MMX intrinsics.\n\nIf this macro is defined, SDL will have already included `<mmintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SSE_INTRINSICS",
          "name": "SDL_MMX_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_SSE_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel SSE intrinsics.\n\nIf this macro is defined, SDL will have already included `<xmmintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SSE2_INTRINSICS\n\\sa SDL_SSE3_INTRINSICS\n\\sa SDL_SSE4_1_INTRINSICS\n\\sa SDL_SSE4_2_INTRINSICS",
          "name": "SDL_SSE_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_SSE2_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel SSE2 intrinsics.\n\nIf this macro is defined, SDL will have already included `<emmintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SSE_INTRINSICS\n\\sa SDL_SSE3_INTRINSICS\n\\sa SDL_SSE4_1_INTRINSICS\n\\sa SDL_SSE4_2_INTRINSICS",
          "name": "SDL_SSE2_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_SSE3_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel SSE3 intrinsics.\n\nIf this macro is defined, SDL will have already included `<pmmintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SSE_INTRINSICS\n\\sa SDL_SSE2_INTRINSICS\n\\sa SDL_SSE4_1_INTRINSICS\n\\sa SDL_SSE4_2_INTRINSICS",
          "name": "SDL_SSE3_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_SSE4_1_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel SSE4.1 intrinsics.\n\nIf this macro is defined, SDL will have already included `<smmintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SSE_INTRINSICS\n\\sa SDL_SSE2_INTRINSICS\n\\sa SDL_SSE3_INTRINSICS\n\\sa SDL_SSE4_2_INTRINSICS",
          "name": "SDL_SSE4_1_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_SSE4_2_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel SSE4.2 intrinsics.\n\nIf this macro is defined, SDL will have already included `<nmmintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SSE_INTRINSICS\n\\sa SDL_SSE2_INTRINSICS\n\\sa SDL_SSE3_INTRINSICS\n\\sa SDL_SSE4_1_INTRINSICS",
          "name": "SDL_SSE4_2_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_AVX_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel AVX intrinsics.\n\nIf this macro is defined, SDL will have already included `<immintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_AVX2_INTRINSICS\n\\sa SDL_AVX512F_INTRINSICS",
          "name": "SDL_AVX_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_AVX2_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel AVX2 intrinsics.\n\nIf this macro is defined, SDL will have already included `<immintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_AVX_INTRINSICS\n\\sa SDL_AVX512F_INTRINSICS",
          "name": "SDL_AVX2_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_AVX512F_INTRINSICS": {
          "doc": "Defined if (and only if) the compiler supports Intel AVX-512F intrinsics.\n\nAVX-512F is also sometimes referred to as \"AVX-512 Foundation.\"\n\nIf this macro is defined, SDL will have already included `<immintrin.h>`\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_AVX_INTRINSICS\n\\sa SDL_AVX2_INTRINSICS",
          "name": "SDL_AVX512F_INTRINSICS",
          "kind": "def",
          "value": "1"
        },
        "SDL_HAS_TARGET_ATTRIBS": {
          "doc": "A macro to decide if the compiler supports `__attribute__((target))`.\n\nEven though this is defined in SDL's public headers, it is generally not\nused directly by apps. Apps should probably just use SDL_TARGETING\ndirectly, instead.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_TARGETING",
          "name": "SDL_HAS_TARGET_ATTRIBS",
          "kind": "def"
        },
        "SDL_TARGETING": {
          "doc": "A macro to tag a function as targeting a specific CPU architecture.\n\nThis is a hint to the compiler that a function should be built with support\nfor a CPU instruction set that might be different than the rest of the\nprogram.\n\nThe particulars of this are explained in the GCC documentation:\n\nhttps://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-target-function-attribute\n\nAn example of using this feature is to turn on SSE2 support for a specific\nfunction, even if the rest of the source code is not compiled to use SSE2\ncode:\n\n```c\n#ifdef SDL_SSE2_INTRINSICS\nstatic void SDL_TARGETING(\"sse2\") DoSomethingWithSSE2(char *x) {\n   ...use SSE2 intrinsic functions, etc...\n}\n#endif\n\n// later...\n#ifdef SDL_SSE2_INTRINSICS\nif (SDL_HasSSE2()) {\n    DoSomethingWithSSE2(str);\n}\n#endif\n```\n\nThe application is, on a whole, built without SSE2 instructions, so it will\nrun on Intel machines that don't support SSE2. But then at runtime, it\nchecks if the system supports the instructions, and then calls into a\nfunction that uses SSE2 opcodes. The ifdefs make sure that this code isn't\nused on platforms that don't have SSE2 at all.\n\nOn compilers without target support, this is defined to nothing.\n\nThis symbol is used by SDL internally, but apps and other libraries are\nwelcome to use it for their own interfaces as well.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_TARGETING",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "__attribute__((target(x)))"
        }
      }
    },
    "SDL_endian.h": {
      "name": "SDL_endian.h",
      "doc": "# CategoryEndian\n\nFunctions converting endian-specific values to different byte orders.\n\nThese functions either unconditionally swap byte order (SDL_Swap16,\nSDL_Swap32, SDL_Swap64, SDL_SwapFloat), or they swap to/from the system's\nnative byte order (SDL_Swap16LE, SDL_Swap16BE, SDL_Swap32LE, SDL_Swap32BE,\nSDL_Swap32LE, SDL_Swap32BE, SDL_SwapFloatLE, SDL_SwapFloatBE). In the\nlatter case, the functionality is provided by macros that become no-ops if\na swap isn't necessary: on an x86 (littleendian) processor, SDL_Swap32LE\ndoes nothing, but SDL_Swap32BE reverses the bytes of the data. On a PowerPC\nprocessor (bigendian), the macros behavior is reversed.\n\nThe swap routines are inline functions, and attempt to use compiler\nintrinsics, inline assembly, and other magic to make byteswapping\nefficient.",
      "entries": {
        "SDL_LIL_ENDIAN": {
          "doc": "A value to represent littleendian byteorder.\n\nThis is used with the preprocessor macro SDL_BYTEORDER, to determine a\nplatform's byte ordering:\n\n```c\n#if SDL_BYTEORDER == SDL_LIL_ENDIAN\nSDL_Log(\"This system is littleendian.\");\n#endif\n```\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_BYTEORDER\n\\sa SDL_BIG_ENDIAN",
          "name": "SDL_LIL_ENDIAN",
          "kind": "def",
          "value": "1234"
        },
        "SDL_BIG_ENDIAN": {
          "doc": "A value to represent bigendian byteorder.\n\nThis is used with the preprocessor macro SDL_BYTEORDER, to determine a\nplatform's byte ordering:\n\n```c\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\nSDL_Log(\"This system is bigendian.\");\n#endif\n```\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_BYTEORDER\n\\sa SDL_LIL_ENDIAN",
          "name": "SDL_BIG_ENDIAN",
          "kind": "def",
          "value": "4321"
        },
        "SDL_BYTEORDER": {
          "doc": "A macro that reports the target system's byte order.\n\nThis is set to either SDL_LIL_ENDIAN or SDL_BIG_ENDIAN (and maybe other\nvalues in the future, if something else becomes popular). This can be\ntested with the preprocessor, so decisions can be made at compile time.\n\n```c\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\nSDL_Log(\"This system is bigendian.\");\n#endif\n```\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_LIL_ENDIAN\n\\sa SDL_BIG_ENDIAN",
          "name": "SDL_BYTEORDER",
          "kind": "def",
          "value": "SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN"
        },
        "SDL_FLOATWORDORDER": {
          "doc": "A macro that reports the target system's floating point word order.\n\nThis is set to either SDL_LIL_ENDIAN or SDL_BIG_ENDIAN (and maybe other\nvalues in the future, if something else becomes popular). This can be\ntested with the preprocessor, so decisions can be made at compile time.\n\n```c\n#if SDL_FLOATWORDORDER == SDL_BIG_ENDIAN\nSDL_Log(\"This system's floats are bigendian.\");\n#endif\n```\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_LIL_ENDIAN\n\\sa SDL_BIG_ENDIAN",
          "name": "SDL_FLOATWORDORDER",
          "kind": "def",
          "value": "SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN"
        },
        "HAS_BUILTIN_BSWAP16": {
          "doc": "",
          "name": "HAS_BUILTIN_BSWAP16",
          "kind": "def",
          "value": "0"
        },
        "HAS_BUILTIN_BSWAP32": {
          "doc": "",
          "name": "HAS_BUILTIN_BSWAP32",
          "kind": "def",
          "value": "0"
        },
        "HAS_BUILTIN_BSWAP64": {
          "doc": "",
          "name": "HAS_BUILTIN_BSWAP64",
          "kind": "def",
          "value": "0"
        },
        "HAS_BROKEN_BSWAP": {
          "doc": "",
          "name": "HAS_BROKEN_BSWAP",
          "kind": "def",
          "value": "0"
        },
        "SDL_SwapFloat": {
          "doc": "Byte-swap a floating point number.\n\nThis will always byte-swap the value, whether it's currently in the native\nbyteorder of the system or not. You should use SDL_SwapFloatLE or\nSDL_SwapFloatBE instead, in most cases.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param x the value to byte-swap.\n\\returns x, with its bytes in the opposite endian order.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SwapFloat",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_Swap16": {
          "doc": "Byte-swap an unsigned 16-bit number.\n\nThis will always byte-swap the value, whether it's currently in the native\nbyteorder of the system or not. You should use SDL_Swap16LE or SDL_Swap16BE\ninstead, in most cases.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param x the value to byte-swap.\n\\returns `x`, with its bytes in the opposite endian order.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_Swap16",
          "kind": "function",
          "type": "Uint16",
          "parameters": [
            {
              "name": "x",
              "type": "Uint16"
            }
          ]
        },
        "SDL_Swap32": {
          "doc": "Byte-swap an unsigned 32-bit number.\n\nThis will always byte-swap the value, whether it's currently in the native\nbyteorder of the system or not. You should use SDL_Swap32LE or SDL_Swap32BE\ninstead, in most cases.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param x the value to byte-swap.\n\\returns `x`, with its bytes in the opposite endian order.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_Swap32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "x",
              "type": "Uint32"
            }
          ]
        },
        "SDL_Swap64": {
          "doc": "Byte-swap an unsigned 64-bit number.\n\nThis will always byte-swap the value, whether it's currently in the native\nbyteorder of the system or not. You should use SDL_Swap64LE or SDL_Swap64BE\ninstead, in most cases.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param x the value to byte-swap.\n\\returns `x`, with its bytes in the opposite endian order.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_Swap64",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "x",
              "type": "Uint64"
            }
          ]
        },
        "SDL_Swap16LE": {
          "doc": "Swap a 16-bit value from littleendian to native byte order.\n\nIf this is running on a littleendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in littleendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Swap16LE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_Swap32LE": {
          "doc": "Swap a 32-bit value from littleendian to native byte order.\n\nIf this is running on a littleendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in littleendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Swap32LE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_Swap64LE": {
          "doc": "Swap a 64-bit value from littleendian to native byte order.\n\nIf this is running on a littleendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in littleendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Swap64LE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_SwapFloatLE": {
          "doc": "Swap a floating point value from littleendian to native byte order.\n\nIf this is running on a littleendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in littleendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SwapFloatLE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_Swap16BE": {
          "doc": "Swap a 16-bit value from bigendian to native byte order.\n\nIf this is running on a bigendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in bigendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Swap16BE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_Swap32BE": {
          "doc": "Swap a 32-bit value from bigendian to native byte order.\n\nIf this is running on a bigendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in bigendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Swap32BE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_Swap64BE": {
          "doc": "Swap a 64-bit value from bigendian to native byte order.\n\nIf this is running on a bigendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in bigendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_Swap64BE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        },
        "SDL_SwapFloatBE": {
          "doc": "Swap a floating point value from bigendian to native byte order.\n\nIf this is running on a bigendian system, `x` is returned unchanged.\n\nThis macro never references `x` more than once, avoiding side effects.\n\n\\param x the value to swap, in bigendian byte order.\n\\returns `x` in native byte order.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SwapFloatBE",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SwapOnlyIfNecessary(x)"
        }
      }
    },
    "SDL_bits.h": {
      "name": "SDL_bits.h",
      "doc": "# CategoryBits\n\nFunctions for fiddling with bits and bitmasks.",
      "entries": {
        "SDL_MostSignificantBitIndex32": {
          "doc": "Get the index of the most significant (set) bit in a 32-bit number.\n\nResult is undefined when called with 0. This operation can also be stated\nas \"count leading zeroes\" and \"log base 2\".\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param x the 32-bit value to examine.\n\\returns the index of the most significant bit, or -1 if the value is 0.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_MostSignificantBitIndex32",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "Uint32"
            }
          ]
        },
        "SDL_HasExactlyOneBitSet32": {
          "doc": "Determine if a unsigned 32-bit value has exactly one bit set.\n\nIf there are no bits set (`x` is zero), or more than one bit set, this\nreturns false. If any one bit is exclusively set, this returns true.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param x the 32-bit value to examine.\n\\returns true if exactly one bit is set in `x`, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_HasExactlyOneBitSet32",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "x",
              "type": "Uint32"
            }
          ]
        }
      }
    },
    "SDL_loadso.h": {
      "name": "SDL_loadso.h",
      "doc": "# CategorySharedObject\n\nSystem-dependent library loading routines.\n\nShared objects are code that is programmatically loadable at runtime.\nWindows calls these \"DLLs\", Linux calls them \"shared libraries\", etc.\n\nTo use them, build such a library, then call SDL_LoadObject() on it. Once\nloaded, you can use SDL_LoadFunction() on that object to find the address\nof its exported symbols. When done with the object, call SDL_UnloadObject()\nto dispose of it.\n\nSome things to keep in mind:\n\n- These functions only work on C function names. Other languages may have\n  name mangling and intrinsic language support that varies from compiler to\n  compiler.\n- Make sure you declare your function pointers with the same calling\n  convention as the actual library function. Your code will crash\n  mysteriously if you do not do this.\n- Avoid namespace collisions. If you load a symbol from the library, it is\n  not defined whether or not it goes into the global symbol namespace for\n  the application. If it does and it conflicts with symbols in your code or\n  other shared libraries, you will not get the results you expect. :)\n- Once a library is unloaded, all pointers into it obtained through\n  SDL_LoadFunction() become invalid, even if the library is later reloaded.\n  Don't unload a library if you plan to use these pointers in the future.\n  Notably: beware of giving one of these pointers to atexit(), since it may\n  call that pointer after the library unloads.",
      "entries": {
        "SDL_SharedObject": {
          "doc": "An opaque datatype that represents a loaded shared object.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_LoadObject\n\\sa SDL_LoadFunction\n\\sa SDL_UnloadObject",
          "name": "SDL_SharedObject",
          "kind": "alias",
          "type": "struct SDL_SharedObject"
        },
        "SDL_LoadObject": {
          "doc": "Dynamically load a shared object.\n\n\\param sofile a system-dependent name of the object file.\n\\returns an opaque pointer to the object handle or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadFunction\n\\sa SDL_UnloadObject",
          "name": "SDL_LoadObject",
          "kind": "function",
          "type": "SDL_SharedObject *",
          "parameters": [
            {
              "name": "sofile",
              "type": "const char *"
            }
          ]
        },
        "SDL_LoadFunction": {
          "doc": "Look up the address of the named function in a shared object.\n\nThis function pointer is no longer valid after calling SDL_UnloadObject().\n\nThis function can only look up C function names. Other languages may have\nname mangling and intrinsic language support that varies from compiler to\ncompiler.\n\nMake sure you declare your function pointers with the same calling\nconvention as the actual library function. Your code will crash\nmysteriously if you do not do this.\n\nIf the requested function doesn't exist, NULL is returned.\n\n\\param handle a valid shared object handle returned by SDL_LoadObject().\n\\param name the name of the function to look up.\n\\returns a pointer to the function or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadObject",
          "name": "SDL_LoadFunction",
          "kind": "function",
          "type": "SDL_FunctionPointer",
          "parameters": [
            {
              "name": "handle",
              "type": "SDL_SharedObject *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_UnloadObject": {
          "doc": "Unload a shared object from memory.\n\nNote that any pointers from this object looked up through\nSDL_LoadFunction() will no longer be valid.\n\n\\param handle a valid shared object handle returned by SDL_LoadObject().\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadObject",
          "name": "SDL_UnloadObject",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "handle",
              "type": "SDL_SharedObject *"
            }
          ]
        }
      }
    },
    "SDL_process.h": {
      "name": "SDL_process.h",
      "doc": "# CategoryProcess\n\nProcess control support.\n\nThese functions provide a cross-platform way to spawn and manage OS-level\nprocesses.\n\nYou can create a new subprocess with SDL_CreateProcess() and optionally\nread and write to it using SDL_ReadProcess() or SDL_GetProcessInput() and\nSDL_GetProcessOutput(). If more advanced functionality like chaining input\nbetween processes is necessary, you can use\nSDL_CreateProcessWithProperties().\n\nYou can get the status of a created process with SDL_WaitProcess(), or\nterminate the process with SDL_KillProcess().\n\nDon't forget to call SDL_DestroyProcess() to clean up, whether the process\nprocess was killed, terminated on its own, or is still running!",
      "entries": {
        "SDL_Process": {
          "doc": "An opaque handle representing a system process.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess",
          "name": "SDL_Process",
          "kind": "alias",
          "type": "struct SDL_Process"
        },
        "SDL_CreateProcess": {
          "doc": "Create a new process.\n\nThe path to the executable is supplied in args[0]. args[1..N] are\nadditional arguments passed on the command line of the new process, and the\nargument list should be terminated with a NULL, e.g.:\n\n```c\nconst char *args[] = { \"myprogram\", \"argument\", NULL };\n```\n\nSetting pipe_stdio to true is equivalent to setting\n`SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` and\n`SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` to `SDL_PROCESS_STDIO_APP`, and\nwill allow the use of SDL_ReadProcess() or SDL_GetProcessInput() and\nSDL_GetProcessOutput().\n\nSee SDL_CreateProcessWithProperties() for more details.\n\n\\param args the path and arguments for the new process.\n\\param pipe_stdio true to create pipes to the process's standard input and\n                  from the process's standard output, false for the process\n                  to have no input and inherit the application's standard\n                  output.\n\\returns the newly created and running process, or NULL if the process\n         couldn't be created.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_GetProcessProperties\n\\sa SDL_ReadProcess\n\\sa SDL_GetProcessInput\n\\sa SDL_GetProcessOutput\n\\sa SDL_KillProcess\n\\sa SDL_WaitProcess\n\\sa SDL_DestroyProcess",
          "name": "SDL_CreateProcess",
          "kind": "function",
          "type": "SDL_Process *",
          "parameters": [
            {
              "name": "args",
              "type": "const char *const *"
            },
            {
              "name": "pipe_stdio",
              "type": "bool"
            }
          ]
        },
        "SDL_ProcessIO": {
          "doc": "Description of where standard I/O should be directed when creating a\nprocess.\n\nIf a standard I/O stream is set to SDL_PROCESS_STDIO_INHERITED, it will go\nto the same place as the application's I/O stream. This is the default for\nstandard output and standard error.\n\nIf a standard I/O stream is set to SDL_PROCESS_STDIO_NULL, it is connected\nto `NUL:` on Windows and `/dev/null` on POSIX systems. This is the default\nfor standard input.\n\nIf a standard I/O stream is set to SDL_PROCESS_STDIO_APP, it is connected\nto a new SDL_IOStream that is available to the application. Standard input\nwill be available as `SDL_PROP_PROCESS_STDIN_POINTER` and allows\nSDL_GetProcessInput(), standard output will be available as\n`SDL_PROP_PROCESS_STDOUT_POINTER` and allows SDL_ReadProcess() and\nSDL_GetProcessOutput(), and standard error will be available as\n`SDL_PROP_PROCESS_STDERR_POINTER` in the properties for the created\nprocess.\n\nIf a standard I/O stream is set to SDL_PROCESS_STDIO_REDIRECT, it is\nconnected to an existing SDL_IOStream provided by the application. Standard\ninput is provided using `SDL_PROP_PROCESS_CREATE_STDIN_POINTER`, standard\noutput is provided using `SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`, and\nstandard error is provided using `SDL_PROP_PROCESS_CREATE_STDERR_POINTER`\nin the creation properties. These existing streams should be closed by the\napplication once the new process is created.\n\nIn order to use an SDL_IOStream with SDL_PROCESS_STDIO_REDIRECT, it must\nhave `SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER` or\n`SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER` set. This is true for streams\nrepresenting files and process I/O.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_GetProcessProperties\n\\sa SDL_ReadProcess\n\\sa SDL_GetProcessInput\n\\sa SDL_GetProcessOutput",
          "name": "SDL_ProcessIO",
          "kind": "enum",
          "entries": {
            "SDL_PROCESS_STDIO_INHERITED": {
              "doc": "The I/O stream is inherited from the application.",
              "name": "SDL_PROCESS_STDIO_INHERITED",
              "kind": "var",
              "type": ""
            },
            "SDL_PROCESS_STDIO_NULL": {
              "doc": "The I/O stream is ignored.",
              "name": "SDL_PROCESS_STDIO_NULL",
              "kind": "var",
              "type": ""
            },
            "SDL_PROCESS_STDIO_APP": {
              "doc": "The I/O stream is connected to a new SDL_IOStream that the application can read or write.",
              "name": "SDL_PROCESS_STDIO_APP",
              "kind": "var",
              "type": ""
            },
            "SDL_PROCESS_STDIO_REDIRECT": {
              "doc": "The I/O stream is redirected to an existing SDL_IOStream.",
              "name": "SDL_PROCESS_STDIO_REDIRECT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_CreateProcessWithProperties": {
          "doc": "Create a new process with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_PROCESS_CREATE_ARGS_POINTER`: an array of strings containing\n  the program to run, any arguments, and a NULL pointer, e.g. const char\n  *args[] = { \"myprogram\", \"argument\", NULL }. This is a required property.\n- `SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER`: an SDL_Environment\n  pointer. If this property is set, it will be the entire environment for\n  the process, otherwise the current environment is used.\n- `SDL_PROP_PROCESS_CREATE_STDIN_NUMBER`: an SDL_ProcessIO value describing\n  where standard input for the process comes from, defaults to\n  `SDL_PROCESS_STDIO_NULL`.\n- `SDL_PROP_PROCESS_CREATE_STDIN_POINTER`: an SDL_IOStream pointer used for\n  standard input when `SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` is set to\n  `SDL_PROCESS_STDIO_REDIRECT`.\n- `SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER`: an SDL_ProcessIO value\n  describing where standard output for the process goes to, defaults to\n  `SDL_PROCESS_STDIO_INHERITED`.\n- `SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`: an SDL_IOStream pointer used\n  for standard output when `SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` is set\n  to `SDL_PROCESS_STDIO_REDIRECT`.\n- `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER`: an SDL_ProcessIO value\n  describing where standard error for the process goes to, defaults to\n  `SDL_PROCESS_STDIO_INHERITED`.\n- `SDL_PROP_PROCESS_CREATE_STDERR_POINTER`: an SDL_IOStream pointer used\n  for standard error when `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER` is set to\n  `SDL_PROCESS_STDIO_REDIRECT`.\n- `SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN`: true if the error\n  output of the process should be redirected into the standard output of\n  the process. This property has no effect if\n  `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER` is set.\n- `SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN`: true if the process should\n  run in the background. In this case the default input and output is\n  `SDL_PROCESS_STDIO_NULL` and the exitcode of the process is not\n  available, and will always be 0.\n\nOn POSIX platforms, wait() and waitpid(-1, ...) should not be called, and\nSIGCHLD should not be ignored or handled because those would prevent SDL\nfrom properly tracking the lifetime of the underlying process. You should\nuse SDL_WaitProcess() instead.\n\n\\param props the properties to use.\n\\returns the newly created and running process, or NULL if the process\n         couldn't be created.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_GetProcessProperties\n\\sa SDL_ReadProcess\n\\sa SDL_GetProcessInput\n\\sa SDL_GetProcessOutput\n\\sa SDL_KillProcess\n\\sa SDL_WaitProcess\n\\sa SDL_DestroyProcess",
          "name": "SDL_CreateProcessWithProperties",
          "kind": "function",
          "type": "SDL_Process *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_PROCESS_CREATE_ARGS_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_ARGS_POINTER",
          "kind": "def",
          "value": "\"SDL.process.create.args\""
        },
        "SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER",
          "kind": "def",
          "value": "\"SDL.process.create.environment\""
        },
        "SDL_PROP_PROCESS_CREATE_STDIN_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDIN_NUMBER",
          "kind": "def",
          "value": "\"SDL.process.create.stdin_option\""
        },
        "SDL_PROP_PROCESS_CREATE_STDIN_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDIN_POINTER",
          "kind": "def",
          "value": "\"SDL.process.create.stdin_source\""
        },
        "SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER",
          "kind": "def",
          "value": "\"SDL.process.create.stdout_option\""
        },
        "SDL_PROP_PROCESS_CREATE_STDOUT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDOUT_POINTER",
          "kind": "def",
          "value": "\"SDL.process.create.stdout_source\""
        },
        "SDL_PROP_PROCESS_CREATE_STDERR_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDERR_NUMBER",
          "kind": "def",
          "value": "\"SDL.process.create.stderr_option\""
        },
        "SDL_PROP_PROCESS_CREATE_STDERR_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDERR_POINTER",
          "kind": "def",
          "value": "\"SDL.process.create.stderr_source\""
        },
        "SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.process.create.stderr_to_stdout\""
        },
        "SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.process.create.background\""
        },
        "SDL_GetProcessProperties": {
          "doc": "Get the properties associated with a process.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_PROCESS_PID_NUMBER`: the process ID of the process.\n- `SDL_PROP_PROCESS_STDIN_POINTER`: an SDL_IOStream that can be used to\n  write input to the process, if it was created with\n  `SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` set to `SDL_PROCESS_STDIO_APP`.\n- `SDL_PROP_PROCESS_STDOUT_POINTER`: a non-blocking SDL_IOStream that can\n  be used to read output from the process, if it was created with\n  `SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` set to `SDL_PROCESS_STDIO_APP`.\n- `SDL_PROP_PROCESS_STDERR_POINTER`: a non-blocking SDL_IOStream that can\n  be used to read error output from the process, if it was created with\n  `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER` set to `SDL_PROCESS_STDIO_APP`.\n- `SDL_PROP_PROCESS_BACKGROUND_BOOLEAN`: true if the process is running in\n  the background.\n\n\\param process the process to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties",
          "name": "SDL_GetProcessProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            }
          ]
        },
        "SDL_PROP_PROCESS_PID_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_PID_NUMBER",
          "kind": "def",
          "value": "\"SDL.process.pid\""
        },
        "SDL_PROP_PROCESS_STDIN_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_STDIN_POINTER",
          "kind": "def",
          "value": "\"SDL.process.stdin\""
        },
        "SDL_PROP_PROCESS_STDOUT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_STDOUT_POINTER",
          "kind": "def",
          "value": "\"SDL.process.stdout\""
        },
        "SDL_PROP_PROCESS_STDERR_POINTER": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_STDERR_POINTER",
          "kind": "def",
          "value": "\"SDL.process.stderr\""
        },
        "SDL_PROP_PROCESS_BACKGROUND_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_PROCESS_BACKGROUND_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.process.background\""
        },
        "SDL_ReadProcess": {
          "doc": "Read all the output from a process.\n\nIf a process was created with I/O enabled, you can use this function to\nread the output. This function blocks until the process is complete,\ncapturing all output, and providing the process exit code.\n\nThe data is allocated with a zero byte at the end (null terminated) for\nconvenience. This extra byte is not included in the value reported via\n`datasize`.\n\nThe data should be freed with SDL_free().\n\n\\param process The process to read.\n\\param datasize a pointer filled in with the number of bytes read, may be\n                NULL.\n\\param exitcode a pointer filled in with the process exit code if the\n                process has exited, may be NULL.\n\\returns the data or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_DestroyProcess",
          "name": "SDL_ReadProcess",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            },
            {
              "name": "datasize",
              "type": "size_t *"
            },
            {
              "name": "exitcode",
              "type": "int *"
            }
          ]
        },
        "SDL_GetProcessInput": {
          "doc": "Get the SDL_IOStream associated with process standard input.\n\nThe process must have been created with SDL_CreateProcess() and pipe_stdio\nset to true, or with SDL_CreateProcessWithProperties() and\n`SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` set to `SDL_PROCESS_STDIO_APP`.\n\nWriting to this stream can return less data than expected if the process\nhasn't read its input. It may be blocked waiting for its output to be read,\nif so you may need to call SDL_GetProcessOutput() and read the output in\nparallel with writing input.\n\n\\param process The process to get the input stream for.\n\\returns the input stream or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_GetProcessOutput",
          "name": "SDL_GetProcessInput",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            }
          ]
        },
        "SDL_GetProcessOutput": {
          "doc": "Get the SDL_IOStream associated with process standard output.\n\nThe process must have been created with SDL_CreateProcess() and pipe_stdio\nset to true, or with SDL_CreateProcessWithProperties() and\n`SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` set to `SDL_PROCESS_STDIO_APP`.\n\nReading from this stream can return 0 with SDL_GetIOStatus() returning\nSDL_IO_STATUS_NOT_READY if no output is available yet.\n\n\\param process The process to get the output stream for.\n\\returns the output stream or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_GetProcessInput",
          "name": "SDL_GetProcessOutput",
          "kind": "function",
          "type": "SDL_IOStream *",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            }
          ]
        },
        "SDL_KillProcess": {
          "doc": "Stop a process.\n\n\\param process The process to stop.\n\\param force true to terminate the process immediately, false to try to\n             stop the process gracefully. In general you should try to stop\n             the process gracefully first as terminating a process may\n             leave it with half-written data or in some other unstable\n             state.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_WaitProcess\n\\sa SDL_DestroyProcess",
          "name": "SDL_KillProcess",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            },
            {
              "name": "force",
              "type": "bool"
            }
          ]
        },
        "SDL_WaitProcess": {
          "doc": "Wait for a process to finish.\n\nThis can be called multiple times to get the status of a process.\n\nThe exit code will be the exit code of the process if it terminates\nnormally, a negative signal if it terminated due to a signal, or -255\notherwise. It will not be changed if the process is still running.\n\nIf you create a process with standard output piped to the application\n(`pipe_stdio` being true) then you should read all of the process output\nbefore calling SDL_WaitProcess(). If you don't do this the process might be\nblocked indefinitely waiting for output to be read and SDL_WaitProcess()\nwill never return true;\n\n\\param process The process to wait for.\n\\param block If true, block until the process finishes; otherwise, report\n             on the process' status.\n\\param exitcode a pointer filled in with the process exit code if the\n                process has exited, may be NULL.\n\\returns true if the process exited, false otherwise.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_KillProcess\n\\sa SDL_DestroyProcess",
          "name": "SDL_WaitProcess",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            },
            {
              "name": "block",
              "type": "bool"
            },
            {
              "name": "exitcode",
              "type": "int *"
            }
          ]
        },
        "SDL_DestroyProcess": {
          "doc": "Destroy a previously created process object.\n\nNote that this does not stop the process, just destroys the SDL object used\nto track it. If you want to stop the process you should use\nSDL_KillProcess().\n\n\\param process The process object to destroy.\n\n\\threadsafety This function is not thread safe.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProcess\n\\sa SDL_CreateProcessWithProperties\n\\sa SDL_KillProcess",
          "name": "SDL_DestroyProcess",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "process",
              "type": "SDL_Process *"
            }
          ]
        }
      }
    },
    "SDL_power.h": {
      "name": "SDL_power.h",
      "doc": "# CategoryPower\n\nSDL power management routines.\n\nThere is a single function in this category: SDL_GetPowerInfo().\n\nThis function is useful for games on the go. This allows an app to know if\nit's running on a draining battery, which can be useful if the app wants to\nreduce processing, or perhaps framerate, to extend the duration of the\nbattery's charge. Perhaps the app just wants to show a battery meter when\nfullscreen, or alert the user when the power is getting extremely low, so\nthey can save their game.",
      "entries": {
        "SDL_PowerState": {
          "doc": "The basic state for the system's power supply.\n\nThese are results returned by SDL_GetPowerInfo().\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PowerState",
          "kind": "enum",
          "entries": {
            "SDL_POWERSTATE_ERROR": {
              "doc": "error determining power status",
              "name": "SDL_POWERSTATE_ERROR",
              "kind": "var",
              "type": ""
            },
            "SDL_POWERSTATE_UNKNOWN": {
              "doc": "cannot determine power status",
              "name": "SDL_POWERSTATE_UNKNOWN",
              "kind": "var",
              "type": ""
            },
            "SDL_POWERSTATE_ON_BATTERY": {
              "doc": "Not plugged in, running on the battery.",
              "name": "SDL_POWERSTATE_ON_BATTERY",
              "kind": "var",
              "type": ""
            },
            "SDL_POWERSTATE_NO_BATTERY": {
              "doc": "Plugged in, no battery available.",
              "name": "SDL_POWERSTATE_NO_BATTERY",
              "kind": "var",
              "type": ""
            },
            "SDL_POWERSTATE_CHARGING": {
              "doc": "Plugged in, charging battery.",
              "name": "SDL_POWERSTATE_CHARGING",
              "kind": "var",
              "type": ""
            },
            "SDL_POWERSTATE_CHARGED": {
              "doc": "Plugged in, battery charged.",
              "name": "SDL_POWERSTATE_CHARGED",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GetPowerInfo": {
          "doc": "Get the current power supply details.\n\nYou should never take a battery status as absolute truth. Batteries\n(especially failing batteries) are delicate hardware, and the values\nreported here are best estimates based on what that hardware reports. It's\nnot uncommon for older batteries to lose stored power much faster than it\nreports, or completely drain when reporting it has 20 percent left, etc.\n\nBattery status can change at any time; if you are concerned with power\nstate, you should call this function frequently, and perhaps ignore changes\nuntil they seem to be stable for a few seconds.\n\nIt's possible a platform can only report battery percentage or time left\nbut not both.\n\nOn some platforms, retrieving power supply details might be expensive. If\nyou want to display continuous status you could call this function every\nminute or so.\n\n\\param seconds a pointer filled in with the seconds of battery life left,\n               or NULL to ignore. This will be filled in with -1 if we\n               can't determine a value or there is no battery.\n\\param percent a pointer filled in with the percentage of battery life\n               left, between 0 and 100, or NULL to ignore. This will be\n               filled in with -1 we can't determine a value or there is no\n               battery.\n\\returns the current battery state or `SDL_POWERSTATE_ERROR` on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPowerInfo",
          "kind": "function",
          "type": "SDL_PowerState",
          "parameters": [
            {
              "name": "seconds",
              "type": "int *"
            },
            {
              "name": "percent",
              "type": "int *"
            }
          ]
        }
      }
    },
    "SDL_messagebox.h": {
      "name": "SDL_messagebox.h",
      "doc": "# CategoryMessagebox\n\nSDL offers a simple message box API, which is useful for simple alerts,\nsuch as informing the user when something fatal happens at startup without\nthe need to build a UI for it (or informing the user _before_ your UI is\nready).\n\nThese message boxes are native system dialogs where possible.\n\nThere is both a customizable function (SDL_ShowMessageBox()) that offers\nlots of options for what to display and reports on what choice the user\nmade, and also a much-simplified version (SDL_ShowSimpleMessageBox()),\nmerely takes a text message and title, and waits until the user presses a\nsingle \"OK\" UI button. Often, this is all that is necessary.",
      "entries": {
        "SDL_MessageBoxFlags": {
          "doc": "Message box flags.\n\nIf supported will display warning icon, etc.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_MessageBoxFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_MESSAGEBOX_ERROR": {
          "doc": "error dialog",
          "name": "SDL_MESSAGEBOX_ERROR",
          "kind": "def",
          "value": "0x00000010u"
        },
        "SDL_MESSAGEBOX_WARNING": {
          "doc": "warning dialog",
          "name": "SDL_MESSAGEBOX_WARNING",
          "kind": "def",
          "value": "0x00000020u"
        },
        "SDL_MESSAGEBOX_INFORMATION": {
          "doc": "informational dialog",
          "name": "SDL_MESSAGEBOX_INFORMATION",
          "kind": "def",
          "value": "0x00000040u"
        },
        "SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT": {
          "doc": "buttons placed left to right",
          "name": "SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT",
          "kind": "def",
          "value": "0x00000080u"
        },
        "SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT": {
          "doc": "buttons placed right to left",
          "name": "SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT",
          "kind": "def",
          "value": "0x00000100u"
        },
        "SDL_MessageBoxButtonFlags": {
          "doc": "SDL_MessageBoxButtonData flags.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_MessageBoxButtonFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT": {
          "doc": "Marks the default button when return is hit",
          "name": "SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT",
          "kind": "def",
          "value": "0x00000001u"
        },
        "SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT": {
          "doc": "Marks the default button when escape is hit",
          "name": "SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT",
          "kind": "def",
          "value": "0x00000002u"
        },
        "SDL_MessageBoxButtonData": {
          "doc": "Individual button data.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MessageBoxButtonData",
          "kind": "struct",
          "entries": {
            "flags": {
              "doc": "",
              "name": "flags",
              "kind": "var",
              "type": "SDL_MessageBoxButtonFlags"
            },
            "buttonID": {
              "doc": "User defined button id (value returned via SDL_ShowMessageBox)",
              "name": "buttonID",
              "kind": "var",
              "type": "int"
            },
            "text": {
              "doc": "The UTF-8 button text",
              "name": "text",
              "kind": "var",
              "type": "const char *"
            }
          }
        },
        "SDL_MessageBoxColor": {
          "doc": "RGB value used in a message box color scheme\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MessageBoxColor",
          "kind": "struct",
          "entries": {
            "r": {
              "doc": "",
              "name": "r",
              "kind": "var",
              "type": "Uint8"
            },
            "g": {
              "doc": "",
              "name": "g",
              "kind": "var",
              "type": "Uint8"
            },
            "b": {
              "doc": "",
              "name": "b",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_MessageBoxColorType": {
          "doc": "An enumeration of indices inside the colors array of\nSDL_MessageBoxColorScheme.",
          "name": "SDL_MessageBoxColorType",
          "kind": "enum",
          "entries": {
            "SDL_MESSAGEBOX_COLOR_BACKGROUND": {
              "doc": "",
              "name": "SDL_MESSAGEBOX_COLOR_BACKGROUND",
              "kind": "var",
              "type": ""
            },
            "SDL_MESSAGEBOX_COLOR_TEXT": {
              "doc": "",
              "name": "SDL_MESSAGEBOX_COLOR_TEXT",
              "kind": "var",
              "type": ""
            },
            "SDL_MESSAGEBOX_COLOR_BUTTON_BORDER": {
              "doc": "",
              "name": "SDL_MESSAGEBOX_COLOR_BUTTON_BORDER",
              "kind": "var",
              "type": ""
            },
            "SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND": {
              "doc": "",
              "name": "SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND",
              "kind": "var",
              "type": ""
            },
            "SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED": {
              "doc": "",
              "name": "SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED",
              "kind": "var",
              "type": ""
            },
            "SDL_MESSAGEBOX_COLOR_COUNT": {
              "doc": "[object Object]",
              "name": "SDL_MESSAGEBOX_COLOR_COUNT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_MessageBoxColorScheme": {
          "doc": "A set of colors to use for message box dialogs\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MessageBoxColorScheme",
          "kind": "struct",
          "entries": {
            "colors": {
              "doc": "",
              "name": "colors",
              "kind": "var",
              "type": "SDL_MessageBoxColor"
            }
          }
        },
        "SDL_MessageBoxData": {
          "doc": "MessageBox structure containing title, text, window, etc.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_MessageBoxData",
          "kind": "struct",
          "entries": {
            "flags": {
              "doc": "",
              "name": "flags",
              "kind": "var",
              "type": "SDL_MessageBoxFlags"
            },
            "window": {
              "doc": "Parent window, can be NULL",
              "name": "window",
              "kind": "var",
              "type": "SDL_Window *"
            },
            "title": {
              "doc": "UTF-8 title",
              "name": "title",
              "kind": "var",
              "type": "const char *"
            },
            "message": {
              "doc": "UTF-8 message text",
              "name": "message",
              "kind": "var",
              "type": "const char *"
            },
            "numbuttons": {
              "doc": "",
              "name": "numbuttons",
              "kind": "var",
              "type": "int"
            },
            "buttons": {
              "doc": "",
              "name": "buttons",
              "kind": "var",
              "type": "SDL_MessageBoxButtonData"
            },
            "colorScheme": {
              "doc": "SDL_MessageBoxColorScheme, can be NULL to use system settings",
              "name": "colorScheme",
              "kind": "var",
              "type": "SDL_MessageBoxColorScheme"
            }
          }
        },
        "SDL_ShowMessageBox": {
          "doc": "Create a modal message box.\n\nIf your needs aren't complex, it might be easier to use\nSDL_ShowSimpleMessageBox.\n\nThis function should be called on the thread that created the parent\nwindow, or on the main thread if the messagebox has no parent. It will\nblock execution of that thread until the user clicks a button or closes the\nmessagebox.\n\nThis function may be called at any time, even before SDL_Init(). This makes\nit useful for reporting errors like a failure to create a renderer or\nOpenGL context.\n\nOn X11, SDL rolls its own dialog box with X11 primitives instead of a\nformal toolkit like GTK+ or Qt.\n\nNote that if SDL_Init() would fail because there isn't any available video\ntarget, this function is likely to fail for the same reasons. If this is a\nconcern, check the return value from this function and fall back to writing\nto stderr if you can.\n\n\\param messageboxdata the SDL_MessageBoxData structure with title, text and\n                      other options.\n\\param buttonid the pointer to which user id of hit button should be\n                copied.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ShowSimpleMessageBox",
          "name": "SDL_ShowMessageBox",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "messageboxdata",
              "type": "const SDL_MessageBoxData *"
            },
            {
              "name": "buttonid",
              "type": "int *"
            }
          ]
        },
        "SDL_ShowSimpleMessageBox": {
          "doc": "Display a simple modal message box.\n\nIf your needs aren't complex, this function is preferred over\nSDL_ShowMessageBox.\n\n`flags` may be any of the following:\n\n- `SDL_MESSAGEBOX_ERROR`: error dialog\n- `SDL_MESSAGEBOX_WARNING`: warning dialog\n- `SDL_MESSAGEBOX_INFORMATION`: informational dialog\n\nThis function should be called on the thread that created the parent\nwindow, or on the main thread if the messagebox has no parent. It will\nblock execution of that thread until the user clicks a button or closes the\nmessagebox.\n\nThis function may be called at any time, even before SDL_Init(). This makes\nit useful for reporting errors like a failure to create a renderer or\nOpenGL context.\n\nOn X11, SDL rolls its own dialog box with X11 primitives instead of a\nformal toolkit like GTK+ or Qt.\n\nNote that if SDL_Init() would fail because there isn't any available video\ntarget, this function is likely to fail for the same reasons. If this is a\nconcern, check the return value from this function and fall back to writing\nto stderr if you can.\n\n\\param flags an SDL_MessageBoxFlags value.\n\\param title UTF-8 title text.\n\\param message UTF-8 message text.\n\\param window the parent window, or NULL for no parent.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ShowMessageBox",
          "name": "SDL_ShowSimpleMessageBox",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "flags",
              "type": "SDL_MessageBoxFlags"
            },
            {
              "name": "title",
              "type": "const char *"
            },
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        }
      }
    },
    "SDL_dialog.h": {
      "name": "SDL_dialog.h",
      "doc": "# CategoryDialog\n\nFile dialog support.\n\nSDL offers file dialogs, to let users select files with native GUI\ninterfaces. There are \"open\" dialogs, \"save\" dialogs, and folder selection\ndialogs. The app can control some details, such as filtering to specific\nfiles, or whether multiple files can be selected by the user.\n\nNote that launching a file dialog is a non-blocking operation; control\nreturns to the app immediately, and a callback is called later (possibly in\nanother thread) when the user makes a choice.",
      "entries": {
        "SDL_DialogFileFilter": {
          "doc": "An entry for filters for file dialogs.\n\n`name` is a user-readable label for the filter (for example, \"Office\ndocument\").\n\n`pattern` is a semicolon-separated list of file extensions (for example,\n\"doc;docx\"). File extensions may only contain alphanumeric characters,\nhyphens, underscores and periods. Alternatively, the whole string can be a\nsingle asterisk (\"*\"), which serves as an \"All files\" filter.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_DialogFileCallback\n\\sa SDL_ShowOpenFileDialog\n\\sa SDL_ShowSaveFileDialog\n\\sa SDL_ShowOpenFolderDialog\n\\sa SDL_ShowFileDialogWithProperties",
          "name": "SDL_DialogFileFilter",
          "kind": "struct",
          "entries": {
            "name": {
              "doc": "",
              "name": "name",
              "kind": "var",
              "type": "const char *"
            },
            "pattern": {
              "doc": "",
              "name": "pattern",
              "kind": "var",
              "type": "const char *"
            }
          }
        },
        "SDL_DialogFileCallback": {
          "doc": "Callback used by file dialog functions.\n\nThe specific usage is described in each function.\n\nIf `filelist` is:\n\n- NULL, an error occurred. Details can be obtained with SDL_GetError().\n- A pointer to NULL, the user either didn't choose any file or canceled the\n  dialog.\n- A pointer to non-`NULL`, the user chose one or more files. The argument\n  is a null-terminated array of pointers to UTF-8 encoded strings, each\n  containing a path.\n\nThe filelist argument should not be freed; it will automatically be freed\nwhen the callback returns.\n\nThe filter argument is the index of the filter that was selected, or -1 if\nno filter was selected or if the platform or method doesn't support\nfetching the selected filter.\n\nIn Android, the `filelist` are `content://` URIs. They should be opened\nusing SDL_IOFromFile() with appropriate modes. This applies both to open\nand save file dialog.\n\n\\param userdata an app-provided pointer, for the callback's use.\n\\param filelist the file(s) chosen by the user.\n\\param filter index of the selected filter.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_DialogFileFilter\n\\sa SDL_ShowOpenFileDialog\n\\sa SDL_ShowSaveFileDialog\n\\sa SDL_ShowOpenFolderDialog\n\\sa SDL_ShowFileDialogWithProperties",
          "name": "SDL_DialogFileCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "filelist",
              "type": "const char *const *"
            },
            {
              "name": "filter",
              "type": "int"
            }
          ]
        },
        "SDL_ShowOpenFileDialog": {
          "doc": "Displays a dialog that lets the user select a file on their filesystem.\n\nThis is an asynchronous function; it will return immediately, and the\nresult will be passed to the callback.\n\nThe callback will be invoked with a null-terminated list of files the user\nchose. The list will be empty if the user canceled the dialog, and it will\nbe NULL if an error occurred.\n\nNote that the callback may be called from a different thread than the one\nthe function was invoked on.\n\nDepending on the platform, the user may be allowed to input paths that\ndon't yet exist.\n\nOn Linux, dialogs may require XDG Portals, which requires DBus, which\nrequires an event-handling loop. Apps that do not use SDL to handle events\nshould add a call to SDL_PumpEvents in their main loop.\n\n\\param callback a function pointer to be invoked when the user selects a\n                file and accepts, or cancels the dialog, or an error\n                occurs.\n\\param userdata an optional pointer to pass extra data to the callback when\n                it will be invoked.\n\\param window the window that the dialog should be modal for, may be NULL.\n              Not all platforms support this option.\n\\param filters a list of filters, may be NULL. Not all platforms support\n               this option, and platforms that do support it may allow the\n               user to ignore the filters. If non-NULL, it must remain\n               valid at least until the callback is invoked.\n\\param nfilters the number of filters. Ignored if filters is NULL.\n\\param default_location the default folder or file to start the dialog at,\n                        may be NULL. Not all platforms support this option.\n\\param allow_many if non-zero, the user will be allowed to select multiple\n                  entries. Not all platforms support this option.\n\n\\threadsafety This function should be called only from the main thread. The\n              callback may be invoked from the same thread or from a\n              different one, depending on the OS's constraints.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DialogFileCallback\n\\sa SDL_DialogFileFilter\n\\sa SDL_ShowSaveFileDialog\n\\sa SDL_ShowOpenFolderDialog\n\\sa SDL_ShowFileDialogWithProperties",
          "name": "SDL_ShowOpenFileDialog",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_DialogFileCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "filters",
              "type": "const SDL_DialogFileFilter *"
            },
            {
              "name": "nfilters",
              "type": "int"
            },
            {
              "name": "default_location",
              "type": "const char *"
            },
            {
              "name": "allow_many",
              "type": "bool"
            }
          ]
        },
        "SDL_ShowSaveFileDialog": {
          "doc": "Displays a dialog that lets the user choose a new or existing file on their\nfilesystem.\n\nThis is an asynchronous function; it will return immediately, and the\nresult will be passed to the callback.\n\nThe callback will be invoked with a null-terminated list of files the user\nchose. The list will be empty if the user canceled the dialog, and it will\nbe NULL if an error occurred.\n\nNote that the callback may be called from a different thread than the one\nthe function was invoked on.\n\nThe chosen file may or may not already exist.\n\nOn Linux, dialogs may require XDG Portals, which requires DBus, which\nrequires an event-handling loop. Apps that do not use SDL to handle events\nshould add a call to SDL_PumpEvents in their main loop.\n\n\\param callback a function pointer to be invoked when the user selects a\n                file and accepts, or cancels the dialog, or an error\n                occurs.\n\\param userdata an optional pointer to pass extra data to the callback when\n                it will be invoked.\n\\param window the window that the dialog should be modal for, may be NULL.\n              Not all platforms support this option.\n\\param filters a list of filters, may be NULL. Not all platforms support\n               this option, and platforms that do support it may allow the\n               user to ignore the filters. If non-NULL, it must remain\n               valid at least until the callback is invoked.\n\\param nfilters the number of filters. Ignored if filters is NULL.\n\\param default_location the default folder or file to start the dialog at,\n                        may be NULL. Not all platforms support this option.\n\n\\threadsafety This function should be called only from the main thread. The\n              callback may be invoked from the same thread or from a\n              different one, depending on the OS's constraints.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DialogFileCallback\n\\sa SDL_DialogFileFilter\n\\sa SDL_ShowOpenFileDialog\n\\sa SDL_ShowOpenFolderDialog\n\\sa SDL_ShowFileDialogWithProperties",
          "name": "SDL_ShowSaveFileDialog",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_DialogFileCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "filters",
              "type": "const SDL_DialogFileFilter *"
            },
            {
              "name": "nfilters",
              "type": "int"
            },
            {
              "name": "default_location",
              "type": "const char *"
            }
          ]
        },
        "SDL_ShowOpenFolderDialog": {
          "doc": "Displays a dialog that lets the user select a folder on their filesystem.\n\nThis is an asynchronous function; it will return immediately, and the\nresult will be passed to the callback.\n\nThe callback will be invoked with a null-terminated list of files the user\nchose. The list will be empty if the user canceled the dialog, and it will\nbe NULL if an error occurred.\n\nNote that the callback may be called from a different thread than the one\nthe function was invoked on.\n\nDepending on the platform, the user may be allowed to input paths that\ndon't yet exist.\n\nOn Linux, dialogs may require XDG Portals, which requires DBus, which\nrequires an event-handling loop. Apps that do not use SDL to handle events\nshould add a call to SDL_PumpEvents in their main loop.\n\n\\param callback a function pointer to be invoked when the user selects a\n                file and accepts, or cancels the dialog, or an error\n                occurs.\n\\param userdata an optional pointer to pass extra data to the callback when\n                it will be invoked.\n\\param window the window that the dialog should be modal for, may be NULL.\n              Not all platforms support this option.\n\\param default_location the default folder or file to start the dialog at,\n                        may be NULL. Not all platforms support this option.\n\\param allow_many if non-zero, the user will be allowed to select multiple\n                  entries. Not all platforms support this option.\n\n\\threadsafety This function should be called only from the main thread. The\n              callback may be invoked from the same thread or from a\n              different one, depending on the OS's constraints.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DialogFileCallback\n\\sa SDL_ShowOpenFileDialog\n\\sa SDL_ShowSaveFileDialog\n\\sa SDL_ShowFileDialogWithProperties",
          "name": "SDL_ShowOpenFolderDialog",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_DialogFileCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "default_location",
              "type": "const char *"
            },
            {
              "name": "allow_many",
              "type": "bool"
            }
          ]
        },
        "SDL_FileDialogType": {
          "doc": "Various types of file dialogs.\n\nThis is used by SDL_ShowFileDialogWithProperties() to decide what kind of\ndialog to present to the user.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_ShowFileDialogWithProperties",
          "name": "SDL_FileDialogType",
          "kind": "enum",
          "entries": {
            "SDL_FILEDIALOG_OPENFILE": {
              "doc": "",
              "name": "SDL_FILEDIALOG_OPENFILE",
              "kind": "var",
              "type": ""
            },
            "SDL_FILEDIALOG_SAVEFILE": {
              "doc": "",
              "name": "SDL_FILEDIALOG_SAVEFILE",
              "kind": "var",
              "type": ""
            },
            "SDL_FILEDIALOG_OPENFOLDER": {
              "doc": "",
              "name": "SDL_FILEDIALOG_OPENFOLDER",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_ShowFileDialogWithProperties": {
          "doc": "Create and launch a file dialog with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_FILE_DIALOG_FILTERS_POINTER`: a pointer to a list of\n  SDL_DialogFileFilter structs, which will be used as filters for\n  file-based selections. Ignored if the dialog is an \"Open Folder\" dialog.\n  If non-NULL, the array of filters must remain valid at least until the\n  callback is invoked.\n- `SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER`: the number of filters in the\n  array of filters, if it exists.\n- `SDL_PROP_FILE_DIALOG_WINDOW_POINTER`: the window that the dialog should\n  be modal for.\n- `SDL_PROP_FILE_DIALOG_LOCATION_STRING`: the default folder or file to\n  start the dialog at.\n- `SDL_PROP_FILE_DIALOG_MANY_BOOLEAN`: true to allow the user to select\n  more than one entry.\n- `SDL_PROP_FILE_DIALOG_TITLE_STRING`: the title for the dialog.\n- `SDL_PROP_FILE_DIALOG_ACCEPT_STRING`: the label that the accept button\n  should have.\n- `SDL_PROP_FILE_DIALOG_CANCEL_STRING`: the label that the cancel button\n  should have.\n\nNote that each platform may or may not support any of the properties.\n\n\\param type the type of file dialog.\n\\param callback a function pointer to be invoked when the user selects a\n                file and accepts, or cancels the dialog, or an error\n                occurs.\n\\param userdata an optional pointer to pass extra data to the callback when\n                it will be invoked.\n\\param props the properties to use.\n\n\\threadsafety This function should be called only from the main thread. The\n              callback may be invoked from the same thread or from a\n              different one, depending on the OS's constraints.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FileDialogType\n\\sa SDL_DialogFileCallback\n\\sa SDL_DialogFileFilter\n\\sa SDL_ShowOpenFileDialog\n\\sa SDL_ShowSaveFileDialog\n\\sa SDL_ShowOpenFolderDialog",
          "name": "SDL_ShowFileDialogWithProperties",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "type",
              "type": "SDL_FileDialogType"
            },
            {
              "name": "callback",
              "type": "SDL_DialogFileCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_FILE_DIALOG_FILTERS_POINTER": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_FILTERS_POINTER",
          "kind": "def",
          "value": "\"SDL.filedialog.filters\""
        },
        "SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER",
          "kind": "def",
          "value": "\"SDL.filedialog.nfilters\""
        },
        "SDL_PROP_FILE_DIALOG_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_WINDOW_POINTER",
          "kind": "def",
          "value": "\"SDL.filedialog.window\""
        },
        "SDL_PROP_FILE_DIALOG_LOCATION_STRING": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_LOCATION_STRING",
          "kind": "def",
          "value": "\"SDL.filedialog.location\""
        },
        "SDL_PROP_FILE_DIALOG_MANY_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_MANY_BOOLEAN",
          "kind": "def",
          "value": "\"SDL.filedialog.many\""
        },
        "SDL_PROP_FILE_DIALOG_TITLE_STRING": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_TITLE_STRING",
          "kind": "def",
          "value": "\"SDL.filedialog.title\""
        },
        "SDL_PROP_FILE_DIALOG_ACCEPT_STRING": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_ACCEPT_STRING",
          "kind": "def",
          "value": "\"SDL.filedialog.accept\""
        },
        "SDL_PROP_FILE_DIALOG_CANCEL_STRING": {
          "doc": "",
          "name": "SDL_PROP_FILE_DIALOG_CANCEL_STRING",
          "kind": "def",
          "value": "\"SDL.filedialog.cancel\""
        }
      }
    },
    "SDL_tray.h": {
      "name": "SDL_tray.h",
      "doc": "# CategoryTray\n\nSDL offers a way to add items to the \"system tray\" (more correctly called\nthe \"notification area\" on Windows). On platforms that offer this concept,\nan SDL app can add a tray icon, submenus, checkboxes, and clickable\nentries, and register a callback that is fired when the user clicks on\nthese pieces.",
      "entries": {
        "SDL_Tray": {
          "doc": "An opaque handle representing a toplevel system tray object.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Tray",
          "kind": "alias",
          "type": "struct SDL_Tray"
        },
        "SDL_TrayMenu": {
          "doc": "An opaque handle representing a menu/submenu on a system tray object.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_TrayMenu",
          "kind": "alias",
          "type": "struct SDL_TrayMenu"
        },
        "SDL_TrayEntry": {
          "doc": "An opaque handle representing an entry on a system tray object.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_TrayEntry",
          "kind": "alias",
          "type": "struct SDL_TrayEntry"
        },
        "SDL_TrayEntryFlags": {
          "doc": "Flags that control the creation of system tray entries.\n\nSome of these flags are required; exactly one of them must be specified at\nthe time a tray entry is created. Other flags are optional; zero or more of\nthose can be OR'ed together with the required flag.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_InsertTrayEntryAt",
          "name": "SDL_TrayEntryFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_TRAYENTRY_BUTTON": {
          "doc": "Make the entry a simple button. Required.",
          "name": "SDL_TRAYENTRY_BUTTON",
          "kind": "def",
          "value": "0x00000001u"
        },
        "SDL_TRAYENTRY_CHECKBOX": {
          "doc": "Make the entry a checkbox. Required.",
          "name": "SDL_TRAYENTRY_CHECKBOX",
          "kind": "def",
          "value": "0x00000002u"
        },
        "SDL_TRAYENTRY_SUBMENU": {
          "doc": "Prepare the entry to have a submenu. Required",
          "name": "SDL_TRAYENTRY_SUBMENU",
          "kind": "def",
          "value": "0x00000004u"
        },
        "SDL_TRAYENTRY_DISABLED": {
          "doc": "Make the entry disabled. Optional.",
          "name": "SDL_TRAYENTRY_DISABLED",
          "kind": "def",
          "value": "0x80000000u"
        },
        "SDL_TRAYENTRY_CHECKED": {
          "doc": "Make the entry checked. This is valid only for checkboxes. Optional.",
          "name": "SDL_TRAYENTRY_CHECKED",
          "kind": "def",
          "value": "0x40000000u"
        },
        "SDL_TrayCallback": {
          "doc": "A callback that is invoked when a tray entry is selected.\n\n\\param userdata an optional pointer to pass extra data to the callback when\n                it will be invoked.\n\\param entry the tray entry that was selected.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetTrayEntryCallback",
          "name": "SDL_TrayCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_CreateTray": {
          "doc": "Create an icon to be placed in the operating system's tray, or equivalent.\n\nMany platforms advise not using a system tray unless persistence is a\nnecessary feature. Avoid needlessly creating a tray icon, as the user may\nfeel like it clutters their interface.\n\nUsing tray icons require the video subsystem.\n\n\\param icon a surface to be used as icon. May be NULL.\n\\param tooltip a tooltip to be displayed when the mouse hovers the icon in\n               UTF-8 encoding. Not supported on all platforms. May be NULL.\n\\returns The newly created system tray icon.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTrayMenu\n\\sa SDL_GetTrayMenu\n\\sa SDL_DestroyTray",
          "name": "SDL_CreateTray",
          "kind": "function",
          "type": "SDL_Tray *",
          "parameters": [
            {
              "name": "icon",
              "type": "SDL_Surface *"
            },
            {
              "name": "tooltip",
              "type": "const char *"
            }
          ]
        },
        "SDL_SetTrayIcon": {
          "doc": "Updates the system tray icon's icon.\n\n\\param tray the tray icon to be updated.\n\\param icon the new icon. May be NULL.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTray",
          "name": "SDL_SetTrayIcon",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "tray",
              "type": "SDL_Tray *"
            },
            {
              "name": "icon",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetTrayTooltip": {
          "doc": "Updates the system tray icon's tooltip.\n\n\\param tray the tray icon to be updated.\n\\param tooltip the new tooltip in UTF-8 encoding. May be NULL.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTray",
          "name": "SDL_SetTrayTooltip",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "tray",
              "type": "SDL_Tray *"
            },
            {
              "name": "tooltip",
              "type": "const char *"
            }
          ]
        },
        "SDL_CreateTrayMenu": {
          "doc": "Create a menu for a system tray.\n\nThis should be called at most once per tray icon.\n\nThis function does the same thing as SDL_CreateTraySubmenu(), except that\nit takes a SDL_Tray instead of a SDL_TrayEntry.\n\nA menu does not need to be destroyed; it will be destroyed with the tray.\n\n\\param tray the tray to bind the menu to.\n\\returns the newly created menu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTray\n\\sa SDL_GetTrayMenu\n\\sa SDL_GetTrayMenuParentTray",
          "name": "SDL_CreateTrayMenu",
          "kind": "function",
          "type": "SDL_TrayMenu *",
          "parameters": [
            {
              "name": "tray",
              "type": "SDL_Tray *"
            }
          ]
        },
        "SDL_CreateTraySubmenu": {
          "doc": "Create a submenu for a system tray entry.\n\nThis should be called at most once per tray entry.\n\nThis function does the same thing as SDL_CreateTrayMenu, except that it\ntakes a SDL_TrayEntry instead of a SDL_Tray.\n\nA menu does not need to be destroyed; it will be destroyed with the tray.\n\n\\param entry the tray entry to bind the menu to.\n\\returns the newly created menu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_GetTraySubmenu\n\\sa SDL_GetTrayMenuParentEntry",
          "name": "SDL_CreateTraySubmenu",
          "kind": "function",
          "type": "SDL_TrayMenu *",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_GetTrayMenu": {
          "doc": "Gets a previously created tray menu.\n\nYou should have called SDL_CreateTrayMenu() on the tray object. This\nfunction allows you to fetch it again later.\n\nThis function does the same thing as SDL_GetTraySubmenu(), except that it\ntakes a SDL_Tray instead of a SDL_TrayEntry.\n\nA menu does not need to be destroyed; it will be destroyed with the tray.\n\n\\param tray the tray entry to bind the menu to.\n\\returns the newly created menu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTray\n\\sa SDL_CreateTrayMenu",
          "name": "SDL_GetTrayMenu",
          "kind": "function",
          "type": "SDL_TrayMenu *",
          "parameters": [
            {
              "name": "tray",
              "type": "SDL_Tray *"
            }
          ]
        },
        "SDL_GetTraySubmenu": {
          "doc": "Gets a previously created tray entry submenu.\n\nYou should have called SDL_CreateTraySubmenu() on the entry object. This\nfunction allows you to fetch it again later.\n\nThis function does the same thing as SDL_GetTrayMenu(), except that it\ntakes a SDL_TrayEntry instead of a SDL_Tray.\n\nA menu does not need to be destroyed; it will be destroyed with the tray.\n\n\\param entry the tray entry to bind the menu to.\n\\returns the newly created menu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_CreateTraySubmenu",
          "name": "SDL_GetTraySubmenu",
          "kind": "function",
          "type": "SDL_TrayMenu *",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_GetTrayEntries": {
          "doc": "Returns a list of entries in the menu, in order.\n\n\\param menu The menu to get entries from.\n\\param count An optional pointer to obtain the number of entries in the\n             menu.\n\\returns a NULL-terminated list of entries within the given menu. The\n         pointer becomes invalid when any function that inserts or deletes\n         entries in the menu is called.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RemoveTrayEntry\n\\sa SDL_InsertTrayEntryAt",
          "name": "SDL_GetTrayEntries",
          "kind": "function",
          "type": "const SDL_TrayEntry **",
          "parameters": [
            {
              "name": "menu",
              "type": "SDL_TrayMenu *"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_RemoveTrayEntry": {
          "doc": "Removes a tray entry.\n\n\\param entry The entry to be deleted.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt",
          "name": "SDL_RemoveTrayEntry",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_InsertTrayEntryAt": {
          "doc": "Insert a tray entry at a given position.\n\nIf label is NULL, the entry will be a separator. Many functions won't work\nfor an entry that is a separator.\n\nAn entry does not need to be destroyed; it will be destroyed with the tray.\n\n\\param menu the menu to append the entry to.\n\\param pos the desired position for the new entry. Entries at or following\n           this place will be moved. If pos is -1, the entry is appended.\n\\param label the text to be displayed on the entry, in UTF-8 encoding, or\n             NULL for a separator.\n\\param flags a combination of flags, some of which are mandatory.\n\\returns the newly created entry, or NULL if pos is out of bounds.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_TrayEntryFlags\n\\sa SDL_GetTrayEntries\n\\sa SDL_RemoveTrayEntry\n\\sa SDL_GetTrayEntryParent",
          "name": "SDL_InsertTrayEntryAt",
          "kind": "function",
          "type": "SDL_TrayEntry *",
          "parameters": [
            {
              "name": "menu",
              "type": "SDL_TrayMenu *"
            },
            {
              "name": "pos",
              "type": "int"
            },
            {
              "name": "label",
              "type": "const char *"
            },
            {
              "name": "flags",
              "type": "SDL_TrayEntryFlags"
            }
          ]
        },
        "SDL_SetTrayEntryLabel": {
          "doc": "Sets the label of an entry.\n\nAn entry cannot change between a separator and an ordinary entry; that is,\nit is not possible to set a non-NULL label on an entry that has a NULL\nlabel (separators), or to set a NULL label to an entry that has a non-NULL\nlabel. The function will silently fail if that happens.\n\n\\param entry the entry to be updated.\n\\param label the new label for the entry in UTF-8 encoding.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_GetTrayEntryLabel",
          "name": "SDL_SetTrayEntryLabel",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            },
            {
              "name": "label",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetTrayEntryLabel": {
          "doc": "Gets the label of an entry.\n\nIf the returned value is NULL, the entry is a separator.\n\n\\param entry the entry to be read.\n\\returns the label of the entry in UTF-8 encoding.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_SetTrayEntryLabel",
          "name": "SDL_GetTrayEntryLabel",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_SetTrayEntryChecked": {
          "doc": "Sets whether or not an entry is checked.\n\nThe entry must have been created with the SDL_TRAYENTRY_CHECKBOX flag.\n\n\\param entry the entry to be updated.\n\\param checked true if the entry should be checked; false otherwise.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_GetTrayEntryChecked",
          "name": "SDL_SetTrayEntryChecked",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            },
            {
              "name": "checked",
              "type": "bool"
            }
          ]
        },
        "SDL_GetTrayEntryChecked": {
          "doc": "Gets whether or not an entry is checked.\n\nThe entry must have been created with the SDL_TRAYENTRY_CHECKBOX flag.\n\n\\param entry the entry to be read.\n\\returns true if the entry is checked; false otherwise.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_SetTrayEntryChecked",
          "name": "SDL_GetTrayEntryChecked",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_SetTrayEntryEnabled": {
          "doc": "Sets whether or not an entry is enabled.\n\n\\param entry the entry to be updated.\n\\param enabled true if the entry should be enabled; false otherwise.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_GetTrayEntryEnabled",
          "name": "SDL_SetTrayEntryEnabled",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_GetTrayEntryEnabled": {
          "doc": "Gets whether or not an entry is enabled.\n\n\\param entry the entry to be read.\n\\returns true if the entry is enabled; false otherwise.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt\n\\sa SDL_SetTrayEntryEnabled",
          "name": "SDL_GetTrayEntryEnabled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_SetTrayEntryCallback": {
          "doc": "Sets a callback to be invoked when the entry is selected.\n\n\\param entry the entry to be updated.\n\\param callback a callback to be invoked when the entry is selected.\n\\param userdata an optional pointer to pass extra data to the callback when\n                it will be invoked.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTrayEntries\n\\sa SDL_InsertTrayEntryAt",
          "name": "SDL_SetTrayEntryCallback",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            },
            {
              "name": "callback",
              "type": "SDL_TrayCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_ClickTrayEntry": {
          "doc": "Simulate a click on a tray entry.\n\n\\param entry The entry to activate.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ClickTrayEntry",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_DestroyTray": {
          "doc": "Destroys a tray object.\n\nThis also destroys all associated menus and entries.\n\n\\param tray the tray icon to be destroyed.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTray",
          "name": "SDL_DestroyTray",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "tray",
              "type": "SDL_Tray *"
            }
          ]
        },
        "SDL_GetTrayEntryParent": {
          "doc": "Gets the menu containing a certain tray entry.\n\n\\param entry the entry for which to get the parent menu.\n\\returns the parent menu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_InsertTrayEntryAt",
          "name": "SDL_GetTrayEntryParent",
          "kind": "function",
          "type": "SDL_TrayMenu *",
          "parameters": [
            {
              "name": "entry",
              "type": "SDL_TrayEntry *"
            }
          ]
        },
        "SDL_GetTrayMenuParentEntry": {
          "doc": "Gets the entry for which the menu is a submenu, if the current menu is a\nsubmenu.\n\nEither this function or SDL_GetTrayMenuParentTray() will return non-NULL\nfor any given menu.\n\n\\param menu the menu for which to get the parent entry.\n\\returns the parent entry, or NULL if this menu is not a submenu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTraySubmenu\n\\sa SDL_GetTrayMenuParentTray",
          "name": "SDL_GetTrayMenuParentEntry",
          "kind": "function",
          "type": "SDL_TrayEntry *",
          "parameters": [
            {
              "name": "menu",
              "type": "SDL_TrayMenu *"
            }
          ]
        },
        "SDL_GetTrayMenuParentTray": {
          "doc": "Gets the tray for which this menu is the first-level menu, if the current\nmenu isn't a submenu.\n\nEither this function or SDL_GetTrayMenuParentEntry() will return non-NULL\nfor any given menu.\n\n\\param menu the menu for which to get the parent enttrayry.\n\\returns the parent tray, or NULL if this menu is a submenu.\n\n\\threadsafety This function should be called on the thread that created the\n              tray.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTrayMenu\n\\sa SDL_GetTrayMenuParentEntry",
          "name": "SDL_GetTrayMenuParentTray",
          "kind": "function",
          "type": "SDL_Tray *",
          "parameters": [
            {
              "name": "menu",
              "type": "SDL_TrayMenu *"
            }
          ]
        },
        "SDL_UpdateTrays": {
          "doc": "Update the trays.\n\nThis is called automatically by the event loop and is only needed if you're\nusing trays but aren't handling SDL events.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_UpdateTrays",
          "kind": "function",
          "type": "void",
          "parameters": []
        }
      }
    },
    "SDL_locale.h": {
      "name": "SDL_locale.h",
      "doc": "# CategoryLocale\n\nSDL locale services.\n\nThis provides a way to get a list of preferred locales (language plus\ncountry) for the user. There is exactly one function:\nSDL_GetPreferredLocales(), which handles all the heavy lifting, and offers\ndocumentation on all the strange ways humans might have configured their\nlanguage settings.",
      "entries": {
        "SDL_Locale": {
          "doc": "A struct to provide locale data.\n\nLocale data is split into a spoken language, like English, and an optional\ncountry, like Canada. The language will be in ISO-639 format (so English\nwould be \"en\"), and the country, if not NULL, will be an ISO-3166 country\ncode (so Canada would be \"CA\").\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPreferredLocales",
          "name": "SDL_Locale",
          "kind": "struct",
          "entries": {
            "language": {
              "doc": "A language name, like \"en\" for English.",
              "name": "language",
              "kind": "var",
              "type": "const char *"
            },
            "country": {
              "doc": "A country, like \"US\" for America. Can be NULL.",
              "name": "country",
              "kind": "var",
              "type": "const char *"
            }
          }
        },
        "SDL_GetPreferredLocales": {
          "doc": "Report the user's preferred locale.\n\nReturned language strings are in the format xx, where 'xx' is an ISO-639\nlanguage specifier (such as \"en\" for English, \"de\" for German, etc).\nCountry strings are in the format YY, where \"YY\" is an ISO-3166 country\ncode (such as \"US\" for the United States, \"CA\" for Canada, etc). Country\nmight be NULL if there's no specific guidance on them (so you might get {\n\"en\", \"US\" } for American English, but { \"en\", NULL } means \"English\nlanguage, generically\"). Language strings are never NULL, except to\nterminate the array.\n\nPlease note that not all of these strings are 2 characters; some are three\nor more.\n\nThe returned list of locales are in the order of the user's preference. For\nexample, a German citizen that is fluent in US English and knows enough\nJapanese to navigate around Tokyo might have a list like: { \"de\", \"en_US\",\n\"jp\", NULL }. Someone from England might prefer British English (where\n\"color\" is spelled \"colour\", etc), but will settle for anything like it: {\n\"en_GB\", \"en\", NULL }.\n\nThis function returns NULL on error, including when the platform does not\nsupply this information at all.\n\nThis might be a \"slow\" call that has to query the operating system. It's\nbest to ask for this once and save the results. However, this list can\nchange, usually because the user has changed a system preference outside of\nyour program; SDL will send an SDL_EVENT_LOCALE_CHANGED event in this case,\nif possible, and you can call this function again to get an updated copy of\npreferred locales.\n\n\\param count a pointer filled in with the number of locales returned, may\n             be NULL.\n\\returns a NULL terminated array of locale pointers, or NULL on failure;\n         call SDL_GetError() for more information. This is a single\n         allocation that should be freed with SDL_free() when it is no\n         longer needed.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPreferredLocales",
          "kind": "function",
          "type": "SDL_Locale **",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        }
      }
    },
    "SDL_system.h": {
      "name": "SDL_system.h",
      "doc": "# CategorySystem\n\nPlatform-specific SDL API functions. These are functions that deal with\nneeds of specific operating systems, that didn't make sense to offer as\nplatform-independent, generic APIs.\n\nMost apps can make do without these functions, but they can be useful for\nintegrating with other parts of a specific system, adding platform-specific\npolish to an app, or solving problems that only affect one target.",
      "entries": {
        "MSG": {
          "doc": "",
          "name": "MSG",
          "kind": "alias",
          "type": "tagMSG"
        },
        "SDL_WindowsMessageHook": {
          "doc": "A callback to be used with SDL_SetWindowsMessageHook.\n\nThis callback may modify the message, and should return true if the message\nshould continue to be processed, or false to prevent further processing.\n\nAs this is processing a message directly from the Windows event loop, this\ncallback should do the minimum required work and return quickly.\n\n\\param userdata the app-defined pointer provided to\n                SDL_SetWindowsMessageHook.\n\\param msg a pointer to a Win32 event structure to process.\n\\returns true to let event continue on, false to drop it.\n\n\\threadsafety This may only be called (by SDL) from the thread handling the\n              Windows event loop.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowsMessageHook\n\\sa SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP",
          "name": "SDL_WindowsMessageHook",
          "kind": "callback",
          "type": "bool ",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "msg",
              "type": "MSG *"
            }
          ]
        },
        "SDL_SetWindowsMessageHook": {
          "doc": "Set a callback for every Windows message, run before TranslateMessage().\n\nThe callback may modify the message, and should return true if the message\nshould continue to be processed, or false to prevent further processing.\n\n\\param callback the SDL_WindowsMessageHook function to call.\n\\param userdata a pointer to pass to every iteration of `callback`.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_WindowsMessageHook\n\\sa SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP",
          "name": "SDL_SetWindowsMessageHook",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_WindowsMessageHook"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_GetDirect3D9AdapterIndex": {
          "doc": "Get the D3D9 adapter index that matches the specified display.\n\nThe returned adapter index can be passed to `IDirect3D9::CreateDevice` and\ncontrols on which monitor a full screen application will appear.\n\n\\param displayID the instance of the display to query.\n\\returns the D3D9 adapter index on success or -1 on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDirect3D9AdapterIndex",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDXGIOutputInfo": {
          "doc": "Get the DXGI Adapter and Output indices for the specified display.\n\nThe DXGI Adapter and Output indices can be passed to `EnumAdapters` and\n`EnumOutputs` respectively to get the objects required to create a DX10 or\nDX11 device and swap chain.\n\n\\param displayID the instance of the display to query.\n\\param adapterIndex a pointer to be filled in with the adapter index.\n\\param outputIndex a pointer to be filled in with the output index.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDXGIOutputInfo",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "adapterIndex",
              "type": "int *"
            },
            {
              "name": "outputIndex",
              "type": "int *"
            }
          ]
        },
        "XEvent": {
          "doc": "",
          "name": "XEvent",
          "kind": "alias",
          "type": "union _XEvent"
        },
        "SDL_X11EventHook": {
          "doc": "A callback to be used with SDL_SetX11EventHook.\n\nThis callback may modify the event, and should return true if the event\nshould continue to be processed, or false to prevent further processing.\n\nAs this is processing an event directly from the X11 event loop, this\ncallback should do the minimum required work and return quickly.\n\n\\param userdata the app-defined pointer provided to SDL_SetX11EventHook.\n\\param xevent a pointer to an Xlib XEvent union to process.\n\\returns true to let event continue on, false to drop it.\n\n\\threadsafety This may only be called (by SDL) from the thread handling the\n              X11 event loop.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetX11EventHook",
          "name": "SDL_X11EventHook",
          "kind": "callback",
          "type": "bool",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "xevent",
              "type": "XEvent *"
            }
          ]
        },
        "SDL_SetX11EventHook": {
          "doc": "Set a callback for every X11 event.\n\nThe callback may modify the event, and should return true if the event\nshould continue to be processed, or false to prevent further processing.\n\n\\param callback the SDL_X11EventHook function to call.\n\\param userdata a pointer to pass to every iteration of `callback`.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetX11EventHook",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "callback",
              "type": "SDL_X11EventHook"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetLinuxThreadPriority": {
          "doc": "Sets the UNIX nice value for a thread.\n\nThis uses setpriority() if possible, and RealtimeKit if available.\n\n\\param threadID the Unix thread ID to change priority of.\n\\param priority the new, Unix-specific, priority value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetLinuxThreadPriority",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "threadID",
              "type": "Sint64"
            },
            {
              "name": "priority",
              "type": "int"
            }
          ]
        },
        "SDL_SetLinuxThreadPriorityAndPolicy": {
          "doc": "Sets the priority (not nice level) and scheduling policy for a thread.\n\nThis uses setpriority() if possible, and RealtimeKit if available.\n\n\\param threadID the Unix thread ID to change priority of.\n\\param sdlPriority the new SDL_ThreadPriority value.\n\\param schedPolicy the new scheduling policy (SCHED_FIFO, SCHED_RR,\n                   SCHED_OTHER, etc...).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetLinuxThreadPriorityAndPolicy",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "threadID",
              "type": "Sint64"
            },
            {
              "name": "sdlPriority",
              "type": "int"
            },
            {
              "name": "schedPolicy",
              "type": "int"
            }
          ]
        },
        "SDL_iOSAnimationCallback": {
          "doc": "The prototype for an Apple iOS animation callback.\n\nThis datatype is only useful on Apple iOS.\n\nAfter passing a function pointer of this type to\nSDL_SetiOSAnimationCallback, the system will call that function pointer at\na regular interval.\n\n\\param userdata what was passed as `callbackParam` to\n                SDL_SetiOSAnimationCallback as `callbackParam`.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetiOSAnimationCallback",
          "name": "SDL_iOSAnimationCallback",
          "kind": "callback",
          "type": "void ",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetiOSAnimationCallback": {
          "doc": "Use this function to set the animation callback on Apple iOS.\n\nThe function prototype for `callback` is:\n\n```c\nvoid callback(void *callbackParam);\n```\n\nWhere its parameter, `callbackParam`, is what was passed as `callbackParam`\nto SDL_SetiOSAnimationCallback().\n\nThis function is only available on Apple iOS.\n\nFor more information see:\n\nhttps://wiki.libsdl.org/SDL3/README/ios\n\nNote that if you use the \"main callbacks\" instead of a standard C `main`\nfunction, you don't have to use this API, as SDL will manage this for you.\n\nDetails on main callbacks are here:\n\nhttps://wiki.libsdl.org/SDL3/README/main-functions\n\n\\param window the window for which the animation callback should be set.\n\\param interval the number of frames after which **callback** will be\n                called.\n\\param callback the function to call for every frame.\n\\param callbackParam a pointer that is passed to `callback`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetiOSEventPump",
          "name": "SDL_SetiOSAnimationCallback",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "interval",
              "type": "int"
            },
            {
              "name": "callback",
              "type": "SDL_iOSAnimationCallback"
            },
            {
              "name": "callbackParam",
              "type": "void *"
            }
          ]
        },
        "SDL_SetiOSEventPump": {
          "doc": "Use this function to enable or disable the SDL event pump on Apple iOS.\n\nThis function is only available on Apple iOS.\n\n\\param enabled true to enable the event pump, false to disable it.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetiOSAnimationCallback",
          "name": "SDL_SetiOSEventPump",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_GetAndroidJNIEnv": {
          "doc": "Get the Android Java Native Interface Environment of the current thread.\n\nThis is the JNIEnv one needs to access the Java virtual machine from native\ncode, and is needed for many Android APIs to be usable from C.\n\nThe prototype of the function in SDL's code actually declare a void* return\ntype, even if the implementation returns a pointer to a JNIEnv. The\nrationale being that the SDL headers can avoid including jni.h.\n\n\\returns a pointer to Java native interface object (JNIEnv) to which the\n         current thread is attached, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAndroidActivity",
          "name": "SDL_GetAndroidJNIEnv",
          "kind": "function",
          "type": "void *",
          "parameters": []
        },
        "SDL_GetAndroidActivity": {
          "doc": "Retrieve the Java instance of the Android activity class.\n\nThe prototype of the function in SDL's code actually declares a void*\nreturn type, even if the implementation returns a jobject. The rationale\nbeing that the SDL headers can avoid including jni.h.\n\nThe jobject returned by the function is a local reference and must be\nreleased by the caller. See the PushLocalFrame() and PopLocalFrame() or\nDeleteLocalRef() functions of the Java native interface:\n\nhttps://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html\n\n\\returns the jobject representing the instance of the Activity class of the\n         Android application, or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAndroidJNIEnv",
          "name": "SDL_GetAndroidActivity",
          "kind": "function",
          "type": "void *",
          "parameters": []
        },
        "SDL_GetAndroidSDKVersion": {
          "doc": "Query Android API level of the current device.\n\n- API level 35: Android 15 (VANILLA_ICE_CREAM)\n- API level 34: Android 14 (UPSIDE_DOWN_CAKE)\n- API level 33: Android 13 (TIRAMISU)\n- API level 32: Android 12L (S_V2)\n- API level 31: Android 12 (S)\n- API level 30: Android 11 (R)\n- API level 29: Android 10 (Q)\n- API level 28: Android 9 (P)\n- API level 27: Android 8.1 (O_MR1)\n- API level 26: Android 8.0 (O)\n- API level 25: Android 7.1 (N_MR1)\n- API level 24: Android 7.0 (N)\n- API level 23: Android 6.0 (M)\n- API level 22: Android 5.1 (LOLLIPOP_MR1)\n- API level 21: Android 5.0 (LOLLIPOP, L)\n- API level 20: Android 4.4W (KITKAT_WATCH)\n- API level 19: Android 4.4 (KITKAT)\n- API level 18: Android 4.3 (JELLY_BEAN_MR2)\n- API level 17: Android 4.2 (JELLY_BEAN_MR1)\n- API level 16: Android 4.1 (JELLY_BEAN)\n- API level 15: Android 4.0.3 (ICE_CREAM_SANDWICH_MR1)\n- API level 14: Android 4.0 (ICE_CREAM_SANDWICH)\n- API level 13: Android 3.2 (HONEYCOMB_MR2)\n- API level 12: Android 3.1 (HONEYCOMB_MR1)\n- API level 11: Android 3.0 (HONEYCOMB)\n- API level 10: Android 2.3.3 (GINGERBREAD_MR1)\n\n\\returns the Android API level.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetAndroidSDKVersion",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_IsChromebook": {
          "doc": "Query if the application is running on a Chromebook.\n\n\\returns true if this is a Chromebook, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_IsChromebook",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_IsDeXMode": {
          "doc": "Query if the application is running on a Samsung DeX docking station.\n\n\\returns true if this is a DeX docking station, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_IsDeXMode",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_SendAndroidBackButton": {
          "doc": "Trigger the Android system back button behavior.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SendAndroidBackButton",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_ANDROID_EXTERNAL_STORAGE_READ": {
          "doc": "See the official Android developer guide for more information:\nhttp://developer.android.com/guide/topics/data/data-storage.html\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ANDROID_EXTERNAL_STORAGE_READ",
          "kind": "def",
          "value": "0x01"
        },
        "SDL_ANDROID_EXTERNAL_STORAGE_WRITE": {
          "doc": "See the official Android developer guide for more information:\nhttp://developer.android.com/guide/topics/data/data-storage.html\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ANDROID_EXTERNAL_STORAGE_WRITE",
          "kind": "def",
          "value": "0x02"
        },
        "SDL_GetAndroidInternalStoragePath": {
          "doc": "Get the path used for internal storage for this Android application.\n\nThis path is unique to your application and cannot be written to by other\napplications.\n\nYour internal storage path is typically:\n`/data/data/your.app.package/files`.\n\nThis is a C wrapper over `android.content.Context.getFilesDir()`:\n\nhttps://developer.android.com/reference/android/content/Context#getFilesDir()\n\n\\returns the path used for internal storage or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAndroidExternalStoragePath\n\\sa SDL_GetAndroidCachePath",
          "name": "SDL_GetAndroidInternalStoragePath",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_GetAndroidExternalStorageState": {
          "doc": "Get the current state of external storage for this Android application.\n\nThe current state of external storage, a bitmask of these values:\n`SDL_ANDROID_EXTERNAL_STORAGE_READ`, `SDL_ANDROID_EXTERNAL_STORAGE_WRITE`.\n\nIf external storage is currently unavailable, this will return 0.\n\n\\returns the current state of external storage, or 0 if external storage is\n         currently unavailable.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAndroidExternalStoragePath",
          "name": "SDL_GetAndroidExternalStorageState",
          "kind": "function",
          "type": "Uint32",
          "parameters": []
        },
        "SDL_GetAndroidExternalStoragePath": {
          "doc": "Get the path used for external storage for this Android application.\n\nThis path is unique to your application, but is public and can be written\nto by other applications.\n\nYour external storage path is typically:\n`/storage/sdcard0/Android/data/your.app.package/files`.\n\nThis is a C wrapper over `android.content.Context.getExternalFilesDir()`:\n\nhttps://developer.android.com/reference/android/content/Context#getExternalFilesDir()\n\n\\returns the path used for external storage for this application on success\n         or NULL on failure; call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAndroidExternalStorageState\n\\sa SDL_GetAndroidInternalStoragePath\n\\sa SDL_GetAndroidCachePath",
          "name": "SDL_GetAndroidExternalStoragePath",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_GetAndroidCachePath": {
          "doc": "Get the path used for caching data for this Android application.\n\nThis path is unique to your application, but is public and can be written\nto by other applications.\n\nYour cache path is typically: `/data/data/your.app.package/cache/`.\n\nThis is a C wrapper over `android.content.Context.getCacheDir()`:\n\nhttps://developer.android.com/reference/android/content/Context#getCacheDir()\n\n\\returns the path used for caches for this application on success or NULL\n         on failure; call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetAndroidInternalStoragePath\n\\sa SDL_GetAndroidExternalStoragePath",
          "name": "SDL_GetAndroidCachePath",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_RequestAndroidPermissionCallback": {
          "doc": "Callback that presents a response from a SDL_RequestAndroidPermission call.\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\param permission the Android-specific permission name that was requested.\n\\param granted true if permission is granted, false if denied.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_RequestAndroidPermission",
          "name": "SDL_RequestAndroidPermissionCallback",
          "kind": "callback",
          "type": "void ",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "permission",
              "type": "const char *"
            },
            {
              "name": "granted",
              "type": "bool"
            }
          ]
        },
        "SDL_RequestAndroidPermission": {
          "doc": "Request permissions at runtime, asynchronously.\n\nYou do not need to call this for built-in functionality of SDL; recording\nfrom a microphone or reading images from a camera, using standard SDL APIs,\nwill manage permission requests for you.\n\nThis function never blocks. Instead, the app-supplied callback will be\ncalled when a decision has been made. This callback may happen on a\ndifferent thread, and possibly much later, as it might wait on a user to\nrespond to a system dialog. If permission has already been granted for a\nspecific entitlement, the callback will still fire, probably on the current\nthread and before this function returns.\n\nIf the request submission fails, this function returns -1 and the callback\nwill NOT be called, but this should only happen in catastrophic conditions,\nlike memory running out. Normally there will be a yes or no to the request\nthrough the callback.\n\nFor the `permission` parameter, choose a value from here:\n\nhttps://developer.android.com/reference/android/Manifest.permission\n\n\\param permission the permission to request.\n\\param cb the callback to trigger when the request has a response.\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\returns true if the request was submitted, false if there was an error\n         submitting. The result of the request is only ever reported\n         through the callback, not this return value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RequestAndroidPermission",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "permission",
              "type": "const char *"
            },
            {
              "name": "cb",
              "type": "SDL_RequestAndroidPermissionCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_ShowAndroidToast": {
          "doc": "Shows an Android toast notification.\n\nToasts are a sort of lightweight notification that are unique to Android.\n\nhttps://developer.android.com/guide/topics/ui/notifiers/toasts\n\nShows toast in UI thread.\n\nFor the `gravity` parameter, choose a value from here, or -1 if you don't\nhave a preference:\n\nhttps://developer.android.com/reference/android/view/Gravity\n\n\\param message text message to be shown.\n\\param duration 0=short, 1=long.\n\\param gravity where the notification should appear on the screen.\n\\param xoffset set this parameter only when gravity >=0.\n\\param yoffset set this parameter only when gravity >=0.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ShowAndroidToast",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "gravity",
              "type": "int"
            },
            {
              "name": "xoffset",
              "type": "int"
            },
            {
              "name": "yoffset",
              "type": "int"
            }
          ]
        },
        "SDL_SendAndroidMessage": {
          "doc": "Send a user command to SDLActivity.\n\nOverride \"boolean onUnhandledMessage(Message msg)\" to handle the message.\n\n\\param command user command that must be greater or equal to 0x8000.\n\\param param user parameter.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SendAndroidMessage",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "command",
              "type": "Uint32"
            },
            {
              "name": "param",
              "type": "int"
            }
          ]
        },
        "SDL_IsTablet": {
          "doc": "Query if the current device is a tablet.\n\nIf SDL can't determine this, it will return false.\n\n\\returns true if the device is a tablet, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_IsTablet",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_IsTV": {
          "doc": "Query if the current device is a TV.\n\nIf SDL can't determine this, it will return false.\n\n\\returns true if the device is a TV, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_IsTV",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_Sandbox": {
          "doc": "Application sandbox environment.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_Sandbox",
          "kind": "enum",
          "entries": {
            "SDL_SANDBOX_NONE": {
              "doc": "",
              "name": "SDL_SANDBOX_NONE",
              "kind": "var",
              "type": ""
            },
            "SDL_SANDBOX_UNKNOWN_CONTAINER": {
              "doc": "",
              "name": "SDL_SANDBOX_UNKNOWN_CONTAINER",
              "kind": "var",
              "type": ""
            },
            "SDL_SANDBOX_FLATPAK": {
              "doc": "",
              "name": "SDL_SANDBOX_FLATPAK",
              "kind": "var",
              "type": ""
            },
            "SDL_SANDBOX_SNAP": {
              "doc": "",
              "name": "SDL_SANDBOX_SNAP",
              "kind": "var",
              "type": ""
            },
            "SDL_SANDBOX_MACOS": {
              "doc": "",
              "name": "SDL_SANDBOX_MACOS",
              "kind": "var",
              "type": ""
            }
          }
        },
        "SDL_GetSandbox": {
          "doc": "Get the application sandbox environment, if any.\n\n\\returns the application sandbox environment or SDL_SANDBOX_NONE if the\n         application is not running in a sandbox environment.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSandbox",
          "kind": "function",
          "type": "SDL_Sandbox",
          "parameters": []
        },
        "SDL_OnApplicationWillTerminate": {
          "doc": "Let iOS apps with external event handling report\nonApplicationWillTerminate.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationWillTerminate",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_OnApplicationDidReceiveMemoryWarning": {
          "doc": "Let iOS apps with external event handling report\nonApplicationDidReceiveMemoryWarning.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationDidReceiveMemoryWarning",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_OnApplicationWillEnterBackground": {
          "doc": "Let iOS apps with external event handling report\nonApplicationWillResignActive.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationWillEnterBackground",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_OnApplicationDidEnterBackground": {
          "doc": "Let iOS apps with external event handling report\nonApplicationDidEnterBackground.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationDidEnterBackground",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_OnApplicationWillEnterForeground": {
          "doc": "Let iOS apps with external event handling report\nonApplicationWillEnterForeground.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationWillEnterForeground",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_OnApplicationDidEnterForeground": {
          "doc": "Let iOS apps with external event handling report\nonApplicationDidBecomeActive.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationDidEnterForeground",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_OnApplicationDidChangeStatusBarOrientation": {
          "doc": "Let iOS apps with external event handling report\nonApplicationDidChangeStatusBarOrientation.\n\nThis functions allows iOS apps that have their own event handling to hook\ninto SDL to generate SDL events. This maps directly to an iOS-specific\nevent, but since it doesn't do anything iOS-specific internally, it is\navailable on all platforms, in case it might be useful for some specific\nparadigm. Most apps do not need to use this directly; SDL's internal event\ncode will handle all this for windows created by SDL_CreateWindow!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OnApplicationDidChangeStatusBarOrientation",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "XTaskQueueHandle": {
          "doc": "",
          "name": "XTaskQueueHandle",
          "kind": "alias",
          "type": "XTaskQueueObject *"
        },
        "XUserHandle": {
          "doc": "",
          "name": "XUserHandle",
          "kind": "alias",
          "type": "XUser *"
        },
        "SDL_GetGDKTaskQueue": {
          "doc": "Gets a reference to the global async task queue handle for GDK,\ninitializing if needed.\n\nOnce you are done with the task queue, you should call\nXTaskQueueCloseHandle to reduce the reference count to avoid a resource\nleak.\n\n\\param outTaskQueue a pointer to be filled in with task queue handle.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetGDKTaskQueue",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "outTaskQueue",
              "type": "XTaskQueueHandle *"
            }
          ]
        },
        "SDL_GetGDKDefaultUser": {
          "doc": "Gets a reference to the default user handle for GDK.\n\nThis is effectively a synchronous version of XUserAddAsync, which always\nprefers the default user and allows a sign-in UI.\n\n\\param outUserHandle a pointer to be filled in with the default user\n                     handle.\n\\returns true if success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetGDKDefaultUser",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "outUserHandle",
              "type": "XUserHandle *"
            }
          ]
        }
      }
    },
    "SDL_stdinc.h": {
      "name": "SDL_stdinc.h",
      "doc": "# CategoryStdinc\n\nSDL provides its own implementation of some of the most important C runtime\nfunctions.\n\nUsing these functions allows an app to have access to common C\nfunctionality without depending on a specific C runtime (or a C runtime at\nall). More importantly, the SDL implementations work identically across\nplatforms, so apps can avoid surprises like snprintf() behaving differently\nbetween Windows and Linux builds, or itoa() only existing on some\nplatforms.\n\nFor many of the most common functions, like SDL_memcpy, SDL might just call\nthrough to the usual C runtime behind the scenes, if it makes sense to do\nso (if it's faster and always available/reliable on a given platform),\nreducing library size and offering the most optimized option.\n\nSDL also offers other C-runtime-adjacent functionality in this header that\neither isn't, strictly speaking, part of any C runtime standards, like\nSDL_crc32() and SDL_reinterpret_cast, etc. It also offers a few better\noptions, like SDL_strlcpy(), which functions as a safer form of strcpy().",
      "entries": {
        "bool": {
          "doc": "",
          "name": "bool",
          "kind": "def",
          "value": "unsigned char"
        },
        "false": {
          "doc": "",
          "name": "false",
          "kind": "def",
          "value": "0"
        },
        "true": {
          "doc": "",
          "name": "true",
          "kind": "def",
          "value": "1"
        },
        "__bool_true_false_are_defined": {
          "doc": "",
          "name": "__bool_true_false_are_defined",
          "kind": "def",
          "value": "1"
        },
        "alloca": {
          "doc": "",
          "name": "alloca",
          "kind": "function",
          "type": "void *",
          "parameters": [
            "size_t"
          ]
        },
        "SDL_NOLONGLONG": {
          "doc": "Don't let SDL use \"long long\" C types.\n\nSDL will define this if it believes the compiler doesn't understand the\n\"long long\" syntax for C datatypes. This can happen on older compilers.\n\nIf _your_ compiler doesn't support \"long long\" but SDL doesn't know it, it\nis safe to define this yourself to build against the SDL headers.\n\nIf this is defined, it will remove access to some C runtime support\nfunctions, like SDL_ulltoa and SDL_strtoll that refer to this datatype\nexplicitly. The rest of SDL will still be available.\n\nSDL's own source code cannot be built with a compiler that has this\ndefined, for various technical reasons.",
          "name": "SDL_NOLONGLONG",
          "kind": "def",
          "value": "1"
        },
        "SDL_SIZE_MAX": {
          "doc": "The largest value that a `size_t` can hold for the target platform.\n\n`size_t` is generally the same size as a pointer in modern times, but this\ncan get weird on very old and very esoteric machines. For example, on a\n16-bit Intel 286, you might have a 32-bit \"far\" pointer (16-bit segment\nplus 16-bit offset), but `size_t` is 16 bits, because it can only deal with\nthe offset into an individual segment.\n\nIn modern times, it's generally expected to cover an entire linear address\nspace. But be careful!\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SIZE_MAX",
          "kind": "def",
          "value": "SIZE_MAX"
        },
        "SDL_arraysize": {
          "doc": "The number of elements in a static array.\n\nThis will compile but return incorrect results for a pointer to an array;\nit has to be an array the compiler knows the size of.\n\nThis macro looks like it double-evaluates the argument, but it does so\ninside of `sizeof`, so there are no side-effects here, as expressions do\nnot actually run any code in these cases.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_arraysize",
          "kind": "def",
          "parameters": [
            "array"
          ],
          "value": "(sizeof(array)/sizeof(array[0]))"
        },
        "SDL_STRINGIFY_ARG": {
          "doc": "Macro useful for building other macros with strings in them.\n\nFor example:\n\n```c\n#define LOG_ERROR(X) OutputDebugString(SDL_STRINGIFY_ARG(__FUNCTION__) \": \" X \"\\n\")`\n```\n\n\\param arg the text to turn into a string literal.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_STRINGIFY_ARG",
          "kind": "def",
          "parameters": [
            "arg"
          ],
          "value": "#arg"
        },
        "SDL_reinterpret_cast": {
          "doc": "Handle a Reinterpret Cast properly whether using C or C++.\n\nIf compiled as C++, this macro offers a proper C++ reinterpret_cast<>.\n\nIf compiled as C, this macro does a normal C-style cast.\n\nThis is helpful to avoid compiler warnings in C++.\n\n\\param type the type to cast the expression to.\n\\param expression the expression to cast to a different type.\n\\returns `expression`, cast to `type`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_static_cast\n\\sa SDL_const_cast",
          "name": "SDL_reinterpret_cast",
          "kind": "def",
          "parameters": [
            "type",
            "expression"
          ],
          "value": "reinterpret_cast<type>(expression)  /* or `((type)(expression))` in C */"
        },
        "SDL_static_cast": {
          "doc": "Handle a Static Cast properly whether using C or C++.\n\nIf compiled as C++, this macro offers a proper C++ static_cast<>.\n\nIf compiled as C, this macro does a normal C-style cast.\n\nThis is helpful to avoid compiler warnings in C++.\n\n\\param type the type to cast the expression to.\n\\param expression the expression to cast to a different type.\n\\returns `expression`, cast to `type`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_reinterpret_cast\n\\sa SDL_const_cast",
          "name": "SDL_static_cast",
          "kind": "def",
          "parameters": [
            "type",
            "expression"
          ],
          "value": "static_cast<type>(expression)  /* or `((type)(expression))` in C */"
        },
        "SDL_const_cast": {
          "doc": "Handle a Const Cast properly whether using C or C++.\n\nIf compiled as C++, this macro offers a proper C++ const_cast<>.\n\nIf compiled as C, this macro does a normal C-style cast.\n\nThis is helpful to avoid compiler warnings in C++.\n\n\\param type the type to cast the expression to.\n\\param expression the expression to cast to a different type.\n\\returns `expression`, cast to `type`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_reinterpret_cast\n\\sa SDL_static_cast",
          "name": "SDL_const_cast",
          "kind": "def",
          "parameters": [
            "type",
            "expression"
          ],
          "value": "const_cast<type>(expression)  /* or `((type)(expression))` in C */"
        },
        "SDL_FOURCC": {
          "doc": "Define a four character code as a Uint32.\n\n\\param A the first ASCII character.\n\\param B the second ASCII character.\n\\param C the third ASCII character.\n\\param D the fourth ASCII character.\n\\returns the four characters converted into a Uint32, one character\n         per-byte.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_FOURCC",
          "kind": "def",
          "parameters": [
            "A",
            "B",
            "C",
            "D"
          ],
          "value": "    ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | \\\n     (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | \\\n     (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | \\\n     (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24))"
        },
        "SDL_SINT64_C": {
          "doc": "Append the 64 bit integer suffix to a signed integer literal.\n\nThis helps compilers that might believe a integer literal larger than\n0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_SINT64_C(0xFFFFFFFF1)`\ninstead of `0xFFFFFFFF1` by itself.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_UINT64_C",
          "name": "SDL_SINT64_C",
          "kind": "def",
          "parameters": [
            "c"
          ],
          "value": "c ## LL  /* or whatever the current compiler uses. */"
        },
        "SDL_UINT64_C": {
          "doc": "Append the 64 bit integer suffix to an unsigned integer literal.\n\nThis helps compilers that might believe a integer literal larger than\n0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_UINT64_C(0xFFFFFFFF1)`\ninstead of `0xFFFFFFFF1` by itself.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SINT64_C",
          "name": "SDL_UINT64_C",
          "kind": "def",
          "parameters": [
            "c"
          ],
          "value": "c ## ULL /* or whatever the current compiler uses. */"
        },
        "Sint8": {
          "doc": "A signed 8-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Sint8",
          "kind": "alias",
          "type": "int8_t"
        },
        "SDL_MAX_SINT8": {
          "doc": "",
          "name": "SDL_MAX_SINT8",
          "kind": "def",
          "value": "((Sint8)0x7F)           /* 127 */"
        },
        "SDL_MIN_SINT8": {
          "doc": "",
          "name": "SDL_MIN_SINT8",
          "kind": "def",
          "value": "((Sint8)(~0x7F))        /* -128 */"
        },
        "Uint8": {
          "doc": "An unsigned 8-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Uint8",
          "kind": "alias",
          "type": "uint8_t"
        },
        "SDL_MAX_UINT8": {
          "doc": "",
          "name": "SDL_MAX_UINT8",
          "kind": "def",
          "value": "((Uint8)0xFF)           /* 255 */"
        },
        "SDL_MIN_UINT8": {
          "doc": "",
          "name": "SDL_MIN_UINT8",
          "kind": "def",
          "value": "((Uint8)0x00)           /* 0 */"
        },
        "Sint16": {
          "doc": "A signed 16-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Sint16",
          "kind": "alias",
          "type": "int16_t"
        },
        "SDL_MAX_SINT16": {
          "doc": "",
          "name": "SDL_MAX_SINT16",
          "kind": "def",
          "value": "((Sint16)0x7FFF)        /* 32767 */"
        },
        "SDL_MIN_SINT16": {
          "doc": "",
          "name": "SDL_MIN_SINT16",
          "kind": "def",
          "value": "((Sint16)(~0x7FFF))     /* -32768 */"
        },
        "Uint16": {
          "doc": "An unsigned 16-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Uint16",
          "kind": "alias",
          "type": "uint16_t"
        },
        "SDL_MAX_UINT16": {
          "doc": "",
          "name": "SDL_MAX_UINT16",
          "kind": "def",
          "value": "((Uint16)0xFFFF)        /* 65535 */"
        },
        "SDL_MIN_UINT16": {
          "doc": "",
          "name": "SDL_MIN_UINT16",
          "kind": "def",
          "value": "((Uint16)0x0000)        /* 0 */"
        },
        "Sint32": {
          "doc": "A signed 32-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Sint32",
          "kind": "alias",
          "type": "int32_t"
        },
        "SDL_MAX_SINT32": {
          "doc": "",
          "name": "SDL_MAX_SINT32",
          "kind": "def",
          "value": "((Sint32)0x7FFFFFFF)    /* 2147483647 */"
        },
        "SDL_MIN_SINT32": {
          "doc": "",
          "name": "SDL_MIN_SINT32",
          "kind": "def",
          "value": "((Sint32)(~0x7FFFFFFF)) /* -2147483648 */"
        },
        "Uint32": {
          "doc": "An unsigned 32-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Uint32",
          "kind": "alias",
          "type": "uint32_t"
        },
        "SDL_MAX_UINT32": {
          "doc": "",
          "name": "SDL_MAX_UINT32",
          "kind": "def",
          "value": "((Uint32)0xFFFFFFFFu)   /* 4294967295 */"
        },
        "SDL_MIN_UINT32": {
          "doc": "",
          "name": "SDL_MIN_UINT32",
          "kind": "def",
          "value": "((Uint32)0x00000000)    /* 0 */"
        },
        "Sint64": {
          "doc": "A signed 64-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SINT64_C",
          "name": "Sint64",
          "kind": "alias",
          "type": "int64_t"
        },
        "SDL_MAX_SINT64": {
          "doc": "",
          "name": "SDL_MAX_SINT64",
          "kind": "def",
          "value": "SDL_SINT64_C(0x7FFFFFFFFFFFFFFF)   /* 9223372036854775807 */"
        },
        "SDL_MIN_SINT64": {
          "doc": "",
          "name": "SDL_MIN_SINT64",
          "kind": "def",
          "value": "~SDL_SINT64_C(0x7FFFFFFFFFFFFFFF)  /* -9223372036854775808 */"
        },
        "Uint64": {
          "doc": "An unsigned 64-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_UINT64_C",
          "name": "Uint64",
          "kind": "alias",
          "type": "uint64_t"
        },
        "SDL_MAX_UINT64": {
          "doc": "",
          "name": "SDL_MAX_UINT64",
          "kind": "def",
          "value": "SDL_UINT64_C(0xFFFFFFFFFFFFFFFF)   /* 18446744073709551615 */"
        },
        "SDL_MIN_UINT64": {
          "doc": "",
          "name": "SDL_MIN_UINT64",
          "kind": "def",
          "value": "SDL_UINT64_C(0x0000000000000000)   /* 0 */"
        },
        "SDL_Time": {
          "doc": "SDL times are signed, 64-bit integers representing nanoseconds since the\nUnix epoch (Jan 1, 1970).\n\nThey can be converted between POSIX time_t values with SDL_NS_TO_SECONDS()\nand SDL_SECONDS_TO_NS(), and between Windows FILETIME values with\nSDL_TimeToWindows() and SDL_TimeFromWindows().\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_MAX_SINT64\n\\sa SDL_MIN_SINT64",
          "name": "SDL_Time",
          "kind": "alias",
          "type": "Sint64"
        },
        "SDL_MAX_TIME": {
          "doc": "",
          "name": "SDL_MAX_TIME",
          "kind": "def",
          "value": "SDL_MAX_SINT64"
        },
        "SDL_MIN_TIME": {
          "doc": "",
          "name": "SDL_MIN_TIME",
          "kind": "def",
          "value": "SDL_MIN_SINT64"
        },
        "SDL_FLT_EPSILON": {
          "doc": "Epsilon constant, used for comparing floating-point numbers.\n\nEquals by default to platform-defined `FLT_EPSILON`, or\n`1.1920928955078125e-07F` if that's not available.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_FLT_EPSILON",
          "kind": "def",
          "value": "1.1920928955078125e-07F /* 0x0.000002p0 */"
        },
        "SDL_PRIs64": {
          "doc": "A printf-formatting string for an Sint64 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIs64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIs64",
          "kind": "def",
          "value": "\"lld\""
        },
        "SDL_PRIu64": {
          "doc": "A printf-formatting string for a Uint64 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIu64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIu64",
          "kind": "def",
          "value": "\"llu\""
        },
        "SDL_PRIx64": {
          "doc": "A printf-formatting string for a Uint64 value as lower-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIx64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIx64",
          "kind": "def",
          "value": "\"llx\""
        },
        "SDL_PRIX64": {
          "doc": "A printf-formatting string for a Uint64 value as upper-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIX64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIX64",
          "kind": "def",
          "value": "\"llX\""
        },
        "SDL_PRIs32": {
          "doc": "A printf-formatting string for an Sint32 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIs32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIs32",
          "kind": "def",
          "value": "\"d\""
        },
        "SDL_PRIu32": {
          "doc": "A printf-formatting string for a Uint32 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIu32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIu32",
          "kind": "def",
          "value": "\"u\""
        },
        "SDL_PRIx32": {
          "doc": "A printf-formatting string for a Uint32 value as lower-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIx32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIx32",
          "kind": "def",
          "value": "\"x\""
        },
        "SDL_PRIX32": {
          "doc": "A printf-formatting string for a Uint32 value as upper-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIX32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIX32",
          "kind": "def",
          "value": "\"X\""
        },
        "SDL_PRILL_PREFIX": {
          "doc": "",
          "name": "SDL_PRILL_PREFIX",
          "kind": "def",
          "value": "\"ll\""
        },
        "SDL_PRILLd": {
          "doc": "A printf-formatting string for a `long long` value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLd \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLd",
          "kind": "def",
          "value": "SDL_PRILL_PREFIX \"d\""
        },
        "SDL_PRILLu": {
          "doc": "A printf-formatting string for a `unsigned long long` value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLu \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLu",
          "kind": "def",
          "value": "SDL_PRILL_PREFIX \"u\""
        },
        "SDL_PRILLx": {
          "doc": "A printf-formatting string for an `unsigned long long` value as lower-case\nhexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLx \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLx",
          "kind": "def",
          "value": "SDL_PRILL_PREFIX \"x\""
        },
        "SDL_PRILLX": {
          "doc": "A printf-formatting string for an `unsigned long long` value as upper-case\nhexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLX \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLX",
          "kind": "def",
          "value": "SDL_PRILL_PREFIX \"X\""
        },
        "SDL_IN_BYTECAP": {
          "doc": "Macro that annotates function params with input buffer size.\n\nIf we were to annotate `memcpy`:\n\n```c\nvoid *memcpy(void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len);\n```\n\nThis notes that `src` should be `len` bytes in size and is only read by the\nfunction. The compiler or other analysis tools can warn when this doesn't\nappear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_IN_BYTECAP",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "_In_bytecount_(x)"
        },
        "SDL_INOUT_Z_CAP": {
          "doc": "Macro that annotates function params with input/output string buffer size.\n\nIf we were to annotate `strlcat`:\n\n```c\nsize_t strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen);\n```\n\nThis notes that `dst` is a null-terminated C string, should be `maxlen`\nbytes in size, and is both read from and written to by the function. The\ncompiler or other analysis tools can warn when this doesn't appear to be\nthe case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_INOUT_Z_CAP",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "_Inout_z_cap_(x)"
        },
        "SDL_OUT_Z_CAP": {
          "doc": "Macro that annotates function params with output string buffer size.\n\nIf we were to annotate `snprintf`:\n\n```c\nint snprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, const char *fmt, ...);\n```\n\nThis notes that `text` is a null-terminated C string, should be `maxlen`\nbytes in size, and is only written to by the function. The compiler or\nother analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_Z_CAP",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "_Out_z_cap_(x)"
        },
        "SDL_OUT_CAP": {
          "doc": "Macro that annotates function params with output buffer size.\n\nIf we were to annotate `wcsncpy`:\n\n```c\nchar *wcscpy(SDL_OUT_CAP(bufsize) wchar_t *dst, const wchar_t *src, size_t bufsize);\n```\n\nThis notes that `dst` should have a capacity of `bufsize` wchar_t in size,\nand is only written to by the function. The compiler or other analysis\ntools can warn when this doesn't appear to be the case.\n\nThis operates on counts of objects, not bytes. Use SDL_OUT_BYTECAP for\nbytes.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_CAP",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "_Out_cap_(x)"
        },
        "SDL_OUT_BYTECAP": {
          "doc": "Macro that annotates function params with output buffer size.\n\nIf we were to annotate `memcpy`:\n\n```c\nvoid *memcpy(SDL_OUT_BYTECAP(bufsize) void *dst, const void *src, size_t bufsize);\n```\n\nThis notes that `dst` should have a capacity of `bufsize` bytes in size,\nand is only written to by the function. The compiler or other analysis\ntools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_BYTECAP",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "_Out_bytecap_(x)"
        },
        "SDL_OUT_Z_BYTECAP": {
          "doc": "Macro that annotates function params with output buffer string size.\n\nIf we were to annotate `strcpy`:\n\n```c\nchar *strcpy(SDL_OUT_Z_BYTECAP(bufsize) char *dst, const char *src, size_t bufsize);\n```\n\nThis notes that `dst` should have a capacity of `bufsize` bytes in size,\nand a zero-terminated string is written to it by the function. The compiler\nor other analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_Z_BYTECAP",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "_Out_z_bytecap_(x)"
        },
        "SDL_PRINTF_FORMAT_STRING": {
          "doc": "Macro that annotates function params as printf-style format strings.\n\nIf we were to annotate `fprintf`:\n\n```c\nint fprintf(FILE *f, SDL_PRINTF_FORMAT_STRING const char *fmt, ...);\n```\n\nThis notes that `fmt` should be a printf-style format string. The compiler\nor other analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRINTF_FORMAT_STRING",
          "kind": "def",
          "value": "_Printf_format_string_"
        },
        "SDL_SCANF_FORMAT_STRING": {
          "doc": "Macro that annotates function params as scanf-style format strings.\n\nIf we were to annotate `fscanf`:\n\n```c\nint fscanf(FILE *f, SDL_SCANF_FORMAT_STRING const char *fmt, ...);\n```\n\nThis notes that `fmt` should be a scanf-style format string. The compiler\nor other analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCANF_FORMAT_STRING",
          "kind": "def",
          "value": "_Scanf_format_string_impl_"
        },
        "SDL_PRINTF_VARARG_FUNC": {
          "doc": "Macro that annotates a vararg function that operates like printf.\n\nIf we were to annotate `fprintf`:\n\n```c\nint fprintf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNC(2);\n```\n\nThis notes that the second parameter should be a printf-style format\nstring, followed by `...`. The compiler or other analysis tools can warn\nwhen this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRINTF_VARARG_FUNC",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ],
          "value": "__attribute__ (( format( __printf__, fmtargnumber, fmtargnumber+1 )))"
        },
        "SDL_PRINTF_VARARG_FUNCV": {
          "doc": "Macro that annotates a va_list function that operates like printf.\n\nIf we were to annotate `vfprintf`:\n\n```c\nint vfprintf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\nThis notes that the second parameter should be a printf-style format\nstring, followed by a va_list. The compiler or other analysis tools can\nwarn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRINTF_VARARG_FUNCV",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ],
          "value": "__attribute__(( format( __printf__, fmtargnumber, 0 )))"
        },
        "SDL_SCANF_VARARG_FUNC": {
          "doc": "Macro that annotates a vararg function that operates like scanf.\n\nIf we were to annotate `fscanf`:\n\n```c\nint fscanf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\nThis notes that the second parameter should be a scanf-style format string,\nfollowed by `...`. The compiler or other analysis tools can warn when this\ndoesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_SCANF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCANF_VARARG_FUNC",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ],
          "value": "__attribute__ (( format( __scanf__, fmtargnumber, fmtargnumber+1 )))"
        },
        "SDL_SCANF_VARARG_FUNCV": {
          "doc": "Macro that annotates a va_list function that operates like scanf.\n\nIf we were to annotate `vfscanf`:\n\n```c\nint vfscanf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\nThis notes that the second parameter should be a scanf-style format string,\nfollowed by a va_list. The compiler or other analysis tools can warn when\nthis doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_SCANF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCANF_VARARG_FUNCV",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ],
          "value": "__attribute__(( format( __scanf__, fmtargnumber, 0 )))"
        },
        "SDL_WPRINTF_VARARG_FUNC": {
          "doc": "Macro that annotates a vararg function that operates like wprintf.\n\nIf we were to annotate `fwprintf`:\n\n```c\nint fwprintf(FILE *f, const wchar_t *fmt, ...) SDL_WPRINTF_VARARG_FUNC(2);\n```\n\nThis notes that the second parameter should be a wprintf-style format wide\nstring, followed by `...`. The compiler or other analysis tools can warn\nwhen this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WPRINTF_VARARG_FUNC",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ],
          "value": "/* __attribute__ (( format( __wprintf__, fmtargnumber, fmtargnumber+1 ))) */"
        },
        "SDL_WPRINTF_VARARG_FUNCV": {
          "doc": "Macro that annotates a va_list function that operates like wprintf.\n\nIf we were to annotate `vfwprintf`:\n\n```c\nint vfwprintf(FILE *f, const wchar_t *fmt, va_list ap) SDL_WPRINTF_VARARG_FUNC(2);\n```\n\nThis notes that the second parameter should be a wprintf-style format wide\nstring, followed by a va_list. The compiler or other analysis tools can\nwarn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WPRINTF_VARARG_FUNCV",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ],
          "value": "/* __attribute__ (( format( __wprintf__, fmtargnumber, 0 ))) */"
        },
        "SDL_INIT_INTERFACE": {
          "doc": "A macro to initialize an SDL interface.\n\nThis macro will initialize an SDL interface structure and should be called\nbefore you fill out the fields with your implementation.\n\nYou can use it like this:\n\n```c\nSDL_IOStreamInterface iface;\n\nSDL_INIT_INTERFACE(&iface);\n\n// Fill in the interface function pointers with your implementation\niface.seek = ...\n\nstream = SDL_OpenIO(&iface, NULL);\n```\n\nIf you are using designated initializers, you can use the size of the\ninterface as the version, e.g.\n\n```c\nSDL_IOStreamInterface iface = {\n    .version = sizeof(iface),\n    .seek = ...\n};\nstream = SDL_OpenIO(&iface, NULL);\n```\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_IOStreamInterface\n\\sa SDL_StorageInterface\n\\sa SDL_VirtualJoystickDesc",
          "name": "SDL_INIT_INTERFACE",
          "kind": "def",
          "parameters": [
            "iface"
          ],
          "value": "    do {                                        \\\n        SDL_zerop(iface);                       \\\n        (iface)->version = sizeof(*(iface));    \\\n    } while (0)"
        },
        "SDL_stack_alloc": {
          "doc": "Allocate memory on the stack (maybe).\n\nIf SDL knows how to access alloca() on the current platform, it will use it\nto stack-allocate memory here. If it doesn't, it will use SDL_malloc() to\nheap-allocate memory.\n\nSince this might not be stack memory at all, it's important that you check\nthe returned pointer for NULL, and that you call SDL_stack_free on the\nmemory when done with it. Since this might be stack memory, it's important\nthat you don't allocate large amounts of it, or allocate in a loop without\nreturning from the function, so the stack doesn't overflow.\n\n\\param type the datatype of the memory to allocate.\n\\param count the number of `type` objects to allocate.\n\\returns newly-allocated memory, or NULL on failure.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_stack_free",
          "name": "SDL_stack_alloc",
          "kind": "def",
          "parameters": [
            "type",
            "count"
          ],
          "value": "(type*)alloca(sizeof(type)*(count))"
        },
        "SDL_stack_free": {
          "doc": "Free memory previously allocated with SDL_stack_alloc.\n\nIf SDL used alloca() to allocate this memory, this macro does nothing and\nthe allocated memory will be automatically released when the function that\ncalled SDL_stack_alloc() returns. If SDL used SDL_malloc(), it will\nSDL_free the memory immediately.\n\n\\param data the pointer, from SDL_stack_alloc(), to free.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_stack_alloc",
          "name": "SDL_stack_free",
          "kind": "def",
          "parameters": [
            "data"
          ]
        },
        "SDL_malloc": {
          "doc": "Allocate uninitialized memory.\n\nThe allocated memory returned by this function must be freed with\nSDL_free().\n\nIf `size` is 0, it will be set to 1.\n\nIf the allocation is successful, the returned pointer is guaranteed to be\naligned to either the *fundamental alignment* (`alignof(max_align_t)` in\nC11 and later) or `2 * sizeof(void *)`, whichever is smaller. Use\nSDL_aligned_alloc() if you need to allocate memory aligned to an alignment\ngreater than this guarantee.\n\n\\param size the size to allocate.\n\\returns a pointer to the allocated memory, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_calloc\n\\sa SDL_realloc\n\\sa SDL_aligned_alloc",
          "name": "SDL_malloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_calloc": {
          "doc": "Allocate a zero-initialized array.\n\nThe memory returned by this function must be freed with SDL_free().\n\nIf either of `nmemb` or `size` is 0, they will both be set to 1.\n\nIf the allocation is successful, the returned pointer is guaranteed to be\naligned to either the *fundamental alignment* (`alignof(max_align_t)` in\nC11 and later) or `2 * sizeof(void *)`, whichever is smaller.\n\n\\param nmemb the number of elements in the array.\n\\param size the size of each element of the array.\n\\returns a pointer to the allocated array, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_malloc\n\\sa SDL_realloc",
          "name": "SDL_calloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_realloc": {
          "doc": "Change the size of allocated memory.\n\nThe memory returned by this function must be freed with SDL_free().\n\nIf `size` is 0, it will be set to 1. Note that this is unlike some other C\nruntime `realloc` implementations, which may treat `realloc(mem, 0)` the\nsame way as `free(mem)`.\n\nIf `mem` is NULL, the behavior of this function is equivalent to\nSDL_malloc(). Otherwise, the function can have one of three possible\noutcomes:\n\n- If it returns the same pointer as `mem`, it means that `mem` was resized\n  in place without freeing.\n- If it returns a different non-NULL pointer, it means that `mem` was freed\n  and cannot be dereferenced anymore.\n- If it returns NULL (indicating failure), then `mem` will remain valid and\n  must still be freed with SDL_free().\n\nIf the allocation is successfully resized, the returned pointer is\nguaranteed to be aligned to either the *fundamental alignment*\n(`alignof(max_align_t)` in C11 and later) or `2 * sizeof(void *)`,\nwhichever is smaller.\n\n\\param mem a pointer to allocated memory to reallocate, or NULL.\n\\param size the new size of the memory.\n\\returns a pointer to the newly allocated memory, or NULL if allocation\n         failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_malloc\n\\sa SDL_calloc",
          "name": "SDL_realloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_free": {
          "doc": "Free allocated memory.\n\nThe pointer is no longer valid after this call and cannot be dereferenced\nanymore.\n\nIf `mem` is NULL, this function does nothing.\n\n\\param mem a pointer to allocated memory, or NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_malloc\n\\sa SDL_calloc\n\\sa SDL_realloc",
          "name": "SDL_free",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "SDL_malloc_func": {
          "doc": "A callback used to implement SDL_malloc().\n\nSDL will always ensure that the passed `size` is greater than 0.\n\n\\param size the size to allocate.\n\\returns a pointer to the allocated memory, or NULL if allocation failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_malloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_malloc_func",
          "kind": "callback",
          "type": "void *",
          "parameters": [
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_calloc_func": {
          "doc": "A callback used to implement SDL_calloc().\n\nSDL will always ensure that the passed `nmemb` and `size` are both greater\nthan 0.\n\n\\param nmemb the number of elements in the array.\n\\param size the size of each element of the array.\n\\returns a pointer to the allocated array, or NULL if allocation failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_calloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_calloc_func",
          "kind": "callback",
          "type": "void *",
          "parameters": [
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_realloc_func": {
          "doc": "A callback used to implement SDL_realloc().\n\nSDL will always ensure that the passed `size` is greater than 0.\n\n\\param mem a pointer to allocated memory to reallocate, or NULL.\n\\param size the new size of the memory.\n\\returns a pointer to the newly allocated memory, or NULL if allocation\n         failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_realloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_realloc_func",
          "kind": "callback",
          "type": "void *",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_free_func": {
          "doc": "A callback used to implement SDL_free().\n\nSDL will always ensure that the passed `mem` is a non-NULL pointer.\n\n\\param mem a pointer to allocated memory.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_free_func",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "SDL_GetOriginalMemoryFunctions": {
          "doc": "Get the original set of SDL memory functions.\n\nThis is what SDL_malloc and friends will use by default, if there has been\nno call to SDL_SetMemoryFunctions. This is not necessarily using the C\nruntime's `malloc` functions behind the scenes! Different platforms and\nbuild configurations might do any number of unexpected things.\n\n\\param malloc_func filled with malloc function.\n\\param calloc_func filled with calloc function.\n\\param realloc_func filled with realloc function.\n\\param free_func filled with free function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetOriginalMemoryFunctions",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "SDL_malloc_func *"
            },
            {
              "name": "calloc_func",
              "type": "SDL_calloc_func *"
            },
            {
              "name": "realloc_func",
              "type": "SDL_realloc_func *"
            },
            {
              "name": "free_func",
              "type": "SDL_free_func *"
            }
          ]
        },
        "SDL_GetMemoryFunctions": {
          "doc": "Get the current set of SDL memory functions.\n\n\\param malloc_func filled with malloc function.\n\\param calloc_func filled with calloc function.\n\\param realloc_func filled with realloc function.\n\\param free_func filled with free function.\n\n\\threadsafety This does not hold a lock, so do not call this in the\n              unlikely event of a background thread calling\n              SDL_SetMemoryFunctions simultaneously.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetMemoryFunctions\n\\sa SDL_GetOriginalMemoryFunctions",
          "name": "SDL_GetMemoryFunctions",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "SDL_malloc_func *"
            },
            {
              "name": "calloc_func",
              "type": "SDL_calloc_func *"
            },
            {
              "name": "realloc_func",
              "type": "SDL_realloc_func *"
            },
            {
              "name": "free_func",
              "type": "SDL_free_func *"
            }
          ]
        },
        "SDL_SetMemoryFunctions": {
          "doc": "Replace SDL's memory allocation functions with a custom set.\n\nIt is not safe to call this function once any allocations have been made,\nas future calls to SDL_free will use the new allocator, even if they came\nfrom an SDL_malloc made with the old one!\n\nIf used, usually this needs to be the first call made into the SDL library,\nif not the very first thing done at program startup time.\n\n\\param malloc_func custom malloc function.\n\\param calloc_func custom calloc function.\n\\param realloc_func custom realloc function.\n\\param free_func custom free function.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, but one\n              should not replace the memory functions once any allocations\n              are made!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_GetOriginalMemoryFunctions",
          "name": "SDL_SetMemoryFunctions",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "SDL_malloc_func"
            },
            {
              "name": "calloc_func",
              "type": "SDL_calloc_func"
            },
            {
              "name": "realloc_func",
              "type": "SDL_realloc_func"
            },
            {
              "name": "free_func",
              "type": "SDL_free_func"
            }
          ]
        },
        "SDL_aligned_alloc": {
          "doc": "Allocate memory aligned to a specific alignment.\n\nThe memory returned by this function must be freed with SDL_aligned_free(),\n_not_ SDL_free().\n\nIf `alignment` is less than the size of `void *`, it will be increased to\nmatch that.\n\nThe returned memory address will be a multiple of the alignment value, and\nthe size of the memory allocated will be a multiple of the alignment value.\n\n\\param alignment the alignment of the memory.\n\\param size the size to allocate.\n\\returns a pointer to the aligned memory, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_free",
          "name": "SDL_aligned_alloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "alignment",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_aligned_free": {
          "doc": "Free memory allocated by SDL_aligned_alloc().\n\nThe pointer is no longer valid after this call and cannot be dereferenced\nanymore.\n\nIf `mem` is NULL, this function does nothing.\n\n\\param mem a pointer previously returned by SDL_aligned_alloc(), or NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_alloc",
          "name": "SDL_aligned_free",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "SDL_GetNumAllocations": {
          "doc": "Get the number of outstanding (unfreed) allocations.\n\n\\returns the number of allocations or -1 if allocation counting is\n         disabled.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetNumAllocations",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_Environment": {
          "doc": "A thread-safe set of environment variables\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable\n\\sa SDL_DestroyEnvironment",
          "name": "SDL_Environment",
          "kind": "alias",
          "type": "struct SDL_Environment"
        },
        "SDL_GetEnvironment": {
          "doc": "Get the process environment.\n\nThis is initialized at application start and is not affected by setenv()\nand unsetenv() calls after that point. Use SDL_SetEnvironmentVariable() and\nSDL_UnsetEnvironmentVariable() if you want to modify this environment, or\nSDL_setenv_unsafe() or SDL_unsetenv_unsafe() if you want changes to persist\nin the C runtime environment after SDL_Quit().\n\n\\returns a pointer to the environment for the process or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_GetEnvironment",
          "kind": "function",
          "type": "SDL_Environment *",
          "parameters": []
        },
        "SDL_CreateEnvironment": {
          "doc": "Create a set of environment variables\n\n\\param populated true to initialize it from the C runtime environment,\n                 false to create an empty environment.\n\\returns a pointer to the new environment or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety If `populated` is false, it is safe to call this function\n              from any thread, otherwise it is safe if no other threads are\n              calling setenv() or unsetenv()\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable\n\\sa SDL_DestroyEnvironment",
          "name": "SDL_CreateEnvironment",
          "kind": "function",
          "type": "SDL_Environment *",
          "parameters": [
            {
              "name": "populated",
              "type": "bool"
            }
          ]
        },
        "SDL_GetEnvironmentVariable": {
          "doc": "Get the value of a variable in the environment.\n\n\\param env the environment to query.\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_GetEnvironmentVariable",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetEnvironmentVariables": {
          "doc": "Get all variables in the environment.\n\n\\param env the environment to query.\n\\returns a NULL terminated array of pointers to environment variables in\n         the form \"variable=value\" or NULL on failure; call SDL_GetError()\n         for more information. This is a single allocation that should be\n         freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_GetEnvironmentVariables",
          "kind": "function",
          "type": "char **",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            }
          ]
        },
        "SDL_SetEnvironmentVariable": {
          "doc": "Set the value of a variable in the environment.\n\n\\param env the environment to modify.\n\\param name the name of the variable to set.\n\\param value the value of the variable to set.\n\\param overwrite true to overwrite the variable if it exists, false to\n                 return success without setting the variable if it already\n                 exists.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_SetEnvironmentVariable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            },
            {
              "name": "overwrite",
              "type": "bool"
            }
          ]
        },
        "SDL_UnsetEnvironmentVariable": {
          "doc": "Clear a variable from the environment.\n\n\\param env the environment to modify.\n\\param name the name of the variable to unset.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_UnsetEnvironmentVariable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_DestroyEnvironment": {
          "doc": "Destroy a set of environment variables.\n\n\\param env the environment to destroy.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the environment is no longer in use.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateEnvironment",
          "name": "SDL_DestroyEnvironment",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            }
          ]
        },
        "SDL_getenv": {
          "doc": "Get the value of a variable in the environment.\n\nThis function uses SDL's cached copy of the environment and is thread-safe.\n\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_getenv",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_getenv_unsafe": {
          "doc": "Get the value of a variable in the environment.\n\nThis function bypasses SDL's cached copy of the environment and is not\nthread-safe.\n\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety This function is not thread safe, consider using SDL_getenv()\n              instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_getenv",
          "name": "SDL_getenv_unsafe",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_setenv_unsafe": {
          "doc": "Set the value of a variable in the environment.\n\n\\param name the name of the variable to set.\n\\param value the value of the variable to set.\n\\param overwrite 1 to overwrite the variable if it exists, 0 to return\n                 success without setting the variable if it already exists.\n\\returns 0 on success, -1 on error.\n\n\\threadsafety This function is not thread safe, consider using\n              SDL_SetEnvironmentVariable() instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetEnvironmentVariable",
          "name": "SDL_setenv_unsafe",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            },
            {
              "name": "overwrite",
              "type": "int"
            }
          ]
        },
        "SDL_unsetenv_unsafe": {
          "doc": "Clear a variable from the environment.\n\n\\param name the name of the variable to unset.\n\\returns 0 on success, -1 on error.\n\n\\threadsafety This function is not thread safe, consider using\n              SDL_UnsetEnvironmentVariable() instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_unsetenv_unsafe",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_CompareCallback": {
          "doc": "A callback used with SDL sorting and binary search functions.\n\n\\param a a pointer to the first element being compared.\n\\param b a pointer to the second element being compared.\n\\returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted\n         before `a`, 0 if they are equal. If two elements are equal, their\n         order in the sorted array is undefined.\n\n\\since This callback is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort",
          "name": "SDL_CompareCallback",
          "kind": "callback",
          "type": "int",
          "parameters": [
            {
              "name": "a",
              "type": "const void *"
            },
            {
              "name": "b",
              "type": "const void *"
            }
          ]
        },
        "SDL_qsort": {
          "doc": "Sort an array.\n\nFor example:\n\n```c\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort_r",
          "name": "SDL_qsort",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "base",
              "type": "void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback"
            }
          ]
        },
        "SDL_bsearch": {
          "doc": "Perform a binary search on a previously sorted array.\n\nFor example:\n\n```c\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch(&key, values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n\\param key a pointer to a key equal to the element being searched for.\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\returns a pointer to the matching element in the array, or NULL if not\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch_r\n\\sa SDL_qsort",
          "name": "SDL_bsearch",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "key",
              "type": "const void *"
            },
            {
              "name": "base",
              "type": "const void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback"
            }
          ]
        },
        "SDL_CompareCallback_r": {
          "doc": "A callback used with SDL sorting and binary search functions.\n\n\\param userdata the `userdata` pointer passed to the sort function.\n\\param a a pointer to the first element being compared.\n\\param b a pointer to the second element being compared.\n\\returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted\n         before `a`, 0 if they are equal. If two elements are equal, their\n         order in the sorted array is undefined.\n\n\\since This callback is available since SDL 3.2.0.\n\n\\sa SDL_qsort_r\n\\sa SDL_bsearch_r",
          "name": "SDL_CompareCallback_r",
          "kind": "callback",
          "type": "int",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "a",
              "type": "const void *"
            },
            {
              "name": "b",
              "type": "const void *"
            }
          ]
        },
        "SDL_qsort_r": {
          "doc": "Sort an array, passing a userdata pointer to the compare function.\n\nFor example:\n\n```c\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\param userdata a pointer to pass to the compare function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch_r\n\\sa SDL_qsort",
          "name": "SDL_qsort_r",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "base",
              "type": "void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback_r"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_bsearch_r": {
          "doc": "Perform a binary search on a previously sorted array, passing a userdata\npointer to the compare function.\n\nFor example:\n\n```c\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch_r(&key, values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n\\param key a pointer to a key equal to the element being searched for.\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\param userdata a pointer to pass to the compare function.\n\\returns a pointer to the matching element in the array, or NULL if not\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort_r",
          "name": "SDL_bsearch_r",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "key",
              "type": "const void *"
            },
            {
              "name": "base",
              "type": "const void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback_r"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_abs": {
          "doc": "Compute the absolute value of `x`.\n\n\\param x an integer value.\n\\returns the absolute value of x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_abs",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_min": {
          "doc": "Return the lesser of two values.\n\nThis is a helper macro that might be more clear than writing out the\ncomparisons directly, and works with any type that can be compared with the\n`<` operator. However, it double-evaluates both its parameters, so do not\nuse expressions with side-effects here.\n\n\\param x the first value to compare.\n\\param y the second value to compare.\n\\returns the lesser of `x` and `y`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_min",
          "kind": "def",
          "parameters": [
            "x",
            "y"
          ],
          "value": "(((x) < (y)) ? (x) : (y))"
        },
        "SDL_max": {
          "doc": "Return the greater of two values.\n\nThis is a helper macro that might be more clear than writing out the\ncomparisons directly, and works with any type that can be compared with the\n`>` operator. However, it double-evaluates both its parameters, so do not\nuse expressions with side-effects here.\n\n\\param x the first value to compare.\n\\param y the second value to compare.\n\\returns the lesser of `x` and `y`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_max",
          "kind": "def",
          "parameters": [
            "x",
            "y"
          ],
          "value": "(((x) > (y)) ? (x) : (y))"
        },
        "SDL_clamp": {
          "doc": "Return a value clamped to a range.\n\nIf `x` is outside the range a values between `a` and `b`, the returned\nvalue will be `a` or `b` as appropriate. Otherwise, `x` is returned.\n\nThis macro will produce incorrect results if `b` is less than `a`.\n\nThis is a helper macro that might be more clear than writing out the\ncomparisons directly, and works with any type that can be compared with the\n`<` and `>` operators. However, it double-evaluates all its parameters, so\ndo not use expressions with side-effects here.\n\n\\param x the value to compare.\n\\param a the low end value.\n\\param b the high end value.\n\\returns x, clamped between a and b.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_clamp",
          "kind": "def",
          "parameters": [
            "x",
            "a",
            "b"
          ],
          "value": "(((x) < (a)) ? (a) : (((x) > (b)) ? (b) : (x)))"
        },
        "SDL_isalpha": {
          "doc": "Query if a character is alphabetic (a letter).\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\nfor English 'a-z' and 'A-Z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isalpha",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isalnum": {
          "doc": "Query if a character is alphabetic (a letter) or a number.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\nfor English 'a-z', 'A-Z', and '0-9' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isalnum",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isblank": {
          "doc": "Report if a character is blank (a space or tab).\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n0x20 (space) or 0x9 (tab) as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isblank",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_iscntrl": {
          "doc": "Report if a character is a control character.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n0 through 0x1F, and 0x7F, as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_iscntrl",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isdigit": {
          "doc": "Report if a character is a numeric digit.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'0' (0x30) through '9' (0x39), as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isdigit",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isxdigit": {
          "doc": "Report if a character is a hexadecimal digit.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'A' through 'F', 'a' through 'f', and '0' through '9', as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isxdigit",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_ispunct": {
          "doc": "Report if a character is a punctuation mark.\n\n**WARNING**: Regardless of system locale, this is equivalent to\n`((SDL_isgraph(x)) && (!SDL_isalnum(x)))`.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isgraph\n\\sa SDL_isalnum",
          "name": "SDL_ispunct",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isspace": {
          "doc": "Report if a character is whitespace.\n\n**WARNING**: Regardless of system locale, this will only treat the\nfollowing ASCII values as true:\n\n- space (0x20)\n- tab (0x09)\n- newline (0x0A)\n- vertical tab (0x0B)\n- form feed (0x0C)\n- return (0x0D)\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isspace",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isupper": {
          "doc": "Report if a character is upper case.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'A' through 'Z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isupper",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_islower": {
          "doc": "Report if a character is lower case.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'a' through 'z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_islower",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isprint": {
          "doc": "Report if a character is \"printable\".\n\nBe advised that \"printable\" has a definition that goes back to text\nterminals from the dawn of computing, making this a sort of special case\nfunction that is not suitable for Unicode (or most any) text management.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n' ' (0x20) through '~' (0x7E) as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isprint",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isgraph": {
          "doc": "Report if a character is any \"printable\" except space.\n\nBe advised that \"printable\" has a definition that goes back to text\nterminals from the dawn of computing, making this a sort of special case\nfunction that is not suitable for Unicode (or most any) text management.\n\n**WARNING**: Regardless of system locale, this is equivalent to\n`(SDL_isprint(x)) && ((x) != ' ')`.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isprint",
          "name": "SDL_isgraph",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_toupper": {
          "doc": "Convert low-ASCII English letters to uppercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'a' through 'z' to uppercase.\n\nThis function returns the uppercase equivalent of `x`. If a character\ncannot be converted, or is already uppercase, this function returns `x`.\n\n\\param x character value to check.\n\\returns capitalized version of x, or x if no conversion available.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_toupper",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_tolower": {
          "doc": "Convert low-ASCII English letters to lowercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to lowercase.\n\nThis function returns the lowercase equivalent of `x`. If a character\ncannot be converted, or is already lowercase, this function returns `x`.\n\n\\param x character value to check.\n\\returns lowercase version of x, or x if no conversion available.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_tolower",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_crc16": {
          "doc": "Calculate a CRC-16 value.\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check\n\nThis function can be called multiple times, to stream data to be\nchecksummed in blocks. Each call must provide the previous CRC-16 return\nvalue to be updated with the next block. The first call to this function\nfor a set of blocks should pass in a zero CRC value.\n\n\\param crc the current checksum for this data set, or 0 for a new data set.\n\\param data a new block of data to add to the checksum.\n\\param len the size, in bytes, of the new block of data.\n\\returns a CRC-16 checksum value of all blocks in the data set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_crc16",
          "kind": "function",
          "type": "Uint16",
          "parameters": [
            {
              "name": "crc",
              "type": "Uint16"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_crc32": {
          "doc": "Calculate a CRC-32 value.\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check\n\nThis function can be called multiple times, to stream data to be\nchecksummed in blocks. Each call must provide the previous CRC-32 return\nvalue to be updated with the next block. The first call to this function\nfor a set of blocks should pass in a zero CRC value.\n\n\\param crc the current checksum for this data set, or 0 for a new data set.\n\\param data a new block of data to add to the checksum.\n\\param len the size, in bytes, of the new block of data.\n\\returns a CRC-32 checksum value of all blocks in the data set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_crc32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "crc",
              "type": "Uint32"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_murmur3_32": {
          "doc": "Calculate a 32-bit MurmurHash3 value for a block of data.\n\nhttps://en.wikipedia.org/wiki/MurmurHash\n\nA seed may be specified, which changes the final results consistently, but\nthis does not work like SDL_crc16 and SDL_crc32: you can't feed a previous\nresult from this function back into itself as the next seed value to\ncalculate a hash in chunks; it won't produce the same hash as it would if\nthe same data was provided in a single call.\n\nIf you aren't sure what to provide for a seed, zero is fine. Murmur3 is not\ncryptographically secure, so it shouldn't be used for hashing top-secret\ndata.\n\n\\param data the data to be hashed.\n\\param len the size of data, in bytes.\n\\param seed a value that alters the final hash value.\n\\returns a Murmur3 32-bit hash value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_murmur3_32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            },
            {
              "name": "seed",
              "type": "Uint32"
            }
          ]
        },
        "SDL_memcpy": {
          "doc": "Copy non-overlapping memory.\n\nThe memory regions must not overlap. If they do, use SDL_memmove() instead.\n\n\\param dst The destination memory region. Must not be NULL, and must not\n           overlap with `src`.\n\\param src The source memory region. Must not be NULL, and must not overlap\n           with `dst`.\n\\param len The length in bytes of both `dst` and `src`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_memmove",
          "name": "SDL_memcpy",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_copyp": {
          "doc": "A macro to copy memory between objects, with basic type checking.\n\nSDL_memcpy and SDL_memmove do not care where you copy memory to and from,\nwhich can lead to bugs. This macro aims to avoid most of those bugs by\nmaking sure that the source and destination are both pointers to objects\nthat are the same size. It does not check that the objects are the same\n_type_, just that the copy will not overflow either object.\n\nThe size check happens at compile time, and the compiler will throw an\nerror if the objects are different sizes.\n\nGenerally this is intended to copy a single object, not an array.\n\nThis macro looks like it double-evaluates its parameters, but the extras\nthem are in `sizeof` sections, which generate no code nor side-effects.\n\n\\param dst a pointer to the destination object. Must not be NULL.\n\\param src a pointer to the source object. Must not be NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_copyp",
          "kind": "def",
          "parameters": [
            "dst",
            "src"
          ],
          "value": "    { SDL_COMPILE_TIME_ASSERT(SDL_copyp, sizeof (*(dst)) == sizeof (*(src))); }             \\\n    SDL_memcpy((dst), (src), sizeof(*(src)))"
        },
        "SDL_memmove": {
          "doc": "Copy memory ranges that might overlap.\n\nIt is okay for the memory regions to overlap. If you are confident that the\nregions never overlap, using SDL_memcpy() may improve performance.\n\n\\param dst The destination memory region. Must not be NULL.\n\\param src The source memory region. Must not be NULL.\n\\param len The length in bytes of both `dst` and `src`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_memcpy",
          "name": "SDL_memmove",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_memset": {
          "doc": "Initialize all bytes of buffer of memory to a specific value.\n\nThis function will set `len` bytes, pointed to by `dst`, to the value\nspecified in `c`.\n\nDespite `c` being an `int` instead of a `char`, this only operates on\nbytes; `c` must be a value between 0 and 255, inclusive.\n\n\\param dst the destination memory region. Must not be NULL.\n\\param c the byte value to set.\n\\param len the length, in bytes, to set in `dst`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_memset",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "c",
              "type": "int"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_memset4": {
          "doc": "Initialize all 32-bit words of buffer of memory to a specific value.\n\nThis function will set a buffer of `dwords` Uint32 values, pointed to by\n`dst`, to the value specified in `val`.\n\nUnlike SDL_memset, this sets 32-bit values, not bytes, so it's not limited\nto a range of 0-255.\n\n\\param dst the destination memory region. Must not be NULL.\n\\param val the Uint32 value to set.\n\\param dwords the number of Uint32 values to set in `dst`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_memset4",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "val",
              "type": "Uint32"
            },
            {
              "name": "dwords",
              "type": "size_t"
            }
          ]
        },
        "SDL_zero": {
          "doc": "Clear an object's memory to zero.\n\nThis is wrapper over SDL_memset that handles calculating the object size,\nso there's no chance of copy/paste errors, and the code is cleaner.\n\nThis requires an object, not a pointer to an object, nor an array.\n\n\\param x the object to clear.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_zerop\n\\sa SDL_zeroa",
          "name": "SDL_zero",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SDL_memset(&(x), 0, sizeof((x)))"
        },
        "SDL_zerop": {
          "doc": "Clear an object's memory to zero, using a pointer.\n\nThis is wrapper over SDL_memset that handles calculating the object size,\nso there's no chance of copy/paste errors, and the code is cleaner.\n\nThis requires a pointer to an object, not an object itself, nor an array.\n\n\\param x a pointer to the object to clear.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_zero\n\\sa SDL_zeroa",
          "name": "SDL_zerop",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SDL_memset((x), 0, sizeof(*(x)))"
        },
        "SDL_zeroa": {
          "doc": "Clear an array's memory to zero.\n\nThis is wrapper over SDL_memset that handles calculating the array size, so\nthere's no chance of copy/paste errors, and the code is cleaner.\n\nThis requires an array, not an object, nor a pointer to an object.\n\n\\param x an array to clear.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_zero\n\\sa SDL_zeroa",
          "name": "SDL_zeroa",
          "kind": "def",
          "parameters": [
            "x"
          ],
          "value": "SDL_memset((x), 0, sizeof((x)))"
        },
        "SDL_memcmp": {
          "doc": "Compare two buffers of memory.\n\n\\param s1 the first buffer to compare. NULL is not permitted!\n\\param s2 the second buffer to compare. NULL is not permitted!\n\\param len the number of bytes to compare between the buffers.\n\\returns less than zero if s1 is \"less than\" s2, greater than zero if s1 is\n         \"greater than\" s2, and zero if the buffers match exactly for `len`\n         bytes.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_memcmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "s1",
              "type": "const void *"
            },
            {
              "name": "s2",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcslen": {
          "doc": "This works exactly like wcslen() but doesn't require access to a C runtime.\n\nCounts the number of wchar_t values in `wstr`, excluding the null\nterminator.\n\nLike SDL_strlen only counts bytes and not codepoints in a UTF-8 string,\nthis counts wchar_t values in a string, even if the string's encoding is of\nvariable width, like UTF-16.\n\nAlso be aware that wchar_t is different sizes on different platforms (4\nbytes on Linux, 2 on Windows, etc).\n\n\\param wstr The null-terminated wide string to read. Must not be NULL.\n\\returns the length (in wchar_t values, excluding the null terminator) of\n         `wstr`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcsnlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_wcslen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsnlen": {
          "doc": "This works exactly like wcsnlen() but doesn't require access to a C\nruntime.\n\nCounts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the\nnull terminator.\n\nLike SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,\nthis counts wchar_t values in a string, even if the string's encoding is of\nvariable width, like UTF-16.\n\nAlso be aware that wchar_t is different sizes on different platforms (4\nbytes on Linux, 2 on Windows, etc).\n\nAlso, `maxlen` is a count of wide characters, not bytes!\n\n\\param wstr The null-terminated wide string to read. Must not be NULL.\n\\param maxlen The maximum amount of wide characters to count.\n\\returns the length (in wide characters, excluding the null terminator) of\n         `wstr` but never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_wcsnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcslcpy": {
          "doc": "Copy a wide string.\n\nThis function copies `maxlen` - 1 wide characters from `src` to `dst`, then\nappends a null terminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` is 0, no wide characters are copied and no null terminator is\nwritten.\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated wide string to copy. Must not be NULL, and\n           must not overlap with `dst`.\n\\param maxlen The length (in wide characters) of the destination buffer.\n\\returns the length (in wide characters, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslcat",
          "name": "SDL_wcslcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "wchar_t *"
            },
            {
              "name": "src",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcslcat": {
          "doc": "Concatenate wide strings.\n\nThis function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters\nfrom `src` to the end of the wide string in `dst`, then appends a null\nterminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is\nunmodified.\n\n\\param dst The destination buffer already containing the first\n           null-terminated wide string. Must not be NULL and must not\n           overlap with `src`.\n\\param src The second null-terminated wide string. Must not be NULL, and\n           must not overlap with `dst`.\n\\param maxlen The length (in wide characters) of the destination buffer.\n\\returns the length (in wide characters, excluding the null terminator) of\n         the string in `dst` plus the length of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslcpy",
          "name": "SDL_wcslcat",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "wchar_t *"
            },
            {
              "name": "src",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcsdup": {
          "doc": "Allocate a copy of a wide string.\n\nThis allocates enough space for a null-terminated copy of `wstr`, using\nSDL_malloc, and then makes a copy of the string into this space.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param wstr the string to copy.\n\\returns a pointer to the newly-allocated wide string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsdup",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsstr": {
          "doc": "Search a wide string for the first instance of a specific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string.\n\nNote that this looks for strings of _wide characters_, not _codepoints_, so\nit's legal to search for malformed and incomplete UTF-16 sequences.\n\n\\param haystack the wide string to search. Must not be NULL.\n\\param needle the wide string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsstr",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const wchar_t *"
            },
            {
              "name": "needle",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsnstr": {
          "doc": "Search a wide string, up to n wide chars, for the first instance of a\nspecific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nvalue to end the string, or `maxlen` wide character have been examined. It\nis possible to use this function on a wide string without a null\nterminator.\n\nNote that this looks for strings of _wide characters_, not _codepoints_, so\nit's legal to search for malformed and incomplete UTF-16 sequences.\n\n\\param haystack the wide string to search. Must not be NULL.\n\\param needle the wide string to search for. Must not be NULL.\n\\param maxlen the maximum number of wide characters to search in\n              `haystack`.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsnstr",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const wchar_t *"
            },
            {
              "name": "needle",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcscmp": {
          "doc": "Compare two null-terminated wide strings.\n\nThis only compares wchar_t values until it hits a null-terminating\ncharacter; it does not care if the string is well-formed UTF-16 (or UTF-32,\ndepending on your platform's wchar_t size), or uses valid Unicode values.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcscmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsncmp": {
          "doc": "Compare two wide strings up to a number of wchar_t values.\n\nThis only compares wchar_t values; it does not care if the string is\nwell-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),\nor uses valid Unicode values.\n\nNote that while this function is intended to be used with UTF-16 (or\nUTF-32, depending on your platform's definition of wchar_t), it is\ncomparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies\na wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16\nsequence, it will only compare a portion of the final character.\n\n`maxlen` specifies a maximum number of wchar_t to compare; if the strings\nmatch to this number of wide chars (or both have matched to a\nnull-terminator character before this count), they will be considered\nequal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of wchar_t to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsncmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcscasecmp": {
          "doc": "Compare two null-terminated wide strings, case-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nDepending on your platform, \"wchar_t\" might be 2 bytes, and expected to be\nUTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\nhandles Unicode, it expects the string to be well-formed and not a\nnull-terminated string of arbitrary bytes. Characters that are not valid\nUTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcscasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsncasecmp": {
          "doc": "Compare two wide strings, case-insensitively, up to a number of wchar_t.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nDepending on your platform, \"wchar_t\" might be 2 bytes, and expected to be\nUTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\nhandles Unicode, it expects the string to be well-formed and not a\nnull-terminated string of arbitrary bytes. Characters that are not valid\nUTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\nNote that while this function might deal with variable-sized characters,\n`maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a\nmulti-byte UTF-16 sequence, it may convert a portion of the final character\nto one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not\nto overflow a buffer.\n\n`maxlen` specifies a maximum number of wchar_t values to compare; if the\nstrings match to this number of wchar_t (or both have matched to a\nnull-terminator character before this number of bytes), they will be\nconsidered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of wchar_t values to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsncasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcstol": {
          "doc": "Parse a `long` from a wide string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long`, the result is clamped to\nthe minimum and maximum representable `long` values.\n\n\\param str The null-terminated wide string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid wide character\n            (i.e. the next character after the parsed number) will be\n            written to this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strtol",
          "name": "SDL_wcstol",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "str",
              "type": "const wchar_t *"
            },
            {
              "name": "endp",
              "type": "wchar_t **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strlen": {
          "doc": "This works exactly like strlen() but doesn't require access to a C runtime.\n\nCounts the bytes in `str`, excluding the null terminator.\n\nIf you need the length of a UTF-8 string, consider using SDL_utf8strlen().\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the length (in bytes, excluding the null terminator) of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strnlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_strlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_strnlen": {
          "doc": "This works exactly like strnlen() but doesn't require access to a C\nruntime.\n\nCounts up to a maximum of `maxlen` bytes in `str`, excluding the null\nterminator.\n\nIf you need the length of a UTF-8 string, consider using SDL_utf8strnlen().\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param maxlen The maximum amount of bytes to count.\n\\returns the length (in bytes, excluding the null terminator) of `src` but\n         never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_strnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strlcpy": {
          "doc": "Copy a string.\n\nThis function copies up to `maxlen` - 1 characters from `src` to `dst`,\nthen appends a null terminator.\n\nIf `maxlen` is 0, no characters are copied and no null terminator is\nwritten.\n\nIf you want to copy an UTF-8 string but need to ensure that multi-byte\nsequences are not truncated, consider using SDL_utf8strlcpy().\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated string to copy. Must not be NULL, and must\n           not overlap with `dst`.\n\\param maxlen The length (in characters) of the destination buffer.\n\\returns the length (in characters, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcat\n\\sa SDL_utf8strlcpy",
          "name": "SDL_strlcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_utf8strlcpy": {
          "doc": "Copy an UTF-8 string.\n\nThis function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while\nalso ensuring that the string written to `dst` does not end in a truncated\nmulti-byte sequence. Finally, it appends a null terminator.\n\n`src` and `dst` must not overlap.\n\nNote that unlike SDL_strlcpy(), this function returns the number of bytes\nwritten, not the length of `src`.\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated UTF-8 string to copy. Must not be NULL, and\n           must not overlap with `dst`.\n\\param dst_bytes The length (in bytes) of the destination buffer. Must not\n                 be 0.\n\\returns the number of bytes written, excluding the null terminator.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcpy",
          "name": "SDL_utf8strlcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "const char *"
            },
            {
              "name": "dst_bytes",
              "type": "size_t"
            }
          ]
        },
        "SDL_strlcat": {
          "doc": "Concatenate strings.\n\nThis function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from\n`src` to the end of the string in `dst`, then appends a null terminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is\nunmodified.\n\n\\param dst The destination buffer already containing the first\n           null-terminated string. Must not be NULL and must not overlap\n           with `src`.\n\\param src The second null-terminated string. Must not be NULL, and must\n           not overlap with `dst`.\n\\param maxlen The length (in characters) of the destination buffer.\n\\returns the length (in characters, excluding the null terminator) of the\n         string in `dst` plus the length of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcpy",
          "name": "SDL_strlcat",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strdup": {
          "doc": "Allocate a copy of a string.\n\nThis allocates enough space for a null-terminated copy of `str`, using\nSDL_malloc, and then makes a copy of the string into this space.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param str the string to copy.\n\\returns a pointer to the newly-allocated string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strdup",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_strndup": {
          "doc": "Allocate a copy of a string, up to n characters.\n\nThis allocates enough space for a null-terminated copy of `str`, up to\n`maxlen` bytes, using SDL_malloc, and then makes a copy of the string into\nthis space.\n\nIf the string is longer than `maxlen` bytes, the returned string will be\n`maxlen` bytes long, plus a null-terminator character that isn't included\nin the count.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param str the string to copy.\n\\param maxlen the maximum length of the copied string, not counting the\n              null-terminator character.\n\\returns a pointer to the newly-allocated string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strndup",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strrev": {
          "doc": "Reverse a string's contents.\n\nThis reverses a null-terminated string in-place. Only the content of the\nstring is reversed; the null-terminator character remains at the end of the\nreversed string.\n\n**WARNING**: This function reverses the _bytes_ of the string, not the\ncodepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this\nwill ruin the string data. You should only use this function on strings\nthat are completely comprised of low ASCII characters.\n\n\\param str the string to reverse.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strrev",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "SDL_strupr": {
          "doc": "Convert a string to uppercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to uppercase.\n\nThis function operates on a null-terminated string of bytes--even if it is\nmalformed UTF-8!--and converts ASCII characters 'a' through 'z' to their\nuppercase equivalents in-place, returning the original `str` pointer.\n\n\\param str the string to convert in-place. Can not be NULL.\n\\returns the `str` pointer passed into this function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlwr",
          "name": "SDL_strupr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "SDL_strlwr": {
          "doc": "Convert a string to lowercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to lowercase.\n\nThis function operates on a null-terminated string of bytes--even if it is\nmalformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their\nlowercase equivalents in-place, returning the original `str` pointer.\n\n\\param str the string to convert in-place. Can not be NULL.\n\\returns the `str` pointer passed into this function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strupr",
          "name": "SDL_strlwr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "SDL_strchr": {
          "doc": "Search a string for the first instance of a specific byte.\n\nThe search ends once it finds the requested byte value, or a null\nterminator byte to end the string.\n\nNote that this looks for _bytes_, not _characters_, so you cannot match\nagainst a Unicode codepoint > 255, regardless of character encoding.\n\n\\param str the string to search. Must not be NULL.\n\\param c the byte value to search for.\n\\returns a pointer to the first instance of `c` in the string, or NULL if\n         not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strchr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "c",
              "type": "int"
            }
          ]
        },
        "SDL_strrchr": {
          "doc": "Search a string for the last instance of a specific byte.\n\nThe search must go until it finds a null terminator byte to end the string.\n\nNote that this looks for _bytes_, not _characters_, so you cannot match\nagainst a Unicode codepoint > 255, regardless of character encoding.\n\n\\param str the string to search. Must not be NULL.\n\\param c the byte value to search for.\n\\returns a pointer to the last instance of `c` in the string, or NULL if\n         not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strrchr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "c",
              "type": "int"
            }
          ]
        },
        "SDL_strstr": {
          "doc": "Search a string for the first instance of a specific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string.\n\nNote that this looks for strings of _bytes_, not _characters_, so it's\nlegal to search for malformed and incomplete UTF-8 sequences.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strstr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const char *"
            },
            {
              "name": "needle",
              "type": "const char *"
            }
          ]
        },
        "SDL_strnstr": {
          "doc": "Search a string, up to n bytes, for the first instance of a specific\nsubstring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string, or `maxlen` bytes have been examined. It is\npossible to use this function on a string without a null terminator.\n\nNote that this looks for strings of _bytes_, not _characters_, so it's\nlegal to search for malformed and incomplete UTF-8 sequences.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\param maxlen the maximum number of bytes to search in `haystack`.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strnstr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const char *"
            },
            {
              "name": "needle",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strcasestr": {
          "doc": "Search a UTF-8 string for the first instance of a specific substring,\ncase-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strcasestr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const char *"
            },
            {
              "name": "needle",
              "type": "const char *"
            }
          ]
        },
        "SDL_strtok_r": {
          "doc": "This works exactly like strtok_r() but doesn't require access to a C\nruntime.\n\nBreak a string up into a series of tokens.\n\nTo start tokenizing a new string, `str` should be the non-NULL address of\nthe string to start tokenizing. Future calls to get the next token from the\nsame string should specify a NULL.\n\nNote that this function will overwrite pieces of `str` with null chars to\nsplit it into tokens. This function cannot be used with const/read-only\nstrings!\n\n`saveptr` just needs to point to a `char *` that can be overwritten; SDL\nwill use this to save tokenizing state between calls. It is initialized if\n`str` is non-NULL, and used to resume tokenizing when `str` is NULL.\n\n\\param str the string to tokenize, or NULL to continue tokenizing.\n\\param delim the delimiter string that separates tokens.\n\\param saveptr pointer to a char *, used for ongoing state.\n\\returns A pointer to the next token, or NULL if no tokens remain.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strtok_r",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "delim",
              "type": "const char *"
            },
            {
              "name": "saveptr",
              "type": "char **"
            }
          ]
        },
        "SDL_utf8strlen": {
          "doc": "Count the number of codepoints in a UTF-8 string.\n\nCounts the _codepoints_, not _bytes_, in `str`, excluding the null\nterminator.\n\nIf you need to count the bytes in a string instead, consider using\nSDL_strlen().\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), so a malformed or incomplete UTF-8 sequence might increase the\ncount by several replacement characters.\n\n\\param str The null-terminated UTF-8 string to read. Must not be NULL.\n\\returns The length (in codepoints, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_utf8strnlen\n\\sa SDL_strlen",
          "name": "SDL_utf8strlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_utf8strnlen": {
          "doc": "Count the number of codepoints in a UTF-8 string, up to n bytes.\n\nCounts the _codepoints_, not _bytes_, in `str`, excluding the null\nterminator.\n\nIf you need to count the bytes in a string instead, consider using\nSDL_strnlen().\n\nThe counting stops at `bytes` bytes (not codepoints!). This seems\ncounterintuitive, but makes it easy to express the total size of the\nstring's buffer.\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), so a malformed or incomplete UTF-8 sequence might increase the\ncount by several replacement characters.\n\n\\param str The null-terminated UTF-8 string to read. Must not be NULL.\n\\param bytes The maximum amount of bytes to count.\n\\returns The length (in codepoints, excluding the null terminator) of `src`\n         but never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_utf8strlen\n\\sa SDL_strnlen",
          "name": "SDL_utf8strnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "bytes",
              "type": "size_t"
            }
          ]
        },
        "SDL_itoa": {
          "doc": "Convert an integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_uitoa\n\\sa SDL_ltoa\n\\sa SDL_lltoa",
          "name": "SDL_itoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_uitoa": {
          "doc": "Convert an unsigned integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_itoa\n\\sa SDL_ultoa\n\\sa SDL_ulltoa",
          "name": "SDL_uitoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned int"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_ltoa": {
          "doc": "Convert a long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ultoa\n\\sa SDL_itoa\n\\sa SDL_lltoa",
          "name": "SDL_ltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_ultoa": {
          "doc": "Convert an unsigned long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ltoa\n\\sa SDL_uitoa\n\\sa SDL_ulltoa",
          "name": "SDL_ultoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_atoi": {
          "doc": "Parse an `int` from a string.\n\nThe result of calling `SDL_atoi(str)` is equivalent to\n`(int)SDL_strtol(str, NULL, 10)`.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the parsed `int`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_itoa",
          "name": "SDL_atoi",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_atof": {
          "doc": "Parse a `double` from a string.\n\nThe result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,\nNULL)`.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the parsed `double`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod",
          "name": "SDL_atof",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_strtol": {
          "doc": "Parse a `long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long`, the result is clamped to\nthe minimum and maximum representable `long` values.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_ltoa\n\\sa SDL_wcstol",
          "name": "SDL_strtol",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strtoul": {
          "doc": "Parse an `unsigned long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside an `unsigned long`, the result is\nclamped to the maximum representable `unsigned long` value.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `unsigned long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_ultoa",
          "name": "SDL_strtoul",
          "kind": "function",
          "type": "unsigned long",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strtod": {
          "doc": "Parse a `double` from a string.\n\nThis function makes fewer guarantees than the C runtime `strtod`:\n\n- Only decimal notation is guaranteed to be supported. The handling of\n  scientific and hexadecimal notation is unspecified.\n- Whether or not INF and NAN can be parsed is unspecified.\n- The precision of the result is unspecified.\n\n\\param str the null-terminated string to read. Must not be NULL.\n\\param endp if not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\returns the parsed `double`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoul\n\\sa SDL_strtoull",
          "name": "SDL_strtod",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            }
          ]
        },
        "SDL_strcmp": {
          "doc": "Compare two null-terminated UTF-8 strings.\n\nDue to the nature of UTF-8 encoding, this will work with Unicode strings,\nsince effectively this function just compares bytes until it hits a\nnull-terminating character. Also due to the nature of UTF-8, this can be\nused with SDL_qsort() to put strings in (roughly) alphabetical order.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strcmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            }
          ]
        },
        "SDL_strncmp": {
          "doc": "Compare two UTF-8 strings up to a number of bytes.\n\nDue to the nature of UTF-8 encoding, this will work with Unicode strings,\nsince effectively this function just compares bytes until it hits a\nnull-terminating character. Also due to the nature of UTF-8, this can be\nused with SDL_qsort() to put strings in (roughly) alphabetical order.\n\nNote that while this function is intended to be used with UTF-8, it is\ndoing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the\nlimit lands in the middle of a multi-byte UTF-8 sequence, it will only\ncompare a portion of the final character.\n\n`maxlen` specifies a maximum number of bytes to compare; if the strings\nmatch to this number of bytes (or both have matched to a null-terminator\ncharacter before this number of bytes), they will be considered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of _bytes_ to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strncmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strcasecmp": {
          "doc": "Compare two null-terminated UTF-8 strings, case-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the string to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strcasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            }
          ]
        },
        "SDL_strncasecmp": {
          "doc": "Compare two UTF-8 strings, case-insensitively, up to a number of bytes.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the string to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\nNote that while this function is intended to be used with UTF-8, `maxlen`\nspecifies a _byte_ limit! If the limit lands in the middle of a multi-byte\nUTF-8 sequence, it may convert a portion of the final character to one or\nmore Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow\na buffer.\n\n`maxlen` specifies a maximum number of bytes to compare; if the strings\nmatch to this number of bytes (or both have matched to a null-terminator\ncharacter before this number of bytes), they will be considered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of bytes to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strncasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strpbrk": {
          "doc": "Searches a string for the first occurence of any character contained in a\nbreakset, and returns a pointer from the string to that character.\n\n\\param str The null-terminated string to be searched. Must not be NULL, and\n           must not overlap with `breakset`.\n\\param breakset A null-terminated string containing the list of characters\n                to look for. Must not be NULL, and must not overlap with\n                `str`.\n\\returns A pointer to the location, in str, of the first occurence of a\n         character present in the breakset, or NULL if none is found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strpbrk",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "breakset",
              "type": "const char *"
            }
          ]
        },
        "SDL_INVALID_UNICODE_CODEPOINT": {
          "doc": "The Unicode REPLACEMENT CHARACTER codepoint.\n\nSDL_StepUTF8() and SDL_StepBackUTF8() report this codepoint when they\nencounter a UTF-8 string with encoding errors.\n\nThis tends to render as something like a question mark in most places.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_StepBackUTF8\n\\sa SDL_StepUTF8",
          "name": "SDL_INVALID_UNICODE_CODEPOINT",
          "kind": "def",
          "value": "0xFFFD"
        },
        "SDL_StepUTF8": {
          "doc": "Decode a UTF-8 string, one Unicode codepoint at a time.\n\nThis will return the first Unicode codepoint in the UTF-8 encoded string in\n`*pstr`, and then advance `*pstr` past any consumed bytes before returning.\n\nIt will not access more than `*pslen` bytes from the string. `*pslen` will\nbe adjusted, as well, subtracting the number of bytes consumed.\n\n`pslen` is allowed to be NULL, in which case the string _must_ be\nNULL-terminated, as the function will blindly read until it sees the NULL\nchar.\n\nif `*pslen` is zero, it assumes the end of string is reached and returns a\nzero codepoint regardless of the contents of the string buffer.\n\nIf the resulting codepoint is zero (a NULL terminator), or `*pslen` is\nzero, it will not advance `*pstr` or `*pslen` at all.\n\nGenerally this function is called in a loop until it returns zero,\nadjusting its parameters each iteration.\n\nIf an invalid UTF-8 sequence is encountered, this function returns\nSDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte\n(which is to say, a multibyte sequence might produce several\nSDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid\nUTF-8 sequence).\n\nSeveral things can generate invalid UTF-8 sequences, including overlong\nencodings, the use of UTF-16 surrogate values, and truncated data. Please\nrefer to\n[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)\nfor details.\n\n\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.\n\\param pslen a pointer to the number of bytes in the string, to be read and\n             adjusted. NULL is allowed.\n\\returns the first Unicode codepoint in the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_StepUTF8",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "pstr",
              "type": "const char **"
            },
            {
              "name": "pslen",
              "type": "size_t *"
            }
          ]
        },
        "SDL_StepBackUTF8": {
          "doc": "Decode a UTF-8 string in reverse, one Unicode codepoint at a time.\n\nThis will go to the start of the previous Unicode codepoint in the string,\nmove `*pstr` to that location and return that codepoint.\n\nIf `*pstr` is already at the start of the string), it will not advance\n`*pstr` at all.\n\nGenerally this function is called in a loop until it returns zero,\nadjusting its parameter each iteration.\n\nIf an invalid UTF-8 sequence is encountered, this function returns\nSDL_INVALID_UNICODE_CODEPOINT.\n\nSeveral things can generate invalid UTF-8 sequences, including overlong\nencodings, the use of UTF-16 surrogate values, and truncated data. Please\nrefer to\n[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)\nfor details.\n\n\\param start a pointer to the beginning of the UTF-8 string.\n\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.\n\\returns the previous Unicode codepoint in the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_StepBackUTF8",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "start",
              "type": "const char *"
            },
            {
              "name": "pstr",
              "type": "const char **"
            }
          ]
        },
        "SDL_UCS4ToUTF8": {
          "doc": "Convert a single Unicode codepoint to UTF-8.\n\nThe buffer pointed to by `dst` must be at least 4 bytes long, as this\nfunction may generate between 1 and 4 bytes of output.\n\nThis function returns the first byte _after_ the newly-written UTF-8\nsequence, which is useful for encoding multiple codepoints in a loop, or\nknowing where to write a NULL-terminator character to end the string (in\neither case, plan to have a buffer of _more_ than 4 bytes!).\n\nIf `codepoint` is an invalid value (outside the Unicode range, or a UTF-16\nsurrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the\ncodepoint instead, and not set an error.\n\nIf `dst` is NULL, this returns NULL immediately without writing to the\npointer and without setting an error.\n\n\\param codepoint a Unicode codepoint to convert to UTF-8.\n\\param dst the location to write the encoded UTF-8. Must point to at least\n           4 bytes!\n\\returns the first byte past the newly-written UTF-8 sequence.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_UCS4ToUTF8",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "codepoint",
              "type": "Uint32"
            },
            {
              "name": "dst",
              "type": "char *"
            }
          ]
        },
        "SDL_sscanf": {
          "doc": "This works exactly like sscanf() but doesn't require access to a C runtime.\n\nScan a string, matching a format string, converting each '%' item and\nstoring it to pointers provided through variable arguments.\n\n\\param text the string to scan. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of pointers to values to be filled in with scanned items.\n\\returns the number of items that matched the format string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_sscanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "fmt",
              "type": "SDL_SCANF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_vsscanf": {
          "doc": "This works exactly like vsscanf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_sscanf(), except it takes a `va_list` instead\nof using `...` variable arguments.\n\n\\param text the string to scan. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` of pointers to values to be filled in with scanned\n          items.\n\\returns the number of items that matched the format string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vsscanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "fmt",
              "type": "SDL_SCANF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_snprintf": {
          "doc": "This works exactly like snprintf() but doesn't require access to a C\nruntime.\n\nFormat a string of up to `maxlen`-1 bytes, converting each '%' item with\nvalues provided through variable arguments.\n\nWhile some C runtimes differ on how to deal with too-large strings, this\nfunction null-terminates the output, by treating the null-terminator as\npart of the `maxlen` count. Note that if `maxlen` is zero, however, no\nbytes will be written at all.\n\nThis function returns the number of _bytes_ (not _characters_) that should\nbe written, excluding the null-terminator character. If this returns a\nnumber >= `maxlen`, it means the output string was truncated. A negative\nreturn value means an error occurred.\n\nReferencing the output string's pointer with a format item is undefined\nbehavior.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum bytes to write, including the null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of bytes that should be written, not counting the\n         null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_snprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_swprintf": {
          "doc": "This works exactly like swprintf() but doesn't require access to a C\nruntime.\n\nFormat a wide string of up to `maxlen`-1 wchar_t values, converting each\n'%' item with values provided through variable arguments.\n\nWhile some C runtimes differ on how to deal with too-large strings, this\nfunction null-terminates the output, by treating the null-terminator as\npart of the `maxlen` count. Note that if `maxlen` is zero, however, no wide\ncharacters will be written at all.\n\nThis function returns the number of _wide characters_ (not _codepoints_)\nthat should be written, excluding the null-terminator character. If this\nreturns a number >= `maxlen`, it means the output string was truncated. A\nnegative return value means an error occurred.\n\nReferencing the output string's pointer with a format item is undefined\nbehavior.\n\n\\param text the buffer to write the wide string into. Must not be NULL.\n\\param maxlen the maximum wchar_t values to write, including the\n              null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of wide characters that should be written, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_swprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const wchar_t *"
            },
            "..."
          ]
        },
        "SDL_vsnprintf": {
          "doc": "This works exactly like vsnprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_snprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum bytes to write, including the null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of bytes that should be written, not counting the\n         null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vsnprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_vswprintf": {
          "doc": "This works exactly like vswprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_swprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum wide characters to write, including the\n              null-terminator.\n\\param fmt a printf-style format wide string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of wide characters that should be written, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vswprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const wchar_t *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_asprintf": {
          "doc": "This works exactly like asprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_snprintf(), except it allocates a buffer large\nenough to hold the output string on behalf of the caller.\n\nOn success, this function returns the number of bytes (not characters)\ncomprising the output string, not counting the null-terminator character,\nand sets `*strp` to the newly-allocated string.\n\nOn error, this function returns a negative number, and the value of `*strp`\nis undefined.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param strp on output, is set to the new string. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of bytes in the newly-allocated string, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_asprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "strp",
              "type": "char **"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_vasprintf": {
          "doc": "This works exactly like vasprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_asprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param strp on output, is set to the new string. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of bytes in the newly-allocated string, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vasprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "strp",
              "type": "char **"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_srand": {
          "doc": "Seeds the pseudo-random number generator.\n\nReusing the seed number will cause SDL_rand() to repeat the same stream of\n'random' numbers.\n\n\\param seed the value to use as a random number seed, or 0 to use\n            SDL_GetPerformanceCounter().\n\n\\threadsafety This should be called on the same thread that calls\n              SDL_rand()\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_rand_bits\n\\sa SDL_randf",
          "name": "SDL_srand",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "seed",
              "type": "Uint64"
            }
          ]
        },
        "SDL_rand": {
          "doc": "Generate a pseudo-random number less than n for positive n\n\nThe method used is faster and of better quality than `rand() % n`. Odds are\nroughly 99.9% even for n = 1 million. Evenness is better for smaller n, and\nmuch worse as n gets bigger.\n\nExample: to simulate a d6 use `SDL_rand(6) + 1` The +1 converts 0..5 to\n1..6\n\nIf you want to generate a pseudo-random number in the full range of Sint32,\nyou should use: (Sint32)SDL_rand_bits()\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param n the number of possible outcomes. n must be positive.\n\\returns a random value in the range of [0 .. n-1].\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_srand\n\\sa SDL_randf",
          "name": "SDL_rand",
          "kind": "function",
          "type": "Sint32",
          "parameters": [
            {
              "name": "n",
              "type": "Sint32"
            }
          ]
        },
        "SDL_randf": {
          "doc": "Generate a uniform pseudo-random floating point number less than 1.0\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\returns a random value in the range of [0.0, 1.0).\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_srand\n\\sa SDL_rand",
          "name": "SDL_randf",
          "kind": "function",
          "type": "float",
          "parameters": []
        },
        "SDL_rand_bits": {
          "doc": "Generate 32 pseudo-random bits.\n\nYou likely want to use SDL_rand() to get a psuedo-random number instead.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\returns a random value in the range of [0-SDL_MAX_UINT32].\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_randf\n\\sa SDL_srand",
          "name": "SDL_rand_bits",
          "kind": "function",
          "type": "Uint32",
          "parameters": []
        },
        "SDL_rand_r": {
          "doc": "Generate a pseudo-random number less than n for positive n\n\nThe method used is faster and of better quality than `rand() % n`. Odds are\nroughly 99.9% even for n = 1 million. Evenness is better for smaller n, and\nmuch worse as n gets bigger.\n\nExample: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts\n0..5 to 1..6\n\nIf you want to generate a pseudo-random number in the full range of Sint32,\nyou should use: (Sint32)SDL_rand_bits_r(state)\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\param n the number of possible outcomes. n must be positive.\n\\returns a random value in the range of [0 .. n-1].\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_rand_bits_r\n\\sa SDL_randf_r",
          "name": "SDL_rand_r",
          "kind": "function",
          "type": "Sint32",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            },
            {
              "name": "n",
              "type": "Sint32"
            }
          ]
        },
        "SDL_randf_r": {
          "doc": "Generate a uniform pseudo-random floating point number less than 1.0\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\returns a random value in the range of [0.0, 1.0).\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand_bits_r\n\\sa SDL_rand_r\n\\sa SDL_randf",
          "name": "SDL_randf_r",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_rand_bits_r": {
          "doc": "Generate 32 pseudo-random bits.\n\nYou likely want to use SDL_rand_r() to get a psuedo-random number instead.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\returns a random value in the range of [0-SDL_MAX_UINT32].\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand_r\n\\sa SDL_randf_r",
          "name": "SDL_rand_bits_r",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_PI_D": {
          "doc": "The value of Pi, as a double-precision floating point literal.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_PI_F",
          "name": "SDL_PI_D",
          "kind": "def",
          "value": "3.141592653589793238462643383279502884"
        },
        "SDL_PI_F": {
          "doc": "The value of Pi, as a single-precision floating point literal.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_PI_D",
          "name": "SDL_PI_F",
          "kind": "def",
          "value": "3.141592653589793238462643383279502884F"
        },
        "SDL_acos": {
          "doc": "Compute the arc cosine of `x`.\n\nThe definition of `y = acos(x)` is `x = cos(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `0 <= y <= Pi`\n\nThis function operates on double-precision floating point values, use\nSDL_acosf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc cosine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_acosf\n\\sa SDL_asin\n\\sa SDL_cos",
          "name": "SDL_acos",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_acosf": {
          "doc": "Compute the arc cosine of `x`.\n\nThe definition of `y = acos(x)` is `x = cos(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `0 <= y <= Pi`\n\nThis function operates on single-precision floating point values, use\nSDL_acos for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc cosine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_acos\n\\sa SDL_asinf\n\\sa SDL_cosf",
          "name": "SDL_acosf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_asin": {
          "doc": "Compute the arc sine of `x`.\n\nThe definition of `y = asin(x)` is `x = sin(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_asinf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc sine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_asinf\n\\sa SDL_acos\n\\sa SDL_sin",
          "name": "SDL_asin",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_asinf": {
          "doc": "Compute the arc sine of `x`.\n\nThe definition of `y = asin(x)` is `x = sin(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_asin for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc sine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_asin\n\\sa SDL_acosf\n\\sa SDL_sinf",
          "name": "SDL_asinf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_atan": {
          "doc": "Compute the arc tangent of `x`.\n\nThe definition of `y = atan(x)` is `x = tan(y)`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_atanf for single-precision floats.\n\nTo calculate the arc tangent of y / x, use SDL_atan2.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atanf\n\\sa SDL_atan2\n\\sa SDL_tan",
          "name": "SDL_atan",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_atanf": {
          "doc": "Compute the arc tangent of `x`.\n\nThe definition of `y = atan(x)` is `x = tan(y)`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_atan for dboule-precision floats.\n\nTo calculate the arc tangent of y / x, use SDL_atan2f.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan\n\\sa SDL_atan2f\n\\sa SDL_tanf",
          "name": "SDL_atanf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_atan2": {
          "doc": "Compute the arc tangent of `y / x`, using the signs of x and y to adjust\nthe result's quadrant.\n\nThe definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant\nof z is determined based on the signs of x and y.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_atan2f for single-precision floats.\n\nTo calculate the arc tangent of a single value, use SDL_atan.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param y floating point value of the numerator (y coordinate).\n\\param x floating point value of the denominator (x coordinate).\n\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either\n         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan2f\n\\sa SDL_atan\n\\sa SDL_tan",
          "name": "SDL_atan2",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_atan2f": {
          "doc": "Compute the arc tangent of `y / x`, using the signs of x and y to adjust\nthe result's quadrant.\n\nThe definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant\nof z is determined based on the signs of x and y.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_atan2 for double-precision floats.\n\nTo calculate the arc tangent of a single value, use SDL_atanf.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param y floating point value of the numerator (y coordinate).\n\\param x floating point value of the denominator (x coordinate).\n\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either\n         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan2\n\\sa SDL_atan\n\\sa SDL_tan",
          "name": "SDL_atan2f",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_ceil": {
          "doc": "Compute the ceiling of `x`.\n\nThe ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`\nrounded up to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_ceilf for single-precision floats.\n\n\\param x floating point value.\n\\returns the ceiling of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ceilf\n\\sa SDL_floor\n\\sa SDL_trunc\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_ceil",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_ceilf": {
          "doc": "Compute the ceiling of `x`.\n\nThe ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`\nrounded up to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_ceil for double-precision floats.\n\n\\param x floating point value.\n\\returns the ceiling of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ceil\n\\sa SDL_floorf\n\\sa SDL_truncf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_ceilf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_copysign": {
          "doc": "Copy the sign of one floating-point value to another.\n\nThe definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.\n\nDomain: `-INF <= x <= INF`, ``-INF <= y <= f``\n\nRange: `-INF <= z <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_copysignf for single-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\param y floating point value to use as the sign.\n\\returns the floating point value with the sign of y and the magnitude of\n         x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_copysignf\n\\sa SDL_fabs",
          "name": "SDL_copysign",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "SDL_copysignf": {
          "doc": "Copy the sign of one floating-point value to another.\n\nThe definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.\n\nDomain: `-INF <= x <= INF`, ``-INF <= y <= f``\n\nRange: `-INF <= z <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_copysign for double-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\param y floating point value to use as the sign.\n\\returns the floating point value with the sign of y and the magnitude of\n         x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_copysign\n\\sa SDL_fabsf",
          "name": "SDL_copysignf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_cos": {
          "doc": "Compute the cosine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on double-precision floating point values, use\nSDL_cosf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns cosine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_cosf\n\\sa SDL_acos\n\\sa SDL_sin",
          "name": "SDL_cos",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_cosf": {
          "doc": "Compute the cosine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on single-precision floating point values, use\nSDL_cos for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns cosine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_cos\n\\sa SDL_acosf\n\\sa SDL_sinf",
          "name": "SDL_cosf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_exp": {
          "doc": "Compute the exponential of `x`.\n\nThe definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the\nnatural logarithm. The inverse is the natural logarithm, SDL_log.\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThe output will overflow if `exp(x)` is too large to be represented.\n\nThis function operates on double-precision floating point values, use\nSDL_expf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns value of `e^x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_expf\n\\sa SDL_log",
          "name": "SDL_exp",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_expf": {
          "doc": "Compute the exponential of `x`.\n\nThe definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the\nnatural logarithm. The inverse is the natural logarithm, SDL_logf.\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThe output will overflow if `exp(x)` is too large to be represented.\n\nThis function operates on single-precision floating point values, use\nSDL_exp for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns value of `e^x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_exp\n\\sa SDL_logf",
          "name": "SDL_expf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_fabs": {
          "doc": "Compute the absolute value of `x`\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_fabsf for single-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\returns the absolute value of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fabsf",
          "name": "SDL_fabs",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_fabsf": {
          "doc": "Compute the absolute value of `x`\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_fabs for double-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\returns the absolute value of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fabs",
          "name": "SDL_fabsf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_floor": {
          "doc": "Compute the floor of `x`.\n\nThe floor of `x` is the largest integer `y` such that `y > x`, i.e `x`\nrounded down to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_floorf for single-precision floats.\n\n\\param x floating point value.\n\\returns the floor of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_floorf\n\\sa SDL_ceil\n\\sa SDL_trunc\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_floor",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_floorf": {
          "doc": "Compute the floor of `x`.\n\nThe floor of `x` is the largest integer `y` such that `y > x`, i.e `x`\nrounded down to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_floor for double-precision floats.\n\n\\param x floating point value.\n\\returns the floor of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_floor\n\\sa SDL_ceilf\n\\sa SDL_truncf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_floorf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_trunc": {
          "doc": "Truncate `x` to an integer.\n\nRounds `x` to the next closest integer to 0. This is equivalent to removing\nthe fractional part of `x`, leaving only the integer part.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_truncf for single-precision floats.\n\n\\param x floating point value.\n\\returns `x` truncated to an integer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_truncf\n\\sa SDL_fmod\n\\sa SDL_ceil\n\\sa SDL_floor\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_trunc",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_truncf": {
          "doc": "Truncate `x` to an integer.\n\nRounds `x` to the next closest integer to 0. This is equivalent to removing\nthe fractional part of `x`, leaving only the integer part.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_trunc for double-precision floats.\n\n\\param x floating point value.\n\\returns `x` truncated to an integer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_trunc\n\\sa SDL_fmodf\n\\sa SDL_ceilf\n\\sa SDL_floorf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_truncf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_fmod": {
          "doc": "Return the floating-point remainder of `x / y`\n\nDivides `x` by `y`, and returns the remainder.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`\n\nRange: `-y <= z <= y`\n\nThis function operates on double-precision floating point values, use\nSDL_fmodf for single-precision floats.\n\n\\param x the numerator.\n\\param y the denominator. Must not be 0.\n\\returns the remainder of `x / y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fmodf\n\\sa SDL_modf\n\\sa SDL_trunc\n\\sa SDL_ceil\n\\sa SDL_floor\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_fmod",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "SDL_fmodf": {
          "doc": "Return the floating-point remainder of `x / y`\n\nDivides `x` by `y`, and returns the remainder.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`\n\nRange: `-y <= z <= y`\n\nThis function operates on single-precision floating point values, use\nSDL_fmod for double-precision floats.\n\n\\param x the numerator.\n\\param y the denominator. Must not be 0.\n\\returns the remainder of `x / y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fmod\n\\sa SDL_truncf\n\\sa SDL_modff\n\\sa SDL_ceilf\n\\sa SDL_floorf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_fmodf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_isinf": {
          "doc": "Return whether the value is infinity.\n\n\\param x double-precision floating point value.\n\\returns non-zero if the value is infinity, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isinff",
          "name": "SDL_isinf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_isinff": {
          "doc": "Return whether the value is infinity.\n\n\\param x floating point value.\n\\returns non-zero if the value is infinity, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isinf",
          "name": "SDL_isinff",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_isnan": {
          "doc": "Return whether the value is NaN.\n\n\\param x double-precision floating point value.\n\\returns non-zero if the value is NaN, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isnanf",
          "name": "SDL_isnan",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_isnanf": {
          "doc": "Return whether the value is NaN.\n\n\\param x floating point value.\n\\returns non-zero if the value is NaN, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isnan",
          "name": "SDL_isnanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_log": {
          "doc": "Compute the natural logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on double-precision floating point values, use\nSDL_logf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the natural logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_logf\n\\sa SDL_log10\n\\sa SDL_exp",
          "name": "SDL_log",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_logf": {
          "doc": "Compute the natural logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on single-precision floating point values, use\nSDL_log for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the natural logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log\n\\sa SDL_expf",
          "name": "SDL_logf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_log10": {
          "doc": "Compute the base-10 logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on double-precision floating point values, use\nSDL_log10f for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log10f\n\\sa SDL_log\n\\sa SDL_pow",
          "name": "SDL_log10",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_log10f": {
          "doc": "Compute the base-10 logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on single-precision floating point values, use\nSDL_log10 for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log10\n\\sa SDL_logf\n\\sa SDL_powf",
          "name": "SDL_log10f",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_modf": {
          "doc": "Split `x` into integer and fractional parts\n\nThis function operates on double-precision floating point values, use\nSDL_modff for single-precision floats.\n\n\\param x floating point value.\n\\param y output pointer to store the integer part of `x`.\n\\returns the fractional part of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_modff\n\\sa SDL_trunc\n\\sa SDL_fmod",
          "name": "SDL_modf",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double *"
            }
          ]
        },
        "SDL_modff": {
          "doc": "Split `x` into integer and fractional parts\n\nThis function operates on single-precision floating point values, use\nSDL_modf for double-precision floats.\n\n\\param x floating point value.\n\\param y output pointer to store the integer part of `x`.\n\\returns the fractional part of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_modf\n\\sa SDL_truncf\n\\sa SDL_fmodf",
          "name": "SDL_modff",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_pow": {
          "doc": "Raise `x` to the power `y`\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-INF <= z <= INF`\n\nIf `y` is the base of the natural logarithm (e), consider using SDL_exp\ninstead.\n\nThis function operates on double-precision floating point values, use\nSDL_powf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x the base.\n\\param y the exponent.\n\\returns `x` raised to the power `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_powf\n\\sa SDL_exp\n\\sa SDL_log",
          "name": "SDL_pow",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "SDL_powf": {
          "doc": "Raise `x` to the power `y`\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-INF <= z <= INF`\n\nIf `y` is the base of the natural logarithm (e), consider using SDL_exp\ninstead.\n\nThis function operates on single-precision floating point values, use\nSDL_pow for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x the base.\n\\param y the exponent.\n\\returns `x` raised to the power `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_pow\n\\sa SDL_expf\n\\sa SDL_logf",
          "name": "SDL_powf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_round": {
          "doc": "Round `x` to the nearest integer.\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_roundf for single-precision floats. To get the result as an integer\ntype, use SDL_lround.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_roundf\n\\sa SDL_lround\n\\sa SDL_floor\n\\sa SDL_ceil\n\\sa SDL_trunc",
          "name": "SDL_round",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_roundf": {
          "doc": "Round `x` to the nearest integer.\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_round for double-precision floats. To get the result as an integer\ntype, use SDL_lroundf.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_round\n\\sa SDL_lroundf\n\\sa SDL_floorf\n\\sa SDL_ceilf\n\\sa SDL_truncf",
          "name": "SDL_roundf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_lround": {
          "doc": "Round `x` to the nearest integer representable as a long\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `MIN_LONG <= y <= MAX_LONG`\n\nThis function operates on double-precision floating point values, use\nSDL_lroundf for single-precision floats. To get the result as a\nfloating-point type, use SDL_round.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lroundf\n\\sa SDL_round\n\\sa SDL_floor\n\\sa SDL_ceil\n\\sa SDL_trunc",
          "name": "SDL_lround",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_lroundf": {
          "doc": "Round `x` to the nearest integer representable as a long\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `MIN_LONG <= y <= MAX_LONG`\n\nThis function operates on single-precision floating point values, use\nSDL_lround for double-precision floats. To get the result as a\nfloating-point type, use SDL_roundf.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lround\n\\sa SDL_roundf\n\\sa SDL_floorf\n\\sa SDL_ceilf\n\\sa SDL_truncf",
          "name": "SDL_lroundf",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_scalbn": {
          "doc": "Scale `x` by an integer power of two.\n\nMultiplies `x` by the `n`th power of the floating point radix (always 2).\n\nDomain: `-INF <= x <= INF`, `n` integer\n\nRange: `-INF <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_scalbnf for single-precision floats.\n\n\\param x floating point value to be scaled.\n\\param n integer exponent.\n\\returns `x * 2^n`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_scalbnf\n\\sa SDL_pow",
          "name": "SDL_scalbn",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "n",
              "type": "int"
            }
          ]
        },
        "SDL_scalbnf": {
          "doc": "Scale `x` by an integer power of two.\n\nMultiplies `x` by the `n`th power of the floating point radix (always 2).\n\nDomain: `-INF <= x <= INF`, `n` integer\n\nRange: `-INF <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_scalbn for double-precision floats.\n\n\\param x floating point value to be scaled.\n\\param n integer exponent.\n\\returns `x * 2^n`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_scalbn\n\\sa SDL_powf",
          "name": "SDL_scalbnf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "n",
              "type": "int"
            }
          ]
        },
        "SDL_sin": {
          "doc": "Compute the sine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on double-precision floating point values, use\nSDL_sinf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns sine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sinf\n\\sa SDL_asin\n\\sa SDL_cos",
          "name": "SDL_sin",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_sinf": {
          "doc": "Compute the sine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on single-precision floating point values, use\nSDL_sin for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns sine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sin\n\\sa SDL_asinf\n\\sa SDL_cosf",
          "name": "SDL_sinf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_sqrt": {
          "doc": "Compute the square root of `x`.\n\nDomain: `0 <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_sqrtf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than or equal to 0.\n\\returns square root of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sqrtf",
          "name": "SDL_sqrt",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_sqrtf": {
          "doc": "Compute the square root of `x`.\n\nDomain: `0 <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_sqrt for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than or equal to 0.\n\\returns square root of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sqrt",
          "name": "SDL_sqrtf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_tan": {
          "doc": "Compute the tangent of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_tanf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns tangent of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_tanf\n\\sa SDL_sin\n\\sa SDL_cos\n\\sa SDL_atan\n\\sa SDL_atan2",
          "name": "SDL_tan",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_tanf": {
          "doc": "Compute the tangent of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_tan for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns tangent of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_tan\n\\sa SDL_sinf\n\\sa SDL_cosf\n\\sa SDL_atanf\n\\sa SDL_atan2f",
          "name": "SDL_tanf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_iconv_t": {
          "doc": "An opaque handle representing string encoding conversion state.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open",
          "name": "SDL_iconv_t",
          "kind": "alias",
          "type": "struct SDL_iconv_data_t *"
        },
        "SDL_iconv_open": {
          "doc": "This function allocates a context for the specified character set\nconversion.\n\n\\param tocode The target character encoding, must not be NULL.\n\\param fromcode The source character encoding, must not be NULL.\n\\returns a handle that must be freed with SDL_iconv_close, or\n         SDL_ICONV_ERROR on failure.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv\n\\sa SDL_iconv_close\n\\sa SDL_iconv_string",
          "name": "SDL_iconv_open",
          "kind": "function",
          "type": "SDL_iconv_t",
          "parameters": [
            {
              "name": "tocode",
              "type": "const char *"
            },
            {
              "name": "fromcode",
              "type": "const char *"
            }
          ]
        },
        "SDL_iconv_close": {
          "doc": "This function frees a context used for character set conversion.\n\n\\param cd The character set conversion handle.\n\\returns 0 on success, or -1 on failure.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv\n\\sa SDL_iconv_open\n\\sa SDL_iconv_string",
          "name": "SDL_iconv_close",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "cd",
              "type": "SDL_iconv_t"
            }
          ]
        },
        "SDL_iconv": {
          "doc": "This function converts text between encodings, reading from and writing to\na buffer.\n\nIt returns the number of succesful conversions on success. On error,\nSDL_ICONV_E2BIG is returned when the output buffer is too small, or\nSDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,\nor SDL_ICONV_EINVAL is returned when an incomplete input sequence is\nencountered.\n\nOn exit:\n\n- inbuf will point to the beginning of the next multibyte sequence. On\n  error, this is the location of the problematic input sequence. On\n  success, this is the end of the input sequence.\n- inbytesleft will be set to the number of bytes left to convert, which\n  will be 0 on success.\n- outbuf will point to the location where to store the next output byte.\n- outbytesleft will be set to the number of bytes left in the output\n  buffer.\n\n\\param cd The character set conversion context, created in\n          SDL_iconv_open().\n\\param inbuf Address of variable that points to the first character of the\n             input sequence.\n\\param inbytesleft The number of bytes in the input buffer.\n\\param outbuf Address of variable that points to the output buffer.\n\\param outbytesleft The number of bytes in the output buffer.\n\\returns the number of conversions on success, or a negative error code.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open\n\\sa SDL_iconv_close\n\\sa SDL_iconv_string",
          "name": "SDL_iconv",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "cd",
              "type": "SDL_iconv_t"
            },
            {
              "name": "inbuf",
              "type": "const char **"
            },
            {
              "name": "inbytesleft",
              "type": "size_t *"
            },
            {
              "name": "outbuf",
              "type": "char **"
            },
            {
              "name": "outbytesleft",
              "type": "size_t *"
            }
          ]
        },
        "SDL_ICONV_ERROR": {
          "doc": "Generic error. Check SDL_GetError()?",
          "name": "SDL_ICONV_ERROR",
          "kind": "def",
          "value": "(size_t)-1"
        },
        "SDL_ICONV_E2BIG": {
          "doc": "Output buffer was too small.",
          "name": "SDL_ICONV_E2BIG",
          "kind": "def",
          "value": "(size_t)-2"
        },
        "SDL_ICONV_EILSEQ": {
          "doc": "Invalid input sequence was encountered.",
          "name": "SDL_ICONV_EILSEQ",
          "kind": "def",
          "value": "(size_t)-3"
        },
        "SDL_ICONV_EINVAL": {
          "doc": "Incomplete input sequence was encountered.",
          "name": "SDL_ICONV_EINVAL",
          "kind": "def",
          "value": "(size_t)-4"
        },
        "SDL_iconv_string": {
          "doc": "Helper function to convert a string's encoding in one call.\n\nThis function converts a buffer or string between encodings in one pass.\n\nThe string does not need to be NULL-terminated; this function operates on\nthe number of bytes specified in `inbytesleft` whether there is a NULL\ncharacter anywhere in the buffer.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param tocode the character encoding of the output string. Examples are\n              \"UTF-8\", \"UCS-4\", etc.\n\\param fromcode the character encoding of data in `inbuf`.\n\\param inbuf the string to convert to a different encoding.\n\\param inbytesleft the size of the input string _in bytes_.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open\n\\sa SDL_iconv_close\n\\sa SDL_iconv",
          "name": "SDL_iconv_string",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "tocode",
              "type": "const char *"
            },
            {
              "name": "fromcode",
              "type": "const char *"
            },
            {
              "name": "inbuf",
              "type": "const char *"
            },
            {
              "name": "inbytesleft",
              "type": "size_t"
            }
          ]
        },
        "SDL_iconv_utf8_locale": {
          "doc": "Convert a UTF-8 string to the current locale's character encoding.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_utf8_locale",
          "kind": "def",
          "parameters": [
            "S"
          ],
          "value": "SDL_iconv_string(\"\", \"UTF-8\", S, SDL_strlen(S)+1)"
        },
        "SDL_iconv_utf8_ucs2": {
          "doc": "Convert a UTF-8 string to UCS-2.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_utf8_ucs2",
          "kind": "def",
          "parameters": [
            "S"
          ],
          "value": "(Uint16 *)SDL_iconv_string(\"UCS-2\", \"UTF-8\", S, SDL_strlen(S)+1)"
        },
        "SDL_iconv_utf8_ucs4": {
          "doc": "Convert a UTF-8 string to UCS-4.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_utf8_ucs4",
          "kind": "def",
          "parameters": [
            "S"
          ],
          "value": "(Uint32 *)SDL_iconv_string(\"UCS-4\", \"UTF-8\", S, SDL_strlen(S)+1)"
        },
        "SDL_iconv_wchar_utf8": {
          "doc": "Convert a wchar_t string to UTF-8.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_wchar_utf8",
          "kind": "def",
          "parameters": [
            "S"
          ],
          "value": "SDL_iconv_string(\"UTF-8\", \"WCHAR_T\", (char *)S, (SDL_wcslen(S)+1)*sizeof(wchar_t))"
        },
        "SDL_size_mul_check_overflow": {
          "doc": "Multiply two integers, checking for overflow.\n\nIf `a * b` would overflow, return false.\n\nOtherwise store `a * b` via ret and return true.\n\n\\param a the multiplicand.\n\\param b the multiplier.\n\\param ret on non-overflow output, stores the multiplication result, may\n           not be NULL.\n\\returns false on overflow, true if result is multiplied without overflow.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_size_mul_check_overflow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "SDL_size_add_check_overflow": {
          "doc": "Add two integers, checking for overflow.\n\nIf `a + b` would overflow, return false.\n\nOtherwise store `a + b` via ret and return true.\n\n\\param a the first addend.\n\\param b the second addend.\n\\param ret on non-overflow output, stores the addition result, may not be\n           NULL.\n\\returns false on overflow, true if result is added without overflow.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_size_add_check_overflow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "SDL_FunctionPointer": {
          "doc": "A generic function pointer.\n\nIn theory, generic function pointers should use this, instead of `void *`,\nsince some platforms could treat code addresses differently than data\naddresses. Although in current times no popular platforms make this\ndistinction, it is more correct and portable to use the correct type for a\ngeneric pointer.\n\nIf for some reason you need to force this typedef to be an actual `void *`,\nperhaps to work around a compiler or existing code, you can define\n`SDL_FUNCTION_POINTER_IS_VOID_POINTER` before including any SDL headers.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_FunctionPointer",
          "kind": "callback",
          "type": "void",
          "parameters": []
        }
      }
    },
    "SDL_guid.h": {
      "name": "SDL_guid.h",
      "doc": "# CategoryGUID\n\nA GUID is a 128-bit value that represents something that is uniquely\nidentifiable by this value: \"globally unique.\"\n\nSDL provides functions to convert a GUID to/from a string.",
      "entries": {
        "SDL_GUID": {
          "doc": "An SDL_GUID is a 128-bit identifier for an input device that identifies\nthat device across runs of SDL programs on the same platform.\n\nIf the device is detached and then re-attached to a different port, or if\nthe base system is rebooted, the device should still report the same GUID.\n\nGUIDs are as precise as possible but are not guaranteed to distinguish\nphysically distinct but equivalent devices. For example, two game\ncontrollers from the same vendor with the same product ID and revision may\nhave the same GUID.\n\nGUIDs may be platform-dependent (i.e., the same device may report different\nGUIDs on different operating systems).\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_GUID",
          "kind": "struct",
          "entries": {
            "data": {
              "doc": "",
              "name": "data",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_GUIDToString": {
          "doc": "Get an ASCII string representation for a given SDL_GUID.\n\n\\param guid the SDL_GUID you wish to convert to string.\n\\param pszGUID buffer in which to write the ASCII string.\n\\param cbGUID the size of pszGUID, should be at least 33 bytes.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_StringToGUID",
          "name": "SDL_GUIDToString",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "guid",
              "type": "SDL_GUID"
            },
            {
              "name": "pszGUID",
              "type": "char *"
            },
            {
              "name": "cbGUID",
              "type": "int"
            }
          ]
        },
        "SDL_StringToGUID": {
          "doc": "Convert a GUID string into a SDL_GUID structure.\n\nPerforms no error checking. If this function is given a string containing\nan invalid GUID, the function will silently succeed, but the GUID generated\nwill not be useful.\n\n\\param pchGUID string containing an ASCII representation of a GUID.\n\\returns a SDL_GUID structure.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GUIDToString",
          "name": "SDL_StringToGUID",
          "kind": "function",
          "type": "SDL_GUID",
          "parameters": [
            {
              "name": "pchGUID",
              "type": "const char *"
            }
          ]
        }
      }
    },
    "SDL_misc.h": {
      "name": "SDL_misc.h",
      "doc": "# CategoryMisc\n\nSDL API functions that don't fit elsewhere.",
      "entries": {
        "SDL_OpenURL": {
          "doc": "Open a URL/URI in the browser or other appropriate external application.\n\nOpen a URL in a separate, system-provided application. How this works will\nvary wildly depending on the platform. This will likely launch what makes\nsense to handle a specific URL's protocol (a web browser for `http://`,\netc), but it might also be able to launch file managers for directories and\nother things.\n\nWhat happens when you open a URL varies wildly as well: your game window\nmay lose focus (and may or may not lose focus if your game was fullscreen\nor grabbing input at the time). On mobile devices, your app will likely\nmove to the background or your process might be paused. Any given platform\nmay or may not handle a given URL.\n\nIf this is unimplemented (or simply unavailable) for a platform, this will\nfail with an error. A successful result does not mean the URL loaded, just\nthat we launched _something_ to handle it (or at least believe we did).\n\nAll this to say: this function can be useful, but you should definitely\ntest it on every platform you target.\n\n\\param url a valid URL/URI to open. Use `file:///full/path/to/file` for\n           local files, if supported.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_OpenURL",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "url",
              "type": "const char *"
            }
          ]
        }
      }
    },
    "SDL_image.h": {
      "name": "SDL_image.h",
      "doc": "# CategorySDLImage\n\nHeader file for SDL_image library\n\nA simple library to load images of various formats as SDL surfaces",
      "entries": {
        "SDL_IMAGE_MAJOR_VERSION": {
          "doc": "Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO",
          "name": "SDL_IMAGE_MAJOR_VERSION",
          "kind": "def",
          "value": "3"
        },
        "SDL_IMAGE_MINOR_VERSION": {
          "doc": "",
          "name": "SDL_IMAGE_MINOR_VERSION",
          "kind": "def",
          "value": "2"
        },
        "SDL_IMAGE_MICRO_VERSION": {
          "doc": "",
          "name": "SDL_IMAGE_MICRO_VERSION",
          "kind": "def",
          "value": "5"
        },
        "SDL_IMAGE_VERSION": {
          "doc": "This is the version number macro for the current SDL_image version.",
          "name": "SDL_IMAGE_VERSION",
          "kind": "def",
          "value": "    SDL_VERSIONNUM(SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, SDL_IMAGE_MICRO_VERSION)"
        },
        "SDL_IMAGE_VERSION_ATLEAST": {
          "doc": "This macro will evaluate to true if compiled with SDL_image at least X.Y.Z.",
          "name": "SDL_IMAGE_VERSION_ATLEAST",
          "kind": "def",
          "parameters": [
            "X",
            "Y",
            "Z"
          ],
          "value": "    ((SDL_IMAGE_MAJOR_VERSION >= X) && \\\n     (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION >= Y) && \\\n     (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION > Y || SDL_IMAGE_MICRO_VERSION >= Z))"
        },
        "IMG_Version": {
          "doc": "This function gets the version of the dynamically linked SDL_image library.\n\n\\returns SDL_image version.\n\n\\since This function is available since SDL_image 3.0.0.",
          "name": "IMG_Version",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "IMG_LoadTyped_IO": {
          "doc": "Load an image from an SDL data source into a software surface.\n\nAn SDL_Surface is a buffer of pixels in memory accessible by the CPU. Use\nthis if you plan to hand the data to something else or manipulate it\nfurther in code.\n\nThere are no guarantees about what format the new SDL_Surface data will be;\nin many cases, SDL_image will attempt to supply a surface that exactly\nmatches the provided image, but in others it might have to convert (either\nbecause the image is in a format that SDL doesn't directly support or\nbecause it's compressed data that could reasonably uncompress to various\nformats and SDL_image had to pick one). You can inspect an SDL_Surface for\nits specifics, and use SDL_ConvertSurface to then migrate to any supported\nformat.\n\nIf the image format supports a transparent pixel, SDL will set the colorkey\nfor the surface. You can enable RLE acceleration on the surface afterwards\nby calling: SDL_SetSurfaceColorKey(image, SDL_RLEACCEL,\nimage->format->colorkey);\n\nIf `closeio` is true, `src` will be closed before returning, whether this\nfunction succeeds or not. SDL_image reads everything it needs from `src`\nduring this call in any case.\n\nEven though this function accepts a file type, SDL_image may still try\nother decoders that are capable of detecting file type from the contents of\nthe image data, but may rely on the caller-provided type string for formats\nthat it cannot autodetect. If `type` is NULL, SDL_image will rely solely on\nits ability to guess the format.\n\nThere is a separate function to read files from disk without having to deal\nwith SDL_IOStream: `IMG_Load(\"filename.jpg\")` will call this function and\nmanage those details for you, determining the file type from the filename's\nextension.\n\nThere is also IMG_Load_IO(), which is equivalent to this function except\nthat it will rely on SDL_image to determine what type of data it is\nloading, much like passing a NULL for type.\n\nIf you are using SDL's 2D rendering API, there is an equivalent call to\nload images directly into an SDL_Texture for use by the GPU without using a\nsoftware surface: call IMG_LoadTextureTyped_IO() instead.\n\nWhen done with the returned surface, the app should dispose of it with a\ncall to SDL_DestroySurface().\n\n\\param src an SDL_IOStream that data will be read from.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\param type a filename extension that represent this data (\"BMP\", \"GIF\",\n            \"PNG\", etc).\n\\returns a new SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_Load\n\\sa IMG_Load_IO\n\\sa SDL_DestroySurface",
          "name": "IMG_LoadTyped_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "type",
              "type": "const char *"
            }
          ]
        },
        "IMG_Load": {
          "doc": "Load an image from a filesystem path into a software surface.\n\nAn SDL_Surface is a buffer of pixels in memory accessible by the CPU. Use\nthis if you plan to hand the data to something else or manipulate it\nfurther in code.\n\nThere are no guarantees about what format the new SDL_Surface data will be;\nin many cases, SDL_image will attempt to supply a surface that exactly\nmatches the provided image, but in others it might have to convert (either\nbecause the image is in a format that SDL doesn't directly support or\nbecause it's compressed data that could reasonably uncompress to various\nformats and SDL_image had to pick one). You can inspect an SDL_Surface for\nits specifics, and use SDL_ConvertSurface to then migrate to any supported\nformat.\n\nIf the image format supports a transparent pixel, SDL will set the colorkey\nfor the surface. You can enable RLE acceleration on the surface afterwards\nby calling: SDL_SetSurfaceColorKey(image, SDL_RLEACCEL,\nimage->format->colorkey);\n\nThere is a separate function to read files from an SDL_IOStream, if you\nneed an i/o abstraction to provide data from anywhere instead of a simple\nfilesystem read; that function is IMG_Load_IO().\n\nIf you are using SDL's 2D rendering API, there is an equivalent call to\nload images directly into an SDL_Texture for use by the GPU without using a\nsoftware surface: call IMG_LoadTexture() instead.\n\nWhen done with the returned surface, the app should dispose of it with a\ncall to\n[SDL_DestroySurface](https://wiki.libsdl.org/SDL3/SDL_DestroySurface)\n().\n\n\\param file a path on the filesystem to load an image from.\n\\returns a new SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadTyped_IO\n\\sa IMG_Load_IO\n\\sa SDL_DestroySurface",
          "name": "IMG_Load",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "IMG_Load_IO": {
          "doc": "Load an image from an SDL data source into a software surface.\n\nAn SDL_Surface is a buffer of pixels in memory accessible by the CPU. Use\nthis if you plan to hand the data to something else or manipulate it\nfurther in code.\n\nThere are no guarantees about what format the new SDL_Surface data will be;\nin many cases, SDL_image will attempt to supply a surface that exactly\nmatches the provided image, but in others it might have to convert (either\nbecause the image is in a format that SDL doesn't directly support or\nbecause it's compressed data that could reasonably uncompress to various\nformats and SDL_image had to pick one). You can inspect an SDL_Surface for\nits specifics, and use SDL_ConvertSurface to then migrate to any supported\nformat.\n\nIf the image format supports a transparent pixel, SDL will set the colorkey\nfor the surface. You can enable RLE acceleration on the surface afterwards\nby calling: SDL_SetSurfaceColorKey(image, SDL_RLEACCEL,\nimage->format->colorkey);\n\nIf `closeio` is true, `src` will be closed before returning, whether this\nfunction succeeds or not. SDL_image reads everything it needs from `src`\nduring this call in any case.\n\nThere is a separate function to read files from disk without having to deal\nwith SDL_IOStream: `IMG_Load(\"filename.jpg\")` will call this function and\nmanage those details for you, determining the file type from the filename's\nextension.\n\nThere is also IMG_LoadTyped_IO(), which is equivalent to this function\nexcept a file extension (like \"BMP\", \"JPG\", etc) can be specified, in case\nSDL_image cannot autodetect the file format.\n\nIf you are using SDL's 2D rendering API, there is an equivalent call to\nload images directly into an SDL_Texture for use by the GPU without using a\nsoftware surface: call IMG_LoadTexture_IO() instead.\n\nWhen done with the returned surface, the app should dispose of it with a\ncall to SDL_DestroySurface().\n\n\\param src an SDL_IOStream that data will be read from.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\returns a new SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_Load\n\\sa IMG_LoadTyped_IO\n\\sa SDL_DestroySurface",
          "name": "IMG_Load_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "IMG_LoadTexture": {
          "doc": "Load an image from a filesystem path into a GPU texture.\n\nAn SDL_Texture represents an image in GPU memory, usable by SDL's 2D Render\nAPI. This can be significantly more efficient than using a CPU-bound\nSDL_Surface if you don't need to manipulate the image directly after\nloading it.\n\nIf the loaded image has transparency or a colorkey, a texture with an alpha\nchannel will be created. Otherwise, SDL_image will attempt to create an\nSDL_Texture in the most format that most reasonably represents the image\ndata (but in many cases, this will just end up being 32-bit RGB or 32-bit\nRGBA).\n\nThere is a separate function to read files from an SDL_IOStream, if you\nneed an i/o abstraction to provide data from anywhere instead of a simple\nfilesystem read; that function is IMG_LoadTexture_IO().\n\nIf you would rather decode an image to an SDL_Surface (a buffer of pixels\nin CPU memory), call IMG_Load() instead.\n\nWhen done with the returned texture, the app should dispose of it with a\ncall to SDL_DestroyTexture().\n\n\\param renderer the SDL_Renderer to use to create the GPU texture.\n\\param file a path on the filesystem to load an image from.\n\\returns a new texture, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadTextureTyped_IO\n\\sa IMG_LoadTexture_IO",
          "name": "IMG_LoadTexture",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "IMG_LoadTexture_IO": {
          "doc": "Load an image from an SDL data source into a GPU texture.\n\nAn SDL_Texture represents an image in GPU memory, usable by SDL's 2D Render\nAPI. This can be significantly more efficient than using a CPU-bound\nSDL_Surface if you don't need to manipulate the image directly after\nloading it.\n\nIf the loaded image has transparency or a colorkey, a texture with an alpha\nchannel will be created. Otherwise, SDL_image will attempt to create an\nSDL_Texture in the most format that most reasonably represents the image\ndata (but in many cases, this will just end up being 32-bit RGB or 32-bit\nRGBA).\n\nIf `closeio` is true, `src` will be closed before returning, whether this\nfunction succeeds or not. SDL_image reads everything it needs from `src`\nduring this call in any case.\n\nThere is a separate function to read files from disk without having to deal\nwith SDL_IOStream: `IMG_LoadTexture(renderer, \"filename.jpg\")` will call\nthis function and manage those details for you, determining the file type\nfrom the filename's extension.\n\nThere is also IMG_LoadTextureTyped_IO(), which is equivalent to this\nfunction except a file extension (like \"BMP\", \"JPG\", etc) can be specified,\nin case SDL_image cannot autodetect the file format.\n\nIf you would rather decode an image to an SDL_Surface (a buffer of pixels\nin CPU memory), call IMG_Load() instead.\n\nWhen done with the returned texture, the app should dispose of it with a\ncall to SDL_DestroyTexture().\n\n\\param renderer the SDL_Renderer to use to create the GPU texture.\n\\param src an SDL_IOStream that data will be read from.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\returns a new texture, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadTexture\n\\sa IMG_LoadTextureTyped_IO\n\\sa SDL_DestroyTexture",
          "name": "IMG_LoadTexture_IO",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "IMG_LoadTextureTyped_IO": {
          "doc": "Load an image from an SDL data source into a GPU texture.\n\nAn SDL_Texture represents an image in GPU memory, usable by SDL's 2D Render\nAPI. This can be significantly more efficient than using a CPU-bound\nSDL_Surface if you don't need to manipulate the image directly after\nloading it.\n\nIf the loaded image has transparency or a colorkey, a texture with an alpha\nchannel will be created. Otherwise, SDL_image will attempt to create an\nSDL_Texture in the most format that most reasonably represents the image\ndata (but in many cases, this will just end up being 32-bit RGB or 32-bit\nRGBA).\n\nIf `closeio` is true, `src` will be closed before returning, whether this\nfunction succeeds or not. SDL_image reads everything it needs from `src`\nduring this call in any case.\n\nEven though this function accepts a file type, SDL_image may still try\nother decoders that are capable of detecting file type from the contents of\nthe image data, but may rely on the caller-provided type string for formats\nthat it cannot autodetect. If `type` is NULL, SDL_image will rely solely on\nits ability to guess the format.\n\nThere is a separate function to read files from disk without having to deal\nwith SDL_IOStream: `IMG_LoadTexture(\"filename.jpg\")` will call this\nfunction and manage those details for you, determining the file type from\nthe filename's extension.\n\nThere is also IMG_LoadTexture_IO(), which is equivalent to this function\nexcept that it will rely on SDL_image to determine what type of data it is\nloading, much like passing a NULL for type.\n\nIf you would rather decode an image to an SDL_Surface (a buffer of pixels\nin CPU memory), call IMG_LoadTyped_IO() instead.\n\nWhen done with the returned texture, the app should dispose of it with a\ncall to SDL_DestroyTexture().\n\n\\param renderer the SDL_Renderer to use to create the GPU texture.\n\\param src an SDL_IOStream that data will be read from.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\param type a filename extension that represent this data (\"BMP\", \"GIF\",\n            \"PNG\", etc).\n\\returns a new texture, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadTexture\n\\sa IMG_LoadTexture_IO\n\\sa SDL_DestroyTexture",
          "name": "IMG_LoadTextureTyped_IO",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "type",
              "type": "const char *"
            }
          ]
        },
        "IMG_isAVIF": {
          "doc": "Detect AVIF image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is AVIF data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isAVIF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isICO": {
          "doc": "Detect ICO image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is ICO data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isICO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isCUR": {
          "doc": "Detect CUR image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is CUR data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isCUR",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isBMP": {
          "doc": "Detect BMP image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is BMP data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isBMP",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isGIF": {
          "doc": "Detect GIF image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is GIF data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isGIF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isJPG": {
          "doc": "Detect JPG image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is JPG data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isJPG",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isJXL": {
          "doc": "Detect JXL image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is JXL data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isJXL",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isLBM": {
          "doc": "Detect LBM image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is LBM data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isLBM",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isPCX": {
          "doc": "Detect PCX image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is PCX data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isPCX",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isPNG": {
          "doc": "Detect PNG image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is PNG data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isPNG",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isPNM": {
          "doc": "Detect PNM image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is PNM data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isPNM",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isSVG": {
          "doc": "Detect SVG image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is SVG data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isSVG",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isQOI": {
          "doc": "Detect QOI image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is QOI data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isQOI",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isTIF": {
          "doc": "Detect TIFF image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is TIFF data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isTIF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isXCF": {
          "doc": "Detect XCF image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is XCF data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXPM\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isXCF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isXPM": {
          "doc": "Detect XPM image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is XPM data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXV\n\\sa IMG_isWEBP",
          "name": "IMG_isXPM",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isXV": {
          "doc": "Detect XV image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is XV data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isWEBP",
          "name": "IMG_isXV",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_isWEBP": {
          "doc": "Detect WEBP image data on a readable/seekable SDL_IOStream.\n\nThis function attempts to determine if a file is a given filetype, reading\nthe least amount possible from the SDL_IOStream (usually a few bytes).\n\nThere is no distinction made between \"not the filetype in question\" and\nbasic i/o errors.\n\nThis function will always attempt to seek `src` back to where it started\nwhen this function was called, but it will not report any errors in doing\nso, but assuming seeking works, this means you can immediately use this\nwith a different IMG_isTYPE function, or load the image without further\nseeking.\n\nYou do not need to call this function to load data; SDL_image can work to\ndetermine file type in many cases in its standard load functions.\n\n\\param src a seekable/readable SDL_IOStream to provide image data.\n\\returns non-zero if this is WEBP data, zero otherwise.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_isAVIF\n\\sa IMG_isICO\n\\sa IMG_isCUR\n\\sa IMG_isBMP\n\\sa IMG_isGIF\n\\sa IMG_isJPG\n\\sa IMG_isJXL\n\\sa IMG_isLBM\n\\sa IMG_isPCX\n\\sa IMG_isPNG\n\\sa IMG_isPNM\n\\sa IMG_isSVG\n\\sa IMG_isQOI\n\\sa IMG_isTIF\n\\sa IMG_isXCF\n\\sa IMG_isXPM\n\\sa IMG_isXV",
          "name": "IMG_isWEBP",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadAVIF_IO": {
          "doc": "Load a AVIF image directly.\n\nIf you know you definitely have a AVIF image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadAVIF_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadICO_IO": {
          "doc": "Load a ICO image directly.\n\nIf you know you definitely have a ICO image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadICO_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadCUR_IO": {
          "doc": "Load a CUR image directly.\n\nIf you know you definitely have a CUR image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadCUR_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadBMP_IO": {
          "doc": "Load a BMP image directly.\n\nIf you know you definitely have a BMP image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadBMP_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadGIF_IO": {
          "doc": "Load a GIF image directly.\n\nIf you know you definitely have a GIF image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadGIF_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadJPG_IO": {
          "doc": "Load a JPG image directly.\n\nIf you know you definitely have a JPG image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadJPG_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadJXL_IO": {
          "doc": "Load a JXL image directly.\n\nIf you know you definitely have a JXL image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadJXL_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadLBM_IO": {
          "doc": "Load a LBM image directly.\n\nIf you know you definitely have a LBM image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadLBM_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadPCX_IO": {
          "doc": "Load a PCX image directly.\n\nIf you know you definitely have a PCX image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadPCX_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadPNG_IO": {
          "doc": "Load a PNG image directly.\n\nIf you know you definitely have a PNG image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadPNG_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadPNM_IO": {
          "doc": "Load a PNM image directly.\n\nIf you know you definitely have a PNM image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadPNM_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadSVG_IO": {
          "doc": "Load a SVG image directly.\n\nIf you know you definitely have a SVG image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadSVG_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadQOI_IO": {
          "doc": "Load a QOI image directly.\n\nIf you know you definitely have a QOI image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadQOI_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadTGA_IO": {
          "doc": "Load a TGA image directly.\n\nIf you know you definitely have a TGA image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadTGA_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadTIF_IO": {
          "doc": "Load a TIFF image directly.\n\nIf you know you definitely have a TIFF image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadTIF_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadXCF_IO": {
          "doc": "Load a XCF image directly.\n\nIf you know you definitely have a XCF image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadXCF_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadXPM_IO": {
          "doc": "Load a XPM image directly.\n\nIf you know you definitely have a XPM image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXV_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadXPM_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadXV_IO": {
          "doc": "Load a XV image directly.\n\nIf you know you definitely have a XV image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadWEBP_IO",
          "name": "IMG_LoadXV_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadWEBP_IO": {
          "doc": "Load a WEBP image directly.\n\nIf you know you definitely have a WEBP image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream to load image data from.\n\\returns SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAVIF_IO\n\\sa IMG_LoadICO_IO\n\\sa IMG_LoadCUR_IO\n\\sa IMG_LoadBMP_IO\n\\sa IMG_LoadGIF_IO\n\\sa IMG_LoadJPG_IO\n\\sa IMG_LoadJXL_IO\n\\sa IMG_LoadLBM_IO\n\\sa IMG_LoadPCX_IO\n\\sa IMG_LoadPNG_IO\n\\sa IMG_LoadPNM_IO\n\\sa IMG_LoadSVG_IO\n\\sa IMG_LoadQOI_IO\n\\sa IMG_LoadTGA_IO\n\\sa IMG_LoadTIF_IO\n\\sa IMG_LoadXCF_IO\n\\sa IMG_LoadXPM_IO\n\\sa IMG_LoadXV_IO",
          "name": "IMG_LoadWEBP_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadSizedSVG_IO": {
          "doc": "Load an SVG image, scaled to a specific size.\n\nSince SVG files are resolution-independent, you specify the size you would\nlike the output image to be and it will be generated at those dimensions.\n\nEither width or height may be 0 and the image will be auto-sized to\npreserve aspect ratio.\n\nWhen done with the returned surface, the app should dispose of it with a\ncall to SDL_DestroySurface().\n\n\\param src an SDL_IOStream to load SVG data from.\n\\param width desired width of the generated surface, in pixels.\n\\param height desired height of the generated surface, in pixels.\n\\returns a new SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.",
          "name": "IMG_LoadSizedSVG_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            }
          ]
        },
        "IMG_ReadXPMFromArray": {
          "doc": "Load an XPM image from a memory array.\n\nThe returned surface will be an 8bpp indexed surface, if possible,\notherwise it will be 32bpp. If you always want 32-bit data, use\nIMG_ReadXPMFromArrayToRGB888() instead.\n\nWhen done with the returned surface, the app should dispose of it with a\ncall to SDL_DestroySurface().\n\n\\param xpm a null-terminated array of strings that comprise XPM data.\n\\returns a new SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_ReadXPMFromArrayToRGB888",
          "name": "IMG_ReadXPMFromArray",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "xpm",
              "type": "char **"
            }
          ]
        },
        "IMG_ReadXPMFromArrayToRGB888": {
          "doc": "Load an XPM image from a memory array.\n\nThe returned surface will always be a 32-bit RGB surface. If you want 8-bit\nindexed colors (and the XPM data allows it), use IMG_ReadXPMFromArray()\ninstead.\n\nWhen done with the returned surface, the app should dispose of it with a\ncall to SDL_DestroySurface().\n\n\\param xpm a null-terminated array of strings that comprise XPM data.\n\\returns a new SDL surface, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_ReadXPMFromArray",
          "name": "IMG_ReadXPMFromArrayToRGB888",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "xpm",
              "type": "char **"
            }
          ]
        },
        "IMG_SaveAVIF": {
          "doc": "Save an SDL_Surface into a AVIF image file.\n\nIf the file already exists, it will be overwritten.\n\n\\param surface the SDL surface to save.\n\\param file path on the filesystem to write new file to.\n\\param quality the desired quality, ranging between 0 (lowest) and 100\n               (highest).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_SaveAVIF_IO",
          "name": "IMG_SaveAVIF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "quality",
              "type": "int"
            }
          ]
        },
        "IMG_SaveAVIF_IO": {
          "doc": "Save an SDL_Surface into AVIF image data, via an SDL_IOStream.\n\nIf you just want to save to a filename, you can use IMG_SaveAVIF() instead.\n\nIf `closeio` is true, `dst` will be closed before returning, whether this\nfunction succeeds or not.\n\n\\param surface the SDL surface to save.\n\\param dst the SDL_IOStream to save the image data to.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\param quality the desired quality, ranging between 0 (lowest) and 100\n               (highest).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_SaveAVIF",
          "name": "IMG_SaveAVIF_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "quality",
              "type": "int"
            }
          ]
        },
        "IMG_SavePNG": {
          "doc": "Save an SDL_Surface into a PNG image file.\n\nIf the file already exists, it will be overwritten.\n\n\\param surface the SDL surface to save.\n\\param file path on the filesystem to write new file to.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_SavePNG_IO",
          "name": "IMG_SavePNG",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "IMG_SavePNG_IO": {
          "doc": "Save an SDL_Surface into PNG image data, via an SDL_IOStream.\n\nIf you just want to save to a filename, you can use IMG_SavePNG() instead.\n\nIf `closeio` is true, `dst` will be closed before returning, whether this\nfunction succeeds or not.\n\n\\param surface the SDL surface to save.\n\\param dst the SDL_IOStream to save the image data to.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_SavePNG",
          "name": "IMG_SavePNG_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "IMG_SaveJPG": {
          "doc": "Save an SDL_Surface into a JPEG image file.\n\nIf the file already exists, it will be overwritten.\n\n\\param surface the SDL surface to save.\n\\param file path on the filesystem to write new file to.\n\\param quality [0; 33] is Lowest quality, [34; 66] is Middle quality, [67;\n               100] is Highest quality.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_SaveJPG_IO",
          "name": "IMG_SaveJPG",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "quality",
              "type": "int"
            }
          ]
        },
        "IMG_SaveJPG_IO": {
          "doc": "Save an SDL_Surface into JPEG image data, via an SDL_IOStream.\n\nIf you just want to save to a filename, you can use IMG_SaveJPG() instead.\n\nIf `closeio` is true, `dst` will be closed before returning, whether this\nfunction succeeds or not.\n\n\\param surface the SDL surface to save.\n\\param dst the SDL_IOStream to save the image data to.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\param quality [0; 33] is Lowest quality, [34; 66] is Middle quality, [67;\n               100] is Highest quality.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_SaveJPG",
          "name": "IMG_SaveJPG_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "quality",
              "type": "int"
            }
          ]
        },
        "IMG_Animation": {
          "doc": "Animated image support\n\nCurrently only animated GIFs and WEBP images are supported.",
          "name": "IMG_Animation",
          "kind": "struct",
          "entries": {
            "w": {
              "doc": "The width of the frames",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "The height of the frames",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "count": {
              "doc": "The number of frames",
              "name": "count",
              "kind": "var",
              "type": "int"
            },
            "frames": {
              "doc": "An array of frames",
              "name": "frames",
              "kind": "var",
              "type": "SDL_Surface **"
            },
            "delays": {
              "doc": "An array of frame delays, in milliseconds",
              "name": "delays",
              "kind": "var",
              "type": "int *"
            }
          }
        },
        "IMG_LoadAnimation": {
          "doc": "Load an animation from a file.\n\nWhen done with the returned animation, the app should dispose of it with a\ncall to IMG_FreeAnimation().\n\n\\param file path on the filesystem containing an animated image.\n\\returns a new IMG_Animation, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_FreeAnimation",
          "name": "IMG_LoadAnimation",
          "kind": "function",
          "type": "IMG_Animation *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "IMG_LoadAnimation_IO": {
          "doc": "Load an animation from an SDL_IOStream.\n\nIf `closeio` is true, `src` will be closed before returning, whether this\nfunction succeeds or not. SDL_image reads everything it needs from `src`\nduring this call in any case.\n\nWhen done with the returned animation, the app should dispose of it with a\ncall to IMG_FreeAnimation().\n\n\\param src an SDL_IOStream that data will be read from.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\returns a new IMG_Animation, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_FreeAnimation",
          "name": "IMG_LoadAnimation_IO",
          "kind": "function",
          "type": "IMG_Animation *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "IMG_LoadAnimationTyped_IO": {
          "doc": "Load an animation from an SDL datasource\n\nEven though this function accepts a file type, SDL_image may still try\nother decoders that are capable of detecting file type from the contents of\nthe image data, but may rely on the caller-provided type string for formats\nthat it cannot autodetect. If `type` is NULL, SDL_image will rely solely on\nits ability to guess the format.\n\nIf `closeio` is true, `src` will be closed before returning, whether this\nfunction succeeds or not. SDL_image reads everything it needs from `src`\nduring this call in any case.\n\nWhen done with the returned animation, the app should dispose of it with a\ncall to IMG_FreeAnimation().\n\n\\param src an SDL_IOStream that data will be read from.\n\\param closeio true to close/free the SDL_IOStream before returning, false\n               to leave it open.\n\\param type a filename extension that represent this data (\"GIF\", etc).\n\\returns a new IMG_Animation, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAnimation\n\\sa IMG_LoadAnimation_IO\n\\sa IMG_FreeAnimation",
          "name": "IMG_LoadAnimationTyped_IO",
          "kind": "function",
          "type": "IMG_Animation *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "type",
              "type": "const char *"
            }
          ]
        },
        "IMG_FreeAnimation": {
          "doc": "Dispose of an IMG_Animation and free its resources.\n\nThe provided `anim` pointer is not valid once this call returns.\n\n\\param anim IMG_Animation to dispose of.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAnimation\n\\sa IMG_LoadAnimation_IO\n\\sa IMG_LoadAnimationTyped_IO",
          "name": "IMG_FreeAnimation",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "anim",
              "type": "IMG_Animation *"
            }
          ]
        },
        "IMG_LoadGIFAnimation_IO": {
          "doc": "Load a GIF animation directly.\n\nIf you know you definitely have a GIF image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream that data will be read from.\n\\returns a new IMG_Animation, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAnimation\n\\sa IMG_LoadAnimation_IO\n\\sa IMG_LoadAnimationTyped_IO\n\\sa IMG_FreeAnimation",
          "name": "IMG_LoadGIFAnimation_IO",
          "kind": "function",
          "type": "IMG_Animation *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        },
        "IMG_LoadWEBPAnimation_IO": {
          "doc": "Load a WEBP animation directly.\n\nIf you know you definitely have a WEBP image, you can call this function,\nwhich will skip SDL_image's file format detection routines. Generally it's\nbetter to use the abstract interfaces; also, there is only an SDL_IOStream\ninterface available here.\n\n\\param src an SDL_IOStream that data will be read from.\n\\returns a new IMG_Animation, or NULL on error.\n\n\\since This function is available since SDL_image 3.0.0.\n\n\\sa IMG_LoadAnimation\n\\sa IMG_LoadAnimation_IO\n\\sa IMG_LoadAnimationTyped_IO\n\\sa IMG_FreeAnimation",
          "name": "IMG_LoadWEBPAnimation_IO",
          "kind": "function",
          "type": "IMG_Animation *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            }
          ]
        }
      }
    },
    "SDL_ttf.h": {
      "name": "SDL_ttf.h",
      "doc": "# CategorySDLTTF\n\nHeader file for SDL_ttf library\n\nThis library is a wrapper around the excellent FreeType 2.0 library,\navailable at: https://www.freetype.org/",
      "entries": {
        "SDL_TTF_MAJOR_VERSION": {
          "doc": "Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO",
          "name": "SDL_TTF_MAJOR_VERSION",
          "kind": "def",
          "value": "3"
        },
        "SDL_TTF_MINOR_VERSION": {
          "doc": "",
          "name": "SDL_TTF_MINOR_VERSION",
          "kind": "def",
          "value": "2"
        },
        "SDL_TTF_MICRO_VERSION": {
          "doc": "",
          "name": "SDL_TTF_MICRO_VERSION",
          "kind": "def",
          "value": "3"
        },
        "SDL_TTF_VERSION": {
          "doc": "This is the version number macro for the current SDL_ttf version.",
          "name": "SDL_TTF_VERSION",
          "kind": "def",
          "value": "    SDL_VERSIONNUM(SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, SDL_TTF_MICRO_VERSION)"
        },
        "SDL_TTF_VERSION_ATLEAST": {
          "doc": "This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.",
          "name": "SDL_TTF_VERSION_ATLEAST",
          "kind": "def",
          "parameters": [
            "X",
            "Y",
            "Z"
          ],
          "value": "    ((SDL_TTF_MAJOR_VERSION >= X) && \\\n     (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION >= Y) && \\\n     (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION > Y || SDL_TTF_MICRO_VERSION >= Z))"
        },
        "TTF_Version": {
          "doc": "This function gets the version of the dynamically linked SDL_ttf library.\n\n\\returns SDL_ttf version.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_Version",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "TTF_GetFreeTypeVersion": {
          "doc": "Query the version of the FreeType library in use.\n\nTTF_Init() should be called before calling this function.\n\n\\param major to be filled in with the major version number. Can be NULL.\n\\param minor to be filled in with the minor version number. Can be NULL.\n\\param patch to be filled in with the param version number. Can be NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_Init",
          "name": "TTF_GetFreeTypeVersion",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "major",
              "type": "int *"
            },
            {
              "name": "minor",
              "type": "int *"
            },
            {
              "name": "patch",
              "type": "int *"
            }
          ]
        },
        "TTF_GetHarfBuzzVersion": {
          "doc": "Query the version of the HarfBuzz library in use.\n\nIf HarfBuzz is not available, the version reported is 0.0.0.\n\n\\param major to be filled in with the major version number. Can be NULL.\n\\param minor to be filled in with the minor version number. Can be NULL.\n\\param patch to be filled in with the param version number. Can be NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetHarfBuzzVersion",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "major",
              "type": "int *"
            },
            {
              "name": "minor",
              "type": "int *"
            },
            {
              "name": "patch",
              "type": "int *"
            }
          ]
        },
        "TTF_TextData": {
          "doc": "",
          "name": "TTF_TextData",
          "kind": "struct",
          "entries": {
            "font": {
              "doc": "",
              "name": "font",
              "kind": "var",
              "type": "TTF_Font *"
            },
            "color": {
              "doc": "",
              "name": "color",
              "kind": "var",
              "type": "SDL_FColor"
            },
            "needs_layout_update": {
              "doc": "",
              "name": "needs_layout_update",
              "kind": "var",
              "type": "bool"
            },
            "layout": {
              "doc": "The internal structure containing font information.\n\nOpaque data!",
              "name": "layout",
              "kind": "var",
              "type": "TTF_TextLayout *"
            },
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "int"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "int"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "num_ops": {
              "doc": "",
              "name": "num_ops",
              "kind": "var",
              "type": "int"
            },
            "ops": {
              "doc": "",
              "name": "ops",
              "kind": "var",
              "type": "TTF_DrawOperation"
            },
            "num_clusters": {
              "doc": "",
              "name": "num_clusters",
              "kind": "var",
              "type": "int"
            },
            "clusters": {
              "doc": "",
              "name": "clusters",
              "kind": "var",
              "type": "TTF_SubString"
            },
            "props": {
              "doc": "",
              "name": "props",
              "kind": "var",
              "type": "SDL_PropertiesID"
            },
            "needs_engine_update": {
              "doc": "",
              "name": "needs_engine_update",
              "kind": "var",
              "type": "bool"
            },
            "engine": {
              "doc": "",
              "name": "engine",
              "kind": "var",
              "type": "TTF_TextEngine"
            },
            "engine_text": {
              "doc": "",
              "name": "engine_text",
              "kind": "var",
              "type": "void *"
            }
          }
        },
        "TTF_Font": {
          "doc": "The internal structure containing font information.\n\nOpaque data!",
          "name": "TTF_Font",
          "kind": "alias",
          "type": "struct TTF_Font"
        },
        "TTF_Init": {
          "doc": "Initialize SDL_ttf.\n\nYou must successfully call this function before it is safe to call any\nother function in this library.\n\nIt is safe to call this more than once, and each successful TTF_Init() call\nshould be paired with a matching TTF_Quit() call.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_Quit",
          "name": "TTF_Init",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "TTF_TextEngine": {
          "doc": "",
          "name": "TTF_TextEngine",
          "kind": "struct",
          "entries": {
            "version": {
              "doc": "",
              "name": "version",
              "kind": "var",
              "type": "Uint32"
            },
            "userdata": {
              "doc": "",
              "name": "userdata",
              "kind": "var",
              "type": "void"
            },
            "text": {
              "doc": "",
              "name": "text",
              "kind": "var",
              "type": "TTF_Text"
            }
          }
        },
        "TTF_OpenFont": {
          "doc": "Create a font from a file, using a specified point size.\n\nSome .fon fonts will have several sizes embedded in the file, so the point\nsize becomes the index of choosing which size. If the value is too high,\nthe last indexed size will be the default.\n\nWhen done with the returned TTF_Font, use TTF_CloseFont() to dispose of it.\n\n\\param file path to font file.\n\\param ptsize point size to use for the newly-opened font.\n\\returns a valid TTF_Font, or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CloseFont",
          "name": "TTF_OpenFont",
          "kind": "function",
          "type": "TTF_Font *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            },
            {
              "name": "ptsize",
              "type": "float"
            }
          ]
        },
        "TTF_OpenFontIO": {
          "doc": "Create a font from an SDL_IOStream, using a specified point size.\n\nSome .fon fonts will have several sizes embedded in the file, so the point\nsize becomes the index of choosing which size. If the value is too high,\nthe last indexed size will be the default.\n\nIf `closeio` is true, `src` will be automatically closed once the font is\nclosed. Otherwise you should keep `src` open until the font is closed.\n\nWhen done with the returned TTF_Font, use TTF_CloseFont() to dispose of it.\n\n\\param src an SDL_IOStream to provide a font file's data.\n\\param closeio true to close `src` when the font is closed, false to leave\n               it open.\n\\param ptsize point size to use for the newly-opened font.\n\\returns a valid TTF_Font, or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CloseFont",
          "name": "TTF_OpenFontIO",
          "kind": "function",
          "type": "TTF_Font *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            },
            {
              "name": "ptsize",
              "type": "float"
            }
          ]
        },
        "TTF_OpenFontWithProperties": {
          "doc": "Create a font with the specified properties.\n\nThese are the supported properties:\n\n- `TTF_PROP_FONT_CREATE_FILENAME_STRING`: the font file to open, if an\n  SDL_IOStream isn't being used. This is required if\n  `TTF_PROP_FONT_CREATE_IOSTREAM_POINTER` and\n  `TTF_PROP_FONT_CREATE_EXISTING_FONT` aren't set.\n- `TTF_PROP_FONT_CREATE_IOSTREAM_POINTER`: an SDL_IOStream containing the\n  font to be opened. This should not be closed until the font is closed.\n  This is required if `TTF_PROP_FONT_CREATE_FILENAME_STRING` and\n  `TTF_PROP_FONT_CREATE_EXISTING_FONT` aren't set.\n- `TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER`: the offset in the iostream\n  for the beginning of the font, defaults to 0.\n- `TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN`: true if closing the\n  font should also close the associated SDL_IOStream.\n- `TTF_PROP_FONT_CREATE_SIZE_FLOAT`: the point size of the font. Some .fon\n  fonts will have several sizes embedded in the file, so the point size\n  becomes the index of choosing which size. If the value is too high, the\n  last indexed size will be the default.\n- `TTF_PROP_FONT_CREATE_FACE_NUMBER`: the face index of the font, if the\n  font contains multiple font faces.\n- `TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER`: the horizontal DPI to use\n  for font rendering, defaults to\n  `TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER` if set, or 72 otherwise.\n- `TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER`: the vertical DPI to use for\n  font rendering, defaults to `TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER`\n  if set, or 72 otherwise.\n- `TTF_PROP_FONT_CREATE_EXISTING_FONT`: an optional TTF_Font that, if set,\n  will be used as the font data source and the initial size and style of\n  the new font.\n\n\\param props the properties to use.\n\\returns a valid TTF_Font, or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CloseFont",
          "name": "TTF_OpenFontWithProperties",
          "kind": "function",
          "type": "TTF_Font *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "TTF_PROP_FONT_CREATE_FILENAME_STRING": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_FILENAME_STRING",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.filename\""
        },
        "TTF_PROP_FONT_CREATE_IOSTREAM_POINTER": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_IOSTREAM_POINTER",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.iostream\""
        },
        "TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.iostream.offset\""
        },
        "TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.iostream.autoclose\""
        },
        "TTF_PROP_FONT_CREATE_SIZE_FLOAT": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_SIZE_FLOAT",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.size\""
        },
        "TTF_PROP_FONT_CREATE_FACE_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_FACE_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.face\""
        },
        "TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.hdpi\""
        },
        "TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.vdpi\""
        },
        "TTF_PROP_FONT_CREATE_EXISTING_FONT": {
          "doc": "",
          "name": "TTF_PROP_FONT_CREATE_EXISTING_FONT",
          "kind": "def",
          "value": "\"SDL_ttf.font.create.existing_font\""
        },
        "TTF_CopyFont": {
          "doc": "Create a copy of an existing font.\n\nThe copy will be distinct from the original, but will share the font file\nand have the same size and style as the original.\n\nWhen done with the returned TTF_Font, use TTF_CloseFont() to dispose of it.\n\n\\param existing_font the font to copy.\n\\returns a valid TTF_Font, or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              original font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CloseFont",
          "name": "TTF_CopyFont",
          "kind": "function",
          "type": "TTF_Font *",
          "parameters": [
            {
              "name": "existing_font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_GetFontProperties": {
          "doc": "Get the properties associated with a font.\n\nThe following read-write properties are provided by SDL:\n\n- `TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER`: The FT_Stroker_LineCap value\n  used when setting the font outline, defaults to\n  `FT_STROKER_LINECAP_ROUND`.\n- `TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER`: The FT_Stroker_LineJoin value\n  used when setting the font outline, defaults to\n  `FT_STROKER_LINEJOIN_ROUND`.\n- `TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER`: The FT_Fixed miter limit used\n  when setting the font outline, defaults to 0.\n\n\\param font the font to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.outline.line_cap\""
        },
        "TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.outline.line_join\""
        },
        "TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER": {
          "doc": "",
          "name": "TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER",
          "kind": "def",
          "value": "\"SDL_ttf.font.outline.miter_limit\""
        },
        "TTF_GetFontGeneration": {
          "doc": "Get the font generation.\n\nThe generation is incremented each time font properties change that require\nrebuilding glyphs, such as style, size, etc.\n\n\\param font the font to query.\n\\returns the font generation or 0 on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontGeneration",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_AddFallbackFont": {
          "doc": "Add a fallback font.\n\nAdd a font that will be used for glyphs that are not in the current font.\nThe fallback font should have the same size and style as the current font.\n\nIf there are multiple fallback fonts, they are used in the order added.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to modify.\n\\param fallback the font to add as a fallback.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created\n              both fonts.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_ClearFallbackFonts\n\\sa TTF_RemoveFallbackFont",
          "name": "TTF_AddFallbackFont",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "fallback",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_RemoveFallbackFont": {
          "doc": "Remove a fallback font.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to modify.\n\\param fallback the font to remove as a fallback.\n\n\\threadsafety This function should be called on the thread that created\n              both fonts.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_AddFallbackFont\n\\sa TTF_ClearFallbackFonts",
          "name": "TTF_RemoveFallbackFont",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "fallback",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_ClearFallbackFonts": {
          "doc": "Remove all fallback fonts.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to modify.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_AddFallbackFont\n\\sa TTF_RemoveFallbackFont",
          "name": "TTF_ClearFallbackFonts",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_SetFontSize": {
          "doc": "Set a font's size dynamically.\n\nThis updates any TTF_Text objects using this font, and clears\nalready-generated glyphs, if any, from the cache.\n\n\\param font the font to resize.\n\\param ptsize the new point size.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontSize",
          "name": "TTF_SetFontSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ptsize",
              "type": "float"
            }
          ]
        },
        "TTF_SetFontSizeDPI": {
          "doc": "Set font size dynamically with target resolutions, in dots per inch.\n\nThis updates any TTF_Text objects using this font, and clears\nalready-generated glyphs, if any, from the cache.\n\n\\param font the font to resize.\n\\param ptsize the new point size.\n\\param hdpi the target horizontal DPI.\n\\param vdpi the target vertical DPI.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontSize\n\\sa TTF_GetFontSizeDPI",
          "name": "TTF_SetFontSizeDPI",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ptsize",
              "type": "float"
            },
            {
              "name": "hdpi",
              "type": "int"
            },
            {
              "name": "vdpi",
              "type": "int"
            }
          ]
        },
        "TTF_GetFontSize": {
          "doc": "Get the size of a font.\n\n\\param font the font to query.\n\\returns the size of the font, or 0.0f on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontSize\n\\sa TTF_SetFontSizeDPI",
          "name": "TTF_GetFontSize",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_GetFontDPI": {
          "doc": "Get font target resolutions, in dots per inch.\n\n\\param font the font to query.\n\\param hdpi a pointer filled in with the target horizontal DPI.\n\\param vdpi a pointer filled in with the target vertical DPI.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontSizeDPI",
          "name": "TTF_GetFontDPI",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "hdpi",
              "type": "int *"
            },
            {
              "name": "vdpi",
              "type": "int *"
            }
          ]
        },
        "TTF_FontStyleFlags": {
          "doc": "Font style flags for TTF_Font\n\nThese are the flags which can be used to set the style of a font in\nSDL_ttf. A combination of these flags can be used with functions that set\nor query font style, such as TTF_SetFontStyle or TTF_GetFontStyle.\n\n\\since This datatype is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontStyle\n\\sa TTF_GetFontStyle",
          "name": "TTF_FontStyleFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "TTF_STYLE_NORMAL": {
          "doc": "No special style",
          "name": "TTF_STYLE_NORMAL",
          "kind": "def",
          "value": "0x00"
        },
        "TTF_STYLE_BOLD": {
          "doc": "Bold style",
          "name": "TTF_STYLE_BOLD",
          "kind": "def",
          "value": "0x01"
        },
        "TTF_STYLE_ITALIC": {
          "doc": "Italic style",
          "name": "TTF_STYLE_ITALIC",
          "kind": "def",
          "value": "0x02"
        },
        "TTF_STYLE_UNDERLINE": {
          "doc": "Underlined text",
          "name": "TTF_STYLE_UNDERLINE",
          "kind": "def",
          "value": "0x04"
        },
        "TTF_STYLE_STRIKETHROUGH": {
          "doc": "Strikethrough text",
          "name": "TTF_STYLE_STRIKETHROUGH",
          "kind": "def",
          "value": "0x08"
        },
        "TTF_SetFontStyle": {
          "doc": "Set a font's current style.\n\nThis updates any TTF_Text objects using this font, and clears\nalready-generated glyphs, if any, from the cache.\n\nThe font styles are a set of bit flags, OR'd together:\n\n- `TTF_STYLE_NORMAL` (is zero)\n- `TTF_STYLE_BOLD`\n- `TTF_STYLE_ITALIC`\n- `TTF_STYLE_UNDERLINE`\n- `TTF_STYLE_STRIKETHROUGH`\n\n\\param font the font to set a new style on.\n\\param style the new style values to set, OR'd together.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontStyle",
          "name": "TTF_SetFontStyle",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "style",
              "type": "TTF_FontStyleFlags"
            }
          ]
        },
        "TTF_GetFontStyle": {
          "doc": "Query a font's current style.\n\nThe font styles are a set of bit flags, OR'd together:\n\n- `TTF_STYLE_NORMAL` (is zero)\n- `TTF_STYLE_BOLD`\n- `TTF_STYLE_ITALIC`\n- `TTF_STYLE_UNDERLINE`\n- `TTF_STYLE_STRIKETHROUGH`\n\n\\param font the font to query.\n\\returns the current font style, as a set of bit flags.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontStyle",
          "name": "TTF_GetFontStyle",
          "kind": "function",
          "type": "TTF_FontStyleFlags",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_SetFontOutline": {
          "doc": "Set a font's current outline.\n\nThis uses the font properties `TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER`,\n`TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER`, and\n`TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER` when setting the font outline.\n\nThis updates any TTF_Text objects using this font, and clears\nalready-generated glyphs, if any, from the cache.\n\n\\param font the font to set a new outline on.\n\\param outline positive outline value, 0 to default.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontOutline",
          "name": "TTF_SetFontOutline",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "outline",
              "type": "int"
            }
          ]
        },
        "TTF_GetFontOutline": {
          "doc": "Query a font's current outline.\n\n\\param font the font to query.\n\\returns the font's current outline value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontOutline",
          "name": "TTF_GetFontOutline",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_HintingFlags": {
          "doc": "Hinting flags for TTF (TrueType Fonts)\n\nThis enum specifies the level of hinting to be applied to the font\nrendering. The hinting level determines how much the font's outlines are\nadjusted for better alignment on the pixel grid.\n\n\\since This enum is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontHinting\n\\sa TTF_GetFontHinting",
          "name": "TTF_HintingFlags",
          "kind": "enum",
          "entries": {
            "TTF_HINTING_INVALID": {
              "doc": "",
              "name": "TTF_HINTING_INVALID",
              "kind": "var",
              "type": ""
            },
            "TTF_HINTING_NORMAL": {
              "doc": "Normal hinting applies standard grid-fitting.",
              "name": "TTF_HINTING_NORMAL",
              "kind": "var",
              "type": ""
            },
            "TTF_HINTING_LIGHT": {
              "doc": "Light hinting applies subtle adjustments to improve rendering.",
              "name": "TTF_HINTING_LIGHT",
              "kind": "var",
              "type": ""
            },
            "TTF_HINTING_MONO": {
              "doc": "Monochrome hinting adjusts the font for better rendering at lower resolutions.",
              "name": "TTF_HINTING_MONO",
              "kind": "var",
              "type": ""
            },
            "TTF_HINTING_NONE": {
              "doc": "No hinting, the font is rendered without any grid-fitting.",
              "name": "TTF_HINTING_NONE",
              "kind": "var",
              "type": ""
            },
            "TTF_HINTING_LIGHT_SUBPIXEL": {
              "doc": "Light hinting with subpixel rendering for more precise font edges.",
              "name": "TTF_HINTING_LIGHT_SUBPIXEL",
              "kind": "var",
              "type": ""
            }
          }
        },
        "TTF_SetFontHinting": {
          "doc": "Set a font's current hinter setting.\n\nThis updates any TTF_Text objects using this font, and clears\nalready-generated glyphs, if any, from the cache.\n\nThe hinter setting is a single value:\n\n- `TTF_HINTING_NORMAL`\n- `TTF_HINTING_LIGHT`\n- `TTF_HINTING_MONO`\n- `TTF_HINTING_NONE`\n- `TTF_HINTING_LIGHT_SUBPIXEL` (available in SDL_ttf 3.0.0 and later)\n\n\\param font the font to set a new hinter setting on.\n\\param hinting the new hinter setting.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontHinting",
          "name": "TTF_SetFontHinting",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "hinting",
              "type": "TTF_HintingFlags"
            }
          ]
        },
        "TTF_GetNumFontFaces": {
          "doc": "Query the number of faces of a font.\n\n\\param font the font to query.\n\\returns the number of FreeType font faces.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetNumFontFaces",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontHinting": {
          "doc": "Query a font's current FreeType hinter setting.\n\nThe hinter setting is a single value:\n\n- `TTF_HINTING_NORMAL`\n- `TTF_HINTING_LIGHT`\n- `TTF_HINTING_MONO`\n- `TTF_HINTING_NONE`\n- `TTF_HINTING_LIGHT_SUBPIXEL` (available in SDL_ttf 3.0.0 and later)\n\n\\param font the font to query.\n\\returns the font's current hinter value, or TTF_HINTING_INVALID if the\n         font is invalid.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontHinting",
          "name": "TTF_GetFontHinting",
          "kind": "function",
          "type": "TTF_HintingFlags",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_SetFontSDF": {
          "doc": "Enable Signed Distance Field rendering for a font.\n\nSDF is a technique that helps fonts look sharp even when scaling and\nrotating, and requires special shader support for display.\n\nThis works with Blended APIs, and generates the raw signed distance values\nin the alpha channel of the resulting texture.\n\nThis updates any TTF_Text objects using this font, and clears\nalready-generated glyphs, if any, from the cache.\n\n\\param font the font to set SDF support on.\n\\param enabled true to enable SDF, false to disable.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontSDF",
          "name": "TTF_SetFontSDF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "TTF_GetFontSDF": {
          "doc": "Query whether Signed Distance Field rendering is enabled for a font.\n\n\\param font the font to query.\n\\returns true if enabled, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontSDF",
          "name": "TTF_GetFontSDF",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontWeight": {
          "doc": "Query a font's weight, in terms of the lightness/heaviness of the strokes.\n\n\\param font the font to query.\n\\returns the font's current weight.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.2.2.",
          "name": "TTF_GetFontWeight",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_FONT_WEIGHT_THIN": {
          "doc": "Thin (100) named font weight value",
          "name": "TTF_FONT_WEIGHT_THIN",
          "kind": "def",
          "value": "100"
        },
        "TTF_FONT_WEIGHT_EXTRA_LIGHT": {
          "doc": "ExtraLight (200) named font weight value",
          "name": "TTF_FONT_WEIGHT_EXTRA_LIGHT",
          "kind": "def",
          "value": "200"
        },
        "TTF_FONT_WEIGHT_LIGHT": {
          "doc": "Light (300) named font weight value",
          "name": "TTF_FONT_WEIGHT_LIGHT",
          "kind": "def",
          "value": "300"
        },
        "TTF_FONT_WEIGHT_NORMAL": {
          "doc": "Normal (400) named font weight value",
          "name": "TTF_FONT_WEIGHT_NORMAL",
          "kind": "def",
          "value": "400"
        },
        "TTF_FONT_WEIGHT_MEDIUM": {
          "doc": "Medium (500) named font weight value",
          "name": "TTF_FONT_WEIGHT_MEDIUM",
          "kind": "def",
          "value": "500"
        },
        "TTF_FONT_WEIGHT_SEMI_BOLD": {
          "doc": "SemiBold (600) named font weight value",
          "name": "TTF_FONT_WEIGHT_SEMI_BOLD",
          "kind": "def",
          "value": "600"
        },
        "TTF_FONT_WEIGHT_BOLD": {
          "doc": "Bold (700) named font weight value",
          "name": "TTF_FONT_WEIGHT_BOLD",
          "kind": "def",
          "value": "700"
        },
        "TTF_FONT_WEIGHT_EXTRA_BOLD": {
          "doc": "ExtraBold (800) named font weight value",
          "name": "TTF_FONT_WEIGHT_EXTRA_BOLD",
          "kind": "def",
          "value": "800"
        },
        "TTF_FONT_WEIGHT_BLACK": {
          "doc": "Black (900) named font weight value",
          "name": "TTF_FONT_WEIGHT_BLACK",
          "kind": "def",
          "value": "900"
        },
        "TTF_FONT_WEIGHT_EXTRA_BLACK": {
          "doc": "ExtraBlack (950) named font weight value",
          "name": "TTF_FONT_WEIGHT_EXTRA_BLACK",
          "kind": "def",
          "value": "950"
        },
        "TTF_HorizontalAlignment": {
          "doc": "The horizontal alignment used when rendering wrapped text.\n\n\\since This enum is available since SDL_ttf 3.0.0.",
          "name": "TTF_HorizontalAlignment",
          "kind": "enum",
          "entries": {
            "TTF_HORIZONTAL_ALIGN_INVALID": {
              "doc": "",
              "name": "TTF_HORIZONTAL_ALIGN_INVALID",
              "kind": "var",
              "type": ""
            },
            "TTF_HORIZONTAL_ALIGN_LEFT": {
              "doc": "",
              "name": "TTF_HORIZONTAL_ALIGN_LEFT",
              "kind": "var",
              "type": ""
            },
            "TTF_HORIZONTAL_ALIGN_CENTER": {
              "doc": "",
              "name": "TTF_HORIZONTAL_ALIGN_CENTER",
              "kind": "var",
              "type": ""
            },
            "TTF_HORIZONTAL_ALIGN_RIGHT": {
              "doc": "",
              "name": "TTF_HORIZONTAL_ALIGN_RIGHT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "TTF_SetFontWrapAlignment": {
          "doc": "Set a font's current wrap alignment option.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to set a new wrap alignment option on.\n\\param align the new wrap alignment option.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontWrapAlignment",
          "name": "TTF_SetFontWrapAlignment",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "align",
              "type": "TTF_HorizontalAlignment"
            }
          ]
        },
        "TTF_GetFontWrapAlignment": {
          "doc": "Query a font's current wrap alignment option.\n\n\\param font the font to query.\n\\returns the font's current wrap alignment option.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontWrapAlignment",
          "name": "TTF_GetFontWrapAlignment",
          "kind": "function",
          "type": "TTF_HorizontalAlignment",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontHeight": {
          "doc": "Query the total height of a font.\n\nThis is usually equal to point size.\n\n\\param font the font to query.\n\\returns the font's height.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontHeight",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontAscent": {
          "doc": "Query the offset from the baseline to the top of a font.\n\nThis is a positive value, relative to the baseline.\n\n\\param font the font to query.\n\\returns the font's ascent.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontAscent",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontDescent": {
          "doc": "Query the offset from the baseline to the bottom of a font.\n\nThis is a negative value, relative to the baseline.\n\n\\param font the font to query.\n\\returns the font's descent.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontDescent",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_SetFontLineSkip": {
          "doc": "Set the spacing between lines of text for a font.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to modify.\n\\param lineskip the new line spacing for the font.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontLineSkip",
          "name": "TTF_SetFontLineSkip",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "lineskip",
              "type": "int"
            }
          ]
        },
        "TTF_GetFontLineSkip": {
          "doc": "Query the spacing between lines of text for a font.\n\n\\param font the font to query.\n\\returns the font's recommended spacing.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontLineSkip",
          "name": "TTF_GetFontLineSkip",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_SetFontKerning": {
          "doc": "Set if kerning is enabled for a font.\n\nNewly-opened fonts default to allowing kerning. This is generally a good\npolicy unless you have a strong reason to disable it, as it tends to\nproduce better rendering (with kerning disabled, some fonts might render\nthe word `kerning` as something that looks like `keming` for example).\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to set kerning on.\n\\param enabled true to enable kerning, false to disable.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetFontKerning",
          "name": "TTF_SetFontKerning",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "TTF_GetFontKerning": {
          "doc": "Query whether or not kerning is enabled for a font.\n\n\\param font the font to query.\n\\returns true if kerning is enabled, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontKerning",
          "name": "TTF_GetFontKerning",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_FontIsFixedWidth": {
          "doc": "Query whether a font is fixed-width.\n\nA \"fixed-width\" font means all glyphs are the same width across; a\nlowercase 'i' will be the same size across as a capital 'W', for example.\nThis is common for terminals and text editors, and other apps that treat\ntext as a grid. Most other things (WYSIWYG word processors, web pages, etc)\nare more likely to not be fixed-width in most cases.\n\n\\param font the font to query.\n\\returns true if the font is fixed-width, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_FontIsFixedWidth",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_FontIsScalable": {
          "doc": "Query whether a font is scalable or not.\n\nScalability lets us distinguish between outline and bitmap fonts.\n\n\\param font the font to query.\n\\returns true if the font is scalable, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontSDF",
          "name": "TTF_FontIsScalable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontFamilyName": {
          "doc": "Query a font's family name.\n\nThis string is dictated by the contents of the font file.\n\nNote that the returned string is to internal storage, and should not be\nmodified or free'd by the caller. The string becomes invalid, with the rest\nof the font, when `font` is handed to TTF_CloseFont().\n\n\\param font the font to query.\n\\returns the font's family name.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontFamilyName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_GetFontStyleName": {
          "doc": "Query a font's style name.\n\nThis string is dictated by the contents of the font file.\n\nNote that the returned string is to internal storage, and should not be\nmodified or free'd by the caller. The string becomes invalid, with the rest\nof the font, when `font` is handed to TTF_CloseFont().\n\n\\param font the font to query.\n\\returns the font's style name.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontStyleName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "font",
              "type": "const TTF_Font *"
            }
          ]
        },
        "TTF_Direction": {
          "doc": "Direction flags\n\nThe values here are chosen to match\n[hb_direction_t](https://harfbuzz.github.io/harfbuzz-hb-common.html#hb-direction-t)\n.\n\n\\since This enum is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetFontDirection",
          "name": "TTF_Direction",
          "kind": "enum",
          "entries": {
            "TTF_DIRECTION_INVALID": {
              "doc": "",
              "name": "TTF_DIRECTION_INVALID",
              "kind": "var",
              "type": ""
            },
            "TTF_DIRECTION_LTR": {
              "doc": "Left to Right.",
              "name": "TTF_DIRECTION_LTR",
              "kind": "var",
              "type": ""
            },
            "TTF_DIRECTION_RTL": {
              "doc": "Right to Left.",
              "name": "TTF_DIRECTION_RTL",
              "kind": "var",
              "type": ""
            },
            "TTF_DIRECTION_TTB": {
              "doc": "Top to Bottom.",
              "name": "TTF_DIRECTION_TTB",
              "kind": "var",
              "type": ""
            },
            "TTF_DIRECTION_BTT": {
              "doc": "Bottom to Top.",
              "name": "TTF_DIRECTION_BTT",
              "kind": "var",
              "type": ""
            }
          }
        },
        "TTF_SetFontDirection": {
          "doc": "Set the direction to be used for text shaping by a font.\n\nThis function only supports left-to-right text shaping if SDL_ttf was not\nbuilt with HarfBuzz support.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to modify.\n\\param direction the new direction for text to flow.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_SetFontDirection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "direction",
              "type": "TTF_Direction"
            }
          ]
        },
        "TTF_GetFontDirection": {
          "doc": "Get the direction to be used for text shaping by a font.\n\nThis defaults to TTF_DIRECTION_INVALID if it hasn't been set.\n\n\\param font the font to query.\n\\returns the direction to be used for text shaping.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetFontDirection",
          "kind": "function",
          "type": "TTF_Direction",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_StringToTag": {
          "doc": "Convert from a 4 character string to a 32-bit tag.\n\n\\param string the 4 character string to convert.\n\\returns the 32-bit representation of the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_TagToString",
          "name": "TTF_StringToTag",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "string",
              "type": "const char *"
            }
          ]
        },
        "TTF_TagToString": {
          "doc": "Convert from a 32-bit tag to a 4 character string.\n\n\\param tag the 32-bit tag to convert.\n\\param string a pointer filled in with the 4 character representation of\n              the tag.\n\\param size the size of the buffer pointed at by string, should be at least\n            4.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_TagToString",
          "name": "TTF_TagToString",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "tag",
              "type": "Uint32"
            },
            {
              "name": "string",
              "type": "char *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "TTF_SetFontScript": {
          "doc": "Set the script to be used for text shaping by a font.\n\nThis returns false if SDL_ttf isn't built with HarfBuzz support.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to modify.\n\\param script an\n              [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)\n              .\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_StringToTag",
          "name": "TTF_SetFontScript",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "script",
              "type": "Uint32"
            }
          ]
        },
        "TTF_GetFontScript": {
          "doc": "Get the script used for text shaping a font.\n\n\\param font the font to query.\n\\returns an\n         [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)\n         or 0 if a script hasn't been set.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_TagToString",
          "name": "TTF_GetFontScript",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_GetGlyphScript": {
          "doc": "Get the script used by a 32-bit codepoint.\n\n\\param ch the character code to check.\n\\returns an\n         [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)\n         on success, or 0 on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function is thread-safe.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_TagToString",
          "name": "TTF_GetGlyphScript",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "ch",
              "type": "Uint32"
            }
          ]
        },
        "TTF_SetFontLanguage": {
          "doc": "Set language to be used for text shaping by a font.\n\nIf SDL_ttf was not built with HarfBuzz support, this function returns\nfalse.\n\nThis updates any TTF_Text objects using this font.\n\n\\param font the font to specify a language for.\n\\param language_bcp47 a null-terminated string containing the desired\n                      language's BCP47 code. Or null to reset the value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_SetFontLanguage",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "language_bcp47",
              "type": "const char *"
            }
          ]
        },
        "TTF_FontHasGlyph": {
          "doc": "Check whether a glyph is provided by the font for a UNICODE codepoint.\n\n\\param font the font to query.\n\\param ch the codepoint to check.\n\\returns true if font provides a glyph for this character, false if not.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_FontHasGlyph",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            }
          ]
        },
        "TTF_ImageType": {
          "doc": "The type of data in a glyph image\n\n\\since This enum is available since SDL_ttf 3.0.0.",
          "name": "TTF_ImageType",
          "kind": "enum",
          "entries": {
            "TTF_IMAGE_INVALID": {
              "doc": "",
              "name": "TTF_IMAGE_INVALID",
              "kind": "var",
              "type": ""
            },
            "TTF_IMAGE_ALPHA": {
              "doc": "The color channels are white.",
              "name": "TTF_IMAGE_ALPHA",
              "kind": "var",
              "type": ""
            },
            "TTF_IMAGE_COLOR": {
              "doc": "The color channels have image data.",
              "name": "TTF_IMAGE_COLOR",
              "kind": "var",
              "type": ""
            },
            "TTF_IMAGE_SDF": {
              "doc": "The alpha channel has signed distance field information.",
              "name": "TTF_IMAGE_SDF",
              "kind": "var",
              "type": ""
            }
          }
        },
        "TTF_GetGlyphImage": {
          "doc": "Get the pixel image for a UNICODE codepoint.\n\n\\param font the font to query.\n\\param ch the codepoint to check.\n\\param image_type a pointer filled in with the glyph image type, may be\n                  NULL.\n\\returns an SDL_Surface containing the glyph, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetGlyphImage",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "image_type",
              "type": "TTF_ImageType *"
            }
          ]
        },
        "TTF_GetGlyphImageForIndex": {
          "doc": "Get the pixel image for a character index.\n\nThis is useful for text engine implementations, which can call this with\nthe `glyph_index` in a TTF_CopyOperation\n\n\\param font the font to query.\n\\param glyph_index the index of the glyph to return.\n\\param image_type a pointer filled in with the glyph image type, may be\n                  NULL.\n\\returns an SDL_Surface containing the glyph, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetGlyphImageForIndex",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "glyph_index",
              "type": "Uint32"
            },
            {
              "name": "image_type",
              "type": "TTF_ImageType *"
            }
          ]
        },
        "TTF_GetGlyphMetrics": {
          "doc": "Query the metrics (dimensions) of a font's glyph for a UNICODE codepoint.\n\nTo understand what these metrics mean, here is a useful link:\n\nhttps://freetype.sourceforge.net/freetype2/docs/tutorial/step2.html\n\n\\param font the font to query.\n\\param ch the codepoint to check.\n\\param minx a pointer filled in with the minimum x coordinate of the glyph\n            from the left edge of its bounding box. This value may be\n            negative.\n\\param maxx a pointer filled in with the maximum x coordinate of the glyph\n            from the left edge of its bounding box.\n\\param miny a pointer filled in with the minimum y coordinate of the glyph\n            from the bottom edge of its bounding box. This value may be\n            negative.\n\\param maxy a pointer filled in with the maximum y coordinate of the glyph\n            from the bottom edge of its bounding box.\n\\param advance a pointer filled in with the distance to the next glyph from\n               the left edge of this glyph's bounding box.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetGlyphMetrics",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "minx",
              "type": "int *"
            },
            {
              "name": "maxx",
              "type": "int *"
            },
            {
              "name": "miny",
              "type": "int *"
            },
            {
              "name": "maxy",
              "type": "int *"
            },
            {
              "name": "advance",
              "type": "int *"
            }
          ]
        },
        "TTF_GetGlyphKerning": {
          "doc": "Query the kerning size between the glyphs of two UNICODE codepoints.\n\n\\param font the font to query.\n\\param previous_ch the previous codepoint.\n\\param ch the current codepoint.\n\\param kerning a pointer filled in with the kerning size between the two\n               glyphs, in pixels, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetGlyphKerning",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "previous_ch",
              "type": "Uint32"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "kerning",
              "type": "int *"
            }
          ]
        },
        "TTF_GetStringSize": {
          "doc": "Calculate the dimensions of a rendered string of UTF-8 text.\n\nThis will report the width and height, in pixels, of the space that the\nspecified string will take to fully render.\n\n\\param font the font to query.\n\\param text text to calculate, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param w will be filled with width, in pixels, on return.\n\\param h will be filled with height, in pixels, on return.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetStringSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "TTF_GetStringSizeWrapped": {
          "doc": "Calculate the dimensions of a rendered string of UTF-8 text.\n\nThis will report the width and height, in pixels, of the space that the\nspecified string will take to fully render.\n\nText is wrapped to multiple lines on line endings and on word boundaries if\nit extends beyond `wrap_width` in pixels.\n\nIf wrap_width is 0, this function will only wrap on newline characters.\n\n\\param font the font to query.\n\\param text text to calculate, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param wrap_width the maximum width or 0 to wrap on newline characters.\n\\param w will be filled with width, in pixels, on return.\n\\param h will be filled with height, in pixels, on return.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetStringSizeWrapped",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "wrap_width",
              "type": "int"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "TTF_MeasureString": {
          "doc": "Calculate how much of a UTF-8 string will fit in a given width.\n\nThis reports the number of characters that can be rendered before reaching\n`max_width`.\n\nThis does not need to render the string to do this calculation.\n\n\\param font the font to query.\n\\param text text to calculate, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param max_width maximum width, in pixels, available for the string, or 0\n                 for unbounded width.\n\\param measured_width a pointer filled in with the width, in pixels, of the\n                      string that will fit, may be NULL.\n\\param measured_length a pointer filled in with the length, in bytes, of\n                       the string that will fit, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_MeasureString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "max_width",
              "type": "int"
            },
            {
              "name": "measured_width",
              "type": "int *"
            },
            {
              "name": "measured_length",
              "type": "size_t *"
            }
          ]
        },
        "TTF_RenderText_Solid": {
          "doc": "Render UTF-8 text at fast quality to a new 8-bit surface.\n\nThis function will allocate a new 8-bit, palettized surface. The surface's\n0 pixel will be the colorkey, giving a transparent background. The 1 pixel\nwill be set to the text color.\n\nThis will not word-wrap the string; you'll get a surface with a single line\nof text, as long as the string requires. You can use\nTTF_RenderText_Solid_Wrapped() instead if you need to wrap the output to\nmultiple lines.\n\nThis will not wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Shaded,\nTTF_RenderText_Blended, and TTF_RenderText_LCD.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\returns a new 8-bit, palettized surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended\n\\sa TTF_RenderText_LCD\n\\sa TTF_RenderText_Shaded\n\\sa TTF_RenderText_Solid\n\\sa TTF_RenderText_Solid_Wrapped",
          "name": "TTF_RenderText_Solid",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_Solid_Wrapped": {
          "doc": "Render word-wrapped UTF-8 text at fast quality to a new 8-bit surface.\n\nThis function will allocate a new 8-bit, palettized surface. The surface's\n0 pixel will be the colorkey, giving a transparent background. The 1 pixel\nwill be set to the text color.\n\nText is wrapped to multiple lines on line endings and on word boundaries if\nit extends beyond `wrapLength` in pixels.\n\nIf wrapLength is 0, this function will only wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Shaded_Wrapped,\nTTF_RenderText_Blended_Wrapped, and TTF_RenderText_LCD_Wrapped.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\param wrapLength the maximum width of the text surface or 0 to wrap on\n                  newline characters.\n\\returns a new 8-bit, palettized surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended_Wrapped\n\\sa TTF_RenderText_LCD_Wrapped\n\\sa TTF_RenderText_Shaded_Wrapped\n\\sa TTF_RenderText_Solid",
          "name": "TTF_RenderText_Solid_Wrapped",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "wrapLength",
              "type": "int"
            }
          ]
        },
        "TTF_RenderGlyph_Solid": {
          "doc": "Render a single 32-bit glyph at fast quality to a new 8-bit surface.\n\nThis function will allocate a new 8-bit, palettized surface. The surface's\n0 pixel will be the colorkey, giving a transparent background. The 1 pixel\nwill be set to the text color.\n\nThe glyph is rendered without any padding or centering in the X direction,\nand aligned normally in the Y direction.\n\nYou can render at other quality levels with TTF_RenderGlyph_Shaded,\nTTF_RenderGlyph_Blended, and TTF_RenderGlyph_LCD.\n\n\\param font the font to render with.\n\\param ch the character to render.\n\\param fg the foreground color for the text.\n\\returns a new 8-bit, palettized surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderGlyph_Blended\n\\sa TTF_RenderGlyph_LCD\n\\sa TTF_RenderGlyph_Shaded",
          "name": "TTF_RenderGlyph_Solid",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_Shaded": {
          "doc": "Render UTF-8 text at high quality to a new 8-bit surface.\n\nThis function will allocate a new 8-bit, palettized surface. The surface's\n0 pixel will be the specified background color, while other pixels have\nvarying degrees of the foreground color. This function returns the new\nsurface, or NULL if there was an error.\n\nThis will not word-wrap the string; you'll get a surface with a single line\nof text, as long as the string requires. You can use\nTTF_RenderText_Shaded_Wrapped() instead if you need to wrap the output to\nmultiple lines.\n\nThis will not wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Solid,\nTTF_RenderText_Blended, and TTF_RenderText_LCD.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\param bg the background color for the text.\n\\returns a new 8-bit, palettized surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended\n\\sa TTF_RenderText_LCD\n\\sa TTF_RenderText_Shaded_Wrapped\n\\sa TTF_RenderText_Solid",
          "name": "TTF_RenderText_Shaded",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "bg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_Shaded_Wrapped": {
          "doc": "Render word-wrapped UTF-8 text at high quality to a new 8-bit surface.\n\nThis function will allocate a new 8-bit, palettized surface. The surface's\n0 pixel will be the specified background color, while other pixels have\nvarying degrees of the foreground color. This function returns the new\nsurface, or NULL if there was an error.\n\nText is wrapped to multiple lines on line endings and on word boundaries if\nit extends beyond `wrap_width` in pixels.\n\nIf wrap_width is 0, this function will only wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Solid_Wrapped,\nTTF_RenderText_Blended_Wrapped, and TTF_RenderText_LCD_Wrapped.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\param bg the background color for the text.\n\\param wrap_width the maximum width of the text surface or 0 to wrap on\n                  newline characters.\n\\returns a new 8-bit, palettized surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended_Wrapped\n\\sa TTF_RenderText_LCD_Wrapped\n\\sa TTF_RenderText_Shaded\n\\sa TTF_RenderText_Solid_Wrapped",
          "name": "TTF_RenderText_Shaded_Wrapped",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "bg",
              "type": "SDL_Color"
            },
            {
              "name": "wrap_width",
              "type": "int"
            }
          ]
        },
        "TTF_RenderGlyph_Shaded": {
          "doc": "Render a single UNICODE codepoint at high quality to a new 8-bit surface.\n\nThis function will allocate a new 8-bit, palettized surface. The surface's\n0 pixel will be the specified background color, while other pixels have\nvarying degrees of the foreground color. This function returns the new\nsurface, or NULL if there was an error.\n\nThe glyph is rendered without any padding or centering in the X direction,\nand aligned normally in the Y direction.\n\nYou can render at other quality levels with TTF_RenderGlyph_Solid,\nTTF_RenderGlyph_Blended, and TTF_RenderGlyph_LCD.\n\n\\param font the font to render with.\n\\param ch the codepoint to render.\n\\param fg the foreground color for the text.\n\\param bg the background color for the text.\n\\returns a new 8-bit, palettized surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderGlyph_Blended\n\\sa TTF_RenderGlyph_LCD\n\\sa TTF_RenderGlyph_Solid",
          "name": "TTF_RenderGlyph_Shaded",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "bg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_Blended": {
          "doc": "Render UTF-8 text at high quality to a new ARGB surface.\n\nThis function will allocate a new 32-bit, ARGB surface, using alpha\nblending to dither the font with the given color. This function returns the\nnew surface, or NULL if there was an error.\n\nThis will not word-wrap the string; you'll get a surface with a single line\nof text, as long as the string requires. You can use\nTTF_RenderText_Blended_Wrapped() instead if you need to wrap the output to\nmultiple lines.\n\nThis will not wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Solid,\nTTF_RenderText_Shaded, and TTF_RenderText_LCD.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\returns a new 32-bit, ARGB surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended_Wrapped\n\\sa TTF_RenderText_LCD\n\\sa TTF_RenderText_Shaded\n\\sa TTF_RenderText_Solid",
          "name": "TTF_RenderText_Blended",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_Blended_Wrapped": {
          "doc": "Render word-wrapped UTF-8 text at high quality to a new ARGB surface.\n\nThis function will allocate a new 32-bit, ARGB surface, using alpha\nblending to dither the font with the given color. This function returns the\nnew surface, or NULL if there was an error.\n\nText is wrapped to multiple lines on line endings and on word boundaries if\nit extends beyond `wrap_width` in pixels.\n\nIf wrap_width is 0, this function will only wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Solid_Wrapped,\nTTF_RenderText_Shaded_Wrapped, and TTF_RenderText_LCD_Wrapped.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\param wrap_width the maximum width of the text surface or 0 to wrap on\n                  newline characters.\n\\returns a new 32-bit, ARGB surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended\n\\sa TTF_RenderText_LCD_Wrapped\n\\sa TTF_RenderText_Shaded_Wrapped\n\\sa TTF_RenderText_Solid_Wrapped",
          "name": "TTF_RenderText_Blended_Wrapped",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "wrap_width",
              "type": "int"
            }
          ]
        },
        "TTF_RenderGlyph_Blended": {
          "doc": "Render a single UNICODE codepoint at high quality to a new ARGB surface.\n\nThis function will allocate a new 32-bit, ARGB surface, using alpha\nblending to dither the font with the given color. This function returns the\nnew surface, or NULL if there was an error.\n\nThe glyph is rendered without any padding or centering in the X direction,\nand aligned normally in the Y direction.\n\nYou can render at other quality levels with TTF_RenderGlyph_Solid,\nTTF_RenderGlyph_Shaded, and TTF_RenderGlyph_LCD.\n\n\\param font the font to render with.\n\\param ch the codepoint to render.\n\\param fg the foreground color for the text.\n\\returns a new 32-bit, ARGB surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderGlyph_LCD\n\\sa TTF_RenderGlyph_Shaded\n\\sa TTF_RenderGlyph_Solid",
          "name": "TTF_RenderGlyph_Blended",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_LCD": {
          "doc": "Render UTF-8 text at LCD subpixel quality to a new ARGB surface.\n\nThis function will allocate a new 32-bit, ARGB surface, and render\nalpha-blended text using FreeType's LCD subpixel rendering. This function\nreturns the new surface, or NULL if there was an error.\n\nThis will not word-wrap the string; you'll get a surface with a single line\nof text, as long as the string requires. You can use\nTTF_RenderText_LCD_Wrapped() instead if you need to wrap the output to\nmultiple lines.\n\nThis will not wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Solid,\nTTF_RenderText_Shaded, and TTF_RenderText_Blended.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\param bg the background color for the text.\n\\returns a new 32-bit, ARGB surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended\n\\sa TTF_RenderText_LCD_Wrapped\n\\sa TTF_RenderText_Shaded\n\\sa TTF_RenderText_Solid",
          "name": "TTF_RenderText_LCD",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "bg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_RenderText_LCD_Wrapped": {
          "doc": "Render word-wrapped UTF-8 text at LCD subpixel quality to a new ARGB\nsurface.\n\nThis function will allocate a new 32-bit, ARGB surface, and render\nalpha-blended text using FreeType's LCD subpixel rendering. This function\nreturns the new surface, or NULL if there was an error.\n\nText is wrapped to multiple lines on line endings and on word boundaries if\nit extends beyond `wrap_width` in pixels.\n\nIf wrap_width is 0, this function will only wrap on newline characters.\n\nYou can render at other quality levels with TTF_RenderText_Solid_Wrapped,\nTTF_RenderText_Shaded_Wrapped, and TTF_RenderText_Blended_Wrapped.\n\n\\param font the font to render with.\n\\param text text to render, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\param fg the foreground color for the text.\n\\param bg the background color for the text.\n\\param wrap_width the maximum width of the text surface or 0 to wrap on\n                  newline characters.\n\\returns a new 32-bit, ARGB surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderText_Blended_Wrapped\n\\sa TTF_RenderText_LCD\n\\sa TTF_RenderText_Shaded_Wrapped\n\\sa TTF_RenderText_Solid_Wrapped",
          "name": "TTF_RenderText_LCD_Wrapped",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "bg",
              "type": "SDL_Color"
            },
            {
              "name": "wrap_width",
              "type": "int"
            }
          ]
        },
        "TTF_RenderGlyph_LCD": {
          "doc": "Render a single UNICODE codepoint at LCD subpixel quality to a new ARGB\nsurface.\n\nThis function will allocate a new 32-bit, ARGB surface, and render\nalpha-blended text using FreeType's LCD subpixel rendering. This function\nreturns the new surface, or NULL if there was an error.\n\nThe glyph is rendered without any padding or centering in the X direction,\nand aligned normally in the Y direction.\n\nYou can render at other quality levels with TTF_RenderGlyph_Solid,\nTTF_RenderGlyph_Shaded, and TTF_RenderGlyph_Blended.\n\n\\param font the font to render with.\n\\param ch the codepoint to render.\n\\param fg the foreground color for the text.\n\\param bg the background color for the text.\n\\returns a new 32-bit, ARGB surface, or NULL if there was an error.\n\n\\threadsafety This function should be called on the thread that created the\n              font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_RenderGlyph_Blended\n\\sa TTF_RenderGlyph_Shaded\n\\sa TTF_RenderGlyph_Solid",
          "name": "TTF_RenderGlyph_LCD",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "ch",
              "type": "Uint32"
            },
            {
              "name": "fg",
              "type": "SDL_Color"
            },
            {
              "name": "bg",
              "type": "SDL_Color"
            }
          ]
        },
        "TTF_Text": {
          "doc": "Text created with TTF_CreateText()\n\n\\since This struct is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateText\n\\sa TTF_GetTextProperties\n\\sa TTF_DestroyText",
          "name": "TTF_Text",
          "kind": "struct",
          "entries": {
            "text": {
              "doc": "A copy of the UTF-8 string that this text object represents, useful for layout, debugging and retrieving substring text. This is updated when the text object is modified and will be freed automatically when the object is destroyed.",
              "name": "text",
              "kind": "var",
              "type": "char *"
            },
            "num_lines": {
              "doc": "The number of lines in the text, 0 if it's empty",
              "name": "num_lines",
              "kind": "var",
              "type": "int"
            },
            "refcount": {
              "doc": "Application reference count, used when freeing surface",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            },
            "internal": {
              "doc": "Private",
              "name": "internal",
              "kind": "var",
              "type": "TTF_TextData"
            }
          }
        },
        "TTF_CreateSurfaceTextEngine": {
          "doc": "Create a text engine for drawing text on SDL surfaces.\n\n\\returns a TTF_TextEngine object or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_DestroySurfaceTextEngine\n\\sa TTF_DrawSurfaceText",
          "name": "TTF_CreateSurfaceTextEngine",
          "kind": "function",
          "type": "TTF_TextEngine *",
          "parameters": []
        },
        "TTF_DrawSurfaceText": {
          "doc": "Draw text to an SDL surface.\n\n`text` must have been created using a TTF_TextEngine from\nTTF_CreateSurfaceTextEngine().\n\n\\param text the text to draw.\n\\param x the x coordinate in pixels, positive from the left edge towards\n         the right.\n\\param y the y coordinate in pixels, positive from the top edge towards the\n         bottom.\n\\param surface the surface to draw on.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateSurfaceTextEngine\n\\sa TTF_CreateText",
          "name": "TTF_DrawSurfaceText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "TTF_DestroySurfaceTextEngine": {
          "doc": "Destroy a text engine created for drawing text on SDL surfaces.\n\nAll text created by this engine should be destroyed before calling this\nfunction.\n\n\\param engine a TTF_TextEngine object created with\n              TTF_CreateSurfaceTextEngine().\n\n\\threadsafety This function should be called on the thread that created the\n              engine.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateSurfaceTextEngine",
          "name": "TTF_DestroySurfaceTextEngine",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "engine",
              "type": "TTF_TextEngine *"
            }
          ]
        },
        "TTF_CreateRendererTextEngine": {
          "doc": "Create a text engine for drawing text on an SDL renderer.\n\n\\param renderer the renderer to use for creating textures and drawing text.\n\\returns a TTF_TextEngine object or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              renderer.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_DestroyRendererTextEngine\n\\sa TTF_DrawRendererText\n\\sa TTF_CreateRendererTextEngineWithProperties",
          "name": "TTF_CreateRendererTextEngine",
          "kind": "function",
          "type": "TTF_TextEngine *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "TTF_CreateRendererTextEngineWithProperties": {
          "doc": "Create a text engine for drawing text on an SDL renderer, with the\nspecified properties.\n\nThese are the supported properties:\n\n- `TTF_PROP_RENDERER_TEXT_ENGINE_RENDERER`: the renderer to use for\n  creating textures and drawing text\n- `TTF_PROP_RENDERER_TEXT_ENGINE_ATLAS_TEXTURE_SIZE`: the size of the\n  texture atlas\n\n\\param props the properties to use.\n\\returns a TTF_TextEngine object or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              renderer.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateRendererTextEngine\n\\sa TTF_DestroyRendererTextEngine\n\\sa TTF_DrawRendererText",
          "name": "TTF_CreateRendererTextEngineWithProperties",
          "kind": "function",
          "type": "TTF_TextEngine *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "TTF_PROP_RENDERER_TEXT_ENGINE_RENDERER": {
          "doc": "",
          "name": "TTF_PROP_RENDERER_TEXT_ENGINE_RENDERER",
          "kind": "def",
          "value": "\"SDL_ttf.renderer_text_engine.create.renderer\""
        },
        "TTF_PROP_RENDERER_TEXT_ENGINE_ATLAS_TEXTURE_SIZE": {
          "doc": "",
          "name": "TTF_PROP_RENDERER_TEXT_ENGINE_ATLAS_TEXTURE_SIZE",
          "kind": "def",
          "value": "\"SDL_ttf.renderer_text_engine.create.atlas_texture_size\""
        },
        "TTF_DrawRendererText": {
          "doc": "Draw text to an SDL renderer.\n\n`text` must have been created using a TTF_TextEngine from\nTTF_CreateRendererTextEngine(), and will draw using the renderer passed to\nthat function.\n\n\\param text the text to draw.\n\\param x the x coordinate in pixels, positive from the left edge towards\n         the right.\n\\param y the y coordinate in pixels, positive from the top edge towards the\n         bottom.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateRendererTextEngine\n\\sa TTF_CreateText",
          "name": "TTF_DrawRendererText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "TTF_DestroyRendererTextEngine": {
          "doc": "Destroy a text engine created for drawing text on an SDL renderer.\n\nAll text created by this engine should be destroyed before calling this\nfunction.\n\n\\param engine a TTF_TextEngine object created with\n              TTF_CreateRendererTextEngine().\n\n\\threadsafety This function should be called on the thread that created the\n              engine.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateRendererTextEngine",
          "name": "TTF_DestroyRendererTextEngine",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "engine",
              "type": "TTF_TextEngine *"
            }
          ]
        },
        "TTF_CreateGPUTextEngine": {
          "doc": "Create a text engine for drawing text with the SDL GPU API.\n\n\\param device the SDL_GPUDevice to use for creating textures and drawing\n              text.\n\\returns a TTF_TextEngine object or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              device.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateGPUTextEngineWithProperties\n\\sa TTF_DestroyGPUTextEngine\n\\sa TTF_GetGPUTextDrawData",
          "name": "TTF_CreateGPUTextEngine",
          "kind": "function",
          "type": "TTF_TextEngine *",
          "parameters": [
            {
              "name": "device",
              "type": "SDL_GPUDevice *"
            }
          ]
        },
        "TTF_CreateGPUTextEngineWithProperties": {
          "doc": "Create a text engine for drawing text with the SDL GPU API, with the\nspecified properties.\n\nThese are the supported properties:\n\n- `TTF_PROP_GPU_TEXT_ENGINE_DEVICE`: the SDL_GPUDevice to use for creating\n  textures and drawing text.\n- `TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE`: the size of the texture\n  atlas\n\n\\param props the properties to use.\n\\returns a TTF_TextEngine object or NULL on failure; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              device.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateGPUTextEngine\n\\sa TTF_DestroyGPUTextEngine\n\\sa TTF_GetGPUTextDrawData",
          "name": "TTF_CreateGPUTextEngineWithProperties",
          "kind": "function",
          "type": "TTF_TextEngine *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "TTF_PROP_GPU_TEXT_ENGINE_DEVICE": {
          "doc": "",
          "name": "TTF_PROP_GPU_TEXT_ENGINE_DEVICE",
          "kind": "def",
          "value": "\"SDL_ttf.gpu_text_engine.create.device\""
        },
        "TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE": {
          "doc": "",
          "name": "TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE",
          "kind": "def",
          "value": "\"SDL_ttf.gpu_text_engine.create.atlas_texture_size\""
        },
        "TTF_GPUAtlasDrawSequence": {
          "doc": "Draw sequence returned by TTF_GetGPUTextDrawData\n\n\\since This struct is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetGPUTextDrawData",
          "name": "TTF_GPUAtlasDrawSequence",
          "kind": "struct",
          "entries": {
            "atlas_texture": {
              "doc": "Texture atlas that stores the glyphs",
              "name": "atlas_texture",
              "kind": "var",
              "type": "SDL_GPUTexture *"
            },
            "xy": {
              "doc": "An array of vertex positions",
              "name": "xy",
              "kind": "var",
              "type": "SDL_FPoint *"
            },
            "uv": {
              "doc": "An array of normalized texture coordinates for each vertex",
              "name": "uv",
              "kind": "var",
              "type": "SDL_FPoint *"
            },
            "num_vertices": {
              "doc": "Number of vertices",
              "name": "num_vertices",
              "kind": "var",
              "type": "int"
            },
            "indices": {
              "doc": "An array of indices into the 'vertices' arrays",
              "name": "indices",
              "kind": "var",
              "type": "int *"
            },
            "num_indices": {
              "doc": "Number of indices",
              "name": "num_indices",
              "kind": "var",
              "type": "int"
            },
            "image_type": {
              "doc": "The image type of this draw sequence",
              "name": "image_type",
              "kind": "var",
              "type": "TTF_ImageType"
            },
            "next": {
              "doc": "The next sequence (will be NULL in case of the last sequence)",
              "name": "next",
              "kind": "var",
              "type": "TTF_GPUAtlasDrawSequence"
            }
          }
        },
        "TTF_GetGPUTextDrawData": {
          "doc": "Get the geometry data needed for drawing the text.\n\n`text` must have been created using a TTF_TextEngine from\nTTF_CreateGPUTextEngine().\n\nThe positive X-axis is taken towards the right and the positive Y-axis is\ntaken upwards for both the vertex and the texture coordinates, i.e, it\nfollows the same convention used by the SDL_GPU API. If you want to use a\ndifferent coordinate system you will need to transform the vertices\nyourself.\n\nIf the text looks blocky use linear filtering.\n\n\\param text the text to draw.\n\\returns a NULL terminated linked list of TTF_GPUAtlasDrawSequence objects\n         or NULL if the passed text is empty or in case of failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateGPUTextEngine\n\\sa TTF_CreateText",
          "name": "TTF_GetGPUTextDrawData",
          "kind": "function",
          "type": "TTF_GPUAtlasDrawSequence *",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_DestroyGPUTextEngine": {
          "doc": "Destroy a text engine created for drawing text with the SDL GPU API.\n\nAll text created by this engine should be destroyed before calling this\nfunction.\n\n\\param engine a TTF_TextEngine object created with\n              TTF_CreateGPUTextEngine().\n\n\\threadsafety This function should be called on the thread that created the\n              engine.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateGPUTextEngine",
          "name": "TTF_DestroyGPUTextEngine",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "engine",
              "type": "TTF_TextEngine *"
            }
          ]
        },
        "TTF_GPUTextEngineWinding": {
          "doc": "The winding order of the vertices returned by TTF_GetGPUTextDrawData\n\n\\since This enum is available since SDL_ttf 3.0.0.",
          "name": "TTF_GPUTextEngineWinding",
          "kind": "enum",
          "entries": {
            "TTF_GPU_TEXTENGINE_WINDING_INVALID": {
              "doc": "",
              "name": "TTF_GPU_TEXTENGINE_WINDING_INVALID",
              "kind": "var",
              "type": ""
            },
            "TTF_GPU_TEXTENGINE_WINDING_CLOCKWISE": {
              "doc": "",
              "name": "TTF_GPU_TEXTENGINE_WINDING_CLOCKWISE",
              "kind": "var",
              "type": ""
            },
            "TTF_GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE": {
              "doc": "",
              "name": "TTF_GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE",
              "kind": "var",
              "type": ""
            }
          }
        },
        "TTF_SetGPUTextEngineWinding": {
          "doc": "Sets the winding order of the vertices returned by TTF_GetGPUTextDrawData\nfor a particular GPU text engine.\n\n\\param engine a TTF_TextEngine object created with\n              TTF_CreateGPUTextEngine().\n\\param winding the new winding order option.\n\n\\threadsafety This function should be called on the thread that created the\n              engine.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetGPUTextEngineWinding",
          "name": "TTF_SetGPUTextEngineWinding",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "engine",
              "type": "TTF_TextEngine *"
            },
            {
              "name": "winding",
              "type": "TTF_GPUTextEngineWinding"
            }
          ]
        },
        "TTF_GetGPUTextEngineWinding": {
          "doc": "Get the winding order of the vertices returned by TTF_GetGPUTextDrawData\nfor a particular GPU text engine\n\n\\param engine a TTF_TextEngine object created with\n              TTF_CreateGPUTextEngine().\n\\returns the winding order used by the GPU text engine or\n         TTF_GPU_TEXTENGINE_WINDING_INVALID in case of error.\n\n\\threadsafety This function should be called on the thread that created the\n              engine.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetGPUTextEngineWinding",
          "name": "TTF_GetGPUTextEngineWinding",
          "kind": "function",
          "type": "TTF_GPUTextEngineWinding",
          "parameters": [
            {
              "name": "engine",
              "type": "const TTF_TextEngine *"
            }
          ]
        },
        "TTF_CreateText": {
          "doc": "Create a text object from UTF-8 text and a text engine.\n\n\\param engine the text engine to use when creating the text object, may be\n              NULL.\n\\param font the font to render with.\n\\param text the text to use, in UTF-8 encoding.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\returns a TTF_Text object or NULL on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              font and text engine.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_DestroyText",
          "name": "TTF_CreateText",
          "kind": "function",
          "type": "TTF_Text *",
          "parameters": [
            {
              "name": "engine",
              "type": "TTF_TextEngine *"
            },
            {
              "name": "font",
              "type": "TTF_Font *"
            },
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            }
          ]
        },
        "TTF_GetTextProperties": {
          "doc": "Get the properties associated with a text object.\n\n\\param text the TTF_Text to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_SetTextEngine": {
          "doc": "Set the text engine used by a text object.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param engine the text engine to use for drawing.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextEngine",
          "name": "TTF_SetTextEngine",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "engine",
              "type": "TTF_TextEngine *"
            }
          ]
        },
        "TTF_GetTextEngine": {
          "doc": "Get the text engine used by a text object.\n\n\\param text the TTF_Text to query.\n\\returns the TTF_TextEngine used by the text on success or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetTextEngine",
          "name": "TTF_GetTextEngine",
          "kind": "function",
          "type": "TTF_TextEngine *",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_SetTextFont": {
          "doc": "Set the font used by a text object.\n\nWhen a text object has a font, any changes to the font will automatically\nregenerate the text. If you set the font to NULL, the text will continue to\nrender but changes to the font will no longer affect the text.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param font the font to use, may be NULL.\n\\returns false if the text pointer is null; otherwise, true. call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextFont",
          "name": "TTF_SetTextFont",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_GetTextFont": {
          "doc": "Get the font used by a text object.\n\n\\param text the TTF_Text to query.\n\\returns the TTF_Font used by the text on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetTextFont",
          "name": "TTF_GetTextFont",
          "kind": "function",
          "type": "TTF_Font *",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_SetTextDirection": {
          "doc": "Set the direction to be used for text shaping a text object.\n\nThis function only supports left-to-right text shaping if SDL_ttf was not\nbuilt with HarfBuzz support.\n\n\\param text the text to modify.\n\\param direction the new direction for text to flow.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_SetTextDirection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "direction",
              "type": "TTF_Direction"
            }
          ]
        },
        "TTF_GetTextDirection": {
          "doc": "Get the direction to be used for text shaping a text object.\n\nThis defaults to the direction of the font used by the text object.\n\n\\param text the text to query.\n\\returns the direction to be used for text shaping.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextDirection",
          "kind": "function",
          "type": "TTF_Direction",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_SetTextScript": {
          "doc": "Set the script to be used for text shaping a text object.\n\nThis returns false if SDL_ttf isn't built with HarfBuzz support.\n\n\\param text the text to modify.\n\\param script an\n              [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)\n              .\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_StringToTag",
          "name": "TTF_SetTextScript",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "script",
              "type": "Uint32"
            }
          ]
        },
        "TTF_GetTextScript": {
          "doc": "Get the script used for text shaping a text object.\n\nThis defaults to the script of the font used by the text object.\n\n\\param text the text to query.\n\\returns an\n         [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)\n         or 0 if a script hasn't been set on either the text object or the\n         font.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_TagToString",
          "name": "TTF_GetTextScript",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_SetTextColor": {
          "doc": "Set the color of a text object.\n\nThe default text color is white (255, 255, 255, 255).\n\n\\param text the TTF_Text to modify.\n\\param r the red color value in the range of 0-255.\n\\param g the green color value in the range of 0-255.\n\\param b the blue color value in the range of 0-255.\n\\param a the alpha value in the range of 0-255.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextColor\n\\sa TTF_SetTextColorFloat",
          "name": "TTF_SetTextColor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "TTF_SetTextColorFloat": {
          "doc": "Set the color of a text object.\n\nThe default text color is white (1.0f, 1.0f, 1.0f, 1.0f).\n\n\\param text the TTF_Text to modify.\n\\param r the red color value, normally in the range of 0-1.\n\\param g the green color value, normally in the range of 0-1.\n\\param b the blue color value, normally in the range of 0-1.\n\\param a the alpha value in the range of 0-1.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextColorFloat\n\\sa TTF_SetTextColor",
          "name": "TTF_SetTextColorFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        },
        "TTF_GetTextColor": {
          "doc": "Get the color of a text object.\n\n\\param text the TTF_Text to query.\n\\param r a pointer filled in with the red color value in the range of\n         0-255, may be NULL.\n\\param g a pointer filled in with the green color value in the range of\n         0-255, may be NULL.\n\\param b a pointer filled in with the blue color value in the range of\n         0-255, may be NULL.\n\\param a a pointer filled in with the alpha value in the range of 0-255,\n         may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextColorFloat\n\\sa TTF_SetTextColor",
          "name": "TTF_GetTextColor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        },
        "TTF_GetTextColorFloat": {
          "doc": "Get the color of a text object.\n\n\\param text the TTF_Text to query.\n\\param r a pointer filled in with the red color value, normally in the\n         range of 0-1, may be NULL.\n\\param g a pointer filled in with the green color value, normally in the\n         range of 0-1, may be NULL.\n\\param b a pointer filled in with the blue color value, normally in the\n         range of 0-1, may be NULL.\n\\param a a pointer filled in with the alpha value in the range of 0-1, may\n         be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextColor\n\\sa TTF_SetTextColorFloat",
          "name": "TTF_GetTextColorFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            },
            {
              "name": "a",
              "type": "float *"
            }
          ]
        },
        "TTF_SetTextPosition": {
          "doc": "Set the position of a text object.\n\nThis can be used to position multiple text objects within a single wrapping\ntext area.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param x the x offset of the upper left corner of this text in pixels.\n\\param y the y offset of the upper left corner of this text in pixels.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextPosition",
          "name": "TTF_SetTextPosition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            }
          ]
        },
        "TTF_GetTextPosition": {
          "doc": "Get the position of a text object.\n\n\\param text the TTF_Text to query.\n\\param x a pointer filled in with the x offset of the upper left corner of\n         this text in pixels, may be NULL.\n\\param y a pointer filled in with the y offset of the upper left corner of\n         this text in pixels, may be NULL.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetTextPosition",
          "name": "TTF_GetTextPosition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "x",
              "type": "int *"
            },
            {
              "name": "y",
              "type": "int *"
            }
          ]
        },
        "TTF_SetTextWrapWidth": {
          "doc": "Set whether wrapping is enabled on a text object.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param wrap_width the maximum width in pixels, 0 to wrap on newline\n                  characters.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetTextWrapWidth",
          "name": "TTF_SetTextWrapWidth",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "wrap_width",
              "type": "int"
            }
          ]
        },
        "TTF_GetTextWrapWidth": {
          "doc": "Get whether wrapping is enabled on a text object.\n\n\\param text the TTF_Text to query.\n\\param wrap_width a pointer filled in with the maximum width in pixels or 0\n                  if the text is being wrapped on newline characters.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetTextWrapWidth",
          "name": "TTF_GetTextWrapWidth",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "wrap_width",
              "type": "int *"
            }
          ]
        },
        "TTF_SetTextWrapWhitespaceVisible": {
          "doc": "Set whether whitespace should be visible when wrapping a text object.\n\nIf the whitespace is visible, it will take up space for purposes of\nalignment and wrapping. This is good for editing, but looks better when\ncentered or aligned if whitespace around line wrapping is hidden. This\ndefaults false.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param visible true to show whitespace when wrapping text, false to hide\n               it.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_TextWrapWhitespaceVisible",
          "name": "TTF_SetTextWrapWhitespaceVisible",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "visible",
              "type": "bool"
            }
          ]
        },
        "TTF_TextWrapWhitespaceVisible": {
          "doc": "Return whether whitespace is shown when wrapping a text object.\n\n\\param text the TTF_Text to query.\n\\returns true if whitespace is shown when wrapping text, or false\n         otherwise.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SetTextWrapWhitespaceVisible",
          "name": "TTF_TextWrapWhitespaceVisible",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_SetTextString": {
          "doc": "Set the UTF-8 text used by a text object.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param string the UTF-8 text to use, may be NULL.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_AppendTextString\n\\sa TTF_DeleteTextString\n\\sa TTF_InsertTextString",
          "name": "TTF_SetTextString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "string",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            }
          ]
        },
        "TTF_InsertTextString": {
          "doc": "Insert UTF-8 text into a text object.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param offset the offset, in bytes, from the beginning of the string if >=\n              0, the offset from the end of the string if < 0. Note that\n              this does not do UTF-8 validation, so you should only insert\n              at UTF-8 sequence boundaries.\n\\param string the UTF-8 text to insert.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_AppendTextString\n\\sa TTF_DeleteTextString\n\\sa TTF_SetTextString",
          "name": "TTF_InsertTextString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "offset",
              "type": "int"
            },
            {
              "name": "string",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            }
          ]
        },
        "TTF_AppendTextString": {
          "doc": "Append UTF-8 text to a text object.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param string the UTF-8 text to insert.\n\\param length the length of the text, in bytes, or 0 for null terminated\n              text.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_DeleteTextString\n\\sa TTF_InsertTextString\n\\sa TTF_SetTextString",
          "name": "TTF_AppendTextString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "string",
              "type": "const char *"
            },
            {
              "name": "length",
              "type": "size_t"
            }
          ]
        },
        "TTF_DeleteTextString": {
          "doc": "Delete UTF-8 text from a text object.\n\nThis function may cause the internal text representation to be rebuilt.\n\n\\param text the TTF_Text to modify.\n\\param offset the offset, in bytes, from the beginning of the string if >=\n              0, the offset from the end of the string if < 0. Note that\n              this does not do UTF-8 validation, so you should only delete\n              at UTF-8 sequence boundaries.\n\\param length the length of text to delete, in bytes, or -1 for the\n              remainder of the string.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_AppendTextString\n\\sa TTF_InsertTextString\n\\sa TTF_SetTextString",
          "name": "TTF_DeleteTextString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "offset",
              "type": "int"
            },
            {
              "name": "length",
              "type": "int"
            }
          ]
        },
        "TTF_GetTextSize": {
          "doc": "Get the size of a text object.\n\nThe size of the text may change when the font or font style and size\nchange.\n\n\\param text the TTF_Text to query.\n\\param w a pointer filled in with the width of the text, in pixels, may be\n         NULL.\n\\param h a pointer filled in with the height of the text, in pixels, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "TTF_SubStringFlags": {
          "doc": "Flags for TTF_SubString\n\n\\since This datatype is available since SDL_ttf 3.0.0.\n\n\\sa TTF_SubString",
          "name": "TTF_SubStringFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "TTF_SUBSTRING_DIRECTION_MASK": {
          "doc": "The mask for the flow direction for this substring",
          "name": "TTF_SUBSTRING_DIRECTION_MASK",
          "kind": "def",
          "value": "0x000000FF"
        },
        "TTF_SUBSTRING_TEXT_START": {
          "doc": "This substring contains the beginning of the text",
          "name": "TTF_SUBSTRING_TEXT_START",
          "kind": "def",
          "value": "0x00000100"
        },
        "TTF_SUBSTRING_LINE_START": {
          "doc": "This substring contains the beginning of line `line_index`",
          "name": "TTF_SUBSTRING_LINE_START",
          "kind": "def",
          "value": "0x00000200"
        },
        "TTF_SUBSTRING_LINE_END": {
          "doc": "This substring contains the end of line `line_index`",
          "name": "TTF_SUBSTRING_LINE_END",
          "kind": "def",
          "value": "0x00000400"
        },
        "TTF_SUBSTRING_TEXT_END": {
          "doc": "This substring contains the end of the text",
          "name": "TTF_SUBSTRING_TEXT_END",
          "kind": "def",
          "value": "0x00000800"
        },
        "TTF_SubString": {
          "doc": "The representation of a substring within text.\n\n\\since This struct is available since SDL_ttf 3.0.0.\n\n\\sa TTF_GetNextTextSubString\n\\sa TTF_GetPreviousTextSubString\n\\sa TTF_GetTextSubString\n\\sa TTF_GetTextSubStringForLine\n\\sa TTF_GetTextSubStringForPoint\n\\sa TTF_GetTextSubStringsForRange",
          "name": "TTF_SubString",
          "kind": "struct",
          "entries": {
            "flags": {
              "doc": "The flags for this substring",
              "name": "flags",
              "kind": "var",
              "type": "TTF_SubStringFlags"
            },
            "offset": {
              "doc": "The byte offset from the beginning of the text",
              "name": "offset",
              "kind": "var",
              "type": "int"
            },
            "length": {
              "doc": "The byte length starting at the offset",
              "name": "length",
              "kind": "var",
              "type": "int"
            },
            "line_index": {
              "doc": "The index of the line that contains this substring",
              "name": "line_index",
              "kind": "var",
              "type": "int"
            },
            "cluster_index": {
              "doc": "The internal cluster index, used for quickly iterating",
              "name": "cluster_index",
              "kind": "var",
              "type": "int"
            },
            "rect": {
              "doc": "The rectangle, relative to the top left of the text, containing the substring",
              "name": "rect",
              "kind": "var",
              "type": "SDL_Rect"
            }
          }
        },
        "TTF_GetTextSubString": {
          "doc": "Get the substring of a text object that surrounds a text offset.\n\nIf `offset` is less than 0, this will return a zero length substring at the\nbeginning of the text with the TTF_SUBSTRING_TEXT_START flag set. If\n`offset` is greater than or equal to the length of the text string, this\nwill return a zero length substring at the end of the text with the\nTTF_SUBSTRING_TEXT_END flag set.\n\n\\param text the TTF_Text to query.\n\\param offset a byte offset into the text string.\n\\param substring a pointer filled in with the substring containing the\n                 offset.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextSubString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "offset",
              "type": "int"
            },
            {
              "name": "substring",
              "type": "TTF_SubString *"
            }
          ]
        },
        "TTF_GetTextSubStringForLine": {
          "doc": "Get the substring of a text object that contains the given line.\n\nIf `line` is less than 0, this will return a zero length substring at the\nbeginning of the text with the TTF_SUBSTRING_TEXT_START flag set. If `line`\nis greater than or equal to `text->num_lines` this will return a zero\nlength substring at the end of the text with the TTF_SUBSTRING_TEXT_END\nflag set.\n\n\\param text the TTF_Text to query.\n\\param line a zero-based line index, in the range [0 .. text->num_lines-1].\n\\param substring a pointer filled in with the substring containing the\n                 offset.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextSubStringForLine",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "line",
              "type": "int"
            },
            {
              "name": "substring",
              "type": "TTF_SubString *"
            }
          ]
        },
        "TTF_GetTextSubStringsForRange": {
          "doc": "Get the substrings of a text object that contain a range of text.\n\n\\param text the TTF_Text to query.\n\\param offset a byte offset into the text string.\n\\param length the length of the range being queried, in bytes, or -1 for\n              the remainder of the string.\n\\param count a pointer filled in with the number of substrings returned,\n             may be NULL.\n\\returns a NULL terminated array of substring pointers or NULL on failure;\n         call SDL_GetError() for more information. This is a single\n         allocation that should be freed with SDL_free() when it is no\n         longer needed.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextSubStringsForRange",
          "kind": "function",
          "type": "TTF_SubString **",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "offset",
              "type": "int"
            },
            {
              "name": "length",
              "type": "int"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "TTF_GetTextSubStringForPoint": {
          "doc": "Get the portion of a text string that is closest to a point.\n\nThis will return the closest substring of text to the given point.\n\n\\param text the TTF_Text to query.\n\\param x the x coordinate relative to the left side of the text, may be\n         outside the bounds of the text area.\n\\param y the y coordinate relative to the top side of the text, may be\n         outside the bounds of the text area.\n\\param substring a pointer filled in with the closest substring of text to\n                 the given point.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetTextSubStringForPoint",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "substring",
              "type": "TTF_SubString *"
            }
          ]
        },
        "TTF_GetPreviousTextSubString": {
          "doc": "Get the previous substring in a text object\n\nIf called at the start of the text, this will return a zero length\nsubstring with the TTF_SUBSTRING_TEXT_START flag set.\n\n\\param text the TTF_Text to query.\n\\param substring the TTF_SubString to query.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetPreviousTextSubString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "substring",
              "type": "const TTF_SubString *"
            },
            {
              "name": "previous",
              "type": "TTF_SubString *"
            }
          ]
        },
        "TTF_GetNextTextSubString": {
          "doc": "Get the next substring in a text object\n\nIf called at the end of the text, this will return a zero length substring\nwith the TTF_SUBSTRING_TEXT_END flag set.\n\n\\param text the TTF_Text to query.\n\\param substring the TTF_SubString to query.\n\\param next a pointer filled in with the next substring.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_GetNextTextSubString",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            },
            {
              "name": "substring",
              "type": "const TTF_SubString *"
            },
            {
              "name": "next",
              "type": "TTF_SubString *"
            }
          ]
        },
        "TTF_UpdateText": {
          "doc": "Update the layout of a text object.\n\nThis is automatically done when the layout is requested or the text is\nrendered, but you can call this if you need more control over the timing of\nwhen the layout and text engine representation are updated.\n\n\\param text the TTF_Text to update.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_UpdateText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_DestroyText": {
          "doc": "Destroy a text object created by a text engine.\n\n\\param text the text to destroy.\n\n\\threadsafety This function should be called on the thread that created the\n              text.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_CreateText",
          "name": "TTF_DestroyText",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "text",
              "type": "TTF_Text *"
            }
          ]
        },
        "TTF_CloseFont": {
          "doc": "Dispose of a previously-created font.\n\nCall this when done with a font. This function will free any resources\nassociated with it. It is safe to call this function on NULL, for example\non the result of a failed call to TTF_OpenFont().\n\nThe font is not valid after being passed to this function. String pointers\nfrom functions that return information on this font, such as\nTTF_GetFontFamilyName() and TTF_GetFontStyleName(), are no longer valid\nafter this call, as well.\n\n\\param font the font to dispose of.\n\n\\threadsafety This function should not be called while any other thread is\n              using the font.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_OpenFont\n\\sa TTF_OpenFontIO",
          "name": "TTF_CloseFont",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "font",
              "type": "TTF_Font *"
            }
          ]
        },
        "TTF_Quit": {
          "doc": "Deinitialize SDL_ttf.\n\nYou must call this when done with the library, to free internal resources.\nIt is safe to call this when the library isn't initialized, as it will just\nreturn immediately.\n\nOnce you have as many quit calls as you have had successful calls to\nTTF_Init, the library will actually deinitialize.\n\nPlease note that this does not automatically close any fonts that are still\nopen at the time of deinitialization, and it is possibly not safe to close\nthem afterwards, as parts of the library will no longer be initialized to\ndeal with it. A well-written program should call TTF_CloseFont() on any\nopen fonts before calling this function!\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.",
          "name": "TTF_Quit",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "TTF_WasInit": {
          "doc": "Check if SDL_ttf is initialized.\n\nThis reports the number of times the library has been initialized by a call\nto TTF_Init(), without a paired deinitialization request from TTF_Quit().\n\nIn short: if it's greater than zero, the library is currently initialized\nand ready to work. If zero, it is not initialized.\n\nDespite the return value being a signed integer, this function should not\nreturn a negative number.\n\n\\returns the current number of initialization calls, that need to\n         eventually be paired with this many calls to TTF_Quit().\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL_ttf 3.0.0.\n\n\\sa TTF_Init\n\\sa TTF_Quit",
          "name": "TTF_WasInit",
          "kind": "function",
          "type": "int",
          "parameters": []
        }
      }
    }
  }
}
