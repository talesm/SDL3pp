{
  "files": {
    "SDL_stdinc.h": {
      "name": "SDL_stdinc.h",
      "doc": "# CategoryStdinc\n\nSDL provides its own implementation of some of the most important C runtime\nfunctions.\n\nUsing these functions allows an app to have access to common C\nfunctionality without depending on a specific C runtime (or a C runtime at\nall). More importantly, the SDL implementations work identically across\nplatforms, so apps can avoid surprises like snprintf() behaving differently\nbetween Windows and Linux builds, or itoa() only existing on some\nplatforms.\n\nFor many of the most common functions, like SDL_memcpy, SDL might just call\nthrough to the usual C runtime behind the scenes, if it makes sense to do\nso (if it's faster and always available/reliable on a given platform),\nreducing library size and offering the most optimized option.\n\nSDL also offers other C-runtime-adjacent functionality in this header that\neither isn't, strictly speaking, part of any C runtime standards, like\nSDL_crc32() and SDL_reinterpret_cast, etc. It also offers a few better\noptions, like SDL_strlcpy(), which functions as a safer form of strcpy().",
      "entries": {
        "SDL_INCLUDE_STDBOOL_H": {
          "doc": "",
          "name": "SDL_INCLUDE_STDBOOL_H",
          "kind": "def"
        },
        "bool": {
          "doc": "",
          "name": "bool",
          "kind": "def"
        },
        "false": {
          "doc": "",
          "name": "false",
          "kind": "def"
        },
        "true": {
          "doc": "",
          "name": "true",
          "kind": "def"
        },
        "__bool_true_false_are_defined": {
          "doc": "",
          "name": "__bool_true_false_are_defined",
          "kind": "def"
        },
        "SDL_NOLONGLONG": {
          "doc": "Don't let SDL use \"long long\" C types.\n\nSDL will define this if it believes the compiler doesn't understand the\n\"long long\" syntax for C datatypes. This can happen on older compilers.\n\nIf _your_ compiler doesn't support \"long long\" but SDL doesn't know it, it\nis safe to define this yourself to build against the SDL headers.\n\nIf this is defined, it will remove access to some C runtime support\nfunctions, like SDL_ulltoa and SDL_strtoll that refer to this datatype\nexplicitly. The rest of SDL will still be available.\n\nSDL's own source code cannot be built with a compiler that has this\ndefined, for various technical reasons.",
          "name": "SDL_NOLONGLONG",
          "kind": "def"
        },
        "SDL_SIZE_MAX": {
          "doc": "The largest value that a `size_t` can hold for the target platform.\n\n`size_t` is generally the same size as a pointer in modern times, but this\ncan get weird on very old and very esoteric machines. For example, on a\n16-bit Intel 286, you might have a 32-bit \"far\" pointer (16-bit segment\nplus 16-bit offset), but `size_t` is 16 bits, because it can only deal with\nthe offset into an individual segment.\n\nIn modern times, it's generally expected to cover an entire linear address\nspace. But be careful!\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SIZE_MAX",
          "kind": "def"
        },
        "SDL_COMPILE_TIME_ASSERT": {
          "doc": "A compile-time assertion.\n\nThis can check constant values _known to the compiler at build time_ for\ncorrectness, and end the compile with the error if they fail.\n\nOften times these are used to verify basic truths, like the size of a\ndatatype is what is expected:\n\n```c\nSDL_COMPILE_TIME_ASSERT(uint32_size, sizeof(Uint32) == 4);\n```\n\nThe `name` parameter must be a valid C symbol, and must be unique across\nall compile-time asserts in the same compilation unit (one run of the\ncompiler), or the build might fail with cryptic errors on some targets.\nThis is used with a C language trick that works on older compilers that\ndon't support better assertion techniques.\n\nIf you need an assertion that operates at runtime, on variable data, you\nshould try SDL_assert instead.\n\n\\param name a unique identifier for this assertion.\n\\param x the value to test. Must be a boolean value.\n\n\\threadsafety This macro doesn't generate any code to run.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_assert",
          "name": "SDL_COMPILE_TIME_ASSERT",
          "kind": "def",
          "parameters": [
            "name",
            "x"
          ]
        },
        "SDL_arraysize": {
          "doc": "The number of elements in a static array.\n\nThis will compile but return incorrect results for a pointer to an array;\nit has to be an array the compiler knows the size of.\n\nThis macro looks like it double-evaluates the argument, but it does so\ninside of `sizeof`, so there are no side-effects here, as expressions do\nnot actually run any code in these cases.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_arraysize",
          "kind": "def",
          "parameters": [
            "array"
          ]
        },
        "SDL_STRINGIFY_ARG": {
          "doc": "Macro useful for building other macros with strings in them.\n\nFor example:\n\n```c\n#define LOG_ERROR(X) OutputDebugString(SDL_STRINGIFY_ARG(__FUNCTION__) \": \" X \"\\n\")`\n```\n\n\\param arg the text to turn into a string literal.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_STRINGIFY_ARG",
          "kind": "def",
          "parameters": [
            "arg"
          ]
        },
        "SDL_reinterpret_cast": {
          "doc": "Handle a Reinterpret Cast properly whether using C or C++.\n\nIf compiled as C++, this macro offers a proper C++ reinterpret_cast<>.\n\nIf compiled as C, this macro does a normal C-style cast.\n\nThis is helpful to avoid compiler warnings in C++.\n\n\\param type the type to cast the expression to.\n\\param expression the expression to cast to a different type.\n\\returns `expression`, cast to `type`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_static_cast\n\\sa SDL_const_cast",
          "name": "SDL_reinterpret_cast",
          "kind": "def",
          "parameters": [
            "type",
            "expression"
          ]
        },
        "SDL_static_cast": {
          "doc": "Handle a Static Cast properly whether using C or C++.\n\nIf compiled as C++, this macro offers a proper C++ static_cast<>.\n\nIf compiled as C, this macro does a normal C-style cast.\n\nThis is helpful to avoid compiler warnings in C++.\n\n\\param type the type to cast the expression to.\n\\param expression the expression to cast to a different type.\n\\returns `expression`, cast to `type`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_reinterpret_cast\n\\sa SDL_const_cast",
          "name": "SDL_static_cast",
          "kind": "def",
          "parameters": [
            "type",
            "expression"
          ]
        },
        "SDL_const_cast": {
          "doc": "Handle a Const Cast properly whether using C or C++.\n\nIf compiled as C++, this macro offers a proper C++ const_cast<>.\n\nIf compiled as C, this macro does a normal C-style cast.\n\nThis is helpful to avoid compiler warnings in C++.\n\n\\param type the type to cast the expression to.\n\\param expression the expression to cast to a different type.\n\\returns `expression`, cast to `type`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_reinterpret_cast\n\\sa SDL_static_cast",
          "name": "SDL_const_cast",
          "kind": "def",
          "parameters": [
            "type",
            "expression"
          ]
        },
        "SDL_FOURCC": {
          "doc": "Define a four character code as a Uint32.\n\n\\param A the first ASCII character.\n\\param B the second ASCII character.\n\\param C the third ASCII character.\n\\param D the fourth ASCII character.\n\\returns the four characters converted into a Uint32, one character\n         per-byte.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_FOURCC",
          "kind": "def",
          "parameters": [
            "A",
            "B",
            "C",
            "D"
          ]
        },
        "SDL_SINT64_C": {
          "doc": "Append the 64 bit integer suffix to a signed integer literal.\n\nThis helps compilers that might believe a integer literal larger than\n0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_SINT64_C(0xFFFFFFFF1)`\ninstead of `0xFFFFFFFF1` by itself.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_UINT64_C",
          "name": "SDL_SINT64_C",
          "kind": "def",
          "parameters": [
            "c"
          ]
        },
        "SDL_UINT64_C": {
          "doc": "Append the 64 bit integer suffix to an unsigned integer literal.\n\nThis helps compilers that might believe a integer literal larger than\n0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_UINT64_C(0xFFFFFFFF1)`\ninstead of `0xFFFFFFFF1` by itself.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SINT64_C",
          "name": "SDL_UINT64_C",
          "kind": "def",
          "parameters": [
            "c"
          ]
        },
        "Sint8": {
          "doc": "A signed 8-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Sint8",
          "kind": "alias",
          "type": "int8_t"
        },
        "SDL_MAX_SINT8": {
          "doc": "",
          "name": "SDL_MAX_SINT8",
          "kind": "def"
        },
        "SDL_MIN_SINT8": {
          "doc": "",
          "name": "SDL_MIN_SINT8",
          "kind": "def"
        },
        "Uint8": {
          "doc": "An unsigned 8-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Uint8",
          "kind": "alias",
          "type": "uint8_t"
        },
        "SDL_MAX_UINT8": {
          "doc": "",
          "name": "SDL_MAX_UINT8",
          "kind": "def"
        },
        "SDL_MIN_UINT8": {
          "doc": "",
          "name": "SDL_MIN_UINT8",
          "kind": "def"
        },
        "Sint16": {
          "doc": "A signed 16-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Sint16",
          "kind": "alias",
          "type": "int16_t"
        },
        "SDL_MAX_SINT16": {
          "doc": "",
          "name": "SDL_MAX_SINT16",
          "kind": "def"
        },
        "SDL_MIN_SINT16": {
          "doc": "",
          "name": "SDL_MIN_SINT16",
          "kind": "def"
        },
        "Uint16": {
          "doc": "An unsigned 16-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Uint16",
          "kind": "alias",
          "type": "uint16_t"
        },
        "SDL_MAX_UINT16": {
          "doc": "",
          "name": "SDL_MAX_UINT16",
          "kind": "def"
        },
        "SDL_MIN_UINT16": {
          "doc": "",
          "name": "SDL_MIN_UINT16",
          "kind": "def"
        },
        "Sint32": {
          "doc": "A signed 32-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Sint32",
          "kind": "alias",
          "type": "int32_t"
        },
        "SDL_MAX_SINT32": {
          "doc": "",
          "name": "SDL_MAX_SINT32",
          "kind": "def"
        },
        "SDL_MIN_SINT32": {
          "doc": "",
          "name": "SDL_MIN_SINT32",
          "kind": "def"
        },
        "Uint32": {
          "doc": "An unsigned 32-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "Uint32",
          "kind": "alias",
          "type": "uint32_t"
        },
        "SDL_MAX_UINT32": {
          "doc": "",
          "name": "SDL_MAX_UINT32",
          "kind": "def"
        },
        "SDL_MIN_UINT32": {
          "doc": "",
          "name": "SDL_MIN_UINT32",
          "kind": "def"
        },
        "Sint64": {
          "doc": "A signed 64-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_SINT64_C",
          "name": "Sint64",
          "kind": "alias",
          "type": "int64_t"
        },
        "SDL_MAX_SINT64": {
          "doc": "",
          "name": "SDL_MAX_SINT64",
          "kind": "def"
        },
        "SDL_MIN_SINT64": {
          "doc": "",
          "name": "SDL_MIN_SINT64",
          "kind": "def"
        },
        "Uint64": {
          "doc": "An unsigned 64-bit integer type.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_UINT64_C",
          "name": "Uint64",
          "kind": "alias",
          "type": "uint64_t"
        },
        "SDL_MAX_UINT64": {
          "doc": "",
          "name": "SDL_MAX_UINT64",
          "kind": "def"
        },
        "SDL_MIN_UINT64": {
          "doc": "",
          "name": "SDL_MIN_UINT64",
          "kind": "def"
        },
        "SDL_Time": {
          "doc": "SDL times are signed, 64-bit integers representing nanoseconds since the\nUnix epoch (Jan 1, 1970).\n\nThey can be converted between POSIX time_t values with SDL_NS_TO_SECONDS()\nand SDL_SECONDS_TO_NS(), and between Windows FILETIME values with\nSDL_TimeToWindows() and SDL_TimeFromWindows().\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_MAX_SINT64\n\\sa SDL_MIN_SINT64",
          "name": "SDL_Time",
          "kind": "alias",
          "type": "Sint64"
        },
        "SDL_MAX_TIME": {
          "doc": "",
          "name": "SDL_MAX_TIME",
          "kind": "def"
        },
        "SDL_MIN_TIME": {
          "doc": "",
          "name": "SDL_MIN_TIME",
          "kind": "def"
        },
        "SDL_FLT_EPSILON": {
          "doc": "Epsilon constant, used for comparing floating-point numbers.\n\nEquals by default to platform-defined `FLT_EPSILON`, or\n`1.1920928955078125e-07F` if that's not available.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_FLT_EPSILON",
          "kind": "def"
        },
        "SDL_PRIs64": {
          "doc": "A printf-formatting string for an Sint64 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIs64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIs64",
          "kind": "def"
        },
        "SDL_PRIu64": {
          "doc": "A printf-formatting string for a Uint64 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIu64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIu64",
          "kind": "def"
        },
        "SDL_PRIx64": {
          "doc": "A printf-formatting string for a Uint64 value as lower-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIx64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIx64",
          "kind": "def"
        },
        "SDL_PRIX64": {
          "doc": "A printf-formatting string for a Uint64 value as upper-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIX64 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIX64",
          "kind": "def"
        },
        "SDL_PRIs32": {
          "doc": "A printf-formatting string for an Sint32 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIs32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIs32",
          "kind": "def"
        },
        "SDL_PRIu32": {
          "doc": "A printf-formatting string for a Uint32 value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIu32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIu32",
          "kind": "def"
        },
        "SDL_PRIx32": {
          "doc": "A printf-formatting string for a Uint32 value as lower-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIx32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIx32",
          "kind": "def"
        },
        "SDL_PRIX32": {
          "doc": "A printf-formatting string for a Uint32 value as upper-case hexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRIX32 \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRIX32",
          "kind": "def"
        },
        "SDL_PRILL_PREFIX": {
          "doc": "A printf-formatting string prefix for a `long long` value.\n\nThis is just the prefix! You probably actually want SDL_PRILLd, SDL_PRILLu,\nSDL_PRILLx, or SDL_PRILLX instead.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILL_PREFIX \"d bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILL_PREFIX",
          "kind": "def"
        },
        "SDL_PRILLd": {
          "doc": "A printf-formatting string for a `long long` value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLd \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLd",
          "kind": "def"
        },
        "SDL_PRILLu": {
          "doc": "A printf-formatting string for a `unsigned long long` value.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLu \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLu",
          "kind": "def"
        },
        "SDL_PRILLx": {
          "doc": "A printf-formatting string for an `unsigned long long` value as lower-case\nhexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLx \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLx",
          "kind": "def"
        },
        "SDL_PRILLX": {
          "doc": "A printf-formatting string for an `unsigned long long` value as upper-case\nhexadecimal.\n\nUse it like this:\n\n```c\nSDL_Log(\"There are %\" SDL_PRILLX \" bottles of beer on the wall.\", bottles);\n```\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRILLX",
          "kind": "def"
        },
        "SDL_IN_BYTECAP": {
          "doc": "Macro that annotates function params with input buffer size.\n\nIf we were to annotate `memcpy`:\n\n```c\nvoid *memcpy(void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len);\n```\n\nThis notes that `src` should be `len` bytes in size and is only read by the\nfunction. The compiler or other analysis tools can warn when this doesn't\nappear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_IN_BYTECAP",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_INOUT_Z_CAP": {
          "doc": "Macro that annotates function params with input/output string buffer size.\n\nIf we were to annotate `strlcat`:\n\n```c\nsize_t strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen);\n```\n\nThis notes that `dst` is a null-terminated C string, should be `maxlen`\nbytes in size, and is both read from and written to by the function. The\ncompiler or other analysis tools can warn when this doesn't appear to be\nthe case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_INOUT_Z_CAP",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_OUT_Z_CAP": {
          "doc": "Macro that annotates function params with output string buffer size.\n\nIf we were to annotate `snprintf`:\n\n```c\nint snprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, const char *fmt, ...);\n```\n\nThis notes that `text` is a null-terminated C string, should be `maxlen`\nbytes in size, and is only written to by the function. The compiler or\nother analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_Z_CAP",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_OUT_CAP": {
          "doc": "Macro that annotates function params with output buffer size.\n\nIf we were to annotate `wcsncpy`:\n\n```c\nchar *wcscpy(SDL_OUT_CAP(bufsize) wchar_t *dst, const wchar_t *src, size_t bufsize);\n```\n\nThis notes that `dst` should have a capacity of `bufsize` wchar_t in size,\nand is only written to by the function. The compiler or other analysis\ntools can warn when this doesn't appear to be the case.\n\nThis operates on counts of objects, not bytes. Use SDL_OUT_BYTECAP for\nbytes.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_CAP",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_OUT_BYTECAP": {
          "doc": "Macro that annotates function params with output buffer size.\n\nIf we were to annotate `memcpy`:\n\n```c\nvoid *memcpy(SDL_OUT_BYTECAP(bufsize) void *dst, const void *src, size_t bufsize);\n```\n\nThis notes that `dst` should have a capacity of `bufsize` bytes in size,\nand is only written to by the function. The compiler or other analysis\ntools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_BYTECAP",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_OUT_Z_BYTECAP": {
          "doc": "Macro that annotates function params with output buffer string size.\n\nIf we were to annotate `strcpy`:\n\n```c\nchar *strcpy(SDL_OUT_Z_BYTECAP(bufsize) char *dst, const char *src, size_t bufsize);\n```\n\nThis notes that `dst` should have a capacity of `bufsize` bytes in size,\nand a zero-terminated string is written to it by the function. The compiler\nor other analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_OUT_Z_BYTECAP",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_PRINTF_FORMAT_STRING": {
          "doc": "Macro that annotates function params as printf-style format strings.\n\nIf we were to annotate `fprintf`:\n\n```c\nint fprintf(FILE *f, SDL_PRINTF_FORMAT_STRING const char *fmt, ...);\n```\n\nThis notes that `fmt` should be a printf-style format string. The compiler\nor other analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRINTF_FORMAT_STRING",
          "kind": "def"
        },
        "SDL_SCANF_FORMAT_STRING": {
          "doc": "Macro that annotates function params as scanf-style format strings.\n\nIf we were to annotate `fscanf`:\n\n```c\nint fscanf(FILE *f, SDL_SCANF_FORMAT_STRING const char *fmt, ...);\n```\n\nThis notes that `fmt` should be a scanf-style format string. The compiler\nor other analysis tools can warn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCANF_FORMAT_STRING",
          "kind": "def"
        },
        "SDL_PRINTF_VARARG_FUNC": {
          "doc": "Macro that annotates a vararg function that operates like printf.\n\nIf we were to annotate `fprintf`:\n\n```c\nint fprintf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNC(2);\n```\n\nThis notes that the second parameter should be a printf-style format\nstring, followed by `...`. The compiler or other analysis tools can warn\nwhen this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRINTF_VARARG_FUNC",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ]
        },
        "SDL_PRINTF_VARARG_FUNCV": {
          "doc": "Macro that annotates a va_list function that operates like printf.\n\nIf we were to annotate `vfprintf`:\n\n```c\nint vfprintf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\nThis notes that the second parameter should be a printf-style format\nstring, followed by a va_list. The compiler or other analysis tools can\nwarn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PRINTF_VARARG_FUNCV",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ]
        },
        "SDL_SCANF_VARARG_FUNC": {
          "doc": "Macro that annotates a vararg function that operates like scanf.\n\nIf we were to annotate `fscanf`:\n\n```c\nint fscanf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\nThis notes that the second parameter should be a scanf-style format string,\nfollowed by `...`. The compiler or other analysis tools can warn when this\ndoesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_SCANF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCANF_VARARG_FUNC",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ]
        },
        "SDL_SCANF_VARARG_FUNCV": {
          "doc": "Macro that annotates a va_list function that operates like scanf.\n\nIf we were to annotate `vfscanf`:\n\n```c\nint vfscanf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\nThis notes that the second parameter should be a scanf-style format string,\nfollowed by a va_list. The compiler or other analysis tools can warn when\nthis doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_SCANF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SCANF_VARARG_FUNCV",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ]
        },
        "SDL_WPRINTF_VARARG_FUNC": {
          "doc": "Macro that annotates a vararg function that operates like wprintf.\n\nIf we were to annotate `fwprintf`:\n\n```c\nint fwprintf(FILE *f, const wchar_t *fmt, ...) SDL_WPRINTF_VARARG_FUNC(2);\n```\n\nThis notes that the second parameter should be a wprintf-style format wide\nstring, followed by `...`. The compiler or other analysis tools can warn\nwhen this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WPRINTF_VARARG_FUNC",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ]
        },
        "SDL_WPRINTF_VARARG_FUNCV": {
          "doc": "Macro that annotates a va_list function that operates like wprintf.\n\nIf we were to annotate `vfwprintf`:\n\n```c\nint vfwprintf(FILE *f, const wchar_t *fmt, va_list ap) SDL_WPRINTF_VARARG_FUNC(2);\n```\n\nThis notes that the second parameter should be a wprintf-style format wide\nstring, followed by a va_list. The compiler or other analysis tools can\nwarn when this doesn't appear to be the case.\n\nOn compilers without this annotation mechanism, this is defined to nothing.\n\nThis can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which\nbetween them will cover at least Visual Studio, GCC, and Clang.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WPRINTF_VARARG_FUNCV",
          "kind": "def",
          "parameters": [
            "fmtargnumber"
          ]
        },
        "SDL_alignment_test": {
          "doc": "",
          "name": "SDL_alignment_test",
          "kind": "struct",
          "entries": {
            "a": {
              "doc": "",
              "name": "a",
              "kind": "var",
              "type": "Uint8"
            },
            "b": {
              "doc": "",
              "name": "b",
              "kind": "var",
              "type": "void *"
            }
          }
        },
        "SDL_DUMMY_ENUM": {
          "doc": "",
          "name": "SDL_DUMMY_ENUM",
          "kind": "enum"
        },
        "SDL_INIT_INTERFACE": {
          "doc": "A macro to initialize an SDL interface.\n\nThis macro will initialize an SDL interface structure and should be called\nbefore you fill out the fields with your implementation.\n\nYou can use it like this:\n\n```c\nSDL_IOStreamInterface iface;\n\nSDL_INIT_INTERFACE(&iface);\n\n// Fill in the interface function pointers with your implementation\niface.seek = ...\n\nstream = SDL_OpenIO(&iface, NULL);\n```\n\nIf you are using designated initializers, you can use the size of the\ninterface as the version, e.g.\n\n```c\nSDL_IOStreamInterface iface = {\n    .version = sizeof(iface),\n    .seek = ...\n};\nstream = SDL_OpenIO(&iface, NULL);\n```\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_IOStreamInterface\n\\sa SDL_StorageInterface\n\\sa SDL_VirtualJoystickDesc",
          "name": "SDL_INIT_INTERFACE",
          "kind": "def",
          "parameters": [
            "iface"
          ]
        },
        "SDL_stack_alloc": {
          "doc": "Allocate memory on the stack (maybe).\n\nIf SDL knows how to access alloca() on the current platform, it will use it\nto stack-allocate memory here. If it doesn't, it will use SDL_malloc() to\nheap-allocate memory.\n\nSince this might not be stack memory at all, it's important that you check\nthe returned pointer for NULL, and that you call SDL_stack_free on the\nmemory when done with it. Since this might be stack memory, it's important\nthat you don't allocate large amounts of it, or allocate in a loop without\nreturning from the function, so the stack doesn't overflow.\n\n\\param type the datatype of the memory to allocate.\n\\param count the number of `type` objects to allocate.\n\\returns newly-allocated memory, or NULL on failure.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_stack_free",
          "name": "SDL_stack_alloc",
          "kind": "def",
          "parameters": [
            "type",
            "count"
          ]
        },
        "SDL_stack_free": {
          "doc": "Free memory previously allocated with SDL_stack_alloc.\n\nIf SDL used alloca() to allocate this memory, this macro does nothing and\nthe allocated memory will be automatically released when the function that\ncalled SDL_stack_alloc() returns. If SDL used SDL_malloc(), it will\nSDL_free the memory immediately.\n\n\\param data the pointer, from SDL_stack_alloc(), to free.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_stack_alloc",
          "name": "SDL_stack_free",
          "kind": "def",
          "parameters": [
            "data"
          ]
        },
        "SDL_malloc": {
          "doc": "Allocate uninitialized memory.\n\nThe allocated memory returned by this function must be freed with\nSDL_free().\n\nIf `size` is 0, it will be set to 1.\n\nIf you want to allocate memory aligned to a specific alignment, consider\nusing SDL_aligned_alloc().\n\n\\param size the size to allocate.\n\\returns a pointer to the allocated memory, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_calloc\n\\sa SDL_realloc\n\\sa SDL_aligned_alloc",
          "name": "SDL_malloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_calloc": {
          "doc": "Allocate a zero-initialized array.\n\nThe memory returned by this function must be freed with SDL_free().\n\nIf either of `nmemb` or `size` is 0, they will both be set to 1.\n\n\\param nmemb the number of elements in the array.\n\\param size the size of each element of the array.\n\\returns a pointer to the allocated array, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_malloc\n\\sa SDL_realloc",
          "name": "SDL_calloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_realloc": {
          "doc": "Change the size of allocated memory.\n\nThe memory returned by this function must be freed with SDL_free().\n\nIf `size` is 0, it will be set to 1. Note that this is unlike some other C\nruntime `realloc` implementations, which may treat `realloc(mem, 0)` the\nsame way as `free(mem)`.\n\nIf `mem` is NULL, the behavior of this function is equivalent to\nSDL_malloc(). Otherwise, the function can have one of three possible\noutcomes:\n\n- If it returns the same pointer as `mem`, it means that `mem` was resized\n  in place without freeing.\n- If it returns a different non-NULL pointer, it means that `mem` was freed\n  and cannot be dereferenced anymore.\n- If it returns NULL (indicating failure), then `mem` will remain valid and\n  must still be freed with SDL_free().\n\n\\param mem a pointer to allocated memory to reallocate, or NULL.\n\\param size the new size of the memory.\n\\returns a pointer to the newly allocated memory, or NULL if allocation\n         failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_malloc\n\\sa SDL_calloc",
          "name": "SDL_realloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_free": {
          "doc": "Free allocated memory.\n\nThe pointer is no longer valid after this call and cannot be dereferenced\nanymore.\n\nIf `mem` is NULL, this function does nothing.\n\n\\param mem a pointer to allocated memory, or NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_malloc\n\\sa SDL_calloc\n\\sa SDL_realloc",
          "name": "SDL_free",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "SDL_malloc_func": {
          "doc": "A callback used to implement SDL_malloc().\n\nSDL will always ensure that the passed `size` is greater than 0.\n\n\\param size the size to allocate.\n\\returns a pointer to the allocated memory, or NULL if allocation failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_malloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_malloc_func",
          "kind": "callback",
          "type": "void *",
          "parameters": [
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_calloc_func": {
          "doc": "A callback used to implement SDL_calloc().\n\nSDL will always ensure that the passed `nmemb` and `size` are both greater\nthan 0.\n\n\\param nmemb the number of elements in the array.\n\\param size the size of each element of the array.\n\\returns a pointer to the allocated array, or NULL if allocation failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_calloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_calloc_func",
          "kind": "callback",
          "type": "void *",
          "parameters": [
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_realloc_func": {
          "doc": "A callback used to implement SDL_realloc().\n\nSDL will always ensure that the passed `size` is greater than 0.\n\n\\param mem a pointer to allocated memory to reallocate, or NULL.\n\\param size the new size of the memory.\n\\returns a pointer to the newly allocated memory, or NULL if allocation\n         failed.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_realloc\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_realloc_func",
          "kind": "callback",
          "type": "void *",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_free_func": {
          "doc": "A callback used to implement SDL_free().\n\nSDL will always ensure that the passed `mem` is a non-NULL pointer.\n\n\\param mem a pointer to allocated memory.\n\n\\threadsafety It should be safe to call this callback from any thread.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_free\n\\sa SDL_GetOriginalMemoryFunctions\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_SetMemoryFunctions",
          "name": "SDL_free_func",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "SDL_GetOriginalMemoryFunctions": {
          "doc": "Get the original set of SDL memory functions.\n\nThis is what SDL_malloc and friends will use by default, if there has been\nno call to SDL_SetMemoryFunctions. This is not necessarily using the C\nruntime's `malloc` functions behind the scenes! Different platforms and\nbuild configurations might do any number of unexpected things.\n\n\\param malloc_func filled with malloc function.\n\\param calloc_func filled with calloc function.\n\\param realloc_func filled with realloc function.\n\\param free_func filled with free function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetOriginalMemoryFunctions",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "SDL_malloc_func *"
            },
            {
              "name": "calloc_func",
              "type": "SDL_calloc_func *"
            },
            {
              "name": "realloc_func",
              "type": "SDL_realloc_func *"
            },
            {
              "name": "free_func",
              "type": "SDL_free_func *"
            }
          ]
        },
        "SDL_GetMemoryFunctions": {
          "doc": "Get the current set of SDL memory functions.\n\n\\param malloc_func filled with malloc function.\n\\param calloc_func filled with calloc function.\n\\param realloc_func filled with realloc function.\n\\param free_func filled with free function.\n\n\\threadsafety This does not hold a lock, so do not call this in the\n              unlikely event of a background thread calling\n              SDL_SetMemoryFunctions simultaneously.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetMemoryFunctions\n\\sa SDL_GetOriginalMemoryFunctions",
          "name": "SDL_GetMemoryFunctions",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "SDL_malloc_func *"
            },
            {
              "name": "calloc_func",
              "type": "SDL_calloc_func *"
            },
            {
              "name": "realloc_func",
              "type": "SDL_realloc_func *"
            },
            {
              "name": "free_func",
              "type": "SDL_free_func *"
            }
          ]
        },
        "SDL_SetMemoryFunctions": {
          "doc": "Replace SDL's memory allocation functions with a custom set.\n\nIt is not safe to call this function once any allocations have been made,\nas future calls to SDL_free will use the new allocator, even if they came\nfrom an SDL_malloc made with the old one!\n\nIf used, usually this needs to be the first call made into the SDL library,\nif not the very first thing done at program startup time.\n\n\\param malloc_func custom malloc function.\n\\param calloc_func custom calloc function.\n\\param realloc_func custom realloc function.\n\\param free_func custom free function.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, but one\n              should not replace the memory functions once any allocations\n              are made!\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMemoryFunctions\n\\sa SDL_GetOriginalMemoryFunctions",
          "name": "SDL_SetMemoryFunctions",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "malloc_func",
              "type": "SDL_malloc_func"
            },
            {
              "name": "calloc_func",
              "type": "SDL_calloc_func"
            },
            {
              "name": "realloc_func",
              "type": "SDL_realloc_func"
            },
            {
              "name": "free_func",
              "type": "SDL_free_func"
            }
          ]
        },
        "SDL_aligned_alloc": {
          "doc": "Allocate memory aligned to a specific alignment.\n\nThe memory returned by this function must be freed with SDL_aligned_free(),\n_not_ SDL_free().\n\nIf `alignment` is less than the size of `void *`, it will be increased to\nmatch that.\n\nThe returned memory address will be a multiple of the alignment value, and\nthe size of the memory allocated will be a multiple of the alignment value.\n\n\\param alignment the alignment of the memory.\n\\param size the size to allocate.\n\\returns a pointer to the aligned memory, or NULL if allocation failed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_free",
          "name": "SDL_aligned_alloc",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "alignment",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            }
          ]
        },
        "SDL_aligned_free": {
          "doc": "Free memory allocated by SDL_aligned_alloc().\n\nThe pointer is no longer valid after this call and cannot be dereferenced\nanymore.\n\nIf `mem` is NULL, this function does nothing.\n\n\\param mem a pointer previously returned by SDL_aligned_alloc(), or NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_aligned_alloc",
          "name": "SDL_aligned_free",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "mem",
              "type": "void *"
            }
          ]
        },
        "SDL_GetNumAllocations": {
          "doc": "Get the number of outstanding (unfreed) allocations.\n\n\\returns the number of allocations or -1 if allocation counting is\n         disabled.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetNumAllocations",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_Environment": {
          "doc": "A thread-safe set of environment variables\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable\n\\sa SDL_DestroyEnvironment",
          "name": "SDL_Environment",
          "kind": "alias",
          "type": "struct SDL_Environment"
        },
        "SDL_GetEnvironment": {
          "doc": "Get the process environment.\n\nThis is initialized at application start and is not affected by setenv()\nand unsetenv() calls after that point. Use SDL_SetEnvironmentVariable() and\nSDL_UnsetEnvironmentVariable() if you want to modify this environment, or\nSDL_setenv_unsafe() or SDL_unsetenv_unsafe() if you want changes to persist\nin the C runtime environment after SDL_Quit().\n\n\\returns a pointer to the environment for the process or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_GetEnvironment",
          "kind": "function",
          "type": "SDL_Environment *",
          "parameters": []
        },
        "SDL_CreateEnvironment": {
          "doc": "Create a set of environment variables\n\n\\param populated true to initialize it from the C runtime environment,\n                 false to create an empty environment.\n\\returns a pointer to the new environment or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety If `populated` is false, it is safe to call this function\n              from any thread, otherwise it is safe if no other threads are\n              calling setenv() or unsetenv()\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable\n\\sa SDL_DestroyEnvironment",
          "name": "SDL_CreateEnvironment",
          "kind": "function",
          "type": "SDL_Environment *",
          "parameters": [
            {
              "name": "populated",
              "type": "bool"
            }
          ]
        },
        "SDL_GetEnvironmentVariable": {
          "doc": "Get the value of a variable in the environment.\n\n\\param env the environment to query.\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_GetEnvironmentVariable",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetEnvironmentVariables": {
          "doc": "Get all variables in the environment.\n\n\\param env the environment to query.\n\\returns a NULL terminated array of pointers to environment variables in\n         the form \"variable=value\" or NULL on failure; call SDL_GetError()\n         for more information. This is a single allocation that should be\n         freed with SDL_free() when it is no longer needed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_GetEnvironmentVariables",
          "kind": "function",
          "type": "char **",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            }
          ]
        },
        "SDL_SetEnvironmentVariable": {
          "doc": "Set the value of a variable in the environment.\n\n\\param env the environment to modify.\n\\param name the name of the variable to set.\n\\param value the value of the variable to set.\n\\param overwrite true to overwrite the variable if it exists, false to\n                 return success without setting the variable if it already\n                 exists.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_SetEnvironmentVariable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            },
            {
              "name": "overwrite",
              "type": "bool"
            }
          ]
        },
        "SDL_UnsetEnvironmentVariable": {
          "doc": "Clear a variable from the environment.\n\n\\param env the environment to modify.\n\\param name the name of the variable to unset.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetEnvironment\n\\sa SDL_CreateEnvironment\n\\sa SDL_GetEnvironmentVariable\n\\sa SDL_GetEnvironmentVariables\n\\sa SDL_SetEnvironmentVariable\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_UnsetEnvironmentVariable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_DestroyEnvironment": {
          "doc": "Destroy a set of environment variables.\n\n\\param env the environment to destroy.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the environment is no longer in use.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateEnvironment",
          "name": "SDL_DestroyEnvironment",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "env",
              "type": "SDL_Environment *"
            }
          ]
        },
        "SDL_getenv": {
          "doc": "Get the value of a variable in the environment.\n\nThis function uses SDL's cached copy of the environment and is thread-safe.\n\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_getenv",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_getenv_unsafe": {
          "doc": "Get the value of a variable in the environment.\n\nThis function bypasses SDL's cached copy of the environment and is not\nthread-safe.\n\n\\param name the name of the variable to get.\n\\returns a pointer to the value of the variable or NULL if it can't be\n         found.\n\n\\threadsafety This function is not thread safe, consider using SDL_getenv()\n              instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_getenv",
          "name": "SDL_getenv_unsafe",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_setenv_unsafe": {
          "doc": "Set the value of a variable in the environment.\n\n\\param name the name of the variable to set.\n\\param value the value of the variable to set.\n\\param overwrite 1 to overwrite the variable if it exists, 0 to return\n                 success without setting the variable if it already exists.\n\\returns 0 on success, -1 on error.\n\n\\threadsafety This function is not thread safe, consider using\n              SDL_SetEnvironmentVariable() instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetEnvironmentVariable",
          "name": "SDL_setenv_unsafe",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            },
            {
              "name": "overwrite",
              "type": "int"
            }
          ]
        },
        "SDL_unsetenv_unsafe": {
          "doc": "Clear a variable from the environment.\n\n\\param name the name of the variable to unset.\n\\returns 0 on success, -1 on error.\n\n\\threadsafety This function is not thread safe, consider using\n              SDL_UnsetEnvironmentVariable() instead.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UnsetEnvironmentVariable",
          "name": "SDL_unsetenv_unsafe",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_CompareCallback": {
          "doc": "A callback used with SDL sorting and binary search functions.\n\n\\param a a pointer to the first element being compared.\n\\param b a pointer to the second element being compared.\n\\returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted\n         before `a`, 0 if they are equal. If two elements are equal, their\n         order in the sorted array is undefined.\n\n\\since This callback is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort",
          "name": "SDL_CompareCallback",
          "kind": "callback",
          "type": "int",
          "parameters": [
            {
              "name": "a",
              "type": "const void *"
            },
            {
              "name": "b",
              "type": "const void *"
            }
          ]
        },
        "SDL_qsort": {
          "doc": "Sort an array.\n\nFor example:\n\n```c\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort_r",
          "name": "SDL_qsort",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "base",
              "type": "void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback"
            }
          ]
        },
        "SDL_bsearch": {
          "doc": "Perform a binary search on a previously sorted array.\n\nFor example:\n\n```c\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch(&key, values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n\\param key a pointer to a key equal to the element being searched for.\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\returns a pointer to the matching element in the array, or NULL if not\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch_r\n\\sa SDL_qsort",
          "name": "SDL_bsearch",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "key",
              "type": "const void *"
            },
            {
              "name": "base",
              "type": "const void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback"
            }
          ]
        },
        "SDL_CompareCallback_r": {
          "doc": "A callback used with SDL sorting and binary search functions.\n\n\\param userdata the `userdata` pointer passed to the sort function.\n\\param a a pointer to the first element being compared.\n\\param b a pointer to the second element being compared.\n\\returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted\n         before `a`, 0 if they are equal. If two elements are equal, their\n         order in the sorted array is undefined.\n\n\\since This callback is available since SDL 3.2.0.\n\n\\sa SDL_qsort_r\n\\sa SDL_bsearch_r",
          "name": "SDL_CompareCallback_r",
          "kind": "callback",
          "type": "int",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "a",
              "type": "const void *"
            },
            {
              "name": "b",
              "type": "const void *"
            }
          ]
        },
        "SDL_qsort_r": {
          "doc": "Sort an array, passing a userdata pointer to the compare function.\n\nFor example:\n\n```c\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\param userdata a pointer to pass to the compare function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch_r\n\\sa SDL_qsort",
          "name": "SDL_qsort_r",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "base",
              "type": "void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback_r"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_bsearch_r": {
          "doc": "Perform a binary search on a previously sorted array, passing a userdata\npointer to the compare function.\n\nFor example:\n\n```c\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch_r(&key, values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n\\param key a pointer to a key equal to the element being searched for.\n\\param base a pointer to the start of the array.\n\\param nmemb the number of elements in the array.\n\\param size the size of the elements in the array.\n\\param compare a function used to compare elements in the array.\n\\param userdata a pointer to pass to the compare function.\n\\returns a pointer to the matching element in the array, or NULL if not\n         found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_bsearch\n\\sa SDL_qsort_r",
          "name": "SDL_bsearch_r",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "key",
              "type": "const void *"
            },
            {
              "name": "base",
              "type": "const void *"
            },
            {
              "name": "nmemb",
              "type": "size_t"
            },
            {
              "name": "size",
              "type": "size_t"
            },
            {
              "name": "compare",
              "type": "SDL_CompareCallback_r"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_abs": {
          "doc": "Compute the absolute value of `x`.\n\n\\param x an integer value.\n\\returns the absolute value of x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_abs",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_min": {
          "doc": "Return the lesser of two values.\n\nThis is a helper macro that might be more clear than writing out the\ncomparisons directly, and works with any type that can be compared with the\n`<` operator. However, it double-evaluates both its parameters, so do not\nuse expressions with side-effects here.\n\n\\param x the first value to compare.\n\\param y the second value to compare.\n\\returns the lesser of `x` and `y`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_min",
          "kind": "def",
          "parameters": [
            "x",
            "y"
          ]
        },
        "SDL_max": {
          "doc": "Return the greater of two values.\n\nThis is a helper macro that might be more clear than writing out the\ncomparisons directly, and works with any type that can be compared with the\n`>` operator. However, it double-evaluates both its parameters, so do not\nuse expressions with side-effects here.\n\n\\param x the first value to compare.\n\\param y the second value to compare.\n\\returns the lesser of `x` and `y`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_max",
          "kind": "def",
          "parameters": [
            "x",
            "y"
          ]
        },
        "SDL_clamp": {
          "doc": "Return a value clamped to a range.\n\nIf `x` is outside the range a values between `a` and `b`, the returned\nvalue will be `a` or `b` as appropriate. Otherwise, `x` is returned.\n\nThis macro will produce incorrect results if `b` is less than `a`.\n\nThis is a helper macro that might be more clear than writing out the\ncomparisons directly, and works with any type that can be compared with the\n`<` and `>` operators. However, it double-evaluates all its parameters, so\ndo not use expressions with side-effects here.\n\n\\param x the value to compare.\n\\param a the low end value.\n\\param b the high end value.\n\\returns x, clamped between a and b.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_clamp",
          "kind": "def",
          "parameters": [
            "x",
            "a",
            "b"
          ]
        },
        "SDL_isalpha": {
          "doc": "Query if a character is alphabetic (a letter).\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\nfor English 'a-z' and 'A-Z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isalpha",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isalnum": {
          "doc": "Query if a character is alphabetic (a letter) or a number.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\nfor English 'a-z', 'A-Z', and '0-9' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isalnum",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isblank": {
          "doc": "Report if a character is blank (a space or tab).\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n0x20 (space) or 0x9 (tab) as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isblank",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_iscntrl": {
          "doc": "Report if a character is a control character.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n0 through 0x1F, and 0x7F, as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_iscntrl",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isdigit": {
          "doc": "Report if a character is a numeric digit.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'0' (0x30) through '9' (0x39), as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isdigit",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isxdigit": {
          "doc": "Report if a character is a hexadecimal digit.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'A' through 'F', 'a' through 'f', and '0' through '9', as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isxdigit",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_ispunct": {
          "doc": "Report if a character is a punctuation mark.\n\n**WARNING**: Regardless of system locale, this is equivalent to\n`((SDL_isgraph(x)) && (!SDL_isalnum(x)))`.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isgraph\n\\sa SDL_isalnum",
          "name": "SDL_ispunct",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isspace": {
          "doc": "Report if a character is whitespace.\n\n**WARNING**: Regardless of system locale, this will only treat the\nfollowing ASCII values as true:\n\n- space (0x20)\n- tab (0x09)\n- newline (0x0A)\n- vertical tab (0x0B)\n- form feed (0x0C)\n- return (0x0D)\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isspace",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isupper": {
          "doc": "Report if a character is upper case.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'A' through 'Z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isupper",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_islower": {
          "doc": "Report if a character is lower case.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n'a' through 'z' as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_islower",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isprint": {
          "doc": "Report if a character is \"printable\".\n\nBe advised that \"printable\" has a definition that goes back to text\nterminals from the dawn of computing, making this a sort of special case\nfunction that is not suitable for Unicode (or most any) text management.\n\n**WARNING**: Regardless of system locale, this will only treat ASCII values\n' ' (0x20) through '~' (0x7E) as true.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_isprint",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_isgraph": {
          "doc": "Report if a character is any \"printable\" except space.\n\nBe advised that \"printable\" has a definition that goes back to text\nterminals from the dawn of computing, making this a sort of special case\nfunction that is not suitable for Unicode (or most any) text management.\n\n**WARNING**: Regardless of system locale, this is equivalent to\n`(SDL_isprint(x)) && ((x) != ' ')`.\n\n\\param x character value to check.\n\\returns non-zero if x falls within the character class, zero otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isprint",
          "name": "SDL_isgraph",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_toupper": {
          "doc": "Convert low-ASCII English letters to uppercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'a' through 'z' to uppercase.\n\nThis function returns the uppercase equivalent of `x`. If a character\ncannot be converted, or is already uppercase, this function returns `x`.\n\n\\param x character value to check.\n\\returns capitalized version of x, or x if no conversion available.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_toupper",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_tolower": {
          "doc": "Convert low-ASCII English letters to lowercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to lowercase.\n\nThis function returns the lowercase equivalent of `x`. If a character\ncannot be converted, or is already lowercase, this function returns `x`.\n\n\\param x character value to check.\n\\returns lowercase version of x, or x if no conversion available.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_tolower",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "int"
            }
          ]
        },
        "SDL_crc16": {
          "doc": "Calculate a CRC-16 value.\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check\n\nThis function can be called multiple times, to stream data to be\nchecksummed in blocks. Each call must provide the previous CRC-16 return\nvalue to be updated with the next block. The first call to this function\nfor a set of blocks should pass in a zero CRC value.\n\n\\param crc the current checksum for this data set, or 0 for a new data set.\n\\param data a new block of data to add to the checksum.\n\\param len the size, in bytes, of the new block of data.\n\\returns a CRC-16 checksum value of all blocks in the data set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_crc16",
          "kind": "function",
          "type": "Uint16",
          "parameters": [
            {
              "name": "crc",
              "type": "Uint16"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_crc32": {
          "doc": "Calculate a CRC-32 value.\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check\n\nThis function can be called multiple times, to stream data to be\nchecksummed in blocks. Each call must provide the previous CRC-32 return\nvalue to be updated with the next block. The first call to this function\nfor a set of blocks should pass in a zero CRC value.\n\n\\param crc the current checksum for this data set, or 0 for a new data set.\n\\param data a new block of data to add to the checksum.\n\\param len the size, in bytes, of the new block of data.\n\\returns a CRC-32 checksum value of all blocks in the data set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_crc32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "crc",
              "type": "Uint32"
            },
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_murmur3_32": {
          "doc": "Calculate a 32-bit MurmurHash3 value for a block of data.\n\nhttps://en.wikipedia.org/wiki/MurmurHash\n\nA seed may be specified, which changes the final results consistently, but\nthis does not work like SDL_crc16 and SDL_crc32: you can't feed a previous\nresult from this function back into itself as the next seed value to\ncalculate a hash in chunks; it won't produce the same hash as it would if\nthe same data was provided in a single call.\n\nIf you aren't sure what to provide for a seed, zero is fine. Murmur3 is not\ncryptographically secure, so it shouldn't be used for hashing top-secret\ndata.\n\n\\param data the data to be hashed.\n\\param len the size of data, in bytes.\n\\param seed a value that alters the final hash value.\n\\returns a Murmur3 32-bit hash value.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_murmur3_32",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "data",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            },
            {
              "name": "seed",
              "type": "Uint32"
            }
          ]
        },
        "SDL_memcpy": {
          "doc": "Copy non-overlapping memory.\n\nThe memory regions must not overlap. If they do, use SDL_memmove() instead.\n\n\\param dst The destination memory region. Must not be NULL, and must not\n           overlap with `src`.\n\\param src The source memory region. Must not be NULL, and must not overlap\n           with `dst`.\n\\param len The length in bytes of both `dst` and `src`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_memmove",
          "name": "SDL_memcpy",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_copyp": {
          "doc": "A macro to copy memory between objects, with basic type checking.\n\nSDL_memcpy and SDL_memmove do not care where you copy memory to and from,\nwhich can lead to bugs. This macro aims to avoid most of those bugs by\nmaking sure that the source and destination are both pointers to objects\nthat are the same size. It does not check that the objects are the same\n_type_, just that the copy will not overflow either object.\n\nThe size check happens at compile time, and the compiler will throw an\nerror if the objects are different sizes.\n\nGenerally this is intended to copy a single object, not an array.\n\nThis macro looks like it double-evaluates its parameters, but the extras\nthem are in `sizeof` sections, which generate no code nor side-effects.\n\n\\param dst a pointer to the destination object. Must not be NULL.\n\\param src a pointer to the source object. Must not be NULL.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_copyp",
          "kind": "def",
          "parameters": [
            "dst",
            "src"
          ]
        },
        "SDL_memmove": {
          "doc": "Copy memory ranges that might overlap.\n\nIt is okay for the memory regions to overlap. If you are confident that the\nregions never overlap, using SDL_memcpy() may improve performance.\n\n\\param dst The destination memory region. Must not be NULL.\n\\param src The source memory region. Must not be NULL.\n\\param len The length in bytes of both `dst` and `src`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_memcpy",
          "name": "SDL_memmove",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_memset": {
          "doc": "Initialize all bytes of buffer of memory to a specific value.\n\nThis function will set `len` bytes, pointed to by `dst`, to the value\nspecified in `c`.\n\nDespite `c` being an `int` instead of a `char`, this only operates on\nbytes; `c` must be a value between 0 and 255, inclusive.\n\n\\param dst the destination memory region. Must not be NULL.\n\\param c the byte value to set.\n\\param len the length, in bytes, to set in `dst`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_memset",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "c",
              "type": "int"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_memset4": {
          "doc": "Initialize all 32-bit words of buffer of memory to a specific value.\n\nThis function will set a buffer of `dwords` Uint32 values, pointed to by\n`dst`, to the value specified in `val`.\n\nUnlike SDL_memset, this sets 32-bit values, not bytes, so it's not limited\nto a range of 0-255.\n\n\\param dst the destination memory region. Must not be NULL.\n\\param val the Uint32 value to set.\n\\param dwords the number of Uint32 values to set in `dst`.\n\\returns `dst`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_memset4",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "val",
              "type": "Uint32"
            },
            {
              "name": "dwords",
              "type": "size_t"
            }
          ]
        },
        "SDL_zero": {
          "doc": "Clear an object's memory to zero.\n\nThis is wrapper over SDL_memset that handles calculating the object size,\nso there's no chance of copy/paste errors, and the code is cleaner.\n\nThis requires an object, not a pointer to an object, nor an array.\n\n\\param x the object to clear.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_zerop\n\\sa SDL_zeroa",
          "name": "SDL_zero",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_zerop": {
          "doc": "Clear an object's memory to zero, using a pointer.\n\nThis is wrapper over SDL_memset that handles calculating the object size,\nso there's no chance of copy/paste errors, and the code is cleaner.\n\nThis requires a pointer to an object, not an object itself, nor an array.\n\n\\param x a pointer to the object to clear.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_zero\n\\sa SDL_zeroa",
          "name": "SDL_zerop",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_zeroa": {
          "doc": "Clear an array's memory to zero.\n\nThis is wrapper over SDL_memset that handles calculating the array size, so\nthere's no chance of copy/paste errors, and the code is cleaner.\n\nThis requires an array, not an object, nor a pointer to an object.\n\n\\param x an array to clear.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_zero\n\\sa SDL_zeroa",
          "name": "SDL_zeroa",
          "kind": "def",
          "parameters": [
            "x"
          ]
        },
        "SDL_memcmp": {
          "doc": "Compare two buffers of memory.\n\n\\param s1 the first buffer to compare. NULL is not permitted!\n\\param s2 the second buffer to compare. NULL is not permitted!\n\\param len the number of bytes to compare between the buffers.\n\\returns less than zero if s1 is \"less than\" s2, greater than zero if s1 is\n         \"greater than\" s2, and zero if the buffers match exactly for `len`\n         bytes.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_memcmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "s1",
              "type": "const void *"
            },
            {
              "name": "s2",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcslen": {
          "doc": "This works exactly like wcslen() but doesn't require access to a C runtime.\n\nCounts the number of wchar_t values in `wstr`, excluding the null\nterminator.\n\nLike SDL_strlen only counts bytes and not codepoints in a UTF-8 string,\nthis counts wchar_t values in a string, even if the string's encoding is of\nvariable width, like UTF-16.\n\nAlso be aware that wchar_t is different sizes on different platforms (4\nbytes on Linux, 2 on Windows, etc).\n\n\\param wstr The null-terminated wide string to read. Must not be NULL.\n\\returns the length (in wchar_t values, excluding the null terminator) of\n         `wstr`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcsnlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_wcslen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsnlen": {
          "doc": "This works exactly like wcsnlen() but doesn't require access to a C\nruntime.\n\nCounts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the\nnull terminator.\n\nLike SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,\nthis counts wchar_t values in a string, even if the string's encoding is of\nvariable width, like UTF-16.\n\nAlso be aware that wchar_t is different sizes on different platforms (4\nbytes on Linux, 2 on Windows, etc).\n\nAlso, `maxlen` is a count of wide characters, not bytes!\n\n\\param wstr The null-terminated wide string to read. Must not be NULL.\n\\param maxlen The maximum amount of wide characters to count.\n\\returns the length (in wide characters, excluding the null terminator) of\n         `wstr` but never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_wcsnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcslcpy": {
          "doc": "Copy a wide string.\n\nThis function copies `maxlen` - 1 wide characters from `src` to `dst`, then\nappends a null terminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` is 0, no wide characters are copied and no null terminator is\nwritten.\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated wide string to copy. Must not be NULL, and\n           must not overlap with `dst`.\n\\param maxlen The length (in wide characters) of the destination buffer.\n\\returns the length (in wide characters, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslcat",
          "name": "SDL_wcslcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "wchar_t *"
            },
            {
              "name": "src",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcslcat": {
          "doc": "Concatenate wide strings.\n\nThis function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters\nfrom `src` to the end of the wide string in `dst`, then appends a null\nterminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is\nunmodified.\n\n\\param dst The destination buffer already containing the first\n           null-terminated wide string. Must not be NULL and must not\n           overlap with `src`.\n\\param src The second null-terminated wide string. Must not be NULL, and\n           must not overlap with `dst`.\n\\param maxlen The length (in wide characters) of the destination buffer.\n\\returns the length (in wide characters, excluding the null terminator) of\n         the string in `dst` plus the length of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_wcslcpy",
          "name": "SDL_wcslcat",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "wchar_t *"
            },
            {
              "name": "src",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcsdup": {
          "doc": "Allocate a copy of a wide string.\n\nThis allocates enough space for a null-terminated copy of `wstr`, using\nSDL_malloc, and then makes a copy of the string into this space.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param wstr the string to copy.\n\\returns a pointer to the newly-allocated wide string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsdup",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "wstr",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsstr": {
          "doc": "Search a wide string for the first instance of a specific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string.\n\nNote that this looks for strings of _wide characters_, not _codepoints_, so\nit's legal to search for malformed and incomplete UTF-16 sequences.\n\n\\param haystack the wide string to search. Must not be NULL.\n\\param needle the wide string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsstr",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const wchar_t *"
            },
            {
              "name": "needle",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsnstr": {
          "doc": "Search a wide string, up to n wide chars, for the first instance of a\nspecific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nvalue to end the string, or `maxlen` wide character have been examined. It\nis possible to use this function on a wide string without a null\nterminator.\n\nNote that this looks for strings of _wide characters_, not _codepoints_, so\nit's legal to search for malformed and incomplete UTF-16 sequences.\n\n\\param haystack the wide string to search. Must not be NULL.\n\\param needle the wide string to search for. Must not be NULL.\n\\param maxlen the maximum number of wide characters to search in\n              `haystack`.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsnstr",
          "kind": "function",
          "type": "wchar_t *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const wchar_t *"
            },
            {
              "name": "needle",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcscmp": {
          "doc": "Compare two null-terminated wide strings.\n\nThis only compares wchar_t values until it hits a null-terminating\ncharacter; it does not care if the string is well-formed UTF-16 (or UTF-32,\ndepending on your platform's wchar_t size), or uses valid Unicode values.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcscmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsncmp": {
          "doc": "Compare two wide strings up to a number of wchar_t values.\n\nThis only compares wchar_t values; it does not care if the string is\nwell-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),\nor uses valid Unicode values.\n\nNote that while this function is intended to be used with UTF-16 (or\nUTF-32, depending on your platform's definition of wchar_t), it is\ncomparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies\na wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16\nsequence, it will only compare a portion of the final character.\n\n`maxlen` specifies a maximum number of wchar_t to compare; if the strings\nmatch to this number of wide chars (or both have matched to a\nnull-terminator character before this count), they will be considered\nequal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of wchar_t to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsncmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcscasecmp": {
          "doc": "Compare two null-terminated wide strings, case-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nDepending on your platform, \"wchar_t\" might be 2 bytes, and expected to be\nUTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\nhandles Unicode, it expects the string to be well-formed and not a\nnull-terminated string of arbitrary bytes. Characters that are not valid\nUTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcscasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            }
          ]
        },
        "SDL_wcsncasecmp": {
          "doc": "Compare two wide strings, case-insensitively, up to a number of wchar_t.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nDepending on your platform, \"wchar_t\" might be 2 bytes, and expected to be\nUTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\nhandles Unicode, it expects the string to be well-formed and not a\nnull-terminated string of arbitrary bytes. Characters that are not valid\nUTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\nNote that while this function might deal with variable-sized characters,\n`maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a\nmulti-byte UTF-16 sequence, it may convert a portion of the final character\nto one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not\nto overflow a buffer.\n\n`maxlen` specifies a maximum number of wchar_t values to compare; if the\nstrings match to this number of wchar_t (or both have matched to a\nnull-terminator character before this number of bytes), they will be\nconsidered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of wchar_t values to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_wcsncasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const wchar_t *"
            },
            {
              "name": "str2",
              "type": "const wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_wcstol": {
          "doc": "Parse a `long` from a wide string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long`, the result is clamped to\nthe minimum and maximum representable `long` values.\n\n\\param str The null-terminated wide string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid wide character\n            (i.e. the next character after the parsed number) will be\n            written to this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strtol",
          "name": "SDL_wcstol",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "str",
              "type": "const wchar_t *"
            },
            {
              "name": "endp",
              "type": "wchar_t **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strlen": {
          "doc": "This works exactly like strlen() but doesn't require access to a C runtime.\n\nCounts the bytes in `str`, excluding the null terminator.\n\nIf you need the length of a UTF-8 string, consider using SDL_utf8strlen().\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the length (in bytes, excluding the null terminator) of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strnlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_strlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_strnlen": {
          "doc": "This works exactly like strnlen() but doesn't require access to a C\nruntime.\n\nCounts up to a maximum of `maxlen` bytes in `str`, excluding the null\nterminator.\n\nIf you need the length of a UTF-8 string, consider using SDL_utf8strnlen().\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param maxlen The maximum amount of bytes to count.\n\\returns the length (in bytes, excluding the null terminator) of `src` but\n         never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlen\n\\sa SDL_utf8strlen\n\\sa SDL_utf8strnlen",
          "name": "SDL_strnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strlcpy": {
          "doc": "Copy a string.\n\nThis function copies up to `maxlen` - 1 characters from `src` to `dst`,\nthen appends a null terminator.\n\nIf `maxlen` is 0, no characters are copied and no null terminator is\nwritten.\n\nIf you want to copy an UTF-8 string but need to ensure that multi-byte\nsequences are not truncated, consider using SDL_utf8strlcpy().\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated string to copy. Must not be NULL, and must\n           not overlap with `dst`.\n\\param maxlen The length (in characters) of the destination buffer.\n\\returns the length (in characters, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcat\n\\sa SDL_utf8strlcpy",
          "name": "SDL_strlcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_utf8strlcpy": {
          "doc": "Copy an UTF-8 string.\n\nThis function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while\nalso ensuring that the string written to `dst` does not end in a truncated\nmulti-byte sequence. Finally, it appends a null terminator.\n\n`src` and `dst` must not overlap.\n\nNote that unlike SDL_strlcpy(), this function returns the number of bytes\nwritten, not the length of `src`.\n\n\\param dst The destination buffer. Must not be NULL, and must not overlap\n           with `src`.\n\\param src The null-terminated UTF-8 string to copy. Must not be NULL, and\n           must not overlap with `dst`.\n\\param dst_bytes The length (in bytes) of the destination buffer. Must not\n                 be 0.\n\\returns the number of bytes written, excluding the null terminator.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcpy",
          "name": "SDL_utf8strlcpy",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "const char *"
            },
            {
              "name": "dst_bytes",
              "type": "size_t"
            }
          ]
        },
        "SDL_strlcat": {
          "doc": "Concatenate strings.\n\nThis function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from\n`src` to the end of the string in `dst`, then appends a null terminator.\n\n`src` and `dst` must not overlap.\n\nIf `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is\nunmodified.\n\n\\param dst The destination buffer already containing the first\n           null-terminated string. Must not be NULL and must not overlap\n           with `src`.\n\\param src The second null-terminated string. Must not be NULL, and must\n           not overlap with `dst`.\n\\param maxlen The length (in characters) of the destination buffer.\n\\returns the length (in characters, excluding the null terminator) of the\n         string in `dst` plus the length of `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlcpy",
          "name": "SDL_strlcat",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "dst",
              "type": "char *"
            },
            {
              "name": "src",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strdup": {
          "doc": "Allocate a copy of a string.\n\nThis allocates enough space for a null-terminated copy of `str`, using\nSDL_malloc, and then makes a copy of the string into this space.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param str the string to copy.\n\\returns a pointer to the newly-allocated string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strdup",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_strndup": {
          "doc": "Allocate a copy of a string, up to n characters.\n\nThis allocates enough space for a null-terminated copy of `str`, up to\n`maxlen` bytes, using SDL_malloc, and then makes a copy of the string into\nthis space.\n\nIf the string is longer than `maxlen` bytes, the returned string will be\n`maxlen` bytes long, plus a null-terminator character that isn't included\nin the count.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param str the string to copy.\n\\param maxlen the maximum length of the copied string, not counting the\n              null-terminator character.\n\\returns a pointer to the newly-allocated string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strndup",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strrev": {
          "doc": "Reverse a string's contents.\n\nThis reverses a null-terminated string in-place. Only the content of the\nstring is reversed; the null-terminator character remains at the end of the\nreversed string.\n\n**WARNING**: This function reverses the _bytes_ of the string, not the\ncodepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this\nwill ruin the string data. You should only use this function on strings\nthat are completely comprised of low ASCII characters.\n\n\\param str the string to reverse.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strrev",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "SDL_strupr": {
          "doc": "Convert a string to uppercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to uppercase.\n\nThis function operates on a null-terminated string of bytes--even if it is\nmalformed UTF-8!--and converts ASCII characters 'a' through 'z' to their\nuppercase equivalents in-place, returning the original `str` pointer.\n\n\\param str the string to convert in-place. Can not be NULL.\n\\returns the `str` pointer passed into this function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strlwr",
          "name": "SDL_strupr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "SDL_strlwr": {
          "doc": "Convert a string to lowercase.\n\n**WARNING**: Regardless of system locale, this will only convert ASCII\nvalues 'A' through 'Z' to lowercase.\n\nThis function operates on a null-terminated string of bytes--even if it is\nmalformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their\nlowercase equivalents in-place, returning the original `str` pointer.\n\n\\param str the string to convert in-place. Can not be NULL.\n\\returns the `str` pointer passed into this function.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_strupr",
          "name": "SDL_strlwr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            }
          ]
        },
        "SDL_strchr": {
          "doc": "Search a string for the first instance of a specific byte.\n\nThe search ends once it finds the requested byte value, or a null\nterminator byte to end the string.\n\nNote that this looks for _bytes_, not _characters_, so you cannot match\nagainst a Unicode codepoint > 255, regardless of character encoding.\n\n\\param str the string to search. Must not be NULL.\n\\param c the byte value to search for.\n\\returns a pointer to the first instance of `c` in the string, or NULL if\n         not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strchr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "c",
              "type": "int"
            }
          ]
        },
        "SDL_strrchr": {
          "doc": "Search a string for the last instance of a specific byte.\n\nThe search must go until it finds a null terminator byte to end the string.\n\nNote that this looks for _bytes_, not _characters_, so you cannot match\nagainst a Unicode codepoint > 255, regardless of character encoding.\n\n\\param str the string to search. Must not be NULL.\n\\param c the byte value to search for.\n\\returns a pointer to the last instance of `c` in the string, or NULL if\n         not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strrchr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "c",
              "type": "int"
            }
          ]
        },
        "SDL_strstr": {
          "doc": "Search a string for the first instance of a specific substring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string.\n\nNote that this looks for strings of _bytes_, not _characters_, so it's\nlegal to search for malformed and incomplete UTF-8 sequences.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strstr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const char *"
            },
            {
              "name": "needle",
              "type": "const char *"
            }
          ]
        },
        "SDL_strnstr": {
          "doc": "Search a string, up to n bytes, for the first instance of a specific\nsubstring.\n\nThe search ends once it finds the requested substring, or a null terminator\nbyte to end the string, or `maxlen` bytes have been examined. It is\npossible to use this function on a string without a null terminator.\n\nNote that this looks for strings of _bytes_, not _characters_, so it's\nlegal to search for malformed and incomplete UTF-8 sequences.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\param maxlen the maximum number of bytes to search in `haystack`.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strnstr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const char *"
            },
            {
              "name": "needle",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strcasestr": {
          "doc": "Search a UTF-8 string for the first instance of a specific substring,\ncase-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param haystack the string to search. Must not be NULL.\n\\param needle the string to search for. Must not be NULL.\n\\returns a pointer to the first instance of `needle` in the string, or NULL\n         if not found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strcasestr",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "haystack",
              "type": "const char *"
            },
            {
              "name": "needle",
              "type": "const char *"
            }
          ]
        },
        "SDL_strtok_r": {
          "doc": "This works exactly like strtok_r() but doesn't require access to a C\nruntime.\n\nBreak a string up into a series of tokens.\n\nTo start tokenizing a new string, `str` should be the non-NULL address of\nthe string to start tokenizing. Future calls to get the next token from the\nsame string should specify a NULL.\n\nNote that this function will overwrite pieces of `str` with null chars to\nsplit it into tokens. This function cannot be used with const/read-only\nstrings!\n\n`saveptr` just needs to point to a `char *` that can be overwritten; SDL\nwill use this to save tokenizing state between calls. It is initialized if\n`str` is non-NULL, and used to resume tokenizing when `str` is NULL.\n\n\\param str the string to tokenize, or NULL to continue tokenizing.\n\\param delim the delimiter string that separates tokens.\n\\param saveptr pointer to a char *, used for ongoing state.\n\\returns A pointer to the next token, or NULL if no tokens remain.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strtok_r",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "delim",
              "type": "const char *"
            },
            {
              "name": "saveptr",
              "type": "char **"
            }
          ]
        },
        "SDL_utf8strlen": {
          "doc": "Count the number of codepoints in a UTF-8 string.\n\nCounts the _codepoints_, not _bytes_, in `str`, excluding the null\nterminator.\n\nIf you need to count the bytes in a string instead, consider using\nSDL_strlen().\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), so a malformed or incomplete UTF-8 sequence might increase the\ncount by several replacement characters.\n\n\\param str The null-terminated UTF-8 string to read. Must not be NULL.\n\\returns The length (in codepoints, excluding the null terminator) of\n         `src`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_utf8strnlen\n\\sa SDL_strlen",
          "name": "SDL_utf8strlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_utf8strnlen": {
          "doc": "Count the number of codepoints in a UTF-8 string, up to n bytes.\n\nCounts the _codepoints_, not _bytes_, in `str`, excluding the null\nterminator.\n\nIf you need to count the bytes in a string instead, consider using\nSDL_strnlen().\n\nThe counting stops at `bytes` bytes (not codepoints!). This seems\ncounterintuitive, but makes it easy to express the total size of the\nstring's buffer.\n\nSince this handles Unicode, it expects the strings to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), so a malformed or incomplete UTF-8 sequence might increase the\ncount by several replacement characters.\n\n\\param str The null-terminated UTF-8 string to read. Must not be NULL.\n\\param bytes The maximum amount of bytes to count.\n\\returns The length (in codepoints, excluding the null terminator) of `src`\n         but never more than `maxlen`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_utf8strlen\n\\sa SDL_strnlen",
          "name": "SDL_utf8strnlen",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "bytes",
              "type": "size_t"
            }
          ]
        },
        "SDL_itoa": {
          "doc": "Convert an integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_uitoa\n\\sa SDL_ltoa\n\\sa SDL_lltoa",
          "name": "SDL_itoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_uitoa": {
          "doc": "Convert an unsigned integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_itoa\n\\sa SDL_ultoa\n\\sa SDL_ulltoa",
          "name": "SDL_uitoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned int"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_ltoa": {
          "doc": "Convert a long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ultoa\n\\sa SDL_itoa\n\\sa SDL_lltoa",
          "name": "SDL_ltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_ultoa": {
          "doc": "Convert an unsigned long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ltoa\n\\sa SDL_uitoa\n\\sa SDL_ulltoa",
          "name": "SDL_ultoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_lltoa": {
          "doc": "Convert a long long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget possible negative\nsigns, null terminator bytes, etc).\n\n\\param value the long long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ulltoa\n\\sa SDL_itoa\n\\sa SDL_ltoa",
          "name": "SDL_lltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "long long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_ulltoa": {
          "doc": "Convert an unsigned long long integer into a string.\n\nThis requires a radix to specified for string format. Specifying 10\nproduces a decimal number, 16 hexidecimal, etc. Must be in the range of 2\nto 36.\n\nNote that this function will overflow a buffer if `str` is not large enough\nto hold the output! It may be safer to use SDL_snprintf to clamp output, or\nSDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate\nmuch more space than you expect to use (and don't forget null terminator\nbytes, etc).\n\n\\param value the unsigned long long integer to convert.\n\\param str the buffer to write the string into.\n\\param radix the radix to use for string generation.\n\\returns `str`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lltoa\n\\sa SDL_uitoa\n\\sa SDL_ultoa",
          "name": "SDL_ulltoa",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "value",
              "type": "unsigned long long"
            },
            {
              "name": "str",
              "type": "char *"
            },
            {
              "name": "radix",
              "type": "int"
            }
          ]
        },
        "SDL_atoi": {
          "doc": "Parse an `int` from a string.\n\nThe result of calling `SDL_atoi(str)` is equivalent to\n`(int)SDL_strtol(str, NULL, 10)`.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the parsed `int`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_itoa",
          "name": "SDL_atoi",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_atof": {
          "doc": "Parse a `double` from a string.\n\nThe result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,\nNULL)`.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\returns the parsed `double`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod",
          "name": "SDL_atof",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_strtol": {
          "doc": "Parse a `long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long`, the result is clamped to\nthe minimum and maximum representable `long` values.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtoul\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_ltoa\n\\sa SDL_wcstol",
          "name": "SDL_strtol",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strtoul": {
          "doc": "Parse an `unsigned long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside an `unsigned long`, the result is\nclamped to the maximum representable `unsigned long` value.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `unsigned long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_ultoa",
          "name": "SDL_strtoul",
          "kind": "function",
          "type": "unsigned long",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strtoll": {
          "doc": "Parse a `long long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside a `long long`, the result is\nclamped to the minimum and maximum representable `long long` values.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `long long`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoul\n\\sa SDL_strtoull\n\\sa SDL_strtod\n\\sa SDL_lltoa",
          "name": "SDL_strtoll",
          "kind": "function",
          "type": "long long",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strtoull": {
          "doc": "Parse an `unsigned long long` from a string.\n\nIf `str` starts with whitespace, then those whitespace characters are\nskipped before attempting to parse the number.\n\nIf the parsed number does not fit inside an `unsigned long long`, the\nresult is clamped to the maximum representable `unsigned long long` value.\n\n\\param str The null-terminated string to read. Must not be NULL.\n\\param endp If not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\param base The base of the integer to read. Supported values are 0 and 2\n            to 36 inclusive. If 0, the base will be inferred from the\n            number's prefix (0x for hexadecimal, 0 for octal, decimal\n            otherwise).\n\\returns the parsed `unsigned long long`, or 0 if no number could be\n         parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoul\n\\sa SDL_strtod\n\\sa SDL_ulltoa",
          "name": "SDL_strtoull",
          "kind": "function",
          "type": "unsigned long long",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            },
            {
              "name": "base",
              "type": "int"
            }
          ]
        },
        "SDL_strtod": {
          "doc": "Parse a `double` from a string.\n\nThis function makes fewer guarantees than the C runtime `strtod`:\n\n- Only decimal notation is guaranteed to be supported. The handling of\n  scientific and hexadecimal notation is unspecified.\n- Whether or not INF and NAN can be parsed is unspecified.\n- The precision of the result is unspecified.\n\n\\param str the null-terminated string to read. Must not be NULL.\n\\param endp if not NULL, the address of the first invalid character (i.e.\n            the next character after the parsed number) will be written to\n            this pointer.\n\\returns the parsed `double`, or 0 if no number could be parsed.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atoi\n\\sa SDL_atof\n\\sa SDL_strtol\n\\sa SDL_strtoll\n\\sa SDL_strtoul\n\\sa SDL_strtoull",
          "name": "SDL_strtod",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "endp",
              "type": "char **"
            }
          ]
        },
        "SDL_strcmp": {
          "doc": "Compare two null-terminated UTF-8 strings.\n\nDue to the nature of UTF-8 encoding, this will work with Unicode strings,\nsince effectively this function just compares bytes until it hits a\nnull-terminating character. Also due to the nature of UTF-8, this can be\nused with SDL_qsort() to put strings in (roughly) alphabetical order.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strcmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            }
          ]
        },
        "SDL_strncmp": {
          "doc": "Compare two UTF-8 strings up to a number of bytes.\n\nDue to the nature of UTF-8 encoding, this will work with Unicode strings,\nsince effectively this function just compares bytes until it hits a\nnull-terminating character. Also due to the nature of UTF-8, this can be\nused with SDL_qsort() to put strings in (roughly) alphabetical order.\n\nNote that while this function is intended to be used with UTF-8, it is\ndoing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the\nlimit lands in the middle of a multi-byte UTF-8 sequence, it will only\ncompare a portion of the final character.\n\n`maxlen` specifies a maximum number of bytes to compare; if the strings\nmatch to this number of bytes (or both have matched to a null-terminator\ncharacter before this number of bytes), they will be considered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of _bytes_ to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strncmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strcasecmp": {
          "doc": "Compare two null-terminated UTF-8 strings, case-insensitively.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the string to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strcasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            }
          ]
        },
        "SDL_strncasecmp": {
          "doc": "Compare two UTF-8 strings, case-insensitively, up to a number of bytes.\n\nThis will work with Unicode strings, using a technique called\n\"case-folding\" to handle the vast majority of case-sensitive human\nlanguages regardless of system locale. It can deal with expanding values: a\nGerman Eszett character can compare against two ASCII 's' chars and be\nconsidered a match, for example. A notable exception: it does not handle\nthe Turkish 'i' character; human language is complicated!\n\nSince this handles Unicode, it expects the string to be well-formed UTF-8\nand not a null-terminated string of arbitrary bytes. Bytes that are not\nvalid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT\nCHARACTER), which is to say two strings of random bits may turn out to\nmatch if they convert to the same amount of replacement characters.\n\nNote that while this function is intended to be used with UTF-8, `maxlen`\nspecifies a _byte_ limit! If the limit lands in the middle of a multi-byte\nUTF-8 sequence, it may convert a portion of the final character to one or\nmore Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow\na buffer.\n\n`maxlen` specifies a maximum number of bytes to compare; if the strings\nmatch to this number of bytes (or both have matched to a null-terminator\ncharacter before this number of bytes), they will be considered equal.\n\n\\param str1 the first string to compare. NULL is not permitted!\n\\param str2 the second string to compare. NULL is not permitted!\n\\param maxlen the maximum number of bytes to compare.\n\\returns less than zero if str1 is \"less than\" str2, greater than zero if\n         str1 is \"greater than\" str2, and zero if the strings match\n         exactly.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strncasecmp",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "str1",
              "type": "const char *"
            },
            {
              "name": "str2",
              "type": "const char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            }
          ]
        },
        "SDL_strpbrk": {
          "doc": "Searches a string for the first occurence of any character contained in a\nbreakset, and returns a pointer from the string to that character.\n\n\\param str The null-terminated string to be searched. Must not be NULL, and\n           must not overlap with `breakset`.\n\\param breakset A null-terminated string containing the list of characters\n                to look for. Must not be NULL, and must not overlap with\n                `str`.\n\\returns A pointer to the location, in str, of the first occurence of a\n         character present in the breakset, or NULL if none is found.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_strpbrk",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "str",
              "type": "const char *"
            },
            {
              "name": "breakset",
              "type": "const char *"
            }
          ]
        },
        "SDL_INVALID_UNICODE_CODEPOINT": {
          "doc": "The Unicode REPLACEMENT CHARACTER codepoint.\n\nSDL_StepUTF8() and SDL_StepBackUTF8() report this codepoint when they\nencounter a UTF-8 string with encoding errors.\n\nThis tends to render as something like a question mark in most places.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_StepBackUTF8\n\\sa SDL_StepUTF8",
          "name": "SDL_INVALID_UNICODE_CODEPOINT",
          "kind": "def"
        },
        "SDL_StepUTF8": {
          "doc": "Decode a UTF-8 string, one Unicode codepoint at a time.\n\nThis will return the first Unicode codepoint in the UTF-8 encoded string in\n`*pstr`, and then advance `*pstr` past any consumed bytes before returning.\n\nIt will not access more than `*pslen` bytes from the string. `*pslen` will\nbe adjusted, as well, subtracting the number of bytes consumed.\n\n`pslen` is allowed to be NULL, in which case the string _must_ be\nNULL-terminated, as the function will blindly read until it sees the NULL\nchar.\n\nif `*pslen` is zero, it assumes the end of string is reached and returns a\nzero codepoint regardless of the contents of the string buffer.\n\nIf the resulting codepoint is zero (a NULL terminator), or `*pslen` is\nzero, it will not advance `*pstr` or `*pslen` at all.\n\nGenerally this function is called in a loop until it returns zero,\nadjusting its parameters each iteration.\n\nIf an invalid UTF-8 sequence is encountered, this function returns\nSDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte\n(which is to say, a multibyte sequence might produce several\nSDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid\nUTF-8 sequence).\n\nSeveral things can generate invalid UTF-8 sequences, including overlong\nencodings, the use of UTF-16 surrogate values, and truncated data. Please\nrefer to\n[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)\nfor details.\n\n\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.\n\\param pslen a pointer to the number of bytes in the string, to be read and\n             adjusted. NULL is allowed.\n\\returns the first Unicode codepoint in the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_StepUTF8",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "pstr",
              "type": "const char **"
            },
            {
              "name": "pslen",
              "type": "size_t *"
            }
          ]
        },
        "SDL_StepBackUTF8": {
          "doc": "Decode a UTF-8 string in reverse, one Unicode codepoint at a time.\n\nThis will go to the start of the previous Unicode codepoint in the string,\nmove `*pstr` to that location and return that codepoint.\n\nIf `*pstr` is already at the start of the string), it will not advance\n`*pstr` at all.\n\nGenerally this function is called in a loop until it returns zero,\nadjusting its parameter each iteration.\n\nIf an invalid UTF-8 sequence is encountered, this function returns\nSDL_INVALID_UNICODE_CODEPOINT.\n\nSeveral things can generate invalid UTF-8 sequences, including overlong\nencodings, the use of UTF-16 surrogate values, and truncated data. Please\nrefer to\n[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)\nfor details.\n\n\\param start a pointer to the beginning of the UTF-8 string.\n\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.\n\\returns the previous Unicode codepoint in the string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_StepBackUTF8",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "start",
              "type": "const char *"
            },
            {
              "name": "pstr",
              "type": "const char **"
            }
          ]
        },
        "SDL_UCS4ToUTF8": {
          "doc": "Convert a single Unicode codepoint to UTF-8.\n\nThe buffer pointed to by `dst` must be at least 4 bytes long, as this\nfunction may generate between 1 and 4 bytes of output.\n\nThis function returns the first byte _after_ the newly-written UTF-8\nsequence, which is useful for encoding multiple codepoints in a loop, or\nknowing where to write a NULL-terminator character to end the string (in\neither case, plan to have a buffer of _more_ than 4 bytes!).\n\nIf `codepoint` is an invalid value (outside the Unicode range, or a UTF-16\nsurrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the\ncodepoint instead, and not set an error.\n\nIf `dst` is NULL, this returns NULL immediately without writing to the\npointer and without setting an error.\n\n\\param codepoint a Unicode codepoint to convert to UTF-8.\n\\param dst the location to write the encoded UTF-8. Must point to at least\n           4 bytes!\n\\returns the first byte past the newly-written UTF-8 sequence.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_UCS4ToUTF8",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "codepoint",
              "type": "Uint32"
            },
            {
              "name": "dst",
              "type": "char *"
            }
          ]
        },
        "SDL_sscanf": {
          "doc": "This works exactly like sscanf() but doesn't require access to a C runtime.\n\nScan a string, matching a format string, converting each '%' item and\nstoring it to pointers provided through variable arguments.\n\n\\param text the string to scan. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of pointers to values to be filled in with scanned items.\n\\returns the number of items that matched the format string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_sscanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "fmt",
              "type": "SDL_SCANF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_vsscanf": {
          "doc": "This works exactly like vsscanf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_sscanf(), except it takes a `va_list` instead\nof using `...` variable arguments.\n\n\\param text the string to scan. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` of pointers to values to be filled in with scanned\n          items.\n\\returns the number of items that matched the format string.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vsscanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "const char *"
            },
            {
              "name": "fmt",
              "type": "SDL_SCANF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_snprintf": {
          "doc": "This works exactly like snprintf() but doesn't require access to a C\nruntime.\n\nFormat a string of up to `maxlen`-1 bytes, converting each '%' item with\nvalues provided through variable arguments.\n\nWhile some C runtimes differ on how to deal with too-large strings, this\nfunction null-terminates the output, by treating the null-terminator as\npart of the `maxlen` count. Note that if `maxlen` is zero, however, no\nbytes will be written at all.\n\nThis function returns the number of _bytes_ (not _characters_) that should\nbe written, excluding the null-terminator character. If this returns a\nnumber >= `maxlen`, it means the output string was truncated. A negative\nreturn value means an error occurred.\n\nReferencing the output string's pointer with a format item is undefined\nbehavior.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum bytes to write, including the null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of bytes that should be written, not counting the\n         null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_snprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_swprintf": {
          "doc": "This works exactly like swprintf() but doesn't require access to a C\nruntime.\n\nFormat a wide string of up to `maxlen`-1 wchar_t values, converting each\n'%' item with values provided through variable arguments.\n\nWhile some C runtimes differ on how to deal with too-large strings, this\nfunction null-terminates the output, by treating the null-terminator as\npart of the `maxlen` count. Note that if `maxlen` is zero, however, no wide\ncharacters will be written at all.\n\nThis function returns the number of _wide characters_ (not _codepoints_)\nthat should be written, excluding the null-terminator character. If this\nreturns a number >= `maxlen`, it means the output string was truncated. A\nnegative return value means an error occurred.\n\nReferencing the output string's pointer with a format item is undefined\nbehavior.\n\n\\param text the buffer to write the wide string into. Must not be NULL.\n\\param maxlen the maximum wchar_t values to write, including the\n              null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of wide characters that should be written, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_swprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const wchar_t *"
            },
            "..."
          ]
        },
        "SDL_vsnprintf": {
          "doc": "This works exactly like vsnprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_snprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum bytes to write, including the null-terminator.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of bytes that should be written, not counting the\n         null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vsnprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "char *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_vswprintf": {
          "doc": "This works exactly like vswprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_swprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param text the buffer to write the string into. Must not be NULL.\n\\param maxlen the maximum wide characters to write, including the\n              null-terminator.\n\\param fmt a printf-style format wide string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of wide characters that should be written, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vswprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "text",
              "type": "wchar_t *"
            },
            {
              "name": "maxlen",
              "type": "size_t"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const wchar_t *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_asprintf": {
          "doc": "This works exactly like asprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_snprintf(), except it allocates a buffer large\nenough to hold the output string on behalf of the caller.\n\nOn success, this function returns the number of bytes (not characters)\ncomprising the output string, not counting the null-terminator character,\nand sets `*strp` to the newly-allocated string.\n\nOn error, this function returns a negative number, and the value of `*strp`\nis undefined.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param strp on output, is set to the new string. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ... a list of values to be used with the format string.\n\\returns the number of bytes in the newly-allocated string, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_asprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "strp",
              "type": "char **"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        },
        "SDL_vasprintf": {
          "doc": "This works exactly like vasprintf() but doesn't require access to a C\nruntime.\n\nFunctions identically to SDL_asprintf(), except it takes a `va_list`\ninstead of using `...` variable arguments.\n\n\\param strp on output, is set to the new string. Must not be NULL.\n\\param fmt a printf-style format string. Must not be NULL.\n\\param ap a `va_list` values to be used with the format string.\n\\returns the number of bytes in the newly-allocated string, not counting\n         the null-terminator char, or a negative value on error.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_vasprintf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "strp",
              "type": "char **"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            {
              "name": "ap",
              "type": "va_list"
            }
          ]
        },
        "SDL_srand": {
          "doc": "Seeds the pseudo-random number generator.\n\nReusing the seed number will cause SDL_rand_*() to repeat the same stream\nof 'random' numbers.\n\n\\param seed the value to use as a random number seed, or 0 to use\n            SDL_GetPerformanceCounter().\n\n\\threadsafety This should be called on the same thread that calls\n              SDL_rand*()\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_rand_bits\n\\sa SDL_randf",
          "name": "SDL_srand",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "seed",
              "type": "Uint64"
            }
          ]
        },
        "SDL_rand": {
          "doc": "Generate a pseudo-random number less than n for positive n\n\nThe method used is faster and of better quality than `rand() % n`. Odds are\nroughly 99.9% even for n = 1 million. Evenness is better for smaller n, and\nmuch worse as n gets bigger.\n\nExample: to simulate a d6 use `SDL_rand(6) + 1` The +1 converts 0..5 to\n1..6\n\nIf you want to generate a pseudo-random number in the full range of Sint32,\nyou should use: (Sint32)SDL_rand_bits()\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param n the number of possible outcomes. n must be positive.\n\\returns a random value in the range of [0 .. n-1].\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_srand\n\\sa SDL_randf",
          "name": "SDL_rand",
          "kind": "function",
          "type": "Sint32",
          "parameters": [
            {
              "name": "n",
              "type": "Sint32"
            }
          ]
        },
        "SDL_randf": {
          "doc": "Generate a uniform pseudo-random floating point number less than 1.0\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\returns a random value in the range of [0.0, 1.0).\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_srand\n\\sa SDL_rand",
          "name": "SDL_randf",
          "kind": "function",
          "type": "float",
          "parameters": []
        },
        "SDL_rand_bits": {
          "doc": "Generate 32 pseudo-random bits.\n\nYou likely want to use SDL_rand() to get a psuedo-random number instead.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\returns a random value in the range of [0-SDL_MAX_UINT32].\n\n\\threadsafety All calls should be made from a single thread\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_randf\n\\sa SDL_srand",
          "name": "SDL_rand_bits",
          "kind": "function",
          "type": "Uint32",
          "parameters": []
        },
        "SDL_rand_r": {
          "doc": "Generate a pseudo-random number less than n for positive n\n\nThe method used is faster and of better quality than `rand() % n`. Odds are\nroughly 99.9% even for n = 1 million. Evenness is better for smaller n, and\nmuch worse as n gets bigger.\n\nExample: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts\n0..5 to 1..6\n\nIf you want to generate a pseudo-random number in the full range of Sint32,\nyou should use: (Sint32)SDL_rand_bits_r(state)\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\param n the number of possible outcomes. n must be positive.\n\\returns a random value in the range of [0 .. n-1].\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand\n\\sa SDL_rand_bits_r\n\\sa SDL_randf_r",
          "name": "SDL_rand_r",
          "kind": "function",
          "type": "Sint32",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            },
            {
              "name": "n",
              "type": "Sint32"
            }
          ]
        },
        "SDL_randf_r": {
          "doc": "Generate a uniform pseudo-random floating point number less than 1.0\n\nIf you want reproducible output, be sure to initialize with SDL_srand()\nfirst.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\returns a random value in the range of [0.0, 1.0).\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand_bits_r\n\\sa SDL_rand_r\n\\sa SDL_randf",
          "name": "SDL_randf_r",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_rand_bits_r": {
          "doc": "Generate 32 pseudo-random bits.\n\nYou likely want to use SDL_rand_r() to get a psuedo-random number instead.\n\nThere are no guarantees as to the quality of the random sequence produced,\nand this should not be used for security (cryptography, passwords) or where\nmoney is on the line (loot-boxes, casinos). There are many random number\nlibraries available with different characteristics and you should pick one\nof those to meet any serious needs.\n\n\\param state a pointer to the current random number state, this may not be\n             NULL.\n\\returns a random value in the range of [0-SDL_MAX_UINT32].\n\n\\threadsafety This function is thread-safe, as long as the state pointer\n              isn't shared between threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_rand_r\n\\sa SDL_randf_r",
          "name": "SDL_rand_bits_r",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "state",
              "type": "Uint64 *"
            }
          ]
        },
        "SDL_PI_D": {
          "doc": "The value of Pi, as a double-precision floating point literal.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_PI_F",
          "name": "SDL_PI_D",
          "kind": "def"
        },
        "SDL_PI_F": {
          "doc": "The value of Pi, as a single-precision floating point literal.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_PI_D",
          "name": "SDL_PI_F",
          "kind": "def"
        },
        "SDL_acos": {
          "doc": "Compute the arc cosine of `x`.\n\nThe definition of `y = acos(x)` is `x = cos(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `0 <= y <= Pi`\n\nThis function operates on double-precision floating point values, use\nSDL_acosf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc cosine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_acosf\n\\sa SDL_asin\n\\sa SDL_cos",
          "name": "SDL_acos",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_acosf": {
          "doc": "Compute the arc cosine of `x`.\n\nThe definition of `y = acos(x)` is `x = cos(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `0 <= y <= Pi`\n\nThis function operates on single-precision floating point values, use\nSDL_acos for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc cosine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_acos\n\\sa SDL_asinf\n\\sa SDL_cosf",
          "name": "SDL_acosf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_asin": {
          "doc": "Compute the arc sine of `x`.\n\nThe definition of `y = asin(x)` is `x = sin(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_asinf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc sine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_asinf\n\\sa SDL_acos\n\\sa SDL_sin",
          "name": "SDL_asin",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_asinf": {
          "doc": "Compute the arc sine of `x`.\n\nThe definition of `y = asin(x)` is `x = sin(y)`.\n\nDomain: `-1 <= x <= 1`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_asin for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc sine of `x`, in radians.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_asin\n\\sa SDL_acosf\n\\sa SDL_sinf",
          "name": "SDL_asinf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_atan": {
          "doc": "Compute the arc tangent of `x`.\n\nThe definition of `y = atan(x)` is `x = tan(y)`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_atanf for single-precision floats.\n\nTo calculate the arc tangent of y / x, use SDL_atan2.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atanf\n\\sa SDL_atan2\n\\sa SDL_tan",
          "name": "SDL_atan",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_atanf": {
          "doc": "Compute the arc tangent of `x`.\n\nThe definition of `y = atan(x)` is `x = tan(y)`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_atan for dboule-precision floats.\n\nTo calculate the arc tangent of y / x, use SDL_atan2f.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan\n\\sa SDL_atan2f\n\\sa SDL_tanf",
          "name": "SDL_atanf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_atan2": {
          "doc": "Compute the arc tangent of `y / x`, using the signs of x and y to adjust\nthe result's quadrant.\n\nThe definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant\nof z is determined based on the signs of x and y.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on double-precision floating point values, use\nSDL_atan2f for single-precision floats.\n\nTo calculate the arc tangent of a single value, use SDL_atan.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param y floating point value of the numerator (y coordinate).\n\\param x floating point value of the denominator (x coordinate).\n\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either\n         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan2f\n\\sa SDL_atan\n\\sa SDL_tan",
          "name": "SDL_atan2",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_atan2f": {
          "doc": "Compute the arc tangent of `y / x`, using the signs of x and y to adjust\nthe result's quadrant.\n\nThe definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant\nof z is determined based on the signs of x and y.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-Pi/2 <= y <= Pi/2`\n\nThis function operates on single-precision floating point values, use\nSDL_atan2 for double-precision floats.\n\nTo calculate the arc tangent of a single value, use SDL_atanf.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param y floating point value of the numerator (y coordinate).\n\\param x floating point value of the denominator (x coordinate).\n\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either\n         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_atan2f\n\\sa SDL_atan\n\\sa SDL_tan",
          "name": "SDL_atan2f",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_ceil": {
          "doc": "Compute the ceiling of `x`.\n\nThe ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`\nrounded up to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_ceilf for single-precision floats.\n\n\\param x floating point value.\n\\returns the ceiling of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ceilf\n\\sa SDL_floor\n\\sa SDL_trunc\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_ceil",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_ceilf": {
          "doc": "Compute the ceiling of `x`.\n\nThe ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`\nrounded up to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_ceil for double-precision floats.\n\n\\param x floating point value.\n\\returns the ceiling of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ceil\n\\sa SDL_floorf\n\\sa SDL_truncf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_ceilf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_copysign": {
          "doc": "Copy the sign of one floating-point value to another.\n\nThe definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.\n\nDomain: `-INF <= x <= INF`, ``-INF <= y <= f``\n\nRange: `-INF <= z <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_copysignf for single-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\param y floating point value to use as the sign.\n\\returns the floating point value with the sign of y and the magnitude of\n         x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_copysignf\n\\sa SDL_fabs",
          "name": "SDL_copysign",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "SDL_copysignf": {
          "doc": "Copy the sign of one floating-point value to another.\n\nThe definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.\n\nDomain: `-INF <= x <= INF`, ``-INF <= y <= f``\n\nRange: `-INF <= z <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_copysign for double-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\param y floating point value to use as the sign.\n\\returns the floating point value with the sign of y and the magnitude of\n         x.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_copysignf\n\\sa SDL_fabsf",
          "name": "SDL_copysignf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_cos": {
          "doc": "Compute the cosine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on double-precision floating point values, use\nSDL_cosf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns cosine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_cosf\n\\sa SDL_acos\n\\sa SDL_sin",
          "name": "SDL_cos",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_cosf": {
          "doc": "Compute the cosine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on single-precision floating point values, use\nSDL_cos for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns cosine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_cos\n\\sa SDL_acosf\n\\sa SDL_sinf",
          "name": "SDL_cosf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_exp": {
          "doc": "Compute the exponential of `x`.\n\nThe definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the\nnatural logarithm. The inverse is the natural logarithm, SDL_log.\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThe output will overflow if `exp(x)` is too large to be represented.\n\nThis function operates on double-precision floating point values, use\nSDL_expf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns value of `e^x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_expf\n\\sa SDL_log",
          "name": "SDL_exp",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_expf": {
          "doc": "Compute the exponential of `x`.\n\nThe definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the\nnatural logarithm. The inverse is the natural logarithm, SDL_logf.\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThe output will overflow if `exp(x)` is too large to be represented.\n\nThis function operates on single-precision floating point values, use\nSDL_exp for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value.\n\\returns value of `e^x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_exp\n\\sa SDL_logf",
          "name": "SDL_expf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_fabs": {
          "doc": "Compute the absolute value of `x`\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_copysignf for single-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\returns the absolute value of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fabsf",
          "name": "SDL_fabs",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_fabsf": {
          "doc": "Compute the absolute value of `x`\n\nDomain: `-INF <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_copysignf for double-precision floats.\n\n\\param x floating point value to use as the magnitude.\n\\returns the absolute value of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fabs",
          "name": "SDL_fabsf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_floor": {
          "doc": "Compute the floor of `x`.\n\nThe floor of `x` is the largest integer `y` such that `y > x`, i.e `x`\nrounded down to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_floorf for single-precision floats.\n\n\\param x floating point value.\n\\returns the floor of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_floorf\n\\sa SDL_ceil\n\\sa SDL_trunc\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_floor",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_floorf": {
          "doc": "Compute the floor of `x`.\n\nThe floor of `x` is the largest integer `y` such that `y > x`, i.e `x`\nrounded down to the nearest integer.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_floorf for double-precision floats.\n\n\\param x floating point value.\n\\returns the floor of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_floor\n\\sa SDL_ceilf\n\\sa SDL_truncf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_floorf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_trunc": {
          "doc": "Truncate `x` to an integer.\n\nRounds `x` to the next closest integer to 0. This is equivalent to removing\nthe fractional part of `x`, leaving only the integer part.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_truncf for single-precision floats.\n\n\\param x floating point value.\n\\returns `x` truncated to an integer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_truncf\n\\sa SDL_fmod\n\\sa SDL_ceil\n\\sa SDL_floor\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_trunc",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_truncf": {
          "doc": "Truncate `x` to an integer.\n\nRounds `x` to the next closest integer to 0. This is equivalent to removing\nthe fractional part of `x`, leaving only the integer part.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on single-precision floating point values, use\nSDL_truncf for double-precision floats.\n\n\\param x floating point value.\n\\returns `x` truncated to an integer.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_trunc\n\\sa SDL_fmodf\n\\sa SDL_ceilf\n\\sa SDL_floorf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_truncf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_fmod": {
          "doc": "Return the floating-point remainder of `x / y`\n\nDivides `x` by `y`, and returns the remainder.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`\n\nRange: `-y <= z <= y`\n\nThis function operates on double-precision floating point values, use\nSDL_fmodf for single-precision floats.\n\n\\param x the numerator.\n\\param y the denominator. Must not be 0.\n\\returns the remainder of `x / y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fmodf\n\\sa SDL_modf\n\\sa SDL_trunc\n\\sa SDL_ceil\n\\sa SDL_floor\n\\sa SDL_round\n\\sa SDL_lround",
          "name": "SDL_fmod",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "SDL_fmodf": {
          "doc": "Return the floating-point remainder of `x / y`\n\nDivides `x` by `y`, and returns the remainder.\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`\n\nRange: `-y <= z <= y`\n\nThis function operates on single-precision floating point values, use\nSDL_fmod for single-precision floats.\n\n\\param x the numerator.\n\\param y the denominator. Must not be 0.\n\\returns the remainder of `x / y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_fmod\n\\sa SDL_truncf\n\\sa SDL_modff\n\\sa SDL_ceilf\n\\sa SDL_floorf\n\\sa SDL_roundf\n\\sa SDL_lroundf",
          "name": "SDL_fmodf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_isinf": {
          "doc": "Return whether the value is infinity.\n\n\\param x double-precision floating point value.\n\\returns non-zero if the value is infinity, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isinff",
          "name": "SDL_isinf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_isinff": {
          "doc": "Return whether the value is infinity.\n\n\\param x floating point value.\n\\returns non-zero if the value is infinity, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isinf",
          "name": "SDL_isinff",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_isnan": {
          "doc": "Return whether the value is NaN.\n\n\\param x double-precision floating point value.\n\\returns non-zero if the value is NaN, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isnanf",
          "name": "SDL_isnan",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_isnanf": {
          "doc": "Return whether the value is NaN.\n\n\\param x floating point value.\n\\returns non-zero if the value is NaN, 0 otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_isnan",
          "name": "SDL_isnanf",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_log": {
          "doc": "Compute the natural logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on double-precision floating point values, use\nSDL_logf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the natural logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_logf\n\\sa SDL_log10\n\\sa SDL_exp",
          "name": "SDL_log",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_logf": {
          "doc": "Compute the natural logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on single-precision floating point values, use\nSDL_log for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the natural logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log\n\\sa SDL_expf",
          "name": "SDL_logf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_log10": {
          "doc": "Compute the base-10 logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on double-precision floating point values, use\nSDL_log10f for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log10f\n\\sa SDL_log\n\\sa SDL_pow",
          "name": "SDL_log10",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_log10f": {
          "doc": "Compute the base-10 logarithm of `x`.\n\nDomain: `0 < x <= INF`\n\nRange: `-INF <= y <= INF`\n\nIt is an error for `x` to be less than or equal to 0.\n\nThis function operates on single-precision floating point values, use\nSDL_log10 for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than 0.\n\\returns the logarithm of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_log10\n\\sa SDL_logf\n\\sa SDL_powf",
          "name": "SDL_log10f",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_modf": {
          "doc": "Split `x` into integer and fractional parts\n\nThis function operates on double-precision floating point values, use\nSDL_modff for single-precision floats.\n\n\\param x floating point value.\n\\param y output pointer to store the integer part of `x`.\n\\returns the fractional part of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_modff\n\\sa SDL_trunc\n\\sa SDL_fmod",
          "name": "SDL_modf",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double *"
            }
          ]
        },
        "SDL_modff": {
          "doc": "Split `x` into integer and fractional parts\n\nThis function operates on single-precision floating point values, use\nSDL_modf for double-precision floats.\n\n\\param x floating point value.\n\\param y output pointer to store the integer part of `x`.\n\\returns the fractional part of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_modf\n\\sa SDL_truncf\n\\sa SDL_fmodf",
          "name": "SDL_modff",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_pow": {
          "doc": "Raise `x` to the power `y`\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-INF <= z <= INF`\n\nIf `y` is the base of the natural logarithm (e), consider using SDL_exp\ninstead.\n\nThis function operates on double-precision floating point values, use\nSDL_powf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x the base.\n\\param y the exponent.\n\\returns `x` raised to the power `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_powf\n\\sa SDL_exp\n\\sa SDL_log",
          "name": "SDL_pow",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            }
          ]
        },
        "SDL_powf": {
          "doc": "Raise `x` to the power `y`\n\nDomain: `-INF <= x <= INF`, `-INF <= y <= INF`\n\nRange: `-INF <= z <= INF`\n\nIf `y` is the base of the natural logarithm (e), consider using SDL_exp\ninstead.\n\nThis function operates on single-precision floating point values, use\nSDL_powf for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x the base.\n\\param y the exponent.\n\\returns `x` raised to the power `y`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_pow\n\\sa SDL_expf\n\\sa SDL_logf",
          "name": "SDL_powf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_round": {
          "doc": "Round `x` to the nearest integer.\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_roundf for single-precision floats. To get the result as an integer\ntype, use SDL_lround.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_roundf\n\\sa SDL_lround\n\\sa SDL_floor\n\\sa SDL_ceil\n\\sa SDL_trunc",
          "name": "SDL_round",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_roundf": {
          "doc": "Round `x` to the nearest integer.\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`, y integer\n\nThis function operates on double-precision floating point values, use\nSDL_roundf for single-precision floats. To get the result as an integer\ntype, use SDL_lroundf.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_round\n\\sa SDL_lroundf\n\\sa SDL_floorf\n\\sa SDL_ceilf\n\\sa SDL_truncf",
          "name": "SDL_roundf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_lround": {
          "doc": "Round `x` to the nearest integer representable as a long\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `MIN_LONG <= y <= MAX_LONG`\n\nThis function operates on double-precision floating point values, use\nSDL_lround for single-precision floats. To get the result as a\nfloating-point type, use SDL_round.\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lroundf\n\\sa SDL_round\n\\sa SDL_floor\n\\sa SDL_ceil\n\\sa SDL_trunc",
          "name": "SDL_lround",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_lroundf": {
          "doc": "Round `x` to the nearest integer representable as a long\n\nRounds `x` to the nearest integer. Values halfway between integers will be\nrounded away from zero.\n\nDomain: `-INF <= x <= INF`\n\nRange: `MIN_LONG <= y <= MAX_LONG`\n\nThis function operates on single-precision floating point values, use\nSDL_lroundf for double-precision floats. To get the result as a\nfloating-point type, use SDL_roundf,\n\n\\param x floating point value.\n\\returns the nearest integer to `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_lround\n\\sa SDL_roundf\n\\sa SDL_floorf\n\\sa SDL_ceilf\n\\sa SDL_truncf",
          "name": "SDL_lroundf",
          "kind": "function",
          "type": "long",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_scalbn": {
          "doc": "Scale `x` by an integer power of two.\n\nMultiplies `x` by the `n`th power of the floating point radix (always 2).\n\nDomain: `-INF <= x <= INF`, `n` integer\n\nRange: `-INF <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_scalbnf for single-precision floats.\n\n\\param x floating point value to be scaled.\n\\param n integer exponent.\n\\returns `x * 2^n`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_scalbnf\n\\sa SDL_pow",
          "name": "SDL_scalbn",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "n",
              "type": "int"
            }
          ]
        },
        "SDL_scalbnf": {
          "doc": "Scale `x` by an integer power of two.\n\nMultiplies `x` by the `n`th power of the floating point radix (always 2).\n\nDomain: `-INF <= x <= INF`, `n` integer\n\nRange: `-INF <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_scalbn for double-precision floats.\n\n\\param x floating point value to be scaled.\n\\param n integer exponent.\n\\returns `x * 2^n`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_scalbn\n\\sa SDL_powf",
          "name": "SDL_scalbnf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "n",
              "type": "int"
            }
          ]
        },
        "SDL_sin": {
          "doc": "Compute the sine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on double-precision floating point values, use\nSDL_sinf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns sine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sinf\n\\sa SDL_asin\n\\sa SDL_cos",
          "name": "SDL_sin",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_sinf": {
          "doc": "Compute the sine of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-1 <= y <= 1`\n\nThis function operates on single-precision floating point values, use\nSDL_sin for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns sine of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sin\n\\sa SDL_asinf\n\\sa SDL_cosf",
          "name": "SDL_sinf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_sqrt": {
          "doc": "Compute the square root of `x`.\n\nDomain: `0 <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_sqrtf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than or equal to 0.\n\\returns square root of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sqrtf",
          "name": "SDL_sqrt",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_sqrtf": {
          "doc": "Compute the square root of `x`.\n\nDomain: `0 <= x <= INF`\n\nRange: `0 <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_sqrt for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value. Must be greater than or equal to 0.\n\\returns square root of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_sqrt",
          "name": "SDL_sqrtf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_tan": {
          "doc": "Compute the tangent of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`\n\nThis function operates on double-precision floating point values, use\nSDL_tanf for single-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns tangent of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_tanf\n\\sa SDL_sin\n\\sa SDL_cos\n\\sa SDL_atan\n\\sa SDL_atan2",
          "name": "SDL_tan",
          "kind": "function",
          "type": "double",
          "parameters": [
            {
              "name": "x",
              "type": "double"
            }
          ]
        },
        "SDL_tanf": {
          "doc": "Compute the tangent of `x`.\n\nDomain: `-INF <= x <= INF`\n\nRange: `-INF <= y <= INF`\n\nThis function operates on single-precision floating point values, use\nSDL_tanf for double-precision floats.\n\nThis function may use a different approximation across different versions,\nplatforms and configurations. i.e, it can return a different value given\nthe same input on different machines or operating systems, or if SDL is\nupdated.\n\n\\param x floating point value, in radians.\n\\returns tangent of `x`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_tan\n\\sa SDL_sinf\n\\sa SDL_cosf\n\\sa SDL_atanf\n\\sa SDL_atan2f",
          "name": "SDL_tanf",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "x",
              "type": "float"
            }
          ]
        },
        "SDL_iconv_t": {
          "doc": "An opaque handle representing string encoding conversion state.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open",
          "name": "SDL_iconv_t",
          "kind": "alias",
          "type": "struct SDL_iconv_data_t *"
        },
        "SDL_iconv_open": {
          "doc": "This function allocates a context for the specified character set\nconversion.\n\n\\param tocode The target character encoding, must not be NULL.\n\\param fromcode The source character encoding, must not be NULL.\n\\returns a handle that must be freed with SDL_iconv_close, or\n         SDL_ICONV_ERROR on failure.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv\n\\sa SDL_iconv_close\n\\sa SDL_iconv_string",
          "name": "SDL_iconv_open",
          "kind": "function",
          "type": "SDL_iconv_t",
          "parameters": [
            {
              "name": "tocode",
              "type": "const char *"
            },
            {
              "name": "fromcode",
              "type": "const char *"
            }
          ]
        },
        "SDL_iconv_close": {
          "doc": "This function frees a context used for character set conversion.\n\n\\param cd The character set conversion handle.\n\\returns 0 on success, or -1 on failure.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv\n\\sa SDL_iconv_open\n\\sa SDL_iconv_string",
          "name": "SDL_iconv_close",
          "kind": "function",
          "type": "int",
          "parameters": [
            {
              "name": "cd",
              "type": "SDL_iconv_t"
            }
          ]
        },
        "SDL_iconv": {
          "doc": "This function converts text between encodings, reading from and writing to\na buffer.\n\nIt returns the number of succesful conversions on success. On error,\nSDL_ICONV_E2BIG is returned when the output buffer is too small, or\nSDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,\nor SDL_ICONV_EINVAL is returned when an incomplete input sequence is\nencountered.\n\nOn exit:\n\n- inbuf will point to the beginning of the next multibyte sequence. On\n  error, this is the location of the problematic input sequence. On\n  success, this is the end of the input sequence.\n- inbytesleft will be set to the number of bytes left to convert, which\n  will be 0 on success.\n- outbuf will point to the location where to store the next output byte.\n- outbytesleft will be set to the number of bytes left in the output\n  buffer.\n\n\\param cd The character set conversion context, created in\n          SDL_iconv_open().\n\\param inbuf Address of variable that points to the first character of the\n             input sequence.\n\\param inbytesleft The number of bytes in the input buffer.\n\\param outbuf Address of variable that points to the output buffer.\n\\param outbytesleft The number of bytes in the output buffer.\n\\returns the number of conversions on success, or a negative error code.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open\n\\sa SDL_iconv_close\n\\sa SDL_iconv_string",
          "name": "SDL_iconv",
          "kind": "function",
          "type": "size_t",
          "parameters": [
            {
              "name": "cd",
              "type": "SDL_iconv_t"
            },
            {
              "name": "inbuf",
              "type": "const char **"
            },
            {
              "name": "inbytesleft",
              "type": "size_t *"
            },
            {
              "name": "outbuf",
              "type": "char **"
            },
            {
              "name": "outbytesleft",
              "type": "size_t *"
            }
          ]
        },
        "SDL_ICONV_ERROR": {
          "doc": "",
          "name": "SDL_ICONV_ERROR",
          "kind": "def"
        },
        "SDL_ICONV_E2BIG": {
          "doc": "",
          "name": "SDL_ICONV_E2BIG",
          "kind": "def"
        },
        "SDL_ICONV_EILSEQ": {
          "doc": "",
          "name": "SDL_ICONV_EILSEQ",
          "kind": "def"
        },
        "SDL_ICONV_EINVAL": {
          "doc": "",
          "name": "SDL_ICONV_EINVAL",
          "kind": "def"
        },
        "SDL_iconv_string": {
          "doc": "Helper function to convert a string's encoding in one call.\n\nThis function converts a buffer or string between encodings in one pass.\n\nThe string does not need to be NULL-terminated; this function operates on\nthe number of bytes specified in `inbytesleft` whether there is a NULL\ncharacter anywhere in the buffer.\n\nThe returned string is owned by the caller, and should be passed to\nSDL_free when no longer needed.\n\n\\param tocode the character encoding of the output string. Examples are\n              \"UTF-8\", \"UCS-4\", etc.\n\\param fromcode the character encoding of data in `inbuf`.\n\\param inbuf the string to convert to a different encoding.\n\\param inbytesleft the size of the input string _in bytes_.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_iconv_open\n\\sa SDL_iconv_close\n\\sa SDL_iconv",
          "name": "SDL_iconv_string",
          "kind": "function",
          "type": "char *",
          "parameters": [
            {
              "name": "tocode",
              "type": "const char *"
            },
            {
              "name": "fromcode",
              "type": "const char *"
            },
            {
              "name": "inbuf",
              "type": "const char *"
            },
            {
              "name": "inbytesleft",
              "type": "size_t"
            }
          ]
        },
        "SDL_iconv_utf8_locale": {
          "doc": "Convert a UTF-8 string to the current locale's character encoding.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_utf8_locale",
          "kind": "def",
          "parameters": [
            "S"
          ]
        },
        "SDL_iconv_utf8_ucs2": {
          "doc": "Convert a UTF-8 string to UCS-2.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_utf8_ucs2",
          "kind": "def",
          "parameters": [
            "S"
          ]
        },
        "SDL_iconv_utf8_ucs4": {
          "doc": "Convert a UTF-8 string to UCS-4.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_utf8_ucs4",
          "kind": "def",
          "parameters": [
            "S"
          ]
        },
        "SDL_iconv_wchar_utf8": {
          "doc": "Convert a wchar_t string to UTF-8.\n\nThis is a helper macro that might be more clear than calling\nSDL_iconv_string directly. However, it double-evaluates its parameter, so\ndo not use an expression with side-effects here.\n\n\\param S the string to convert.\n\\returns a new string, converted to the new encoding, or NULL on error.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_iconv_wchar_utf8",
          "kind": "def",
          "parameters": [
            "S"
          ]
        },
        "SDL_size_mul_check_overflow": {
          "doc": "Multiply two integers, checking for overflow.\n\nIf `a * b` would overflow, return false.\n\nOtherwise store `a * b` via ret and return true.\n\n\\param a the multiplicand.\n\\param b the multiplier.\n\\param ret on non-overflow output, stores the multiplication result, may\n           not be NULL.\n\\returns false on overflow, true if result is multiplied without overflow.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_size_mul_check_overflow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "SDL_size_mul_check_overflow_builtin": {
          "doc": "",
          "name": "SDL_size_mul_check_overflow_builtin",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "SDL_size_add_check_overflow": {
          "doc": "Add two integers, checking for overflow.\n\nIf `a + b` would overflow, return false.\n\nOtherwise store `a + b` via ret and return true.\n\n\\param a the first addend.\n\\param b the second addend.\n\\param ret on non-overflow output, stores the addition result, may not be\n           NULL.\n\\returns false on overflow, true if result is added without overflow.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_size_add_check_overflow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "SDL_size_add_check_overflow_builtin": {
          "doc": "",
          "name": "SDL_size_add_check_overflow_builtin",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "size_t"
            },
            {
              "name": "b",
              "type": "size_t"
            },
            {
              "name": "ret",
              "type": "size_t *"
            }
          ]
        },
        "SDL_FunctionPointer": {
          "doc": "A generic function pointer.\n\nIn theory, generic function pointers should use this, instead of `void *`,\nsince some platforms could treat code addresses differently than data\naddresses. Although in current times no popular platforms make this\ndistinction, it is more correct and portable to use the correct type for a\ngeneric pointer.\n\nIf for some reason you need to force this typedef to be an actual `void *`,\nperhaps to work around a compiler or existing code, you can define\n`SDL_FUNCTION_POINTER_IS_VOID_POINTER` before including any SDL headers.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_FunctionPointer",
          "kind": "callback",
          "type": "void",
          "parameters": []
        }
      }
    },
    "SDL_pixels.h": {
      "name": "SDL_pixels.h",
      "doc": "# CategoryPixels\n\nSDL offers facilities for pixel management.\n\nLargely these facilities deal with pixel _format_: what does this set of\nbits represent?\n\nIf you mostly want to think of a pixel as some combination of red, green,\nblue, and maybe alpha intensities, this is all pretty straightforward, and\nin many cases, is enough information to build a perfectly fine game.\n\nHowever, the actual definition of a pixel is more complex than that:\n\nPixels are a representation of a color in a particular color space.\n\nThe first characteristic of a color space is the color type. SDL\nunderstands two different color types, RGB and YCbCr, or in SDL also\nreferred to as YUV.\n\nRGB colors consist of red, green, and blue channels of color that are added\ntogether to represent the colors we see on the screen.\n\nhttps://en.wikipedia.org/wiki/RGB_color_model\n\nYCbCr colors represent colors as a Y luma brightness component and red and\nblue chroma color offsets. This color representation takes advantage of the\nfact that the human eye is more sensitive to brightness than the color in\nan image. The Cb and Cr components are often compressed and have lower\nresolution than the luma component.\n\nhttps://en.wikipedia.org/wiki/YCbCr\n\nWhen the color information in YCbCr is compressed, the Y pixels are left at\nfull resolution and each Cr and Cb pixel represents an average of the color\ninformation in a block of Y pixels. The chroma location determines where in\nthat block of pixels the color information is coming from.\n\nThe color range defines how much of the pixel to use when converting a\npixel into a color on the display. When the full color range is used, the\nentire numeric range of the pixel bits is significant. When narrow color\nrange is used, for historical reasons, the pixel uses only a portion of the\nnumeric range to represent colors.\n\nThe color primaries and white point are a definition of the colors in the\ncolor space relative to the standard XYZ color space.\n\nhttps://en.wikipedia.org/wiki/CIE_1931_color_space\n\nThe transfer characteristic, or opto-electrical transfer function (OETF),\nis the way a color is converted from mathematically linear space into a\nnon-linear output signals.\n\nhttps://en.wikipedia.org/wiki/Rec._709#Transfer_characteristics\n\nThe matrix coefficients are used to convert between YCbCr and RGB colors.",
      "entries": {
        "SDL_ALPHA_OPAQUE": {
          "doc": "A fully opaque 8-bit alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_TRANSPARENT",
          "name": "SDL_ALPHA_OPAQUE",
          "kind": "def"
        },
        "SDL_ALPHA_OPAQUE_FLOAT": {
          "doc": "A fully opaque floating point alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_TRANSPARENT_FLOAT",
          "name": "SDL_ALPHA_OPAQUE_FLOAT",
          "kind": "def"
        },
        "SDL_ALPHA_TRANSPARENT": {
          "doc": "A fully transparent 8-bit alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_OPAQUE",
          "name": "SDL_ALPHA_TRANSPARENT",
          "kind": "def"
        },
        "SDL_ALPHA_TRANSPARENT_FLOAT": {
          "doc": "A fully transparent floating point alpha value.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_ALPHA_OPAQUE_FLOAT",
          "name": "SDL_ALPHA_TRANSPARENT_FLOAT",
          "kind": "def"
        },
        "SDL_PixelType": {
          "doc": "Pixel type.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PixelType",
          "kind": "enum"
        },
        "SDL_BitmapOrder": {
          "doc": "Bitmap pixel order, high bit -> low bit.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_BitmapOrder",
          "kind": "enum"
        },
        "SDL_PackedOrder": {
          "doc": "Packed component order, high bit -> low bit.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PackedOrder",
          "kind": "enum"
        },
        "SDL_ArrayOrder": {
          "doc": "Array component order, low byte -> high byte.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ArrayOrder",
          "kind": "enum"
        },
        "SDL_PackedLayout": {
          "doc": "Packed component layout.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PackedLayout",
          "kind": "enum"
        },
        "SDL_DEFINE_PIXELFOURCC": {
          "doc": "A macro for defining custom FourCC pixel formats.\n\nFor example, defining SDL_PIXELFORMAT_YV12 looks like this:\n\n```c\nSDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2')\n```\n\n\\param A the first character of the FourCC code.\n\\param B the second character of the FourCC code.\n\\param C the third character of the FourCC code.\n\\param D the fourth character of the FourCC code.\n\\returns a format value in the style of SDL_PixelFormat.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_PIXELFOURCC",
          "kind": "def",
          "parameters": [
            "A",
            "B",
            "C",
            "D"
          ]
        },
        "SDL_DEFINE_PIXELFORMAT": {
          "doc": "A macro for defining custom non-FourCC pixel formats.\n\nFor example, defining SDL_PIXELFORMAT_RGBA8888 looks like this:\n\n```c\nSDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4)\n```\n\n\\param type the type of the new format, probably a SDL_PixelType value.\n\\param order the order of the new format, probably a SDL_BitmapOrder,\n             SDL_PackedOrder, or SDL_ArrayOrder value.\n\\param layout the layout of the new format, probably an SDL_PackedLayout\n              value or zero.\n\\param bits the number of bits per pixel of the new format.\n\\param bytes the number of bytes per pixel of the new format.\n\\returns a format value in the style of SDL_PixelFormat.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_PIXELFORMAT",
          "kind": "def",
          "parameters": [
            "type",
            "order",
            "layout",
            "bits",
            "bytes"
          ]
        },
        "SDL_PIXELFLAG": {
          "doc": "A macro to retrieve the flags of an SDL_PixelFormat.\n\nThis macro is generally not needed directly by an app, which should use\nspecific tests, like SDL_ISPIXELFORMAT_FOURCC, instead.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the flags of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELFLAG",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_PIXELTYPE": {
          "doc": "A macro to retrieve the type of an SDL_PixelFormat.\n\nThis is usually a value from the SDL_PixelType enumeration.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the type of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELTYPE",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_PIXELORDER": {
          "doc": "A macro to retrieve the order of an SDL_PixelFormat.\n\nThis is usually a value from the SDL_BitmapOrder, SDL_PackedOrder, or\nSDL_ArrayOrder enumerations, depending on the format type.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the order of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELORDER",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_PIXELLAYOUT": {
          "doc": "A macro to retrieve the layout of an SDL_PixelFormat.\n\nThis is usually a value from the SDL_PackedLayout enumeration, or zero if a\nlayout doesn't make sense for the format type.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the layout of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_PIXELLAYOUT",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_BITSPERPIXEL": {
          "doc": "A macro to determine an SDL_PixelFormat's bits per pixel.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\nFourCC formats will report zero here, as it rarely makes sense to measure\nthem per-pixel.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the bits-per-pixel of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_BYTESPERPIXEL",
          "name": "SDL_BITSPERPIXEL",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_BYTESPERPIXEL": {
          "doc": "A macro to determine an SDL_PixelFormat's bytes per pixel.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\nFourCC formats do their best here, but many of them don't have a meaningful\nmeasurement of bytes per pixel.\n\n\\param format an SDL_PixelFormat to check.\n\\returns the bytes-per-pixel of `format`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_BITSPERPIXEL",
          "name": "SDL_BYTESPERPIXEL",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_INDEXED": {
          "doc": "A macro to determine if an SDL_PixelFormat is an indexed format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is indexed, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_INDEXED",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_PACKED": {
          "doc": "A macro to determine if an SDL_PixelFormat is a packed format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is packed, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_PACKED",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_ARRAY": {
          "doc": "A macro to determine if an SDL_PixelFormat is an array format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is an array, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_ARRAY",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_10BIT": {
          "doc": "A macro to determine if an SDL_PixelFormat is a 10-bit format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is 10-bit, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_10BIT",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_FLOAT": {
          "doc": "A macro to determine if an SDL_PixelFormat is a floating point format.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format is 10-bit, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_FLOAT",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_ALPHA": {
          "doc": "A macro to determine if an SDL_PixelFormat has an alpha channel.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format has alpha, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_ALPHA",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_ISPIXELFORMAT_FOURCC": {
          "doc": "A macro to determine if an SDL_PixelFormat is a \"FourCC\" format.\n\nThis covers custom and other unusual formats.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param format an SDL_PixelFormat to check.\n\\returns true if the format has alpha, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISPIXELFORMAT_FOURCC",
          "kind": "def",
          "parameters": [
            "format"
          ]
        },
        "SDL_PixelFormat": {
          "doc": "Pixel format.\n\nSDL's pixel formats have the following naming convention:\n\n- Names with a list of components and a single bit count, such as RGB24 and\n  ABGR32, define a platform-independent encoding into bytes in the order\n  specified. For example, in RGB24 data, each pixel is encoded in 3 bytes\n  (red, green, blue) in that order, and in ABGR32 data, each pixel is\n  encoded in 4 bytes alpha, blue, green, red) in that order. Use these\n  names if the property of a format that is important to you is the order\n  of the bytes in memory or on disk.\n- Names with a bit count per component, such as ARGB8888 and XRGB1555, are\n  \"packed\" into an appropriately-sized integer in the platform's native\n  endianness. For example, ARGB8888 is a sequence of 32-bit integers; in\n  each integer, the most significant bits are alpha, and the least\n  significant bits are blue. On a little-endian CPU such as x86, the least\n  significant bits of each integer are arranged first in memory, but on a\n  big-endian CPU such as s390x, the most significant bits are arranged\n  first. Use these names if the property of a format that is important to\n  you is the meaning of each bit position within a native-endianness\n  integer.\n- In indexed formats such as INDEX4LSB, each pixel is represented by\n  encoding an index into the palette into the indicated number of bits,\n  with multiple pixels packed into each byte if appropriate. In LSB\n  formats, the first (leftmost) pixel is stored in the least-significant\n  bits of the byte; in MSB formats, it's stored in the most-significant\n  bits. INDEX8 does not need LSB/MSB variants, because each pixel exactly\n  fills one byte.\n\nThe 32-bit byte-array encodings such as RGBA32 are aliases for the\nappropriate 8888 encoding for the current platform. For example, RGBA32 is\nan alias for ABGR8888 on little-endian CPUs like x86, or an alias for\nRGBA8888 on big-endian CPUs.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PixelFormat",
          "kind": "enum"
        },
        "SDL_ColorType": {
          "doc": "Colorspace color type.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ColorType",
          "kind": "enum"
        },
        "SDL_ColorRange": {
          "doc": "Colorspace color range, as described by\nhttps://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ColorRange",
          "kind": "enum"
        },
        "SDL_ColorPrimaries": {
          "doc": "Colorspace color primaries, as described by\nhttps://www.itu.int/rec/T-REC-H.273-201612-S/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ColorPrimaries",
          "kind": "enum"
        },
        "SDL_TransferCharacteristics": {
          "doc": "Colorspace transfer characteristics.\n\nThese are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_TransferCharacteristics",
          "kind": "enum"
        },
        "SDL_MatrixCoefficients": {
          "doc": "Colorspace matrix coefficients.\n\nThese are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_MatrixCoefficients",
          "kind": "enum"
        },
        "SDL_ChromaLocation": {
          "doc": "Colorspace chroma sample location.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ChromaLocation",
          "kind": "enum"
        },
        "SDL_DEFINE_COLORSPACE": {
          "doc": "A macro for defining custom SDL_Colorspace formats.\n\nFor example, defining SDL_COLORSPACE_SRGB looks like this:\n\n```c\nSDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,\n                      SDL_COLOR_RANGE_FULL,\n                      SDL_COLOR_PRIMARIES_BT709,\n                      SDL_TRANSFER_CHARACTERISTICS_SRGB,\n                      SDL_MATRIX_COEFFICIENTS_IDENTITY,\n                      SDL_CHROMA_LOCATION_NONE)\n```\n\n\\param type the type of the new format, probably an SDL_ColorType value.\n\\param range the range of the new format, probably a SDL_ColorRange value.\n\\param primaries the primaries of the new format, probably an\n                 SDL_ColorPrimaries value.\n\\param transfer the transfer characteristics of the new format, probably an\n                SDL_TransferCharacteristics value.\n\\param matrix the matrix coefficients of the new format, probably an\n              SDL_MatrixCoefficients value.\n\\param chroma the chroma sample location of the new format, probably an\n              SDL_ChromaLocation value.\n\\returns a format value in the style of SDL_Colorspace.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_DEFINE_COLORSPACE",
          "kind": "def",
          "parameters": [
            "type",
            "range",
            "primaries",
            "transfer",
            "matrix",
            "chroma"
          ]
        },
        "SDL_COLORSPACETYPE": {
          "doc": "A macro to retrieve the type of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ColorType for `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACETYPE",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_COLORSPACERANGE": {
          "doc": "A macro to retrieve the range of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ColorRange of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACERANGE",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_COLORSPACECHROMA": {
          "doc": "A macro to retrieve the chroma sample location of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ChromaLocation of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACECHROMA",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_COLORSPACEPRIMARIES": {
          "doc": "A macro to retrieve the primaries of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_ColorPrimaries of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACEPRIMARIES",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_COLORSPACETRANSFER": {
          "doc": "A macro to retrieve the transfer characteristics of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_TransferCharacteristics of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACETRANSFER",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_COLORSPACEMATRIX": {
          "doc": "A macro to retrieve the matrix coefficients of an SDL_Colorspace.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns the SDL_MatrixCoefficients of `cspace`.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_COLORSPACEMATRIX",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_ISCOLORSPACE_MATRIX_BT601": {
          "doc": "A macro to determine if an SDL_Colorspace uses BT601 (or BT470BG) matrix\ncoefficients.\n\nNote that this macro double-evaluates its parameter, so do not use\nexpressions with side-effects here.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if BT601 or BT470BG, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_MATRIX_BT601",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_ISCOLORSPACE_MATRIX_BT709": {
          "doc": "A macro to determine if an SDL_Colorspace uses BT709 matrix coefficients.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if BT709, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_MATRIX_BT709",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_ISCOLORSPACE_MATRIX_BT2020_NCL": {
          "doc": "A macro to determine if an SDL_Colorspace uses BT2020_NCL matrix\ncoefficients.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if BT2020_NCL, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_MATRIX_BT2020_NCL",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_ISCOLORSPACE_LIMITED_RANGE": {
          "doc": "A macro to determine if an SDL_Colorspace has a limited range.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if limited range, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_LIMITED_RANGE",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_ISCOLORSPACE_FULL_RANGE": {
          "doc": "A macro to determine if an SDL_Colorspace has a full range.\n\n\\param cspace an SDL_Colorspace to check.\n\\returns true if full range, false otherwise.\n\n\\threadsafety It is safe to call this macro from any thread.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_ISCOLORSPACE_FULL_RANGE",
          "kind": "def",
          "parameters": [
            "cspace"
          ]
        },
        "SDL_Colorspace": {
          "doc": "Colorspace definitions.\n\nSince similar colorspaces may vary in their details (matrix, transfer\nfunction, etc.), this is not an exhaustive list, but rather a\nrepresentative sample of the kinds of colorspaces supported in SDL.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_ColorPrimaries\n\\sa SDL_ColorRange\n\\sa SDL_ColorType\n\\sa SDL_MatrixCoefficients\n\\sa SDL_TransferCharacteristics",
          "name": "SDL_Colorspace",
          "kind": "enum"
        },
        "SDL_Color": {
          "doc": "A structure that represents a color as RGBA components.\n\nThe bits of this structure can be directly reinterpreted as an\ninteger-packed color which uses the SDL_PIXELFORMAT_RGBA32 format\n(SDL_PIXELFORMAT_ABGR8888 on little-endian systems and\nSDL_PIXELFORMAT_RGBA8888 on big-endian systems).\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Color",
          "kind": "struct",
          "entries": {
            "r": {
              "doc": "",
              "name": "r",
              "kind": "var",
              "type": "Uint8"
            },
            "g": {
              "doc": "",
              "name": "g",
              "kind": "var",
              "type": "Uint8"
            },
            "b": {
              "doc": "",
              "name": "b",
              "kind": "var",
              "type": "Uint8"
            },
            "a": {
              "doc": "",
              "name": "a",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_FColor": {
          "doc": "The bits of this structure can be directly reinterpreted as a float-packed\ncolor which uses the SDL_PIXELFORMAT_RGBA128_FLOAT format\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_FColor",
          "kind": "struct",
          "entries": {
            "r": {
              "doc": "",
              "name": "r",
              "kind": "var",
              "type": "float"
            },
            "g": {
              "doc": "",
              "name": "g",
              "kind": "var",
              "type": "float"
            },
            "b": {
              "doc": "",
              "name": "b",
              "kind": "var",
              "type": "float"
            },
            "a": {
              "doc": "",
              "name": "a",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_Palette": {
          "doc": "A set of indexed colors representing a palette.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_SetPaletteColors",
          "name": "SDL_Palette",
          "kind": "struct",
          "entries": {
            "ncolors": {
              "doc": "",
              "name": "ncolors",
              "kind": "var",
              "type": "int"
            },
            "colors": {
              "doc": "",
              "name": "colors",
              "kind": "var",
              "type": "SDL_Color *"
            },
            "version": {
              "doc": "",
              "name": "version",
              "kind": "var",
              "type": "Uint32"
            },
            "refcount": {
              "doc": "",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_PixelFormatDetails": {
          "doc": "Details about the format of a pixel.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_PixelFormatDetails",
          "kind": "struct",
          "entries": {
            "format": {
              "doc": "",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "bits_per_pixel": {
              "doc": "",
              "name": "bits_per_pixel",
              "kind": "var",
              "type": "Uint8"
            },
            "bytes_per_pixel": {
              "doc": "",
              "name": "bytes_per_pixel",
              "kind": "var",
              "type": "Uint8"
            },
            "padding": {
              "doc": "",
              "name": "padding",
              "kind": "var",
              "type": "Uint8"
            },
            "Rmask": {
              "doc": "",
              "name": "Rmask",
              "kind": "var",
              "type": "Uint32"
            },
            "Gmask": {
              "doc": "",
              "name": "Gmask",
              "kind": "var",
              "type": "Uint32"
            },
            "Bmask": {
              "doc": "",
              "name": "Bmask",
              "kind": "var",
              "type": "Uint32"
            },
            "Amask": {
              "doc": "",
              "name": "Amask",
              "kind": "var",
              "type": "Uint32"
            },
            "Rbits": {
              "doc": "",
              "name": "Rbits",
              "kind": "var",
              "type": "Uint8"
            },
            "Gbits": {
              "doc": "",
              "name": "Gbits",
              "kind": "var",
              "type": "Uint8"
            },
            "Bbits": {
              "doc": "",
              "name": "Bbits",
              "kind": "var",
              "type": "Uint8"
            },
            "Abits": {
              "doc": "",
              "name": "Abits",
              "kind": "var",
              "type": "Uint8"
            },
            "Rshift": {
              "doc": "",
              "name": "Rshift",
              "kind": "var",
              "type": "Uint8"
            },
            "Gshift": {
              "doc": "",
              "name": "Gshift",
              "kind": "var",
              "type": "Uint8"
            },
            "Bshift": {
              "doc": "",
              "name": "Bshift",
              "kind": "var",
              "type": "Uint8"
            },
            "Ashift": {
              "doc": "",
              "name": "Ashift",
              "kind": "var",
              "type": "Uint8"
            }
          }
        },
        "SDL_GetPixelFormatName": {
          "doc": "Get the human readable name of a pixel format.\n\n\\param format the pixel format to query.\n\\returns the human readable name of the specified pixel format or\n         \"SDL_PIXELFORMAT_UNKNOWN\" if the format isn't recognized.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPixelFormatName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_GetMasksForPixelFormat": {
          "doc": "Convert one of the enumerated pixel formats to a bpp value and RGBA masks.\n\n\\param format one of the SDL_PixelFormat values.\n\\param bpp a bits per pixel value; usually 15, 16, or 32.\n\\param Rmask a pointer filled in with the red mask for the format.\n\\param Gmask a pointer filled in with the green mask for the format.\n\\param Bmask a pointer filled in with the blue mask for the format.\n\\param Amask a pointer filled in with the alpha mask for the format.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatForMasks",
          "name": "SDL_GetMasksForPixelFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "bpp",
              "type": "int *"
            },
            {
              "name": "Rmask",
              "type": "Uint32 *"
            },
            {
              "name": "Gmask",
              "type": "Uint32 *"
            },
            {
              "name": "Bmask",
              "type": "Uint32 *"
            },
            {
              "name": "Amask",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_GetPixelFormatForMasks": {
          "doc": "Convert a bpp value and RGBA masks to an enumerated pixel format.\n\nThis will return `SDL_PIXELFORMAT_UNKNOWN` if the conversion wasn't\npossible.\n\n\\param bpp a bits per pixel value; usually 15, 16, or 32.\n\\param Rmask the red mask for the format.\n\\param Gmask the green mask for the format.\n\\param Bmask the blue mask for the format.\n\\param Amask the alpha mask for the format.\n\\returns the SDL_PixelFormat value corresponding to the format masks, or\n         SDL_PIXELFORMAT_UNKNOWN if there isn't a match.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetMasksForPixelFormat",
          "name": "SDL_GetPixelFormatForMasks",
          "kind": "function",
          "type": "SDL_PixelFormat",
          "parameters": [
            {
              "name": "bpp",
              "type": "int"
            },
            {
              "name": "Rmask",
              "type": "Uint32"
            },
            {
              "name": "Gmask",
              "type": "Uint32"
            },
            {
              "name": "Bmask",
              "type": "Uint32"
            },
            {
              "name": "Amask",
              "type": "Uint32"
            }
          ]
        },
        "SDL_GetPixelFormatDetails": {
          "doc": "Create an SDL_PixelFormatDetails structure corresponding to a pixel format.\n\nReturned structure may come from a shared global cache (i.e. not newly\nallocated), and hence should not be modified, especially the palette. Weird\nerrors such as `Blit combination not supported` may occur.\n\n\\param format one of the SDL_PixelFormat values.\n\\returns a pointer to a SDL_PixelFormatDetails structure or NULL on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetPixelFormatDetails",
          "kind": "function",
          "type": "const SDL_PixelFormatDetails *",
          "parameters": [
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_CreatePalette": {
          "doc": "Create a palette structure with the specified number of color entries.\n\nThe palette entries are initialized to white.\n\n\\param ncolors represents the number of color entries in the color palette.\n\\returns a new SDL_Palette structure on success or NULL on failure (e.g. if\n         there wasn't enough memory); call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyPalette\n\\sa SDL_SetPaletteColors\n\\sa SDL_SetSurfacePalette",
          "name": "SDL_CreatePalette",
          "kind": "function",
          "type": "SDL_Palette *",
          "parameters": [
            {
              "name": "ncolors",
              "type": "int"
            }
          ]
        },
        "SDL_SetPaletteColors": {
          "doc": "Set a range of colors in a palette.\n\n\\param palette the SDL_Palette structure to modify.\n\\param colors an array of SDL_Color structures to copy into the palette.\n\\param firstcolor the index of the first palette entry to modify.\n\\param ncolors the number of entries to modify.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified or destroyed in another thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetPaletteColors",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "palette",
              "type": "SDL_Palette *"
            },
            {
              "name": "colors",
              "type": "const SDL_Color *"
            },
            {
              "name": "firstcolor",
              "type": "int"
            },
            {
              "name": "ncolors",
              "type": "int"
            }
          ]
        },
        "SDL_DestroyPalette": {
          "doc": "Free a palette created with SDL_CreatePalette().\n\n\\param palette the SDL_Palette structure to be freed.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified or destroyed in another thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePalette",
          "name": "SDL_DestroyPalette",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "palette",
              "type": "SDL_Palette *"
            }
          ]
        },
        "SDL_MapRGB": {
          "doc": "Map an RGB triple to an opaque pixel value for a given pixel format.\n\nThis function maps the RGB color value to the specified pixel format and\nreturns the pixel value best approximating the given RGB color value for\nthe given pixel format.\n\nIf the format has a palette (8-bit) the index of the closest matching color\nin the palette will be returned.\n\nIf the specified pixel format has an alpha component it will be returned as\nall 1 bits (fully opaque).\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGB\n\\sa SDL_MapRGBA\n\\sa SDL_MapSurfaceRGB",
          "name": "SDL_MapRGB",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_MapRGBA": {
          "doc": "Map an RGBA quadruple to a pixel value for a given pixel format.\n\nThis function maps the RGBA color value to the specified pixel format and\nreturns the pixel value best approximating the given RGBA color value for\nthe given pixel format.\n\nIf the specified pixel format has no alpha component the alpha value will\nbe ignored (as it will be in formats with a palette).\n\nIf the format has a palette (8-bit) the index of the closest matching color\nin the palette will be returned.\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\param a the alpha component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGBA\n\\sa SDL_MapRGB\n\\sa SDL_MapSurfaceRGBA",
          "name": "SDL_MapRGBA",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_GetRGB": {
          "doc": "Get RGB values from a pixel in the specified format.\n\nThis function uses the entire 8-bit [0..255] range when converting color\ncomponents from pixel formats with less than 8-bits per RGB component\n(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n\n\\param pixel a pixel value.\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r a pointer filled in with the red component, may be NULL.\n\\param g a pointer filled in with the green component, may be NULL.\n\\param b a pointer filled in with the blue component, may be NULL.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGBA\n\\sa SDL_MapRGB\n\\sa SDL_MapRGBA",
          "name": "SDL_GetRGB",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "pixel",
              "type": "Uint32"
            },
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetRGBA": {
          "doc": "Get RGBA values from a pixel in the specified format.\n\nThis function uses the entire 8-bit [0..255] range when converting color\ncomponents from pixel formats with less than 8-bits per RGB component\n(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n\nIf the surface has no alpha component, the alpha will be returned as 0xff\n(100% opaque).\n\n\\param pixel a pixel value.\n\\param format a pointer to SDL_PixelFormatDetails describing the pixel\n              format.\n\\param palette an optional palette for indexed formats, may be NULL.\n\\param r a pointer filled in with the red component, may be NULL.\n\\param g a pointer filled in with the green component, may be NULL.\n\\param b a pointer filled in with the blue component, may be NULL.\n\\param a a pointer filled in with the alpha component, may be NULL.\n\n\\threadsafety It is safe to call this function from any thread, as long as\n              the palette is not modified.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPixelFormatDetails\n\\sa SDL_GetRGB\n\\sa SDL_MapRGB\n\\sa SDL_MapRGBA",
          "name": "SDL_GetRGBA",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "pixel",
              "type": "Uint32"
            },
            {
              "name": "format",
              "type": "const SDL_PixelFormatDetails *"
            },
            {
              "name": "palette",
              "type": "const SDL_Palette *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        }
      }
    },
    "SDL_blendmode.h": {
      "name": "SDL_blendmode.h",
      "doc": "# CategoryBlendmode\n\nBlend modes decide how two colors will mix together. There are both\nstandard modes for basic needs and a means to create custom modes,\ndictating what sort of math to do on what color components.",
      "entries": {
        "SDL_BlendMode": {
          "doc": "A set of blend modes used in drawing operations.\n\nThese predefined blend modes are supported everywhere.\n\nAdditional values may be obtained from SDL_ComposeCustomBlendMode.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_ComposeCustomBlendMode",
          "name": "SDL_BlendMode",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_BLENDMODE_NONE": {
          "doc": "",
          "name": "SDL_BLENDMODE_NONE",
          "kind": "def"
        },
        "SDL_BLENDMODE_BLEND": {
          "doc": "",
          "name": "SDL_BLENDMODE_BLEND",
          "kind": "def"
        },
        "SDL_BLENDMODE_BLEND_PREMULTIPLIED": {
          "doc": "",
          "name": "SDL_BLENDMODE_BLEND_PREMULTIPLIED",
          "kind": "def"
        },
        "SDL_BLENDMODE_ADD": {
          "doc": "",
          "name": "SDL_BLENDMODE_ADD",
          "kind": "def"
        },
        "SDL_BLENDMODE_ADD_PREMULTIPLIED": {
          "doc": "",
          "name": "SDL_BLENDMODE_ADD_PREMULTIPLIED",
          "kind": "def"
        },
        "SDL_BLENDMODE_MOD": {
          "doc": "",
          "name": "SDL_BLENDMODE_MOD",
          "kind": "def"
        },
        "SDL_BLENDMODE_MUL": {
          "doc": "",
          "name": "SDL_BLENDMODE_MUL",
          "kind": "def"
        },
        "SDL_BLENDMODE_INVALID": {
          "doc": "",
          "name": "SDL_BLENDMODE_INVALID",
          "kind": "def"
        },
        "SDL_BlendOperation": {
          "doc": "The blend operation used when combining source and destination pixel\ncomponents.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_BlendOperation",
          "kind": "enum"
        },
        "SDL_BlendFactor": {
          "doc": "The normalized factor used to multiply pixel components.\n\nThe blend factors are multiplied with the pixels from a drawing operation\n(src) and the pixels from the render target (dst) before the blend\noperation. The comma-separated factors listed above are always applied in\nthe component order red, green, blue, and alpha.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_BlendFactor",
          "kind": "enum"
        },
        "SDL_ComposeCustomBlendMode": {
          "doc": "Compose a custom blend mode for renderers.\n\nThe functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept\nthe SDL_BlendMode returned by this function if the renderer supports it.\n\nA blend mode controls how the pixels from a drawing operation (source) get\ncombined with the pixels from the render target (destination). First, the\ncomponents of the source and destination pixels get multiplied with their\nblend factors. Then, the blend operation takes the two products and\ncalculates the result that will get stored in the render target.\n\nExpressed in pseudocode, it would look like this:\n\n```c\ndstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);\ndstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);\n```\n\nWhere the functions `colorOperation(src, dst)` and `alphaOperation(src,\ndst)` can return one of the following:\n\n- `src + dst`\n- `src - dst`\n- `dst - src`\n- `min(src, dst)`\n- `max(src, dst)`\n\nThe red, green, and blue components are always multiplied with the first,\nsecond, and third components of the SDL_BlendFactor, respectively. The\nfourth component is not used.\n\nThe alpha component is always multiplied with the fourth component of the\nSDL_BlendFactor. The other components are not used in the alpha\ncalculation.\n\nSupport for these blend modes varies for each renderer. To check if a\nspecific SDL_BlendMode is supported, create a renderer and pass it to\neither SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will\nreturn with an error if the blend mode is not supported.\n\nThis list describes the support of custom blend modes for each renderer.\nAll renderers support the four blend modes listed in the SDL_BlendMode\nenumeration.\n\n- **direct3d**: Supports all operations with all factors. However, some\n  factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and\n  `SDL_BLENDOPERATION_MAXIMUM`.\n- **direct3d11**: Same as Direct3D 9.\n- **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all\n  factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly here.\n- **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,\n  `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`\n  operations with all factors.\n- **psp**: No custom blend mode support.\n- **software**: No custom blend mode support.\n\nSome renderers do not provide an alpha component for the default render\ntarget. The `SDL_BLENDFACTOR_DST_ALPHA` and\n`SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this\ncase.\n\n\\param srcColorFactor the SDL_BlendFactor applied to the red, green, and\n                      blue components of the source pixels.\n\\param dstColorFactor the SDL_BlendFactor applied to the red, green, and\n                      blue components of the destination pixels.\n\\param colorOperation the SDL_BlendOperation used to combine the red,\n                      green, and blue components of the source and\n                      destination pixels.\n\\param srcAlphaFactor the SDL_BlendFactor applied to the alpha component of\n                      the source pixels.\n\\param dstAlphaFactor the SDL_BlendFactor applied to the alpha component of\n                      the destination pixels.\n\\param alphaOperation the SDL_BlendOperation used to combine the alpha\n                      component of the source and destination pixels.\n\\returns an SDL_BlendMode that represents the chosen factors and\n         operations.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawBlendMode\n\\sa SDL_GetRenderDrawBlendMode\n\\sa SDL_SetTextureBlendMode\n\\sa SDL_GetTextureBlendMode",
          "name": "SDL_ComposeCustomBlendMode",
          "kind": "function",
          "type": "SDL_BlendMode",
          "parameters": [
            {
              "name": "srcColorFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "dstColorFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "colorOperation",
              "type": "SDL_BlendOperation"
            },
            {
              "name": "srcAlphaFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "dstAlphaFactor",
              "type": "SDL_BlendFactor"
            },
            {
              "name": "alphaOperation",
              "type": "SDL_BlendOperation"
            }
          ]
        }
      }
    },
    "SDL_properties.h": {
      "name": "SDL_properties.h",
      "doc": "# CategoryProperties\n\nA property is a variable that can be created and retrieved by name at\nruntime.\n\nAll properties are part of a property group (SDL_PropertiesID). A property\ngroup can be created with the SDL_CreateProperties function and destroyed\nwith the SDL_DestroyProperties function.\n\nProperties can be added to and retrieved from a property group through the\nfollowing functions:\n\n- SDL_SetPointerProperty and SDL_GetPointerProperty operate on `void*`\n  pointer types.\n- SDL_SetStringProperty and SDL_GetStringProperty operate on string types.\n- SDL_SetNumberProperty and SDL_GetNumberProperty operate on signed 64-bit\n  integer types.\n- SDL_SetFloatProperty and SDL_GetFloatProperty operate on floating point\n  types.\n- SDL_SetBooleanProperty and SDL_GetBooleanProperty operate on boolean\n  types.\n\nProperties can be removed from a group by using SDL_ClearProperty.",
      "entries": {
        "SDL_PropertiesID": {
          "doc": "SDL properties ID\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_PropertiesID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_PropertyType": {
          "doc": "SDL property type\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_PropertyType",
          "kind": "enum"
        },
        "SDL_GetGlobalProperties": {
          "doc": "Get the global SDL properties.\n\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetGlobalProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": []
        },
        "SDL_CreateProperties": {
          "doc": "Create a group of properties.\n\nAll properties are automatically destroyed when SDL_Quit() is called.\n\n\\returns an ID for a new group of properties, or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyProperties",
          "name": "SDL_CreateProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": []
        },
        "SDL_CopyProperties": {
          "doc": "Copy a group of properties.\n\nCopy all the properties from one group of properties to another, with the\nexception of properties requiring cleanup (set using\nSDL_SetPointerPropertyWithCleanup()), which will not be copied. Any\nproperty that already exists on `dst` will be overwritten.\n\n\\param src the properties to copy.\n\\param dst the destination properties.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_CopyProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "dst",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_LockProperties": {
          "doc": "Lock a group of properties.\n\nObtain a multi-threaded lock for these properties. Other threads will wait\nwhile trying to lock these properties until they are unlocked. Properties\nmust be unlocked before they are destroyed.\n\nThe lock is automatically taken when setting individual properties, this\nfunction is only needed when you want to set several properties atomically\nor want to guarantee that properties being queried aren't freed in another\nthread.\n\n\\param props the properties to lock.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UnlockProperties",
          "name": "SDL_LockProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_UnlockProperties": {
          "doc": "Unlock a group of properties.\n\n\\param props the properties to unlock.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockProperties",
          "name": "SDL_UnlockProperties",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_CleanupPropertyCallback": {
          "doc": "A callback used to free resources when a property is deleted.\n\nThis should release any resources associated with `value` that are no\nlonger needed.\n\nThis callback is set per-property. Different properties in the same group\ncan have different cleanup callbacks.\n\nThis callback will be called _during_ SDL_SetPointerPropertyWithCleanup if\nthe function fails for any reason.\n\n\\param userdata an app-defined pointer passed to the callback.\n\\param value the pointer assigned to the property to clean up.\n\n\\threadsafety This callback may fire without any locks held; if this is a\n              concern, the app should provide its own locking.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_SetPointerPropertyWithCleanup",
          "name": "SDL_CleanupPropertyCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "value",
              "type": "void *"
            }
          ]
        },
        "SDL_SetPointerPropertyWithCleanup": {
          "doc": "Set a pointer property in a group of properties with a cleanup function\nthat is called when the property is deleted.\n\nThe cleanup function is also called if setting the property fails for any\nreason.\n\nFor simply setting basic data types, like numbers, bools, or strings, use\nSDL_SetNumberProperty, SDL_SetBooleanProperty, or SDL_SetStringProperty\ninstead, as those functions will handle cleanup on your behalf. This\nfunction is only for more complex, custom data.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property, or NULL to delete the property.\n\\param cleanup the function to call when this property is deleted, or NULL\n               if no cleanup is necessary.\n\\param userdata a pointer that is passed to the cleanup function.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPointerProperty\n\\sa SDL_SetPointerProperty\n\\sa SDL_CleanupPropertyCallback",
          "name": "SDL_SetPointerPropertyWithCleanup",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "void *"
            },
            {
              "name": "cleanup",
              "type": "SDL_CleanupPropertyCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_SetPointerProperty": {
          "doc": "Set a pointer property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property, or NULL to delete the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPointerProperty\n\\sa SDL_HasProperty\n\\sa SDL_SetBooleanProperty\n\\sa SDL_SetFloatProperty\n\\sa SDL_SetNumberProperty\n\\sa SDL_SetPointerPropertyWithCleanup\n\\sa SDL_SetStringProperty",
          "name": "SDL_SetPointerProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "void *"
            }
          ]
        },
        "SDL_SetStringProperty": {
          "doc": "Set a string property in a group of properties.\n\nThis function makes a copy of the string; the caller does not have to\npreserve the data after this call completes.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property, or NULL to delete the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetStringProperty",
          "name": "SDL_SetStringProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            }
          ]
        },
        "SDL_SetNumberProperty": {
          "doc": "Set an integer property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumberProperty",
          "name": "SDL_SetNumberProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "Sint64"
            }
          ]
        },
        "SDL_SetFloatProperty": {
          "doc": "Set a floating point property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetFloatProperty",
          "name": "SDL_SetFloatProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "float"
            }
          ]
        },
        "SDL_SetBooleanProperty": {
          "doc": "Set a boolean property in a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to modify.\n\\param value the new value of the property.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetBooleanProperty",
          "name": "SDL_SetBooleanProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ]
        },
        "SDL_HasProperty": {
          "doc": "Return whether a property exists in a group of properties.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\returns true if the property exists, or false if it doesn't.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType",
          "name": "SDL_HasProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetPropertyType": {
          "doc": "Get the type of a property in a group of properties.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\returns the type of the property, or SDL_PROPERTY_TYPE_INVALID if it is\n         not set.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasProperty",
          "name": "SDL_GetPropertyType",
          "kind": "function",
          "type": "SDL_PropertyType",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetPointerProperty": {
          "doc": "Get a pointer property from a group of properties.\n\nBy convention, the names of properties that SDL exposes on objects will\nstart with \"SDL.\", and properties that SDL uses internally will start with\n\"SDL.internal.\". These should be considered read-only and should not be\nmodified by applications.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a pointer property.\n\n\\threadsafety It is safe to call this function from any thread, although\n              the data returned is not protected and could potentially be\n              freed if you call SDL_SetPointerProperty() or\n              SDL_ClearProperty() on these properties from another thread.\n              If you need to avoid this, use SDL_LockProperties() and\n              SDL_UnlockProperties().\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetBooleanProperty\n\\sa SDL_GetFloatProperty\n\\sa SDL_GetNumberProperty\n\\sa SDL_GetPropertyType\n\\sa SDL_GetStringProperty\n\\sa SDL_HasProperty\n\\sa SDL_SetPointerProperty",
          "name": "SDL_GetPointerProperty",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "void *"
            }
          ]
        },
        "SDL_GetStringProperty": {
          "doc": "Get a string property from a group of properties.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a string property.\n\n\\threadsafety It is safe to call this function from any thread, although\n              the data returned is not protected and could potentially be\n              freed if you call SDL_SetStringProperty() or\n              SDL_ClearProperty() on these properties from another thread.\n              If you need to avoid this, use SDL_LockProperties() and\n              SDL_UnlockProperties().\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetStringProperty",
          "name": "SDL_GetStringProperty",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetNumberProperty": {
          "doc": "Get a number property from a group of properties.\n\nYou can use SDL_GetPropertyType() to query whether the property exists and\nis a number property.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a number property.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetNumberProperty",
          "name": "SDL_GetNumberProperty",
          "kind": "function",
          "type": "Sint64",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "Sint64"
            }
          ]
        },
        "SDL_GetFloatProperty": {
          "doc": "Get a floating point property from a group of properties.\n\nYou can use SDL_GetPropertyType() to query whether the property exists and\nis a floating point property.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a float property.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetFloatProperty",
          "name": "SDL_GetFloatProperty",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "float"
            }
          ]
        },
        "SDL_GetBooleanProperty": {
          "doc": "Get a boolean property from a group of properties.\n\nYou can use SDL_GetPropertyType() to query whether the property exists and\nis a boolean property.\n\n\\param props the properties to query.\n\\param name the name of the property to query.\n\\param default_value the default value of the property.\n\\returns the value of the property, or `default_value` if it is not set or\n         not a boolean property.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetPropertyType\n\\sa SDL_HasProperty\n\\sa SDL_SetBooleanProperty",
          "name": "SDL_GetBooleanProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "default_value",
              "type": "bool"
            }
          ]
        },
        "SDL_ClearProperty": {
          "doc": "Clear a property from a group of properties.\n\n\\param props the properties to modify.\n\\param name the name of the property to clear.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ClearProperty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumeratePropertiesCallback": {
          "doc": "A callback used to enumerate all the properties in a group of properties.\n\nThis callback is called from SDL_EnumerateProperties(), and is called once\nper property in the set.\n\n\\param userdata an app-defined pointer passed to the callback.\n\\param props the SDL_PropertiesID that is being enumerated.\n\\param name the next property name in the enumeration.\n\n\\threadsafety SDL_EnumerateProperties holds a lock on `props` during this\n              callback.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EnumerateProperties",
          "name": "SDL_EnumeratePropertiesCallback",
          "kind": "callback",
          "type": "void",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_EnumerateProperties": {
          "doc": "Enumerate the properties contained in a group of properties.\n\nThe callback function is called for each property in the group of\nproperties. The properties are locked during enumeration.\n\n\\param props the properties to query.\n\\param callback the function to call for each property.\n\\param userdata a pointer that is passed to `callback`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EnumerateProperties",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "callback",
              "type": "SDL_EnumeratePropertiesCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_DestroyProperties": {
          "doc": "Destroy a group of properties.\n\nAll properties are deleted and their cleanup functions will be called, if\nany.\n\n\\param props the properties to destroy.\n\n\\threadsafety This function should not be called while these properties are\n              locked or other threads might be setting or getting values\n              from these properties.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties",
          "name": "SDL_DestroyProperties",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        }
      }
    },
    "SDL_rect.h": {
      "name": "SDL_rect.h",
      "doc": "# CategoryRect\n\nSome helper functions for managing rectangles and 2D points, in both\ninteger and floating point versions.",
      "entries": {
        "SDL_Point": {
          "doc": "The structure that defines a point (using integers).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetRectEnclosingPoints\n\\sa SDL_PointInRect",
          "name": "SDL_Point",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "int"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_FPoint": {
          "doc": "The structure that defines a point (using floating point values).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetRectEnclosingPointsFloat\n\\sa SDL_PointInRectFloat",
          "name": "SDL_FPoint",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_Rect": {
          "doc": "A rectangle, with the origin at the upper left (using integers).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_RectEmpty\n\\sa SDL_RectsEqual\n\\sa SDL_HasRectIntersection\n\\sa SDL_GetRectIntersection\n\\sa SDL_GetRectAndLineIntersection\n\\sa SDL_GetRectUnion\n\\sa SDL_GetRectEnclosingPoints",
          "name": "SDL_Rect",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "int"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_FRect": {
          "doc": "A rectangle, with the origin at the upper left (using floating point\nvalues).\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_RectEmptyFloat\n\\sa SDL_RectsEqualFloat\n\\sa SDL_RectsEqualEpsilon\n\\sa SDL_HasRectIntersectionFloat\n\\sa SDL_GetRectIntersectionFloat\n\\sa SDL_GetRectAndLineIntersectionFloat\n\\sa SDL_GetRectUnionFloat\n\\sa SDL_GetRectEnclosingPointsFloat\n\\sa SDL_PointInRectFloat",
          "name": "SDL_FRect",
          "kind": "struct",
          "entries": {
            "x": {
              "doc": "",
              "name": "x",
              "kind": "var",
              "type": "float"
            },
            "y": {
              "doc": "",
              "name": "y",
              "kind": "var",
              "type": "float"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "float"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "float"
            }
          }
        },
        "SDL_RectToFRect": {
          "doc": "Convert an SDL_Rect to SDL_FRect\n\n\\param rect a pointer to an SDL_Rect.\n\\param frect a pointer filled in with the floating point representation of\n             `rect`.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectToFRect",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "frect",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_PointInRect": {
          "doc": "Determine whether a point resides inside a rectangle.\n\nA point is considered part of a rectangle if both `p` and `r` are not NULL,\nand `p`'s x and y coordinates are >= to the rectangle's top left corner,\nand < the rectangle's x+w and y+h. So a 1x1 rectangle considers point (0,0)\nas \"inside\" and (0,1) as not.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param p the point to test.\n\\param r the rectangle to test.\n\\returns true if `p` is contained by `r`, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PointInRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "p",
              "type": "const SDL_Point *"
            },
            {
              "name": "r",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_RectEmpty": {
          "doc": "Determine whether a rectangle has no area.\n\nA rectangle is considered \"empty\" for this function if `r` is NULL, or if\n`r`'s width and/or height are <= 0.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param r the rectangle to test.\n\\returns true if the rectangle is \"empty\", false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectEmpty",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "r",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_RectsEqual": {
          "doc": "Determine whether two rectangles are equal.\n\nRectangles are considered equal if both are not NULL and each of their x,\ny, width and height match.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param a the first rectangle to test.\n\\param b the second rectangle to test.\n\\returns true if the rectangles are equal, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectsEqual",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "const SDL_Rect *"
            },
            {
              "name": "b",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_HasRectIntersection": {
          "doc": "Determine whether two rectangles intersect.\n\nIf either pointer is NULL the function will return false.\n\n\\param A an SDL_Rect structure representing the first rectangle.\n\\param B an SDL_Rect structure representing the second rectangle.\n\\returns true if there is an intersection, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRectIntersection",
          "name": "SDL_HasRectIntersection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_Rect *"
            },
            {
              "name": "B",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectIntersection": {
          "doc": "Calculate the intersection of two rectangles.\n\nIf `result` is NULL then this function will return false.\n\n\\param A an SDL_Rect structure representing the first rectangle.\n\\param B an SDL_Rect structure representing the second rectangle.\n\\param result an SDL_Rect structure filled in with the intersection of\n              rectangles `A` and `B`.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasRectIntersection",
          "name": "SDL_GetRectIntersection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_Rect *"
            },
            {
              "name": "B",
              "type": "const SDL_Rect *"
            },
            {
              "name": "result",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectUnion": {
          "doc": "Calculate the union of two rectangles.\n\n\\param A an SDL_Rect structure representing the first rectangle.\n\\param B an SDL_Rect structure representing the second rectangle.\n\\param result an SDL_Rect structure filled in with the union of rectangles\n              `A` and `B`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectUnion",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_Rect *"
            },
            {
              "name": "B",
              "type": "const SDL_Rect *"
            },
            {
              "name": "result",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectEnclosingPoints": {
          "doc": "Calculate a minimal rectangle enclosing a set of points.\n\nIf `clip` is not NULL then only points inside of the clipping rectangle are\nconsidered.\n\n\\param points an array of SDL_Point structures representing points to be\n              enclosed.\n\\param count the number of structures in the `points` array.\n\\param clip an SDL_Rect used for clipping or NULL to enclose all points.\n\\param result an SDL_Rect structure filled in with the minimal enclosing\n              rectangle.\n\\returns true if any points were enclosed or false if all the points were\n         outside of the clipping rectangle.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectEnclosingPoints",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "points",
              "type": "const SDL_Point *"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "clip",
              "type": "const SDL_Rect *"
            },
            {
              "name": "result",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetRectAndLineIntersection": {
          "doc": "Calculate the intersection of a rectangle and line segment.\n\nThis function is used to clip a line segment to a rectangle. A line segment\ncontained entirely within the rectangle or that does not intersect will\nremain unchanged. A line segment that crosses the rectangle at either or\nboth ends will be clipped to the boundary of the rectangle and the new\ncoordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.\n\n\\param rect an SDL_Rect structure representing the rectangle to intersect.\n\\param X1 a pointer to the starting X-coordinate of the line.\n\\param Y1 a pointer to the starting Y-coordinate of the line.\n\\param X2 a pointer to the ending X-coordinate of the line.\n\\param Y2 a pointer to the ending Y-coordinate of the line.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectAndLineIntersection",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "X1",
              "type": "int *"
            },
            {
              "name": "Y1",
              "type": "int *"
            },
            {
              "name": "X2",
              "type": "int *"
            },
            {
              "name": "Y2",
              "type": "int *"
            }
          ]
        },
        "SDL_PointInRectFloat": {
          "doc": "Determine whether a point resides inside a floating point rectangle.\n\nA point is considered part of a rectangle if both `p` and `r` are not NULL,\nand `p`'s x and y coordinates are >= to the rectangle's top left corner,\nand <= the rectangle's x+w and y+h. So a 1x1 rectangle considers point\n(0,0) and (0,1) as \"inside\" and (0,2) as not.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param p the point to test.\n\\param r the rectangle to test.\n\\returns true if `p` is contained by `r`, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PointInRectFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "p",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "r",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RectEmptyFloat": {
          "doc": "Determine whether a floating point rectangle can contain any point.\n\nA rectangle is considered \"empty\" for this function if `r` is NULL, or if\n`r`'s width and/or height are < 0.0f.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param r the rectangle to test.\n\\returns true if the rectangle is \"empty\", false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RectEmptyFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "r",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RectsEqualEpsilon": {
          "doc": "Determine whether two floating point rectangles are equal, within some\ngiven epsilon.\n\nRectangles are considered equal if both are not NULL and each of their x,\ny, width and height are within `epsilon` of each other. If you don't know\nwhat value to use for `epsilon`, you should call the SDL_RectsEqualFloat\nfunction instead.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param a the first rectangle to test.\n\\param b the second rectangle to test.\n\\param epsilon the epsilon value for comparison.\n\\returns true if the rectangles are equal, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RectsEqualFloat",
          "name": "SDL_RectsEqualEpsilon",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "const SDL_FRect *"
            },
            {
              "name": "b",
              "type": "const SDL_FRect *"
            },
            {
              "name": "epsilon",
              "type": "const float"
            }
          ]
        },
        "SDL_RectsEqualFloat": {
          "doc": "Determine whether two floating point rectangles are equal, within a default\nepsilon.\n\nRectangles are considered equal if both are not NULL and each of their x,\ny, width and height are within SDL_FLT_EPSILON of each other. This is often\na reasonable way to compare two floating point rectangles and deal with the\nslight precision variations in floating point calculations that tend to pop\nup.\n\nNote that this is a forced-inline function in a header, and not a public\nAPI function available in the SDL library (which is to say, the code is\nembedded in the calling program and the linker and dynamic loader will not\nbe able to find this function inside SDL itself).\n\n\\param a the first rectangle to test.\n\\param b the second rectangle to test.\n\\returns true if the rectangles are equal, false otherwise.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RectsEqualEpsilon",
          "name": "SDL_RectsEqualFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "a",
              "type": "const SDL_FRect *"
            },
            {
              "name": "b",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_HasRectIntersectionFloat": {
          "doc": "Determine whether two rectangles intersect with float precision.\n\nIf either pointer is NULL the function will return false.\n\n\\param A an SDL_FRect structure representing the first rectangle.\n\\param B an SDL_FRect structure representing the second rectangle.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRectIntersection",
          "name": "SDL_HasRectIntersectionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_FRect *"
            },
            {
              "name": "B",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectIntersectionFloat": {
          "doc": "Calculate the intersection of two rectangles with float precision.\n\nIf `result` is NULL then this function will return false.\n\n\\param A an SDL_FRect structure representing the first rectangle.\n\\param B an SDL_FRect structure representing the second rectangle.\n\\param result an SDL_FRect structure filled in with the intersection of\n              rectangles `A` and `B`.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HasRectIntersectionFloat",
          "name": "SDL_GetRectIntersectionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_FRect *"
            },
            {
              "name": "B",
              "type": "const SDL_FRect *"
            },
            {
              "name": "result",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectUnionFloat": {
          "doc": "Calculate the union of two rectangles with float precision.\n\n\\param A an SDL_FRect structure representing the first rectangle.\n\\param B an SDL_FRect structure representing the second rectangle.\n\\param result an SDL_FRect structure filled in with the union of rectangles\n              `A` and `B`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectUnionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "A",
              "type": "const SDL_FRect *"
            },
            {
              "name": "B",
              "type": "const SDL_FRect *"
            },
            {
              "name": "result",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectEnclosingPointsFloat": {
          "doc": "Calculate a minimal rectangle enclosing a set of points with float\nprecision.\n\nIf `clip` is not NULL then only points inside of the clipping rectangle are\nconsidered.\n\n\\param points an array of SDL_FPoint structures representing points to be\n              enclosed.\n\\param count the number of structures in the `points` array.\n\\param clip an SDL_FRect used for clipping or NULL to enclose all points.\n\\param result an SDL_FRect structure filled in with the minimal enclosing\n              rectangle.\n\\returns true if any points were enclosed or false if all the points were\n         outside of the clipping rectangle.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectEnclosingPointsFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "points",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "clip",
              "type": "const SDL_FRect *"
            },
            {
              "name": "result",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_GetRectAndLineIntersectionFloat": {
          "doc": "Calculate the intersection of a rectangle and line segment with float\nprecision.\n\nThis function is used to clip a line segment to a rectangle. A line segment\ncontained entirely within the rectangle or that does not intersect will\nremain unchanged. A line segment that crosses the rectangle at either or\nboth ends will be clipped to the boundary of the rectangle and the new\ncoordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.\n\n\\param rect an SDL_FRect structure representing the rectangle to intersect.\n\\param X1 a pointer to the starting X-coordinate of the line.\n\\param Y1 a pointer to the starting Y-coordinate of the line.\n\\param X2 a pointer to the ending X-coordinate of the line.\n\\param Y2 a pointer to the ending Y-coordinate of the line.\n\\returns true if there is an intersection, false otherwise.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRectAndLineIntersectionFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "X1",
              "type": "float *"
            },
            {
              "name": "Y1",
              "type": "float *"
            },
            {
              "name": "X2",
              "type": "float *"
            },
            {
              "name": "Y2",
              "type": "float *"
            }
          ]
        }
      }
    },
    "SDL_surface.h": {
      "name": "SDL_surface.h",
      "doc": "# CategorySurface\n\nSDL surfaces are buffers of pixels in system RAM. These are useful for\npassing around and manipulating images that are not stored in GPU memory.\n\nSDL_Surface makes serious efforts to manage images in various formats, and\nprovides a reasonable toolbox for transforming the data, including copying\nbetween surfaces, filling rectangles in the image data, etc.\n\nThere is also a simple .bmp loader, SDL_LoadBMP(). SDL itself does not\nprovide loaders for various other file formats, but there are several\nexcellent external libraries that do, including its own satellite library,\nSDL_image:\n\nhttps://github.com/libsdl-org/SDL_image",
      "entries": {
        "SDL_SurfaceFlags": {
          "doc": "The flags on an SDL_Surface.\n\nThese are generally considered read-only.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_SurfaceFlags",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_SURFACE_PREALLOCATED": {
          "doc": "",
          "name": "SDL_SURFACE_PREALLOCATED",
          "kind": "def"
        },
        "SDL_SURFACE_LOCK_NEEDED": {
          "doc": "",
          "name": "SDL_SURFACE_LOCK_NEEDED",
          "kind": "def"
        },
        "SDL_SURFACE_LOCKED": {
          "doc": "",
          "name": "SDL_SURFACE_LOCKED",
          "kind": "def"
        },
        "SDL_SURFACE_SIMD_ALIGNED": {
          "doc": "",
          "name": "SDL_SURFACE_SIMD_ALIGNED",
          "kind": "def"
        },
        "SDL_MUSTLOCK": {
          "doc": "Evaluates to true if the surface needs to be locked before access.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_MUSTLOCK",
          "kind": "def",
          "parameters": [
            "S"
          ]
        },
        "SDL_ScaleMode": {
          "doc": "The scaling mode.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_ScaleMode",
          "kind": "enum"
        },
        "SDL_FlipMode": {
          "doc": "The flip mode.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_FlipMode",
          "kind": "enum"
        },
        "SDL_Surface": {
          "doc": "A collection of pixels used in software blitting.\n\nPixels are arranged in memory in rows, with the top row first. Each row\noccupies an amount of memory given by the pitch (sometimes known as the row\nstride in non-SDL APIs).\n\nWithin each row, pixels are arranged from left to right until the width is\nreached. Each pixel occupies a number of bits appropriate for its format,\nwith most formats representing each pixel as one or more whole bytes (in\nsome indexed formats, instead multiple pixels are packed into each byte),\nand a byte order given by the format. After encoding all pixels, any\nremaining bytes to reach the pitch are used as padding to reach a desired\nalignment, and have undefined contents.\n\nWhen a surface holds YUV format data, the planes are assumed to be\ncontiguous without padding between them, e.g. a 32x32 surface in NV12\nformat with a pitch of 32 would consist of 32x32 bytes of Y plane followed\nby 32x16 bytes of UV plane.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurface\n\\sa SDL_DestroySurface",
          "name": "SDL_Surface",
          "kind": "struct",
          "entries": {
            "flags": {
              "doc": "",
              "name": "flags",
              "kind": "var",
              "type": "SDL_SurfaceFlags"
            },
            "format": {
              "doc": "",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "pitch": {
              "doc": "",
              "name": "pitch",
              "kind": "var",
              "type": "int"
            },
            "pixels": {
              "doc": "",
              "name": "pixels",
              "kind": "var",
              "type": "void *"
            },
            "refcount": {
              "doc": "",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            },
            "reserved": {
              "doc": "",
              "name": "reserved",
              "kind": "var",
              "type": "void *"
            }
          }
        },
        "SDL_CreateSurface": {
          "doc": "Allocate a new surface with a specific pixel format.\n\nThe pixels of the new surface are initialized to zero.\n\n\\param width the width of the surface.\n\\param height the height of the surface.\n\\param format the SDL_PixelFormat for the new surface's pixel format.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurfaceFrom\n\\sa SDL_DestroySurface",
          "name": "SDL_CreateSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_CreateSurfaceFrom": {
          "doc": "Allocate a new surface with a specific pixel format and existing pixel\ndata.\n\nNo copy is made of the pixel data. Pixel data is not managed automatically;\nyou must free the surface before you free the pixel data.\n\nPitch is the offset in bytes from one row of pixels to the next, e.g.\n`width*4` for `SDL_PIXELFORMAT_RGBA8888`.\n\nYou may pass NULL for pixels and 0 for pitch to create a surface that you\nwill fill in with valid values later.\n\n\\param width the width of the surface.\n\\param height the height of the surface.\n\\param format the SDL_PixelFormat for the new surface's pixel format.\n\\param pixels a pointer to existing pixel data.\n\\param pitch the number of bytes between each row, including padding.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurface\n\\sa SDL_DestroySurface",
          "name": "SDL_CreateSurfaceFrom",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "pixels",
              "type": "void *"
            },
            {
              "name": "pitch",
              "type": "int"
            }
          ]
        },
        "SDL_DestroySurface": {
          "doc": "Free a surface.\n\nIt is safe to pass NULL to this function.\n\n\\param surface the SDL_Surface to free.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateSurface\n\\sa SDL_CreateSurfaceFrom",
          "name": "SDL_DestroySurface",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetSurfaceProperties": {
          "doc": "Get the properties associated with a surface.\n\nThe following properties are understood by SDL:\n\n- `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point\n  surfaces, this defines the value of 100% diffuse white, with higher\n  values being displayed in the High Dynamic Range headroom. This defaults\n  to 203 for HDR10 surfaces and 1.0 for floating point surfaces.\n- `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point\n  surfaces, this defines the maximum dynamic range used by the content, in\n  terms of the SDR white point. This defaults to 0.0, which disables tone\n  mapping.\n- `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator\n  used when compressing from a surface with high dynamic range to another\n  with lower dynamic range. Currently this supports \"chrome\", which uses\n  the same tone mapping that Chrome uses for HDR content, the form \"*=N\",\n  where N is a floating point scale factor applied in linear space, and\n  \"none\", which disables tone mapping. This defaults to \"chrome\".\n\n\\param surface the SDL_Surface structure to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSurfaceProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING": {
          "doc": "",
          "name": "SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING",
          "kind": "def"
        },
        "SDL_SetSurfaceColorspace": {
          "doc": "Set the colorspace used by a surface.\n\nSetting the colorspace doesn't change the pixels, only how they are\ninterpreted in color operations.\n\n\\param surface the SDL_Surface structure to update.\n\\param colorspace an SDL_Colorspace value describing the surface\n                  colorspace.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorspace",
          "name": "SDL_SetSurfaceColorspace",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "colorspace",
              "type": "SDL_Colorspace"
            }
          ]
        },
        "SDL_GetSurfaceColorspace": {
          "doc": "Get the colorspace used by a surface.\n\nThe colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point\nformats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for\nother RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.\n\n\\param surface the SDL_Surface structure to query.\n\\returns the colorspace used by the surface, or SDL_COLORSPACE_UNKNOWN if\n         the surface is NULL.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceColorspace",
          "name": "SDL_GetSurfaceColorspace",
          "kind": "function",
          "type": "SDL_Colorspace",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_CreateSurfacePalette": {
          "doc": "Create a palette and associate it with a surface.\n\nThis function creates a palette compatible with the provided surface. The\npalette is then returned for you to modify, and the surface will\nautomatically use the new palette in future operations. You do not need to\ndestroy the returned palette, it will be freed when the reference count\nreaches 0, usually when the surface is destroyed.\n\nBitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or\nSDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as\nwhite and 1 as black. Other surfaces will get a palette initialized with\nwhite in every entry.\n\nIf this function is called for a surface that already has a palette, a new\npalette will be created to replace it.\n\n\\param surface the SDL_Surface structure to update.\n\\returns a new SDL_Palette structure on success or NULL on failure (e.g. if\n         the surface didn't have an index format); call SDL_GetError() for\n         more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetPaletteColors",
          "name": "SDL_CreateSurfacePalette",
          "kind": "function",
          "type": "SDL_Palette *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetSurfacePalette": {
          "doc": "Set the palette used by a surface.\n\nA single palette can be shared with many surfaces.\n\n\\param surface the SDL_Surface structure to update.\n\\param palette the SDL_Palette structure to use.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePalette\n\\sa SDL_GetSurfacePalette",
          "name": "SDL_SetSurfacePalette",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "palette",
              "type": "SDL_Palette *"
            }
          ]
        },
        "SDL_GetSurfacePalette": {
          "doc": "Get the palette used by a surface.\n\n\\param surface the SDL_Surface structure to query.\n\\returns a pointer to the palette used by the surface, or NULL if there is\n         no palette used.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfacePalette",
          "name": "SDL_GetSurfacePalette",
          "kind": "function",
          "type": "SDL_Palette *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_AddSurfaceAlternateImage": {
          "doc": "Add an alternate version of a surface.\n\nThis function adds an alternate version of this surface, usually used for\ncontent with high DPI representations like cursors or icons. The size,\nformat, and content do not need to match the original surface, and these\nalternate versions will not be updated when the original surface changes.\n\nThis function adds a reference to the alternate version, so you should call\nSDL_DestroySurface() on the image after this call.\n\n\\param surface the SDL_Surface structure to update.\n\\param image a pointer to an alternate SDL_Surface to associate with this\n             surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RemoveSurfaceAlternateImages\n\\sa SDL_GetSurfaceImages\n\\sa SDL_SurfaceHasAlternateImages",
          "name": "SDL_AddSurfaceAlternateImage",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "image",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SurfaceHasAlternateImages": {
          "doc": "Return whether a surface has alternate versions available.\n\n\\param surface the SDL_Surface structure to query.\n\\returns true if alternate versions are available or false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddSurfaceAlternateImage\n\\sa SDL_RemoveSurfaceAlternateImages\n\\sa SDL_GetSurfaceImages",
          "name": "SDL_SurfaceHasAlternateImages",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetSurfaceImages": {
          "doc": "Get an array including all versions of a surface.\n\nThis returns all versions of a surface, with the surface being queried as\nthe first element in the returned array.\n\nFreeing the array of surfaces does not affect the surfaces in the array.\nThey are still referenced by the surface being queried and will be cleaned\nup normally.\n\n\\param surface the SDL_Surface structure to query.\n\\param count a pointer filled in with the number of surface pointers\n             returned, may be NULL.\n\\returns a NULL terminated array of SDL_Surface pointers or NULL on\n         failure; call SDL_GetError() for more information. This should be\n         freed with SDL_free() when it is no longer needed.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddSurfaceAlternateImage\n\\sa SDL_RemoveSurfaceAlternateImages\n\\sa SDL_SurfaceHasAlternateImages",
          "name": "SDL_GetSurfaceImages",
          "kind": "function",
          "type": "SDL_Surface **",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_RemoveSurfaceAlternateImages": {
          "doc": "Remove all alternate versions of a surface.\n\nThis function removes a reference from all the alternative versions,\ndestroying them if this is the last reference to them.\n\n\\param surface the SDL_Surface structure to update.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_AddSurfaceAlternateImage\n\\sa SDL_GetSurfaceImages\n\\sa SDL_SurfaceHasAlternateImages",
          "name": "SDL_RemoveSurfaceAlternateImages",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_LockSurface": {
          "doc": "Set up a surface for directly accessing the pixels.\n\nBetween calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to\nand read from `surface->pixels`, using the pixel format stored in\n`surface->format`. Once you are done accessing the surface, you should use\nSDL_UnlockSurface() to release it.\n\nNot all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to\n0, then you can read and write to the surface at any time, and the pixel\nformat of the surface will not change.\n\n\\param surface the SDL_Surface structure to be locked.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MUSTLOCK\n\\sa SDL_UnlockSurface",
          "name": "SDL_LockSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_UnlockSurface": {
          "doc": "Release a surface after directly accessing the pixels.\n\n\\param surface the SDL_Surface structure to be unlocked.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockSurface",
          "name": "SDL_UnlockSurface",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_LoadBMP_IO": {
          "doc": "Load a BMP image from a seekable SDL data stream.\n\nThe new surface should be freed with SDL_DestroySurface(). Not doing so\nwill result in a memory leak.\n\n\\param src the data stream for the surface.\n\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even\n               in the case of an error.\n\\returns a pointer to a new SDL_Surface structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface\n\\sa SDL_LoadBMP\n\\sa SDL_SaveBMP_IO",
          "name": "SDL_LoadBMP_IO",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "SDL_LoadBMP": {
          "doc": "Load a BMP image from a file.\n\nThe new surface should be freed with SDL_DestroySurface(). Not doing so\nwill result in a memory leak.\n\n\\param file the BMP file to load.\n\\returns a pointer to a new SDL_Surface structure or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface\n\\sa SDL_LoadBMP_IO\n\\sa SDL_SaveBMP",
          "name": "SDL_LoadBMP",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "SDL_SaveBMP_IO": {
          "doc": "Save a surface to a seekable SDL data stream in BMP format.\n\nSurfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\nBMP directly. Other RGB formats with 8-bit or higher get converted to a\n24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\nsurface before they are saved. YUV and paletted 1-bit and 4-bit formats are\nnot supported.\n\n\\param surface the SDL_Surface structure containing the image to be saved.\n\\param dst a data stream to save to.\n\\param closeio if true, calls SDL_CloseIO() on `dst` before returning, even\n               in the case of an error.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadBMP_IO\n\\sa SDL_SaveBMP",
          "name": "SDL_SaveBMP_IO",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "dst",
              "type": "SDL_IOStream *"
            },
            {
              "name": "closeio",
              "type": "bool"
            }
          ]
        },
        "SDL_SaveBMP": {
          "doc": "Save a surface to a file.\n\nSurfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\nBMP directly. Other RGB formats with 8-bit or higher get converted to a\n24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\nsurface before they are saved. YUV and paletted 1-bit and 4-bit formats are\nnot supported.\n\n\\param surface the SDL_Surface structure containing the image to be saved.\n\\param file a file to save to.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LoadBMP\n\\sa SDL_SaveBMP_IO",
          "name": "SDL_SaveBMP",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "file",
              "type": "const char *"
            }
          ]
        },
        "SDL_SetSurfaceRLE": {
          "doc": "Set the RLE acceleration hint for a surface.\n\nIf RLE is enabled, color key and alpha blending blits are much faster, but\nthe surface must be locked before directly accessing the pixels.\n\n\\param surface the SDL_Surface structure to optimize.\n\\param enabled true to enable RLE acceleration, false to disable it.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface\n\\sa SDL_LockSurface\n\\sa SDL_UnlockSurface",
          "name": "SDL_SetSurfaceRLE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "enabled",
              "type": "bool"
            }
          ]
        },
        "SDL_SurfaceHasRLE": {
          "doc": "Returns whether the surface is RLE enabled.\n\nIt is safe to pass a NULL `surface` here; it will return false.\n\n\\param surface the SDL_Surface structure to query.\n\\returns true if the surface is RLE enabled, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceRLE",
          "name": "SDL_SurfaceHasRLE",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetSurfaceColorKey": {
          "doc": "Set the color key (transparent pixel) in a surface.\n\nThe color key defines a pixel value that will be treated as transparent in\na blit. For example, one can use this to specify that cyan pixels should be\nconsidered transparent, and therefore not rendered.\n\nIt is a pixel of the format used by the surface, as generated by\nSDL_MapRGB().\n\n\\param surface the SDL_Surface structure to update.\n\\param enabled true to enable color key, false to disable color key.\n\\param key the transparent pixel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorKey\n\\sa SDL_SetSurfaceRLE\n\\sa SDL_SurfaceHasColorKey",
          "name": "SDL_SetSurfaceColorKey",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "enabled",
              "type": "bool"
            },
            {
              "name": "key",
              "type": "Uint32"
            }
          ]
        },
        "SDL_SurfaceHasColorKey": {
          "doc": "Returns whether the surface has a color key.\n\nIt is safe to pass a NULL `surface` here; it will return false.\n\n\\param surface the SDL_Surface structure to query.\n\\returns true if the surface has a color key, false otherwise.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceColorKey\n\\sa SDL_GetSurfaceColorKey",
          "name": "SDL_SurfaceHasColorKey",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetSurfaceColorKey": {
          "doc": "Get the color key (transparent pixel) for a surface.\n\nThe color key is a pixel of the format used by the surface, as generated by\nSDL_MapRGB().\n\nIf the surface doesn't have color key enabled this function returns false.\n\n\\param surface the SDL_Surface structure to query.\n\\param key a pointer filled in with the transparent pixel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceColorKey\n\\sa SDL_SurfaceHasColorKey",
          "name": "SDL_GetSurfaceColorKey",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "key",
              "type": "Uint32 *"
            }
          ]
        },
        "SDL_SetSurfaceColorMod": {
          "doc": "Set an additional color value multiplied into blit operations.\n\nWhen this surface is blitted, during the blit operation each source color\nchannel is modulated by the appropriate color value according to the\nfollowing formula:\n\n`srcC = srcC * (color / 255)`\n\n\\param surface the SDL_Surface structure to update.\n\\param r the red color value multiplied into blit operations.\n\\param g the green color value multiplied into blit operations.\n\\param b the blue color value multiplied into blit operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorMod\n\\sa SDL_SetSurfaceAlphaMod",
          "name": "SDL_SetSurfaceColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_GetSurfaceColorMod": {
          "doc": "Get the additional color value multiplied into blit operations.\n\n\\param surface the SDL_Surface structure to query.\n\\param r a pointer filled in with the current red color value.\n\\param g a pointer filled in with the current green color value.\n\\param b a pointer filled in with the current blue color value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceAlphaMod\n\\sa SDL_SetSurfaceColorMod",
          "name": "SDL_GetSurfaceColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_SetSurfaceAlphaMod": {
          "doc": "Set an additional alpha value used in blit operations.\n\nWhen this surface is blitted, during the blit operation the source alpha\nvalue is modulated by this alpha value according to the following formula:\n\n`srcA = srcA * (alpha / 255)`\n\n\\param surface the SDL_Surface structure to update.\n\\param alpha the alpha value multiplied into blit operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceAlphaMod\n\\sa SDL_SetSurfaceColorMod",
          "name": "SDL_SetSurfaceAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "alpha",
              "type": "Uint8"
            }
          ]
        },
        "SDL_GetSurfaceAlphaMod": {
          "doc": "Get the additional alpha value used in blit operations.\n\n\\param surface the SDL_Surface structure to query.\n\\param alpha a pointer filled in with the current alpha value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceColorMod\n\\sa SDL_SetSurfaceAlphaMod",
          "name": "SDL_GetSurfaceAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "alpha",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_SetSurfaceBlendMode": {
          "doc": "Set the blend mode used for blit operations.\n\nTo copy a surface to another surface (or texture) without blending with the\nexisting data, the blendmode of the SOURCE surface should be set to\n`SDL_BLENDMODE_NONE`.\n\n\\param surface the SDL_Surface structure to update.\n\\param blendMode the SDL_BlendMode to use for blit blending.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceBlendMode",
          "name": "SDL_SetSurfaceBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode"
            }
          ]
        },
        "SDL_GetSurfaceBlendMode": {
          "doc": "Get the blend mode used for blit operations.\n\n\\param surface the SDL_Surface structure to query.\n\\param blendMode a pointer filled in with the current SDL_BlendMode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceBlendMode",
          "name": "SDL_GetSurfaceBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode *"
            }
          ]
        },
        "SDL_SetSurfaceClipRect": {
          "doc": "Set the clipping rectangle for a surface.\n\nWhen `surface` is the destination of a blit, only the area within the clip\nrectangle is drawn into.\n\nNote that blits are automatically clipped to the edges of the source and\ndestination surfaces.\n\n\\param surface the SDL_Surface structure to be clipped.\n\\param rect the SDL_Rect structure representing the clipping rectangle, or\n            NULL to disable clipping.\n\\returns true if the rectangle intersects the surface, otherwise false and\n         blits will be completely clipped.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetSurfaceClipRect",
          "name": "SDL_SetSurfaceClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetSurfaceClipRect": {
          "doc": "Get the clipping rectangle for a surface.\n\nWhen `surface` is the destination of a blit, only the area within the clip\nrectangle is drawn into.\n\n\\param surface the SDL_Surface structure representing the surface to be\n               clipped.\n\\param rect an SDL_Rect structure filled in with the clipping rectangle for\n            the surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetSurfaceClipRect",
          "name": "SDL_GetSurfaceClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_FlipSurface": {
          "doc": "Flip a surface vertically or horizontally.\n\n\\param surface the surface to flip.\n\\param flip the direction to flip.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_FlipSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "flip",
              "type": "SDL_FlipMode"
            }
          ]
        },
        "SDL_DuplicateSurface": {
          "doc": "Creates a new surface identical to the existing surface.\n\nIf the original surface has alternate images, the new surface will have a\nreference to them as well.\n\nThe returned surface should be freed with SDL_DestroySurface().\n\n\\param surface the surface to duplicate.\n\\returns a copy of the surface or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface",
          "name": "SDL_DuplicateSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_ScaleSurface": {
          "doc": "Creates a new surface identical to the existing surface, scaled to the\ndesired size.\n\nThe returned surface should be freed with SDL_DestroySurface().\n\n\\param surface the surface to duplicate and scale.\n\\param width the width of the new surface.\n\\param height the height of the new surface.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns a copy of the surface or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroySurface",
          "name": "SDL_ScaleSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_ConvertSurface": {
          "doc": "Copy an existing surface to a new surface of the specified format.\n\nThis function is used to optimize images for faster *repeat* blitting. This\nis accomplished by converting the original and storing the result as a new\nsurface. The new, optimized surface can then be used as the source for\nfuture blits, making them faster.\n\nIf you are converting to an indexed surface and want to map colors to a\npalette, you can use SDL_ConvertSurfaceAndColorspace() instead.\n\nIf the original surface has alternate images, the new surface will have a\nreference to them as well.\n\n\\param surface the existing SDL_Surface structure to convert.\n\\param format the new pixel format.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertSurfaceAndColorspace\n\\sa SDL_DestroySurface",
          "name": "SDL_ConvertSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            }
          ]
        },
        "SDL_ConvertSurfaceAndColorspace": {
          "doc": "Copy an existing surface to a new surface of the specified format and\ncolorspace.\n\nThis function converts an existing surface to a new format and colorspace\nand returns the new surface. This will perform any pixel format and\ncolorspace conversion needed.\n\nIf the original surface has alternate images, the new surface will have a\nreference to them as well.\n\n\\param surface the existing SDL_Surface structure to convert.\n\\param format the new pixel format.\n\\param palette an optional palette to use for indexed formats, may be NULL.\n\\param colorspace the new colorspace.\n\\param props an SDL_PropertiesID with additional color properties, or 0.\n\\returns the new SDL_Surface structure that is created or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertSurface\n\\sa SDL_DestroySurface",
          "name": "SDL_ConvertSurfaceAndColorspace",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "palette",
              "type": "SDL_Palette *"
            },
            {
              "name": "colorspace",
              "type": "SDL_Colorspace"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_ConvertPixels": {
          "doc": "Copy a block of pixels of one format to another format.\n\n\\param width the width of the block to copy, in pixels.\n\\param height the height of the block to copy, in pixels.\n\\param src_format an SDL_PixelFormat value of the `src` pixels format.\n\\param src a pointer to the source pixels.\n\\param src_pitch the pitch of the source pixels, in bytes.\n\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.\n\\param dst a pointer to be filled in with new pixel data.\n\\param dst_pitch the pitch of the destination pixels, in bytes.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertPixelsAndColorspace",
          "name": "SDL_ConvertPixels",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "src_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "src_pitch",
              "type": "int"
            },
            {
              "name": "dst_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "dst_pitch",
              "type": "int"
            }
          ]
        },
        "SDL_ConvertPixelsAndColorspace": {
          "doc": "Copy a block of pixels of one format and colorspace to another format and\ncolorspace.\n\n\\param width the width of the block to copy, in pixels.\n\\param height the height of the block to copy, in pixels.\n\\param src_format an SDL_PixelFormat value of the `src` pixels format.\n\\param src_colorspace an SDL_Colorspace value describing the colorspace of\n                      the `src` pixels.\n\\param src_properties an SDL_PropertiesID with additional source color\n                      properties, or 0.\n\\param src a pointer to the source pixels.\n\\param src_pitch the pitch of the source pixels, in bytes.\n\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.\n\\param dst_colorspace an SDL_Colorspace value describing the colorspace of\n                      the `dst` pixels.\n\\param dst_properties an SDL_PropertiesID with additional destination color\n                      properties, or 0.\n\\param dst a pointer to be filled in with new pixel data.\n\\param dst_pitch the pitch of the destination pixels, in bytes.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertPixels",
          "name": "SDL_ConvertPixelsAndColorspace",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "src_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "src_colorspace",
              "type": "SDL_Colorspace"
            },
            {
              "name": "src_properties",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "src_pitch",
              "type": "int"
            },
            {
              "name": "dst_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "dst_colorspace",
              "type": "SDL_Colorspace"
            },
            {
              "name": "dst_properties",
              "type": "SDL_PropertiesID"
            },
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "dst_pitch",
              "type": "int"
            }
          ]
        },
        "SDL_PremultiplyAlpha": {
          "doc": "Premultiply the alpha on a block of pixels.\n\nThis is safe to use with src == dst, but not for other overlapping areas.\n\n\\param width the width of the block to convert, in pixels.\n\\param height the height of the block to convert, in pixels.\n\\param src_format an SDL_PixelFormat value of the `src` pixels format.\n\\param src a pointer to the source pixels.\n\\param src_pitch the pitch of the source pixels, in bytes.\n\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.\n\\param dst a pointer to be filled in with premultiplied pixel data.\n\\param dst_pitch the pitch of the destination pixels, in bytes.\n\\param linear true to convert from sRGB to linear space for the alpha\n              multiplication, false to do multiplication in sRGB space.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PremultiplyAlpha",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "src_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "src",
              "type": "const void *"
            },
            {
              "name": "src_pitch",
              "type": "int"
            },
            {
              "name": "dst_format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "dst",
              "type": "void *"
            },
            {
              "name": "dst_pitch",
              "type": "int"
            },
            {
              "name": "linear",
              "type": "bool"
            }
          ]
        },
        "SDL_PremultiplySurfaceAlpha": {
          "doc": "Premultiply the alpha in a surface.\n\nThis is safe to use with src == dst, but not for other overlapping areas.\n\n\\param surface the surface to modify.\n\\param linear true to convert from sRGB to linear space for the alpha\n              multiplication, false to do multiplication in sRGB space.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_PremultiplySurfaceAlpha",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "linear",
              "type": "bool"
            }
          ]
        },
        "SDL_ClearSurface": {
          "doc": "Clear a surface with a specific color, with floating point precision.\n\nThis function handles all surface formats, and ignores any clip rectangle.\n\nIf the surface is YUV, the color is assumed to be in the sRGB colorspace,\notherwise the color is assumed to be in the colorspace of the suface.\n\n\\param surface the SDL_Surface to clear.\n\\param r the red component of the pixel, normally in the range 0-1.\n\\param g the green component of the pixel, normally in the range 0-1.\n\\param b the blue component of the pixel, normally in the range 0-1.\n\\param a the alpha component of the pixel, normally in the range 0-1.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ClearSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        },
        "SDL_FillSurfaceRect": {
          "doc": "Perform a fast fill of a rectangle with a specific color.\n\n`color` should be a pixel of the format used by the surface, and can be\ngenerated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\nalpha component then the destination is simply filled with that alpha\ninformation, no blending takes place.\n\nIf there is a clip rectangle set on the destination (set via\nSDL_SetSurfaceClipRect()), then this function will fill based on the\nintersection of the clip rectangle and `rect`.\n\n\\param dst the SDL_Surface structure that is the drawing target.\n\\param rect the SDL_Rect structure representing the rectangle to fill, or\n            NULL to fill the entire surface.\n\\param color the color to fill with.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FillSurfaceRects",
          "name": "SDL_FillSurfaceRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "color",
              "type": "Uint32"
            }
          ]
        },
        "SDL_FillSurfaceRects": {
          "doc": "Perform a fast fill of a set of rectangles with a specific color.\n\n`color` should be a pixel of the format used by the surface, and can be\ngenerated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\nalpha component then the destination is simply filled with that alpha\ninformation, no blending takes place.\n\nIf there is a clip rectangle set on the destination (set via\nSDL_SetSurfaceClipRect()), then this function will fill based on the\nintersection of the clip rectangle and `rect`.\n\n\\param dst the SDL_Surface structure that is the drawing target.\n\\param rects an array of SDL_Rects representing the rectangles to fill.\n\\param count the number of rectangles in the array.\n\\param color the color to fill with.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_FillSurfaceRect",
          "name": "SDL_FillSurfaceRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "rects",
              "type": "const SDL_Rect *"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "color",
              "type": "Uint32"
            }
          ]
        },
        "SDL_BlitSurface": {
          "doc": "Performs a fast blit from the source surface to the destination surface\nwith clipping.\n\nIf either `srcrect` or `dstrect` are NULL, the entire surface (`src` or\n`dst`) is copied while ensuring clipping to `dst->clip_rect`.\n\nThe final blit rectangles are saved in `srcrect` and `dstrect` after all\nclipping is performed.\n\nThe blit function should not be called on a locked surface.\n\nThe blit semantics for surfaces with and without blending and colorkey are\ndefined as follows:\n\n```\n   RGBA->RGB:\n     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source alpha-channel and per-surface alpha)\n      SDL_SRCCOLORKEY ignored.\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy RGB.\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      RGB values of the source color key, ignoring alpha in the\n      comparison.\n\n  RGB->RGBA:\n    Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source per-surface alpha)\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy RGB, set destination alpha to source per-surface alpha value.\n    both:\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      source color key.\n\n  RGBA->RGBA:\n    Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source alpha-channel and per-surface alpha)\n      SDL_SRCCOLORKEY ignored.\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy all of RGBA to the destination.\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      RGB values of the source color key, ignoring alpha in the\n      comparison.\n\n  RGB->RGB:\n    Source surface blend mode set to SDL_BLENDMODE_BLEND:\n      alpha-blend (using the source per-surface alpha)\n    Source surface blend mode set to SDL_BLENDMODE_NONE:\n      copy RGB.\n    both:\n      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the\n      source color key.\n```\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the x and y position in\n               the destination surface, or NULL for (0,0). The width and\n               height are ignored, and are copied from `srcrect`. If you\n               want a specific width and height, you should use\n               SDL_BlitSurfaceScaled().\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurfaceScaled",
          "name": "SDL_BlitSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurfaceUnchecked": {
          "doc": "Perform low-level surface blitting only.\n\nThis is a semi-private blit function and it performs low-level surface\nblitting, assuming the input rectangles have already been clipped.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, may not be NULL.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, may not be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceUnchecked",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurfaceScaled": {
          "doc": "Perform a scaled blit to a destination surface, which may be of a different\nformat.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire\n               destination surface.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceScaled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_BlitSurfaceUncheckedScaled": {
          "doc": "Perform low-level surface scaled blitting only.\n\nThis is a semi-private function and it performs low-level surface blitting,\nassuming the input rectangles have already been clipped.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, may not be NULL.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, may not be NULL.\n\\param scaleMode the SDL_ScaleMode to be used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurfaceScaled",
          "name": "SDL_BlitSurfaceUncheckedScaled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_BlitSurfaceTiled": {
          "doc": "Perform a tiled blit to a destination surface, which may be of a different\nformat.\n\nThe pixels in `srcrect` will be repeated as many times as needed to\ncompletely fill `dstrect`.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceTiled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurfaceTiledWithScale": {
          "doc": "Perform a scaled and tiled blit to a destination surface, which may be of a\ndifferent format.\n\nThe pixels in `srcrect` will be scaled and repeated as many times as needed\nto completely fill `dstrect`.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be\n               copied, or NULL to copy the entire surface.\n\\param scale the scale used to transform srcrect into the destination\n             rectangle, e.g. a 32x32 texture with a scale of 2 would fill\n             64x64 tiles.\n\\param scaleMode scale algorithm to be used.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurfaceTiledWithScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_BlitSurface9Grid": {
          "doc": "Perform a scaled blit using the 9-grid algorithm to a destination surface,\nwhich may be of a different format.\n\nThe pixels in the source surface are split into a 3x3 grid, using the\ndifferent corner sizes for each corner, and the sides and center making up\nthe remaining pixels. The corners are then scaled using `scale` and fit\ninto the corners of the destination rectangle. The sides and center are\nthen stretched into place to cover the remaining destination rectangle.\n\n\\param src the SDL_Surface structure to be copied from.\n\\param srcrect the SDL_Rect structure representing the rectangle to be used\n               for the 9-grid, or NULL to use the entire surface.\n\\param left_width the width, in pixels, of the left corners in `srcrect`.\n\\param right_width the width, in pixels, of the right corners in `srcrect`.\n\\param top_height the height, in pixels, of the top corners in `srcrect`.\n\\param bottom_height the height, in pixels, of the bottom corners in\n                     `srcrect`.\n\\param scale the scale used to transform the corner of `srcrect` into the\n             corner of `dstrect`, or 0.0f for an unscaled blit.\n\\param scaleMode scale algorithm to be used.\n\\param dst the SDL_Surface structure that is the blit target.\n\\param dstrect the SDL_Rect structure representing the target rectangle in\n               the destination surface, or NULL to fill the entire surface.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety The same destination surface should not be used from two\n              threads at once. It is safe to use the same source surface\n              from multiple threads.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_BlitSurface",
          "name": "SDL_BlitSurface9Grid",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "src",
              "type": "SDL_Surface *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "left_width",
              "type": "int"
            },
            {
              "name": "right_width",
              "type": "int"
            },
            {
              "name": "top_height",
              "type": "int"
            },
            {
              "name": "bottom_height",
              "type": "int"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            },
            {
              "name": "dst",
              "type": "SDL_Surface *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_MapSurfaceRGB": {
          "doc": "Map an RGB triple to an opaque pixel value for a surface.\n\nThis function maps the RGB color value to the specified pixel format and\nreturns the pixel value best approximating the given RGB color value for\nthe given pixel format.\n\nIf the surface has a palette, the index of the closest matching color in\nthe palette will be returned.\n\nIf the surface pixel format has an alpha component it will be returned as\nall 1 bits (fully opaque).\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param surface the surface to use for the pixel format and palette.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MapSurfaceRGBA",
          "name": "SDL_MapSurfaceRGB",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_MapSurfaceRGBA": {
          "doc": "Map an RGBA quadruple to a pixel value for a surface.\n\nThis function maps the RGBA color value to the specified pixel format and\nreturns the pixel value best approximating the given RGBA color value for\nthe given pixel format.\n\nIf the surface pixel format has no alpha component the alpha value will be\nignored (as it will be in formats with a palette).\n\nIf the surface has a palette, the index of the closest matching color in\nthe palette will be returned.\n\nIf the pixel format bpp (color depth) is less than 32-bpp then the unused\nupper bits of the return value can safely be ignored (e.g., with a 16-bpp\nformat the return value can be assigned to a Uint16, and similarly a Uint8\nfor an 8-bpp format).\n\n\\param surface the surface to use for the pixel format and palette.\n\\param r the red component of the pixel in the range 0-255.\n\\param g the green component of the pixel in the range 0-255.\n\\param b the blue component of the pixel in the range 0-255.\n\\param a the alpha component of the pixel in the range 0-255.\n\\returns a pixel value.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MapSurfaceRGB",
          "name": "SDL_MapSurfaceRGBA",
          "kind": "function",
          "type": "Uint32",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_ReadSurfacePixel": {
          "doc": "Retrieves a single pixel from a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\nLike SDL_GetRGBA, this uses the entire 0..255 range when converting color\ncomponents from pixel formats with less than 8 bits per RGB component.\n\n\\param surface the surface to read.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r a pointer filled in with the red channel, 0-255, or NULL to ignore\n         this channel.\n\\param g a pointer filled in with the green channel, 0-255, or NULL to\n         ignore this channel.\n\\param b a pointer filled in with the blue channel, 0-255, or NULL to\n         ignore this channel.\n\\param a a pointer filled in with the alpha channel, 0-255, or NULL to\n         ignore this channel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadSurfacePixel",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_ReadSurfacePixelFloat": {
          "doc": "Retrieves a single pixel from a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\n\\param surface the surface to read.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r a pointer filled in with the red channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\param g a pointer filled in with the green channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\param b a pointer filled in with the blue channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\param a a pointer filled in with the alpha channel, normally in the range\n         0-1, or NULL to ignore this channel.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ReadSurfacePixelFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            },
            {
              "name": "a",
              "type": "float *"
            }
          ]
        },
        "SDL_WriteSurfacePixel": {
          "doc": "Writes a single pixel to a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\nLike SDL_MapRGBA, this uses the entire 0..255 range when converting color\ncomponents from pixel formats with less than 8 bits per RGB component.\n\n\\param surface the surface to write.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r the red channel value, 0-255.\n\\param g the green channel value, 0-255.\n\\param b the blue channel value, 0-255.\n\\param a the alpha channel value, 0-255.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteSurfacePixel",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_WriteSurfacePixelFloat": {
          "doc": "Writes a single pixel to a surface.\n\nThis function prioritizes correctness over speed: it is suitable for unit\ntests, but is not intended for use in a game engine.\n\n\\param surface the surface to write.\n\\param x the horizontal coordinate, 0 <= x < width.\n\\param y the vertical coordinate, 0 <= y < height.\n\\param r the red channel value, normally in the range 0-1.\n\\param g the green channel value, normally in the range 0-1.\n\\param b the blue channel value, normally in the range 0-1.\n\\param a the alpha channel value, normally in the range 0-1.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_WriteSurfacePixelFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        }
      }
    },
    "SDL_video.h": {
      "name": "SDL_video.h",
      "doc": "# CategoryVideo\n\nSDL's video subsystem is largely interested in abstracting window\nmanagement from the underlying operating system. You can create windows,\nmanage them in various ways, set them fullscreen, and get events when\ninteresting things happen with them, such as the mouse or keyboard\ninteracting with a window.\n\nThe video subsystem is also interested in abstracting away some\nplatform-specific differences in OpenGL: context creation, swapping\nbuffers, etc. This may be crucial to your app, but also you are not\nrequired to use OpenGL at all. In fact, SDL can provide rendering to those\nwindows as well, either with an easy-to-use\n[2D API](https://wiki.libsdl.org/SDL3/CategoryRender)\nor with a more-powerful\n[GPU API](https://wiki.libsdl.org/SDL3/CategoryGPU)\n. Of course, it can simply get out of your way and give you the window\nhandles you need to use Vulkan, Direct3D, Metal, or whatever else you like\ndirectly, too.\n\nThe video subsystem covers a lot of functionality, out of necessity, so it\nis worth perusing the list of functions just to see what's available, but\nmost apps can get by with simply creating a window and listening for\nevents, so start with SDL_CreateWindow() and SDL_PollEvent().",
      "entries": {
        "SDL_DisplayID": {
          "doc": "This is a unique ID for a display for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the display is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_DisplayID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_WindowID": {
          "doc": "This is a unique ID for a window.\n\nThe value 0 is an invalid ID.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_WindowID",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER": {
          "doc": "The pointer to the global `wl_display` object used by the Wayland video\nbackend.\n\nCan be set before the video subsystem is initialized to import an external\n`wl_display` object from an application or toolkit for use in SDL, or read\nafter initialization to export the `wl_display` used by the Wayland video\nbackend. Setting this property after the video subsystem has been\ninitialized has no effect, and reading it when the video subsystem is\nuninitialized will either return the user provided value, if one was set\nprior to initialization, or NULL. See docs/README-wayland.md for more\ninformation.",
          "name": "SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER",
          "kind": "def"
        },
        "SDL_SystemTheme": {
          "doc": "System theme.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_SystemTheme",
          "kind": "enum"
        },
        "SDL_DisplayModeData": {
          "doc": "Internal display mode data.\n\nThis lives as a field in SDL_DisplayMode, as opaque data.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_DisplayMode",
          "name": "SDL_DisplayModeData",
          "kind": "alias",
          "type": "struct SDL_DisplayModeData"
        },
        "SDL_DisplayMode": {
          "doc": "The structure that defines a display mode.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_GetFullscreenDisplayModes\n\\sa SDL_GetDesktopDisplayMode\n\\sa SDL_GetCurrentDisplayMode\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_GetWindowFullscreenMode",
          "name": "SDL_DisplayMode",
          "kind": "struct",
          "entries": {
            "displayID": {
              "doc": "",
              "name": "displayID",
              "kind": "var",
              "type": "SDL_DisplayID"
            },
            "format": {
              "doc": "",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "pixel_density": {
              "doc": "",
              "name": "pixel_density",
              "kind": "var",
              "type": "float"
            },
            "refresh_rate": {
              "doc": "",
              "name": "refresh_rate",
              "kind": "var",
              "type": "float"
            },
            "refresh_rate_numerator": {
              "doc": "",
              "name": "refresh_rate_numerator",
              "kind": "var",
              "type": "int"
            },
            "refresh_rate_denominator": {
              "doc": "",
              "name": "refresh_rate_denominator",
              "kind": "var",
              "type": "int"
            },
            "internal": {
              "doc": "",
              "name": "internal",
              "kind": "var",
              "type": "SDL_DisplayModeData *"
            }
          }
        },
        "SDL_DisplayOrientation": {
          "doc": "Display orientation values; the way a display is rotated.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_DisplayOrientation",
          "kind": "enum"
        },
        "SDL_Window": {
          "doc": "The struct used as an opaque handle to a window.\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow",
          "name": "SDL_Window",
          "kind": "alias",
          "type": "struct SDL_Window"
        },
        "SDL_WindowFlags": {
          "doc": "The flags on a window.\n\nThese cover a lot of true/false, or on/off, window state. Some of it is\nimmutable after being set through SDL_CreateWindow(), some of it can be\nchanged on existing windows by the app, and some of it might be altered by\nthe user or system outside of the app's control.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_WindowFlags",
          "kind": "alias",
          "type": "Uint64"
        },
        "SDL_WINDOW_FULLSCREEN": {
          "doc": "",
          "name": "SDL_WINDOW_FULLSCREEN",
          "kind": "def"
        },
        "SDL_WINDOW_OPENGL": {
          "doc": "",
          "name": "SDL_WINDOW_OPENGL",
          "kind": "def"
        },
        "SDL_WINDOW_OCCLUDED": {
          "doc": "",
          "name": "SDL_WINDOW_OCCLUDED",
          "kind": "def"
        },
        "SDL_WINDOW_HIDDEN": {
          "doc": "",
          "name": "SDL_WINDOW_HIDDEN",
          "kind": "def"
        },
        "SDL_WINDOW_BORDERLESS": {
          "doc": "",
          "name": "SDL_WINDOW_BORDERLESS",
          "kind": "def"
        },
        "SDL_WINDOW_RESIZABLE": {
          "doc": "",
          "name": "SDL_WINDOW_RESIZABLE",
          "kind": "def"
        },
        "SDL_WINDOW_MINIMIZED": {
          "doc": "",
          "name": "SDL_WINDOW_MINIMIZED",
          "kind": "def"
        },
        "SDL_WINDOW_MAXIMIZED": {
          "doc": "",
          "name": "SDL_WINDOW_MAXIMIZED",
          "kind": "def"
        },
        "SDL_WINDOW_MOUSE_GRABBED": {
          "doc": "",
          "name": "SDL_WINDOW_MOUSE_GRABBED",
          "kind": "def"
        },
        "SDL_WINDOW_INPUT_FOCUS": {
          "doc": "",
          "name": "SDL_WINDOW_INPUT_FOCUS",
          "kind": "def"
        },
        "SDL_WINDOW_MOUSE_FOCUS": {
          "doc": "",
          "name": "SDL_WINDOW_MOUSE_FOCUS",
          "kind": "def"
        },
        "SDL_WINDOW_EXTERNAL": {
          "doc": "",
          "name": "SDL_WINDOW_EXTERNAL",
          "kind": "def"
        },
        "SDL_WINDOW_MODAL": {
          "doc": "",
          "name": "SDL_WINDOW_MODAL",
          "kind": "def"
        },
        "SDL_WINDOW_HIGH_PIXEL_DENSITY": {
          "doc": "",
          "name": "SDL_WINDOW_HIGH_PIXEL_DENSITY",
          "kind": "def"
        },
        "SDL_WINDOW_MOUSE_CAPTURE": {
          "doc": "",
          "name": "SDL_WINDOW_MOUSE_CAPTURE",
          "kind": "def"
        },
        "SDL_WINDOW_MOUSE_RELATIVE_MODE": {
          "doc": "",
          "name": "SDL_WINDOW_MOUSE_RELATIVE_MODE",
          "kind": "def"
        },
        "SDL_WINDOW_ALWAYS_ON_TOP": {
          "doc": "",
          "name": "SDL_WINDOW_ALWAYS_ON_TOP",
          "kind": "def"
        },
        "SDL_WINDOW_UTILITY": {
          "doc": "",
          "name": "SDL_WINDOW_UTILITY",
          "kind": "def"
        },
        "SDL_WINDOW_TOOLTIP": {
          "doc": "",
          "name": "SDL_WINDOW_TOOLTIP",
          "kind": "def"
        },
        "SDL_WINDOW_POPUP_MENU": {
          "doc": "",
          "name": "SDL_WINDOW_POPUP_MENU",
          "kind": "def"
        },
        "SDL_WINDOW_KEYBOARD_GRABBED": {
          "doc": "",
          "name": "SDL_WINDOW_KEYBOARD_GRABBED",
          "kind": "def"
        },
        "SDL_WINDOW_VULKAN": {
          "doc": "",
          "name": "SDL_WINDOW_VULKAN",
          "kind": "def"
        },
        "SDL_WINDOW_METAL": {
          "doc": "",
          "name": "SDL_WINDOW_METAL",
          "kind": "def"
        },
        "SDL_WINDOW_TRANSPARENT": {
          "doc": "",
          "name": "SDL_WINDOW_TRANSPARENT",
          "kind": "def"
        },
        "SDL_WINDOW_NOT_FOCUSABLE": {
          "doc": "",
          "name": "SDL_WINDOW_NOT_FOCUSABLE",
          "kind": "def"
        },
        "SDL_WINDOWPOS_UNDEFINED_MASK": {
          "doc": "A magic value used with SDL_WINDOWPOS_UNDEFINED.\n\nGenerally this macro isn't used directly, but rather through\nSDL_WINDOWPOS_UNDEFINED or SDL_WINDOWPOS_UNDEFINED_DISPLAY.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_UNDEFINED_MASK",
          "kind": "def"
        },
        "SDL_WINDOWPOS_UNDEFINED_DISPLAY": {
          "doc": "Used to indicate that you don't care what the window position is.\n\nIf you _really_ don't care, SDL_WINDOWPOS_UNDEFINED is the same, but always\nuses the primary display instead of specifying one.\n\n\\param X the SDL_DisplayID of the display to use.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_UNDEFINED_DISPLAY",
          "kind": "def",
          "parameters": [
            "X"
          ]
        },
        "SDL_WINDOWPOS_UNDEFINED": {
          "doc": "Used to indicate that you don't care what the window position/display is.\n\nThis always uses the primary display.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_UNDEFINED",
          "kind": "def"
        },
        "SDL_WINDOWPOS_ISUNDEFINED": {
          "doc": "A macro to test if the window position is marked as \"undefined.\"\n\n\\param X the window position value.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_ISUNDEFINED",
          "kind": "def",
          "parameters": [
            "X"
          ]
        },
        "SDL_WINDOWPOS_CENTERED_MASK": {
          "doc": "A magic value used with SDL_WINDOWPOS_CENTERED.\n\nGenerally this macro isn't used directly, but rather through\nSDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_CENTERED_DISPLAY.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_CENTERED_MASK",
          "kind": "def"
        },
        "SDL_WINDOWPOS_CENTERED_DISPLAY": {
          "doc": "Used to indicate that the window position should be centered.\n\nSDL_WINDOWPOS_CENTERED is the same, but always uses the primary display\ninstead of specifying one.\n\n\\param X the SDL_DisplayID of the display to use.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_CENTERED_DISPLAY",
          "kind": "def",
          "parameters": [
            "X"
          ]
        },
        "SDL_WINDOWPOS_CENTERED": {
          "doc": "Used to indicate that the window position should be centered.\n\nThis always uses the primary display.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_CENTERED",
          "kind": "def"
        },
        "SDL_WINDOWPOS_ISCENTERED": {
          "doc": "A macro to test if the window position is marked as \"centered.\"\n\n\\param X the window position value.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_WINDOWPOS_ISCENTERED",
          "kind": "def",
          "parameters": [
            "X"
          ]
        },
        "SDL_FlashOperation": {
          "doc": "Window flash operation.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_FlashOperation",
          "kind": "enum"
        },
        "SDL_GLContext": {
          "doc": "An opaque handle to an OpenGL context.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_GL_CreateContext",
          "name": "SDL_GLContext",
          "kind": "alias",
          "type": "struct SDL_GLContextState *"
        },
        "SDL_EGLDisplay": {
          "doc": "Opaque type for an EGL display.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLDisplay",
          "kind": "alias",
          "type": "void *"
        },
        "SDL_EGLConfig": {
          "doc": "Opaque type for an EGL config.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLConfig",
          "kind": "alias",
          "type": "void *"
        },
        "SDL_EGLSurface": {
          "doc": "Opaque type for an EGL surface.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLSurface",
          "kind": "alias",
          "type": "void *"
        },
        "SDL_EGLAttrib": {
          "doc": "An EGL attribute, used when creating an EGL context.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLAttrib",
          "kind": "alias",
          "type": "intptr_t"
        },
        "SDL_EGLint": {
          "doc": "An EGL integer attribute, used when creating an EGL surface.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_EGLint",
          "kind": "alias",
          "type": "int"
        },
        "SDL_EGLAttribArrayCallback": {
          "doc": "EGL platform attribute initialization callback.\n\nThis is called when SDL is attempting to create an EGL context, to let the\napp add extra attributes to its eglGetPlatformDisplay() call.\n\nThe callback should return a pointer to an EGL attribute array terminated\nwith `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow\nprocess will fail gracefully.\n\nThe returned pointer should be allocated with SDL_malloc() and will be\npassed to SDL_free().\n\nThe arrays returned by each callback will be appended to the existing\nattribute arrays defined by SDL.\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\returns a newly-allocated array of attributes, terminated with `EGL_NONE`.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EGL_SetAttributeCallbacks",
          "name": "SDL_EGLAttribArrayCallback",
          "kind": "callback",
          "type": "SDL_EGLAttrib *",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_EGLIntArrayCallback": {
          "doc": "EGL surface/context attribute initialization callback types.\n\nThis is called when SDL is attempting to create an EGL surface, to let the\napp add extra attributes to its eglCreateWindowSurface() or\neglCreateContext calls.\n\nFor convenience, the EGLDisplay and EGLConfig to use are provided to the\ncallback.\n\nThe callback should return a pointer to an EGL attribute array terminated\nwith `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow\nprocess will fail gracefully.\n\nThe returned pointer should be allocated with SDL_malloc() and will be\npassed to SDL_free().\n\nThe arrays returned by each callback will be appended to the existing\nattribute arrays defined by SDL.\n\n\\param userdata an app-controlled pointer that is passed to the callback.\n\\param display the EGL display to be used.\n\\param config the EGL config to be used.\n\\returns a newly-allocated array of attributes, terminated with `EGL_NONE`.\n\n\\since This datatype is available since SDL 3.2.0.\n\n\\sa SDL_EGL_SetAttributeCallbacks",
          "name": "SDL_EGLIntArrayCallback",
          "kind": "callback",
          "type": "SDL_EGLint *",
          "parameters": [
            {
              "name": "userdata",
              "type": "void *"
            },
            {
              "name": "display",
              "type": "SDL_EGLDisplay"
            },
            {
              "name": "config",
              "type": "SDL_EGLConfig"
            }
          ]
        },
        "SDL_GLAttr": {
          "doc": "An enumeration of OpenGL configuration attributes.\n\nWhile you can set most OpenGL attributes normally, the attributes listed\nabove must be known before SDL creates the window that will be used with\nthe OpenGL context. These attributes are set and read with\nSDL_GL_SetAttribute() and SDL_GL_GetAttribute().\n\nIn some cases, these attributes are minimum requests; the GL does not\npromise to give you exactly what you asked for. It's possible to ask for a\n16-bit depth buffer and get a 24-bit one instead, for example, or to ask\nfor no stencil buffer and still have one available. Context creation should\nfail if the GL can't provide your requested attributes at a minimum, but\nyou should check to see exactly what you got.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_GLAttr",
          "kind": "enum"
        },
        "SDL_GLProfile": {
          "doc": "Possible values to be set for the SDL_GL_CONTEXT_PROFILE_MASK attribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLProfile",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_PROFILE_CORE": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_PROFILE_CORE",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_PROFILE_ES": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_PROFILE_ES",
          "kind": "def"
        },
        "SDL_GLContextFlag": {
          "doc": "Possible flags to be set for the SDL_GL_CONTEXT_FLAGS attribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLContextFlag",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_DEBUG_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_DEBUG_FLAG",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG",
          "kind": "def"
        },
        "SDL_GLContextReleaseFlag": {
          "doc": "Possible values to be set for the SDL_GL_CONTEXT_RELEASE_BEHAVIOR\nattribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLContextReleaseFlag",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH",
          "kind": "def"
        },
        "SDL_GLContextResetNotification": {
          "doc": "Possible values to be set SDL_GL_CONTEXT_RESET_NOTIFICATION attribute.\n\n\\since This datatype is available since SDL 3.2.0.",
          "name": "SDL_GLContextResetNotification",
          "kind": "alias",
          "type": "Uint32"
        },
        "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION",
          "kind": "def"
        },
        "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT": {
          "doc": "",
          "name": "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT",
          "kind": "def"
        },
        "SDL_GetNumVideoDrivers": {
          "doc": "Get the number of video drivers compiled into SDL.\n\n\\returns the number of built in video drivers.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetVideoDriver",
          "name": "SDL_GetNumVideoDrivers",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetVideoDriver": {
          "doc": "Get the name of a built in video driver.\n\nThe video drivers are presented in the order in which they are normally\nchecked during initialization.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"cocoa\",\n\"x11\" or \"windows\". These never have Unicode characters, and are not meant\nto be proper names.\n\n\\param index the index of a video driver.\n\\returns the name of the video driver with the given **index**.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumVideoDrivers",
          "name": "SDL_GetVideoDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "index",
              "type": "int"
            }
          ]
        },
        "SDL_GetCurrentVideoDriver": {
          "doc": "Get the name of the currently initialized video driver.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"cocoa\",\n\"x11\" or \"windows\". These never have Unicode characters, and are not meant\nto be proper names.\n\n\\returns the name of the current video driver or NULL if no driver has been\n         initialized.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumVideoDrivers\n\\sa SDL_GetVideoDriver",
          "name": "SDL_GetCurrentVideoDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": []
        },
        "SDL_GetSystemTheme": {
          "doc": "Get the current system theme.\n\n\\returns the current system theme, light, dark, or unknown.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetSystemTheme",
          "kind": "function",
          "type": "SDL_SystemTheme",
          "parameters": []
        },
        "SDL_GetDisplays": {
          "doc": "Get a list of currently connected displays.\n\n\\param count a pointer filled in with the number of displays returned, may\n             be NULL.\n\\returns a 0 terminated array of display instance IDs or NULL on failure;\n         call SDL_GetError() for more information. This should be freed\n         with SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDisplays",
          "kind": "function",
          "type": "SDL_DisplayID *",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetPrimaryDisplay": {
          "doc": "Return the primary display.\n\n\\returns the instance ID of the primary display on success or 0 on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetPrimaryDisplay",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": []
        },
        "SDL_GetDisplayProperties": {
          "doc": "Get the properties associated with a display.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN`: true if the display has HDR\n  headroom above the SDR white point. This is for informational and\n  diagnostic purposes only, as not all platforms provide this information\n  at the display level.\n\nOn KMS/DRM:\n\n- `SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER`: the \"panel\n  orientation\" property for the display in degrees of clockwise rotation.\n  Note that this is provided only as a hint, and the application is\n  responsible for any coordinate transformations needed to conform to the\n  requested display orientation.\n\n\\param displayID the instance ID of the display to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetDisplayProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER",
          "kind": "def"
        },
        "SDL_GetDisplayName": {
          "doc": "Get the name of a display in UTF-8 encoding.\n\n\\param displayID the instance ID of the display to query.\n\\returns the name of a display or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDisplayBounds": {
          "doc": "Get the desktop area represented by a display.\n\nThe primary display is often located at (0,0), but may be placed at a\ndifferent location depending on monitor layout.\n\n\\param displayID the instance ID of the display to query.\n\\param rect the SDL_Rect structure filled in with the display bounds.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayUsableBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayBounds",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetDisplayUsableBounds": {
          "doc": "Get the usable desktop area represented by a display, in screen\ncoordinates.\n\nThis is the same area as SDL_GetDisplayBounds() reports, but with portions\nreserved by the system removed. For example, on Apple's macOS, this\nsubtracts the area occupied by the menu bar and dock.\n\nSetting a window to be fullscreen generally bypasses these unusable areas,\nso these are good guidelines for the maximum space available to a\nnon-fullscreen window.\n\n\\param displayID the instance ID of the display to query.\n\\param rect the SDL_Rect structure filled in with the display bounds.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayUsableBounds",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_GetNaturalDisplayOrientation": {
          "doc": "Get the orientation of a display when it is unrotated.\n\n\\param displayID the instance ID of the display to query.\n\\returns the SDL_DisplayOrientation enum value of the display, or\n         `SDL_ORIENTATION_UNKNOWN` if it isn't available.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetNaturalDisplayOrientation",
          "kind": "function",
          "type": "SDL_DisplayOrientation",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetCurrentDisplayOrientation": {
          "doc": "Get the orientation of a display.\n\n\\param displayID the instance ID of the display to query.\n\\returns the SDL_DisplayOrientation enum value of the display, or\n         `SDL_ORIENTATION_UNKNOWN` if it isn't available.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetCurrentDisplayOrientation",
          "kind": "function",
          "type": "SDL_DisplayOrientation",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDisplayContentScale": {
          "doc": "Get the content scale of a display.\n\nThe content scale is the expected scale for content based on the DPI\nsettings of the display. For example, a 4K display might have a 2.0 (200%)\ndisplay scale, which means that the user expects UI elements to be twice as\nbig on this display, to aid in readability.\n\nAfter window creation, SDL_GetWindowDisplayScale() should be used to query\nthe content scale factor for individual windows instead of querying the\ndisplay for a window and calling this function, as the per-window content\nscale factor may differ from the base value of the display it is on,\nparticularly on high-DPI and/or multi-monitor desktop configurations.\n\n\\param displayID the instance ID of the display to query.\n\\returns the content scale of the display, or 0.0f on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowDisplayScale\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayContentScale",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetFullscreenDisplayModes": {
          "doc": "Get a list of fullscreen display modes available on a display.\n\nThe display modes are sorted in this priority:\n\n- w -> largest to smallest\n- h -> largest to smallest\n- bits per pixel -> more colors to fewer colors\n- packed pixel layout -> largest to smallest\n- refresh rate -> highest to lowest\n- pixel density -> lowest to highest\n\n\\param displayID the instance ID of the display to query.\n\\param count a pointer filled in with the number of display modes returned,\n             may be NULL.\n\\returns a NULL terminated array of display mode pointers or NULL on\n         failure; call SDL_GetError() for more information. This is a\n         single allocation that should be freed with SDL_free() when it is\n         no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays",
          "name": "SDL_GetFullscreenDisplayModes",
          "kind": "function",
          "type": "SDL_DisplayMode **",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_GetClosestFullscreenDisplayMode": {
          "doc": "Get the closest match to the requested display mode.\n\nThe available display modes are scanned and `closest` is filled in with the\nclosest mode matching the requested mode and returned. The mode format and\nrefresh rate default to the desktop mode if they are set to 0. The modes\nare scanned with size being first priority, format being second priority,\nand finally checking the refresh rate. If all the available modes are too\nsmall, then false is returned.\n\n\\param displayID the instance ID of the display to query.\n\\param w the width in pixels of the desired display mode.\n\\param h the height in pixels of the desired display mode.\n\\param refresh_rate the refresh rate of the desired display mode, or 0.0f\n                    for the desktop refresh rate.\n\\param include_high_density_modes boolean to include high density modes in\n                                  the search.\n\\param closest a pointer filled in with the closest display mode equal to\n               or larger than the desired mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplays\n\\sa SDL_GetFullscreenDisplayModes",
          "name": "SDL_GetClosestFullscreenDisplayMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "refresh_rate",
              "type": "float"
            },
            {
              "name": "include_high_density_modes",
              "type": "bool"
            },
            {
              "name": "closest",
              "type": "SDL_DisplayMode *"
            }
          ]
        },
        "SDL_GetDesktopDisplayMode": {
          "doc": "Get information about the desktop's display mode.\n\nThere's a difference between this function and SDL_GetCurrentDisplayMode()\nwhen SDL runs fullscreen and has changed the resolution. In that case this\nfunction will return the previous native display mode, and not the current\ndisplay mode.\n\n\\param displayID the instance ID of the display to query.\n\\returns a pointer to the desktop display mode or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetCurrentDisplayMode\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDesktopDisplayMode",
          "kind": "function",
          "type": "const SDL_DisplayMode *",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetCurrentDisplayMode": {
          "doc": "Get information about the current display mode.\n\nThere's a difference between this function and SDL_GetDesktopDisplayMode()\nwhen SDL runs fullscreen and has changed the resolution. In that case this\nfunction will return the current display mode, and not the previous native\ndisplay mode.\n\n\\param displayID the instance ID of the display to query.\n\\returns a pointer to the desktop display mode or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDesktopDisplayMode\n\\sa SDL_GetDisplays",
          "name": "SDL_GetCurrentDisplayMode",
          "kind": "function",
          "type": "const SDL_DisplayMode *",
          "parameters": [
            {
              "name": "displayID",
              "type": "SDL_DisplayID"
            }
          ]
        },
        "SDL_GetDisplayForPoint": {
          "doc": "Get the display containing a point.\n\n\\param point the point to query.\n\\returns the instance ID of the display containing the point or 0 on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayForPoint",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": [
            {
              "name": "point",
              "type": "const SDL_Point *"
            }
          ]
        },
        "SDL_GetDisplayForRect": {
          "doc": "Get the display primarily containing a rect.\n\n\\param rect the rect to query.\n\\returns the instance ID of the display entirely containing the rect or\n         closest to the center of the rect on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayForRect",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": [
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetDisplayForWindow": {
          "doc": "Get the display associated with a window.\n\n\\param window the window to query.\n\\returns the instance ID of the display containing the center of the window\n         on success or 0 on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetDisplayBounds\n\\sa SDL_GetDisplays",
          "name": "SDL_GetDisplayForWindow",
          "kind": "function",
          "type": "SDL_DisplayID",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowPixelDensity": {
          "doc": "Get the pixel density of a window.\n\nThis is a ratio of pixel size to window size. For example, if the window is\n1920x1080 and it has a high density back buffer of 3840x2160 pixels, it\nwould have a pixel density of 2.0.\n\n\\param window the window to query.\n\\returns the pixel density or 0.0f on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowDisplayScale",
          "name": "SDL_GetWindowPixelDensity",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowDisplayScale": {
          "doc": "Get the content display scale relative to a window's pixel size.\n\nThis is a combination of the window pixel density and the display content\nscale, and is the expected scale for displaying content in this window. For\nexample, if a 3840x2160 window had a display scale of 2.0, the user expects\nthe content to take twice as many pixels and be the same physical size as\nif it were being displayed in a 1920x1080 window with a display scale of\n1.0.\n\nConceptually this value corresponds to the scale display setting, and is\nupdated when that setting is changed, or the window moves to a display with\na different scale setting.\n\n\\param window the window to query.\n\\returns the display scale, or 0.0f on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowDisplayScale",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowFullscreenMode": {
          "doc": "Set the display mode to use when a window is visible and fullscreen.\n\nThis only affects the display mode used when the window is fullscreen. To\nchange the window size when the window is not fullscreen, use\nSDL_SetWindowSize().\n\nIf the window is currently in the fullscreen state, this request is\nasynchronous on some windowing systems and the new mode dimensions may not\nbe applied immediately upon the return of this function. If an immediate\nchange is required, call SDL_SyncWindow() to block until the changes have\ntaken effect.\n\nWhen the new mode takes effect, an SDL_EVENT_WINDOW_RESIZED and/or an\nSDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event will be emitted with the new mode\ndimensions.\n\n\\param window the window to affect.\n\\param mode a pointer to the display mode to use, which can be NULL for\n            borderless fullscreen desktop mode, or one of the fullscreen\n            modes returned by SDL_GetFullscreenDisplayModes() to set an\n            exclusive fullscreen mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFullscreenMode\n\\sa SDL_SetWindowFullscreen\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowFullscreenMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "mode",
              "type": "const SDL_DisplayMode *"
            }
          ]
        },
        "SDL_GetWindowFullscreenMode": {
          "doc": "Query the display mode to use when a window is visible at fullscreen.\n\n\\param window the window to query.\n\\returns a pointer to the exclusive fullscreen mode to use or NULL for\n         borderless fullscreen desktop mode.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_SetWindowFullscreen",
          "name": "SDL_GetWindowFullscreenMode",
          "kind": "function",
          "type": "const SDL_DisplayMode *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowICCProfile": {
          "doc": "Get the raw ICC profile data for the screen the window is currently on.\n\n\\param window the window to query.\n\\param size the size of the ICC profile.\n\\returns the raw ICC profile data on success or NULL on failure; call\n         SDL_GetError() for more information. This should be freed with\n         SDL_free() when it is no longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowICCProfile",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "size",
              "type": "size_t *"
            }
          ]
        },
        "SDL_GetWindowPixelFormat": {
          "doc": "Get the pixel format associated with the window.\n\n\\param window the window to query.\n\\returns the pixel format of the window on success or\n         SDL_PIXELFORMAT_UNKNOWN on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowPixelFormat",
          "kind": "function",
          "type": "SDL_PixelFormat",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindows": {
          "doc": "Get a list of valid windows.\n\n\\param count a pointer filled in with the number of windows returned, may\n             be NULL.\n\\returns a NULL terminated array of SDL_Window pointers or NULL on failure;\n         call SDL_GetError() for more information. This is a single\n         allocation that should be freed with SDL_free() when it is no\n         longer needed.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindows",
          "kind": "function",
          "type": "SDL_Window **",
          "parameters": [
            {
              "name": "count",
              "type": "int *"
            }
          ]
        },
        "SDL_CreateWindow": {
          "doc": "Create a window with the specified dimensions and flags.\n\n`flags` may be any of the following OR'd together:\n\n- `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution\n- `SDL_WINDOW_OPENGL`: window usable with an OpenGL context\n- `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another\n  window\n- `SDL_WINDOW_HIDDEN`: window is not visible\n- `SDL_WINDOW_BORDERLESS`: no window decoration\n- `SDL_WINDOW_RESIZABLE`: window can be resized\n- `SDL_WINDOW_MINIMIZED`: window is minimized\n- `SDL_WINDOW_MAXIMIZED`: window is maximized\n- `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus\n- `SDL_WINDOW_INPUT_FOCUS`: window has input focus\n- `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus\n- `SDL_WINDOW_EXTERNAL`: window not created by SDL\n- `SDL_WINDOW_MODAL`: window is modal\n- `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back\n  buffer if possible\n- `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to\n  MOUSE_GRABBED)\n- `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others\n- `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not\n  showing in the task bar and window list\n- `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not\n  get mouse or keyboard focus, requires a parent window\n- `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,\n  requires a parent window\n- `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input\n- `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance\n- `SDL_WINDOW_METAL`: window usable with a Metal instance\n- `SDL_WINDOW_TRANSPARENT`: window with transparent buffer\n- `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable\n\nThe SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.\n\nOn Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist\nproperty to YES, otherwise you will not receive a High-DPI OpenGL canvas.\n\nThe window pixel size may differ from its window coordinate size if the\nwindow is on a high pixel density display. Use SDL_GetWindowSize() to query\nthe client area's size in window coordinates, and\nSDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the\ndrawable size in pixels. Note that the drawable size can vary after the\nwindow is created and should be queried again if you get an\nSDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.\n\nIf the window is created with any of the SDL_WINDOW_OPENGL or\nSDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function\n(SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the\ncorresponding UnloadLibrary function is called by SDL_DestroyWindow().\n\nIf SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,\nSDL_CreateWindow() will fail, because SDL_Vulkan_LoadLibrary() will fail.\n\nIf SDL_WINDOW_METAL is specified on an OS that does not support Metal,\nSDL_CreateWindow() will fail.\n\nIf you intend to use this window with an SDL_Renderer, you should use\nSDL_CreateWindowAndRenderer() instead of this function, to avoid window\nflicker.\n\nOn non-Apple devices, SDL requires you to either not link to the Vulkan\nloader or link to a dynamic library version. This limitation may be removed\nin a future version of SDL.\n\n\\param title the title of the window, in UTF-8 encoding.\n\\param w the width of the window.\n\\param h the height of the window.\n\\param flags 0, or one or more SDL_WindowFlags OR'd together.\n\\returns the window that was created or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindowAndRenderer\n\\sa SDL_CreatePopupWindow\n\\sa SDL_CreateWindowWithProperties\n\\sa SDL_DestroyWindow",
          "name": "SDL_CreateWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "title",
              "type": "const char *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "SDL_WindowFlags"
            }
          ]
        },
        "SDL_CreatePopupWindow": {
          "doc": "Create a child popup window of the specified parent window.\n\nThe flags parameter **must** contain at least one of the following:\n\n- `SDL_WINDOW_TOOLTIP`: The popup window is a tooltip and will not pass any\n  input events.\n- `SDL_WINDOW_POPUP_MENU`: The popup window is a popup menu. The topmost\n  popup menu will implicitly gain the keyboard focus.\n\nThe following flags are not relevant to popup window creation and will be\nignored:\n\n- `SDL_WINDOW_MINIMIZED`\n- `SDL_WINDOW_MAXIMIZED`\n- `SDL_WINDOW_FULLSCREEN`\n- `SDL_WINDOW_BORDERLESS`\n\nThe following flags are incompatible with popup window creation and will\ncause it to fail:\n\n- `SDL_WINDOW_UTILITY`\n- `SDL_WINDOW_MODAL`\n\nThe parent parameter **must** be non-null and a valid window. The parent of\na popup window can be either a regular, toplevel window, or another popup\nwindow.\n\nPopup windows cannot be minimized, maximized, made fullscreen, raised,\nflash, be made a modal window, be the parent of a toplevel window, or grab\nthe mouse and/or keyboard. Attempts to do so will fail.\n\nPopup windows implicitly do not have a border/decorations and do not appear\non the taskbar/dock or in lists of windows such as alt-tab menus.\n\nIf a parent window is hidden or destroyed, any child popup windows will be\nrecursively hidden or destroyed as well. Child popup windows not explicitly\nhidden will be restored when the parent is shown.\n\n\\param parent the parent of the window, must not be NULL.\n\\param offset_x the x position of the popup window relative to the origin\n                of the parent.\n\\param offset_y the y position of the popup window relative to the origin\n                of the parent window.\n\\param w the width of the window.\n\\param h the height of the window.\n\\param flags SDL_WINDOW_TOOLTIP or SDL_WINDOW_POPUP_MENU, and zero or more\n             additional SDL_WindowFlags OR'd together.\n\\returns the window that was created or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow\n\\sa SDL_CreateWindowWithProperties\n\\sa SDL_DestroyWindow\n\\sa SDL_GetWindowParent",
          "name": "SDL_CreatePopupWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "parent",
              "type": "SDL_Window *"
            },
            {
              "name": "offset_x",
              "type": "int"
            },
            {
              "name": "offset_y",
              "type": "int"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "SDL_WindowFlags"
            }
          ]
        },
        "SDL_CreateWindowWithProperties": {
          "doc": "Create a window with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN`: true if the window should\n  be always on top\n- `SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN`: true if the window has no\n  window decoration\n- `SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN`: true if the\n  window will be used with an externally managed graphics context.\n- `SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN`: true if the window should\n  accept keyboard input (defaults true)\n- `SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN`: true if the window should\n  start in fullscreen mode at desktop resolution\n- `SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER`: the height of the window\n- `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN`: true if the window should start\n  hidden\n- `SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN`: true if the window\n  uses a high pixel density buffer if possible\n- `SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN`: true if the window should\n  start maximized\n- `SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN`: true if the window is a popup menu\n- `SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN`: true if the window will be used\n  with Metal rendering\n- `SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN`: true if the window should\n  start minimized\n- `SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN`: true if the window is modal to\n  its parent\n- `SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN`: true if the window starts\n  with grabbed mouse focus\n- `SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`: true if the window will be used\n  with OpenGL rendering\n- `SDL_PROP_WINDOW_CREATE_PARENT_POINTER`: an SDL_Window that will be the\n  parent of this window, required for windows with the \"tooltip\", \"menu\",\n  and \"modal\" properties\n- `SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN`: true if the window should be\n  resizable\n- `SDL_PROP_WINDOW_CREATE_TITLE_STRING`: the title of the window, in UTF-8\n  encoding\n- `SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN`: true if the window show\n  transparent in the areas with alpha of 0\n- `SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN`: true if the window is a tooltip\n- `SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN`: true if the window is a utility\n  window, not showing in the task bar and window list\n- `SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN`: true if the window will be used\n  with Vulkan rendering\n- `SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER`: the width of the window\n- `SDL_PROP_WINDOW_CREATE_X_NUMBER`: the x position of the window, or\n  `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is\n  relative to the parent for windows with the \"tooltip\" or \"menu\" property\n  set.\n- `SDL_PROP_WINDOW_CREATE_Y_NUMBER`: the y position of the window, or\n  `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is\n  relative to the parent for windows with the \"tooltip\" or \"menu\" property\n  set.\n\nThese are additional supported properties on macOS:\n\n- `SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER`: the\n  `(__unsafe_unretained)` NSWindow associated with the window, if you want\n  to wrap an existing window.\n- `SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER`: the `(__unsafe_unretained)`\n  NSView associated with the window, defaults to `[window contentView]`\n\nThese are additional supported properties on Wayland:\n\n- `SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN` - true if\n  the application wants to use the Wayland surface for a custom role and\n  does not want it attached to an XDG toplevel window. See\n  [README/wayland](README/wayland) for more information on using custom\n  surfaces.\n- `SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN` - true if the\n  application wants an associated `wl_egl_window` object to be created and\n  attached to the window, even if the window does not have the OpenGL\n  property or `SDL_WINDOW_OPENGL` flag set.\n- `SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER` - the wl_surface\n  associated with the window, if you want to wrap an existing window. See\n  [README/wayland](README/wayland) for more information.\n\nThese are additional supported properties on Windows:\n\n- `SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER`: the HWND associated with the\n  window, if you want to wrap an existing window.\n- `SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER`: optional,\n  another window to share pixel format with, useful for OpenGL windows\n\nThese are additional supported properties with X11:\n\n- `SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER`: the X11 Window associated\n  with the window, if you want to wrap an existing window.\n\nThe window is implicitly shown if the \"hidden\" property is not set.\n\nWindows with the \"tooltip\" and \"menu\" properties are popup windows and have\nthe behaviors and guidelines outlined in SDL_CreatePopupWindow().\n\nIf this window is being created to be used with an SDL_Renderer, you should\nnot add a graphics API specific property\n(`SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`, etc), as SDL will handle that\ninternally when it chooses a renderer. However, SDL might need to recreate\nyour window at that point, which may cause the window to appear briefly,\nand then flicker as it is recreated. The correct approach to this is to\ncreate the window with the `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN` property\nset to true, then create the renderer, then show the window with\nSDL_ShowWindow().\n\n\\param props the properties to use.\n\\returns the window that was created or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties\n\\sa SDL_CreateWindow\n\\sa SDL_DestroyWindow",
          "name": "SDL_CreateWindowWithProperties",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_PARENT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_PARENT_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_TITLE_STRING": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_TITLE_STRING",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_X_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_X_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_Y_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_Y_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER",
          "kind": "def"
        },
        "SDL_GetWindowID": {
          "doc": "Get the numeric ID of a window.\n\nThe numeric ID is what SDL_WindowEvent references, and is necessary to map\nthese events to specific SDL_Window objects.\n\n\\param window the window to query.\n\\returns the ID of the window on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFromID",
          "name": "SDL_GetWindowID",
          "kind": "function",
          "type": "SDL_WindowID",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowFromID": {
          "doc": "Get a window from a stored ID.\n\nThe numeric ID is what SDL_WindowEvent references, and is necessary to map\nthese events to specific SDL_Window objects.\n\n\\param id the ID of the window.\n\\returns the window associated with `id` or NULL if it doesn't exist; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowID",
          "name": "SDL_GetWindowFromID",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "id",
              "type": "SDL_WindowID"
            }
          ]
        },
        "SDL_GetWindowParent": {
          "doc": "Get parent of a window.\n\n\\param window the window to query.\n\\returns the parent of the window on success or NULL if the window has no\n         parent.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePopupWindow",
          "name": "SDL_GetWindowParent",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowProperties": {
          "doc": "Get the properties associated with a window.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_WINDOW_SHAPE_POINTER`: the surface associated with a shaped\n  window\n- `SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN`: true if the window has HDR\n  headroom above the SDR white point. This property can change dynamically\n  when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the\n  SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the\n  SDR white level in scRGB colorspace, and on Apple platforms this is\n  always 1.0 for EDR content. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT`: the additional high dynamic range\n  that can be displayed, in terms of the SDR white point. When HDR is not\n  enabled, this will be 1.0. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n\nOn Android:\n\n- `SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER`: the ANativeWindow associated\n  with the window\n- `SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER`: the EGLSurface associated with\n  the window\n\nOn iOS:\n\n- `SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`\n  UIWindow associated with the window\n- `SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag\n  associated with metal views on the window\n- `SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's\n  framebuffer object. It must be bound when rendering to the screen using\n  OpenGL.\n- `SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's\n  renderbuffer object. It must be bound when SDL_GL_SwapWindow is called.\n- `SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL\n  view's resolve framebuffer, when MSAA is used.\n\nOn KMS/DRM:\n\n- `SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated\n  with the window (e.g. the X in /dev/dri/cardX)\n- `SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the\n  window\n- `SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated\n  with the window\n\nOn macOS:\n\n- `SDL_PROP_WINDOW_COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`\n  NSWindow associated with the window\n- `SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag\n  assocated with metal views on the window\n\nOn OpenVR:\n\n- `SDL_PROP_WINDOW_OPENVR_OVERLAY_ID`: the OpenVR Overlay Handle ID for the\n  associated overlay window.\n\nOn Vivante:\n\n- `SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType\n  associated with the window\n- `SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType\n  associated with the window\n- `SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER`: the EGLSurface associated with\n  the window\n\nOn Windows:\n\n- `SDL_PROP_WINDOW_WIN32_HWND_POINTER`: the HWND associated with the window\n- `SDL_PROP_WINDOW_WIN32_HDC_POINTER`: the HDC associated with the window\n- `SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER`: the HINSTANCE associated with\n  the window\n\nOn Wayland:\n\nNote: The `xdg_*` window objects do not internally persist across window\nshow/hide calls. They will be null if the window is hidden and must be\nqueried each time it is shown.\n\n- `SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER`: the wl_display associated with\n  the window\n- `SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER`: the wl_surface associated with\n  the window\n- `SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER`: the wp_viewport associated\n  with the window\n- `SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window\n  associated with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated\n  with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role\n  associated with the window\n- 'SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export\n  handle associated with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role\n  associated with the window\n- `SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner\n  associated with the window, in popup mode\n\nOn X11:\n\n- `SDL_PROP_WINDOW_X11_DISPLAY_POINTER`: the X11 Display associated with\n  the window\n- `SDL_PROP_WINDOW_X11_SCREEN_NUMBER`: the screen number associated with\n  the window\n- `SDL_PROP_WINDOW_X11_WINDOW_NUMBER`: the X11 Window associated with the\n  window\n\n\\param window the window to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_PROP_WINDOW_SHAPE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_SHAPE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_COCOA_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_COCOA_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_OPENVR_OVERLAY_ID": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_OPENVR_OVERLAY_ID",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WIN32_HWND_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WIN32_HWND_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WIN32_HDC_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WIN32_HDC_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_X11_DISPLAY_POINTER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_X11_DISPLAY_POINTER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_X11_SCREEN_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_X11_SCREEN_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_WINDOW_X11_WINDOW_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_WINDOW_X11_WINDOW_NUMBER",
          "kind": "def"
        },
        "SDL_GetWindowFlags": {
          "doc": "Get the window flags.\n\n\\param window the window to query.\n\\returns a mask of the SDL_WindowFlags associated with `window`.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow\n\\sa SDL_HideWindow\n\\sa SDL_MaximizeWindow\n\\sa SDL_MinimizeWindow\n\\sa SDL_SetWindowFullscreen\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_ShowWindow",
          "name": "SDL_GetWindowFlags",
          "kind": "function",
          "type": "SDL_WindowFlags",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowTitle": {
          "doc": "Set the title of a window.\n\nThis string is expected to be in UTF-8 encoding.\n\n\\param window the window to change.\n\\param title the desired window title in UTF-8 format.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowTitle",
          "name": "SDL_SetWindowTitle",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "title",
              "type": "const char *"
            }
          ]
        },
        "SDL_GetWindowTitle": {
          "doc": "Get the title of a window.\n\n\\param window the window to query.\n\\returns the title of the window in UTF-8 format or \"\" if there is no\n         title.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowTitle",
          "name": "SDL_GetWindowTitle",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowIcon": {
          "doc": "Set the icon for a window.\n\nIf this function is passed a surface with alternate representations, the\nsurface will be interpreted as the content to be used for 100% display\nscale, and the alternate representations will be used for high DPI\nsituations. For example, if the original surface is 32x32, then on a 2x\nmacOS display or 200% display scale on Windows, a 64x64 version of the\nimage will be used, if available. If a matching version of the image isn't\navailable, the closest larger size image will be downscaled to the\nappropriate size and be used instead, if available. Otherwise, the closest\nsmaller image will be upscaled and be used instead.\n\n\\param window the window to change.\n\\param icon an SDL_Surface structure containing the icon for the window.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowIcon",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "icon",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_SetWindowPosition": {
          "doc": "Request that the window's position be set.\n\nIf the window is in an exclusive fullscreen or maximized state, this\nrequest has no effect.\n\nThis can be used to reposition fullscreen-desktop windows onto a different\ndisplay, however, as exclusive fullscreen windows are locked to a specific\ndisplay, they can only be repositioned programmatically via\nSDL_SetWindowFullscreenMode().\n\nOn some windowing systems this request is asynchronous and the new\ncoordinates may not have have been applied immediately upon the return of\nthis function. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window position changes, an SDL_EVENT_WINDOW_MOVED event will be\nemitted with the window's new coordinates. Note that the new coordinates\nmay not match the exact coordinates requested, as some windowing systems\ncan restrict the position of the window in certain scenarios (e.g.\nconstraining the position so the window is always within desktop bounds).\nAdditionally, as this is just a request, it can be denied by the windowing\nsystem.\n\n\\param window the window to reposition.\n\\param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or\n         `SDL_WINDOWPOS_UNDEFINED`.\n\\param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or\n         `SDL_WINDOWPOS_UNDEFINED`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowPosition\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowPosition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowPosition": {
          "doc": "Get the position of a window.\n\nThis is the current position of the window as last reported by the\nwindowing system.\n\nIf you do not need the value for one of the positions a NULL may be passed\nin the `x` or `y` parameter.\n\n\\param window the window to query.\n\\param x a pointer filled in with the x position of the window, may be\n         NULL.\n\\param y a pointer filled in with the y position of the window, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowPosition",
          "name": "SDL_GetWindowPosition",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "int *"
            },
            {
              "name": "y",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowSize": {
          "doc": "Request that the size of a window's client area be set.\n\nIf the window is in a fullscreen or maximized state, this request has no\neffect.\n\nTo change the exclusive fullscreen mode of a window, use\nSDL_SetWindowFullscreenMode().\n\nOn some windowing systems, this request is asynchronous and the new window\nsize may not have have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be\nemitted with the new window dimensions. Note that the new dimensions may\nnot match the exact size requested, as some windowing systems can restrict\nthe window size in certain scenarios (e.g. constraining the size of the\ncontent area to remain within the usable desktop bounds). Additionally, as\nthis is just a request, it can be denied by the windowing system.\n\n\\param window the window to change.\n\\param w the width of the window, must be > 0.\n\\param h the height of the window, must be > 0.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSize\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowSize": {
          "doc": "Get the size of a window's client area.\n\nThe window pixel size may differ from its window coordinate size if the\nwindow is on a high pixel density display. Use SDL_GetWindowSizeInPixels()\nor SDL_GetRenderOutputSize() to get the real client area size in pixels.\n\n\\param window the window to query the width and height from.\n\\param w a pointer filled in with the width of the window, may be NULL.\n\\param h a pointer filled in with the height of the window, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderOutputSize\n\\sa SDL_GetWindowSizeInPixels\n\\sa SDL_SetWindowSize",
          "name": "SDL_GetWindowSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_GetWindowSafeArea": {
          "doc": "Get the safe area for this window.\n\nSome devices have portions of the screen which are partially obscured or\nnot interactive, possibly due to on-screen controls, curved edges, camera\nnotches, TV overscan, etc. This function provides the area of the window\nwhich is safe to have interactable content. You should continue rendering\ninto the rest of the window, but it should not contain visually important\nor interactible content.\n\n\\param window the window to query.\n\\param rect a pointer filled in with the client area that is safe for\n            interactive content.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetWindowSafeArea",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_SetWindowAspectRatio": {
          "doc": "Request that the aspect ratio of a window's client area be set.\n\nThe aspect ratio is the ratio of width divided by height, e.g. 2560x1600\nwould be 1.6. Larger aspect ratios are wider and smaller aspect ratios are\nnarrower.\n\nIf, at the time of this request, the window in a fixed-size state, such as\nmaximized or fullscreen, the request will be deferred until the window\nexits this state and becomes resizable again.\n\nOn some windowing systems, this request is asynchronous and the new window\naspect ratio may not have have been applied immediately upon the return of\nthis function. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be\nemitted with the new window dimensions. Note that the new dimensions may\nnot match the exact aspect ratio requested, as some windowing systems can\nrestrict the window size in certain scenarios (e.g. constraining the size\nof the content area to remain within the usable desktop bounds).\nAdditionally, as this is just a request, it can be denied by the windowing\nsystem.\n\n\\param window the window to change.\n\\param min_aspect the minimum aspect ratio of the window, or 0.0f for no\n                  limit.\n\\param max_aspect the maximum aspect ratio of the window, or 0.0f for no\n                  limit.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowAspectRatio\n\\sa SDL_SyncWindow",
          "name": "SDL_SetWindowAspectRatio",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "min_aspect",
              "type": "float"
            },
            {
              "name": "max_aspect",
              "type": "float"
            }
          ]
        },
        "SDL_GetWindowAspectRatio": {
          "doc": "Get the size of a window's client area.\n\n\\param window the window to query the width and height from.\n\\param min_aspect a pointer filled in with the minimum aspect ratio of the\n                  window, may be NULL.\n\\param max_aspect a pointer filled in with the maximum aspect ratio of the\n                  window, may be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowAspectRatio",
          "name": "SDL_GetWindowAspectRatio",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "min_aspect",
              "type": "float *"
            },
            {
              "name": "max_aspect",
              "type": "float *"
            }
          ]
        },
        "SDL_GetWindowBordersSize": {
          "doc": "Get the size of a window's borders (decorations) around the client area.\n\nNote: If this function fails (returns false), the size values will be\ninitialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the\nwindow in question was borderless.\n\nNote: This function may fail on systems where the window has not yet been\ndecorated by the display server (for example, immediately after calling\nSDL_CreateWindow). It is recommended that you wait at least until the\nwindow has been presented and composited, so that the window system has a\nchance to decorate the window and provide the border dimensions to SDL.\n\nThis function also returns false if getting the information is not\nsupported.\n\n\\param window the window to query the size values of the border\n              (decorations) from.\n\\param top pointer to variable for storing the size of the top border; NULL\n           is permitted.\n\\param left pointer to variable for storing the size of the left border;\n            NULL is permitted.\n\\param bottom pointer to variable for storing the size of the bottom\n              border; NULL is permitted.\n\\param right pointer to variable for storing the size of the right border;\n             NULL is permitted.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSize",
          "name": "SDL_GetWindowBordersSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "top",
              "type": "int *"
            },
            {
              "name": "left",
              "type": "int *"
            },
            {
              "name": "bottom",
              "type": "int *"
            },
            {
              "name": "right",
              "type": "int *"
            }
          ]
        },
        "SDL_GetWindowSizeInPixels": {
          "doc": "Get the size of a window's client area, in pixels.\n\n\\param window the window from which the drawable size should be queried.\n\\param w a pointer to variable for storing the width in pixels, may be\n         NULL.\n\\param h a pointer to variable for storing the height in pixels, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateWindow\n\\sa SDL_GetWindowSize",
          "name": "SDL_GetWindowSizeInPixels",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowMinimumSize": {
          "doc": "Set the minimum size of a window's client area.\n\n\\param window the window to change.\n\\param min_w the minimum width of the window, or 0 for no limit.\n\\param min_h the minimum height of the window, or 0 for no limit.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMinimumSize\n\\sa SDL_SetWindowMaximumSize",
          "name": "SDL_SetWindowMinimumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "min_w",
              "type": "int"
            },
            {
              "name": "min_h",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowMinimumSize": {
          "doc": "Get the minimum size of a window's client area.\n\n\\param window the window to query.\n\\param w a pointer filled in with the minimum width of the window, may be\n         NULL.\n\\param h a pointer filled in with the minimum height of the window, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMaximumSize\n\\sa SDL_SetWindowMinimumSize",
          "name": "SDL_GetWindowMinimumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowMaximumSize": {
          "doc": "Set the maximum size of a window's client area.\n\n\\param window the window to change.\n\\param max_w the maximum width of the window, or 0 for no limit.\n\\param max_h the maximum height of the window, or 0 for no limit.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMaximumSize\n\\sa SDL_SetWindowMinimumSize",
          "name": "SDL_SetWindowMaximumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "max_w",
              "type": "int"
            },
            {
              "name": "max_h",
              "type": "int"
            }
          ]
        },
        "SDL_GetWindowMaximumSize": {
          "doc": "Get the maximum size of a window's client area.\n\n\\param window the window to query.\n\\param w a pointer filled in with the maximum width of the window, may be\n         NULL.\n\\param h a pointer filled in with the maximum height of the window, may be\n         NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMinimumSize\n\\sa SDL_SetWindowMaximumSize",
          "name": "SDL_GetWindowMaximumSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_SetWindowBordered": {
          "doc": "Set the border state of a window.\n\nThis will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add\nor remove the border from the actual window. This is a no-op if the\nwindow's border already matches the requested state.\n\nYou can't change the border state of a fullscreen window.\n\n\\param window the window of which to change the border state.\n\\param bordered false to remove border, true to add border.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_SetWindowBordered",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "bordered",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowResizable": {
          "doc": "Set the user-resizable state of a window.\n\nThis will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and\nallow/disallow user resizing of the window. This is a no-op if the window's\nresizable state already matches the requested state.\n\nYou can't change the resizable state of a fullscreen window.\n\n\\param window the window of which to change the resizable state.\n\\param resizable true to allow resizing, false to disallow.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_SetWindowResizable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "resizable",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowAlwaysOnTop": {
          "doc": "Set the window to always be above the others.\n\nThis will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This\nwill bring the window to the front and keep the window above the rest.\n\n\\param window the window of which to change the always on top state.\n\\param on_top true to set the window always on top, false to disable.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFlags",
          "name": "SDL_SetWindowAlwaysOnTop",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "on_top",
              "type": "bool"
            }
          ]
        },
        "SDL_ShowWindow": {
          "doc": "Show a window.\n\n\\param window the window to show.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_HideWindow\n\\sa SDL_RaiseWindow",
          "name": "SDL_ShowWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_HideWindow": {
          "doc": "Hide a window.\n\n\\param window the window to hide.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ShowWindow\n\\sa SDL_WINDOW_HIDDEN",
          "name": "SDL_HideWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_RaiseWindow": {
          "doc": "Request that a window be raised above other windows and gain the input\nfocus.\n\nThe result of this request is subject to desktop window manager policy,\nparticularly if raising the requested window would result in stealing focus\nfrom another application. If the window is successfully raised and gains\ninput focus, an SDL_EVENT_WINDOW_FOCUS_GAINED event will be emitted, and\nthe window will have the SDL_WINDOW_INPUT_FOCUS flag set.\n\n\\param window the window to raise.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RaiseWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_MaximizeWindow": {
          "doc": "Request that the window be made as large as possible.\n\nNon-resizable windows can't be maximized. The window must have the\nSDL_WINDOW_RESIZABLE flag set, or this will have no effect.\n\nOn some windowing systems this request is asynchronous and the new window\nstate may not have have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be\nemitted. Note that, as this is just a request, the windowing system can\ndeny the state change.\n\nWhen maximizing a window, whether the constraints set via\nSDL_SetWindowMaximumSize() are honored depends on the policy of the window\nmanager. Win32 and macOS enforce the constraints when maximizing, while X11\nand Wayland window managers may vary.\n\n\\param window the window to maximize.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MinimizeWindow\n\\sa SDL_RestoreWindow\n\\sa SDL_SyncWindow",
          "name": "SDL_MaximizeWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_MinimizeWindow": {
          "doc": "Request that the window be minimized to an iconic representation.\n\nIf the window is in a fullscreen state, this request has no direct effect.\nIt may alter the state the window is returned to when leaving fullscreen.\n\nOn some windowing systems this request is asynchronous and the new window\nstate may not have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be\nemitted. Note that, as this is just a request, the windowing system can\ndeny the state change.\n\n\\param window the window to minimize.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MaximizeWindow\n\\sa SDL_RestoreWindow\n\\sa SDL_SyncWindow",
          "name": "SDL_MinimizeWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_RestoreWindow": {
          "doc": "Request that the size and position of a minimized or maximized window be\nrestored.\n\nIf the window is in a fullscreen state, this request has no direct effect.\nIt may alter the state the window is returned to when leaving fullscreen.\n\nOn some windowing systems this request is asynchronous and the new window\nstate may not have have been applied immediately upon the return of this\nfunction. If an immediate change is required, call SDL_SyncWindow() to\nblock until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be\nemitted. Note that, as this is just a request, the windowing system can\ndeny the state change.\n\n\\param window the window to restore.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_MaximizeWindow\n\\sa SDL_MinimizeWindow\n\\sa SDL_SyncWindow",
          "name": "SDL_RestoreWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowFullscreen": {
          "doc": "Request that the window's fullscreen state be changed.\n\nBy default a window in fullscreen state uses borderless fullscreen desktop\nmode, but a specific exclusive display mode can be set using\nSDL_SetWindowFullscreenMode().\n\nOn some windowing systems this request is asynchronous and the new\nfullscreen state may not have have been applied immediately upon the return\nof this function. If an immediate change is required, call SDL_SyncWindow()\nto block until the changes have taken effect.\n\nWhen the window state changes, an SDL_EVENT_WINDOW_ENTER_FULLSCREEN or\nSDL_EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this\nis just a request, it can be denied by the windowing system.\n\n\\param window the window to change.\n\\param fullscreen true for fullscreen mode, false for windowed mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowFullscreenMode\n\\sa SDL_SetWindowFullscreenMode\n\\sa SDL_SyncWindow\n\\sa SDL_WINDOW_FULLSCREEN",
          "name": "SDL_SetWindowFullscreen",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "fullscreen",
              "type": "bool"
            }
          ]
        },
        "SDL_SyncWindow": {
          "doc": "Block until any pending window state is finalized.\n\nOn asynchronous windowing systems, this acts as a synchronization barrier\nfor pending window state. It will attempt to wait until any pending window\nstate has been applied and is guaranteed to return within finite time. Note\nthat for how long it can potentially block depends on the underlying window\nsystem, as window state changes may involve somewhat lengthy animations\nthat must complete before the window is in its final requested state.\n\nOn windowing systems where changes are immediate, this does nothing.\n\n\\param window the window for which to wait for the pending state to be\n              applied.\n\\returns true on success or false if the operation timed out before the\n         window was in the requested state.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowSize\n\\sa SDL_SetWindowPosition\n\\sa SDL_SetWindowFullscreen\n\\sa SDL_MinimizeWindow\n\\sa SDL_MaximizeWindow\n\\sa SDL_RestoreWindow\n\\sa SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS",
          "name": "SDL_SyncWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_WindowHasSurface": {
          "doc": "Return whether the window has a surface associated with it.\n\n\\param window the window to query.\n\\returns true if there is a surface associated with the window, or false\n         otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface",
          "name": "SDL_WindowHasSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowSurface": {
          "doc": "Get the SDL surface associated with the window.\n\nA new surface will be created with the optimal format for the window, if\nnecessary. This surface will be freed when the window is destroyed. Do not\nfree this surface.\n\nThis surface will be invalidated if the window is resized. After resizing a\nwindow this function must be called again to return a valid surface.\n\nYou may not combine this with 3D or the rendering API on this window.\n\nThis function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.\n\n\\param window the window to query.\n\\returns the surface associated with the window, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyWindowSurface\n\\sa SDL_WindowHasSurface\n\\sa SDL_UpdateWindowSurface\n\\sa SDL_UpdateWindowSurfaceRects",
          "name": "SDL_GetWindowSurface",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowSurfaceVSync": {
          "doc": "Toggle VSync for the window surface.\n\nWhen a window surface is created, vsync defaults to\nSDL_WINDOW_SURFACE_VSYNC_DISABLED.\n\nThe `vsync` parameter can be 1 to synchronize present with every vertical\nrefresh, 2 to synchronize present with every second vertical refresh, etc.,\nSDL_WINDOW_SURFACE_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync),\nor SDL_WINDOW_SURFACE_VSYNC_DISABLED to disable. Not every value is\nsupported by every driver, so you should check the return value to see\nwhether the requested setting is supported.\n\n\\param window the window.\n\\param vsync the vertical refresh sync interval.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurfaceVSync",
          "name": "SDL_SetWindowSurfaceVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "vsync",
              "type": "int"
            }
          ]
        },
        "SDL_WINDOW_SURFACE_VSYNC_DISABLED": {
          "doc": "",
          "name": "SDL_WINDOW_SURFACE_VSYNC_DISABLED",
          "kind": "def"
        },
        "SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE": {
          "doc": "",
          "name": "SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE",
          "kind": "def"
        },
        "SDL_GetWindowSurfaceVSync": {
          "doc": "Get VSync for the window surface.\n\n\\param window the window to query.\n\\param vsync an int filled with the current vertical refresh sync interval.\n             See SDL_SetWindowSurfaceVSync() for the meaning of the value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowSurfaceVSync",
          "name": "SDL_GetWindowSurfaceVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "vsync",
              "type": "int *"
            }
          ]
        },
        "SDL_UpdateWindowSurface": {
          "doc": "Copy the window surface to the screen.\n\nThis is the function you use to reflect any changes to the surface on the\nscreen.\n\nThis function is equivalent to the SDL 1.2 API SDL_Flip().\n\n\\param window the window to update.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface\n\\sa SDL_UpdateWindowSurfaceRects",
          "name": "SDL_UpdateWindowSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_UpdateWindowSurfaceRects": {
          "doc": "Copy areas of the window surface to the screen.\n\nThis is the function you use to reflect changes to portions of the surface\non the screen.\n\nThis function is equivalent to the SDL 1.2 API SDL_UpdateRects().\n\nNote that this function will update _at least_ the rectangles specified,\nbut this is only intended as an optimization; in practice, this might\nupdate more of the screen (or all of the screen!), depending on what method\nSDL uses to send pixels to the system.\n\n\\param window the window to update.\n\\param rects an array of SDL_Rect structures representing areas of the\n             surface to copy, in pixels.\n\\param numrects the number of rectangles.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface\n\\sa SDL_UpdateWindowSurface",
          "name": "SDL_UpdateWindowSurfaceRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rects",
              "type": "const SDL_Rect *"
            },
            {
              "name": "numrects",
              "type": "int"
            }
          ]
        },
        "SDL_DestroyWindowSurface": {
          "doc": "Destroy the surface associated with the window.\n\n\\param window the window to update.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowSurface\n\\sa SDL_WindowHasSurface",
          "name": "SDL_DestroyWindowSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowKeyboardGrab": {
          "doc": "Set a window's keyboard grab mode.\n\nKeyboard grab enables capture of system keyboard shortcuts like Alt+Tab or\nthe Meta/Super key. Note that not all system keyboard shortcuts can be\ncaptured by applications (one example is Ctrl+Alt+Del on Windows).\n\nThis is primarily intended for specialized applications such as VNC clients\nor VM frontends. Normal games should not use keyboard grab.\n\nWhen keyboard grab is enabled, SDL will continue to handle Alt+Tab when the\nwindow is full-screen to ensure the user is not trapped in your\napplication. If you have a custom keyboard shortcut to exit fullscreen\nmode, you may suppress this behavior with\n`SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.\n\nIf the caller enables a grab while another window is currently grabbed, the\nother window loses its grab in favor of the caller's window.\n\n\\param window the window for which the keyboard grab mode should be set.\n\\param grabbed this is true to grab keyboard, and false to release.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowKeyboardGrab\n\\sa SDL_SetWindowMouseGrab",
          "name": "SDL_SetWindowKeyboardGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "grabbed",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowMouseGrab": {
          "doc": "Set a window's mouse grab mode.\n\nMouse grab confines the mouse cursor to the window.\n\n\\param window the window for which the mouse grab mode should be set.\n\\param grabbed this is true to grab mouse, and false to release.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMouseRect\n\\sa SDL_SetWindowMouseRect\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_SetWindowMouseGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "grabbed",
              "type": "bool"
            }
          ]
        },
        "SDL_GetWindowKeyboardGrab": {
          "doc": "Get a window's keyboard grab mode.\n\n\\param window the window to query.\n\\returns true if keyboard is grabbed, and false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_GetWindowKeyboardGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetWindowMouseGrab": {
          "doc": "Get a window's mouse grab mode.\n\n\\param window the window to query.\n\\returns true if mouse is grabbed, and false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMouseRect\n\\sa SDL_SetWindowMouseRect\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_GetWindowMouseGrab",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetGrabbedWindow": {
          "doc": "Get the window that currently has an input grab enabled.\n\n\\returns the window if input is grabbed or NULL otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowMouseGrab\n\\sa SDL_SetWindowKeyboardGrab",
          "name": "SDL_GetGrabbedWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": []
        },
        "SDL_SetWindowMouseRect": {
          "doc": "Confines the cursor to the specified area of a window.\n\nNote that this does NOT grab the cursor, it only defines the area a cursor\nis restricted to when the window has mouse focus.\n\n\\param window the window that will be associated with the barrier.\n\\param rect a rectangle area in window-relative coordinates. If NULL the\n            barrier for the specified window will be destroyed.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowMouseRect\n\\sa SDL_GetWindowMouseGrab\n\\sa SDL_SetWindowMouseGrab",
          "name": "SDL_SetWindowMouseRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetWindowMouseRect": {
          "doc": "Get the mouse confinement rectangle of a window.\n\n\\param window the window to query.\n\\returns a pointer to the mouse confinement rectangle of a window, or NULL\n         if there isn't one.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowMouseRect\n\\sa SDL_GetWindowMouseGrab\n\\sa SDL_SetWindowMouseGrab",
          "name": "SDL_GetWindowMouseRect",
          "kind": "function",
          "type": "const SDL_Rect *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowOpacity": {
          "doc": "Set the opacity for a window.\n\nThe parameter `opacity` will be clamped internally between 0.0f\n(transparent) and 1.0f (opaque).\n\nThis function also returns false if setting the opacity isn't supported.\n\n\\param window the window which will be made transparent or opaque.\n\\param opacity the opacity value (0.0f - transparent, 1.0f - opaque).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetWindowOpacity",
          "name": "SDL_SetWindowOpacity",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "opacity",
              "type": "float"
            }
          ]
        },
        "SDL_GetWindowOpacity": {
          "doc": "Get the opacity of a window.\n\nIf transparency isn't supported on this platform, opacity will be returned\nas 1.0f without error.\n\n\\param window the window to get the current opacity value from.\n\\returns the opacity, (0.0f - transparent, 1.0f - opaque), or -1.0f on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowOpacity",
          "name": "SDL_GetWindowOpacity",
          "kind": "function",
          "type": "float",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowParent": {
          "doc": "Set the window as a child of a parent window.\n\nIf the window is already the child of an existing window, it will be\nreparented to the new owner. Setting the parent window to NULL unparents\nthe window and removes child window status.\n\nIf a parent window is hidden or destroyed, the operation will be\nrecursively applied to child windows. Child windows hidden with the parent\nthat did not have their hidden status explicitly set will be restored when\nthe parent is shown.\n\nAttempting to set the parent of a window that is currently in the modal\nstate will fail. Use SDL_SetWindowModal() to cancel the modal status before\nattempting to change the parent.\n\nPopup windows cannot change parents and attempts to do so will fail.\n\nSetting a parent window that is currently the sibling or descendent of the\nchild window results in undefined behavior.\n\n\\param window the window that should become the child of a parent.\n\\param parent the new parent window for the child window.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowModal",
          "name": "SDL_SetWindowParent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "parent",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_SetWindowModal": {
          "doc": "Toggle the state of the window as modal.\n\nTo enable modal status on a window, the window must currently be the child\nwindow of a parent, or toggling modal status on will fail.\n\n\\param window the window on which to set the modal state.\n\\param modal true to toggle modal status on, false to toggle it off.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetWindowParent\n\\sa SDL_WINDOW_MODAL",
          "name": "SDL_SetWindowModal",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "modal",
              "type": "bool"
            }
          ]
        },
        "SDL_SetWindowFocusable": {
          "doc": "Set whether the window may have input focus.\n\n\\param window the window to set focusable state.\n\\param focusable true to allow input focus, false to not allow input focus.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowFocusable",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "focusable",
              "type": "bool"
            }
          ]
        },
        "SDL_ShowWindowSystemMenu": {
          "doc": "Display the system-level window menu.\n\nThis default window menu is provided by the system and on some platforms\nprovides functionality for setting or changing privileged state on the\nwindow, such as moving it between workspaces or displays, or toggling the\nalways-on-top property.\n\nOn platforms or desktops where this is unsupported, this function does\nnothing.\n\n\\param window the window for which the menu will be displayed.\n\\param x the x coordinate of the menu, relative to the origin (top-left) of\n         the client area.\n\\param y the y coordinate of the menu, relative to the origin (top-left) of\n         the client area.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_ShowWindowSystemMenu",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            }
          ]
        },
        "SDL_HitTestResult": {
          "doc": "Possible return values from the SDL_HitTest callback.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This enum is available since SDL 3.2.0.\n\n\\sa SDL_HitTest",
          "name": "SDL_HitTestResult",
          "kind": "enum"
        },
        "SDL_HitTest": {
          "doc": "Callback used for hit-testing.\n\n\\param win the SDL_Window where hit-testing was set on.\n\\param area an SDL_Point which should be hit-tested.\n\\param data what was passed as `callback_data` to SDL_SetWindowHitTest().\n\\returns an SDL_HitTestResult value.\n\n\\sa SDL_SetWindowHitTest",
          "name": "SDL_HitTest",
          "kind": "callback",
          "type": "SDL_HitTestResult",
          "parameters": [
            {
              "name": "win",
              "type": "SDL_Window *"
            },
            {
              "name": "area",
              "type": "const SDL_Point *"
            },
            ");"
          ]
        },
        "SDL_SetWindowHitTest": {
          "doc": "Provide a callback that decides if a window region has special properties.\n\nNormally windows are dragged and resized by decorations provided by the\nsystem window manager (a title bar, borders, etc), but for some apps, it\nmakes sense to drag them from somewhere else inside the window itself; for\nexample, one might have a borderless window that wants to be draggable from\nany part, or simulate its own title bar, etc.\n\nThis function lets the app provide a callback that designates pieces of a\ngiven window as special. This callback is run during event processing if we\nneed to tell the OS to treat a region of the window specially; the use of\nthis callback is known as \"hit testing.\"\n\nMouse input may not be delivered to your application if it is within a\nspecial area; the OS will often apply that input to moving the window or\nresizing the window and not deliver it to the application.\n\nSpecifying NULL for a callback disables hit-testing. Hit-testing is\ndisabled by default.\n\nPlatforms that don't support this functionality will return false\nunconditionally, even if you're attempting to disable hit-testing.\n\nYour callback may fire at any time, and its firing does not indicate any\nspecific behavior (for example, on Windows, this certainly might fire when\nthe OS is deciding whether to drag your window, but it fires for lots of\nother reasons, too, some unrelated to anything you probably care about _and\nwhen the mouse isn't actually at the location it is testing_). Since this\ncan fire at any time, you should try to keep your callback efficient,\ndevoid of allocations, etc.\n\n\\param window the window to set hit-testing on.\n\\param callback the function to call when doing a hit-test.\n\\param callback_data an app-defined void pointer passed to **callback**.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowHitTest",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "callback",
              "type": "SDL_HitTest"
            },
            {
              "name": "callback_data",
              "type": "void *"
            }
          ]
        },
        "SDL_SetWindowShape": {
          "doc": "Set the shape of a transparent window.\n\nThis sets the alpha channel of a transparent window and any fully\ntransparent areas are also transparent to mouse clicks. If you are using\nsomething besides the SDL render API, then you are responsible for drawing\nthe alpha channel of the window to match the shape alpha channel to get\nconsistent cross-platform results.\n\nThe shape is copied inside this function, so you can free it afterwards. If\nyour shape surface changes, you should call SDL_SetWindowShape() again to\nupdate the window. This is an expensive operation, so should be done\nsparingly.\n\nThe window must have been created with the SDL_WINDOW_TRANSPARENT flag.\n\n\\param window the window.\n\\param shape the surface representing the shape of the window, or NULL to\n             remove any current shape.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_SetWindowShape",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "shape",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_FlashWindow": {
          "doc": "Request a window to demand attention from the user.\n\n\\param window the window to be flashed.\n\\param operation the operation to perform.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_FlashWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "operation",
              "type": "SDL_FlashOperation"
            }
          ]
        },
        "SDL_DestroyWindow": {
          "doc": "Destroy a window.\n\nAny child windows owned by the window will be recursively destroyed as\nwell.\n\nNote that on some platforms, the visible window may not actually be removed\nfrom the screen until the SDL event loop is pumped again, even though the\nSDL_Window is no longer valid after this call.\n\n\\param window the window to destroy.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreatePopupWindow\n\\sa SDL_CreateWindow\n\\sa SDL_CreateWindowWithProperties",
          "name": "SDL_DestroyWindow",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_ScreenSaverEnabled": {
          "doc": "Check whether the screensaver is currently enabled.\n\nThe screensaver is disabled by default.\n\nThe default can also be changed using `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`.\n\n\\returns true if the screensaver is enabled, false if it is disabled.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DisableScreenSaver\n\\sa SDL_EnableScreenSaver",
          "name": "SDL_ScreenSaverEnabled",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_EnableScreenSaver": {
          "doc": "Allow the screen to be blanked by a screen saver.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DisableScreenSaver\n\\sa SDL_ScreenSaverEnabled",
          "name": "SDL_EnableScreenSaver",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_DisableScreenSaver": {
          "doc": "Prevent the screen from being blanked by a screen saver.\n\nIf you disable the screensaver, it is automatically re-enabled when SDL\nquits.\n\nThe screensaver is disabled by default, but this may by changed by\nSDL_HINT_VIDEO_ALLOW_SCREENSAVER.\n\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_EnableScreenSaver\n\\sa SDL_ScreenSaverEnabled",
          "name": "SDL_DisableScreenSaver",
          "kind": "function",
          "type": "bool",
          "parameters": []
        },
        "SDL_GL_LoadLibrary": {
          "doc": "Dynamically load an OpenGL library.\n\nThis should be done after initializing the video driver, but before\ncreating any OpenGL windows. If no OpenGL library is loaded, the default\nlibrary will be loaded upon creation of the first OpenGL window.\n\nIf you do this, you need to retrieve all of the GL functions used in your\nprogram from the dynamic library using SDL_GL_GetProcAddress().\n\n\\param path the platform dependent OpenGL library name, or NULL to open the\n            default OpenGL library.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetProcAddress\n\\sa SDL_GL_UnloadLibrary",
          "name": "SDL_GL_LoadLibrary",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "path",
              "type": "const char *"
            }
          ]
        },
        "SDL_GL_GetProcAddress": {
          "doc": "Get an OpenGL function by name.\n\nIf the GL library is loaded at runtime with SDL_GL_LoadLibrary(), then all\nGL functions must be retrieved this way. Usually this is used to retrieve\nfunction pointers to OpenGL extensions.\n\nThere are some quirks to looking up OpenGL functions that require some\nextra care from the application. If you code carefully, you can handle\nthese quirks without any platform-specific code, though:\n\n- On Windows, function pointers are specific to the current GL context;\n  this means you need to have created a GL context and made it current\n  before calling SDL_GL_GetProcAddress(). If you recreate your context or\n  create a second context, you should assume that any existing function\n  pointers aren't valid to use with it. This is (currently) a\n  Windows-specific limitation, and in practice lots of drivers don't suffer\n  this limitation, but it is still the way the wgl API is documented to\n  work and you should expect crashes if you don't respect it. Store a copy\n  of the function pointers that comes and goes with context lifespan.\n- On X11, function pointers returned by this function are valid for any\n  context, and can even be looked up before a context is created at all.\n  This means that, for at least some common OpenGL implementations, if you\n  look up a function that doesn't exist, you'll get a non-NULL result that\n  is _NOT_ safe to call. You must always make sure the function is actually\n  available for a given GL context before calling it, by checking for the\n  existence of the appropriate extension with SDL_GL_ExtensionSupported(),\n  or verifying that the version of OpenGL you're using offers the function\n  as core functionality.\n- Some OpenGL drivers, on all platforms, *will* return NULL if a function\n  isn't supported, but you can't count on this behavior. Check for\n  extensions you use, and if you get a NULL anyway, act as if that\n  extension wasn't available. This is probably a bug in the driver, but you\n  can code defensively for this scenario anyhow.\n- Just because you're on Linux/Unix, don't assume you'll be using X11.\n  Next-gen display servers are waiting to replace it, and may or may not\n  make the same promises about function pointers.\n- OpenGL function pointers must be declared `APIENTRY` as in the example\n  code. This will ensure the proper calling convention is followed on\n  platforms where this matters (Win32) thereby avoiding stack corruption.\n\n\\param proc the name of an OpenGL function.\n\\returns a pointer to the named OpenGL function. The returned pointer\n         should be cast to the appropriate function signature.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_ExtensionSupported\n\\sa SDL_GL_LoadLibrary\n\\sa SDL_GL_UnloadLibrary",
          "name": "SDL_GL_GetProcAddress",
          "kind": "function",
          "type": "SDL_FunctionPointer",
          "parameters": [
            {
              "name": "proc",
              "type": "const char *"
            }
          ]
        },
        "SDL_EGL_GetProcAddress": {
          "doc": "Get an EGL library function by name.\n\nIf an EGL library is loaded, this function allows applications to get entry\npoints for EGL functions. This is useful to provide to an EGL API and\nextension loader.\n\n\\param proc the name of an EGL function.\n\\returns a pointer to the named EGL function. The returned pointer should\n         be cast to the appropriate function signature.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_EGL_GetCurrentDisplay",
          "name": "SDL_EGL_GetProcAddress",
          "kind": "function",
          "type": "SDL_FunctionPointer",
          "parameters": [
            {
              "name": "proc",
              "type": "const char *"
            }
          ]
        },
        "SDL_GL_UnloadLibrary": {
          "doc": "Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_LoadLibrary",
          "name": "SDL_GL_UnloadLibrary",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_GL_ExtensionSupported": {
          "doc": "Check if an OpenGL extension is supported for the current context.\n\nThis function operates on the current GL context; you must have created a\ncontext and it must be current before calling this function. Do not assume\nthat all contexts you create will have the same set of extensions\navailable, or that recreating an existing context will offer the same\nextensions again.\n\nWhile it's probably not a massive overhead, this function is not an O(1)\noperation. Check the extensions you care about after creating the GL\ncontext and save that information somewhere instead of calling the function\nevery time you need to know.\n\n\\param extension the name of the extension to check.\n\\returns true if the extension is supported, false otherwise.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GL_ExtensionSupported",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "extension",
              "type": "const char *"
            }
          ]
        },
        "SDL_GL_ResetAttributes": {
          "doc": "Reset all previously set OpenGL context attributes to their default values.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetAttribute\n\\sa SDL_GL_SetAttribute",
          "name": "SDL_GL_ResetAttributes",
          "kind": "function",
          "type": "void",
          "parameters": []
        },
        "SDL_GL_SetAttribute": {
          "doc": "Set an OpenGL window attribute before window creation.\n\nThis function sets the OpenGL attribute `attr` to `value`. The requested\nattributes should be set before creating an OpenGL window. You should use\nSDL_GL_GetAttribute() to check the values after creating the OpenGL\ncontext, since the values obtained can differ from the requested ones.\n\n\\param attr an SDL_GLAttr enum value specifying the OpenGL attribute to\n            set.\n\\param value the desired value for the attribute.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetAttribute\n\\sa SDL_GL_ResetAttributes",
          "name": "SDL_GL_SetAttribute",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "attr",
              "type": "SDL_GLAttr"
            },
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "SDL_GL_GetAttribute": {
          "doc": "Get the actual value for an attribute from the current context.\n\n\\param attr an SDL_GLAttr enum value specifying the OpenGL attribute to\n            get.\n\\param value a pointer filled in with the current value of `attr`.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_ResetAttributes\n\\sa SDL_GL_SetAttribute",
          "name": "SDL_GL_GetAttribute",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "attr",
              "type": "SDL_GLAttr"
            },
            {
              "name": "value",
              "type": "int *"
            }
          ]
        },
        "SDL_GL_CreateContext": {
          "doc": "Create an OpenGL context for an OpenGL window, and make it current.\n\nWindows users new to OpenGL should note that, for historical reasons, GL\nfunctions added after OpenGL version 1.1 are not available by default.\nThose functions must be loaded at run-time, either with an OpenGL\nextension-handling library or with SDL_GL_GetProcAddress() and its related\nfunctions.\n\nSDL_GLContext is opaque to the application.\n\n\\param window the window to associate with the context.\n\\returns the OpenGL context associated with `window` or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_DestroyContext\n\\sa SDL_GL_MakeCurrent",
          "name": "SDL_GL_CreateContext",
          "kind": "function",
          "type": "SDL_GLContext",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GL_MakeCurrent": {
          "doc": "Set up an OpenGL context for rendering into an OpenGL window.\n\nThe context must have been created with a compatible window.\n\n\\param window the window to associate with the context.\n\\param context the OpenGL context to associate with the window.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_CreateContext",
          "name": "SDL_GL_MakeCurrent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "context",
              "type": "SDL_GLContext"
            }
          ]
        },
        "SDL_GL_GetCurrentWindow": {
          "doc": "Get the currently active OpenGL window.\n\n\\returns the currently active OpenGL window on success or NULL on failure;\n         call SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GL_GetCurrentWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": []
        },
        "SDL_GL_GetCurrentContext": {
          "doc": "Get the currently active OpenGL context.\n\n\\returns the currently active OpenGL context or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_MakeCurrent",
          "name": "SDL_GL_GetCurrentContext",
          "kind": "function",
          "type": "SDL_GLContext",
          "parameters": []
        },
        "SDL_EGL_GetCurrentDisplay": {
          "doc": "Get the currently active EGL display.\n\n\\returns the currently active EGL display or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_GetCurrentDisplay",
          "kind": "function",
          "type": "SDL_EGLDisplay",
          "parameters": []
        },
        "SDL_EGL_GetCurrentConfig": {
          "doc": "Get the currently active EGL config.\n\n\\returns the currently active EGL config or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_GetCurrentConfig",
          "kind": "function",
          "type": "SDL_EGLConfig",
          "parameters": []
        },
        "SDL_EGL_GetWindowSurface": {
          "doc": "Get the EGL surface associated with the window.\n\n\\param window the window to query.\n\\returns the EGLSurface pointer associated with the window, or NULL on\n         failure.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_GetWindowSurface",
          "kind": "function",
          "type": "SDL_EGLSurface",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_EGL_SetAttributeCallbacks": {
          "doc": "Sets the callbacks for defining custom EGLAttrib arrays for EGL\ninitialization.\n\nCallbacks that aren't needed can be set to NULL.\n\nNOTE: These callback pointers will be reset after SDL_GL_ResetAttributes.\n\n\\param platformAttribCallback callback for attributes to pass to\n                              eglGetPlatformDisplay. May be NULL.\n\\param surfaceAttribCallback callback for attributes to pass to\n                             eglCreateSurface. May be NULL.\n\\param contextAttribCallback callback for attributes to pass to\n                             eglCreateContext. May be NULL.\n\\param userdata a pointer that is passed to the callbacks.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_EGL_SetAttributeCallbacks",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "platformAttribCallback",
              "type": "SDL_EGLAttribArrayCallback"
            },
            {
              "name": "surfaceAttribCallback",
              "type": "SDL_EGLIntArrayCallback"
            },
            {
              "name": "contextAttribCallback",
              "type": "SDL_EGLIntArrayCallback"
            },
            {
              "name": "userdata",
              "type": "void *"
            }
          ]
        },
        "SDL_GL_SetSwapInterval": {
          "doc": "Set the swap interval for the current OpenGL context.\n\nSome systems allow specifying -1 for the interval, to enable adaptive\nvsync. Adaptive vsync works the same as vsync, but if you've already missed\nthe vertical retrace for a given frame, it swaps buffers immediately, which\nmight be less jarring for the user during occasional framerate drops. If an\napplication requests adaptive vsync and the system does not support it,\nthis function will fail and return false. In such a case, you should\nprobably retry the call with 1 for the interval.\n\nAdaptive vsync is implemented for some glX drivers with\nGLX_EXT_swap_control_tear, and for some Windows drivers with\nWGL_EXT_swap_control_tear.\n\nRead more on the Khronos wiki:\nhttps://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync\n\n\\param interval 0 for immediate updates, 1 for updates synchronized with\n                the vertical retrace, -1 for adaptive vsync.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_GetSwapInterval",
          "name": "SDL_GL_SetSwapInterval",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "interval",
              "type": "int"
            }
          ]
        },
        "SDL_GL_GetSwapInterval": {
          "doc": "Get the swap interval for the current OpenGL context.\n\nIf the system can't determine the swap interval, or there isn't a valid\ncurrent context, this function will set *interval to 0 as a safe default.\n\n\\param interval output interval value. 0 if there is no vertical retrace\n                synchronization, 1 if the buffer swap is synchronized with\n                the vertical retrace, and -1 if late swaps happen\n                immediately instead of waiting for the next retrace.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_SetSwapInterval",
          "name": "SDL_GL_GetSwapInterval",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "interval",
              "type": "int *"
            }
          ]
        },
        "SDL_GL_SwapWindow": {
          "doc": "Update a window with OpenGL rendering.\n\nThis is used with double-buffered OpenGL contexts, which are the default.\n\nOn macOS, make sure you bind 0 to the draw framebuffer before swapping the\nwindow, otherwise nothing will happen. If you aren't using\nglBindFramebuffer(), this is the default and you won't have to do anything\nextra.\n\n\\param window the window to change.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GL_SwapWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GL_DestroyContext": {
          "doc": "Delete an OpenGL context.\n\n\\param context the OpenGL context to be deleted.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GL_CreateContext",
          "name": "SDL_GL_DestroyContext",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "context",
              "type": "SDL_GLContext"
            }
          ]
        }
      }
    },
    "SDL_render.h": {
      "name": "SDL_render.h",
      "doc": "# CategoryRender\n\nHeader file for SDL 2D rendering functions.\n\nThis API supports the following features:\n\n- single pixel points\n- single pixel lines\n- filled rectangles\n- texture images\n- 2D polygons\n\nThe primitives may be drawn in opaque, blended, or additive modes.\n\nThe texture images may be drawn in opaque, blended, or additive modes. They\ncan have an additional color tint or alpha modulation applied to them, and\nmay also be stretched with linear interpolation.\n\nThis API is designed to accelerate simple 2D operations. You may want more\nfunctionality such as polygons and particle effects and in that case you\nshould use SDL's OpenGL/Direct3D support, the SDL3 GPU API, or one of the\nmany good 3D engines.\n\nThese functions must be called from the main thread. See this bug for\ndetails: https://github.com/libsdl-org/SDL/issues/986",
      "entries": {
        "SDL_SOFTWARE_RENDERER": {
          "doc": "The name of the software renderer.\n\n\\since This macro is available since SDL 3.2.0.",
          "name": "SDL_SOFTWARE_RENDERER",
          "kind": "def"
        },
        "SDL_Vertex": {
          "doc": "Vertex structure.\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Vertex",
          "kind": "struct",
          "entries": {
            "position": {
              "doc": "",
              "name": "position",
              "kind": "var",
              "type": "SDL_FPoint"
            },
            "color": {
              "doc": "",
              "name": "color",
              "kind": "var",
              "type": "SDL_FColor"
            },
            "tex_coord": {
              "doc": "",
              "name": "tex_coord",
              "kind": "var",
              "type": "SDL_FPoint"
            }
          }
        },
        "SDL_TextureAccess": {
          "doc": "The access pattern allowed for a texture.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_TextureAccess",
          "kind": "enum"
        },
        "SDL_RendererLogicalPresentation": {
          "doc": "How the logical size is mapped to the output.\n\n\\since This enum is available since SDL 3.2.0.",
          "name": "SDL_RendererLogicalPresentation",
          "kind": "enum"
        },
        "SDL_Renderer": {
          "doc": "A structure representing rendering state\n\n\\since This struct is available since SDL 3.2.0.",
          "name": "SDL_Renderer",
          "kind": "alias",
          "type": "struct SDL_Renderer"
        },
        "SDL_Texture": {
          "doc": "An efficient driver-specific representation of pixel data\n\n\\since This struct is available since SDL 3.2.0.\n\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureFromSurface\n\\sa SDL_CreateTextureWithProperties\n\\sa SDL_DestroyTexture",
          "name": "SDL_Texture",
          "kind": "struct",
          "entries": {
            "format": {
              "doc": "",
              "name": "format",
              "kind": "var",
              "type": "SDL_PixelFormat"
            },
            "w": {
              "doc": "",
              "name": "w",
              "kind": "var",
              "type": "int"
            },
            "h": {
              "doc": "",
              "name": "h",
              "kind": "var",
              "type": "int"
            },
            "refcount": {
              "doc": "",
              "name": "refcount",
              "kind": "var",
              "type": "int"
            }
          }
        },
        "SDL_GetNumRenderDrivers": {
          "doc": "Get the number of 2D rendering drivers available for the current display.\n\nA render driver is a set of code that handles rendering and texture\nmanagement on a particular display. Normally there is only one, but some\ndrivers may have several available with different capabilities.\n\nThere may be none if SDL was compiled without render support.\n\n\\returns the number of built in render drivers.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_GetRenderDriver",
          "name": "SDL_GetNumRenderDrivers",
          "kind": "function",
          "type": "int",
          "parameters": []
        },
        "SDL_GetRenderDriver": {
          "doc": "Use this function to get the name of a built in 2D rendering driver.\n\nThe list of rendering drivers is given in the order that they are normally\ninitialized by default; the drivers that seem more reasonable to choose\nfirst (as far as the SDL developers believe) are earlier in the list.\n\nThe names of drivers are all simple, low-ASCII identifiers, like \"opengl\",\n\"direct3d12\" or \"metal\". These never have Unicode characters, and are not\nmeant to be proper names.\n\n\\param index the index of the rendering driver; the value ranges from 0 to\n             SDL_GetNumRenderDrivers() - 1.\n\\returns the name of the rendering driver at the requested index, or NULL\n         if an invalid index was specified.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetNumRenderDrivers",
          "name": "SDL_GetRenderDriver",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "index",
              "type": "int"
            }
          ]
        },
        "SDL_CreateWindowAndRenderer": {
          "doc": "Create a window and default renderer.\n\n\\param title the title of the window, in UTF-8 encoding.\n\\param width the width of the window.\n\\param height the height of the window.\n\\param window_flags the flags used to create the window (see\n                    SDL_CreateWindow()).\n\\param window a pointer filled with the window, or NULL on error.\n\\param renderer a pointer filled with the renderer, or NULL on error.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_CreateWindow",
          "name": "SDL_CreateWindowAndRenderer",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "title",
              "type": "const char *"
            },
            {
              "name": "width",
              "type": "int"
            },
            {
              "name": "height",
              "type": "int"
            },
            {
              "name": "window_flags",
              "type": "SDL_WindowFlags"
            },
            {
              "name": "window",
              "type": "SDL_Window **"
            },
            {
              "name": "renderer",
              "type": "SDL_Renderer **"
            }
          ]
        },
        "SDL_CreateRenderer": {
          "doc": "Create a 2D rendering context for a window.\n\nIf you want a specific renderer, you can specify its name here. A list of\navailable renderers can be obtained by calling SDL_GetRenderDriver()\nmultiple times, with indices from 0 to SDL_GetNumRenderDrivers()-1. If you\ndon't need a specific renderer, specify NULL and SDL will attempt to choose\nthe best option for you, based on what is available on the user's system.\n\nIf `name` is a comma-separated list, SDL will try each name, in the order\nlisted, until one succeeds or all of them fail.\n\nBy default the rendering size matches the window size in pixels, but you\ncan call SDL_SetRenderLogicalPresentation() to change the content size and\nscaling options.\n\n\\param window the window where rendering is displayed.\n\\param name the name of the rendering driver to initialize, or NULL to let\n            SDL choose one.\n\\returns a valid rendering context or NULL if there was an error; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRendererWithProperties\n\\sa SDL_CreateSoftwareRenderer\n\\sa SDL_DestroyRenderer\n\\sa SDL_GetNumRenderDrivers\n\\sa SDL_GetRenderDriver\n\\sa SDL_GetRendererName",
          "name": "SDL_CreateRenderer",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ]
        },
        "SDL_CreateRendererWithProperties": {
          "doc": "Create a 2D rendering context for a window, with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_RENDERER_CREATE_NAME_STRING`: the name of the rendering driver\n  to use, if a specific one is desired\n- `SDL_PROP_RENDERER_CREATE_WINDOW_POINTER`: the window where rendering is\n  displayed, required if this isn't a software renderer using a surface\n- `SDL_PROP_RENDERER_CREATE_SURFACE_POINTER`: the surface where rendering\n  is displayed, if you want a software renderer without a window\n- `SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER`: an SDL_Colorspace\n  value describing the colorspace for output to the display, defaults to\n  SDL_COLORSPACE_SRGB. The direct3d11, direct3d12, and metal renderers\n  support SDL_COLORSPACE_SRGB_LINEAR, which is a linear color space and\n  supports HDR output. If you select SDL_COLORSPACE_SRGB_LINEAR, drawing\n  still uses the sRGB colorspace, but values can go beyond 1.0 and float\n  (linear) format textures can be used for HDR content.\n- `SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER`: non-zero if you want\n  present synchronized with the refresh rate. This property can take any\n  value that is supported by SDL_SetRenderVSync() for the renderer.\n\nWith the vulkan renderer:\n\n- `SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER`: the VkInstance to use\n  with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR to use\n  with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER`: the\n  VkPhysicalDevice to use with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER`: the VkDevice to use\n  with the renderer, optional.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the\n  queue family index used for rendering.\n- `SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the\n  queue family index used for presentation.\n\n\\param props the properties to use.\n\\returns a valid rendering context or NULL if there was an error; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties\n\\sa SDL_CreateRenderer\n\\sa SDL_CreateSoftwareRenderer\n\\sa SDL_DestroyRenderer\n\\sa SDL_GetRendererName",
          "name": "SDL_CreateRendererWithProperties",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_RENDERER_CREATE_NAME_STRING": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_NAME_STRING",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def"
        },
        "SDL_CreateSoftwareRenderer": {
          "doc": "Create a 2D software rendering context for a surface.\n\nTwo other API which can be used to create SDL_Renderer:\nSDL_CreateRenderer() and SDL_CreateWindowAndRenderer(). These can _also_\ncreate a software renderer, but they are intended to be used with an\nSDL_Window as the final destination and not an SDL_Surface.\n\n\\param surface the SDL_Surface structure representing the surface where\n               rendering is done.\n\\returns a valid rendering context or NULL if there was an error; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_DestroyRenderer",
          "name": "SDL_CreateSoftwareRenderer",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_GetRenderer": {
          "doc": "Get the renderer associated with a window.\n\n\\param window the window to query.\n\\returns the rendering context on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRenderer",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "window",
              "type": "SDL_Window *"
            }
          ]
        },
        "SDL_GetRenderWindow": {
          "doc": "Get the window associated with a renderer.\n\n\\param renderer the renderer to query.\n\\returns the window on success or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRenderWindow",
          "kind": "function",
          "type": "SDL_Window *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRendererName": {
          "doc": "Get the name of a renderer.\n\n\\param renderer the rendering context.\n\\returns the name of the selected renderer, or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_CreateRendererWithProperties",
          "name": "SDL_GetRendererName",
          "kind": "function",
          "type": "const char *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRendererProperties": {
          "doc": "Get the properties associated with a renderer.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_RENDERER_NAME_STRING`: the name of the rendering driver\n- `SDL_PROP_RENDERER_WINDOW_POINTER`: the window where rendering is\n  displayed, if any\n- `SDL_PROP_RENDERER_SURFACE_POINTER`: the surface where rendering is\n  displayed, if this is a software renderer without a window\n- `SDL_PROP_RENDERER_VSYNC_NUMBER`: the current vsync setting\n- `SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER`: the maximum texture width\n  and height\n- `SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER`: a (const SDL_PixelFormat *)\n  array of pixel formats, terminated with SDL_PIXELFORMAT_UNKNOWN,\n  representing the available texture formats for this renderer.\n- `SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER`: an SDL_Colorspace value\n  describing the colorspace for output to the display, defaults to\n  SDL_COLORSPACE_SRGB.\n- `SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN`: true if the output colorspace is\n  SDL_COLORSPACE_SRGB_LINEAR and the renderer is showing on a display with\n  HDR enabled. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT`: the value of SDR white in the\n  SDL_COLORSPACE_SRGB_LINEAR colorspace. When HDR is enabled, this value is\n  automatically multiplied into the color scale. This property can change\n  dynamically when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n- `SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT`: the additional high dynamic range\n  that can be displayed, in terms of the SDR white point. When HDR is not\n  enabled, this will be 1.0. This property can change dynamically when\n  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.\n\nWith the direct3d renderer:\n\n- `SDL_PROP_RENDERER_D3D9_DEVICE_POINTER`: the IDirect3DDevice9 associated\n  with the renderer\n\nWith the direct3d11 renderer:\n\n- `SDL_PROP_RENDERER_D3D11_DEVICE_POINTER`: the ID3D11Device associated\n  with the renderer\n- `SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER`: the IDXGISwapChain1\n  associated with the renderer. This may change when the window is resized.\n\nWith the direct3d12 renderer:\n\n- `SDL_PROP_RENDERER_D3D12_DEVICE_POINTER`: the ID3D12Device associated\n  with the renderer\n- `SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER`: the IDXGISwapChain4\n  associated with the renderer.\n- `SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER`: the ID3D12CommandQueue\n  associated with the renderer\n\nWith the vulkan renderer:\n\n- `SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER`: the VkInstance associated\n  with the renderer\n- `SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR associated\n  with the renderer\n- `SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER`: the VkPhysicalDevice\n  associated with the renderer\n- `SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER`: the VkDevice associated with\n  the renderer\n- `SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the queue\n  family index used for rendering\n- `SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the queue\n  family index used for presentation\n- `SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER`: the number of\n  swapchain images, or potential frames in flight, used by the Vulkan\n  renderer\n\nWith the gpu renderer:\n\n- `SDL_PROP_RENDERER_GPU_DEVICE_POINTER`: the SDL_GPUDevice associated with\n  the renderer\n\n\\param renderer the rendering context.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRendererProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_PROP_RENDERER_NAME_STRING": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_NAME_STRING",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_WINDOW_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_WINDOW_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_SURFACE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_SURFACE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VSYNC_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VSYNC_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_D3D9_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D9_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_D3D11_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D11_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_D3D12_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D12_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_RENDERER_GPU_DEVICE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_RENDERER_GPU_DEVICE_POINTER",
          "kind": "def"
        },
        "SDL_GetRenderOutputSize": {
          "doc": "Get the output size in pixels of a rendering context.\n\nThis returns the true output size in pixels, ignoring any render targets or\nlogical size and presentation.\n\n\\param renderer the rendering context.\n\\param w a pointer filled in with the width in pixels.\n\\param h a pointer filled in with the height in pixels.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetCurrentRenderOutputSize",
          "name": "SDL_GetRenderOutputSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_GetCurrentRenderOutputSize": {
          "doc": "Get the current output size in pixels of a rendering context.\n\nIf a rendering target is active, this will return the size of the rendering\ntarget in pixels, otherwise if a logical size is set, it will return the\nlogical size, otherwise it will return the value of\nSDL_GetRenderOutputSize().\n\n\\param renderer the rendering context.\n\\param w a pointer filled in with the current width.\n\\param h a pointer filled in with the current height.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderOutputSize",
          "name": "SDL_GetCurrentRenderOutputSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            }
          ]
        },
        "SDL_CreateTexture": {
          "doc": "Create a texture for a rendering context.\n\nThe contents of a texture when first created are not defined.\n\n\\param renderer the rendering context.\n\\param format one of the enumerated values in SDL_PixelFormat.\n\\param access one of the enumerated values in SDL_TextureAccess.\n\\param w the width of the texture in pixels.\n\\param h the height of the texture in pixels.\n\\returns the created texture or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTextureFromSurface\n\\sa SDL_CreateTextureWithProperties\n\\sa SDL_DestroyTexture\n\\sa SDL_GetTextureSize\n\\sa SDL_UpdateTexture",
          "name": "SDL_CreateTexture",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "format",
              "type": "SDL_PixelFormat"
            },
            {
              "name": "access",
              "type": "SDL_TextureAccess"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            }
          ]
        },
        "SDL_CreateTextureFromSurface": {
          "doc": "Create a texture from an existing surface.\n\nThe surface is not modified or freed by this function.\n\nThe SDL_TextureAccess hint for the created texture is\n`SDL_TEXTUREACCESS_STATIC`.\n\nThe pixel format of the created texture may be different from the pixel\nformat of the surface, and can be queried using the\nSDL_PROP_TEXTURE_FORMAT_NUMBER property.\n\n\\param renderer the rendering context.\n\\param surface the SDL_Surface structure containing pixel data used to fill\n               the texture.\n\\returns the created texture or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureWithProperties\n\\sa SDL_DestroyTexture",
          "name": "SDL_CreateTextureFromSurface",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "surface",
              "type": "SDL_Surface *"
            }
          ]
        },
        "SDL_CreateTextureWithProperties": {
          "doc": "Create a texture for a rendering context with the specified properties.\n\nThese are the supported properties:\n\n- `SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER`: an SDL_Colorspace value\n  describing the texture colorspace, defaults to SDL_COLORSPACE_SRGB_LINEAR\n  for floating point textures, SDL_COLORSPACE_HDR10 for 10-bit textures,\n  SDL_COLORSPACE_SRGB for other RGB textures and SDL_COLORSPACE_JPEG for\n  YUV textures.\n- `SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER`: one of the enumerated values in\n  SDL_PixelFormat, defaults to the best RGBA format for the renderer\n- `SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER`: one of the enumerated values in\n  SDL_TextureAccess, defaults to SDL_TEXTUREACCESS_STATIC\n- `SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER`: the width of the texture in\n  pixels, required\n- `SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER`: the height of the texture in\n  pixels, required\n- `SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating\n  point textures, this defines the value of 100% diffuse white, with higher\n  values being displayed in the High Dynamic Range headroom. This defaults\n  to 100 for HDR10 textures and 1.0 for floating point textures.\n- `SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT`: for HDR10 and floating\n  point textures, this defines the maximum dynamic range used by the\n  content, in terms of the SDR white point. This would be equivalent to\n  maxCLL / SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT for HDR10 content.\n  If this is defined, any values outside the range supported by the display\n  will be scaled into the available HDR headroom, otherwise they are\n  clipped.\n\nWith the direct3d11 renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the direct3d12 renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER`: the ID3D12Resource\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the metal renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER`: the CVPixelBufferRef\n  associated with the texture, if you want to create a texture from an\n  existing pixel buffer.\n\nWith the opengl renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the opengles2 renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture, if you want to wrap an existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture\n  associated with the U plane of a YUV texture, if you want to wrap an\n  existing texture.\n- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture\n  associated with the V plane of a YUV texture, if you want to wrap an\n  existing texture.\n\nWith the vulkan renderer:\n\n- `SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER`: the VkImage with layout\n  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL associated with the texture, if\n  you want to wrap an existing texture.\n\n\\param renderer the rendering context.\n\\param props the properties to use.\n\\returns the created texture or NULL on failure; call SDL_GetError() for\n         more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateProperties\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureFromSurface\n\\sa SDL_DestroyTexture\n\\sa SDL_GetTextureSize\n\\sa SDL_UpdateTexture",
          "name": "SDL_CreateTextureWithProperties",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "props",
              "type": "SDL_PropertiesID"
            }
          ]
        },
        "SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER",
          "kind": "def"
        },
        "SDL_GetTextureProperties": {
          "doc": "Get the properties associated with a texture.\n\nThe following read-only properties are provided by SDL:\n\n- `SDL_PROP_TEXTURE_COLORSPACE_NUMBER`: an SDL_Colorspace value describing\n  the texture colorspace.\n- `SDL_PROP_TEXTURE_FORMAT_NUMBER`: one of the enumerated values in\n  SDL_PixelFormat.\n- `SDL_PROP_TEXTURE_ACCESS_NUMBER`: one of the enumerated values in\n  SDL_TextureAccess.\n- `SDL_PROP_TEXTURE_WIDTH_NUMBER`: the width of the texture in pixels.\n- `SDL_PROP_TEXTURE_HEIGHT_NUMBER`: the height of the texture in pixels.\n- `SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point\n  textures, this defines the value of 100% diffuse white, with higher\n  values being displayed in the High Dynamic Range headroom. This defaults\n  to 100 for HDR10 textures and 1.0 for other textures.\n- `SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point\n  textures, this defines the maximum dynamic range used by the content, in\n  terms of the SDR white point. If this is defined, any values outside the\n  range supported by the display will be scaled into the available HDR\n  headroom, otherwise they are clipped. This defaults to 1.0 for SDR\n  textures, 4.0 for HDR10 textures, and no default for floating point\n  textures.\n\nWith the direct3d11 renderer:\n\n- `SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D associated\n  with the texture\n- `SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D\n  associated with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D\n  associated with the V plane of a YUV texture\n\nWith the direct3d12 renderer:\n\n- `SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER`: the ID3D12Resource associated\n  with the texture\n- `SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource associated\n  with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource associated\n  with the V plane of a YUV texture\n\nWith the vulkan renderer:\n\n- `SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER`: the VkImage associated with the\n  texture\n\nWith the opengl renderer:\n\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER`: the GLuint texture associated\n  with the texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture associated\n  with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture associated\n  with the V plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER`: the GLenum for the\n  texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_RECTANGLE_ARB`, etc)\n- `SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT`: the texture coordinate width of\n  the texture (0.0 - 1.0)\n- `SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT`: the texture coordinate height of\n  the texture (0.0 - 1.0)\n\nWith the opengles2 renderer:\n\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture\n  associated with the texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture\n  associated with the UV plane of an NV12 texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture\n  associated with the U plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture\n  associated with the V plane of a YUV texture\n- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER`: the GLenum for the\n  texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_EXTERNAL_OES`, etc)\n\n\\param texture the texture to query.\n\\returns a valid property ID on success or 0 on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetTextureProperties",
          "kind": "function",
          "type": "SDL_PropertiesID",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_PROP_TEXTURE_COLORSPACE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_COLORSPACE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_FORMAT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_FORMAT_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_ACCESS_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_ACCESS_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_WIDTH_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_WIDTH_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_HEIGHT_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_HEIGHT_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER",
          "kind": "def"
        },
        "SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER": {
          "doc": "",
          "name": "SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER",
          "kind": "def"
        },
        "SDL_GetRendererFromTexture": {
          "doc": "Get the renderer that created an SDL_Texture.\n\n\\param texture the texture to query.\n\\returns a pointer to the SDL_Renderer that created the texture, or NULL on\n         failure; call SDL_GetError() for more information.\n\n\\threadsafety It is safe to call this function from any thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRendererFromTexture",
          "kind": "function",
          "type": "SDL_Renderer *",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_GetTextureSize": {
          "doc": "Get the size of a texture, as floating point values.\n\n\\param texture the texture to query.\n\\param w a pointer filled in with the width of the texture in pixels. This\n         argument can be NULL if you don't need this information.\n\\param h a pointer filled in with the height of the texture in pixels. This\n         argument can be NULL if you don't need this information.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetTextureSize",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "w",
              "type": "float *"
            },
            {
              "name": "h",
              "type": "float *"
            }
          ]
        },
        "SDL_SetTextureColorMod": {
          "doc": "Set an additional color value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation each source color\nchannel is modulated by the appropriate color value according to the\nfollowing formula:\n\n`srcC = srcC * (color / 255)`\n\nColor modulation is not always supported by the renderer; it will return\nfalse if color modulation is not supported.\n\n\\param texture the texture to update.\n\\param r the red color value multiplied into copy operations.\n\\param g the green color value multiplied into copy operations.\n\\param b the blue color value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureColorMod\n\\sa SDL_SetTextureAlphaMod\n\\sa SDL_SetTextureColorModFloat",
          "name": "SDL_SetTextureColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            }
          ]
        },
        "SDL_SetTextureColorModFloat": {
          "doc": "Set an additional color value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation each source color\nchannel is modulated by the appropriate color value according to the\nfollowing formula:\n\n`srcC = srcC * color`\n\nColor modulation is not always supported by the renderer; it will return\nfalse if color modulation is not supported.\n\n\\param texture the texture to update.\n\\param r the red color value multiplied into copy operations.\n\\param g the green color value multiplied into copy operations.\n\\param b the blue color value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureColorModFloat\n\\sa SDL_SetTextureAlphaModFloat\n\\sa SDL_SetTextureColorMod",
          "name": "SDL_SetTextureColorModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            }
          ]
        },
        "SDL_GetTextureColorMod": {
          "doc": "Get the additional color value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param r a pointer filled in with the current red color value.\n\\param g a pointer filled in with the current green color value.\n\\param b a pointer filled in with the current blue color value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaMod\n\\sa SDL_GetTextureColorModFloat\n\\sa SDL_SetTextureColorMod",
          "name": "SDL_GetTextureColorMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetTextureColorModFloat": {
          "doc": "Get the additional color value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param r a pointer filled in with the current red color value.\n\\param g a pointer filled in with the current green color value.\n\\param b a pointer filled in with the current blue color value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaModFloat\n\\sa SDL_GetTextureColorMod\n\\sa SDL_SetTextureColorModFloat",
          "name": "SDL_GetTextureColorModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            }
          ]
        },
        "SDL_SetTextureAlphaMod": {
          "doc": "Set an additional alpha value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation the source alpha\nvalue is modulated by this alpha value according to the following formula:\n\n`srcA = srcA * (alpha / 255)`\n\nAlpha modulation is not always supported by the renderer; it will return\nfalse if alpha modulation is not supported.\n\n\\param texture the texture to update.\n\\param alpha the source alpha value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaMod\n\\sa SDL_SetTextureAlphaModFloat\n\\sa SDL_SetTextureColorMod",
          "name": "SDL_SetTextureAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "Uint8"
            }
          ]
        },
        "SDL_SetTextureAlphaModFloat": {
          "doc": "Set an additional alpha value multiplied into render copy operations.\n\nWhen this texture is rendered, during the copy operation the source alpha\nvalue is modulated by this alpha value according to the following formula:\n\n`srcA = srcA * alpha`\n\nAlpha modulation is not always supported by the renderer; it will return\nfalse if alpha modulation is not supported.\n\n\\param texture the texture to update.\n\\param alpha the source alpha value multiplied into copy operations.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaModFloat\n\\sa SDL_SetTextureAlphaMod\n\\sa SDL_SetTextureColorModFloat",
          "name": "SDL_SetTextureAlphaModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "float"
            }
          ]
        },
        "SDL_GetTextureAlphaMod": {
          "doc": "Get the additional alpha value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param alpha a pointer filled in with the current alpha value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaModFloat\n\\sa SDL_GetTextureColorMod\n\\sa SDL_SetTextureAlphaMod",
          "name": "SDL_GetTextureAlphaMod",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetTextureAlphaModFloat": {
          "doc": "Get the additional alpha value multiplied into render copy operations.\n\n\\param texture the texture to query.\n\\param alpha a pointer filled in with the current alpha value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureAlphaMod\n\\sa SDL_GetTextureColorModFloat\n\\sa SDL_SetTextureAlphaModFloat",
          "name": "SDL_GetTextureAlphaModFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "alpha",
              "type": "float *"
            }
          ]
        },
        "SDL_SetTextureBlendMode": {
          "doc": "Set the blend mode for a texture, used by SDL_RenderTexture().\n\nIf the blend mode is not supported, the closest supported mode is chosen\nand this function returns false.\n\n\\param texture the texture to update.\n\\param blendMode the SDL_BlendMode to use for texture blending.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureBlendMode",
          "name": "SDL_SetTextureBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode"
            }
          ]
        },
        "SDL_GetTextureBlendMode": {
          "doc": "Get the blend mode used for texture copy operations.\n\n\\param texture the texture to query.\n\\param blendMode a pointer filled in with the current SDL_BlendMode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextureBlendMode",
          "name": "SDL_GetTextureBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode *"
            }
          ]
        },
        "SDL_SetTextureScaleMode": {
          "doc": "Set the scale mode used for texture scale operations.\n\nThe default texture scale mode is SDL_SCALEMODE_LINEAR.\n\nIf the scale mode is not supported, the closest supported mode is chosen.\n\n\\param texture the texture to update.\n\\param scaleMode the SDL_ScaleMode to use for texture scaling.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetTextureScaleMode",
          "name": "SDL_SetTextureScaleMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode"
            }
          ]
        },
        "SDL_GetTextureScaleMode": {
          "doc": "Get the scale mode used for texture scale operations.\n\n\\param texture the texture to query.\n\\param scaleMode a pointer filled in with the current scale mode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetTextureScaleMode",
          "name": "SDL_GetTextureScaleMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "scaleMode",
              "type": "SDL_ScaleMode *"
            }
          ]
        },
        "SDL_UpdateTexture": {
          "doc": "Update the given texture rectangle with new pixel data.\n\nThe pixel data must be in the pixel format of the texture, which can be\nqueried using the SDL_PROP_TEXTURE_FORMAT_NUMBER property.\n\nThis is a fairly slow function, intended for use with static textures that\ndo not change often.\n\nIf the texture is intended to be updated often, it is preferred to create\nthe texture as streaming and use the locking functions referenced below.\nWhile this function will work with streaming textures, for optimization\nreasons you may not get the pixels back if you lock the texture afterward.\n\n\\param texture the texture to update.\n\\param rect an SDL_Rect structure representing the area to update, or NULL\n            to update the entire texture.\n\\param pixels the raw pixel data in the format of the texture.\n\\param pitch the number of bytes in a row of pixel data, including padding\n             between lines.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTexture\n\\sa SDL_UnlockTexture\n\\sa SDL_UpdateNVTexture\n\\sa SDL_UpdateYUVTexture",
          "name": "SDL_UpdateTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "pixels",
              "type": "const void *"
            },
            {
              "name": "pitch",
              "type": "int"
            }
          ]
        },
        "SDL_UpdateYUVTexture": {
          "doc": "Update a rectangle within a planar YV12 or IYUV texture with new pixel\ndata.\n\nYou can use SDL_UpdateTexture() as long as your pixel data is a contiguous\nblock of Y and U/V planes in the proper order, but this function is\navailable if your pixel data is not contiguous.\n\n\\param texture the texture to update.\n\\param rect a pointer to the rectangle of pixels to update, or NULL to\n            update the entire texture.\n\\param Yplane the raw pixel data for the Y plane.\n\\param Ypitch the number of bytes between rows of pixel data for the Y\n              plane.\n\\param Uplane the raw pixel data for the U plane.\n\\param Upitch the number of bytes between rows of pixel data for the U\n              plane.\n\\param Vplane the raw pixel data for the V plane.\n\\param Vpitch the number of bytes between rows of pixel data for the V\n              plane.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UpdateNVTexture\n\\sa SDL_UpdateTexture",
          "name": "SDL_UpdateYUVTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "Yplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Ypitch",
              "type": "int"
            },
            {
              "name": "Uplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Upitch",
              "type": "int"
            },
            {
              "name": "Vplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Vpitch",
              "type": "int"
            }
          ]
        },
        "SDL_UpdateNVTexture": {
          "doc": "Update a rectangle within a planar NV12 or NV21 texture with new pixels.\n\nYou can use SDL_UpdateTexture() as long as your pixel data is a contiguous\nblock of NV12/21 planes in the proper order, but this function is available\nif your pixel data is not contiguous.\n\n\\param texture the texture to update.\n\\param rect a pointer to the rectangle of pixels to update, or NULL to\n            update the entire texture.\n\\param Yplane the raw pixel data for the Y plane.\n\\param Ypitch the number of bytes between rows of pixel data for the Y\n              plane.\n\\param UVplane the raw pixel data for the UV plane.\n\\param UVpitch the number of bytes between rows of pixel data for the UV\n               plane.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_UpdateTexture\n\\sa SDL_UpdateYUVTexture",
          "name": "SDL_UpdateNVTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "Yplane",
              "type": "const Uint8 *"
            },
            {
              "name": "Ypitch",
              "type": "int"
            },
            {
              "name": "UVplane",
              "type": "const Uint8 *"
            },
            {
              "name": "UVpitch",
              "type": "int"
            }
          ]
        },
        "SDL_LockTexture": {
          "doc": "Lock a portion of the texture for **write-only** pixel access.\n\nAs an optimization, the pixels made available for editing don't necessarily\ncontain the old texture data. This is a write-only operation, and if you\nneed to keep a copy of the texture data you should do that at the\napplication level.\n\nYou must use SDL_UnlockTexture() to unlock the pixels and apply any\nchanges.\n\n\\param texture the texture to lock for access, which was created with\n               `SDL_TEXTUREACCESS_STREAMING`.\n\\param rect an SDL_Rect structure representing the area to lock for access;\n            NULL to lock the entire texture.\n\\param pixels this is filled in with a pointer to the locked pixels,\n              appropriately offset by the locked area.\n\\param pitch this is filled in with the pitch of the locked pixels; the\n             pitch is the length of one row in bytes.\n\\returns true on success or false if the texture is not valid or was not\n         created with `SDL_TEXTUREACCESS_STREAMING`; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTextureToSurface\n\\sa SDL_UnlockTexture",
          "name": "SDL_LockTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "pixels",
              "type": "void **"
            },
            {
              "name": "pitch",
              "type": "int *"
            }
          ]
        },
        "SDL_LockTextureToSurface": {
          "doc": "Lock a portion of the texture for **write-only** pixel access, and expose\nit as a SDL surface.\n\nBesides providing an SDL_Surface instead of raw pixel data, this function\noperates like SDL_LockTexture.\n\nAs an optimization, the pixels made available for editing don't necessarily\ncontain the old texture data. This is a write-only operation, and if you\nneed to keep a copy of the texture data you should do that at the\napplication level.\n\nYou must use SDL_UnlockTexture() to unlock the pixels and apply any\nchanges.\n\nThe returned surface is freed internally after calling SDL_UnlockTexture()\nor SDL_DestroyTexture(). The caller should not free it.\n\n\\param texture the texture to lock for access, which must be created with\n               `SDL_TEXTUREACCESS_STREAMING`.\n\\param rect a pointer to the rectangle to lock for access. If the rect is\n            NULL, the entire texture will be locked.\n\\param surface a pointer to an SDL surface of size **rect**. Don't assume\n               any specific pixel content.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTexture\n\\sa SDL_UnlockTexture",
          "name": "SDL_LockTextureToSurface",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            },
            {
              "name": "surface",
              "type": "SDL_Surface **"
            }
          ]
        },
        "SDL_UnlockTexture": {
          "doc": "Unlock a texture, uploading the changes to video memory, if needed.\n\n**Warning**: Please note that SDL_LockTexture() is intended to be\nwrite-only; it will not guarantee the previous contents of the texture will\nbe provided. You must fully initialize any area of a texture that you lock\nbefore unlocking it, as the pixels might otherwise be uninitialized memory.\n\nWhich is to say: locking and immediately unlocking a texture can result in\ncorrupted textures, depending on the renderer in use.\n\n\\param texture a texture locked by SDL_LockTexture().\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_LockTexture",
          "name": "SDL_UnlockTexture",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_SetRenderTarget": {
          "doc": "Set a texture as the current rendering target.\n\nThe default render target is the window for which the renderer was created.\nTo stop rendering to a texture and render to the window again, call this\nfunction with a NULL `texture`.\n\n\\param renderer the rendering context.\n\\param texture the targeted texture, which must be created with the\n               `SDL_TEXTUREACCESS_TARGET` flag, or NULL to render to the\n               window instead of a texture.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderTarget",
          "name": "SDL_SetRenderTarget",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_GetRenderTarget": {
          "doc": "Get the current render target.\n\nThe default render target is the window for which the renderer was created,\nand is reported a NULL here.\n\n\\param renderer the rendering context.\n\\returns the current render target or NULL for the default render target.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderTarget",
          "name": "SDL_GetRenderTarget",
          "kind": "function",
          "type": "SDL_Texture *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_SetRenderLogicalPresentation": {
          "doc": "Set a device independent resolution and presentation mode for rendering.\n\nThis function sets the width and height of the logical rendering output.\nThe renderer will act as if the window is always the requested dimensions,\nscaling to the actual window resolution as necessary.\n\nThis can be useful for games that expect a fixed size, but would like to\nscale the output to whatever is available, regardless of how a user resizes\na window, or if the display is high DPI.\n\nYou can disable logical coordinates by setting the mode to\nSDL_LOGICAL_PRESENTATION_DISABLED, and in that case you get the full pixel\nresolution of the output window; it is safe to toggle logical presentation\nduring the rendering of a frame: perhaps most of the rendering is done to\nspecific dimensions but to make fonts look sharp, the app turns off logical\npresentation while drawing text.\n\nLetterboxing will only happen if logical presentation is enabled during\nSDL_RenderPresent; be sure to reenable it first if you were using it.\n\nYou can convert coordinates in an event into rendering coordinates using\nSDL_ConvertEventToRenderCoordinates().\n\n\\param renderer the rendering context.\n\\param w the width of the logical resolution.\n\\param h the height of the logical resolution.\n\\param mode the presentation mode used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_ConvertEventToRenderCoordinates\n\\sa SDL_GetRenderLogicalPresentation\n\\sa SDL_GetRenderLogicalPresentationRect",
          "name": "SDL_SetRenderLogicalPresentation",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "h",
              "type": "int"
            },
            {
              "name": "mode",
              "type": "SDL_RendererLogicalPresentation"
            }
          ]
        },
        "SDL_GetRenderLogicalPresentation": {
          "doc": "Get device independent resolution and presentation mode for rendering.\n\nThis function gets the width and height of the logical rendering output, or\nthe output size in pixels if a logical resolution is not enabled.\n\n\\param renderer the rendering context.\n\\param w an int to be filled with the width.\n\\param h an int to be filled with the height.\n\\param mode the presentation mode used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation",
          "name": "SDL_GetRenderLogicalPresentation",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "w",
              "type": "int *"
            },
            {
              "name": "h",
              "type": "int *"
            },
            {
              "name": "mode",
              "type": "SDL_RendererLogicalPresentation *"
            }
          ]
        },
        "SDL_GetRenderLogicalPresentationRect": {
          "doc": "Get the final presentation rectangle for rendering.\n\nThis function returns the calculated rectangle used for logical\npresentation, based on the presentation mode and output size. If logical\npresentation is disabled, it will fill the rectangle with the output size,\nin pixels.\n\n\\param renderer the rendering context.\n\\param rect a pointer filled in with the final presentation rectangle, may\n            be NULL.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation",
          "name": "SDL_GetRenderLogicalPresentationRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_FRect *"
            }
          ]
        },
        "SDL_RenderCoordinatesFromWindow": {
          "doc": "Get a point in render coordinates when given a point in window coordinates.\n\nThis takes into account several states:\n\n- The window dimensions.\n- The logical presentation settings (SDL_SetRenderLogicalPresentation)\n- The scale (SDL_SetRenderScale)\n- The viewport (SDL_SetRenderViewport)\n\n\\param renderer the rendering context.\n\\param window_x the x coordinate in window coordinates.\n\\param window_y the y coordinate in window coordinates.\n\\param x a pointer filled with the x coordinate in render coordinates.\n\\param y a pointer filled with the y coordinate in render coordinates.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation\n\\sa SDL_SetRenderScale",
          "name": "SDL_RenderCoordinatesFromWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "window_x",
              "type": "float"
            },
            {
              "name": "window_y",
              "type": "float"
            },
            {
              "name": "x",
              "type": "float *"
            },
            {
              "name": "y",
              "type": "float *"
            }
          ]
        },
        "SDL_RenderCoordinatesToWindow": {
          "doc": "Get a point in window coordinates when given a point in render coordinates.\n\nThis takes into account several states:\n\n- The window dimensions.\n- The logical presentation settings (SDL_SetRenderLogicalPresentation)\n- The scale (SDL_SetRenderScale)\n- The viewport (SDL_SetRenderViewport)\n\n\\param renderer the rendering context.\n\\param x the x coordinate in render coordinates.\n\\param y the y coordinate in render coordinates.\n\\param window_x a pointer filled with the x coordinate in window\n                coordinates.\n\\param window_y a pointer filled with the y coordinate in window\n                coordinates.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderLogicalPresentation\n\\sa SDL_SetRenderScale\n\\sa SDL_SetRenderViewport",
          "name": "SDL_RenderCoordinatesToWindow",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "window_x",
              "type": "float *"
            },
            {
              "name": "window_y",
              "type": "float *"
            }
          ]
        },
        "SDL_ConvertEventToRenderCoordinates": {
          "doc": "Convert the coordinates in an event to render coordinates.\n\nThis takes into account several states:\n\n- The window dimensions.\n- The logical presentation settings (SDL_SetRenderLogicalPresentation)\n- The scale (SDL_SetRenderScale)\n- The viewport (SDL_SetRenderViewport)\n\nVarious event types are converted with this function: mouse, touch, pen,\netc.\n\nTouch coordinates are converted from normalized coordinates in the window\nto non-normalized rendering coordinates.\n\nRelative mouse coordinates (xrel and yrel event fields) are _also_\nconverted. Applications that do not want these fields converted should use\nSDL_RenderCoordinatesFromWindow() on the specific event fields instead of\nconverting the entire event structure.\n\nOnce converted, coordinates may be outside the rendering area.\n\n\\param renderer the rendering context.\n\\param event the event to modify.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderCoordinatesFromWindow",
          "name": "SDL_ConvertEventToRenderCoordinates",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "event",
              "type": "SDL_Event *"
            }
          ]
        },
        "SDL_SetRenderViewport": {
          "doc": "Set the drawing area for rendering on the current target.\n\nDrawing will clip to this area (separately from any clipping done with\nSDL_SetRenderClipRect), and the top left of the area will become coordinate\n(0, 0) for future drawing commands.\n\nThe area's width and height must be >= 0.\n\n\\param renderer the rendering context.\n\\param rect the SDL_Rect structure representing the drawing area, or NULL\n            to set the viewport to the entire target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderViewport\n\\sa SDL_RenderViewportSet",
          "name": "SDL_SetRenderViewport",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetRenderViewport": {
          "doc": "Get the drawing area for the current target.\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure filled in with the current drawing area.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderViewportSet\n\\sa SDL_SetRenderViewport",
          "name": "SDL_GetRenderViewport",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_RenderViewportSet": {
          "doc": "Return whether an explicit rectangle was set as the viewport.\n\nThis is useful if you're saving and restoring the viewport and want to know\nwhether you should restore a specific rectangle or NULL. Note that the\nviewport is always reset when changing rendering targets.\n\n\\param renderer the rendering context.\n\\returns true if the viewport was set to a specific rectangle, or false if\n         it was set to NULL (the entire target).\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderViewport\n\\sa SDL_SetRenderViewport",
          "name": "SDL_RenderViewportSet",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRenderSafeArea": {
          "doc": "Get the safe area for rendering within the current viewport.\n\nSome devices have portions of the screen which are partially obscured or\nnot interactive, possibly due to on-screen controls, curved edges, camera\nnotches, TV overscan, etc. This function provides the area of the current\nviewport which is safe to have interactible content. You should continue\nrendering into the rest of the render target, but it should not contain\nvisually important or interactible content.\n\n\\param renderer the rendering context.\n\\param rect a pointer filled in with the area that is safe for interactive\n            content.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_GetRenderSafeArea",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_SetRenderClipRect": {
          "doc": "Set the clip rectangle for rendering on the specified target.\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure representing the clip area, relative to\n            the viewport, or NULL to disable clipping.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderClipRect\n\\sa SDL_RenderClipEnabled",
          "name": "SDL_SetRenderClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_GetRenderClipRect": {
          "doc": "Get the clip rectangle for the current target.\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure filled in with the current clipping area\n            or an empty rectangle if clipping is disabled.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderClipEnabled\n\\sa SDL_SetRenderClipRect",
          "name": "SDL_GetRenderClipRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "SDL_Rect *"
            }
          ]
        },
        "SDL_RenderClipEnabled": {
          "doc": "Get whether clipping is enabled on the given renderer.\n\n\\param renderer the rendering context.\n\\returns true if clipping is enabled or false if not; call SDL_GetError()\n         for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderClipRect\n\\sa SDL_SetRenderClipRect",
          "name": "SDL_RenderClipEnabled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_SetRenderScale": {
          "doc": "Set the drawing scale for rendering on the current target.\n\nThe drawing coordinates are scaled by the x/y scaling factors before they\nare used by the renderer. This allows resolution independent drawing with a\nsingle coordinate system.\n\nIf this results in scaling or subpixel drawing by the rendering backend, it\nwill be handled using the appropriate quality hints. For best results use\ninteger scaling factors.\n\n\\param renderer the rendering context.\n\\param scaleX the horizontal scaling factor.\n\\param scaleY the vertical scaling factor.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderScale",
          "name": "SDL_SetRenderScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scaleX",
              "type": "float"
            },
            {
              "name": "scaleY",
              "type": "float"
            }
          ]
        },
        "SDL_GetRenderScale": {
          "doc": "Get the drawing scale for the current target.\n\n\\param renderer the rendering context.\n\\param scaleX a pointer filled in with the horizontal scaling factor.\n\\param scaleY a pointer filled in with the vertical scaling factor.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderScale",
          "name": "SDL_GetRenderScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scaleX",
              "type": "float *"
            },
            {
              "name": "scaleY",
              "type": "float *"
            }
          ]
        },
        "SDL_SetRenderDrawColor": {
          "doc": "Set the color used for drawing operations.\n\nSet the color for drawing or filling rectangles, lines, and points, and for\nSDL_RenderClear().\n\n\\param renderer the rendering context.\n\\param r the red value used to draw on the rendering target.\n\\param g the green value used to draw on the rendering target.\n\\param b the blue value used to draw on the rendering target.\n\\param a the alpha value used to draw on the rendering target; usually\n         `SDL_ALPHA_OPAQUE` (255). Use SDL_SetRenderDrawBlendMode to\n         specify how the alpha channel is used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawColor\n\\sa SDL_SetRenderDrawColorFloat",
          "name": "SDL_SetRenderDrawColor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "Uint8"
            },
            {
              "name": "g",
              "type": "Uint8"
            },
            {
              "name": "b",
              "type": "Uint8"
            },
            {
              "name": "a",
              "type": "Uint8"
            }
          ]
        },
        "SDL_SetRenderDrawColorFloat": {
          "doc": "Set the color used for drawing operations (Rect, Line and Clear).\n\nSet the color for drawing or filling rectangles, lines, and points, and for\nSDL_RenderClear().\n\n\\param renderer the rendering context.\n\\param r the red value used to draw on the rendering target.\n\\param g the green value used to draw on the rendering target.\n\\param b the blue value used to draw on the rendering target.\n\\param a the alpha value used to draw on the rendering target. Use\n         SDL_SetRenderDrawBlendMode to specify how the alpha channel is\n         used.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawColorFloat\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_SetRenderDrawColorFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        },
        "SDL_GetRenderDrawColor": {
          "doc": "Get the color used for drawing operations (Rect, Line and Clear).\n\n\\param renderer the rendering context.\n\\param r a pointer filled in with the red value used to draw on the\n         rendering target.\n\\param g a pointer filled in with the green value used to draw on the\n         rendering target.\n\\param b a pointer filled in with the blue value used to draw on the\n         rendering target.\n\\param a a pointer filled in with the alpha value used to draw on the\n         rendering target; usually `SDL_ALPHA_OPAQUE` (255).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawColorFloat\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_GetRenderDrawColor",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "Uint8 *"
            },
            {
              "name": "g",
              "type": "Uint8 *"
            },
            {
              "name": "b",
              "type": "Uint8 *"
            },
            {
              "name": "a",
              "type": "Uint8 *"
            }
          ]
        },
        "SDL_GetRenderDrawColorFloat": {
          "doc": "Get the color used for drawing operations (Rect, Line and Clear).\n\n\\param renderer the rendering context.\n\\param r a pointer filled in with the red value used to draw on the\n         rendering target.\n\\param g a pointer filled in with the green value used to draw on the\n         rendering target.\n\\param b a pointer filled in with the blue value used to draw on the\n         rendering target.\n\\param a a pointer filled in with the alpha value used to draw on the\n         rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawColorFloat\n\\sa SDL_GetRenderDrawColor",
          "name": "SDL_GetRenderDrawColorFloat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "r",
              "type": "float *"
            },
            {
              "name": "g",
              "type": "float *"
            },
            {
              "name": "b",
              "type": "float *"
            },
            {
              "name": "a",
              "type": "float *"
            }
          ]
        },
        "SDL_SetRenderColorScale": {
          "doc": "Set the color scale used for render operations.\n\nThe color scale is an additional scale multiplied into the pixel color\nvalue while rendering. This can be used to adjust the brightness of colors\nduring HDR rendering, or changing HDR video brightness when playing on an\nSDR display.\n\nThe color scale does not affect the alpha channel, only the color\nbrightness.\n\n\\param renderer the rendering context.\n\\param scale the color scale value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderColorScale",
          "name": "SDL_SetRenderColorScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scale",
              "type": "float"
            }
          ]
        },
        "SDL_GetRenderColorScale": {
          "doc": "Get the color scale used for render operations.\n\n\\param renderer the rendering context.\n\\param scale a pointer filled in with the current color scale value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderColorScale",
          "name": "SDL_GetRenderColorScale",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "scale",
              "type": "float *"
            }
          ]
        },
        "SDL_SetRenderDrawBlendMode": {
          "doc": "Set the blend mode used for drawing operations (Fill and Line).\n\nIf the blend mode is not supported, the closest supported mode is chosen.\n\n\\param renderer the rendering context.\n\\param blendMode the SDL_BlendMode to use for blending.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderDrawBlendMode",
          "name": "SDL_SetRenderDrawBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode"
            }
          ]
        },
        "SDL_GetRenderDrawBlendMode": {
          "doc": "Get the blend mode used for drawing operations.\n\n\\param renderer the rendering context.\n\\param blendMode a pointer filled in with the current SDL_BlendMode.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawBlendMode",
          "name": "SDL_GetRenderDrawBlendMode",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "blendMode",
              "type": "SDL_BlendMode *"
            }
          ]
        },
        "SDL_RenderClear": {
          "doc": "Clear the current rendering target with the drawing color.\n\nThis function clears the entire rendering target, ignoring the viewport and\nthe clip rectangle. Note, that clearing will also set/fill all pixels of\nthe rendering target to current renderer draw color, so make sure to invoke\nSDL_SetRenderDrawColor() when needed.\n\n\\param renderer the rendering context.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_RenderClear",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_RenderPoint": {
          "doc": "Draw a point on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw a point.\n\\param x the x coordinate of the point.\n\\param y the y coordinate of the point.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderPoints",
          "name": "SDL_RenderPoint",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ]
        },
        "SDL_RenderPoints": {
          "doc": "Draw multiple points on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw multiple points.\n\\param points the points to draw.\n\\param count the number of points to draw.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderPoint",
          "name": "SDL_RenderPoints",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "points",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderLine": {
          "doc": "Draw a line on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw a line.\n\\param x1 the x coordinate of the start point.\n\\param y1 the y coordinate of the start point.\n\\param x2 the x coordinate of the end point.\n\\param y2 the y coordinate of the end point.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderLines",
          "name": "SDL_RenderLine",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            }
          ]
        },
        "SDL_RenderLines": {
          "doc": "Draw a series of connected lines on the current rendering target at\nsubpixel precision.\n\n\\param renderer the renderer which should draw multiple lines.\n\\param points the points along the lines.\n\\param count the number of points, drawing count-1 lines.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderLine",
          "name": "SDL_RenderLines",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "points",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderRect": {
          "doc": "Draw a rectangle on the current rendering target at subpixel precision.\n\n\\param renderer the renderer which should draw a rectangle.\n\\param rect a pointer to the destination rectangle, or NULL to outline the\n            entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderRects",
          "name": "SDL_RenderRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderRects": {
          "doc": "Draw some number of rectangles on the current rendering target at subpixel\nprecision.\n\n\\param renderer the renderer which should draw multiple rectangles.\n\\param rects a pointer to an array of destination rectangles.\n\\param count the number of rectangles.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderRect",
          "name": "SDL_RenderRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rects",
              "type": "const SDL_FRect *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderFillRect": {
          "doc": "Fill a rectangle on the current rendering target with the drawing color at\nsubpixel precision.\n\n\\param renderer the renderer which should fill a rectangle.\n\\param rect a pointer to the destination rectangle, or NULL for the entire\n            rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderFillRects",
          "name": "SDL_RenderFillRect",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderFillRects": {
          "doc": "Fill some number of rectangles on the current rendering target with the\ndrawing color at subpixel precision.\n\n\\param renderer the renderer which should fill multiple rectangles.\n\\param rects a pointer to an array of destination rectangles.\n\\param count the number of rectangles.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderFillRect",
          "name": "SDL_RenderFillRects",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rects",
              "type": "const SDL_FRect *"
            },
            {
              "name": "count",
              "type": "int"
            }
          ]
        },
        "SDL_RenderTexture": {
          "doc": "Copy a portion of the texture to the current rendering target at subpixel\nprecision.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTextureRotated\n\\sa SDL_RenderTextureTiled",
          "name": "SDL_RenderTexture",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderTextureRotated": {
          "doc": "Copy a portion of the source texture to the current rendering target, with\nrotation and flipping, at subpixel precision.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\param angle an angle in degrees that indicates the rotation that will be\n             applied to dstrect, rotating it in a clockwise direction.\n\\param center a pointer to a point indicating the point around which\n              dstrect will be rotated (if NULL, rotation will be done\n              around dstrect.w/2, dstrect.h/2).\n\\param flip an SDL_FlipMode value stating which flipping actions should be\n            performed on the texture.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTextureRotated",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "angle",
              "type": "double"
            },
            {
              "name": "center",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "flip",
              "type": "SDL_FlipMode"
            }
          ]
        },
        "SDL_RenderTextureAffine": {
          "doc": "Copy a portion of the source texture to the current rendering target, with\naffine transform, at subpixel precision.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param origin a pointer to a point indicating where the top-left corner of\n              srcrect should be mapped to, or NULL for the rendering\n              target's origin.\n\\param right a pointer to a point indicating where the top-right corner of\n             srcrect should be mapped to, or NULL for the rendering\n             target's top-right corner.\n\\param down a pointer to a point indicating where the bottom-left corner of\n            srcrect should be mapped to, or NULL for the rendering target's\n            bottom-left corner.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety You may only call this function from the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTextureAffine",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "origin",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "right",
              "type": "const SDL_FPoint *"
            },
            {
              "name": "down",
              "type": "const SDL_FPoint *"
            }
          ]
        },
        "SDL_RenderTextureTiled": {
          "doc": "Tile a portion of the texture to the current rendering target at subpixel\nprecision.\n\nThe pixels in `srcrect` will be repeated as many times as needed to\ncompletely fill `dstrect`.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect a pointer to the source rectangle, or NULL for the entire\n               texture.\n\\param scale the scale used to transform srcrect into the destination\n             rectangle, e.g. a 32x32 texture with a scale of 2 would fill\n             64x64 tiles.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTextureTiled",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderTexture9Grid": {
          "doc": "Perform a scaled copy using the 9-grid algorithm to the current rendering\ntarget at subpixel precision.\n\nThe pixels in the texture are split into a 3x3 grid, using the different\ncorner sizes for each corner, and the sides and center making up the\nremaining pixels. The corners are then scaled using `scale` and fit into\nthe corners of the destination rectangle. The sides and center are then\nstretched into place to cover the remaining destination rectangle.\n\n\\param renderer the renderer which should copy parts of a texture.\n\\param texture the source texture.\n\\param srcrect the SDL_Rect structure representing the rectangle to be used\n               for the 9-grid, or NULL to use the entire texture.\n\\param left_width the width, in pixels, of the left corners in `srcrect`.\n\\param right_width the width, in pixels, of the right corners in `srcrect`.\n\\param top_height the height, in pixels, of the top corners in `srcrect`.\n\\param bottom_height the height, in pixels, of the bottom corners in\n                     `srcrect`.\n\\param scale the scale used to transform the corner of `srcrect` into the\n             corner of `dstrect`, or 0.0f for an unscaled copy.\n\\param dstrect a pointer to the destination rectangle, or NULL for the\n               entire rendering target.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderTexture",
          "name": "SDL_RenderTexture9Grid",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "srcrect",
              "type": "const SDL_FRect *"
            },
            {
              "name": "left_width",
              "type": "float"
            },
            {
              "name": "right_width",
              "type": "float"
            },
            {
              "name": "top_height",
              "type": "float"
            },
            {
              "name": "bottom_height",
              "type": "float"
            },
            {
              "name": "scale",
              "type": "float"
            },
            {
              "name": "dstrect",
              "type": "const SDL_FRect *"
            }
          ]
        },
        "SDL_RenderGeometry": {
          "doc": "Render a list of triangles, optionally using a texture and indices into the\nvertex array Color and alpha modulation is done per vertex\n(SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n\n\\param renderer the rendering context.\n\\param texture (optional) The SDL texture to use.\n\\param vertices vertices.\n\\param num_vertices number of vertices.\n\\param indices (optional) An array of integer indices into the 'vertices'\n               array, if NULL all vertices will be rendered in sequential\n               order.\n\\param num_indices number of indices.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderGeometryRaw",
          "name": "SDL_RenderGeometry",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "vertices",
              "type": "const SDL_Vertex *"
            },
            {
              "name": "num_vertices",
              "type": "int"
            },
            {
              "name": "indices",
              "type": "const int *"
            },
            {
              "name": "num_indices",
              "type": "int"
            }
          ]
        },
        "SDL_RenderGeometryRaw": {
          "doc": "Render a list of triangles, optionally using a texture and indices into the\nvertex arrays Color and alpha modulation is done per vertex\n(SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n\n\\param renderer the rendering context.\n\\param texture (optional) The SDL texture to use.\n\\param xy vertex positions.\n\\param xy_stride byte size to move from one element to the next element.\n\\param color vertex colors (as SDL_FColor).\n\\param color_stride byte size to move from one element to the next element.\n\\param uv vertex normalized texture coordinates.\n\\param uv_stride byte size to move from one element to the next element.\n\\param num_vertices number of vertices.\n\\param indices (optional) An array of indices into the 'vertices' arrays,\n               if NULL all vertices will be rendered in sequential order.\n\\param num_indices number of indices.\n\\param size_indices index size: 1 (byte), 2 (short), 4 (int).\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderGeometry",
          "name": "SDL_RenderGeometryRaw",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "texture",
              "type": "SDL_Texture *"
            },
            {
              "name": "xy",
              "type": "const float *"
            },
            {
              "name": "xy_stride",
              "type": "int"
            },
            {
              "name": "color",
              "type": "const SDL_FColor *"
            },
            {
              "name": "color_stride",
              "type": "int"
            },
            {
              "name": "uv",
              "type": "const float *"
            },
            {
              "name": "uv_stride",
              "type": "int"
            },
            {
              "name": "num_vertices",
              "type": "int"
            },
            {
              "name": "indices",
              "type": "const void *"
            },
            {
              "name": "num_indices",
              "type": "int"
            },
            {
              "name": "size_indices",
              "type": "int"
            }
          ]
        },
        "SDL_RenderReadPixels": {
          "doc": "Read pixels from the current rendering target.\n\nThe returned surface should be freed with SDL_DestroySurface()\n\n**WARNING**: This is a very slow operation, and should not be used\nfrequently. If you're using this on the main rendering target, it should be\ncalled after rendering and before SDL_RenderPresent().\n\n\\param renderer the rendering context.\n\\param rect an SDL_Rect structure representing the area in pixels relative\n            to the to current viewport, or NULL for the entire viewport.\n\\returns a new SDL_Surface on success or NULL on failure; call\n         SDL_GetError() for more information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_RenderReadPixels",
          "kind": "function",
          "type": "SDL_Surface *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "rect",
              "type": "const SDL_Rect *"
            }
          ]
        },
        "SDL_RenderPresent": {
          "doc": "Update the screen with any rendering performed since the previous call.\n\nSDL's rendering functions operate on a backbuffer; that is, calling a\nrendering function such as SDL_RenderLine() does not directly put a line on\nthe screen, but rather updates the backbuffer. As such, you compose your\nentire scene and *present* the composed backbuffer to the screen as a\ncomplete picture.\n\nTherefore, when using SDL's rendering API, one does all drawing intended\nfor the frame, and then calls this function once per frame to present the\nfinal drawing to the user.\n\nThe backbuffer should be considered invalidated after each present; do not\nassume that previous contents will exist between frames. You are strongly\nencouraged to call SDL_RenderClear() to initialize the backbuffer before\nstarting each new frame's drawing, even if you plan to overwrite every\npixel.\n\nPlease note, that in case of rendering to a texture - there is **no need**\nto call `SDL_RenderPresent` after drawing needed objects to a texture, and\nshould not be done; you are only required to change back the rendering\ntarget to default via `SDL_SetRenderTarget(renderer, NULL)` afterwards, as\ntextures by themselves do not have a concept of backbuffers. Calling\nSDL_RenderPresent while rendering to a texture will still update the screen\nwith any current drawing that has been done _to the window itself_.\n\n\\param renderer the rendering context.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer\n\\sa SDL_RenderClear\n\\sa SDL_RenderFillRect\n\\sa SDL_RenderFillRects\n\\sa SDL_RenderLine\n\\sa SDL_RenderLines\n\\sa SDL_RenderPoint\n\\sa SDL_RenderPoints\n\\sa SDL_RenderRect\n\\sa SDL_RenderRects\n\\sa SDL_SetRenderDrawBlendMode\n\\sa SDL_SetRenderDrawColor",
          "name": "SDL_RenderPresent",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_DestroyTexture": {
          "doc": "Destroy the specified texture.\n\nPassing NULL or an otherwise invalid texture will set the SDL error message\nto \"Invalid texture\".\n\n\\param texture the texture to destroy.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateTexture\n\\sa SDL_CreateTextureFromSurface",
          "name": "SDL_DestroyTexture",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "texture",
              "type": "SDL_Texture *"
            }
          ]
        },
        "SDL_DestroyRenderer": {
          "doc": "Destroy the rendering context for a window and free all associated\ntextures.\n\nThis should be called before destroying the associated window.\n\n\\param renderer the rendering context.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_CreateRenderer",
          "name": "SDL_DestroyRenderer",
          "kind": "function",
          "type": "void",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_FlushRenderer": {
          "doc": "Force the rendering context to flush any pending commands and state.\n\nYou do not need to (and in fact, shouldn't) call this function unless you\nare planning to call into OpenGL/Direct3D/Metal/whatever directly, in\naddition to using an SDL_Renderer.\n\nThis is for a very-specific case: if you are using SDL's render API, and\nyou plan to make OpenGL/D3D/whatever calls in addition to SDL render API\ncalls. If this applies, you should call this function between calls to\nSDL's render API and the low-level API you're using in cooperation.\n\nIn all other cases, you can ignore this function.\n\nThis call makes SDL flush any pending rendering work it was queueing up to\ndo later in a single batch, and marks any internal cached state as invalid,\nso it'll prepare all its state again later, from scratch.\n\nThis means you do not need to save state in your rendering code to protect\nthe SDL renderer. However, there lots of arbitrary pieces of Direct3D and\nOpenGL state that can confuse things; you should use your best judgment and\nbe prepared to make changes if specific state needs to be protected.\n\n\\param renderer the rendering context.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_FlushRenderer",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRenderMetalLayer": {
          "doc": "Get the CAMetalLayer associated with the given Metal renderer.\n\nThis function returns `void *`, so SDL doesn't have to include Metal's\nheaders, but it can be safely cast to a `CAMetalLayer *`.\n\n\\param renderer the renderer to query.\n\\returns a `CAMetalLayer *` on success, or NULL if the renderer isn't a\n         Metal renderer.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderMetalCommandEncoder",
          "name": "SDL_GetRenderMetalLayer",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_GetRenderMetalCommandEncoder": {
          "doc": "Get the Metal command encoder for the current frame.\n\nThis function returns `void *`, so SDL doesn't have to include Metal's\nheaders, but it can be safely cast to an `id<MTLRenderCommandEncoder>`.\n\nThis will return NULL if Metal refuses to give SDL a drawable to render to,\nwhich might happen if the window is hidden/minimized/offscreen. This\ndoesn't apply to command encoders for render targets, just the window's\nbackbuffer. Check your return values!\n\n\\param renderer the renderer to query.\n\\returns an `id<MTLRenderCommandEncoder>` on success, or NULL if the\n         renderer isn't a Metal renderer or there was an error.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderMetalLayer",
          "name": "SDL_GetRenderMetalCommandEncoder",
          "kind": "function",
          "type": "void *",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            }
          ]
        },
        "SDL_AddVulkanRenderSemaphores": {
          "doc": "Add a set of synchronization semaphores for the current frame.\n\nThe Vulkan renderer will wait for `wait_semaphore` before submitting\nrendering commands and signal `signal_semaphore` after rendering commands\nare complete for this frame.\n\nThis should be called each frame that you want semaphore synchronization.\nThe Vulkan renderer may have multiple frames in flight on the GPU, so you\nshould have multiple semaphores that are used for synchronization. Querying\nSDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER will give you the\nmaximum number of semaphores you'll need.\n\n\\param renderer the rendering context.\n\\param wait_stage_mask the VkPipelineStageFlags for the wait.\n\\param wait_semaphore a VkSempahore to wait on before rendering the current\n                      frame, or 0 if not needed.\n\\param signal_semaphore a VkSempahore that SDL will signal when rendering\n                        for the current frame is complete, or 0 if not\n                        needed.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety It is **NOT** safe to call this function from two threads at\n              once.\n\n\\since This function is available since SDL 3.2.0.",
          "name": "SDL_AddVulkanRenderSemaphores",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "wait_stage_mask",
              "type": "Uint32"
            },
            {
              "name": "wait_semaphore",
              "type": "Sint64"
            },
            {
              "name": "signal_semaphore",
              "type": "Sint64"
            }
          ]
        },
        "SDL_SetRenderVSync": {
          "doc": "Toggle VSync of the given renderer.\n\nWhen a renderer is created, vsync defaults to SDL_RENDERER_VSYNC_DISABLED.\n\nThe `vsync` parameter can be 1 to synchronize present with every vertical\nrefresh, 2 to synchronize present with every second vertical refresh, etc.,\nSDL_RENDERER_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync), or\nSDL_RENDERER_VSYNC_DISABLED to disable. Not every value is supported by\nevery driver, so you should check the return value to see whether the\nrequested setting is supported.\n\n\\param renderer the renderer to toggle.\n\\param vsync the vertical refresh sync interval.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_GetRenderVSync",
          "name": "SDL_SetRenderVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "vsync",
              "type": "int"
            }
          ]
        },
        "SDL_RENDERER_VSYNC_DISABLED": {
          "doc": "",
          "name": "SDL_RENDERER_VSYNC_DISABLED",
          "kind": "def"
        },
        "SDL_RENDERER_VSYNC_ADAPTIVE": {
          "doc": "",
          "name": "SDL_RENDERER_VSYNC_ADAPTIVE",
          "kind": "def"
        },
        "SDL_GetRenderVSync": {
          "doc": "Get VSync of the given renderer.\n\n\\param renderer the renderer to toggle.\n\\param vsync an int filled with the current vertical refresh sync interval.\n             See SDL_SetRenderVSync() for the meaning of the value.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_SetRenderVSync",
          "name": "SDL_GetRenderVSync",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "vsync",
              "type": "int *"
            }
          ]
        },
        "SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE": {
          "doc": "The size, in pixels, of a single SDL_RenderDebugText() character.\n\nThe font is monospaced and square, so this applies to all characters.\n\n\\since This macro is available since SDL 3.2.0.\n\n\\sa SDL_RenderDebugText",
          "name": "SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE",
          "kind": "def"
        },
        "SDL_RenderDebugText": {
          "doc": "Draw debug text to an SDL_Renderer.\n\nThis function will render a string of text to an SDL_Renderer. Note that\nthis is a convenience function for debugging, with severe limitations, and\nnot intended to be used for production apps and games.\n\nAmong these limitations:\n\n- It accepts UTF-8 strings, but will only renders ASCII characters.\n- It has a single, tiny size (8x8 pixels). One can use logical presentation\n  or scaling to adjust it, but it will be blurry.\n- It uses a simple, hardcoded bitmap font. It does not allow different font\n  selections and it does not support truetype, for proper scaling.\n- It does no word-wrapping and does not treat newline characters as a line\n  break. If the text goes out of the window, it's gone.\n\nFor serious text rendering, there are several good options, such as\nSDL_ttf, stb_truetype, or other external libraries.\n\nOn first use, this will create an internal texture for rendering glyphs.\nThis texture will live until the renderer is destroyed.\n\nThe text is drawn in the color specified by SDL_SetRenderDrawColor().\n\n\\param renderer the renderer which should draw a line of text.\n\\param x the x coordinate where the top-left corner of the text will draw.\n\\param y the y coordinate where the top-left corner of the text will draw.\n\\param str the string to render.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderDebugTextFormat\n\\sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE",
          "name": "SDL_RenderDebugText",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "str",
              "type": "const char *"
            }
          ]
        },
        "SDL_RenderDebugTextFormat": {
          "doc": "Draw debug text to an SDL_Renderer.\n\nThis function will render a printf()-style format string to a renderer.\nNote that this is a convinence function for debugging, with severe\nlimitations, and is not intended to be used for production apps and games.\n\nFor the full list of limitations and other useful information, see\nSDL_RenderDebugText.\n\n\\param renderer the renderer which should draw the text.\n\\param x the x coordinate where the top-left corner of the text will draw.\n\\param y the y coordinate where the top-left corner of the text will draw.\n\\param fmt the format string to draw.\n\\param ... additional parameters matching % tokens in the `fmt` string, if\n           any.\n\\returns true on success or false on failure; call SDL_GetError() for more\n         information.\n\n\\threadsafety This function should only be called on the main thread.\n\n\\since This function is available since SDL 3.2.0.\n\n\\sa SDL_RenderDebugText\n\\sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE",
          "name": "SDL_RenderDebugTextFormat",
          "kind": "function",
          "type": "bool",
          "parameters": [
            {
              "name": "renderer",
              "type": "SDL_Renderer *"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "fmt",
              "type": "SDL_PRINTF_FORMAT_STRING const char *"
            },
            "..."
          ]
        }
      }
    }
  }
}
