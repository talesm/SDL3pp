/**
@page DesignNotes Design notes

Design notes on this project.

Here we describe common design aspects and patterns used in the project. To 
have an idea on all fits together you may look into @ref transformations.

Pages:
- @subpage transformations define the rules on how we map SDL's C API into C++;
- @subpage resource explains how we deal with types created and destructed by SDL;
- @subpage callback define what it is and strategies to handle callbacks;
- @subpage formatted-string
- @subpage wrap-state
- @subpage wrap-extending-struct
- @subpage constructor-tag helps dealing with ambiguity constructors, specially
  [resources](#resource);

*/

/**
@page resource Resource

A Resource is a type where its memory is controlled by SDL, usually with
functions like `SDL_Create*()` and `SDL_Destroy*()`.

To represent this type, we create RAII class where the Create* functions become its 
constructors and the Destroy is called by the destructor. Special *Param and *Ref 
exist to ease the use and allow flexibility on lifetime handling. Eg, for refcounted
structs like SDL_Surface we get:

- Surface: the main class, with all wrapped methods inside it. Copying an object 
  of it increments the refcount field. The surface is destroyed when the last 
  instance goes out of scope.
- SurfaceParam, SurfaceConstParam: wrappers to allow interchangeable use of raw
  SDL_Surface and Surface as parameter.

For an opaque or non-refcounted type such as SDL_Window e get:

- Window: the main class, with all wrapped methods inside it. Copying it
  disallowed. When the instance goes out of scope it destroy the window.
- WindowRef: a non owned version, with same methods, but it can be copy and it
  does not destroy the window.
- WindowParam: a wrapper to allow interchangeable use of raw
  SDL_Window and Window and WindowRef as parameter.

*/
/**
@page formatted-string Formatted string

C++ has the type-safe [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
style, so where applicable we wrap the SDL's C style formatted string with the
it.

@todo make an example on how to wrap (see SetError() for now)
*/

/**
@page wrap-state Wrap state

We define an wrapped state when we have a opaque void*, an integer or enum that
just represent some state or handle that does not relate to any allocation (it
is safe to copy around), but it has some OO-like macro properties to query and or 
OO-like functions to manipulate it.

An wrap state is class with a single attribute storing the state, and with a 
constexpr converting constructor from the state type and a constexpr converting
operator back to it. This usually is not recommended in C++ style guides, but
we do this in order to make the state usable transparently. If there is no need
for using it transparently. then we have a get function instead.

If the state has some sort of @b invalid or @b uninitialized state, we also
create a converting operator to bool that is true when the state valid.

There should be a default comparison operator, also constexpr and if possible 
using the spaceship `<=>`.

*/

/**
@page wrap-extending-struct Wrap extending struct

This is similar to @ref wrap-state, but when the state is a struct. In that case
we can have similar results by extending it and adding the member functions on 
the extended type. 

The extended type must not have any attribute and must have a constructor 
to the original type. If the state has some sort of @b invalid or @b uninitialized
state, we also create a converting operator to bool that is true when the state
valid.
*/
