// Amalgamated SDL3pp
#ifndef SDL3PP_H_
#define SDL3PP_H_

#include <atomic>
#include <chrono>
#include <concepts>
#include <format>
#include <functional>
#include <memory>
#include <optional>
#include <ranges>
#include <span>
#include <string>
#include <string_view>
#include <unordered_map>
#include <variant>
#include <vector>
#include <SDL3/SDL.h>

namespace SDL {

/**
 * @defgroup CategoryCallbackWrapper Async callback helpers
 *
 * Async callback wrapper helper functions and types.
 *
 * @{
 */

template<class F>
struct CallbackWrapper;

/**
 * @brief Wrapper [result callbacks](#result-callback).
 *
 * @tparam F the function type.
 *
 * For the simpler case, where no transformation is done on the parameters, you
 * can just pass CallOnce() or CallOnceSuffixed(). Otherwise use release().
 *
 * In all cases, use Wrap to change the callback into a void* pointer.
 */
template<class Result, class... Args>
struct CallbackWrapper<std::function<Result(Args...)>>
{
  CallbackWrapper() = delete;

  /// The wrapped std::function type
  using ValueType = std::function<Result(Args...)>;

  /**
   * @brief Change the callback into a void* pointer.
   *
   * @param cb
   * @return void*
   */
  static ValueType* Wrap(ValueType&& cb)
  {
    return new ValueType(std::move(cb));
  }

  /// Call once and release.
  static Result CallOnce(void* handle, Args... args)
  {
    auto f = release(handle);
    return f(args...);
  }

  /// Call once and release with suffix handle.
  static Result CallOnceSuffixed(Args... args, void* handle)
  {
    auto f = release(handle);
    return f(args...);
  }

  /**
   * @brief Transfer ownership from the function and delete handle.
   *
   * @param handle the handle to be released.
   *
   * @return the callback ready to be invoked.
   */
  static ValueType release(void* handle)
  {
    if (handle == nullptr) return {};
    auto ptr = static_cast<ValueType*>(handle);
    ValueType value{std::move(*ptr)};
    delete ptr;
    return value;
  }
};

/**
 * @brief Wrapper key to value [result callbacks](#result-callback).
 *
 * @tparam KEY the key type.
 * @tparam VALUE the value type.
 *
 */
template<class KEY, class VALUE>
struct KeyValueWrapper
{
  static_assert(sizeof(KEY) <= sizeof(void*));
  KeyValueWrapper() = delete;

  /// Key type
  using KeyType = KEY;

  /// Value type.
  using ValueType = VALUE;

  /**
   * @brief Change the value into a void* pointer held by key.
   *
   * @param key
   * @param value
   * @return void*
   */
  static void* Wrap(KeyType key, ValueType&& value)
  {
    {
      auto lockGuard = lock();
      Values().insert_or_assign(key, std::move(value));
    }
    return reinterpret_cast<void*>(key);
  }

  /// True if handle is stored.
  static bool contains(void* handle)
  {
    auto lockGuard = lock();
    return Values().contains((KeyType)(handle));
  }

  /// Return unwrapped value of handle.
  static const ValueType& at(void* handle)
  {
    auto lockGuard = lock();
    return Values().at((KeyType)(handle));
  }

  /// Return unwrapped value associated by key and remove association.
  static ValueType release(KeyType key)
  {
    auto lockGuard = lock();
    auto& values = Values();
    auto it = values.find(key);
    if (it == values.end()) return {};
    ValueType value{std::move(it->second)};
    values.erase(it);
    return value;
  }

  /// Return unwrapped value of handle and remove association.
  static ValueType release(void* handle) { return release((KeyType)handle); }

  /**
   * Remove association.
   *
   * @param key the key associated.
   * @return true if the key was associated and was erased, false otherwise.
   */
  static bool erase(KeyType key)
  {
    auto lockGuard = lock();
    return Values().erase(key);
  }

  /**
   * Remove association.
   *
   * @param handle the handle.
   * @return true if the key was associated and was erased, false otherwise.
   */
  static bool erase(void* handle) { return erase((KeyType)handle); }

private:
  static std::unordered_map<KeyType, ValueType>& Values()
  {
    static std::unordered_map<KeyType, ValueType> values;
    return values;
  }

  static std::lock_guard<std::mutex> lock()
  {
    static std::mutex uniqueMutex;
    return std::lock_guard{uniqueMutex};
  }
};

/**
 * @brief Stored Wrapper unique by type [result callbacks](#result-callback).
 *
 * @tparam VALUE the function type.
 */
template<class VALUE>
struct UniqueWrapper
{
  UniqueWrapper() = delete;

  /// Wrapped type.
  using ValueType = VALUE;

  /**
   * @brief Change the value into a void* pointer held uniquely by this type.
   *
   * @param value
   * @return void*
   */
  static ValueType* Wrap(ValueType&& value)
  {
    auto lockGuard = lock();
    auto& v = Value();
    v = std::move(value);
    return &v;
  }

  /// True if handle equals to wrapped value.
  static bool contains(void* handle)
  {
    auto lockGuard = lock();
    auto& v = Value();
    return bool(v) && &v == handle;
  }

  /// Return wrapped type, if handle is contained.
  static const ValueType& at(void* handle)
  {
    auto lockGuard = lock();
    auto& v = Value();
    SDL_assert_paranoid(&v == handle);
    return v;
  }

  /// Return wrapped type and erase it from store.
  static ValueType release(void* handle)
  {
    auto lockGuard = lock();
    auto& v = Value();
    SDL_assert_paranoid(&v == handle);

    ValueType value{std::move(v)};
    return value;
  }

  /// Erase value from store.
  static void erase()
  {
    auto lockGuard = lock();
    Value() = {};
  }

private:
  static ValueType& Value()
  {
    static ValueType value;
    return value;
  }

  static std::lock_guard<std::mutex> lock()
  {
    static std::mutex uniqueMutex;
    return std::lock_guard{uniqueMutex};
  }
};

/// @}

/**
 * @brief Optional-like shim for references
 *
 * This allows us explicitly annotate optional parameters that would otherwise
 * be references.
 *
 * @tparam T the underlying type
 *
 * @ingroup CategoriesCppSupport
 */
template<class T>
class OptionalRef
{
  T* ptr;

public:
  constexpr OptionalRef(std::nullopt_t = std::nullopt)
    : ptr(nullptr)
  {
  }

  constexpr OptionalRef(T& value)
    : ptr(&value)
  {
  }

  constexpr auto operator<=>(const OptionalRef&) const = default;

  constexpr bool has_value() const { return ptr != nullptr; }

  constexpr const T& value() const { return *ptr; }
  constexpr T& value() { return *ptr; }

  constexpr operator T*() const { return ptr; }

  constexpr bool operator==(std::nullopt_t) const { return ptr == nullptr; }

  constexpr T& operator*() { return *ptr; }
  constexpr const T& operator*() const { return *ptr; }
  constexpr T* operator->() { return ptr; }
  constexpr const T* operator->() const { return ptr; }
};

template<class T>
constexpr OptionalRef<T> fromNullable(T* ptr)
{
  if (ptr) return {*ptr};
  return std::nullopt;
}

/**
 * @defgroup CategoryOwnPtr Pointer wrapper to SDL::free()
 *
 * Wraps SDL generated pointers to automatically freeing them.
 * @{
 */

/// Calls SDL_free()
struct PtrDeleter
{
  void operator()(void* ptr) const;
};

/**
 * Handle to an owned SDL memory allocated pointer
 *
 * @cat resource
 *
 * @sa resource
 * @sa PtrBase
 * @sa RefPtr
 */
template<class T>
using OwnPtr = std::unique_ptr<T, PtrDeleter>;

/**
 * Base class for SDL memory allocated array wrap
 *
 * @tparam T the wrapped array type, without the []
 *
 * @cat resource
 */
template<class T>
class OwnArray
{
  OwnPtr<T> m_ptr;
  size_t m_size = 0;

public:
  constexpr OwnArray(std::nullptr_t = nullptr) {}

  constexpr explicit OwnArray(T* ptr, size_t size)
    : m_ptr(ptr)
    , m_size(size)
  {
  }

  constexpr explicit OwnArray(T* ptr)
    : m_ptr(ptr)
  {
    if (ptr) {
      auto endPtr = ptr;
      while (*endPtr) ++endPtr;
      m_size = endPtr - ptr;
    }
  }

  /// True if not empty
  constexpr explicit operator bool() const { return bool(m_ptr); }

  /// True if size() == 0
  constexpr bool empty() const { return !m_ptr; }

  /// Data
  constexpr T* data() { return m_ptr.get(); }

  /// Data
  constexpr const T* data() const { return m_ptr.get(); }

  /// Size
  constexpr size_t size() const { return m_size; }

  /// Access index
  constexpr T& operator[](size_t i) { return m_ptr.get()[i]; }

  /// Access index
  constexpr const T& operator[](size_t i) const { return m_ptr.get()[i]; }

  /**
   * @{
   *
   * Get iterator to first element
   */
  T* begin() { return data(); }
  const T* begin() const { return data(); }
  const T* cbegin() const { return begin(); }
  /// @}

  /**
   * @{
   *
   * Get iterator to one past end element
   */
  T* end() { return begin() + size(); }
  const T* end() const { return begin() + size(); }
  const T* cend() const { return begin() + size(); }
  /// @}
};

/**
 * Handle to an owned SDL memory allocated array
 *
 * @tparam T the wrapped array type, without the []
 *
 * @cat resource
 *
 * @sa resource
 * @sa ArrayBase
 * @sa OwnArray
 * @sa RefPtr
 */
template<class T>
using RefArray = std::span<T>;

/// @}

/**
 * @brief A SDL managed resource.
 *
 * @tparam T the underlying resource type.
 *
 * @ingroup CategoriesCppSupport
 */
template<class T>
class Resource
{
  T m_resource;

public:
  /// Constructs the underlying resource.
  constexpr Resource(T resource = {})
    : m_resource(std::move(resource))
  {
  }

  /// Equivalent to default ctor
  constexpr Resource(std::nullptr_t)
    : m_resource{0}
  {
  }

  /// Equivalent to default ctor
  constexpr Resource(std::nullopt_t)
    : m_resource{0}
  {
  }

  Resource(const Resource& other) = delete;
  Resource(Resource&& other) = delete;
  Resource& operator=(const Resource& other) = delete;
  Resource& operator=(Resource&& other) = delete;

  /// True if contains a valid resource
  constexpr explicit operator bool() const { return m_resource; }

  /// Comparison
  constexpr bool operator==(const Resource& other) const = default;

  /// Comparison
  constexpr bool operator==(std::nullopt_t) const { return !m_resource; }

  /// Comparison
  constexpr bool operator==(std::nullptr_t) const { return !m_resource; }

  /// Return contained resource;
  constexpr T get() const { return m_resource; }

  /// Return contained resource and empties or replace value
  constexpr T release(T newResource = {})
  {
    T result = std::move(m_resource);
    m_resource = newResource;
    return result;
  }

  /// Access to fields
  constexpr const T operator->() const { return get(); }

  /// Access to fields
  constexpr T operator->() { return get(); }
};

/**
 * A optional reference to resource.
 *
 * This is meant to be aliased like this:
 *
 * ```cpp
 * using OptionalTexture = OptionalResource<TextureRef, Texture>;
 * ```
 *
 * @tparam REF the *Type*Ref.
 * @tparam UNIQUE the *Type*.
 */
template<class REF, class UNIQUE>
class OptionalResource : public REF
{
  bool m_owning = false;

public:
  using REF::REF;

  /// Constructs from a reference
  constexpr OptionalResource(const REF& other)
    : REF(other)
  {
  }

  /// Constructs from a reference
  constexpr OptionalResource(const UNIQUE& other)
    : REF(other)
  {
  }

  /// Constructs from a moved from unique
  constexpr OptionalResource(UNIQUE&& other)
    : REF(other.release())
    , m_owning(true)
  {
  }

  OptionalResource(const OptionalResource& other) = delete;

  /// Move ctor
  OptionalResource(OptionalResource&& other)
    : REF(other.release())
    , m_owning(other.m_owning)
  {
    other.m_owning = false;
  }

  OptionalResource& operator=(const OptionalResource& other) = delete;

  /// Assignment operator.
  OptionalResource& operator=(OptionalResource&& other)
  {
    REF::operator=(REF(other.release()));
    m_owning = other.m_owning;
    other.m_owning = false;
    return *this;
  }

  /// Destructor
  ~OptionalResource()
  {
    if (m_owning) REF::reset();
  }
};

/**
 * A detached reference to resource that might be transformed into an owned
 * handle.
 *
 * This is meant to be aliased like this:
 *
 * ```cpp
 * using DetachedTrayEntry = DetachedResource<TrayEntryRef, TrayEntry>;
 * ```
 *
 * @tparam REF the *Type*Ref.
 * @tparam UNIQUE the *Type*.
 */
template<class REF, class UNIQUE>
struct DetachedResource : REF
{
  using REF::REF;

  DetachedResource(const DetachedResource& other) = delete;

  /// Move ctor
  constexpr DetachedResource(DetachedResource&& other)
    : REF(other.release())
  {
  }

  DetachedResource& operator=(const DetachedResource& other) = delete;

  /// Move assignment
  constexpr DetachedResource& operator=(DetachedResource&& other)
  {
    release(other.release());
    return *this;
  }

  /// Converts to UNIQUE
  operator UNIQUE() { return UNIQUE{REF::release()}; }
};

template<class T, class BASE>
concept DerivedWrapper =
  std::derived_from<T, BASE> && sizeof(T) == sizeof(BASE);

/**
 * span-like for empty-derived structs
 *
 * This wraps around std::span that works for out derived-wrapper pattern
 * (eg, Rect, Color)
 *
 * @ingroup CategoriesCppSupport
 */
template<class T>
class SpanRef
{
  std::span<T> value;

public:
  constexpr SpanRef() = default;

  template<DerivedWrapper<T> U, size_t N>
  constexpr SpanRef(U (&other)[N])
    : value(static_cast<T*>(other), N)
  {
  }

  template<DerivedWrapper<T> U>
  constexpr SpanRef(const std::span<U>& other)
    : value(other.data(), other.size())
  {
  }

  template<std::contiguous_iterator It>
    requires DerivedWrapper<std::iter_value_t<It>, T>
  constexpr SpanRef(It first, size_t count)
    : value((T*)(&*first), count)
  {
  }

  template<std::contiguous_iterator It, std::sized_sentinel_for<It> End>
    requires DerivedWrapper<std::iter_value_t<It>, T>
  constexpr SpanRef(It first, End last)
    : value((T*)(&*first), size_t(last - first))
  {
  }
  template<std::ranges::contiguous_range R>
    requires DerivedWrapper<std::iter_value_t<std::ranges::iterator_t<R>>, T>
  constexpr SpanRef(R&& range)
    : SpanRef(std::begin(range), std::end(range))
  {
  }

  constexpr size_t size() const { return value.size(); }

  constexpr T* data() const { return value.data(); }
};

#ifndef SDL3PP_ENABLE_STRING_PARAM

#ifndef SDL3PP_DISABLE_STRING_PARAM
#define SDL3PP_ENABLE_STRING_PARAM
#endif // SDL3PP_DISABLE_STRING_PARAM

#endif // SDL3PP_ENABLE_STRING_PARAM

#ifdef SDL3PP_ENABLE_STRING_PARAM

/**
 * @brief Helpers to use C++ strings parameters
 *
 * This wraps std::string and std::string_view to the SDL's C interfaces.
 *
 * This should only be declared in [function
 * parameters](https://en.cppreference.com/w/cpp/language/expressions#Full-expressions),
 * using it otherwise is to ask for undefined behavior
 *
 * @ingroup CategoriesCppSupport
 */
class StringParam
{
  std::variant<const char*, std::string> data;

public:
  /// Default ctor
  constexpr StringParam(std::nullptr_t = nullptr)
    : data("")
  {
  }

  /**
   * Constructs from a C string.
   *
   * This assumes the parameter object lifetime is larger than this object,
   * which is always true on parameters, so it just stores the pointer, no copy
   * is done.
   *
   * @param str the string to store. This parameter must outlive this object.
   */
  constexpr StringParam(const char* str)
    : data(str ?: "")
  {
  }

  /**
   * Constructs from std::string reference.
   *
   * This assumes the parameter object lifetime is larger than this object,
   * which is always true on parameters, so it just stores the pointer to
   * internal string data, no copy is done.
   *
   * @param str the reference to a string. This parameter must outlive this
   *            object.
   */
  constexpr StringParam(const std::string& str)
    : StringParam(str.c_str())
  {
  }

  /**
   * Constructs from std::string object.
   *
   * This case we assume the ownership for the string and will properly call
   * destructor automatically.
   *
   * @param str the string to store
   */
  constexpr StringParam(std::string&& str)
    : data(std::move(str))
  {
  }

  /**
   * Constructs from std::string_view object
   *
   * String view are very usefull on C++, but they don't have the null
   * terminator expected by most string SDL APIs, so we always copy its content
   * to a stored std::string.
   *
   * @param str the string_view to store
   */
  StringParam(std::string_view str)
    : StringParam(std::string{str})
  {
  }

  StringParam(const StringParam&) = delete;
  StringParam& operator=(const StringParam&) = delete;

  /// Move ctor
  StringParam(StringParam&&) = default;

  /// Move assignment
  StringParam& operator=(StringParam&&) = default;

  /**
   * Converts to a null terminated C string.
   *
   * @return the C string representation. We guarantee it to be null terminated
   * unless the objects it was constructed from are corrupted.
   */
  operator const char*() const
  {
    struct Visitor
    {
      const char* operator()(const char* a) const { return a; }
      const char* operator()(const std::string& s) const { return s.c_str(); }
    };
    return std::visit(Visitor{}, data);
  }
};

#else // SDL3PP_ENABLE_STRING_PARAM

using StringParam = const char*;

#endif // SDL3PP_ENABLE_STRING_PARAM

/**
 * @defgroup CategoryStdinc Standard Library Functionality
 *
 * SDL provides its own implementation of some of the most important C runtime
 * functions.
 *
 * Using these functions allows an app to have access to common C
 * functionality without depending on a specific C runtime (or a C runtime at
 * all). More importantly, the SDL implementations work identically across
 * platforms, so apps can avoid surprises like snprintf() behaving differently
 * between Windows and Linux builds, or itoa() only existing on some
 * platforms.
 *
 * For many of the most common functions, like SDL_memcpy, SDL might just call
 * through to the usual C runtime behind the scenes, if it makes sense to do
 * so (if it's faster and always available/reliable on a given platform),
 * reducing library size and offering the most optimized option.
 *
 * SDL also offers other C-runtime-adjacent functionality in this header that
 * either isn't, strictly speaking, part of any C runtime standards, like
 * SDL_crc32() and SDL_reinterpret_cast, etc. It also offers a few better
 * options, like SDL_strlcpy(), which functions as a safer form of strcpy().
 *
 * @{
 */

// Forward decl
struct EnvironmentBase;

// Forward decl
struct EnvironmentRef;

// Forward decl
struct Environment;

// Forward decl
struct IConvBase;

// Forward decl
struct IConvRef;

// Forward decl
struct IConv;

#ifdef SDL3PP_DOC

/**
 * Don't let SDL use "long long" C types.
 *
 * SDL will define this if it believes the compiler doesn't understand the
 * "long long" syntax for C datatypes. This can happen on older compilers.
 *
 * If _your_ compiler doesn't support "long long" but SDL doesn't know it, it
 * is safe to define this yourself to build against the SDL headers.
 *
 * If this is defined, it will remove access to some C runtime support
 * functions, like SDL_ulltoa and SDL_strtoll that refer to this datatype
 * explicitly. The rest of SDL will still be available.
 *
 * SDL's own source code cannot be built with a compiler that has this
 * defined, for various technical reasons.
 */
#define SDL_NOLONGLONG 1

/**
 * The largest value that a `size_t` can hold for the target platform.
 *
 * `size_t` is generally the same size as a pointer in modern times, but this
 * can get weird on very old and very esoteric machines. For example, on a
 * 16-bit Intel 286, you might have a 32-bit "far" pointer (16-bit segment
 * plus 16-bit offset), but `size_t` is 16 bits, because it can only deal with
 * the offset into an individual segment.
 *
 * In modern times, it's generally expected to cover an entire linear address
 * space. But be careful!
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_SIZE_MAX SIZE_MAX

#endif // SDL3PP_DOC

/**
 * The number of elements in a static array.
 *
 * This will compile but return incorrect results for a pointer to an array;
 * it has to be an array the compiler knows the size of.
 *
 * @since This function is available since SDL 3.2.0.
 */
template<class T, std::size_t N>
constexpr std::size_t arraysize(const T (&array)[N])
{
  return SDL_arraysize(array);
}

#ifdef SDL3PP_DOC

/**
 * Macro useful for building other macros with strings in them.
 *
 * For example:
 *
 * ```c
 * #define LOG_ERROR(X) OutputDebugString(SDL_STRINGIFY_ARG(__FUNCTION__) ": " X
 * "@n")`
 * ```
 *
 * @param arg the text to turn into a string literal.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_STRINGIFY_ARG(arg) #arg

#endif // SDL3PP_DOC

/**
 * Define a four character code as a Uint32.
 *
 * @param a the first ASCII character.
 * @param b the second ASCII character.
 * @param c the third ASCII character.
 * @param d the fourth ASCII character.
 * @returns the four characters converted into a Uint32, one character
 *          per-byte.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr Uint32 FourCC(Uint8 a, Uint8 b, Uint8 c, Uint8 d)
{
  return SDL_FOURCC(a, b, c, d);
}

#ifdef SDL3PP_DOC

/**
 * Append the 64 bit integer suffix to a signed integer literal.
 *
 * This helps compilers that might believe a integer literal larger than
 * 0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_SINT64_C(0xFFFFFFFF1)`
 * instead of `0xFFFFFFFF1` by itself.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_UINT64_C
 */
#define SDL_SINT64_C(c) c##LL /* or whatever the current compiler uses. */

/**
 * Append the 64 bit integer suffix to an unsigned integer literal.
 *
 * This helps compilers that might believe a integer literal larger than
 * 0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_UINT64_C(0xFFFFFFFF1)`
 * instead of `0xFFFFFFFF1` by itself.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SINT64_C
 */
#define SDL_UINT64_C(c) c##ULL /* or whatever the current compiler uses. */

#endif // SDL3PP_DOC

constexpr Sint8 MAX_SINT8 = SDL_MAX_SINT8;

constexpr Sint8 MIN_SINT8 = SDL_MIN_SINT8;

constexpr Uint8 MAX_UINT8 = SDL_MAX_UINT8;

constexpr Uint8 MIN_UINT8 = SDL_MIN_UINT8;

constexpr Sint16 MAX_SINT16 = SDL_MAX_SINT16;

constexpr Sint16 MIN_SINT16 = SDL_MIN_SINT16;

constexpr Uint16 MAX_UINT16 = SDL_MAX_UINT16;

constexpr Uint16 MIN_UINT16 = SDL_MIN_UINT16;

constexpr Sint32 MAX_SINT32 = SDL_MAX_SINT32;

constexpr Sint32 MIN_SINT32 = SDL_MIN_SINT32;

constexpr Uint32 MAX_UINT32 = SDL_MAX_UINT32;

constexpr Uint8 MIN_UINT32 = SDL_MIN_UINT32;

constexpr Sint64 MAX_SINT64 = SDL_MAX_SINT64;

constexpr Sint64 MIN_SINT64 = SDL_MIN_SINT64;

constexpr Uint64 MAX_UINT64 = SDL_MAX_UINT64;

constexpr Uint8 MIN_UINT64 = SDL_MIN_UINT64;

/**
 * SDL times are signed, 64-bit integers representing nanoseconds since the
 * Unix epoch (Jan 1, 1970).
 *
 * They can be converted between POSIX time_t values with Time.ToPosix()
 * and Time.FromPosix(), and between Windows FILETIME values with
 * Time.ToWindows() and Time.FromWindows().
 *
 * @since This type is available since SDL 3.2.0.
 *
 * @sa MAX_SINT64
 * @sa MIN_SINT64
 */
class Time
{
  std::chrono::nanoseconds m_value;

public:
  constexpr Time() = default;

  /// Constructs from a nanoseconds period.
  constexpr Time(std::chrono::nanoseconds time)
    : m_value(time)
  {
  }

  /// Constructs from SDL_Time
  constexpr explicit Time(SDL_Time time)
    : m_value(FromNS(time))
  {
  }

  /// True if not zero
  constexpr explicit operator bool() const
  {
    return m_value != std::chrono::nanoseconds{};
  }

  /// Converts to nanoseconds period
  constexpr operator std::chrono::nanoseconds() const { return m_value; }

  static Time Current();

  /// Create from a nanoseconds Sint64.
  static constexpr Time FromNS(Sint64 time)
  {
    return Time{std::chrono::nanoseconds{time}};
  }

  /// Converts to nanoseconds Sint64
  constexpr Sint64 ToNS() const { return m_value.count(); }

  static constexpr Time FromPosix(Sint64 time);

  constexpr Sint64 ToPosix() const;

  static Time FromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);

  void ToWindows(Uint32* dwLowDateTime, Uint32* dwHighDateTime) const;

  /// Increment time
  constexpr Time& operator+=(std::chrono::nanoseconds interval)
  {
    m_value += interval;
    return *this;
  }

  /// Decrement
  constexpr Time& operator-=(std::chrono::nanoseconds interval)
  {
    m_value -= interval;
    return *this;
  }
};

constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);

constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);

#ifdef SDL3PP_DOC

/**
 * Epsilon constant, used for comparing floating-point numbers.
 *
 * Equals by default to platform-defined `FLT_EPSILON`, or
 * `1.1920928955078125e-07F` if that's not available.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_FLT_EPSILON 1.1920928955078125e-07F /* 0x0.000002p0 */

/**
 * A macro to initialize an SDL interface.
 *
 * This macro will initialize an SDL interface structure and should be called
 * before you fill out the fields with your implementation.
 *
 * You can use it like this:
 *
 * ```cpp
 * IOStreamInterface iface;
 *
 * SDL_INIT_INTERFACE(&iface);
 *
 * // Fill in the interface function pointers with your implementation
 * iface.seek = ...
 *
 * stream = IOStreamBase.IOStreamBase(&iface, nullptr);
 * ```
 *
 * If you are using designated initializers, you can use the size of the
 * interface as the version, e.g.
 *
 * ```cpp
 * IOStreamInterface iface = {
 *     .version = sizeof(iface),
 *     .seek = ...
 * };
 * stream = IOStreamBase.IOStreamBase(&iface, nullptr);
 * ```
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa IOStreamInterface
 * @sa StorageInterface
 * @sa VirtualJoystickDesc
 */
#define SDL_INIT_INTERFACE(iface)                                              \
  do {                                                                         \
    SDL_zerop(iface);                                                          \
    (iface)->version = sizeof(*(iface));                                       \
  } while (0)

#endif // SDL3PP_DOC

/**
 * Allocate uninitialized memory.
 *
 * The allocated memory returned by this function must be freed with
 * free().
 *
 * If `size` is 0, it will be set to 1.
 *
 * If the allocation is successful, the returned pointer is guaranteed to be
 * aligned to either the *fundamental alignment* (`alignof(max_align_t)` in
 * C11 and later) or `2 * sizeof(void *)`, whichever is smaller. Use
 * aligned_alloc() if you need to allocate memory aligned to an alignment
 * greater than this guarantee.
 *
 * @param size the size to allocate.
 * @returns a pointer to the allocated memory, or nullptr if allocation failed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa free
 * @sa calloc
 * @sa realloc
 * @sa aligned_alloc
 */
inline void* malloc(size_t size) { return SDL_malloc(size); }

/**
 * Allocate a zero-initialized array.
 *
 * The memory returned by this function must be freed with free().
 *
 * If either of `nmemb` or `size` is 0, they will both be set to 1.
 *
 * If the allocation is successful, the returned pointer is guaranteed to be
 * aligned to either the *fundamental alignment* (`alignof(max_align_t)` in
 * C11 and later) or `2 * sizeof(void *)`, whichever is smaller.
 *
 * @param nmemb the number of elements in the array.
 * @param size the size of each element of the array.
 * @returns a pointer to the allocated array, or nullptr if allocation failed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa free
 * @sa malloc
 * @sa realloc
 */
inline void* calloc(size_t nmemb, size_t size)
{
  return SDL_calloc(nmemb, size);
}

/**
 * Change the size of allocated memory.
 *
 * The memory returned by this function must be freed with free().
 *
 * If `size` is 0, it will be set to 1. Note that this is unlike some other C
 * runtime `realloc` implementations, which may treat `realloc(mem, 0)` the
 * same way as `free(mem)`.
 *
 * If `mem` is nullptr, the behavior of this function is equivalent to
 * malloc(). Otherwise, the function can have one of three possible
 * outcomes:
 *
 * - If it returns the same pointer as `mem`, it means that `mem` was resized
 *   in place without freeing.
 * - If it returns a different non-nullptr pointer, it means that `mem` was
 * freed and cannot be dereferenced anymore.
 * - If it returns nullptr (indicating failure), then `mem` will remain valid
 * and must still be freed with free().
 *
 * If the allocation is successfully resized, the returned pointer is
 * guaranteed to be aligned to either the *fundamental alignment*
 * (`alignof(max_align_t)` in C11 and later) or `2 * sizeof(void *)`,
 * whichever is smaller.
 *
 * @param mem a pointer to allocated memory to reallocate, or nullptr.
 * @param size the new size of the memory.
 * @returns a pointer to the newly allocated memory, or nullptr if allocation
 *          failed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa free
 * @sa malloc
 * @sa calloc
 */
inline void* realloc(void* mem, size_t size) { return SDL_realloc(mem, size); }

/**
 * Free allocated memory.
 *
 * The pointer is no longer valid after this call and cannot be dereferenced
 * anymore.
 *
 * If `mem` is nullptr, this function does nothing.
 *
 * @param mem a pointer to allocated memory, or nullptr.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa malloc
 * @sa calloc
 * @sa realloc
 */
inline void free(void* mem) { SDL_free(mem); }

/**
 * A callback used to implement malloc().
 *
 * SDL will always ensure that the passed `size` is greater than 0.
 *
 * @param size the size to allocate.
 * @returns a pointer to the allocated memory, or nullptr if allocation failed.
 *
 * @threadsafety It should be safe to call this callback from any thread.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa malloc
 * @sa GetOriginalMemoryFunctions
 * @sa GetMemoryFunctions
 * @sa SetMemoryFunctions
 */
using malloc_func = SDL_malloc_func;

/**
 * A callback used to implement calloc().
 *
 * SDL will always ensure that the passed `nmemb` and `size` are both greater
 * than 0.
 *
 * @param nmemb the number of elements in the array.
 * @param size the size of each element of the array.
 * @returns a pointer to the allocated array, or nullptr if allocation failed.
 *
 * @threadsafety It should be safe to call this callback from any thread.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa calloc
 * @sa GetOriginalMemoryFunctions
 * @sa GetMemoryFunctions
 * @sa SetMemoryFunctions
 */
using calloc_func = SDL_calloc_func;

/**
 * A callback used to implement realloc().
 *
 * SDL will always ensure that the passed `size` is greater than 0.
 *
 * @param mem a pointer to allocated memory to reallocate, or nullptr.
 * @param size the new size of the memory.
 * @returns a pointer to the newly allocated memory, or nullptr if allocation
 *          failed.
 *
 * @threadsafety It should be safe to call this callback from any thread.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa realloc
 * @sa GetOriginalMemoryFunctions
 * @sa GetMemoryFunctions
 * @sa SetMemoryFunctions
 */
using realloc_func = SDL_realloc_func;

/**
 * A callback used to implement free().
 *
 * SDL will always ensure that the passed `mem` is a non-nullptr pointer.
 *
 * @param mem a pointer to allocated memory.
 *
 * @threadsafety It should be safe to call this callback from any thread.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa free
 * @sa GetOriginalMemoryFunctions
 * @sa GetMemoryFunctions
 * @sa SetMemoryFunctions
 */
using free_func = SDL_free_func;

/**
 * Get the original set of SDL memory functions.
 *
 * This is what malloc and friends will use by default, if there has been
 * no call to SetMemoryFunctions. This is not necessarily using the C
 * runtime's `malloc` functions behind the scenes! Different platforms and
 * build configurations might do any number of unexpected things.
 *
 * @param malloc_func filled with malloc function.
 * @param calloc_func filled with calloc function.
 * @param realloc_func filled with realloc function.
 * @param free_func filled with free function.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void GetOriginalMemoryFunctions(malloc_func* malloc_func,
                                       calloc_func* calloc_func,
                                       realloc_func* realloc_func,
                                       free_func* free_func)
{
  SDL_GetOriginalMemoryFunctions(
    malloc_func, calloc_func, realloc_func, free_func);
}

/**
 * Get the current set of SDL memory functions.
 *
 * @param malloc_func filled with malloc function.
 * @param calloc_func filled with calloc function.
 * @param realloc_func filled with realloc function.
 * @param free_func filled with free function.
 *
 * @threadsafety This does not hold a lock, so do not call this in the
 *               unlikely event of a background thread calling
 *               SetMemoryFunctions simultaneously.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetMemoryFunctions
 * @sa GetOriginalMemoryFunctions
 */
inline void GetMemoryFunctions(malloc_func* malloc_func,
                               calloc_func* calloc_func,
                               realloc_func* realloc_func,
                               free_func* free_func)
{
  SDL_GetMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func);
}

/**
 * Replace SDL's memory allocation functions with a custom set.
 *
 * It is not safe to call this function once any allocations have been made,
 * as future calls to free will use the new allocator, even if they came
 * from an malloc made with the old one!
 *
 * If used, usually this needs to be the first call made into the SDL library,
 * if not the very first thing done at program startup time.
 *
 * @param malloc_func custom malloc function.
 * @param calloc_func custom calloc function.
 * @param realloc_func custom realloc function.
 * @param free_func custom free function.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread, but one
 *               should not replace the memory functions once any allocations
 *               are made!
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetMemoryFunctions
 * @sa GetOriginalMemoryFunctions
 */
inline bool SetMemoryFunctions(malloc_func malloc_func,
                               calloc_func calloc_func,
                               realloc_func realloc_func,
                               free_func free_func)
{
  return SDL_SetMemoryFunctions(
    malloc_func, calloc_func, realloc_func, free_func);
}

/**
 * Allocate memory aligned to a specific alignment.
 *
 * The memory returned by this function must be freed with aligned_free(),
 * _not_ free().
 *
 * If `alignment` is less than the size of `void *`, it will be increased to
 * match that.
 *
 * The returned memory address will be a multiple of the alignment value, and
 * the size of the memory allocated will be a multiple of the alignment value.
 *
 * @param alignment the alignment of the memory.
 * @param size the size to allocate.
 * @returns a pointer to the aligned memory, or nullptr if allocation failed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa aligned_free
 */
inline void* aligned_alloc(size_t alignment, size_t size)
{
  return SDL_aligned_alloc(alignment, size);
}

/**
 * Free memory allocated by aligned_alloc().
 *
 * The pointer is no longer valid after this call and cannot be dereferenced
 * anymore.
 *
 * If `mem` is nullptr, this function does nothing.
 *
 * @param mem a pointer previously returned by aligned_alloc(), or nullptr.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa aligned_alloc
 */
inline void aligned_free(void* mem) { SDL_aligned_free(mem); }

/**
 * Get the number of outstanding (unfreed) allocations.
 *
 * @returns the number of allocations or -1 if allocation counting is
 *          disabled.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetNumAllocations() { return SDL_GetNumAllocations(); }

/**
 * A thread-safe set of environment variables
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa Environment
 * @sa EnvironmentRef
 * @sa GetEnvironment
 * @sa EnvironmentBase.EnvironmentBase
 * @sa EnvironmentBase.GetVariable
 * @sa EnvironmentBase.GetVariables
 * @sa EnvironmentBase.SetVariable
 * @sa EnvironmentBase.UnsetVariable
 */
struct EnvironmentBase : Resource<SDL_Environment*>
{
  using Resource::Resource;

  /**
   * Create a set of environment variables
   *
   * @param populated true to initialize it from the C runtime environment,
   *                  false to create an empty environment.
   * @post the new environment (convertible to true) on success or convertible
   *       to false on failure; call GetError() for more information.
   *
   * @threadsafety If `populated` is false, it is safe to call this function
   *               from any thread, otherwise it is safe if no other threads are
   *               calling setenv() or unsetenv()
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa EnvironmentBase.GetVariable
   * @sa EnvironmentBase.GetVariables
   * @sa EnvironmentBase.SetVariable
   * @sa EnvironmentBase.UnsetVariable
   */
  EnvironmentBase(bool populated)
    : Resource(SDL_CreateEnvironment(populated))
  {
  }

  /**
   * Get the value of a variable in the environment.
   *
   * @param name the name of the variable to get.
   * @returns a pointer to the value of the variable or nullptr if it can't be
   *          found.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetEnvironment
   * @sa EnvironmentBase.EnvironmentBase
   * @sa EnvironmentBase.GetVariables
   * @sa EnvironmentBase.SetVariable
   * @sa EnvironmentBase.UnsetVariable
   */
  const char* GetVariable(StringParam name)
  {
    return SDL_GetEnvironmentVariable(get(), name);
  }

  /**
   * Get all variables in the environment.
   *
   * @returns a nullptr terminated array of pointers to environment variables in
   *          the form "variable=value" or nullptr on failure; call
   *          SDL_GetError() for more information. This is wrapped to be
   *          auto-deleted, use FreeWrapper.release() if you want to manage
   *          manually.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetEnvironment
   * @sa EnvironmentBase.EnvironmentBase
   * @sa EnvironmentBase.GetVariables
   * @sa EnvironmentBase.SetVariable
   * @sa EnvironmentBase.UnsetVariable
   */
  inline OwnArray<char*> GetVariables()
  {
    return OwnArray<char*>{SDL_GetEnvironmentVariables(get())};
  }

  /**
   * Get the Variables count.
   *
   * @return the number of existing environment variables
   *
   * This might be slow.
   */
  inline Uint64 GetVariableCount()
  {
    Uint64 count = 0;
    for (auto& var : GetVariables()) count += 1;
    return count;
  }

  /**
   * Set the value of a variable in the environment.
   *
   * @param name the name of the variable to set.
   * @param value the value of the variable to set.
   * @param overwrite true to overwrite the variable if it exists, false to
   *                  return success without setting the variable if it already
   *                  exists.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetEnvironment
   * @sa EnvironmentBase.EnvironmentBase
   * @sa EnvironmentBase.GetVariable
   * @sa EnvironmentBase.GetVariables
   * @sa EnvironmentBase.UnsetVariable
   */
  bool SetVariable(StringParam name, StringParam value, bool overwrite)
  {
    return SDL_SetEnvironmentVariable(get(), name, value, overwrite);
  }

  /**
   * Clear a variable from the environment.
   *
   * @param name the name of the variable to unset.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetEnvironment
   * @sa EnvironmentBase.EnvironmentBase
   * @sa EnvironmentBase.GetVariable
   * @sa EnvironmentBase.GetVariables
   * @sa EnvironmentBase.SetVariable
   * @sa EnvironmentBase.UnsetVariable
   */
  bool UnsetVariable(StringParam name)
  {
    return SDL_UnsetEnvironmentVariable(get(), name);
  }
};

/**
 * Handle to a non owned environment
 *
 * @cat resource
 *
 * @sa EnvironmentBase
 * @sa Environment
 */
struct EnvironmentRef : EnvironmentBase
{
  using EnvironmentBase::EnvironmentBase;

  /**
   * Copy constructor.
   */
  constexpr EnvironmentRef(const EnvironmentRef& other)
    : EnvironmentBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr EnvironmentRef(EnvironmentRef&& other)
    : EnvironmentBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~EnvironmentRef() = default;

  /**
   * Assignment operator.
   */
  EnvironmentRef& operator=(EnvironmentRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a set of environment variables.
   *
   * This object becomes empty after the call.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the environment is no longer in use.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa EnvironmentBase.EnvironmentBase
   */
  void reset(SDL_Environment* newResource = {})
  {
    SDL_DestroyEnvironment(release(newResource));
  }
};

/**
 * Handle to an owned environment
 *
 * @cat resource
 *
 * @sa EnvironmentBase
 * @sa EnvironmentRef
 */
struct Environment : EnvironmentRef
{
  using EnvironmentRef::EnvironmentRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Environment(SDL_Environment* resource = {})
    : EnvironmentRef(resource)
  {
  }

  constexpr Environment(const Environment& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Environment(Environment&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Environment() { reset(); }

  /**
   * Assignment operator.
   */
  Environment& operator=(Environment other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Get the process environment.
 *
 * This is initialized at application start and is not affected by setenv()
 * and unsetenv() calls after that point. Use EnvironmentBase.SetVariable() and
 * EnvironmentBase.UnsetVariable() if you want to modify this environment, or
 * setenv_unsafe() or unsetenv_unsafe() if you want changes to persist
 * in the C runtime environment after Quit().
 *
 * @returns a pointer to the environment for the process or nullptr on failure;
 *          call GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa EnvironmentBase.GetVariable
 * @sa EnvironmentBase.GetVariables
 * @sa EnvironmentBase.SetVariable
 * @sa EnvironmentBase.UnsetVariable
 */
inline EnvironmentRef GetEnvironment() { return SDL_GetEnvironment(); }

/**
 * Get the value of a variable in the environment.
 *
 * This function uses SDL's cached copy of the environment and is thread-safe.
 *
 * @param name the name of the variable to get.
 * @returns a pointer to the value of the variable or nullptr if it can't be
 *          found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline const char* getenv(StringParam name) { return SDL_getenv(name); }

/**
 * Get the value of a variable in the environment.
 *
 * This function bypasses SDL's cached copy of the environment and is not
 * thread-safe.
 *
 * @param name the name of the variable to get.
 * @returns a pointer to the value of the variable or nullptr if it can't be
 *          found.
 *
 * @threadsafety This function is not thread safe, consider using getenv()
 *               instead.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa getenv
 */
inline const char* getenv_unsafe(StringParam name)
{
  return SDL_getenv_unsafe(name);
}

/**
 * Set the value of a variable in the environment.
 *
 * @param name the name of the variable to set.
 * @param value the value of the variable to set.
 * @param overwrite 1 to overwrite the variable if it exists, 0 to return
 *                  success without setting the variable if it already exists.
 * @returns 0 on success, -1 on error.
 *
 * @threadsafety This function is not thread safe, consider using
 *               EnvironmentBase.SetVariable() instead.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa EnvironmentBase.SetVariable
 */
inline int setenv_unsafe(StringParam name, StringParam value, int overwrite)
{
  return SDL_setenv_unsafe(name, value, overwrite);
}

/**
 * Clear a variable from the environment.
 *
 * @param name the name of the variable to unset.
 * @returns 0 on success, -1 on error.
 *
 * @threadsafety This function is not thread safe, consider using
 *               EnvironmentBase.UnsetVariable() instead.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa EnvironmentBase.UnsetVariable
 */
inline int unsetenv_unsafe(StringParam name)
{
  return SDL_unsetenv_unsafe(name);
}

/**
 * A callback used with SDL sorting and binary search functions.
 *
 * @param a a pointer to the first element being compared.
 * @param b a pointer to the second element being compared.
 * @returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted
 *          before `a`, 0 if they are equal. If two elements are equal, their
 *          order in the sorted array is undefined.
 *
 * @since This callback is available since SDL 3.2.0.
 *
 * @sa bsearch
 * @sa qsort
 */
using CompareCallback = SDL_CompareCallback;

/**
 * Sort an array.
 *
 * For example:
 *
 * ```c
 * typedef struct {
 *     int key;
 *     const char *string;
 * } data;
 *
 * int SDLCALL compare(const void *a, const void *b)
 * {
 *     const data *A = (const data *)a;
 *     const data *B = (const data *)b;
 *
 *     if (A->n < B->n) {
 *         return -1;
 *     } else if (B->n < A->n) {
 *         return 1;
 *     } else {
 *         return 0;
 *     }
 * }
 *
 * data values[] = {
 *     { 3, "third" }, { 1, "first" }, { 2, "second" }
 * };
 *
 * qsort(values, arraysize(values), sizeof(values[0]), compare);
 * ```
 *
 * @param base a pointer to the start of the array.
 * @param nmemb the number of elements in the array.
 * @param size the size of the elements in the array.
 * @param compare a function used to compare elements in the array.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa bsearch
 * @sa qsort_r
 */
inline void qsort(void* base,
                  size_t nmemb,
                  size_t size,
                  CompareCallback compare)
{
  SDL_qsort(base, nmemb, size, compare);
}

/**
 * Perform a binary search on a previously sorted array.
 *
 * For example:
 *
 * ```c
 * typedef struct {
 *     int key;
 *     const char *string;
 * } data;
 *
 * int SDLCALL compare(const void *a, const void *b)
 * {
 *     const data *A = (const data *)a;
 *     const data *B = (const data *)b;
 *
 *     if (A->n < B->n) {
 *         return -1;
 *     } else if (B->n < A->n) {
 *         return 1;
 *     } else {
 *         return 0;
 *     }
 * }
 *
 * data values[] = {
 *     { 1, "first" }, { 2, "second" }, { 3, "third" }
 * };
 * data key = { 2, nullptr };
 *
 * data *result = bsearch(&key, values, arraysize(values), sizeof(values[0]),
 * compare);
 * ```
 *
 * @param key a pointer to a key equal to the element being searched for.
 * @param base a pointer to the start of the array.
 * @param nmemb the number of elements in the array.
 * @param size the size of the elements in the array.
 * @param compare a function used to compare elements in the array.
 * @returns a pointer to the matching element in the array, or nullptr if not
 *          found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa bsearch_r
 * @sa qsort
 */
inline void* bsearch(const void* key,
                     const void* base,
                     size_t nmemb,
                     size_t size,
                     CompareCallback compare)
{
  return SDL_bsearch(key, base, nmemb, size, compare);
}

/**
 * A callback used with SDL sorting and binary search functions.
 *
 * @param userdata the `userdata` pointer passed to the sort function.
 * @param a a pointer to the first element being compared.
 * @param b a pointer to the second element being compared.
 * @returns -1 if `a` should be sorted before `b`, 1 if `b` should be sorted
 *          before `a`, 0 if they are equal. If two elements are equal, their
 *          order in the sorted array is undefined.
 *
 * @since This callback is available since SDL 3.2.0.
 *
 * @sa qsort_r
 * @sa bsearch_r
 */
using CompareCallback_r = SDL_CompareCallback_r;

/**
 * Sort an array, passing a userdata pointer to the compare function.
 *
 * For example:
 *
 * ```c
 * typedef enum {
 *     sort_increasing,
 *     sort_decreasing,
 * } sort_method;
 *
 * typedef struct {
 *     int key;
 *     const char *string;
 * } data;
 *
 * int SDLCALL compare(const void *userdata, const void *a, const void *b)
 * {
 *     sort_method method = (sort_method)(uintptr_t)userdata;
 *     const data *A = (const data *)a;
 *     const data *B = (const data *)b;
 *
 *     if (A->key < B->key) {
 *         return (method == sort_increasing) ? -1 : 1;
 *     } else if (B->key < A->key) {
 *         return (method == sort_increasing) ? 1 : -1;
 *     } else {
 *         return 0;
 *     }
 * }
 *
 * data values[] = {
 *     { 3, "third" }, { 1, "first" }, { 2, "second" }
 * };
 *
 * qsort_r(values, arraysize(values), sizeof(values[0]), compare, (const void
 * *)(uintptr_t)sort_increasing);
 * ```
 *
 * @param base a pointer to the start of the array.
 * @param nmemb the number of elements in the array.
 * @param size the size of the elements in the array.
 * @param compare a function used to compare elements in the array.
 * @param userdata a pointer to pass to the compare function.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa bsearch_r
 * @sa qsort
 */
inline void qsort_r(void* base,
                    size_t nmemb,
                    size_t size,
                    CompareCallback_r compare,
                    void* userdata)
{
  SDL_qsort_r(base, nmemb, size, compare, userdata);
}

/**
 * Perform a binary search on a previously sorted array, passing a userdata
 * pointer to the compare function.
 *
 * For example:
 *
 * ```c
 * typedef enum {
 *     sort_increasing,
 *     sort_decreasing,
 * } sort_method;
 *
 * typedef struct {
 *     int key;
 *     const char *string;
 * } data;
 *
 * int SDLCALL compare(const void *userdata, const void *a, const void *b)
 * {
 *     sort_method method = (sort_method)(uintptr_t)userdata;
 *     const data *A = (const data *)a;
 *     const data *B = (const data *)b;
 *
 *     if (A->key < B->key) {
 *         return (method == sort_increasing) ? -1 : 1;
 *     } else if (B->key < A->key) {
 *         return (method == sort_increasing) ? 1 : -1;
 *     } else {
 *         return 0;
 *     }
 * }
 *
 * data values[] = {
 *     { 1, "first" }, { 2, "second" }, { 3, "third" }
 * };
 * data key = { 2, nullptr };
 *
 * data *result = bsearch_r(&key, values, arraysize(values), sizeof(values[0]),
 * compare, (const void *)(uintptr_t)sort_increasing);
 * ```
 *
 * @param key a pointer to a key equal to the element being searched for.
 * @param base a pointer to the start of the array.
 * @param nmemb the number of elements in the array.
 * @param size the size of the elements in the array.
 * @param compare a function used to compare elements in the array.
 * @param userdata a pointer to pass to the compare function.
 * @returns a pointer to the matching element in the array, or nullptr if not
 *          found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa bsearch
 * @sa qsort_r
 */
inline void* bsearch_r(const void* key,
                       const void* base,
                       size_t nmemb,
                       size_t size,
                       CompareCallback_r compare,
                       void* userdata)
{
  return SDL_bsearch_r(key, base, nmemb, size, compare, userdata);
}

/**
 * Compute the absolute value of `x`.
 *
 * @param x an integer value.
 * @returns the absolute value of x.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int abs(int x) { return SDL_abs(x); }

/**
 * Return the lesser of two values.
 *
 * This is a helper macro that might be more clear than writing out the
 * comparisons directly, and works with any type that can be compared with the
 * `<` operator. However, it double-evaluates both its parameters, so do not
 * use expressions with side-effects here.
 *
 * @param x the first value to compare.
 * @param y the second value to compare.
 * @returns the lesser of `x` and `y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
template<class T, class U>
constexpr T min(T x, U y)
{
  return SDL_min(x, y);
}

/**
 * Return the greater of two values.
 *
 * This is a helper function that might be more clear than writing out the
 * comparisons directly, and works with any type that can be compared with the
 * `>` operator. However, it double-evaluates both its parameters, so do not
 * use expressions with side-effects here.
 *
 * @param x the first value to compare.
 * @param y the second value to compare.
 * @returns the lesser of `x` and `y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
template<class T, class U>
constexpr T max(T x, U y)
{
  return SDL_max(x, y);
}

/**
 * Return a value clamped to a range.
 *
 * If `x` is outside the range a values between `a` and `b`, the returned
 * value will be `a` or `b` as appropriate. Otherwise, `x` is returned.
 *
 * This function will produce incorrect results if `b` is less than `a`.
 *
 * This is a helper function that might be more clear than writing out the
 * comparisons directly, and works with any type that can be compared with the
 * `<` and `>` operators. However, it double-evaluates all its parameters, so
 * do not use expressions with side-effects here.
 *
 * @param x the value to compare.
 * @param a the low end value.
 * @param b the high end value.
 * @returns x, clamped between a and b.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
template<class T, class U, class V>
constexpr T clamp(T x, U a, V b)
{
  return SDL_clamp(x, a, b);
}

/**
 * Query if a character is alphabetic (a letter).
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * for English 'a-z' and 'A-Z' as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isalpha(int x) { return SDL_isalpha(x); }

/**
 * Query if a character is alphabetic (a letter) or a number.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * for English 'a-z', 'A-Z', and '0-9' as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isalnum(int x) { return SDL_isalnum(x); }

/**
 * Report if a character is blank (a space or tab).
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * 0x20 (space) or 0x9 (tab) as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isblank(int x) { return SDL_isblank(x); }

/**
 * Report if a character is a control character.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * 0 through 0x1F, and 0x7F, as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int iscntrl(int x) { return SDL_iscntrl(x); }

/**
 * Report if a character is a numeric digit.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * '0' (0x30) through '9' (0x39), as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isdigit(int x) { return SDL_isdigit(x); }

/**
 * Report if a character is a hexadecimal digit.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * 'A' through 'F', 'a' through 'f', and '0' through '9', as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isxdigit(int x) { return SDL_isxdigit(x); }

/**
 * Report if a character is a punctuation mark.
 *
 * **WARNING**: Regardless of system locale, this is equivalent to
 * `((isgraph(x)) && (!isalnum(x)))`.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa isgraph
 * @sa isalnum
 */
inline int ispunct(int x) { return SDL_ispunct(x); }

/**
 * Report if a character is whitespace.
 *
 * **WARNING**: Regardless of system locale, this will only treat the
 * following ASCII values as true:
 *
 * - space (0x20)
 * - tab (0x09)
 * - newline (0x0A)
 * - vertical tab (0x0B)
 * - form feed (0x0C)
 * - return (0x0D)
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isspace(int x) { return SDL_isspace(x); }

/**
 * Report if a character is upper case.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * 'A' through 'Z' as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isupper(int x) { return SDL_isupper(x); }

/**
 * Report if a character is lower case.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * 'a' through 'z' as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int islower(int x) { return SDL_islower(x); }

/**
 * Report if a character is "printable".
 *
 * Be advised that "printable" has a definition that goes back to text
 * terminals from the dawn of computing, making this a sort of special case
 * function that is not suitable for Unicode (or most any) text management.
 *
 * **WARNING**: Regardless of system locale, this will only treat ASCII values
 * ' ' (0x20) through '~' (0x7E) as true.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int isprint(int x) { return SDL_isprint(x); }

/**
 * Report if a character is any "printable" except space.
 *
 * Be advised that "printable" has a definition that goes back to text
 * terminals from the dawn of computing, making this a sort of special case
 * function that is not suitable for Unicode (or most any) text management.
 *
 * **WARNING**: Regardless of system locale, this is equivalent to
 * `(isprint(x)) && ((x) != ' ')`.
 *
 * @param x character value to check.
 * @returns non-zero if x falls within the character class, zero otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa isprint
 */
inline int isgraph(int x) { return SDL_isgraph(x); }

/**
 * Convert low-ASCII English letters to uppercase.
 *
 * **WARNING**: Regardless of system locale, this will only convert ASCII
 * values 'a' through 'z' to uppercase.
 *
 * This function returns the uppercase equivalent of `x`. If a character
 * cannot be converted, or is already uppercase, this function returns `x`.
 *
 * @param x character value to check.
 * @returns capitalized version of x, or x if no conversion available.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int toupper(int x) { return SDL_toupper(x); }

/**
 * Convert low-ASCII English letters to lowercase.
 *
 * **WARNING**: Regardless of system locale, this will only convert ASCII
 * values 'A' through 'Z' to lowercase.
 *
 * This function returns the lowercase equivalent of `x`. If a character
 * cannot be converted, or is already lowercase, this function returns `x`.
 *
 * @param x character value to check.
 * @returns lowercase version of x, or x if no conversion available.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int tolower(int x) { return SDL_tolower(x); }

/**
 * Calculate a CRC-16 value.
 *
 * https://en.wikipedia.org/wiki/Cyclic_redundancy_check
 *
 * This function can be called multiple times, to stream data to be
 * checksummed in blocks. Each call must provide the previous CRC-16 return
 * value to be updated with the next block. The first call to this function
 * for a set of blocks should pass in a zero CRC value.
 *
 * @param crc the current checksum for this data set, or 0 for a new data set.
 * @param data a new block of data to add to the checksum.
 * @param len the size, in bytes, of the new block of data.
 * @returns a CRC-16 checksum value of all blocks in the data set.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Uint16 crc16(Uint16 crc, const void* data, size_t len)
{
  return SDL_crc16(crc, data, len);
}

/**
 * Calculate a CRC-32 value.
 *
 * https://en.wikipedia.org/wiki/Cyclic_redundancy_check
 *
 * This function can be called multiple times, to stream data to be
 * checksummed in blocks. Each call must provide the previous CRC-32 return
 * value to be updated with the next block. The first call to this function
 * for a set of blocks should pass in a zero CRC value.
 *
 * @param crc the current checksum for this data set, or 0 for a new data set.
 * @param data a new block of data to add to the checksum.
 * @param len the size, in bytes, of the new block of data.
 * @returns a CRC-32 checksum value of all blocks in the data set.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Uint32 crc32(Uint32 crc, const void* data, size_t len)
{
  return SDL_crc32(crc, data, len);
}

/**
 * Calculate a 32-bit MurmurHash3 value for a block of data.
 *
 * https://en.wikipedia.org/wiki/MurmurHash
 *
 * A seed may be specified, which changes the final results consistently, but
 * this does not work like crc16 and crc32: you can't feed a previous
 * result from this function back into itself as the next seed value to
 * calculate a hash in chunks; it won't produce the same hash as it would if
 * the same data was provided in a single call.
 *
 * If you aren't sure what to provide for a seed, zero is fine. Murmur3 is not
 * cryptographically secure, so it shouldn't be used for hashing top-secret
 * data.
 *
 * @param data the data to be hashed.
 * @param len the size of data, in bytes.
 * @param seed a value that alters the final hash value.
 * @returns a Murmur3 32-bit hash value.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Uint32 murmur3_32(const void* data, size_t len, Uint32 seed)
{
  return SDL_murmur3_32(data, len, seed);
}

/**
 * Copy non-overlapping memory.
 *
 * The memory regions must not overlap. If they do, use memmove() instead.
 *
 * @param dst The destination memory region. Must not be nullptr, and must not
 *            overlap with `src`.
 * @param src The source memory region. Must not be nullptr, and must not
 * overlap with `dst`.
 * @param len The length in bytes of both `dst` and `src`.
 * @returns `dst`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa memmove
 */
inline void* memcpy(void* dst, const void* src, size_t len)
{
  return SDL_memcpy(dst, src, len);
}

#ifdef SDL3PP_DOC

/**
 * A macro to copy memory between objects, with basic type checking.
 *
 * memcpy and memmove do not care where you copy memory to and from,
 * which can lead to bugs. This macro aims to avoid most of those bugs by
 * making sure that the source and destination are both pointers to objects
 * that are the same size. It does not check that the objects are the same
 * _type_, just that the copy will not overflow either object.
 *
 * The size check happens at compile time, and the compiler will throw an
 * error if the objects are different sizes.
 *
 * Generally this is intended to copy a single object, not an array.
 *
 * This macro looks like it double-evaluates its parameters, but the extras
 * them are in `sizeof` sections, which generate no code nor side-effects.
 *
 * @param dst a pointer to the destination object. Must not be nullptr.
 * @param src a pointer to the source object. Must not be nullptr.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
#define SDL_copyp(dst, src)                                                    \
  {                                                                            \
    SDL_COMPILE_TIME_ASSERT(SDL_copyp, sizeof(*(dst)) == sizeof(*(src)));      \
  }                                                                            \
  SDL_memcpy((dst), (src), sizeof(*(src)))

#endif // SDL3PP_DOC

/**
 * Copy memory ranges that might overlap.
 *
 * It is okay for the memory regions to overlap. If you are confident that the
 * regions never overlap, using memcpy() may improve performance.
 *
 * @param dst The destination memory region. Must not be nullptr.
 * @param src The source memory region. Must not be nullptr.
 * @param len The length in bytes of both `dst` and `src`.
 * @returns `dst`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa memcpy
 */
inline void* memmove(void* dst, const void* src, size_t len)
{
  return SDL_memmove(dst, src, len);
}

/**
 * Initialize all bytes of buffer of memory to a specific value.
 *
 * This function will set `len` bytes, pointed to by `dst`, to the value
 * specified in `c`.
 *
 * Despite `c` being an `int` instead of a `char`, this only operates on
 * bytes; `c` must be a value between 0 and 255, inclusive.
 *
 * @param dst the destination memory region. Must not be nullptr.
 * @param c the byte value to set.
 * @param len the length, in bytes, to set in `dst`.
 * @returns `dst`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void* memset(void* dst, int c, size_t len)
{
  return SDL_memset(dst, c, len);
}

/**
 * Initialize all 32-bit words of buffer of memory to a specific value.
 *
 * This function will set a buffer of `dwords` Uint32 values, pointed to by
 * `dst`, to the value specified in `val`.
 *
 * Unlike memset, this sets 32-bit values, not bytes, so it's not limited
 * to a range of 0-255.
 *
 * @param dst the destination memory region. Must not be nullptr.
 * @param val the Uint32 value to set.
 * @param dwords the number of Uint32 values to set in `dst`.
 * @returns `dst`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void* memset4(void* dst, Uint32 val, size_t dwords)
{
  return SDL_memset4(dst, val, dwords);
}

/**
 * Clear an object's memory to zero.
 *
 * This is wrapper over memset that handles calculating the object size,
 * so there's no chance of copy/paste errors, and the code is cleaner.
 *
 * This requires an object, not a pointer to an object, nor an array.
 *
 * @param x the object to clear.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa zerop
 * @sa zeroa
 */
template<class T>
inline void zero(T& x)
{
  SDL_zero(x);
}

/**
 * Clear an object's memory to zero, using a pointer.
 *
 * This is wrapper over memset that handles calculating the object size,
 * so there's no chance of copy/paste errors, and the code is cleaner.
 *
 * This requires a pointer to an object, not an object itself, nor an array.
 *
 * @param x a pointer to the object to clear.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa zero
 * @sa zeroa
 */
template<class T>
inline void zerop(T* x)
{
  SDL_zerop(x);
}

/**
 * Clear an array's memory to zero.
 *
 * This is wrapper over memset that handles calculating the array size, so
 * there's no chance of copy/paste errors, and the code is cleaner.
 *
 * This requires an array, not an object, nor a pointer to an object.
 *
 * @param x an array to clear.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa zero
 * @sa zeroa
 */
template<class T, std::size_t N>
inline void zeroa(T (&x)[N])
{
  SDL_zeroa(x);
}

/**
 * Compare two buffers of memory.
 *
 * @param s1 the first buffer to compare. nullptr is not permitted!
 * @param s2 the second buffer to compare. nullptr is not permitted!
 * @param len the number of bytes to compare between the buffers.
 * @returns less than zero if s1 is "less than" s2, greater than zero if s1 is
 *          "greater than" s2, and zero if the buffers match exactly for `len`
 *          bytes.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int memcmp(const void* s1, const void* s2, size_t len)
{
  return SDL_memcmp(s1, s2, len);
}

/**
 * This works exactly like wcslen() but doesn't require access to a C runtime.
 *
 * Counts the number of wchar_t values in `wstr`, excluding the null
 * terminator.
 *
 * Like strlen only counts bytes and not codepoints in a UTF-8 string,
 * this counts wchar_t values in a string, even if the string's encoding is of
 * variable width, like UTF-16.
 *
 * Also be aware that wchar_t is different sizes on different platforms (4
 * bytes on Linux, 2 on Windows, etc).
 *
 * @param wstr The null-terminated wide string to read. Must not be nullptr.
 * @returns the length (in wchar_t values, excluding the null terminator) of
 *          `wstr`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa wcsnlen
 * @sa utf8strlen
 * @sa utf8strnlen
 */
inline size_t wcslen(const wchar_t* wstr) { return SDL_wcslen(wstr); }

/**
 * This works exactly like wcsnlen() but doesn't require access to a C
 * runtime.
 *
 * Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the
 * null terminator.
 *
 * Like strnlen only counts bytes and not codepoints in a UTF-8 string,
 * this counts wchar_t values in a string, even if the string's encoding is of
 * variable width, like UTF-16.
 *
 * Also be aware that wchar_t is different sizes on different platforms (4
 * bytes on Linux, 2 on Windows, etc).
 *
 * Also, `maxlen` is a count of wide characters, not bytes!
 *
 * @param wstr The null-terminated wide string to read. Must not be nullptr.
 * @param maxlen The maximum amount of wide characters to count.
 * @returns the length (in wide characters, excluding the null terminator) of
 *          `wstr` but never more than `maxlen`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa wcslen
 * @sa utf8strlen
 * @sa utf8strnlen
 */
inline size_t wcsnlen(const wchar_t* wstr, size_t maxlen)
{
  return SDL_wcsnlen(wstr, maxlen);
}

/**
 * Copy a wide string.
 *
 * This function copies `maxlen` - 1 wide characters from `src` to `dst`, then
 * appends a null terminator.
 *
 * `src` and `dst` must not overlap.
 *
 * If `maxlen` is 0, no wide characters are copied and no null terminator is
 * written.
 *
 * @param dst The destination buffer. Must not be nullptr, and must not overlap
 *            with `src`.
 * @param src The null-terminated wide string to copy. Must not be nullptr, and
 *            must not overlap with `dst`.
 * @param maxlen The length (in wide characters) of the destination buffer.
 * @returns the length (in wide characters, excluding the null terminator) of
 *          `src`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa wcslcat
 */
inline size_t wcslcpy(wchar_t* dst, const wchar_t* src, size_t maxlen)
{
  return SDL_wcslcpy(dst, src, maxlen);
}

/**
 * Concatenate wide strings.
 *
 * This function appends up to `maxlen` - wcslen(dst) - 1 wide characters
 * from `src` to the end of the wide string in `dst`, then appends a null
 * terminator.
 *
 * `src` and `dst` must not overlap.
 *
 * If `maxlen` - wcslen(dst) - 1 is less than or equal to 0, then `dst` is
 * unmodified.
 *
 * @param dst The destination buffer already containing the first
 *            null-terminated wide string. Must not be nullptr and must not
 *            overlap with `src`.
 * @param src The second null-terminated wide string. Must not be nullptr, and
 *            must not overlap with `dst`.
 * @param maxlen The length (in wide characters) of the destination buffer.
 * @returns the length (in wide characters, excluding the null terminator) of
 *          the string in `dst` plus the length of `src`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa wcslcpy
 */
inline size_t wcslcat(wchar_t* dst, const wchar_t* src, size_t maxlen)
{
  return SDL_wcslcat(dst, src, maxlen);
}

/**
 * Allocate a copy of a wide string.
 *
 * This allocates enough space for a null-terminated copy of `wstr`, using
 * malloc, and then makes a copy of the string into this space.
 *
 * The returned string is owned by the caller, and should be passed to
 * free when no longer needed.
 *
 * @param wstr the string to copy.
 * @returns a pointer to the newly-allocated wide string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline wchar_t* wcsdup(const wchar_t* wstr) { return SDL_wcsdup(wstr); }

/**
 * Search a wide string for the first instance of a specific substring.
 *
 * The search ends once it finds the requested substring, or a null terminator
 * byte to end the string.
 *
 * Note that this looks for strings of _wide characters_, not _codepoints_, so
 * it's legal to search for malformed and incomplete UTF-16 sequences.
 *
 * @param haystack the wide string to search. Must not be nullptr.
 * @param needle the wide string to search for. Must not be nullptr.
 * @returns a pointer to the first instance of `needle` in the string, or
 * nullptr if not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline wchar_t* wcsstr(const wchar_t* haystack, const wchar_t* needle)
{
  return SDL_wcsstr(haystack, needle);
}

/**
 * Search a wide string, up to n wide chars, for the first instance of a
 * specific substring.
 *
 * The search ends once it finds the requested substring, or a null terminator
 * value to end the string, or `maxlen` wide character have been examined. It
 * is possible to use this function on a wide string without a null
 * terminator.
 *
 * Note that this looks for strings of _wide characters_, not _codepoints_, so
 * it's legal to search for malformed and incomplete UTF-16 sequences.
 *
 * @param haystack the wide string to search. Must not be nullptr.
 * @param needle the wide string to search for. Must not be nullptr.
 * @param maxlen the maximum number of wide characters to search in
 *               `haystack`.
 * @returns a pointer to the first instance of `needle` in the string, or
 * nullptr if not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline wchar_t* wcsnstr(const wchar_t* haystack,
                        const wchar_t* needle,
                        size_t maxlen)
{
  return SDL_wcsnstr(haystack, needle, maxlen);
}

/**
 * Compare two null-terminated wide strings.
 *
 * This only compares wchar_t values until it hits a null-terminating
 * character; it does not care if the string is well-formed UTF-16 (or UTF-32,
 * depending on your platform's wchar_t size), or uses valid Unicode values.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int wcscmp(const wchar_t* str1, const wchar_t* str2)
{
  return SDL_wcscmp(str1, str2);
}

/**
 * Compare two wide strings up to a number of wchar_t values.
 *
 * This only compares wchar_t values; it does not care if the string is
 * well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),
 * or uses valid Unicode values.
 *
 * Note that while this function is intended to be used with UTF-16 (or
 * UTF-32, depending on your platform's definition of wchar_t), it is
 * comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies
 * a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16
 * sequence, it will only compare a portion of the final character.
 *
 * `maxlen` specifies a maximum number of wchar_t to compare; if the strings
 * match to this number of wide chars (or both have matched to a
 * null-terminator character before this count), they will be considered
 * equal.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @param maxlen the maximum number of wchar_t to compare.
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int wcsncmp(const wchar_t* str1, const wchar_t* str2, size_t maxlen)
{
  return SDL_wcsncmp(str1, str2, maxlen);
}

/**
 * Compare two null-terminated wide strings, case-insensitively.
 *
 * This will work with Unicode strings, using a technique called
 * "case-folding" to handle the vast majority of case-sensitive human
 * languages regardless of system locale. It can deal with expanding values: a
 * German Eszett character can compare against two ASCII 's' chars and be
 * considered a match, for example. A notable exception: it does not handle
 * the Turkish 'i' character; human language is complicated!
 *
 * Depending on your platform, "wchar_t" might be 2 bytes, and expected to be
 * UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this
 * handles Unicode, it expects the string to be well-formed and not a
 * null-terminated string of arbitrary bytes. Characters that are not valid
 * UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), which is to say two strings of random bits may turn out to
 * match if they convert to the same amount of replacement characters.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int wcscasecmp(const wchar_t* str1, const wchar_t* str2)
{
  return SDL_wcscasecmp(str1, str2);
}

/**
 * Compare two wide strings, case-insensitively, up to a number of wchar_t.
 *
 * This will work with Unicode strings, using a technique called
 * "case-folding" to handle the vast majority of case-sensitive human
 * languages regardless of system locale. It can deal with expanding values: a
 * German Eszett character can compare against two ASCII 's' chars and be
 * considered a match, for example. A notable exception: it does not handle
 * the Turkish 'i' character; human language is complicated!
 *
 * Depending on your platform, "wchar_t" might be 2 bytes, and expected to be
 * UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this
 * handles Unicode, it expects the string to be well-formed and not a
 * null-terminated string of arbitrary bytes. Characters that are not valid
 * UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), which is to say two strings of random bits may turn out to
 * match if they convert to the same amount of replacement characters.
 *
 * Note that while this function might deal with variable-sized characters,
 * `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a
 * multi-byte UTF-16 sequence, it may convert a portion of the final character
 * to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not
 * to overflow a buffer.
 *
 * `maxlen` specifies a maximum number of wchar_t values to compare; if the
 * strings match to this number of wchar_t (or both have matched to a
 * null-terminator character before this number of bytes), they will be
 * considered equal.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @param maxlen the maximum number of wchar_t values to compare.
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int wcsncasecmp(const wchar_t* str1, const wchar_t* str2, size_t maxlen)
{
  return SDL_wcsncasecmp(str1, str2, maxlen);
}

/**
 * Parse a `long` from a wide string.
 *
 * If `str` starts with whitespace, then those whitespace characters are
 * skipped before attempting to parse the number.
 *
 * If the parsed number does not fit inside a `long`, the result is clamped to
 * the minimum and maximum representable `long` values.
 *
 * @param str The null-terminated wide string to read. Must not be nullptr.
 * @param endp If not nullptr, the address of the first invalid wide character
 *             (i.e. the next character after the parsed number) will be
 *             written to this pointer.
 * @param base The base of the integer to read. Supported values are 0 and 2
 *             to 36 inclusive. If 0, the base will be inferred from the
 *             number's prefix (0x for hexadecimal, 0 for octal, decimal
 *             otherwise).
 * @returns the parsed `long`, or 0 if no number could be parsed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strtol
 */
inline long wcstol(const wchar_t* str, wchar_t** endp, int base)
{
  return SDL_wcstol(str, endp, base);
}

/**
 * This works exactly like strlen() but doesn't require access to a C runtime.
 *
 * Counts the bytes in `str`, excluding the null terminator.
 *
 * If you need the length of a UTF-8 string, consider using utf8strlen().
 *
 * @param str The null-terminated string to read. Must not be nullptr.
 * @returns the length (in bytes, excluding the null terminator) of `src`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strnlen
 * @sa utf8strlen
 * @sa utf8strnlen
 */
inline size_t strlen(StringParam str) { return SDL_strlen(str); }

/**
 * This works exactly like strnlen() but doesn't require access to a C
 * runtime.
 *
 * Counts up to a maximum of `maxlen` bytes in `str`, excluding the null
 * terminator.
 *
 * If you need the length of a UTF-8 string, consider using utf8strnlen().
 *
 * @param str The null-terminated string to read. Must not be nullptr.
 * @param maxlen The maximum amount of bytes to count.
 * @returns the length (in bytes, excluding the null terminator) of `src` but
 *          never more than `maxlen`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strlen
 * @sa utf8strlen
 * @sa utf8strnlen
 */
inline size_t strnlen(StringParam str, size_t maxlen)
{
  return SDL_strnlen(str, maxlen);
}

/**
 * Copy a string.
 *
 * This function copies up to `maxlen` - 1 characters from `src` to `dst`,
 * then appends a null terminator.
 *
 * If `maxlen` is 0, no characters are copied and no null terminator is
 * written.
 *
 * If you want to copy an UTF-8 string but need to ensure that multi-byte
 * sequences are not truncated, consider using utf8strlcpy().
 *
 * @param dst The destination buffer. Must not be nullptr, and must not overlap
 *            with `src`.
 * @param src The null-terminated string to copy. Must not be nullptr, and must
 *            not overlap with `dst`.
 * @param maxlen The length (in characters) of the destination buffer.
 * @returns the length (in characters, excluding the null terminator) of
 *          `src`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strlcat
 * @sa utf8strlcpy
 */
inline size_t strlcpy(char* dst, StringParam src, size_t maxlen)
{
  return SDL_strlcpy(dst, src, maxlen);
}

/**
 * Copy an UTF-8 string.
 *
 * This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while
 * also ensuring that the string written to `dst` does not end in a truncated
 * multi-byte sequence. Finally, it appends a null terminator.
 *
 * `src` and `dst` must not overlap.
 *
 * Note that unlike strlcpy(), this function returns the number of bytes
 * written, not the length of `src`.
 *
 * @param dst The destination buffer. Must not be nullptr, and must not overlap
 *            with `src`.
 * @param src The null-terminated UTF-8 string to copy. Must not be nullptr, and
 *            must not overlap with `dst`.
 * @param dst_bytes The length (in bytes) of the destination buffer. Must not
 *                  be 0.
 * @returns the number of bytes written, excluding the null terminator.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strlcpy
 */
inline size_t utf8strlcpy(char* dst, StringParam src, size_t dst_bytes)
{
  return SDL_utf8strlcpy(dst, src, dst_bytes);
}

/**
 * Concatenate strings.
 *
 * This function appends up to `maxlen` - strlen(dst) - 1 characters from
 * `src` to the end of the string in `dst`, then appends a null terminator.
 *
 * `src` and `dst` must not overlap.
 *
 * If `maxlen` - strlen(dst) - 1 is less than or equal to 0, then `dst` is
 * unmodified.
 *
 * @param dst The destination buffer already containing the first
 *            null-terminated string. Must not be nullptr and must not overlap
 *            with `src`.
 * @param src The second null-terminated string. Must not be nullptr, and must
 *            not overlap with `dst`.
 * @param maxlen The length (in characters) of the destination buffer.
 * @returns the length (in characters, excluding the null terminator) of the
 *          string in `dst` plus the length of `src`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strlcpy
 */
inline size_t strlcat(char* dst, StringParam src, size_t maxlen)
{
  return SDL_strlcat(dst, src, maxlen);
}

/**
 * Allocate a copy of a string.
 *
 * This allocates enough space for a null-terminated copy of `str`, using
 * malloc, and then makes a copy of the string into this space.
 *
 * The returned string is owned by the caller, and should be passed to
 * free when no longer needed.
 *
 * @param str the string to copy.
 * @returns a pointer to the newly-allocated string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strdup(StringParam str) { return SDL_strdup(str); }

/**
 * Allocate a copy of a string, up to n characters.
 *
 * This allocates enough space for a null-terminated copy of `str`, up to
 * `maxlen` bytes, using malloc, and then makes a copy of the string into
 * this space.
 *
 * If the string is longer than `maxlen` bytes, the returned string will be
 * `maxlen` bytes long, plus a null-terminator character that isn't included
 * in the count.
 *
 * The returned string is owned by the caller, and should be passed to
 * free when no longer needed.
 *
 * @param str the string to copy.
 * @param maxlen the maximum length of the copied string, not counting the
 *               null-terminator character.
 * @returns a pointer to the newly-allocated string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strndup(StringParam str, size_t maxlen)
{
  return SDL_strndup(str, maxlen);
}

/**
 * Reverse a string's contents.
 *
 * This reverses a null-terminated string in-place. Only the content of the
 * string is reversed; the null-terminator character remains at the end of the
 * reversed string.
 *
 * **WARNING**: This function reverses the _bytes_ of the string, not the
 * codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this
 * will ruin the string data. You should only use this function on strings
 * that are completely comprised of low ASCII characters.
 *
 * @param str the string to reverse.
 * @returns `str`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strrev(char* str) { return SDL_strrev(str); }

/**
 * Convert a string to uppercase.
 *
 * **WARNING**: Regardless of system locale, this will only convert ASCII
 * values 'A' through 'Z' to uppercase.
 *
 * This function operates on a null-terminated string of bytes--even if it is
 * malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their
 * uppercase equivalents in-place, returning the original `str` pointer.
 *
 * @param str the string to convert in-place. Can not be nullptr.
 * @returns the `str` pointer passed into this function.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strlwr
 */
inline char* strupr(char* str) { return SDL_strupr(str); }

/**
 * Convert a string to lowercase.
 *
 * **WARNING**: Regardless of system locale, this will only convert ASCII
 * values 'A' through 'Z' to lowercase.
 *
 * This function operates on a null-terminated string of bytes--even if it is
 * malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their
 * lowercase equivalents in-place, returning the original `str` pointer.
 *
 * @param str the string to convert in-place. Can not be nullptr.
 * @returns the `str` pointer passed into this function.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa strupr
 */
inline char* strlwr(char* str) { return SDL_strlwr(str); }

/**
 * Search a string for the first instance of a specific byte.
 *
 * The search ends once it finds the requested byte value, or a null
 * terminator byte to end the string.
 *
 * Note that this looks for _bytes_, not _characters_, so you cannot match
 * against a Unicode codepoint > 255, regardless of character encoding.
 *
 * @param str the string to search. Must not be nullptr.
 * @param c the byte value to search for.
 * @returns a pointer to the first instance of `c` in the string, or nullptr if
 *          not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strchr(StringParam str, int c) { return SDL_strchr(str, c); }

/**
 * Search a string for the last instance of a specific byte.
 *
 * The search must go until it finds a null terminator byte to end the string.
 *
 * Note that this looks for _bytes_, not _characters_, so you cannot match
 * against a Unicode codepoint > 255, regardless of character encoding.
 *
 * @param str the string to search. Must not be nullptr.
 * @param c the byte value to search for.
 * @returns a pointer to the last instance of `c` in the string, or nullptr if
 *          not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strrchr(StringParam str, int c) { return SDL_strrchr(str, c); }

/**
 * Search a string for the first instance of a specific substring.
 *
 * The search ends once it finds the requested substring, or a null terminator
 * byte to end the string.
 *
 * Note that this looks for strings of _bytes_, not _characters_, so it's
 * legal to search for malformed and incomplete UTF-8 sequences.
 *
 * @param haystack the string to search. Must not be nullptr.
 * @param needle the string to search for. Must not be nullptr.
 * @returns a pointer to the first instance of `needle` in the string, or
 * nullptr if not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strstr(StringParam haystack, StringParam needle)
{
  return SDL_strstr(haystack, needle);
}

/**
 * Search a string, up to n bytes, for the first instance of a specific
 * substring.
 *
 * The search ends once it finds the requested substring, or a null terminator
 * byte to end the string, or `maxlen` bytes have been examined. It is
 * possible to use this function on a string without a null terminator.
 *
 * Note that this looks for strings of _bytes_, not _characters_, so it's
 * legal to search for malformed and incomplete UTF-8 sequences.
 *
 * @param haystack the string to search. Must not be nullptr.
 * @param needle the string to search for. Must not be nullptr.
 * @param maxlen the maximum number of bytes to search in `haystack`.
 * @returns a pointer to the first instance of `needle` in the string, or
 * nullptr if not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strnstr(StringParam haystack, StringParam needle, size_t maxlen)
{
  return SDL_strnstr(haystack, needle, maxlen);
}

/**
 * Search a UTF-8 string for the first instance of a specific substring,
 * case-insensitively.
 *
 * This will work with Unicode strings, using a technique called
 * "case-folding" to handle the vast majority of case-sensitive human
 * languages regardless of system locale. It can deal with expanding values: a
 * German Eszett character can compare against two ASCII 's' chars and be
 * considered a match, for example. A notable exception: it does not handle
 * the Turkish 'i' character; human language is complicated!
 *
 * Since this handles Unicode, it expects the strings to be well-formed UTF-8
 * and not a null-terminated string of arbitrary bytes. Bytes that are not
 * valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), which is to say two strings of random bits may turn out to
 * match if they convert to the same amount of replacement characters.
 *
 * @param haystack the string to search. Must not be nullptr.
 * @param needle the string to search for. Must not be nullptr.
 * @returns a pointer to the first instance of `needle` in the string, or
 * nullptr if not found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strcasestr(StringParam haystack, StringParam needle)
{
  return SDL_strcasestr(haystack, needle);
}

/**
 * This works exactly like strtok_r() but doesn't require access to a C
 * runtime.
 *
 * Break a string up into a series of tokens.
 *
 * To start tokenizing a new string, `str` should be the non-nullptr address of
 * the string to start tokenizing. Future calls to get the next token from the
 * same string should specify a nullptr.
 *
 * Note that this function will overwrite pieces of `str` with null chars to
 * split it into tokens. This function cannot be used with const/read-only
 * strings!
 *
 * `saveptr` just needs to point to a `char *` that can be overwritten; SDL
 * will use this to save tokenizing state between calls. It is initialized if
 * `str` is non-nullptr, and used to resume tokenizing when `str` is nullptr.
 *
 * @param str the string to tokenize, or nullptr to continue tokenizing.
 * @param delim the delimiter string that separates tokens.
 * @param saveptr pointer to a char *, used for ongoing state.
 * @returns A pointer to the next token, or nullptr if no tokens remain.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strtok_r(char* str, StringParam delim, char** saveptr)
{
  return SDL_strtok_r(str, delim, saveptr);
}

/**
 * Count the number of codepoints in a UTF-8 string.
 *
 * Counts the _codepoints_, not _bytes_, in `str`, excluding the null
 * terminator.
 *
 * If you need to count the bytes in a string instead, consider using
 * strlen().
 *
 * Since this handles Unicode, it expects the strings to be well-formed UTF-8
 * and not a null-terminated string of arbitrary bytes. Bytes that are not
 * valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the
 * count by several replacement characters.
 *
 * @param str The null-terminated UTF-8 string to read. Must not be nullptr.
 * @returns The length (in codepoints, excluding the null terminator) of
 *          `src`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa utf8strnlen
 * @sa strlen
 */
inline size_t utf8strlen(StringParam str) { return SDL_utf8strlen(str); }

/**
 * Count the number of codepoints in a UTF-8 string, up to n bytes.
 *
 * Counts the _codepoints_, not _bytes_, in `str`, excluding the null
 * terminator.
 *
 * If you need to count the bytes in a string instead, consider using
 * strnlen().
 *
 * The counting stops at `bytes` bytes (not codepoints!). This seems
 * counterintuitive, but makes it easy to express the total size of the
 * string's buffer.
 *
 * Since this handles Unicode, it expects the strings to be well-formed UTF-8
 * and not a null-terminated string of arbitrary bytes. Bytes that are not
 * valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the
 * count by several replacement characters.
 *
 * @param str The null-terminated UTF-8 string to read. Must not be nullptr.
 * @param bytes The maximum amount of bytes to count.
 * @returns The length (in codepoints, excluding the null terminator) of `src`
 *          but never more than `maxlen`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa utf8strlen
 * @sa strnlen
 */
inline size_t utf8strnlen(StringParam str, size_t bytes)
{
  return SDL_utf8strnlen(str, bytes);
}

/**
 * Convert an integer into a string.
 *
 * This requires a radix to specified for string format. Specifying 10
 * produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
 * to 36.
 *
 * Note that this function will overflow a buffer if `str` is not large enough
 * to hold the output! It may be safer to use snprintf to clamp output, or
 * asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
 * much more space than you expect to use (and don't forget possible negative
 * signs, null terminator bytes, etc).
 *
 * @param value the integer to convert.
 * @param str the buffer to write the string into.
 * @param radix the radix to use for string generation.
 * @returns `str`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa uitoa
 * @sa ltoa
 * @sa SDL_lltoa
 */
inline char* itoa(int value, char* str, int radix)
{
  return SDL_itoa(value, str, radix);
}

/**
 * Convert an unsigned integer into a string.
 *
 * This requires a radix to specified for string format. Specifying 10
 * produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
 * to 36.
 *
 * Note that this function will overflow a buffer if `str` is not large enough
 * to hold the output! It may be safer to use snprintf to clamp output, or
 * asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
 * much more space than you expect to use (and don't forget null terminator
 * bytes, etc).
 *
 * @param value the unsigned integer to convert.
 * @param str the buffer to write the string into.
 * @param radix the radix to use for string generation.
 * @returns `str`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa itoa
 * @sa ultoa
 * @sa SDL_ulltoa
 */
inline char* uitoa(unsigned int value, char* str, int radix)
{
  return SDL_uitoa(value, str, radix);
}

/**
 * Convert a long integer into a string.
 *
 * This requires a radix to specified for string format. Specifying 10
 * produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
 * to 36.
 *
 * Note that this function will overflow a buffer if `str` is not large enough
 * to hold the output! It may be safer to use snprintf to clamp output, or
 * asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
 * much more space than you expect to use (and don't forget possible negative
 * signs, null terminator bytes, etc).
 *
 * @param value the long integer to convert.
 * @param str the buffer to write the string into.
 * @param radix the radix to use for string generation.
 * @returns `str`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ultoa
 * @sa itoa
 * @sa SDL_lltoa
 */
inline char* ltoa(long value, char* str, int radix)
{
  return SDL_ltoa(value, str, radix);
}

/**
 * Convert an unsigned long integer into a string.
 *
 * This requires a radix to specified for string format. Specifying 10
 * produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
 * to 36.
 *
 * Note that this function will overflow a buffer if `str` is not large enough
 * to hold the output! It may be safer to use snprintf to clamp output, or
 * asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
 * much more space than you expect to use (and don't forget null terminator
 * bytes, etc).
 *
 * @param value the unsigned long integer to convert.
 * @param str the buffer to write the string into.
 * @param radix the radix to use for string generation.
 * @returns `str`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ltoa
 * @sa uitoa
 * @sa SDL_ulltoa
 */
inline char* ultoa(unsigned long value, char* str, int radix)
{
  return SDL_ultoa(value, str, radix);
}

/**
 * Parse an `int` from a string.
 *
 * The result of calling `atoi(str)` is equivalent to
 * `(int)strtol(str, nullptr, 10)`.
 *
 * @param str The null-terminated string to read. Must not be nullptr.
 * @returns the parsed `int`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atof
 * @sa strtol
 * @sa strtoul
 * @sa SDL_strtoll
 * @sa SDL_strtoull
 * @sa strtod
 * @sa itoa
 */
inline int atoi(StringParam str) { return SDL_atoi(str); }

/**
 * Parse a `double` from a string.
 *
 * The result of calling `atof(str)` is equivalent to `strtod(str,
 * nullptr)`.
 *
 * @param str The null-terminated string to read. Must not be nullptr.
 * @returns the parsed `double`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atoi
 * @sa strtol
 * @sa strtoul
 * @sa SDL_strtoll
 * @sa SDL_strtoull
 * @sa strtod
 */
inline double atof(StringParam str) { return SDL_atof(str); }

/**
 * Parse a `long` from a string.
 *
 * If `str` starts with whitespace, then those whitespace characters are
 * skipped before attempting to parse the number.
 *
 * If the parsed number does not fit inside a `long`, the result is clamped to
 * the minimum and maximum representable `long` values.
 *
 * @param str The null-terminated string to read. Must not be nullptr.
 * @param endp If not nullptr, the address of the first invalid character (i.e.
 *             the next character after the parsed number) will be written to
 *             this pointer.
 * @param base The base of the integer to read. Supported values are 0 and 2
 *             to 36 inclusive. If 0, the base will be inferred from the
 *             number's prefix (0x for hexadecimal, 0 for octal, decimal
 *             otherwise).
 * @returns the parsed `long`, or 0 if no number could be parsed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atoi
 * @sa atof
 * @sa strtoul
 * @sa SDL_strtoll
 * @sa SDL_strtoull
 * @sa strtod
 * @sa ltoa
 * @sa wcstol
 */
inline long strtol(StringParam str, char** endp, int base)
{
  return SDL_strtol(str, endp, base);
}

/**
 * Parse an `unsigned long` from a string.
 *
 * If `str` starts with whitespace, then those whitespace characters are
 * skipped before attempting to parse the number.
 *
 * If the parsed number does not fit inside an `unsigned long`, the result is
 * clamped to the maximum representable `unsigned long` value.
 *
 * @param str The null-terminated string to read. Must not be nullptr.
 * @param endp If not nullptr, the address of the first invalid character (i.e.
 *             the next character after the parsed number) will be written to
 *             this pointer.
 * @param base The base of the integer to read. Supported values are 0 and 2
 *             to 36 inclusive. If 0, the base will be inferred from the
 *             number's prefix (0x for hexadecimal, 0 for octal, decimal
 *             otherwise).
 * @returns the parsed `unsigned long`, or 0 if no number could be parsed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atoi
 * @sa atof
 * @sa strtol
 * @sa SDL_strtoll
 * @sa SDL_strtoull
 * @sa strtod
 * @sa ultoa
 */
inline unsigned long strtoul(StringParam str, char** endp, int base)
{
  return SDL_strtoul(str, endp, base);
}

/**
 * Parse a `double` from a string.
 *
 * This function makes fewer guarantees than the C runtime `strtod`:
 *
 * - Only decimal notation is guaranteed to be supported. The handling of
 *   scientific and hexadecimal notation is unspecified.
 * - Whether or not INF and NAN can be parsed is unspecified.
 * - The precision of the result is unspecified.
 *
 * @param str the null-terminated string to read. Must not be nullptr.
 * @param endp if not nullptr, the address of the first invalid character (i.e.
 *             the next character after the parsed number) will be written to
 *             this pointer.
 * @returns the parsed `double`, or 0 if no number could be parsed.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atoi
 * @sa atof
 * @sa strtol
 * @sa SDL_strtoll
 * @sa strtoul
 * @sa SDL_strtoull
 */
inline double strtod(StringParam str, char** endp)
{
  return SDL_strtod(str, endp);
}

/**
 * Compare two null-terminated UTF-8 strings.
 *
 * Due to the nature of UTF-8 encoding, this will work with Unicode strings,
 * since effectively this function just compares bytes until it hits a
 * null-terminating character. Also due to the nature of UTF-8, this can be
 * used with qsort() to put strings in (roughly) alphabetical order.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int strcmp(StringParam str1, StringParam str2)
{
  return SDL_strcmp(str1, str2);
}

/**
 * Compare two UTF-8 strings up to a number of bytes.
 *
 * Due to the nature of UTF-8 encoding, this will work with Unicode strings,
 * since effectively this function just compares bytes until it hits a
 * null-terminating character. Also due to the nature of UTF-8, this can be
 * used with qsort() to put strings in (roughly) alphabetical order.
 *
 * Note that while this function is intended to be used with UTF-8, it is
 * doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the
 * limit lands in the middle of a multi-byte UTF-8 sequence, it will only
 * compare a portion of the final character.
 *
 * `maxlen` specifies a maximum number of bytes to compare; if the strings
 * match to this number of bytes (or both have matched to a null-terminator
 * character before this number of bytes), they will be considered equal.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @param maxlen the maximum number of _bytes_ to compare.
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int strncmp(StringParam str1, StringParam str2, size_t maxlen)
{
  return SDL_strncmp(str1, str2, maxlen);
}

/**
 * Compare two null-terminated UTF-8 strings, case-insensitively.
 *
 * This will work with Unicode strings, using a technique called
 * "case-folding" to handle the vast majority of case-sensitive human
 * languages regardless of system locale. It can deal with expanding values: a
 * German Eszett character can compare against two ASCII 's' chars and be
 * considered a match, for example. A notable exception: it does not handle
 * the Turkish 'i' character; human language is complicated!
 *
 * Since this handles Unicode, it expects the string to be well-formed UTF-8
 * and not a null-terminated string of arbitrary bytes. Bytes that are not
 * valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), which is to say two strings of random bits may turn out to
 * match if they convert to the same amount of replacement characters.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int strcasecmp(StringParam str1, StringParam str2)
{
  return SDL_strcasecmp(str1, str2);
}

/**
 * Compare two UTF-8 strings, case-insensitively, up to a number of bytes.
 *
 * This will work with Unicode strings, using a technique called
 * "case-folding" to handle the vast majority of case-sensitive human
 * languages regardless of system locale. It can deal with expanding values: a
 * German Eszett character can compare against two ASCII 's' chars and be
 * considered a match, for example. A notable exception: it does not handle
 * the Turkish 'i' character; human language is complicated!
 *
 * Since this handles Unicode, it expects the string to be well-formed UTF-8
 * and not a null-terminated string of arbitrary bytes. Bytes that are not
 * valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
 * CHARACTER), which is to say two strings of random bits may turn out to
 * match if they convert to the same amount of replacement characters.
 *
 * Note that while this function is intended to be used with UTF-8, `maxlen`
 * specifies a _byte_ limit! If the limit lands in the middle of a multi-byte
 * UTF-8 sequence, it may convert a portion of the final character to one or
 * more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow
 * a buffer.
 *
 * `maxlen` specifies a maximum number of bytes to compare; if the strings
 * match to this number of bytes (or both have matched to a null-terminator
 * character before this number of bytes), they will be considered equal.
 *
 * @param str1 the first string to compare. nullptr is not permitted!
 * @param str2 the second string to compare. nullptr is not permitted!
 * @param maxlen the maximum number of bytes to compare.
 * @returns less than zero if str1 is "less than" str2, greater than zero if
 *          str1 is "greater than" str2, and zero if the strings match
 *          exactly.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int strncasecmp(StringParam str1, StringParam str2, size_t maxlen)
{
  return SDL_strncasecmp(str1, str2, maxlen);
}

/**
 * Searches a string for the first occurence of any character contained in a
 * breakset, and returns a pointer from the string to that character.
 *
 * @param str The null-terminated string to be searched. Must not be nullptr,
 *            and must not overlap with `breakset`.
 * @param breakset A null-terminated string containing the list of characters
 *                 to look for. Must not be nullptr, and must not overlap with
 *                 `str`.
 * @returns A pointer to the location, in str, of the first occurence of a
 *          character present in the breakset, or nullptr if none is found.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* strpbrk(StringParam str, StringParam breakset)
{
  return SDL_strpbrk(str, breakset);
}

/**
 * The Unicode REPLACEMENT CHARACTER codepoint.
 *
 * StepUTF8() and StepBackUTF8() report this codepoint when they
 * encounter a UTF-8 string with encoding errors.
 *
 * This tends to render as something like a question mark in most places.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa StepBackUTF8
 * @sa StepUTF8
 */
constexpr Uint32 INVALID_UNICODE_CODEPOINT = SDL_INVALID_UNICODE_CODEPOINT;

/**
 * Decode a UTF-8 string, one Unicode codepoint at a time.
 *
 * This will return the first Unicode codepoint in the UTF-8 encoded string in
 * `*pstr`, and then advance `*pstr` past any consumed bytes before returning.
 *
 * It will not access more than `*pslen` bytes from the string. `*pslen` will
 * be adjusted, as well, subtracting the number of bytes consumed.
 *
 * `pslen` is allowed to be nullptr, in which case the string _must_ be
 * nullptr-terminated, as the function will blindly read until it sees the
 * nullptr char.
 *
 * if `*pslen` is zero, it assumes the end of string is reached and returns a
 * zero codepoint regardless of the contents of the string buffer.
 *
 * If the resulting codepoint is zero (a nullptr terminator), or `*pslen` is
 * zero, it will not advance `*pstr` or `*pslen` at all.
 *
 * Generally this function is called in a loop until it returns zero,
 * adjusting its parameters each iteration.
 *
 * If an invalid UTF-8 sequence is encountered, this function returns
 * INVALID_UNICODE_CODEPOINT and advances the string/length by one byte
 * (which is to say, a multibyte sequence might produce several
 * INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid
 * UTF-8 sequence).
 *
 * Several things can generate invalid UTF-8 sequences, including overlong
 * encodings, the use of UTF-16 surrogate values, and truncated data. Please
 * refer to
 * [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)
 * for details.
 *
 * @param pstr a pointer to a UTF-8 string pointer to be read and adjusted.
 * @param pslen a pointer to the number of bytes in the string, to be read and
 *              adjusted. nullptr is allowed.
 * @returns the first Unicode codepoint in the string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Uint32 StepUTF8(const char** pstr, size_t* pslen)
{
  return SDL_StepUTF8(pstr, pslen);
}

/**
 * Decode a UTF-8 string in reverse, one Unicode codepoint at a time.
 *
 * This will go to the start of the previous Unicode codepoint in the string,
 * move `*pstr` to that location and return that codepoint.
 *
 * If `*pstr` is already at the start of the string), it will not advance
 * `*pstr` at all.
 *
 * Generally this function is called in a loop until it returns zero,
 * adjusting its parameter each iteration.
 *
 * If an invalid UTF-8 sequence is encountered, this function returns
 * INVALID_UNICODE_CODEPOINT.
 *
 * Several things can generate invalid UTF-8 sequences, including overlong
 * encodings, the use of UTF-16 surrogate values, and truncated data. Please
 * refer to
 * [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)
 * for details.
 *
 * @param start a pointer to the beginning of the UTF-8 string.
 * @param pstr a pointer to a UTF-8 string pointer to be read and adjusted.
 * @returns the previous Unicode codepoint in the string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Uint32 StepBackUTF8(StringParam start, const char** pstr)
{
  return SDL_StepBackUTF8(start, pstr);
}

/**
 * Convert a single Unicode codepoint to UTF-8.
 *
 * The buffer pointed to by `dst` must be at least 4 bytes long, as this
 * function may generate between 1 and 4 bytes of output.
 *
 * This function returns the first byte _after_ the newly-written UTF-8
 * sequence, which is useful for encoding multiple codepoints in a loop, or
 * knowing where to write a nullptr-terminator character to end the string (in
 * either case, plan to have a buffer of _more_ than 4 bytes!).
 *
 * If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16
 * surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the
 * codepoint instead, and not set an error.
 *
 * If `dst` is nullptr, this returns nullptr immediately without writing to the
 * pointer and without setting an error.
 *
 * @param codepoint a Unicode codepoint to convert to UTF-8.
 * @param dst the location to write the encoded UTF-8. Must point to at least
 *            4 bytes!
 * @returns the first byte past the newly-written UTF-8 sequence.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline char* UCS4ToUTF8(Uint32 codepoint, char* dst)
{
  return SDL_UCS4ToUTF8(codepoint, dst);
}

/**
 * This works exactly like sscanf() but doesn't require access to a C runtime.
 *
 * Scan a string, matching a format string, converting each '%' item and
 * storing it to pointers provided through variable arguments.
 *
 * @param text the string to scan. Must not be nullptr.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ... a list of pointers to values to be filled in with scanned items.
 * @returns the number of items that matched the format string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int sscanf(StringParam text,
                  SDL_SCANF_FORMAT_STRING const char* fmt,
                  ...)
{
  int rc;
  va_list ap;
  va_start(ap, fmt);
  rc = SDL_vsscanf(text, fmt, ap);
  va_end(ap);
  return rc;
}

/**
 * This works exactly like vsscanf() but doesn't require access to a C
 * runtime.
 *
 * Functions identically to sscanf(), except it takes a `va_list` instead
 * of using `...` variable arguments.
 *
 * @param text the string to scan. Must not be nullptr.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ap a `va_list` of pointers to values to be filled in with scanned
 *           items.
 * @returns the number of items that matched the format string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int vsscanf(StringParam text,
                   SDL_SCANF_FORMAT_STRING const char* fmt,
                   va_list ap)
{
  return SDL_vsscanf(text, fmt, ap);
}

/**
 * This works exactly like snprintf() but doesn't require access to a C
 * runtime.
 *
 * Format a string of up to `maxlen`-1 bytes, converting each '%' item with
 * values provided through variable arguments.
 *
 * While some C runtimes differ on how to deal with too-large strings, this
 * function null-terminates the output, by treating the null-terminator as
 * part of the `maxlen` count. Note that if `maxlen` is zero, however, no
 * bytes will be written at all.
 *
 * This function returns the number of _bytes_ (not _characters_) that should
 * be written, excluding the null-terminator character. If this returns a
 * number >= `maxlen`, it means the output string was truncated. A negative
 * return value means an error occurred.
 *
 * Referencing the output string's pointer with a format item is undefined
 * behavior.
 *
 * @param text the buffer to write the string into. Must not be nullptr.
 * @param maxlen the maximum bytes to write, including the null-terminator.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ... a list of values to be used with the format string.
 * @returns the number of bytes that should be written, not counting the
 *          null-terminator char, or a negative value on error.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int snprintf(char* text,
                    size_t maxlen,
                    SDL_PRINTF_FORMAT_STRING const char* fmt,
                    ...)
{
  va_list ap;
  int result;

  va_start(ap, fmt);
  result = SDL_vsnprintf(text, maxlen, fmt, ap);
  va_end(ap);

  return result;
}

/**
 * This works exactly like swprintf() but doesn't require access to a C
 * runtime.
 *
 * Format a wide string of up to `maxlen`-1 wchar_t values, converting each
 * '%' item with values provided through variable arguments.
 *
 * While some C runtimes differ on how to deal with too-large strings, this
 * function null-terminates the output, by treating the null-terminator as
 * part of the `maxlen` count. Note that if `maxlen` is zero, however, no wide
 * characters will be written at all.
 *
 * This function returns the number of _wide characters_ (not _codepoints_)
 * that should be written, excluding the null-terminator character. If this
 * returns a number >= `maxlen`, it means the output string was truncated. A
 * negative return value means an error occurred.
 *
 * Referencing the output string's pointer with a format item is undefined
 * behavior.
 *
 * @param text the buffer to write the wide string into. Must not be nullptr.
 * @param maxlen the maximum wchar_t values to write, including the
 *               null-terminator.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ... a list of values to be used with the format string.
 * @returns the number of wide characters that should be written, not counting
 *          the null-terminator char, or a negative value on error.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int swprintf(wchar_t* text,
                    size_t maxlen,
                    SDL_PRINTF_FORMAT_STRING const wchar_t* fmt,
                    ...)
{
  va_list ap;
  int result;

  va_start(ap, fmt);
  result = SDL_vswprintf(text, maxlen, fmt, ap);
  va_end(ap);

  return result;
}

/**
 * This works exactly like vsnprintf() but doesn't require access to a C
 * runtime.
 *
 * Functions identically to snprintf(), except it takes a `va_list`
 * instead of using `...` variable arguments.
 *
 * @param text the buffer to write the string into. Must not be nullptr.
 * @param maxlen the maximum bytes to write, including the null-terminator.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ap a `va_list` values to be used with the format string.
 * @returns the number of bytes that should be written, not counting the
 *          null-terminator char, or a negative value on error.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int vsnprintf(char* text,
                     size_t maxlen,
                     SDL_PRINTF_FORMAT_STRING const char* fmt,
                     va_list ap)
{
  return SDL_vsnprintf(text, maxlen, fmt, ap);
}

/**
 * This works exactly like vswprintf() but doesn't require access to a C
 * runtime.
 *
 * Functions identically to swprintf(), except it takes a `va_list`
 * instead of using `...` variable arguments.
 *
 * @param text the buffer to write the string into. Must not be nullptr.
 * @param maxlen the maximum wide characters to write, including the
 *               null-terminator.
 * @param fmt a printf-style format wide string. Must not be nullptr.
 * @param ap a `va_list` values to be used with the format string.
 * @returns the number of wide characters that should be written, not counting
 *          the null-terminator char, or a negative value on error.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int vswprintf(wchar_t* text,
                     size_t maxlen,
                     SDL_PRINTF_FORMAT_STRING const wchar_t* fmt,
                     va_list ap)
{
  return SDL_vswprintf(text, maxlen, fmt, ap);
}

/**
 * This works exactly like asprintf() but doesn't require access to a C
 * runtime.
 *
 * Functions identically to snprintf(), except it allocates a buffer large
 * enough to hold the output string on behalf of the caller.
 *
 * On success, this function returns the number of bytes (not characters)
 * comprising the output string, not counting the null-terminator character,
 * and sets `*strp` to the newly-allocated string.
 *
 * On error, this function returns a negative number, and the value of `*strp`
 * is undefined.
 *
 * The returned string is owned by the caller, and should be passed to
 * free when no longer needed.
 *
 * @param strp on output, is set to the new string. Must not be nullptr.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ... a list of values to be used with the format string.
 * @returns the number of bytes in the newly-allocated string, not counting
 *          the null-terminator char, or a negative value on error.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int asprintf(char** strp, SDL_PRINTF_FORMAT_STRING const char* fmt, ...)
{
  va_list ap;
  int result;

  va_start(ap, fmt);
  result = SDL_vasprintf(strp, fmt, ap);
  va_end(ap);

  return result;
}

/**
 * This works exactly like vasprintf() but doesn't require access to a C
 * runtime.
 *
 * Functions identically to asprintf(), except it takes a `va_list`
 * instead of using `...` variable arguments.
 *
 * @param strp on output, is set to the new string. Must not be nullptr.
 * @param fmt a printf-style format string. Must not be nullptr.
 * @param ap a `va_list` values to be used with the format string.
 * @returns the number of bytes in the newly-allocated string, not counting
 *          the null-terminator char, or a negative value on error.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int vasprintf(char** strp,
                     SDL_PRINTF_FORMAT_STRING const char* fmt,
                     va_list ap)
{
  return SDL_vasprintf(strp, fmt, ap);
}

/**
 * Seeds the pseudo-random number generator.
 *
 * Reusing the seed number will cause rand() to repeat the same stream of
 * 'random' numbers.
 *
 * @param seed the value to use as a random number seed, or 0 to use
 *             GetPerformanceCounter().
 *
 * @threadsafety This should be called on the same thread that calls
 *               rand()
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa rand
 * @sa rand_bits
 * @sa randf
 */
inline void srand(Uint64 seed) { SDL_srand(seed); }

/**
 * Generate a pseudo-random number less than n for positive n
 *
 * The method used is faster and of better quality than `rand() % n`. Odds are
 * roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and
 * much worse as n gets bigger.
 *
 * Example: to simulate a d6 use `rand(6) + 1` The +1 converts 0..5 to
 * 1..6
 *
 * If you want to generate a pseudo-random number in the full range of Sint32,
 * you should use: (Sint32)rand_bits()
 *
 * If you want reproducible output, be sure to initialize with srand()
 * first.
 *
 * There are no guarantees as to the quality of the random sequence produced,
 * and this should not be used for security (cryptography, passwords) or where
 * money is on the line (loot-boxes, casinos). There are many random number
 * libraries available with different characteristics and you should pick one
 * of those to meet any serious needs.
 *
 * @param n the number of possible outcomes. n must be positive.
 * @returns a random value in the range of [0 .. n-1].
 *
 * @threadsafety All calls should be made from a single thread
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa srand
 * @sa randf
 */
inline Sint32 rand(Sint32 n) { return SDL_rand(n); }

/**
 * Generate a uniform pseudo-random floating point number less than 1.0
 *
 * If you want reproducible output, be sure to initialize with srand() first.
 *
 * There are no guarantees as to the quality of the random sequence produced,
 * and this should not be used for security (cryptography, passwords) or where
 * money is on the line (loot-boxes, casinos). There are many random number
 * libraries available with different characteristics and you should pick one
 * of those to meet any serious needs.
 *
 * @returns a random value in the range of [0.0, 1.0).
 *
 * @threadsafety All calls should be made from a single thread
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa srand
 * @sa rand
 */
inline float randf() { return SDL_randf(); }

/**
 * Generate 32 pseudo-random bits.
 *
 * You likely want to use rand() to get a pseudo-random number instead.
 *
 * There are no guarantees as to the quality of the random sequence produced,
 * and this should not be used for security (cryptography, passwords) or where
 * money is on the line (loot-boxes, casinos). There are many random number
 * libraries available with different characteristics and you should pick one
 * of those to meet any serious needs.
 *
 * @returns a random value in the range of [0-MAX_UINT32].
 *
 * @threadsafety All calls should be made from a single thread
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa rand
 * @sa randf
 * @sa srand
 */
inline Uint32 rand_bits() { return SDL_rand_bits(); }

/**
 * A independent pseudo random state
 *
 * This can be instantiated in any thread and as long as it is not shared with
 * another thread all members are safe to call.
 *
 * @cat wrap-state
 *
 * @sa wrap-state
 */
class Random
{
  Uint64 m_state;

public:
  /**
   * Init state with the given value
   */
  constexpr Random(Uint64 state)
    : m_state(state)
  {
  }

  /// Convert to the underlying type
  constexpr operator Uint64() { return m_state; }

  /**
   * Generate a pseudo-random number less than n for positive n
   *
   * The method used is faster and of better quality than `rand() % n`. Odds are
   * roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and
   * much worse as n gets bigger.
   *
   * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
   * 0..5 to 1..6
   *
   * If you want to generate a pseudo-random number in the full range of Sint32,
   * you should use: (Sint32)state.rand_bits()
   *
   * There are no guarantees as to the quality of the random sequence produced,
   * and this should not be used for security (cryptography, passwords) or where
   * money is on the line (loot-boxes, casinos). There are many random number
   * libraries available with different characteristics and you should pick one
   * of those to meet any serious needs.
   *
   * @param n the number of possible outcomes. n must be positive.
   * @returns a random value in the range of [0 .. n-1].
   *
   * @threadsafety This function is thread-safe, as long as this object
   *               isn't shared between threads.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa rand
   * @sa Random.rand_bits
   * @sa Random.randf
   */
  Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }

  /**
   * Generate a uniform pseudo-random floating point number less than 1.0
   *
   * If you want reproducible output, be sure to initialize with srand()
   * first.
   *
   * There are no guarantees as to the quality of the random sequence produced,
   * and this should not be used for security (cryptography, passwords) or where
   * money is on the line (loot-boxes, casinos). There are many random number
   * libraries available with different characteristics and you should pick one
   * of those to meet any serious needs.
   *
   * @returns a random value in the range of [0.0, 1.0).
   *
   * @threadsafety This function is thread-safe, as long as this object
   *               isn't shared between threads.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Random.rand_bits
   * @sa Random.rand
   * @sa randf
   */
  float randf() { return SDL_randf_r(&m_state); }

  /**
   * Generate 32 pseudo-random bits.
   *
   * You likely want to use Random.rand() to get a pseudo-random number instead.
   *
   * There are no guarantees as to the quality of the random sequence produced,
   * and this should not be used for security (cryptography, passwords) or where
   * money is on the line (loot-boxes, casinos). There are many random number
   * libraries available with different characteristics and you should pick one
   * of those to meet any serious needs.
   *
   * @returns a random value in the range of [0-MAX_UINT32].
   *
   * @threadsafety This function is thread-safe, as long as this object
   *               isn't shared between threads.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Random.rand
   * @sa Random.randf
   */
  Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
};

#ifdef SDL3PP_DOC

/**
 * The value of Pi, as a double-precision floating point literal.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_PI_F
 */
#define SDL_PI_D 3.141592653589793238462643383279502884

/**
 * The value of Pi, as a single-precision floating point literal.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_PI_D
 */
#define SDL_PI_F 3.141592653589793238462643383279502884F

#endif // SDL3PP_DOC

/**
 * Compute the arc cosine of `x`.
 *
 * The definition of `y = acos(x)` is `x = cos(y)`.
 *
 * Domain: `-1 <= x <= 1`
 *
 * Range: `0 <= y <= Pi`
 *
 * This function operates on double-precision floating point values, use
 * acosf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns arc cosine of `x`, in radians.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa acosf
 * @sa asin
 * @sa cos
 */
inline double acos(double x) { return SDL_acos(x); }

/**
 * Compute the arc cosine of `x`.
 *
 * The definition of `y = acos(x)` is `x = cos(y)`.
 *
 * Domain: `-1 <= x <= 1`
 *
 * Range: `0 <= y <= Pi`
 *
 * This function operates on single-precision floating point values, use
 * acos for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns arc cosine of `x`, in radians.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa acos
 * @sa asinf
 * @sa cosf
 */
inline float acosf(float x) { return SDL_acosf(x); }

/**
 * Compute the arc sine of `x`.
 *
 * The definition of `y = asin(x)` is `x = sin(y)`.
 *
 * Domain: `-1 <= x <= 1`
 *
 * Range: `-Pi/2 <= y <= Pi/2`
 *
 * This function operates on double-precision floating point values, use
 * asinf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns arc sine of `x`, in radians.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa asinf
 * @sa acos
 * @sa sin
 */
inline double asin(double x) { return SDL_asin(x); }

/**
 * Compute the arc sine of `x`.
 *
 * The definition of `y = asin(x)` is `x = sin(y)`.
 *
 * Domain: `-1 <= x <= 1`
 *
 * Range: `-Pi/2 <= y <= Pi/2`
 *
 * This function operates on single-precision floating point values, use
 * asin for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns arc sine of `x`, in radians.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa asin
 * @sa acosf
 * @sa sinf
 */
inline float asinf(float x) { return SDL_asinf(x); }

/**
 * Compute the arc tangent of `x`.
 *
 * The definition of `y = atan(x)` is `x = tan(y)`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-Pi/2 <= y <= Pi/2`
 *
 * This function operates on double-precision floating point values, use
 * atanf for single-precision floats.
 *
 * To calculate the arc tangent of y / x, use atan2.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns arc tangent of of `x` in radians, or 0 if `x = 0`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atanf
 * @sa atan2
 * @sa tan
 */
inline double atan(double x) { return SDL_atan(x); }

/**
 * Compute the arc tangent of `x`.
 *
 * The definition of `y = atan(x)` is `x = tan(y)`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-Pi/2 <= y <= Pi/2`
 *
 * This function operates on single-precision floating point values, use
 * atan for dboule-precision floats.
 *
 * To calculate the arc tangent of y / x, use atan2f.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns arc tangent of of `x` in radians, or 0 if `x = 0`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atan
 * @sa atan2f
 * @sa tanf
 */
inline float atanf(float x) { return SDL_atanf(x); }

/**
 * Compute the arc tangent of `y / x`, using the signs of x and y to adjust
 * the result's quadrant.
 *
 * The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant
 * of z is determined based on the signs of x and y.
 *
 * Domain: `-INF <= x <= INF`, `-INF <= y <= INF`
 *
 * Range: `-Pi/2 <= y <= Pi/2`
 *
 * This function operates on double-precision floating point values, use
 * atan2f for single-precision floats.
 *
 * To calculate the arc tangent of a single value, use atan.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param y floating point value of the numerator (y coordinate).
 * @param x floating point value of the denominator (x coordinate).
 * @returns arc tangent of of `y / x` in radians, or, if `x = 0`, either
 *          `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atan2f
 * @sa atan
 * @sa tan
 */
inline double atan2(double y, double x) { return SDL_atan2(y, x); }

/**
 * Compute the arc tangent of `y / x`, using the signs of x and y to adjust
 * the result's quadrant.
 *
 * The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant
 * of z is determined based on the signs of x and y.
 *
 * Domain: `-INF <= x <= INF`, `-INF <= y <= INF`
 *
 * Range: `-Pi/2 <= y <= Pi/2`
 *
 * This function operates on single-precision floating point values, use
 * atan2 for double-precision floats.
 *
 * To calculate the arc tangent of a single value, use atanf.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param y floating point value of the numerator (y coordinate).
 * @param x floating point value of the denominator (x coordinate).
 * @returns arc tangent of of `y / x` in radians, or, if `x = 0`, either
 *          `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa atan2
 * @sa atan
 * @sa tan
 */
inline float atan2f(float y, float x) { return SDL_atan2f(y, x); }

/**
 * Compute the ceiling of `x`.
 *
 * The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`
 * rounded up to the nearest integer.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on double-precision floating point values, use
 * ceilf for single-precision floats.
 *
 * @param x floating point value.
 * @returns the ceiling of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ceilf
 * @sa floor
 * @sa trunc
 * @sa round
 * @sa lround
 */
inline double ceil(double x) { return SDL_ceil(x); }

/**
 * Compute the ceiling of `x`.
 *
 * The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`
 * rounded up to the nearest integer.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on single-precision floating point values, use
 * ceil for double-precision floats.
 *
 * @param x floating point value.
 * @returns the ceiling of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ceil
 * @sa floorf
 * @sa truncf
 * @sa roundf
 * @sa lroundf
 */
inline float ceilf(float x) { return SDL_ceilf(x); }

/**
 * Copy the sign of one floating-point value to another.
 *
 * The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.
 *
 * Domain: `-INF <= x <= INF`, ``-INF <= y <= f``
 *
 * Range: `-INF <= z <= INF`
 *
 * This function operates on double-precision floating point values, use
 * copysignf for single-precision floats.
 *
 * @param x floating point value to use as the magnitude.
 * @param y floating point value to use as the sign.
 * @returns the floating point value with the sign of y and the magnitude of
 *          x.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa copysignf
 * @sa fabs
 */
inline double copysign(double x, double y) { return SDL_copysign(x, y); }

/**
 * Copy the sign of one floating-point value to another.
 *
 * The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.
 *
 * Domain: `-INF <= x <= INF`, ``-INF <= y <= f``
 *
 * Range: `-INF <= z <= INF`
 *
 * This function operates on single-precision floating point values, use
 * copysign for double-precision floats.
 *
 * @param x floating point value to use as the magnitude.
 * @param y floating point value to use as the sign.
 * @returns the floating point value with the sign of y and the magnitude of
 *          x.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa copysign
 * @sa fabsf
 */
inline float copysignf(float x, float y) { return SDL_copysignf(x, y); }

/**
 * Compute the cosine of `x`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-1 <= y <= 1`
 *
 * This function operates on double-precision floating point values, use
 * cosf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value, in radians.
 * @returns cosine of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa cosf
 * @sa acos
 * @sa sin
 */
inline double cos(double x) { return SDL_cos(x); }

/**
 * Compute the cosine of `x`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-1 <= y <= 1`
 *
 * This function operates on single-precision floating point values, use
 * cos for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value, in radians.
 * @returns cosine of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa cos
 * @sa acosf
 * @sa sinf
 */
inline float cosf(float x) { return SDL_cosf(x); }

/**
 * Compute the exponential of `x`.
 *
 * The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the
 * natural logarithm. The inverse is the natural logarithm, log.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `0 <= y <= INF`
 *
 * The output will overflow if `exp(x)` is too large to be represented.
 *
 * This function operates on double-precision floating point values, use
 * expf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns value of `e^x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa expf
 * @sa log
 */
inline double exp(double x) { return SDL_exp(x); }

/**
 * Compute the exponential of `x`.
 *
 * The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the
 * natural logarithm. The inverse is the natural logarithm, logf.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `0 <= y <= INF`
 *
 * The output will overflow if `exp(x)` is too large to be represented.
 *
 * This function operates on single-precision floating point values, use
 * exp for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value.
 * @returns value of `e^x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa exp
 * @sa logf
 */
inline float expf(float x) { return SDL_expf(x); }

/**
 * Compute the absolute value of `x`
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `0 <= y <= INF`
 *
 * This function operates on double-precision floating point values, use
 * fabsf for single-precision floats.
 *
 * @param x floating point value to use as the magnitude.
 * @returns the absolute value of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa fabsf
 */
inline double fabs(double x) { return SDL_fabs(x); }

/**
 * Compute the absolute value of `x`
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `0 <= y <= INF`
 *
 * This function operates on single-precision floating point values, use
 * fabs for double-precision floats.
 *
 * @param x floating point value to use as the magnitude.
 * @returns the absolute value of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa fabs
 */
inline float fabsf(float x) { return SDL_fabsf(x); }

/**
 * Compute the floor of `x`.
 *
 * The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`
 * rounded down to the nearest integer.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on double-precision floating point values, use
 * floorf for single-precision floats.
 *
 * @param x floating point value.
 * @returns the floor of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa floorf
 * @sa ceil
 * @sa trunc
 * @sa round
 * @sa lround
 */
inline double floor(double x) { return SDL_floor(x); }

/**
 * Compute the floor of `x`.
 *
 * The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`
 * rounded down to the nearest integer.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on single-precision floating point values, use
 * floor for double-precision floats.
 *
 * @param x floating point value.
 * @returns the floor of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa floor
 * @sa ceilf
 * @sa truncf
 * @sa roundf
 * @sa lroundf
 */
inline float floorf(float x) { return SDL_floorf(x); }

/**
 * Truncate `x` to an integer.
 *
 * Rounds `x` to the next closest integer to 0. This is equivalent to removing
 * the fractional part of `x`, leaving only the integer part.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on double-precision floating point values, use
 * truncf for single-precision floats.
 *
 * @param x floating point value.
 * @returns `x` truncated to an integer.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa truncf
 * @sa fmod
 * @sa ceil
 * @sa floor
 * @sa round
 * @sa lround
 */
inline double trunc(double x) { return SDL_trunc(x); }

/**
 * Truncate `x` to an integer.
 *
 * Rounds `x` to the next closest integer to 0. This is equivalent to removing
 * the fractional part of `x`, leaving only the integer part.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on single-precision floating point values, use
 * trunc for double-precision floats.
 *
 * @param x floating point value.
 * @returns `x` truncated to an integer.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa trunc
 * @sa fmodf
 * @sa ceilf
 * @sa floorf
 * @sa roundf
 * @sa lroundf
 */
inline float truncf(float x) { return SDL_truncf(x); }

/**
 * Return the floating-point remainder of `x / y`
 *
 * Divides `x` by `y`, and returns the remainder.
 *
 * Domain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`
 *
 * Range: `-y <= z <= y`
 *
 * This function operates on double-precision floating point values, use
 * fmodf for single-precision floats.
 *
 * @param x the numerator.
 * @param y the denominator. Must not be 0.
 * @returns the remainder of `x / y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa fmodf
 * @sa modf
 * @sa trunc
 * @sa ceil
 * @sa floor
 * @sa round
 * @sa lround
 */
inline double fmod(double x, double y) { return SDL_fmod(x, y); }

/**
 * Return the floating-point remainder of `x / y`
 *
 * Divides `x` by `y`, and returns the remainder.
 *
 * Domain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`
 *
 * Range: `-y <= z <= y`
 *
 * This function operates on single-precision floating point values, use
 * fmod for double-precision floats.
 *
 * @param x the numerator.
 * @param y the denominator. Must not be 0.
 * @returns the remainder of `x / y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa fmod
 * @sa truncf
 * @sa modff
 * @sa ceilf
 * @sa floorf
 * @sa roundf
 * @sa lroundf
 */
inline float fmodf(float x, float y) { return SDL_fmodf(x, y); }

/**
 * Return whether the value is infinity.
 *
 * @param x double-precision floating point value.
 * @returns non-zero if the value is infinity, 0 otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa isinff
 */
inline int isinf(double x) { return SDL_isinf(x); }

/**
 * Return whether the value is infinity.
 *
 * @param x floating point value.
 * @returns non-zero if the value is infinity, 0 otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa isinf
 */
inline int isinff(float x) { return SDL_isinff(x); }

/**
 * Return whether the value is NaN.
 *
 * @param x double-precision floating point value.
 * @returns non-zero if the value is NaN, 0 otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa isnanf
 */
inline int isnan(double x) { return SDL_isnan(x); }

/**
 * Return whether the value is NaN.
 *
 * @param x floating point value.
 * @returns non-zero if the value is NaN, 0 otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa isnan
 */
inline int isnanf(float x) { return SDL_isnanf(x); }

/**
 * Compute the natural logarithm of `x`.
 *
 * Domain: `0 < x <= INF`
 *
 * Range: `-INF <= y <= INF`
 *
 * It is an error for `x` to be less than or equal to 0.
 *
 * This function operates on double-precision floating point values, use
 * logf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value. Must be greater than 0.
 * @returns the natural logarithm of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa logf
 * @sa log10
 * @sa exp
 */
inline double log(double x) { return SDL_log(x); }

/**
 * Compute the natural logarithm of `x`.
 *
 * Domain: `0 < x <= INF`
 *
 * Range: `-INF <= y <= INF`
 *
 * It is an error for `x` to be less than or equal to 0.
 *
 * This function operates on single-precision floating point values, use
 * log for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value. Must be greater than 0.
 * @returns the natural logarithm of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa log
 * @sa expf
 */
inline float logf(float x) { return SDL_logf(x); }

/**
 * Compute the base-10 logarithm of `x`.
 *
 * Domain: `0 < x <= INF`
 *
 * Range: `-INF <= y <= INF`
 *
 * It is an error for `x` to be less than or equal to 0.
 *
 * This function operates on double-precision floating point values, use
 * log10f for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value. Must be greater than 0.
 * @returns the logarithm of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa log10f
 * @sa log
 * @sa pow
 */
inline double log10(double x) { return SDL_log10(x); }

/**
 * Compute the base-10 logarithm of `x`.
 *
 * Domain: `0 < x <= INF`
 *
 * Range: `-INF <= y <= INF`
 *
 * It is an error for `x` to be less than or equal to 0.
 *
 * This function operates on single-precision floating point values, use
 * log10 for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value. Must be greater than 0.
 * @returns the logarithm of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa log10
 * @sa logf
 * @sa powf
 */
inline float log10f(float x) { return SDL_log10f(x); }

/**
 * Split `x` into integer and fractional parts
 *
 * This function operates on double-precision floating point values, use
 * modff for single-precision floats.
 *
 * @param x floating point value.
 * @param y output pointer to store the integer part of `x`.
 * @returns the fractional part of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa modff
 * @sa trunc
 * @sa fmod
 */
inline double modf(double x, double* y) { return SDL_modf(x, y); }

/**
 * Split `x` into integer and fractional parts
 *
 * This function operates on single-precision floating point values, use
 * modf for double-precision floats.
 *
 * @param x floating point value.
 * @param y output pointer to store the integer part of `x`.
 * @returns the fractional part of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa modf
 * @sa truncf
 * @sa fmodf
 */
inline float modff(float x, float* y) { return SDL_modff(x, y); }

/**
 * Raise `x` to the power `y`
 *
 * Domain: `-INF <= x <= INF`, `-INF <= y <= INF`
 *
 * Range: `-INF <= z <= INF`
 *
 * If `y` is the base of the natural logarithm (e), consider using exp
 * instead.
 *
 * This function operates on double-precision floating point values, use
 * powf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x the base.
 * @param y the exponent.
 * @returns `x` raised to the power `y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa powf
 * @sa exp
 * @sa log
 */
inline double pow(double x, double y) { return SDL_pow(x, y); }

/**
 * Raise `x` to the power `y`
 *
 * Domain: `-INF <= x <= INF`, `-INF <= y <= INF`
 *
 * Range: `-INF <= z <= INF`
 *
 * If `y` is the base of the natural logarithm (e), consider using exp
 * instead.
 *
 * This function operates on single-precision floating point values, use
 * pow for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x the base.
 * @param y the exponent.
 * @returns `x` raised to the power `y`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa pow
 * @sa expf
 * @sa logf
 */
inline float powf(float x, float y) { return SDL_powf(x, y); }

/**
 * Round `x` to the nearest integer.
 *
 * Rounds `x` to the nearest integer. Values halfway between integers will be
 * rounded away from zero.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on double-precision floating point values, use
 * roundf for single-precision floats. To get the result as an integer
 * type, use lround.
 *
 * @param x floating point value.
 * @returns the nearest integer to `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa roundf
 * @sa lround
 * @sa floor
 * @sa ceil
 * @sa trunc
 */
inline double round(double x) { return SDL_round(x); }

/**
 * Round `x` to the nearest integer.
 *
 * Rounds `x` to the nearest integer. Values halfway between integers will be
 * rounded away from zero.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`, y integer
 *
 * This function operates on single-precision floating point values, use
 * round for double-precision floats. To get the result as an integer
 * type, use lroundf.
 *
 * @param x floating point value.
 * @returns the nearest integer to `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa round
 * @sa lroundf
 * @sa floorf
 * @sa ceilf
 * @sa truncf
 */
inline float roundf(float x) { return SDL_roundf(x); }

/**
 * Round `x` to the nearest integer representable as a long
 *
 * Rounds `x` to the nearest integer. Values halfway between integers will be
 * rounded away from zero.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `MIN_LONG <= y <= MAX_LONG`
 *
 * This function operates on double-precision floating point values, use
 * lroundf for single-precision floats. To get the result as a
 * floating-point type, use round.
 *
 * @param x floating point value.
 * @returns the nearest integer to `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa lroundf
 * @sa round
 * @sa floor
 * @sa ceil
 * @sa trunc
 */
inline long lround(double x) { return SDL_lround(x); }

/**
 * Round `x` to the nearest integer representable as a long
 *
 * Rounds `x` to the nearest integer. Values halfway between integers will be
 * rounded away from zero.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `MIN_LONG <= y <= MAX_LONG`
 *
 * This function operates on single-precision floating point values, use
 * lround for double-precision floats. To get the result as a
 * floating-point type, use roundf.
 *
 * @param x floating point value.
 * @returns the nearest integer to `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa lround
 * @sa roundf
 * @sa floorf
 * @sa ceilf
 * @sa truncf
 */
inline long lroundf(float x) { return SDL_lroundf(x); }

/**
 * Scale `x` by an integer power of two.
 *
 * Multiplies `x` by the `n`th power of the floating point radix (always 2).
 *
 * Domain: `-INF <= x <= INF`, `n` integer
 *
 * Range: `-INF <= y <= INF`
 *
 * This function operates on double-precision floating point values, use
 * scalbnf for single-precision floats.
 *
 * @param x floating point value to be scaled.
 * @param n integer exponent.
 * @returns `x * 2^n`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa scalbnf
 * @sa pow
 */
inline double scalbn(double x, int n) { return SDL_scalbn(x, n); }

/**
 * Scale `x` by an integer power of two.
 *
 * Multiplies `x` by the `n`th power of the floating point radix (always 2).
 *
 * Domain: `-INF <= x <= INF`, `n` integer
 *
 * Range: `-INF <= y <= INF`
 *
 * This function operates on single-precision floating point values, use
 * scalbn for double-precision floats.
 *
 * @param x floating point value to be scaled.
 * @param n integer exponent.
 * @returns `x * 2^n`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa scalbn
 * @sa powf
 */
inline float scalbnf(float x, int n) { return SDL_scalbnf(x, n); }

/**
 * Compute the sine of `x`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-1 <= y <= 1`
 *
 * This function operates on double-precision floating point values, use
 * sinf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value, in radians.
 * @returns sine of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa sinf
 * @sa asin
 * @sa cos
 */
inline double sin(double x) { return SDL_sin(x); }

/**
 * Compute the sine of `x`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-1 <= y <= 1`
 *
 * This function operates on single-precision floating point values, use
 * sin for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value, in radians.
 * @returns sine of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa sin
 * @sa asinf
 * @sa cosf
 */
inline float sinf(float x) { return SDL_sinf(x); }

/**
 * Compute the square root of `x`.
 *
 * Domain: `0 <= x <= INF`
 *
 * Range: `0 <= y <= INF`
 *
 * This function operates on double-precision floating point values, use
 * sqrtf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value. Must be greater than or equal to 0.
 * @returns square root of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa sqrtf
 */
inline double sqrt(double x) { return SDL_sqrt(x); }

/**
 * Compute the square root of `x`.
 *
 * Domain: `0 <= x <= INF`
 *
 * Range: `0 <= y <= INF`
 *
 * This function operates on single-precision floating point values, use
 * sqrt for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value. Must be greater than or equal to 0.
 * @returns square root of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa sqrt
 */
inline float sqrtf(float x) { return SDL_sqrtf(x); }

/**
 * Compute the tangent of `x`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`
 *
 * This function operates on double-precision floating point values, use
 * tanf for single-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value, in radians.
 * @returns tangent of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa tanf
 * @sa sin
 * @sa cos
 * @sa atan
 * @sa atan2
 */
inline double tan(double x) { return SDL_tan(x); }

/**
 * Compute the tangent of `x`.
 *
 * Domain: `-INF <= x <= INF`
 *
 * Range: `-INF <= y <= INF`
 *
 * This function operates on single-precision floating point values, use
 * tan for double-precision floats.
 *
 * This function may use a different approximation across different versions,
 * platforms and configurations. i.e, it can return a different value given
 * the same input on different machines or operating systems, or if SDL is
 * updated.
 *
 * @param x floating point value, in radians.
 * @returns tangent of `x`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa tan
 * @sa sinf
 * @sa cosf
 * @sa atanf
 * @sa atan2f
 */
inline float tanf(float x) { return SDL_tanf(x); }

/**
 * An opaque handle representing string encoding conversion state.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa IConvBase.IConvBase
 * @sa IConv
 * @sa IConvRef
 */
struct IConvBase : Resource<SDL_iconv_data_t*>
{
  using Resource::Resource;

  /**
   * This function allocates a context for the specified character set
   * conversion.
   *
   * @param tocode The target character encoding, must not be nullptr.
   * @param fromcode The source character encoding, must not be nullptr.
   * @post this becomes a valid handle convertible to true on success, or
   *       convertible to false on failure.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IConvBase.iconv
   * @sa iconv_string
   */
  IConvBase(StringParam tocode, StringParam fromcode)
    : Resource(SDL_iconv_open(tocode, fromcode))
  {
  }

  /**
   * This function converts text between encodings, reading from and writing to
   * a buffer.
   *
   * It returns the number of successful conversions on success. On error,
   * SDL_ICONV_E2BIG is returned when the output buffer is too small, or
   * SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,
   * or SDL_ICONV_EINVAL is returned when an incomplete input sequence is
   * encountered.
   *
   * On exit:
   *
   * - inbuf will point to the beginning of the next multibyte sequence. On
   *   error, this is the location of the problematic input sequence. On
   *   success, this is the end of the input sequence.
   * - inbytesleft will be set to the number of bytes left to convert, which
   *   will be 0 on success.
   * - outbuf will point to the location where to store the next output byte.
   * - outbytesleft will be set to the number of bytes left in the output
   *   buffer.
   *
   * @param inbuf Address of variable that points to the first character of the
   *              input sequence.
   * @param inbytesleft The number of bytes in the input buffer.
   * @param outbuf Address of variable that points to the output buffer.
   * @param outbytesleft The number of bytes in the output buffer.
   * @returns the number of conversions on success, or a negative error code.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IConvBase.IConvBase
   * @sa iconv_string
   */
  size_t iconv(const char** inbuf,
               size_t* inbytesleft,
               char** outbuf,
               size_t* outbytesleft)
  {
    return SDL_iconv(get(), inbuf, inbytesleft, outbuf, outbytesleft);
  }
};

/**
 * Handle to a non owned iConv
 *
 * @cat resource
 *
 * @sa IConvBase
 * @sa IConv
 */
struct IConvRef : IConvBase
{
  using IConvBase::IConvBase;

  /**
   * Copy constructor.
   */
  constexpr IConvRef(const IConvRef& other)
    : IConvBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr IConvRef(IConvRef&& other)
    : IConvBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~IConvRef() = default;

  /**
   * Assignment operator.
   */
  IConvRef& operator=(IConvRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * This function frees a context used for character set conversion.
   *
   * @returns 0 on success, or -1 on failure.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IConvBase.iconv
   * @sa IConvBase.IConvBase
   * @sa iconv_string
   */
  int reset(SDL_iconv_data_t* newResource = {})
  {
    return SDL_iconv_close(release(newResource));
  }
};

/**
 * Handle to an owned iConv
 *
 * @cat resource
 *
 * @sa IConvBase
 * @sa IConvRef
 */
struct IConv : IConvRef
{
  using IConvRef::IConvRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit IConv(SDL_iconv_data_t* resource = {})
    : IConvRef(resource)
  {
  }

  constexpr IConv(const IConv& other) = delete;

  /**
   * Move constructor.
   */
  constexpr IConv(IConv&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~IConv() { reset(); }

  /**
   * Assignment operator.
   */
  IConv& operator=(IConv other)
  {
    reset(other.release());
    return *this;
  }
};

#ifdef SDL3PP_DOC

/**
 * Generic error. Check GetError()?
 */
#define SDL_ICONV_ERROR (size_t)-1

/**
 * Output buffer was too small.
 */
#define SDL_ICONV_E2BIG (size_t)-2

/**
 * Invalid input sequence was encountered.
 */
#define SDL_ICONV_EILSEQ (size_t)-3

/**
 * Incomplete input sequence was encountered.
 */
#define SDL_ICONV_EINVAL (size_t)-4

#endif // SDL3PP_DOC

/**
 * Helper function to convert a string's encoding in one call.
 *
 * This function converts a buffer or string between encodings in one pass.
 *
 * The string does not need to be nullptr-terminated; this function operates on
 * the number of bytes specified in `inbytesleft` whether there is a nullptr
 * character anywhere in the buffer.
 *
 * @param tocode the character encoding of the output string. Examples are
 *               "UTF-8", "UCS-4", etc.
 * @param fromcode the character encoding of data in `inbuf`.
 * @param inbuf the string to convert to a different encoding.
 * @param inbytesleft the size of the input string _in bytes_.
 * @returns a new string, converted to the new encoding, or nullptr on error.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IConvBase.IConvBase
 * @sa IConvBase.iconv
 */
inline OwnPtr<char> iconv_string(StringParam tocode,
                                 StringParam fromcode,
                                 StringParam inbuf,
                                 size_t inbytesleft)
{
  return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
}

#ifdef SDL3PP_DOC

/**
 * Convert a UTF-8 string to the current locale's character encoding.
 *
 * This is a helper macro that might be more clear than calling
 * iconv_string directly. However, it double-evaluates its parameter, so
 * do not use an expression with side-effects here.
 *
 * @param S the string to convert.
 * @returns a new string, converted to the new encoding, or nullptr on error.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_iconv_utf8_locale(S)                                               \
  SDL_iconv_string("", "UTF-8", S, SDL_strlen(S) + 1)

/**
 * Convert a UTF-8 string to UCS-2.
 *
 * This is a helper macro that might be more clear than calling
 * iconv_string directly. However, it double-evaluates its parameter, so
 * do not use an expression with side-effects here.
 *
 * @param S the string to convert.
 * @returns a new string, converted to the new encoding, or nullptr on error.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_iconv_utf8_ucs2(S)                                                 \
  (Uint16*)SDL_iconv_string("UCS-2", "UTF-8", S, SDL_strlen(S) + 1)

/**
 * Convert a UTF-8 string to UCS-4.
 *
 * This is a helper macro that might be more clear than calling
 * iconv_string directly. However, it double-evaluates its parameter, so
 * do not use an expression with side-effects here.
 *
 * @param S the string to convert.
 * @returns a new string, converted to the new encoding, or nullptr on error.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_iconv_utf8_ucs4(S)                                                 \
  (Uint32*)SDL_iconv_string("UCS-4", "UTF-8", S, SDL_strlen(S) + 1)

/**
 * Convert a wchar_t string to UTF-8.
 *
 * This is a helper macro that might be more clear than calling
 * iconv_string directly. However, it double-evaluates its parameter, so
 * do not use an expression with side-effects here.
 *
 * @param S the string to convert.
 * @returns a new string, converted to the new encoding, or nullptr on error.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_iconv_wchar_utf8(S)                                                \
  SDL_iconv_string(                                                            \
    "UTF-8", "WCHAR_T", (char*)S, (SDL_wcslen(S) + 1) * sizeof(wchar_t))

#endif // SDL3PP_DOC

/**
 * Multiply two integers, checking for overflow.
 *
 * If `a * b` would overflow, return false.
 *
 * Otherwise store `a * b` via ret and return true.
 *
 * @param a the multiplicand.
 * @param b the multiplier.
 * @param ret on non-overflow output, stores the multiplication result, may
 *            not be nullptr.
 * @returns false on overflow, true if result is multiplied without overflow.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool size_mul_check_overflow(size_t a, size_t b, size_t* ret)
{
  return SDL_size_mul_check_overflow(a, b, ret);
}

/**
 * Add two integers, checking for overflow.
 *
 * If `a + b` would overflow, return false.
 *
 * Otherwise store `a + b` via ret and return true.
 *
 * @param a the first addend.
 * @param b the second addend.
 * @param ret on non-overflow output, stores the addition result, may not be
 *            nullptr.
 * @returns false on overflow, true if result is added without overflow.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool size_add_check_overflow(size_t a, size_t b, size_t* ret)
{
  return SDL_size_add_check_overflow(a, b, ret);
}

/**
 * A generic function pointer.
 *
 * In theory, generic function pointers should use this, instead of `void *`,
 * since some platforms could treat code addresses differently than data
 * addresses. Although in current times no popular platforms make this
 * distinction, it is more correct and portable to use the correct type for a
 * generic pointer.
 *
 * If for some reason you need to force this typedef to be an actual `void *`,
 * perhaps to work around a compiler or existing code, you can define
 * `SDL_FUNCTION_POINTER_IS_VOID_POINTER` before including any SDL headers.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using FunctionPointer = SDL_FunctionPointer;

#pragma region impl
/// @}

inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }

#pragma endregion impl

/**
 * @defgroup CategoryAssert Assertions
 *
 * A helpful assertion macro!
 *
 * SDL assertions operate like your usual `assert` macro, but with some added
 * features:
 *
 * - It uses a trick with the `sizeof` operator, so disabled assertions
 *   vaporize out of the compiled code, but variables only referenced in the
 *   assertion won't trigger compiler warnings about being unused.
 * - It is safe to use with a dangling-else: `if (x) SDL_assert(y); else
 *   do_something();`
 * - It works the same everywhere, instead of counting on various platforms'
 *   compiler and C runtime to behave.
 * - It provides multiple levels of assertion (SDL_assert, SDL_assert_release,
 *   SDL_assert_paranoid) instead of a single all-or-nothing option.
 * - It offers a variety of responses when an assertion fails (retry, trigger
 *   the debugger, abort the program, ignore the failure once, ignore it for
 *   the rest of the program's run).
 * - It tries to show the user a dialog by default, if possible, but the app
 *   can provide a callback to handle assertion failures however they like.
 * - It lets failed assertions be retried. Perhaps you had a network failure
 *   and just want to retry the test after plugging your network cable back
 *   in? You can.
 * - It lets the user ignore an assertion failure, if there's a harmless
 *   problem that one can continue past.
 * - It lets the user mark an assertion as ignored for the rest of the
 *   program's run; if there's a harmless problem that keeps popping up.
 * - It provides statistics and data on all failed assertions to the app.
 * - It allows the default assertion handler to be controlled with environment
 *   variables, in case an automated script needs to control it.
 * - It can be used as an aid to Clang's static analysis; it will treat SDL
 *   assertions as universally true (under the assumption that you are serious
 *   about the asserted claims and that your debug builds will detect when
 *   these claims were wrong). This can help the analyzer avoid false
 *   positives.
 *
 * To use it: compile a debug build and just sprinkle around tests to check
 * your code!
 *
 * @{
 */

#ifdef SDL3PP_DOC

/**
 * The level of assertion aggressiveness.
 *
 * This value changes depending on compiler options and other preprocessor
 * defines.
 *
 * It is currently one of the following values, but future SDL releases might
 * add more:
 *
 * - 0: All SDL assertion macros are disabled.
 * - 1: Release settings: SDL_assert disabled, SDL_assert_release enabled.
 * - 2: Debug settings: SDL_assert and SDL_assert_release enabled.
 * - 3: Paranoid settings: All SDL assertion macros enabled, including
 *   SDL_assert_paranoid.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_ASSERT_LEVEL SomeNumberBasedOnVariousFactors

/**
 * Attempt to tell an attached debugger to pause.
 *
 * This allows an app to programmatically halt ("break") the debugger as if it
 * had hit a breakpoint, allowing the developer to examine program state, etc.
 *
 * This is a macro--not a function--so that the debugger breaks on the source
 * code line that used SDL_TriggerBreakpoint and not in some random guts of
 * SDL. SDL_assert uses this macro for the same reason.
 *
 * If the program is not running under a debugger, SDL_TriggerBreakpoint will
 * likely terminate the app, possibly without warning. If the current platform
 * isn't supported, this macro is left undefined.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_TriggerBreakpoint() TriggerABreakpointInAPlatformSpecificManner

/**
 * A macro that reports the current function being compiled.
 *
 * If SDL can't figure how the compiler reports this, it will use "???".
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_FUNCTION __FUNCTION__

/**
 * A macro that reports the current file being compiled.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_FILE __FILE__

/**
 * A macro that reports the current line number of the file being compiled.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_LINE __LINE__

/**
 * A macro for wrapping code in `do {} while (0);` without compiler warnings.
 *
 * Visual Studio with really aggressive warnings enabled needs this to avoid
 * compiler complaints.
 *
 * the `do {} while (0);` trick is useful for wrapping code in a macro that
 * may or may not be a single statement, to avoid various C language
 * accidents.
 *
 * To use:
 *
 * ```c
 * do { SomethingOnce(); } while (SDL_NULL_WHILE_LOOP_CONDITION (0));
 * ```
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_NULL_WHILE_LOOP_CONDITION (0)

/**
 * The macro used when an assertion is disabled.
 *
 * This isn't for direct use by apps, but this is the code that is inserted
 * when an SDL_assert is disabled (perhaps in a release build).
 *
 * The code does nothing, but wraps `condition` in a sizeof operator, which
 * generates no code and has no side effects, but avoid compiler warnings
 * about unused variables.
 *
 * @param condition the condition to assert (but not actually run here).
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_disabled_assert(condition)                                         \
  do {                                                                         \
    (void)sizeof((condition));                                                 \
  } while (SDL_NULL_WHILE_LOOP_CONDITION)

#endif // SDL3PP_DOC

/**
 * Possible outcomes from a triggered assertion.
 *
 * When an enabled assertion triggers, it may call the assertion handler
 * (possibly one provided by the app via SDL_SetAssertionHandler), which will
 * return one of these values, possibly after asking the user.
 *
 * Then SDL will respond based on this outcome (loop around to retry the
 * condition, try to break in a debugger, kill the program, or ignore the
 * problem).
 *
 * @since This enum is available since SDL 3.2.0.
 */
using AssertState = SDL_AssertState;

/**
 * Retry the assert immediately.
 */
constexpr AssertState ASSERTION_RETRY = SDL_ASSERTION_RETRY;

/**
 * Make the debugger trigger a breakpoint.
 */
constexpr AssertState ASSERTION_BREAK = SDL_ASSERTION_BREAK;

/**
 * Terminate the program.
 */
constexpr AssertState ASSERTION_ABORT = SDL_ASSERTION_ABORT;

/**
 * Ignore the assert.
 */
constexpr AssertState ASSERTION_IGNORE = SDL_ASSERTION_IGNORE;

/**
 * Ignore the assert from now on.
 */
constexpr AssertState ASSERTION_ALWAYS_IGNORE = SDL_ASSERTION_ALWAYS_IGNORE;

/**
 * Information about an assertion failure.
 *
 * This structure is filled in with information about a triggered assertion,
 * used by the assertion handler, then added to the assertion report. This is
 * returned as a linked list from SDL_GetAssertionReport().
 *
 * @since This struct is available since SDL 3.2.0.
 */
using AssertData = SDL_AssertData;

/**
 * Never call this directly.
 *
 * Use the SDL_assert macros instead.
 *
 * @param data assert data structure.
 * @param func function name.
 * @param file file name.
 * @param line line number.
 * @returns assert state.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline AssertState ReportAssertion(AssertData* data,
                                   StringParam func,
                                   StringParam file,
                                   int line)
{
  return SDL_ReportAssertion(data, func, file, line);
}

#ifdef SDL3PP_DOC

/**
 * The macro used when an assertion triggers a breakpoint.
 *
 * This isn't for direct use by apps; use SDL_assert or SDL_TriggerBreakpoint
 * instead.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_AssertBreakpoint() SDL_TriggerBreakpoint()

/**
 * The macro used when an assertion is enabled.
 *
 * This isn't for direct use by apps, but this is the code that is inserted
 * when an SDL_assert is enabled.
 *
 * The `do {} while(0)` avoids dangling else problems:
 *
 * ```c
 * if (x) SDL_assert(y); else blah();
 * ```
 *
 * ... without the do/while, the "else" could attach to this macro's "if". We
 * try to handle just the minimum we need here in a macro...the loop, the
 * static vars, and break points. The heavy lifting is handled in
 * SDL_ReportAssertion().
 *
 * @param condition the condition to assert.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_enabled_assert(condition)                                          \
  do {                                                                         \
    while (!(condition)) {                                                     \
      static struct SDL_AssertData sdl_assert_data = {                         \
        0, 0, #condition, 0, 0, 0, 0};                                         \
      const SDL_AssertState sdl_assert_state = SDL_ReportAssertion(            \
        &sdl_assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE);                   \
      if (sdl_assert_state == SDL_ASSERTION_RETRY) {                           \
        continue; /* go again. */                                              \
      } else if (sdl_assert_state == SDL_ASSERTION_BREAK) {                    \
        SDL_AssertBreakpoint();                                                \
      }                                                                        \
      break; /* not retrying. */                                               \
    }                                                                          \
  } while (SDL_NULL_WHILE_LOOP_CONDITION)

/**
 * An assertion test that is normally performed only in debug builds.
 *
 * This macro is enabled when the SDL_ASSERT_LEVEL is >= 2, otherwise it is
 * disabled. This is meant to only do these tests in debug builds, so they can
 * tend to be more expensive, and they are meant to bring everything to a halt
 * when they fail, with the programmer there to assess the problem.
 *
 * In short: you can sprinkle these around liberally and assume they will
 * evaporate out of the build when building for end-users.
 *
 * When assertions are disabled, this wraps `condition` in a `sizeof`
 * operator, which means any function calls and side effects will not run, but
 * the compiler will not complain about any otherwise-unused variables that
 * are only referenced in the assertion.
 *
 * One can set the environment variable "SDL_ASSERT" to one of several strings
 * ("abort", "break", "retry", "ignore", "always_ignore") to force a default
 * behavior, which may be desirable for automation purposes. If your platform
 * requires GUI interfaces to happen on the main thread but you're debugging
 * an assertion in a background thread, it might be desirable to set this to
 * "break" so that your debugger takes control as soon as assert is triggered,
 * instead of risking a bad UI interaction (deadlock, etc) in the application.
 *
 * @param condition boolean value to test.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_assert(condition)                                                  \
  if (assertion_enabled && (condition)) { trigger_assertion; }

/**
 * An assertion test that is performed even in release builds.
 *
 * This macro is enabled when the SDL_ASSERT_LEVEL is >= 1, otherwise it is
 * disabled. This is meant to be for tests that are cheap to make and
 * extremely unlikely to fail; generally it is frowned upon to have an
 * assertion failure in a release build, so these assertions generally need to
 * be of more than life-and-death importance if there's a chance they might
 * trigger. You should almost always consider handling these cases more
 * gracefully than an assert allows.
 *
 * When assertions are disabled, this wraps `condition` in a `sizeof`
 * operator, which means any function calls and side effects will not run, but
 * the compiler will not complain about any otherwise-unused variables that
 * are only referenced in the assertion.
 *
 * One can set the environment variable "SDL_ASSERT" to one of several strings
 * ("abort", "break", "retry", "ignore", "always_ignore") to force a default
 * behavior, which may be desirable for automation purposes. If your platform
 * requires GUI interfaces to happen on the main thread but you're debugging
 * an assertion in a background thread, it might be desirable to set this to
 * "break" so that your debugger takes control as soon as assert is triggered,
 * instead of risking a bad UI interaction (deadlock, etc) in the application.
 * *
 *
 * @param condition boolean value to test.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_assert_release(condition) SDL_disabled_assert(condition)

/**
 * An assertion test that is performed only when built with paranoid settings.
 *
 * This macro is enabled when the SDL_ASSERT_LEVEL is >= 3, otherwise it is
 * disabled. This is a higher level than both release and debug, so these
 * tests are meant to be expensive and only run when specifically looking for
 * extremely unexpected failure cases in a special build.
 *
 * When assertions are disabled, this wraps `condition` in a `sizeof`
 * operator, which means any function calls and side effects will not run, but
 * the compiler will not complain about any otherwise-unused variables that
 * are only referenced in the assertion.
 *
 * One can set the environment variable "SDL_ASSERT" to one of several strings
 * ("abort", "break", "retry", "ignore", "always_ignore") to force a default
 * behavior, which may be desirable for automation purposes. If your platform
 * requires GUI interfaces to happen on the main thread but you're debugging
 * an assertion in a background thread, it might be desirable to set this to
 * "break" so that your debugger takes control as soon as assert is triggered,
 * instead of risking a bad UI interaction (deadlock, etc) in the application.
 *
 * @param condition boolean value to test.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)

/**
 * An assertion test that is always performed.
 *
 * This macro is always enabled no matter what SDL_ASSERT_LEVEL is set to. You
 * almost never want to use this, as it could trigger on an end-user's system,
 * crashing your program.
 *
 * One can set the environment variable "SDL_ASSERT" to one of several strings
 * ("abort", "break", "retry", "ignore", "always_ignore") to force a default
 * behavior, which may be desirable for automation purposes. If your platform
 * requires GUI interfaces to happen on the main thread but you're debugging
 * an assertion in a background thread, it might be desirable to set this to
 * "break" so that your debugger takes control as soon as assert is triggered,
 * instead of risking a bad UI interaction (deadlock, etc) in the application.
 *
 * @param condition boolean value to test.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_assert_always(condition) SDL_enabled_assert(condition)

/**
 * A @ref callback that fires when an SDL assertion fails.
 *
 * @param data a pointer to the SDL_AssertData structure corresponding to the
 *             current assertion.
 * @param userdata what was passed as `userdata` to SDL_SetAssertionHandler().
 * @returns an SDL_AssertState value indicating how to handle the failure.
 *
 * @threadsafety This callback may be called from any thread that triggers an
 *               assert at any time.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using AssertionHandler = SDL_AssertionHandler;

/**
 * Set an application-defined assertion handler.
 *
 * This function allows an application to show its own assertion UI and/or
 * force the response to an assertion failure. If the application doesn't
 * provide this, SDL will try to do the right thing, popping up a
 * system-specific GUI dialog, and probably minimizing any fullscreen windows.
 *
 * This callback may fire from any thread, but it runs wrapped in a mutex, so
 * it will only fire from one thread at a time.
 *
 * This callback is NOT reset to SDL's internal handler upon SDL_Quit()!
 *
 * @param handler the SDL_AssertionHandler function to call when an assertion
 *                fails or NULL for the default handler.
 * @param userdata a pointer that is passed to `handler`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_GetAssertionHandler
 */
inline void SetAssertionHandler(AssertionHandler handler, void* userdata)
{
  return SDL_SetAssertionHandler(handler, userdata);
}

/**
 * Get the default assertion handler.
 *
 * This returns the function pointer that is called by default when an
 * assertion is triggered. This is an internal function provided by SDL, that
 * is used for assertions when SDL_SetAssertionHandler() hasn't been used to
 * provide a different function.
 *
 * @returns the default SDL_AssertionHandler that is called when an assert
 *          triggers.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_GetAssertionHandler
 */
inline AssertionHandler GetDefaultAssertionHandler()
{
  return SDL_GetDefaultAssertionHandler();
}

/**
 * Get the current assertion handler.
 *
 * This returns the function pointer that is called when an assertion is
 * triggered. This is either the value last passed to
 * SDL_SetAssertionHandler(), or if no application-specified function is set,
 * is equivalent to calling SDL_GetDefaultAssertionHandler().
 *
 * The parameter `puserdata` is a pointer to a void*, which will store the
 * "userdata" pointer that was passed to SDL_SetAssertionHandler(). This value
 * will always be NULL for the default handler. If you don't care about this
 * data, it is safe to pass a NULL pointer to this function to ignore it.
 *
 * @param puserdata pointer which is filled with the "userdata" pointer that
 *                  was passed to SDL_SetAssertionHandler().
 * @returns the SDL_AssertionHandler that is called when an assert triggers.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_SetAssertionHandler
 */
inline AssertionHandler GetAssertionHandler(void** puserdata)
{
  return SDL_GetAssertionHandler(puserdata);
}

/**
 * Get a list of all assertion failures.
 *
 * This function gets all assertions triggered since the last call to
 * SDL_ResetAssertionReport(), or the start of the program.
 *
 * The proper way to examine this data looks something like this:
 *
 * ```c
 * const SDL_AssertData *item = SDL_GetAssertionReport();
 * while (item) {
 *    printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\@n",
 *           item->condition, item->function, item->filename,
 *           item->linenum, item->trigger_count,
 *           item->always_ignore ? "yes" : "no");
 *    item = item->next;
 * }
 * ```
 *
 * @returns a list of all failed assertions or NULL if the list is empty. This
 *          memory should not be modified or freed by the application. This
 *          pointer remains valid until the next call to SDL_Quit() or
 *          SDL_ResetAssertionReport().
 *
 * @threadsafety This function is not thread safe. Other threads calling
 *               SDL_ResetAssertionReport() simultaneously, may render the
 *               returned pointer invalid.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_ResetAssertionReport
 */
inline const AssertData* GetAssertionReport()
{
  return SDL_GetAssertionReport();
}

/**
 * Clear the list of all assertion failures.
 *
 * This function will clear the list of all assertions triggered up to that
 * point. Immediately following this call, SDL_GetAssertionReport will return
 * no items. In addition, any previously-triggered assertions will be reset to
 * a trigger_count of zero, and their always_ignore state will be false.
 *
 * @threadsafety This function is not thread safe. Other threads triggering an
 *               assertion, or simultaneously calling this function may cause
 *               memory leaks or crashes.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_GetAssertionReport
 */
inline void ResetAssertionReport() { return SDL_ResetAssertionReport(); }

#endif // SDL3PP_DOC

/// @}

/**
 *
 * @defgroup CategoryAtomic Atomic Operations
 *
 * Atomic operations.
 *
 * IMPORTANT: If you are not an expert in concurrent lockless programming, you
 * should not be using any functions in this file. You should be protecting
 * your data structures with full mutexes instead.
 *
 * ***Seriously, here be dragons!***
 *
 * You can find out a little more about lockless programming and the subtle
 * issues that can arise here:
 * https://learn.microsoft.com/en-us/windows/win32/dxtecharts/lockless-programming
 *
 * There's also lots of good information here:
 *
 * - https://www.1024cores.net/home/lock-free-algorithms
 * - https://preshing.com/
 *
 * These operations may or may not actually be implemented using processor
 * specific atomic operations. When possible they are implemented as true
 * processor specific atomic operations. When that is not possible the are
 * implemented using locks that *do* use the available atomic operations.
 *
 * All of the atomic operations that modify memory are full memory barriers.
 *
 * @{
 */

/**
 * Insert a memory release barrier (function version).
 *
 * Please refer to SDL_MemoryBarrierRelease for details. This is a function
 * version, which might be useful if you need to use this functionality from a
 * scripting language, etc. Also, some of the macro versions call this
 * function behind the scenes, where more heavy lifting can happen inside of
 * SDL. Generally, though, an app written in C/C++/etc should use the macro
 * version, as it will be more efficient.
 *
 * @threadsafety Obviously this function is safe to use from any thread at any
 *               time, but if you find yourself needing this, you are probably
 *               dealing with some very sensitive code; be careful!
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_MemoryBarrierRelease
 */
inline void MemoryBarrierRelease() { SDL_MemoryBarrierReleaseFunction(); }

/**
 * Insert a memory acquire barrier (function version).
 *
 * Please refer to SDL_MemoryBarrierRelease for details. This is a function
 * version, which might be useful if you need to use this functionality from a
 * scripting language, etc. Also, some of the macro versions call this
 * function behind the scenes, where more heavy lifting can happen inside of
 * SDL. Generally, though, an app written in C/C++/etc should use the macro
 * version, as it will be more efficient.
 *
 * @threadsafety Obviously this function is safe to use from any thread at any
 *               time, but if you find yourself needing this, you are probably
 *               dealing with some very sensitive code; be careful!
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_MemoryBarrierAcquire
 */
inline void MemoryBarrierAcquire() { SDL_MemoryBarrierAcquireFunction(); }

#ifdef SDL3PP_DOC

/**
 * Mark a compiler barrier.
 *
 * A compiler barrier prevents the compiler from reordering reads and writes
 * to globally visible variables across the call.
 *
 * This macro only prevents the compiler from reordering reads and writes, it
 * does not prevent the CPU from reordering reads and writes. However, all of
 * the atomic operations that modify memory are full memory barriers.
 *
 * @threadsafety Obviously this macro is safe to use from any thread at any
 *               time, but if you find yourself needing this, you are probably
 *               dealing with some very sensitive code; be careful!
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_CompilerBarrier() DoCompilerSpecificReadWriteBarrier()

/**
 * Insert a memory release barrier (macro version).
 *
 * Memory barriers are designed to prevent reads and writes from being
 * reordered by the compiler and being seen out of order on multi-core CPUs.
 *
 * A typical pattern would be for thread A to write some data and a flag, and
 * for thread B to read the flag and get the data. In this case you would
 * insert a release barrier between writing the data and the flag,
 * guaranteeing that the data write completes no later than the flag is
 * written, and you would insert an acquire barrier between reading the flag
 * and reading the data, to ensure that all the reads associated with the flag
 * have completed.
 *
 * In this pattern you should always see a release barrier paired with an
 * acquire barrier and you should gate the data reads/writes with a single
 * flag variable.
 *
 * For more information on these semantics, take a look at the blog post:
 * http://preshing.com/20120913/acquire-and-release-semantics
 *
 * This is the macro version of this functionality; if possible, SDL will use
 * compiler intrinsics or inline assembly, but some platforms might need to
 * call the function version of this, MemoryBarrierRelease to do
 * the heavy lifting. Apps that can use the macro should favor it over the
 * function.
 *
 * @threadsafety Obviously this macro is safe to use from any thread at any
 *               time, but if you find yourself needing this, you are probably
 *               dealing with some very sensitive code; be careful!
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_MemoryBarrierAcquire
 * @sa MemoryBarrierRelease
 */
#define SDL_MemoryBarrierRelease() SDL_MemoryBarrierReleaseFunction()

/**
 * Insert a memory acquire barrier (macro version).
 *
 * Please see SDL_MemoryBarrierRelease for the details on what memory barriers
 * are and when to use them.
 *
 * This is the macro version of this functionality; if possible, SDL will use
 * compiler intrinsics or inline assembly, but some platforms might need to
 * call the function version of this, MemoryBarrierAcquire, to do
 * the heavy lifting. Apps that can use the macro should favor it over the
 * function.
 *
 * @threadsafety Obviously this macro is safe to use from any thread at any
 *               time, but if you find yourself needing this, you are probably
 *               dealing with some very sensitive code; be careful!
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_MemoryBarrierRelease
 * @sa MemoryBarrierAcquire
 */
#define SDL_MemoryBarrierAcquire() SDL_MemoryBarrierAcquireFunction()

/**
 * A macro to insert a CPU-specific "pause" instruction into the program.
 *
 * This can be useful in busy-wait loops, as it serves as a hint to the CPU as
 * to the program's intent; some CPUs can use this to do more efficient
 * processing. On some platforms, this doesn't do anything, so using this
 * macro might just be a harmless no-op.
 *
 * Note that if you are busy-waiting, there are often more-efficient
 * approaches with other synchronization primitives: mutexes, semaphores,
 * condition variables, etc.
 *
 * @threadsafety This macro is safe to use from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_CPUPauseInstruction()                                              \
  DoACPUPauseInACompilerAndArchitectureSpecificWay

#endif

/**
 * A type representing an atomic integer value.
 *
 * This can be used to manage a value that is synchronized across multiple
 * CPUs without a race condition; when an app sets a value with
 * AtomicInt.Set all other threads, regardless of the CPU it is running on,
 * will see that value when retrieved with AtomicInt.Get, regardless of CPU
 * caches, etc.
 *
 * This is also useful for atomic compare-and-swap operations: a thread can
 * change the value as long as its current value matches expectations. When
 * done in a loop, one can guarantee data consistency across threads without a
 * lock (but the usual warnings apply: if you don't know what you're doing, or
 * you don't do it carefully, you can confidently cause any number of
 * disasters with this, so in most cases, you _should_ use a mutex instead of
 * this!).
 *
 * This is a struct so people don't accidentally use numeric operations on it
 * directly. You have to use SDL atomic functions.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa AtomicInt.CompareAndSwap
 * @sa AtomicInt.Get
 * @sa AtomicInt.Set
 * @sa AtomicInt.Add
 */
class AtomicInt
{
  SDL_AtomicInt m_value;

public:
  /// Constructor
  constexpr AtomicInt(int value = 0)
    : m_value(value)
  {
  }

  AtomicInt(const AtomicInt& value) = delete;

  AtomicInt& operator=(const AtomicInt& value) = delete;

  /// Convert to underlying type
  constexpr operator SDL_AtomicInt*() { return &m_value; }

  /**
   * Set an atomic variable to a new value if it is currently an old value.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param oldval the old value.
   * @param newval the new value.
   * @returns true if the atomic variable was set, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicInt.Get
   * @sa AtomicInt.Set
   */
  bool CompareAndSwap(int oldval, int newval)
  {
    return SDL_CompareAndSwapAtomicInt(&m_value, oldval, newval);
  }

  /**
   * Set an atomic variable to a value.
   *
   * This function also acts as a full memory barrier.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param v the desired value.
   * @returns the previous value of the atomic variable.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicInt.Get
   */
  int Set(int v) { return SDL_SetAtomicInt(&m_value, v); }

  /**
   * Get the value of an atomic variable.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @returns the current value of an atomic variable.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicInt.Set
   */
  int Get() { return SDL_GetAtomicInt(&m_value); }

  /**
   * Add to an atomic variable.
   *
   * This function also acts as a full memory barrier.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param v the desired value to add.
   * @returns the previous value of the atomic variable.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicInt.AtomicDecRef
   * @sa AtomicInt.AtomicIncRef
   */
  int Add(int v) { return SDL_AddAtomicInt(&m_value, v); }

  /**
   * Increment an atomic variable used as a reference count.
   *
   * ***Note: If you don't know what this macro is for, you shouldn't use it!***
   *
   * @returns the previous value of the atomic variable.
   *
   * @threadsafety It is safe to call this macro from any thread.
   *
   * @since This macro is available since SDL 3.2.0.
   *
   * @sa AtomicInt.AtomicDecRef
   */
  bool AtomicIncRef() { return SDL_AtomicIncRef(&m_value); }

  /**
   * Decrement an atomic variable used as a reference count.
   *
   * ***Note: If you don't know what this macro is for, you shouldn't use it!***
   *
   * @returns true if the variable reached zero after decrementing, false
   *          otherwise.
   *
   * @threadsafety It is safe to call this macro from any thread.
   *
   * @since This macro is available since SDL 3.2.0.
   *
   * @sa AtomicInt.AtomicIncRef
   */
  bool AtomicDecRef() { return SDL_AtomicDecRef(&m_value); }
};

/**
 * A type representing an atomic unsigned 32-bit value.
 *
 * This can be used to manage a value that is synchronized across multiple
 * CPUs without a race condition; when an app sets a value with
 * AtomicU32.Set all other threads, regardless of the CPU it is running on,
 * will see that value when retrieved with AtomicU32.Get, regardless of CPU
 * caches, etc.
 *
 * This is also useful for atomic compare-and-swap operations: a thread can
 * change the value as long as its current value matches expectations. When
 * done in a loop, one can guarantee data consistency across threads without a
 * lock (but the usual warnings apply: if you don't know what you're doing, or
 * you don't do it carefully, you can confidently cause any number of
 * disasters with this, so in most cases, you _should_ use a mutex instead of
 * this!).
 *
 * This is a struct so people don't accidentally use numeric operations on it
 * directly. You have to use SDL atomic functions.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa AtomicU32.CompareAndSwap
 * @sa AtomicU32.Get
 * @sa AtomicU32.Set
 */
class AtomicU32
{
  SDL_AtomicU32 m_value;

public:
  /// Constructor
  constexpr AtomicU32(Uint32 value = 0)
    : m_value(value)
  {
  }

  AtomicU32(const AtomicU32& value) = delete;

  AtomicU32& operator=(const AtomicU32& value) = delete;

  /// Convert to underlying type
  constexpr operator SDL_AtomicU32*() { return &m_value; }

  /**
   * Set an atomic variable to a new value if it is currently an old value.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param oldval the old value.
   * @param newval the new value.
   * @returns true if the atomic variable was set, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicU32.Get
   * @sa AtomicU32.Set
   */
  bool CompareAndSwap(Uint32 oldval, Uint32 newval)
  {
    return SDL_CompareAndSwapAtomicU32(&m_value, oldval, newval);
  }

  /**
   * Set an atomic variable to a value.
   *
   * This function also acts as a full memory barrier.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param v the desired value.
   * @returns the previous value of the atomic variable.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicU32.Get
   */
  Uint32 Set(Uint32 v) { return SDL_SetAtomicU32(&m_value, v); }

  /**
   * Get the value of an atomic variable.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @returns the current value of an atomic variable.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicU32.Set
   */
  Uint32 Get() { return SDL_GetAtomicU32(&m_value); }
};

/// Type representing an atomic pointer
template<class T>
class AtomicPointer
{
  T* m_value;

public:
  /// Constructor
  constexpr AtomicPointer(T* value = nullptr)
    : m_value(value)
  {
  }

  AtomicPointer(const AtomicPointer& value) = delete;

  AtomicPointer& operator=(const AtomicPointer& value) = delete;

  /**
   * Set a pointer to a new value if it is currently an old value.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param oldval the old pointer value.
   * @param newval the new pointer value.
   * @returns true if the pointer was set, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicInt.CompareAndSwap
   * @sa AtomicPointer.Get
   * @sa AtomicPointer.Set
   */
  bool CompareAndSwap(T* oldval, T* newval)
  {
    return SDL_CompareAndSwapAtomicPointer(&m_value, oldval, newval);
  }

  /**
   * Set a pointer to a value atomically.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @param v the desired pointer value.
   * @returns the previous value of the pointer.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicPointer.CompareAndSwap
   * @sa AtomicPointer.Get
   */
  T* Set(T* v) { return SDL_SetAtomicPointer(&m_value, v); }

  /**
   * Get the value of a pointer atomically.
   *
   * ***Note: If you don't know what this function is for, you shouldn't use
   * it!***
   *
   * @returns the current value of a pointer.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AtomicPointer.CompareAndSwap
   * @sa AtomicPointer.Set
   */
  T* Get() { return SDL_GetAtomicPointer(&m_value); }
};

/// @}

/**
 * @defgroup CategoryBits Bit Manipulation
 *
 * Functions for fiddling with bits and bitmasks.
 *
 * @{
 */

/**
 * Get the index of the most significant (set) bit in a 32-bit number.
 *
 * Result is undefined when called with 0. This operation can also be stated
 * as "count leading zeroes" and "log base 2".
 *
 * Note that this is a forced-inline function in a header, and not a public
 * API function available in the SDL library (which is to say, the code is
 * embedded in the calling program and the linker and dynamic loader will not
 * be able to find this function inside SDL itself).
 *
 * @param x the 32-bit value to examine.
 * @returns the index of the most significant bit, or -1 if the value is 0.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr int MostSignificantBitIndex32(Uint32 x)
{
  return SDL_MostSignificantBitIndex32(x);
}

/**
 * Determine if a unsigned 32-bit value has exactly one bit set.
 *
 * If there are no bits set (`x` is zero), or more than one bit set, this
 * returns false. If any one bit is exclusively set, this returns true.
 *
 * Note that this is a forced-inline function in a header, and not a public
 * API function available in the SDL library (which is to say, the code is
 * embedded in the calling program and the linker and dynamic loader will not
 * be able to find this function inside SDL itself).
 *
 * @param x the 32-bit value to examine.
 * @returns true if exactly one bit is set in `x`, false otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr bool HasExactlyOneBitSet32(Uint32 x)
{
  return SDL_HasExactlyOneBitSet32(x);
}

/// @}

/**
 * @defgroup CategoryBlendmode Blend modes
 *
 * Blend modes decide how two colors will mix together. There are both
 * standard modes for basic needs and a means to create custom modes,
 * dictating what sort of math to do on what color components.
 *
 * @{
 */

/**
 * @name BlendModes
 *
 * @{
 */

/**
 * A set of blend modes used in drawing operations.
 *
 * These predefined blend modes are supported everywhere.
 *
 * Additional values may be obtained from ComposeCustomBlendMode().
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa ComposeCustomBlendMode
 */
using BlendMode = Uint32;

/**
 * no blending: dstRGBA = srcRGBA
 */
constexpr BlendMode BLENDMODE_NONE = SDL_BLENDMODE_NONE;

/**
 * alpha blending: dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA)), dstA = srcA +
 * (dstA * (1-srcA))
 */
constexpr BlendMode BLENDMODE_BLEND = SDL_BLENDMODE_BLEND;

/**
 * pre-multiplied alpha blending: dstRGBA = srcRGBA + (dstRGBA * (1-srcA))
 */
constexpr BlendMode BLENDMODE_BLEND_PREMULTIPLIED =
  SDL_BLENDMODE_BLEND_PREMULTIPLIED;

/**
 * additive blending: dstRGB = (srcRGB * srcA) + dstRGB, dstA = dstA
 */
constexpr BlendMode BLENDMODE_ADD = SDL_BLENDMODE_ADD;

/**
 * pre-multiplied additive blending: dstRGB = srcRGB + dstRGB, dstA = dstA
 */
constexpr BlendMode BLENDMODE_ADD_PREMULTIPLIED =
  SDL_BLENDMODE_ADD_PREMULTIPLIED;

/**
 * color modulate: dstRGB = srcRGB * dstRGB, dstA = dstA
 */
constexpr BlendMode BLENDMODE_MOD = SDL_BLENDMODE_MOD;

/**
 * color multiply: dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA)), dstA = dstA
 */
constexpr BlendMode BLENDMODE_MUL = SDL_BLENDMODE_MUL;

constexpr BlendMode BLENDMODE_INVALID = SDL_BLENDMODE_INVALID; ///< INVALID

///@}

/**
 * @brief The blend operation used when combining source and destination pixel
 * components.
 *
 */
using BlendOperation = SDL_BlendOperation;

/**
 * dst + src: supported by all renderers
 */
constexpr BlendOperation BLENDOPERATION_ADD = SDL_BLENDOPERATION_ADD;

/**
 * src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan
 */
constexpr BlendOperation BLENDOPERATION_SUBTRACT = SDL_BLENDOPERATION_SUBTRACT;

/**
 * dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan
 */
constexpr BlendOperation BLENDOPERATION_REV_SUBTRACT =
  SDL_BLENDOPERATION_REV_SUBTRACT;

/**
 * min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan
 */
constexpr BlendOperation BLENDOPERATION_MINIMUM = SDL_BLENDOPERATION_MINIMUM;

/**
 * max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan
 */
constexpr BlendOperation BLENDOPERATION_MAXIMUM = SDL_BLENDOPERATION_MAXIMUM;

/**
 * @brief The normalized factor used to multiply pixel components.
 *
 * The blend factors are multiplied with the pixels from a drawing operation
 * (src) and the pixels from the render target (dst) before the blend
 * operation. The comma-separated factors listed above are always applied in
 * the component order red, green, blue, and alpha.
 *
 */
using BlendFactor = SDL_BlendFactor;

/**
 * 0, 0, 0, 0
 */
constexpr BlendFactor BLENDFACTOR_ZERO = SDL_BLENDFACTOR_ZERO;

/**
 * 1, 1, 1, 1
 */
constexpr BlendFactor BLENDFACTOR_ONE = SDL_BLENDFACTOR_ONE;

/**
 * srcR, srcG, srcB, srcA
 */
constexpr BlendFactor BLENDFACTOR_SRC_COLOR = SDL_BLENDFACTOR_SRC_COLOR;

/**
 * 1-srcR, 1-srcG, 1-srcB, 1-srcA
 */
constexpr BlendFactor BLENDFACTOR_ONE_MINUS_SRC_COLOR =
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR;

/**
 * srcA, srcA, srcA, srcA
 */
constexpr BlendFactor BLENDFACTOR_SRC_ALPHA = SDL_BLENDFACTOR_SRC_ALPHA;

/**
 * 1-srcA, 1-srcA, 1-srcA, 1-srcA
 */
constexpr BlendFactor BLENDFACTOR_ONE_MINUS_SRC_ALPHA =
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;

/**
 * dstR, dstG, dstB, dstA
 */
constexpr BlendFactor BLENDFACTOR_DST_COLOR = SDL_BLENDFACTOR_DST_COLOR;

/**
 * 1-dstR, 1-dstG, 1-dstB, 1-dstA
 */
constexpr BlendFactor BLENDFACTOR_ONE_MINUS_DST_COLOR =
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR;

/**
 * dstA, dstA, dstA, dstA
 */
constexpr BlendFactor BLENDFACTOR_DST_ALPHA = SDL_BLENDFACTOR_DST_ALPHA;

/**
 * 1-dstA, 1-dstA, 1-dstA, 1-dstA
 */
constexpr BlendFactor BLENDFACTOR_ONE_MINUS_DST_ALPHA =
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA;

/**
 * @brief Compose a custom blend mode for renderers.
 *
 * The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept
 * the SDL_BlendMode returned by this function if the renderer supports it.
 *
 * A blend mode controls how the pixels from a drawing operation (source) get
 * combined with the pixels from the render target (destination). First, the
 * components of the source and destination pixels get multiplied with their
 * blend factors. Then, the blend operation takes the two products and
 * calculates the result that will get stored in the render target.
 *
 * Expressed in pseudocode, it would look like this:
 *
 * ```c
 * dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);
 * dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);
 * ```
 *
 * Where the functions `colorOperation(src, dst)` and `alphaOperation(src,
 * dst)` can return one of the following:
 *
 * - `src + dst`
 * - `src - dst`
 * - `dst - src`
 * - `min(src, dst)`
 * - `max(src, dst)`
 *
 * The red, green, and blue components are always multiplied with the first,
 * second, and third components of the SDL_BlendFactor, respectively. The
 * fourth component is not used.
 *
 * The alpha component is always multiplied with the fourth component of the
 * SDL_BlendFactor. The other components are not used in the alpha
 * calculation.
 *
 * Support for these blend modes varies for each renderer. To check if a
 * specific SDL_BlendMode is supported, create a renderer and pass it to
 * either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will
 * return with an error if the blend mode is not supported.
 *
 * This list describes the support of custom blend modes for each renderer.
 * All renderers support the four blend modes listed in the SDL_BlendMode
 * enumeration.
 *
 * - **direct3d**: Supports all operations with all factors. However, some
 *   factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and
 *   `SDL_BLENDOPERATION_MAXIMUM`.
 * - **direct3d11**: Same as Direct3D 9.
 * - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all
 *   factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly here.
 * - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,
 *   `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`
 *   operations with all factors.
 * - **psp**: No custom blend mode support.
 * - **software**: No custom blend mode support.
 *
 * Some renderers do not provide an alpha component for the default render
 * target. The `SDL_BLENDFACTOR_DST_ALPHA` and
 * `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this
 * case.
 *
 * @param srcColorFactor the SDL_BlendFactor applied to the red, green, and
 *                       blue components of the source pixels.
 * @param dstColorFactor the SDL_BlendFactor applied to the red, green, and
 *                       blue components of the destination pixels.
 * @param colorOperation the SDL_BlendOperation used to combine the red,
 *                       green, and blue components of the source and
 *                       destination pixels.
 * @param srcAlphaFactor the SDL_BlendFactor applied to the alpha component of
 *                       the source pixels.
 * @param dstAlphaFactor the SDL_BlendFactor applied to the alpha component of
 *                       the destination pixels.
 * @param alphaOperation the SDL_BlendOperation used to combine the alpha
 *                       component of the source and destination pixels.
 * @returns an SDL_BlendMode that represents the chosen factors and
 *          operations.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 */
inline BlendMode ComposeCustomBlendMode(BlendFactor srcColorFactor,
                                        BlendFactor dstColorFactor,
                                        BlendOperation colorOperation,
                                        BlendFactor srcAlphaFactor,
                                        BlendFactor dstAlphaFactor,
                                        BlendOperation alphaOperation)
{
  return SDL_ComposeCustomBlendMode(srcColorFactor,
                                    dstColorFactor,
                                    colorOperation,
                                    srcAlphaFactor,
                                    dstAlphaFactor,
                                    alphaOperation);
}
/** @} */

/**
 * @defgroup CategoryCPUInfo CPU Feature Detection
 *
 * CPU feature detection for SDL.
 *
 * These functions are largely concerned with reporting if the system has
 * access to various SIMD instruction sets, but also has other important info
 * to share, such as system RAM size and number of logical CPU cores.
 *
 * CPU instruction set checks, like HasSSE() and HasNEON(), are
 * available on all platforms, even if they don't make sense (an ARM processor
 * will never have SSE and an x86 processor will never have NEON, for example,
 * but these functions still exist and will simply return false in these
 * cases).
 *
 * @{
 */

/**
 * A guess for the cacheline size used for padding.
 *
 * Most x86 processors have a 64 byte cache line. The 64-bit PowerPC
 * processors have a 128 byte cache line. We use the larger value to be
 * generally safe.
 *
 * @since This constant is available since SDL 3.2.0.
 */
constexpr int CACHELINE_SIZE = SDL_CACHELINE_SIZE;

/**
 * Get the number of logical CPU cores available.
 *
 * @returns the total number of logical CPU cores. On CPUs that include
 *          technologies such as hyperthreading, the number of logical cores
 *          may be more than the number of physical cores.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetNumLogicalCPUCores() { return SDL_GetNumLogicalCPUCores(); }

/**
 * Determine the L1 cache line size of the CPU.
 *
 * This is useful for determining multi-threaded structure padding or SIMD
 * prefetch sizes.
 *
 * @returns the L1 cache line size of the CPU, in bytes.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetCPUCacheLineSize() { return SDL_GetCPUCacheLineSize(); }

/**
 * Determine whether the CPU has AltiVec features.
 *
 * This always returns false on CPUs that aren't using PowerPC instruction
 * sets.
 *
 * @returns true if the CPU has AltiVec features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool HasAltiVec() { return SDL_HasAltiVec(); }

/**
 * Determine whether the CPU has MMX features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has MMX features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool HasMMX() { return SDL_HasMMX(); }

/**
 * Determine whether the CPU has SSE features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has SSE features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasSSE2()
 * @sa HasSSE3()
 * @sa HasSSE41()
 * @sa HasSSE42()
 */
inline bool HasSSE() { return SDL_HasSSE(); }

/**
 * Determine whether the CPU has SSE2 features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has SSE2 features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasSSE()
 * @sa HasSSE3()
 * @sa HasSSE41()
 * @sa HasSSE42()
 */
inline bool HasSSE2() { return SDL_HasSSE2(); }

/**
 * Determine whether the CPU has SSE3 features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has SSE3 features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasSSE()
 * @sa HasSSE2()
 * @sa HasSSE41()
 * @sa HasSSE42()
 */
inline bool HasSSE3() { return SDL_HasSSE3(); }

/**
 * Determine whether the CPU has SSE4.1 features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has SSE4.1 features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasSSE()
 * @sa HasSSE2()
 * @sa HasSSE3()
 * @sa HasSSE42()
 */
inline bool HasSSE41() { return SDL_HasSSE41(); }

/**
 * Determine whether the CPU has SSE4.2 features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has SSE4.2 features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasSSE()
 * @sa HasSSE2()
 * @sa HasSSE3()
 * @sa HasSSE41()
 */
inline bool HasSSE42() { return SDL_HasSSE42(); }

/**
 * Determine whether the CPU has AVX features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has AVX features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasAVX2()
 * @sa HasAVX512F()
 */
inline bool HasAVX() { return SDL_HasAVX(); }

/**
 * Determine whether the CPU has AVX2 features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has AVX2 features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasAVX()
 * @sa HasAVX512F()
 */
inline bool HasAVX2() { return SDL_HasAVX2(); }

/**
 * Determine whether the CPU has AVX-512F (foundation) features.
 *
 * This always returns false on CPUs that aren't using Intel instruction sets.
 *
 * @returns true if the CPU has AVX-512F features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasAVX()
 * @sa HasAVX2()
 */
inline bool HasAVX512F() { return SDL_HasAVX512F(); }

/**
 * Determine whether the CPU has ARM SIMD (ARMv6) features.
 *
 * This is different from ARM NEON, which is a different instruction set.
 *
 * This always returns false on CPUs that aren't using ARM instruction sets.
 *
 * @returns true if the CPU has ARM SIMD features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasNEON()
 */
inline bool HasARMSIMD() { return SDL_HasARMSIMD(); }

/**
 * Determine whether the CPU has NEON (ARM SIMD) features.
 *
 * This always returns false on CPUs that aren't using ARM instruction sets.
 *
 * @returns true if the CPU has ARM NEON features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool HasNEON() { return SDL_HasNEON(); }

/**
 * Determine whether the CPU has LSX (LOONGARCH SIMD) features.
 *
 * This always returns false on CPUs that aren't using LOONGARCH instruction
 * sets.
 *
 * @returns true if the CPU has LOONGARCH LSX features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool HasLSX() { return SDL_HasLSX(); }

/**
 * Determine whether the CPU has LASX (LOONGARCH SIMD) features.
 *
 * This always returns false on CPUs that aren't using LOONGARCH instruction
 * sets.
 *
 * @returns true if the CPU has LOONGARCH LASX features or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool HasLASX() { return SDL_HasLASX(); }

/**
 * Get the amount of RAM configured in the system.
 *
 * @returns the amount of RAM configured in the system in MiB.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetSystemRAM() { return SDL_GetSystemRAM(); }

/**
 * Report the alignment this system needs for SIMD allocations.
 *
 * This will return the minimum number of bytes to which a pointer must be
 * aligned to be compatible with SIMD instructions on the current machine. For
 * example, if the machine supports SSE only, it will return 16, but if it
 * supports AVX-512F, it'll return 64 (etc). This only reports values for
 * instruction sets SDL knows about, so if your SDL build doesn't have
 * HasAVX512F(), then it might return 16 for the SSE support it sees and
 * not 64 for the AVX-512 instructions that exist but SDL doesn't know about.
 * Plan accordingly.
 *
 * @returns the alignment in bytes needed for available, known SIMD
 *          instructions.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa aligned_alloc()
 * @sa aligned_free()
 */
inline size_t GetSIMDAlignment() { return SDL_GetSIMDAlignment(); }

/// @}

/**
 * @defgroup CategoryEndian Byte Order and Byte Swapping
 *
 * Functions converting endian-specific values to different byte orders.
 *
 * These functions either unconditionally swap byte order (Swap16,
 * Swap32, Swap64, SwapFloat), or they swap to/from the system's
 * native byte order (Swap16LE, Swap16BE, Swap32LE, Swap32BE,
 * Swap32LE, Swap32BE, SwapFloatLE, SwapFloatBE). In the
 * latter case, the functionality is provided by macros that become no-ops if
 * a swap isn't necessary: on an x86 (littleendian) processor, Swap32LE
 * does nothing, but Swap32BE() reverses the bytes of the data. On a PowerPC
 * processor (bigendian), the macros behavior is reversed.
 *
 * The swap routines are inline functions, and attempt to use compiler
 * intrinsics, inline assembly, and other magic to make byteswapping
 * efficient.
 *
 * @{
 */

#ifdef SDL3PP_DOC

/**
 * A value to represent littleendian byteorder.
 *
 * This is used with the preprocessor macro SDL_BYTEORDER, to determine a
 * platform's byte ordering:
 *
 * ```c
 * #if SDL_BYTEORDER == SDL_LIL_ENDIAN
 * SDL_Log("This system is littleendian.");
 * #endif
 * ```
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_BYTEORDER
 * @sa SDL_BIG_ENDIAN
 */
#define SDL_LIL_ENDIAN 1234

/**
 * A value to represent bigendian byteorder.
 *
 * This is used with the preprocessor macro SDL_BYTEORDER, to determine a
 * platform's byte ordering:
 *
 * ```c
 * #if SDL_BYTEORDER == SDL_BIG_ENDIAN
 * SDL_Log("This system is bigendian.");
 * #endif
 * ```
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_BYTEORDER
 * @sa SDL_LIL_ENDIAN
 */
#define SDL_BIG_ENDIAN 4321

/**
 * A macro that reports the target system's byte order.
 *
 * This is set to either SDL_LIL_ENDIAN or SDL_BIG_ENDIAN (and maybe other
 * values in the future, if something else becomes popular). This can be
 * tested with the preprocessor, so decisions can be made at compile time.
 *
 * ```c
 * #if SDL_BYTEORDER == SDL_BIG_ENDIAN
 * SDL_Log("This system is bigendian.");
 * #endif
 * ```
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_LIL_ENDIAN
 * @sa SDL_BIG_ENDIAN
 */
#define SDL_BYTEORDER SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN

/**
 * A macro that reports the target system's floating point word order.
 *
 * This is set to either SDL_LIL_ENDIAN or SDL_BIG_ENDIAN (and maybe other
 * values in the future, if something else becomes popular). This can be
 * tested with the preprocessor, so decisions can be made at compile time.
 *
 * ```c
 * #if SDL_FLOATWORDORDER == SDL_BIG_ENDIAN
 * SDL_Log("This system's floats are bigendian.");
 * #endif
 * ```
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_LIL_ENDIAN
 * @sa SDL_BIG_ENDIAN
 */
#define SDL_FLOATWORDORDER SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN

#endif // SDL3PP_DOC

/**
 * Byte-swap a floating point number.
 *
 * This will always byte-swap the value, whether it's currently in the native
 * byteorder of the system or not. You should use SDL_SwapFloatLE or
 * SDL_SwapFloatBE instead, in most cases.
 *
 * Note that this is a forced-inline function in a header, and not a public
 * API function available in the SDL library (which is to say, the code is
 * embedded in the calling program and the linker and dynamic loader will not
 * be able to find this function inside SDL itself).
 *
 * @param x the value to byte-swap.
 * @returns x, with its bytes in the opposite endian order.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr float SwapFloat(float x) { return SDL_SwapFloat(x); }

/**
 * Byte-swap an unsigned 16-bit number.
 *
 * This will always byte-swap the value, whether it's currently in the native
 * byteorder of the system or not. You should use SDL_Swap16LE or SDL_Swap16BE
 * instead, in most cases.
 *
 * Note that this is a forced-inline function in a header, and not a public
 * API function available in the SDL library (which is to say, the code is
 * embedded in the calling program and the linker and dynamic loader will not
 * be able to find this function inside SDL itself).
 *
 * @param x the value to byte-swap.
 * @returns `x`, with its bytes in the opposite endian order.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr Uint16 Swap16(Uint16 x) { return SDL_Swap16(x); }

/**
 * Byte-swap an unsigned 32-bit number.
 *
 * This will always byte-swap the value, whether it's currently in the native
 * byteorder of the system or not. You should use SDL_Swap32LE or SDL_Swap32BE
 * instead, in most cases.
 *
 * Note that this is a forced-inline function in a header, and not a public
 * API function available in the SDL library (which is to say, the code is
 * embedded in the calling program and the linker and dynamic loader will not
 * be able to find this function inside SDL itself).
 *
 * @param x the value to byte-swap.
 * @returns `x`, with its bytes in the opposite endian order.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr Uint32 Swap32(Uint32 x) { return SDL_Swap32(x); }

/**
 * Byte-swap an unsigned 64-bit number.
 *
 * This will always byte-swap the value, whether it's currently in the native
 * byteorder of the system or not. You should use SDL_Swap64LE or SDL_Swap64BE
 * instead, in most cases.
 *
 * Note that this is a forced-inline function in a header, and not a public
 * API function available in the SDL library (which is to say, the code is
 * embedded in the calling program and the linker and dynamic loader will not
 * be able to find this function inside SDL itself).
 *
 * @param x the value to byte-swap.
 * @returns `x`, with its bytes in the opposite endian order.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr Uint32 Swap64(Uint64 x) { return SDL_Swap64(x); }

/**
 * Swap a 16-bit value from littleendian to native byte order.
 *
 * If this is running on a littleendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in littleendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr Uint16 Swap16LE(Uint16 x) { return SDL_Swap16LE(x); }

/**
 * Swap a 32-bit value from littleendian to native byte order.
 *
 * If this is running on a littleendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in littleendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr Uint32 Swap32LE(Uint32 x) { return SDL_Swap32LE(x); }

/**
 * Swap a 64-bit value from littleendian to native byte order.
 *
 * If this is running on a littleendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in littleendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr Uint64 Swap64LE(Uint64 x) { return SDL_Swap64LE(x); }

/**
 * Swap a floating point value from littleendian to native byte order.
 *
 * If this is running on a littleendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in littleendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr float SwapFloatLE(float x) { return SDL_SwapFloatLE(x); }

/**
 * Swap a 16-bit value from bigendian to native byte order.
 *
 * If this is running on a bigendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in bigendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr Uint16 Swap16BE(Uint16 x) { return SDL_Swap16BE(x); }

/**
 * Swap a 32-bit value from bigendian to native byte order.
 *
 * If this is running on a bigendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in bigendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr Uint32 Swap32BE(Uint32 x) { return SDL_Swap32BE(x); }

/**
 * Swap a 64-bit value from bigendian to native byte order.
 *
 * If this is running on a bigendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in bigendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr Uint64 Swap64BE(Uint64 x) { return SDL_Swap64BE(x); }

/**
 * Swap a floating point value from bigendian to native byte order.
 *
 * If this is running on a bigendian system, `x` is returned unchanged.
 *
 * This macro never references `x` more than once, avoiding side effects.
 *
 * @param x the value to swap, in bigendian byte order.
 * @returns `x` in native byte order.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
constexpr float SwapFloatBE(float x) { return SDL_SwapFloatBE(x); }

/// @}

/**
 * @defgroup CategoryError Error Handling
 *
 * Simple error message routines for SDL.
 *
 * Most apps will interface with these APIs in exactly one function: when
 * almost any SDL function call reports failure, you can get a human-readable
 * string of the problem from GetError().
 *
 * These strings are maintained per-thread, and apps are welcome to set their
 * own errors, which is popular when building libraries on top of SDL for
 * other apps to consume. These strings are set by calling SDL_SetError().
 *
 * A common usage pattern is to have a function that returns true for success
 * and false for failure, and do this when something fails:
 *
 * ```c
 * if (something_went_wrong) {
 *    return SetError("The thing broke in this specific way: %d", errcode);
 * }
 * ```
 *
 * It's also common to just return `false` in this case if the failing thing
 * is known to call SetError(), so errors simply propagate through.
 *
 * @{
 */

/**
 * Set the SDL error message for the current thread.
 *
 * Calling this function will replace any previous error message that was set.
 *
 * This function always returns false, since SDL frequently uses false to
 * signify a failing result, leading to this idiom:
 *
 * ```c
 * if (error_code) {
 *     return SetError("This operation has failed: {}", error_code);
 * }
 * ```
 *
 * @param message the error message
 * @returns false.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ClearError
 * @sa GetError
 * @sa SetError
 */
inline bool SetErrorUnformatted(StringParam message)
{
  return SDL_SetError("%s", static_cast<const char*>(message));
}

/**
 * Set the SDL error message for the current thread.
 *
 * Calling this function will replace any previous error message that was set.
 *
 * This function always returns false, since SDL frequently uses false to
 * signify a failing result, leading to this idiom:
 *
 * ```c
 * if (error_code) {
 *     return SetError("This operation has failed: {}", error_code);
 * }
 * ```
 *
 * @tparam ARGS the formatting parameters
 * @param fmt a
 * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
 * style message format string
 * @param args additional parameters matching the `{}` tokens in the format
 * string, if any.
 * @returns false.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat formatted-string
 *
 * @sa formatted-string
 * @sa ClearError
 * @sa GetError
 * @sa SetError
 * @return false
 */
template<class... ARGS>
inline bool SetError(std::string_view fmt, ARGS... args)
{
  return SetError(
    std::vformat(fmt, std::make_format_args(std::forward<ARGS>(args)...)));
}

/**
 * Set an error indicating that memory allocation failed.
 *
 * This function does not do any memory allocation.
 *
 * @returns false.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool OutOfMemory() { return SDL_OutOfMemory(); }

/**
 * @brief Retrieve a message about the last error that occurred on the current
 * thread.
 *
 * It is possible for multiple errors to occur before calling GetError().
 * Only the last error is returned.
 *
 * The message is only applicable when an SDL function has signaled an error.
 * You must check the return values of SDL function calls to determine when to
 * appropriately call GetError(). You should *not* use the results of
 * GetError() to decide if an error has occurred! Sometimes SDL will set
 * an error string even when reporting success.
 *
 * SDL will *not* clear the error string for successful API calls. You *must*
 * check return values for failure cases before you can assume the error
 * string applies.
 *
 * Error strings are set per-thread, so an error set in a different thread
 * will not interfere with the current thread's operation.
 *
 * The returned value is a thread-local string which will remain valid until
 * the current thread's error string is changed. The caller should make a copy
 * if the value is needed after the next SDL API call.
 *
 * @return a message with information about the specific error that occurred,
 *          or an empty string if there hasn't been an error message set since
 *          the last call to ClearError().
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @sa ClearError()
 */
inline const char* GetError() { return SDL_GetError(); }

/**
 * @brief Clear any previous error message for this thread.
 *
 * @returns true.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @sa GetError()
 */
inline bool ClearError() { return SDL_ClearError(); }

#ifdef SDL3PP_DOC

/**
 * A macro to standardize error reporting on unsupported operations.
 *
 * This simply calls SDL_SetError() with a standardized error string, for
 * convenience, consistency, and clarity.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_Unsupported() SDL_SetError("That operation is not supported")

/**
 * A macro to standardize error reporting on unsupported operations.
 *
 * This simply calls SDL_SetError() with a standardized error string, for
 * convenience, consistency, and clarity.
 *
 * A common usage pattern inside SDL is this:
 *
 * ```c
 * bool MyFunction(const char *str) {
 *     if (!str) {
 *         return SDL_InvalidParamError("str");  // returns false.
 *     }
 *     DoSomething(str);
 *     return true;
 * }
 * ```
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_InvalidParamError(param)                                           \
  SDL_SetError("Parameter '%s' is invalid", (param))

#endif // SDL3PP_DOC

/** @} */

/**
 * @defgroup CategoryGUID GUIDs
 *
 * A GUID is a 128-bit value that represents something that is uniquely
 * identifiable by this value: "globally unique."
 *
 * SDL provides functions to convert a GUID to/from a string.
 * @{
 */

/**
 * A GUID is a 128-bit identifier for an input device that identifies that
 * device across runs of SDL programs on the same platform.
 *
 * If the device is detached and then re-attached to a different port, or if
 * the base system is rebooted, the device should still report the same GUID.
 *
 * GUIDs are as precise as possible but are not guaranteed to distinguish
 * physically distinct but equivalent devices. For example, two game
 * controllers from the same vendor with the same product ID and revision may
 * have the same GUID.
 *
 * GUIDs may be platform-dependent (i.e., the same device may report different
 * GUIDs on different operating systems).
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat wrap-extending-struct
 *
 * @sa wrap-extending-struct
 */
struct GUID : SDL_GUID
{
  constexpr GUID()
    : SDL_GUID({0})
  {
  }

  /// Constructor from underling type
  constexpr GUID(SDL_GUID guid)
    : SDL_GUID(guid)
  {
  }

  /**
   * Convert a GUID string into a GUID structure.
   *
   * Performs no error checking. If this function is given a string containing
   * an invalid GUID, the function will silently succeed, but the GUID generated
   * will not be useful.
   *
   * @param pchGUID string containing an ASCII representation of a GUID.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GUID.ToString
   */
  GUID(StringParam pchGUID)
    : SDL_GUID(SDL_StringToGUID(pchGUID))
  {
  }

  /**
   * Get an ASCII string representation for a given GUID.
   *
   * @returns pszGUID the ASCII string representation for
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GUID.GUID
   */
  std::string ToString() const
  {
    std::string result(32, ' ');
    SDL_GUIDToString(*this, result.data(), 33);
    return result;
  }
};

/**
 * Get an ASCII string representation for a given SDL_GUID.
 *
 * @param guid the SDL_GUID you wish to convert to string.
 * @param pszGUID buffer in which to write the ASCII string.
 * @param cbGUID the size of pszGUID, should be at least 33 bytes.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_StringToGUID
 */
inline void GUIDToString(SDL_GUID guid, char* pszGUID, int cbGUID)
{
  return SDL_GUIDToString(guid, pszGUID, cbGUID);
}

/**
 * Convert a GUID string into a SDL_GUID structure.
 *
 * Performs no error checking. If this function is given a string containing
 * an invalid GUID, the function will silently succeed, but the GUID generated
 * will not be useful.
 *
 * @param pchGUID string containing an ASCII representation of a GUID.
 * @returns a SDL_GUID structure.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_GUIDToString
 */
inline SDL_GUID StringToGUID(StringParam pchGUID)
{
  return SDL_StringToGUID(pchGUID);
}

/// @}

/**
 * @defgroup CategoryHints Configuration Variables
 *
 * This file contains functions to set and get configuration hints, as well as
 * listing each of them alphabetically.
 *
 * The convention for naming hints is SDL_HINT_X, where "SDL_X" is the
 * environment variable that can be used to override the default.
 *
 * In general these hints are just that - they may or may not be supported or
 * applicable on any given platform, but they provide a way for an application
 * or user to give the library a hint as to how they would like the library to
 * work.
 *
 * @{
 */

#ifdef SDL3PP_DOC

/**
 * Specify the behavior of Alt+Tab while the keyboard is grabbed.
 *
 * By default, SDL emulates Alt+Tab functionality while the keyboard is
 * grabbed and your window is full-screen. This prevents the user from getting
 * stuck in your application if you've enabled keyboard grab.
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL will not handle Alt+Tab. Your application is responsible for
 *   handling Alt+Tab while the keyboard is grabbed.
 * - "1": SDL will minimize your window when Alt+Tab is pressed (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"

/**
 * A variable to control whether the SDL activity is allowed to be re-created.
 *
 * If this hint is true, the activity can be recreated on demand by the OS,
 * and Java static data and C++ static data remain with their current values.
 * If this hint is false, then SDL will call exit() when you return from your
 * main function and the application will be terminated and then started fresh
 * each time.
 *
 * The variable can be set to the following values:
 *
 * - "0": The application starts fresh at each launch. (default)
 * - "1": The application activity can be recreated by the OS.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY                               \
  "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY"

/**
 * A variable to control whether the event loop will block itself when the app
 * is paused.
 *
 * The variable can be set to the following values:
 *
 * - "0": Non blocking.
 * - "1": Blocking. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE "SDL_ANDROID_BLOCK_ON_PAUSE"

/**
 * A variable to control whether low latency audio should be enabled.
 *
 * Some devices have poor quality output when this is enabled, but this is
 * usually an improvement in audio latency.
 *
 * The variable can be set to the following values:
 *
 * - "0": Low latency audio is not enabled.
 * - "1": Low latency audio is enabled. (default)
 *
 * This hint should be set before SDL audio is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ANDROID_LOW_LATENCY_AUDIO "SDL_ANDROID_LOW_LATENCY_AUDIO"

/**
 * A variable to control whether we trap the Android back button to handle it
 * manually.
 *
 * This is necessary for the right mouse button to work on some Android
 * devices, or to be able to trap the back button for use in your code
 * reliably. If this hint is true, the back button will show up as an
 * EVENT_KEY_DOWN / EVENT_KEY_UP pair with a keycode of SCANCODE_AC_BACK.
 *
 * The variable can be set to the following values:
 *
 * - "0": Back button will be handled as usual for system. (default)
 * - "1": Back button will be trapped, allowing you to handle the key press
 *   manually. (This will also let right mouse click work on systems where the
 *   right mouse button functions as back.)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ANDROID_TRAP_BACK_BUTTON "SDL_ANDROID_TRAP_BACK_BUTTON"

/**
 * A variable setting the app ID string.
 *
 * This string is used by desktop compositors to identify and group windows
 * together, as well as match applications with associated desktop settings
 * and icons.
 *
 * This will override prop::appMetaData.IDENTIFIER_STRING, if set by the
 * application.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_APP_ID "SDL_APP_ID"

/**
 * A variable setting the application name.
 *
 * This hint lets you specify the application name sent to the OS when
 * required. For example, this will often appear in volume control applets for
 * audio streams, and in lists of applications which are inhibiting the
 * screensaver. You should use a string that describes your program ("My Game
 * 2: The Revenge")
 *
 * This will override prop::appMetaData.NAME_STRING, if set by the
 * application.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_APP_NAME "SDL_APP_NAME"

/**
 * A variable controlling whether controllers used with the Apple TV generate
 * UI events.
 *
 * When UI events are generated by controller input, the app will be
 * backgrounded when the Apple TV remote's menu button is pressed, and when
 * the pause or B buttons on gamepads are pressed.
 *
 * More information about properly making use of controllers for the Apple TV
 * can be found here:
 * https://developer.apple.com/tvos/human-interface-guidelines/remote-and-controllers/
 *
 * The variable can be set to the following values:
 *
 * - "0": Controller input does not generate UI events. (default)
 * - "1": Controller input generates UI events.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS                                 \
  "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"

/**
 * A variable controlling whether the Apple TV remote's joystick axes will
 * automatically match the rotation of the remote.
 *
 * The variable can be set to the following values:
 *
 * - "0": Remote orientation does not affect joystick axes. (default)
 * - "1": Joystick axes are based on the orientation of the remote.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION                                \
  "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"

/**
 * Specify the default ALSA audio device name.
 *
 * This variable is a specific audio device to open when the "default" audio
 * device is used.
 *
 * This hint will be ignored when opening the default playback device if
 * SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE is set, or when opening the
 * default recording device if SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE is
 * set.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 *
 * @sa SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE
 * @sa SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE
 */
#define SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE "SDL_AUDIO_ALSA_DEFAULT_DEVICE"

/**
 * Specify the default ALSA audio playback device name.
 *
 * This variable is a specific audio device to open for playback, when the
 * "default" audio device is used.
 *
 * If this hint isn't set, SDL will check SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE
 * before choosing a reasonable default.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 *
 * @sa SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE
 * @sa SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE
 */
#define SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE                            \
  "SDL_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE"

/**
 * Specify the default ALSA audio recording device name.
 *
 * This variable is a specific audio device to open for recording, when the
 * "default" audio device is used.
 *
 * If this hint isn't set, SDL will check SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE
 * before choosing a reasonable default.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 *
 * @sa SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE
 * @sa SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE
 */
#define SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE                           \
  "SDL_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE"

/**
 * A variable controlling the audio category on iOS and macOS.
 *
 * The variable can be set to the following values:
 *
 * - "ambient": Use the AVAudioSessionCategoryAmbient audio category, will be
 *   muted by the phone mute switch (default)
 * - "playback": Use the AVAudioSessionCategoryPlayback category.
 *
 * For more information, see Apple's documentation:
 * https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/AudioSessionCategoriesandModes/AudioSessionCategoriesandModes.html
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_CATEGORY "SDL_AUDIO_CATEGORY"

/**
 * A variable controlling the default audio channel count.
 *
 * If the application doesn't specify the audio channel count when opening the
 * device, this hint can be used to specify a default channel count that will
 * be used. This defaults to "1" for recording and "2" for playback devices.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_CHANNELS "SDL_AUDIO_CHANNELS"

/**
 * Specify an application icon name for an audio device.
 *
 * Some audio backends (such as Pulseaudio and Pipewire) allow you to set an
 * XDG icon name for your application. Among other things, this icon might
 * show up in a system control panel that lets the user adjust the volume on
 * specific audio streams instead of using one giant master volume slider.
 * Note that this is unrelated to the icon used by the windowing system, which
 * may be set with WindowBase.SetIcon (or via desktop file on Wayland).
 *
 * Setting this to "" or leaving it unset will have SDL use a reasonable
 * default, "applications-games", which is likely to be installed. See
 * https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html
 * and
 * https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html
 * for the relevant XDG icon specs.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME "SDL_AUDIO_DEVICE_APP_ICON_NAME"

/**
 * A variable controlling device buffer size.
 *
 * This hint is an integer > 0, that represents the size of the device's
 * buffer in sample frames (stereo audio data in 16-bit format is 4 bytes per
 * sample frame, for example).
 *
 * SDL3 generally decides this value on behalf of the app, but if for some
 * reason the app needs to dictate this (because they want either lower
 * latency or higher throughput AND ARE WILLING TO DEAL WITH what that might
 * require of the app), they can specify it.
 *
 * SDL will try to accommodate this value, but there is no promise you'll get
 * the buffer size requested. Many platforms won't honor this request at all,
 * or might adjust it.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES "SDL_AUDIO_DEVICE_SAMPLE_FRAMES"

/**
 * Specify an audio stream name for an audio device.
 *
 * Some audio backends (such as PulseAudio) allow you to describe your audio
 * stream. Among other things, this description might show up in a system
 * control panel that lets the user adjust the volume on specific audio
 * streams instead of using one giant master volume slider.
 *
 * This hints lets you transmit that information to the OS. The contents of
 * this hint are used while opening an audio device. You should use a string
 * that describes your what your program is playing ("audio stream" is
 * probably sufficient in many cases, but this could be useful for something
 * like "team chat" if you have a headset playing VoIP audio separately).
 *
 * Setting this to "" or leaving it unset will have SDL use a reasonable
 * default: "audio stream" or something similar.
 *
 * Note that while this talks about audio streams, this is an OS-level
 * concept, so it applies to a physical audio device in this case, and not an
 * SDL_AudioStream, nor an SDL logical audio device.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DEVICE_STREAM_NAME "SDL_AUDIO_DEVICE_STREAM_NAME"

/**
 * Specify an application role for an audio device.
 *
 * Some audio backends (such as Pipewire) allow you to describe the role of
 * your audio stream. Among other things, this description might show up in a
 * system control panel or software for displaying and manipulating media
 * playback/recording graphs.
 *
 * This hints lets you transmit that information to the OS. The contents of
 * this hint are used while opening an audio device. You should use a string
 * that describes your what your program is playing (Game, Music, Movie,
 * etc...).
 *
 * Setting this to "" or leaving it unset will have SDL use a reasonable
 * default: "Game" or something similar.
 *
 * Note that while this talks about audio streams, this is an OS-level
 * concept, so it applies to a physical audio device in this case, and not an
 * SDL_AudioStream, nor an SDL logical audio device.
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE "SDL_AUDIO_DEVICE_STREAM_ROLE"

/**
 * Specify the input file when recording audio using the disk audio driver.
 *
 * This defaults to "sdlaudio-in.raw"
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DISK_INPUT_FILE "SDL_AUDIO_DISK_INPUT_FILE"

/**
 * Specify the output file when playing audio using the disk audio driver.
 *
 * This defaults to "sdlaudio.raw"
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DISK_OUTPUT_FILE "SDL_AUDIO_DISK_OUTPUT_FILE"

/**
 * A variable controlling the audio rate when using the disk audio driver.
 *
 * The disk audio driver normally simulates real-time for the audio rate that
 * was specified, but you can use this variable to adjust this rate higher or
 * lower down to 0. The default value is "1.0".
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DISK_TIMESCALE "SDL_AUDIO_DISK_TIMESCALE"

/**
 * A variable that specifies an audio backend to use.
 *
 * By default, SDL will try all available audio backends in a reasonable order
 * until it finds one that can work, but this hint allows the app or user to
 * force a specific driver, such as "pipewire" if, say, you are on PulseAudio
 * but want to try talking to the lower level instead.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DRIVER "SDL_AUDIO_DRIVER"

/**
 * A variable controlling the audio rate when using the dummy audio driver.
 *
 * The dummy audio driver normally simulates real-time for the audio rate that
 * was specified, but you can use this variable to adjust this rate higher or
 * lower down to 0. The default value is "1.0".
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_DUMMY_TIMESCALE "SDL_AUDIO_DUMMY_TIMESCALE"

/**
 * A variable controlling the default audio format.
 *
 * If the application doesn't specify the audio format when opening the
 * device, this hint can be used to specify a default format that will be
 * used.
 *
 * The variable can be set to the following values:
 *
 * - "U8": Unsigned 8-bit audio
 * - "S8": Signed 8-bit audio
 * - "S16LE": Signed 16-bit little-endian audio
 * - "S16BE": Signed 16-bit big-endian audio
 * - "S16": Signed 16-bit native-endian audio (default)
 * - "S32LE": Signed 32-bit little-endian audio
 * - "S32BE": Signed 32-bit big-endian audio
 * - "S32": Signed 32-bit native-endian audio
 * - "F32LE": Floating point little-endian audio
 * - "F32BE": Floating point big-endian audio
 * - "F32": Floating point native-endian audio
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_FORMAT "SDL_AUDIO_FORMAT"

/**
 * A variable controlling the default audio frequency.
 *
 * If the application doesn't specify the audio frequency when opening the
 * device, this hint can be used to specify a default frequency that will be
 * used. This defaults to "44100".
 *
 * This hint should be set before an audio device is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_FREQUENCY "SDL_AUDIO_FREQUENCY"

/**
 * A variable that causes SDL to not ignore audio "monitors".
 *
 * This is currently only used by the PulseAudio driver.
 *
 * By default, SDL ignores audio devices that aren't associated with physical
 * hardware. Changing this hint to "1" will expose anything SDL sees that
 * appears to be an audio source or sink. This will add "devices" to the list
 * that the user probably doesn't want or need, but it can be useful in
 * scenarios where you want to hook up SDL to some sort of virtual device,
 * etc.
 *
 * The variable can be set to the following values:
 *
 * - "0": Audio monitor devices will be ignored. (default)
 * - "1": Audio monitor devices will show up in the device list.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUDIO_INCLUDE_MONITORS "SDL_AUDIO_INCLUDE_MONITORS"

/**
 * A variable controlling whether SDL updates joystick state when getting
 * input events.
 *
 * The variable can be set to the following values:
 *
 * - "0": You'll call SDL_UpdateJoysticks() manually.
 * - "1": SDL will automatically call SDL_UpdateJoysticks(). (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUTO_UPDATE_JOYSTICKS "SDL_AUTO_UPDATE_JOYSTICKS"

/**
 * A variable controlling whether SDL updates sensor state when getting input
 * events.
 *
 * The variable can be set to the following values:
 *
 * - "0": You'll call SDL_UpdateSensors() manually.
 * - "1": SDL will automatically call SDL_UpdateSensors(). (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_AUTO_UPDATE_SENSORS "SDL_AUTO_UPDATE_SENSORS"

/**
 * Prevent SDL from using version 4 of the bitmap header when saving BMPs.
 *
 * The bitmap header version 4 is required for proper alpha channel support
 * and SDL will use it when required. Should this not be desired, this hint
 * can force the use of the 40 byte header version which is supported
 * everywhere.
 *
 * The variable can be set to the following values:
 *
 * - "0": Surfaces with a colorkey or an alpha channel are saved to a 32-bit
 *   BMP file with an alpha mask. SDL will use the bitmap header version 4 and
 *   set the alpha mask accordingly. (default)
 * - "1": Surfaces with a colorkey or an alpha channel are saved to a 32-bit
 *   BMP file without an alpha mask. The alpha channel data will be in the
 *   file, but applications are going to ignore it.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_BMP_SAVE_LEGACY_FORMAT "SDL_BMP_SAVE_LEGACY_FORMAT"

/**
 * A variable that decides what camera backend to use.
 *
 * By default, SDL will try all available camera backends in a reasonable
 * order until it finds one that can work, but this hint allows the app or
 * user to force a specific target, such as "directshow" if, say, you are on
 * Windows Media Foundations but want to try DirectShow instead.
 *
 * The default value is unset, in which case SDL will try to figure out the
 * best camera backend on your behalf. This hint needs to be set before
 * InitSubSystem() is called to be useful.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_CAMERA_DRIVER "SDL_CAMERA_DRIVER"

/**
 * A variable that limits what CPU features are available.
 *
 * By default, SDL marks all features the current CPU supports as available.
 * This hint allows to limit these to a subset.
 *
 * When the hint is unset, or empty, SDL will enable all detected CPU
 * features.
 *
 * The variable can be set to a comma separated list containing the following
 * items:
 *
 * - "all"
 * - "altivec"
 * - "sse"
 * - "sse2"
 * - "sse3"
 * - "sse41"
 * - "sse42"
 * - "avx"
 * - "avx2"
 * - "avx512f"
 * - "arm-simd"
 * - "neon"
 * - "lsx"
 * - "lasx"
 *
 * The items can be prefixed by '+'/'-' to add/remove features.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_CPU_FEATURE_MASK "SDL_CPU_FEATURE_MASK"

/**
 * A variable controlling whether DirectInput should be used for controllers.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable DirectInput detection.
 * - "1": Enable DirectInput detection. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_DIRECTINPUT "SDL_JOYSTICK_DIRECTINPUT"

/**
 * A variable that specifies a dialog backend to use.
 *
 * By default, SDL will try all available dialog backends in a reasonable
 * order until it finds one that can work, but this hint allows the app or
 * user to force a specific target.
 *
 * If the specified target does not exist or is not available, the
 * dialog-related function calls will fail.
 *
 * This hint currently only applies to platforms using the generic "Unix"
 * dialog implementation, but may be extended to more platforms in the future.
 * Note that some Unix and Unix-like platforms have their own implementation,
 * such as macOS and Haiku.
 *
 * The variable can be set to the following values:
 *
 * - nullptr: Select automatically (default, all platforms)
 * - "portal": Use XDG Portals through DBus (Unix only)
 * - "zenity": Use the Zenity program (Unix only)
 *
 * More options may be added in the future.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_FILE_DIALOG_DRIVER "SDL_FILE_DIALOG_DRIVER"

/**
 * Override for Display.GetUsableBounds().
 *
 * If set, this hint will override the expected results for
 * Display.GetUsableBounds() for display index 0. Generally you don't want
 * to do this, but this allows an embedded system to request that some of the
 * screen be reserved for other uses when paired with a well-behaved
 * application.
 *
 * The contents of this hint must be 4 comma-separated integers, the first is
 * the bounds x, then y, width and height, in that order.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_DISPLAY_USABLE_BOUNDS "SDL_DISPLAY_USABLE_BOUNDS"

/**
 * Disable giving back control to the browser automatically when running with
 * asyncify.
 *
 * With -s ASYNCIFY, SDL calls emscripten_sleep during operations such as
 * refreshing the screen or polling events.
 *
 * This hint only applies to the emscripten platform.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable emscripten_sleep calls (if you give back browser control
 *   manually or use asyncify for other purposes).
 * - "1": Enable emscripten_sleep calls. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_EMSCRIPTEN_ASYNCIFY "SDL_EMSCRIPTEN_ASYNCIFY"

/**
 * Specify the CSS selector used for the "default" window/canvas.
 *
 * This hint only applies to the emscripten platform.
 *
 * The default value is "#canvas"
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR "SDL_EMSCRIPTEN_CANVAS_SELECTOR"

/**
 * Override the binding element for keyboard inputs for Emscripten builds.
 *
 * This hint only applies to the emscripten platform.
 *
 * The variable can be one of:
 *
 * - "#window": the javascript window object (default)
 * - "#document": the javascript document object
 * - "#screen": the javascript window.screen object
 * - "#canvas": the WebGL canvas element
 * - "#none": Don't bind anything at all
 * - any other string without a leading # sign applies to the element on the
 *   page with that ID.
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"

/**
 * A variable that controls whether the on-screen keyboard should be shown
 * when text input is active.
 *
 * The variable can be set to the following values:
 *
 * - "auto": The on-screen keyboard will be shown if there is no physical
 *   keyboard attached. (default)
 * - "0": Do not show the on-screen keyboard.
 * - "1": Show the on-screen keyboard, if available.
 *
 * This hint must be set before WindowBase::StartTextInput() is called
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ENABLE_SCREEN_KEYBOARD "SDL_ENABLE_SCREEN_KEYBOARD"

/**
 * A variable containing a list of evdev devices to use if udev is not
 * available.
 *
 * The list of devices is in the form:
 *
 * deviceclass:path[,deviceclass:path[,...]]
 *
 * where device class is an integer representing the SDL_UDEV_deviceclass and
 * path is the full path to the event device.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_EVDEV_DEVICES "SDL_EVDEV_DEVICES"

/**
 * A variable controlling verbosity of the logging of SDL events pushed onto
 * the internal queue.
 *
 * The variable can be set to the following values, from least to most
 * verbose:
 *
 * - "0": Don't log any events. (default)
 * - "1": Log most events (other than the really spammy ones).
 * - "2": Include mouse and finger motion events.
 *
 * This is generally meant to be used to debug SDL itself, but can be useful
 * for application developers that need better visibility into what is going
 * on in the event queue. Logged events are sent through Log(), which
 * means by default they appear on stdout on most platforms or maybe
 * OutputDebugString() on Windows, and can be funneled by the app with
 * SetLogOutputFunction(), etc.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_EVENT_LOGGING "SDL_EVENT_LOGGING"

/**
 * A variable controlling whether raising the window should be done more
 * forcefully.
 *
 * The variable can be set to the following values:
 *
 * - "0": Honor the OS policy for raising windows. (default)
 * - "1": Force the window to be raised, overriding any OS policy.
 *
 * At present, this is only an issue under MS Windows, which makes it nearly
 * impossible to programmatically move a window to the foreground, for
 * "security" reasons. See http://stackoverflow.com/a/34414846 for a
 * discussion.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_FORCE_RAISEWINDOW "SDL_FORCE_RAISEWINDOW"

/**
 * A variable controlling how 3D acceleration is used to accelerate the SDL
 * screen surface.
 *
 * SDL can try to accelerate the SDL screen surface by using streaming
 * textures with a 3D rendering engine. This variable controls whether and how
 * this is done.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable 3D acceleration
 * - "1": Enable 3D acceleration, using the default renderer. (default)
 * - "X": Enable 3D acceleration, using X where X is one of the valid
 *   rendering drivers. (e.g. "direct3d", "opengl", etc.)
 *
 * This hint should be set before calling WindowBase.GetSurface()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_FRAMEBUFFER_ACCELERATION "SDL_FRAMEBUFFER_ACCELERATION"

/**
 * A variable that lets you manually hint extra gamecontroller db entries.
 *
 * The variable should be newline delimited rows of gamecontroller config
 * data, see SDL_gamepad.h
 *
 * You can update mappings after SDL is initialized with
 * SDL_GetGamepadMappingForGUID() and SDL_AddGamepadMapping()
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GAMECONTROLLERCONFIG "SDL_GAMECONTROLLERCONFIG"

/**
 * A variable that lets you provide a file with extra gamecontroller db
 * entries.
 *
 * The file should contain lines of gamecontroller config data, see
 * SDL_gamepad.h
 *
 * You can update mappings after SDL is initialized with
 * SDL_GetGamepadMappingForGUID() and SDL_AddGamepadMapping()
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GAMECONTROLLERCONFIG_FILE "SDL_GAMECONTROLLERCONFIG_FILE"

/**
 * A variable that overrides the automatic controller type detection.
 *
 * The variable should be comma separated entries, in the form: VID/PID=type
 *
 * The VID and PID should be hexadecimal with exactly 4 digits, e.g. 0x00fd
 *
 * This hint affects what low level protocol is used with the HIDAPI driver.
 *
 * The variable can be set to the following values:
 *
 * - "Xbox360"
 * - "XboxOne"
 * - "PS3"
 * - "PS4"
 * - "PS5"
 * - "SwitchPro"
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GAMECONTROLLERTYPE "SDL_GAMECONTROLLERTYPE"

/**
 * A variable containing a list of devices to skip when scanning for game
 * controllers.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * 0xAAAA/0xBBBB,0xCCCC/0xDDDD
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES                                 \
  "SDL_GAMECONTROLLER_IGNORE_DEVICES"

/**
 * If set, all devices will be skipped when scanning for game controllers
 * except for the ones listed in this variable.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * 0xAAAA/0xBBBB,0xCCCC/0xDDDD
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT                          \
  "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"

/**
 * A variable that controls whether the device's built-in accelerometer and
 * gyro should be used as sensors for gamepads.
 *
 * The variable can be set to the following values:
 *
 * - "0": Sensor fusion is disabled
 * - "1": Sensor fusion is enabled for all controllers that lack sensors
 *
 * Or the variable can be a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * 0xAAAA/0xBBBB,0xCCCC/0xDDDD
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint should be set before a gamepad is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GAMECONTROLLER_SENSOR_FUSION "SDL_GAMECONTROLLER_SENSOR_FUSION"

/**
 * This variable sets the default text of the TextInput window on GDK
 * platforms.
 *
 * This hint is available only if SDL_GDK_TEXTINPUT defined.
 *
 * This hint should be set before calling WindowBase::StartTextInput()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT "SDL_GDK_TEXTINPUT_DEFAULT_TEXT"

/**
 * This variable sets the description of the TextInput window on GDK
 * platforms.
 *
 * This hint is available only if SDL_GDK_TEXTINPUT defined.
 *
 * This hint should be set before calling WindowBase::StartTextInput()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GDK_TEXTINPUT_DESCRIPTION "SDL_GDK_TEXTINPUT_DESCRIPTION"

/**
 * This variable sets the maximum input length of the TextInput window on GDK
 * platforms.
 *
 * The value must be a stringified integer, for example "10" to allow for up
 * to 10 characters of text input.
 *
 * This hint is available only if SDL_GDK_TEXTINPUT defined.
 *
 * This hint should be set before calling WindowBase::StartTextInput()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH "SDL_GDK_TEXTINPUT_MAX_LENGTH"

/**
 * This variable sets the input scope of the TextInput window on GDK
 * platforms.
 *
 * Set this hint to change the XGameUiTextEntryInputScope value that will be
 * passed to the window creation function. The value must be a stringified
 * integer, for example "0" for XGameUiTextEntryInputScope::Default.
 *
 * This hint is available only if SDL_GDK_TEXTINPUT defined.
 *
 * This hint should be set before calling WindowBase::StartTextInput()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GDK_TEXTINPUT_SCOPE "SDL_GDK_TEXTINPUT_SCOPE"

/**
 * This variable sets the title of the TextInput window on GDK platforms.
 *
 * This hint is available only if SDL_GDK_TEXTINPUT defined.
 *
 * This hint should be set before calling WindowBase::StartTextInput()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GDK_TEXTINPUT_TITLE "SDL_GDK_TEXTINPUT_TITLE"

/**
 * A variable to control whether HIDAPI uses libusb for device access.
 *
 * By default libusb will only be used for a few devices that require direct
 * USB access, and this can be controlled with
 * SDL_HINT_HIDAPI_LIBUSB_WHITELIST.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI will not use libusb for device access.
 * - "1": HIDAPI will use libusb for device access if available. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_HIDAPI_LIBUSB "SDL_HIDAPI_LIBUSB"

/**
 * A variable to control whether HIDAPI uses libusb only for whitelisted
 * devices.
 *
 * By default libusb will only be used for a few devices that require direct
 * USB access.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI will use libusb for all device access.
 * - "1": HIDAPI will use libusb only for whitelisted devices. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_HIDAPI_LIBUSB_WHITELIST "SDL_HIDAPI_LIBUSB_WHITELIST"

/**
 * A variable to control whether HIDAPI uses udev for device detection.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI will poll for device changes.
 * - "1": HIDAPI will use udev for device detection. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_HIDAPI_UDEV "SDL_HIDAPI_UDEV"

/**
 * A variable that specifies a GPU backend to use.
 *
 * By default, SDL will try all available GPU backends in a reasonable order
 * until it finds one that can work, but this hint allows the app or user to
 * force a specific target, such as "direct3d11" if, say, your hardware
 * supports D3D12 but want to try using D3D11 instead.
 *
 * This hint should be set before any GPU functions are called.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_GPU_DRIVER "SDL_GPU_DRIVER"

/**
 * A variable to control whether SDL_hid_enumerate() enumerates all HID
 * devices or only controllers.
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL_hid_enumerate() will enumerate all HID devices.
 * - "1": SDL_hid_enumerate() will only enumerate controllers. (default)
 *
 * By default SDL will only enumerate controllers, to reduce risk of hanging
 * or crashing on devices with bad drivers and avoiding macOS keyboard capture
 * permission prompts.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS                             \
  "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS"

/**
 * A variable containing a list of devices to ignore in SDL_hid_enumerate().
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * For example, to ignore the Shanwan DS3 controller and any Valve controller,
 * you might use the string "0x2563/0x0523,0x28de/0x0000"
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_HIDAPI_IGNORE_DEVICES "SDL_HIDAPI_IGNORE_DEVICES"

/**
 * A variable describing what IME UI elements the application can display.
 *
 * By default IME UI is handled using native components by the OS where
 * possible, however this can interfere with or not be visible when exclusive
 * fullscreen mode is used.
 *
 * The variable can be set to a comma separated list containing the following
 * items:
 *
 * - "none" or "0": The application can't render any IME elements, and native
 *   UI should be used. (default)
 * - "composition": The application handles EVENT_TEXT_EDITING events and
 *   can render the composition text.
 * - "candidates": The application handles EVENT_TEXT_EDITING_CANDIDATES
 *   and can render the candidate list.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_IME_IMPLEMENTED_UI "SDL_IME_IMPLEMENTED_UI"

/**
 * A variable controlling whether the home indicator bar on iPhone X should be
 * hidden.
 *
 * The variable can be set to the following values:
 *
 * - "0": The indicator bar is not hidden. (default for windowed applications)
 * - "1": The indicator bar is hidden and is shown when the screen is touched
 *   (useful for movie playback applications).
 * - "2": The indicator bar is dim and the first swipe makes it visible and
 *   the second swipe performs the "home" action. (default for fullscreen
 *   applications)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_IOS_HIDE_HOME_INDICATOR "SDL_IOS_HIDE_HOME_INDICATOR"

/**
 * A variable that lets you enable joystick (and gamecontroller) events even
 * when your app is in the background.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable joystick & gamecontroller input events when the application
 *   is in the background. (default)
 * - "1": Enable joystick & gamecontroller input events when the application
 *   is in the background.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS                              \
  "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"

/**
 * A variable containing a list of arcade stick style controllers.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES "SDL_JOYSTICK_ARCADESTICK_DEVICES"

/**
 * A variable containing a list of devices that are not arcade stick style
 * controllers.
 *
 * This will override SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES and the built in
 * device list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED                         \
  "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED"

/**
 * A variable containing a list of devices that should not be considered
 * joysticks.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES "SDL_JOYSTICK_BLACKLIST_DEVICES"

/**
 * A variable containing a list of devices that should be considered
 * joysticks.
 *
 * This will override SDL_HINT_JOYSTICK_BLACKLIST_DEVICES and the built in
 * device list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED                           \
  "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED"

/**
 * A variable containing a comma separated list of devices to open as
 * joysticks.
 *
 * This variable is currently only used by the Linux joystick driver.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_DEVICE "SDL_JOYSTICK_DEVICE"

/**
 * A variable controlling whether enhanced reports should be used for
 * controllers when using the HIDAPI driver.
 *
 * Enhanced reports allow rumble and effects on Bluetooth PlayStation
 * controllers and gyro on Nintendo Switch controllers, but break Windows
 * DirectInput for other applications that don't use SDL.
 *
 * Once enhanced reports are enabled, they can't be disabled on PlayStation
 * controllers without power cycling the controller.
 *
 * The variable can be set to the following values:
 *
 * - "0": enhanced reports are not enabled.
 * - "1": enhanced reports are enabled. (default)
 * - "auto": enhanced features are advertised to the application, but SDL
 *   doesn't change the controller report mode unless the application uses
 *   them.
 *
 * This hint can be enabled anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_ENHANCED_REPORTS "SDL_JOYSTICK_ENHANCED_REPORTS"

/**
 * A variable containing a list of flightstick style controllers.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of file, in which case the named file
 * will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES "SDL_JOYSTICK_FLIGHTSTICK_DEVICES"

/**
 * A variable containing a list of devices that are not flightstick style
 * controllers.
 *
 * This will override SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES and the built in
 * device list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED                         \
  "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED"

/**
 * A variable controlling whether GameInput should be used for controller
 * handling on Windows.
 *
 * The variable can be set to the following values:
 *
 * - "0": GameInput is not used.
 * - "1": GameInput is used.
 *
 * The default is "1" on GDK platforms, and "0" otherwise.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_GAMEINPUT "SDL_JOYSTICK_GAMEINPUT"

/**
 * A variable containing a list of devices known to have a GameCube form
 * factor.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES "SDL_JOYSTICK_GAMECUBE_DEVICES"

/**
 * A variable containing a list of devices known not to have a GameCube form
 * factor.
 *
 * This will override SDL_HINT_JOYSTICK_GAMECUBE_DEVICES and the built in
 * device list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED                            \
  "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED"

/**
 * A variable controlling whether the HIDAPI joystick drivers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI drivers are not used.
 * - "1": HIDAPI drivers are used. (default)
 *
 * This variable is the default for all drivers, but can be overridden by the
 * hints for specific drivers below.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI "SDL_JOYSTICK_HIDAPI"

/**
 * A variable controlling whether Nintendo Switch Joy-Con controllers will be
 * combined into a single Pro-like controller when using the HIDAPI driver.
 *
 * The variable can be set to the following values:
 *
 * - "0": Left and right Joy-Con controllers will not be combined and each
 *   will be a mini-gamepad.
 * - "1": Left and right Joy-Con controllers will be combined into a single
 *   controller. (default)
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS                              \
  "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"

/**
 * A variable controlling whether the HIDAPI driver for Nintendo GameCube
 * controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE "SDL_JOYSTICK_HIDAPI_GAMECUBE"

/**
 * A variable controlling whether rumble is used to implement the GameCube
 * controller's 3 rumble modes, Stop(0), Rumble(1), and StopHard(2).
 *
 * This is useful for applications that need full compatibility for things
 * like ADSR envelopes. - Stop is implemented by setting low_frequency_rumble
 * to 0 and high_frequency_rumble >0 - Rumble is both at any arbitrary value -
 * StopHard is implemented by setting both low_frequency_rumble and
 * high_frequency_rumble to 0
 *
 * The variable can be set to the following values:
 *
 * - "0": Normal rumble behavior is behavior is used. (default)
 * - "1": Proper GameCube controller rumble behavior is used.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE                         \
  "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE"

/**
 * A variable controlling whether the HIDAPI driver for Nintendo Switch
 * Joy-Cons should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS "SDL_JOYSTICK_HIDAPI_JOY_CONS"

/**
 * A variable controlling whether the Home button LED should be turned on when
 * a Nintendo Switch Joy-Con controller is opened.
 *
 * The variable can be set to the following values:
 *
 * - "0": home button LED is turned off
 * - "1": home button LED is turned on
 *
 * By default the Home button LED state is not changed. This hint can also be
 * set to a floating point value between 0.0 and 1.0 which controls the
 * brightness of the Home button LED.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED                               \
  "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"

/**
 * A variable controlling whether the HIDAPI driver for Amazon Luna
 * controllers connected via Bluetooth should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_LUNA "SDL_JOYSTICK_HIDAPI_LUNA"

/**
 * A variable controlling whether the HIDAPI driver for Nintendo Online
 * classic controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC                              \
  "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"

/**
 * A variable controlling whether the HIDAPI driver for PS3 controllers should
 * be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI on macOS, and "0" on
 * other platforms.
 *
 * For official Sony driver (sixaxis.sys) use
 * SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER. See
 * https://github.com/ViGEm/DsHidMini for an alternative driver on Windows.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_PS3 "SDL_JOYSTICK_HIDAPI_PS3"

/**
 * A variable controlling whether the Sony driver (sixaxis.sys) for PS3
 * controllers (Sixaxis/DualShock 3) should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": Sony driver (sixaxis.sys) is not used.
 * - "1": Sony driver (sixaxis.sys) is used.
 *
 * The default value is 0.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER                            \
  "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER"

/**
 * A variable controlling whether the HIDAPI driver for PS4 controllers should
 * be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_PS4 "SDL_JOYSTICK_HIDAPI_PS4"

/**
 * A variable controlling the update rate of the PS4 controller over Bluetooth
 * when using the HIDAPI driver.
 *
 * This defaults to 4 ms, to match the behavior over USB, and to be more
 * friendly to other Bluetooth devices and older Bluetooth hardware on the
 * computer. It can be set to "1" (1000Hz), "2" (500Hz) and "4" (250Hz)
 *
 * This hint can be set anytime, but only takes effect when extended input
 * reports are enabled.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL                           \
  "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL"

/**
 * A variable controlling whether the HIDAPI driver for PS5 controllers should
 * be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_PS5 "SDL_JOYSTICK_HIDAPI_PS5"

/**
 * A variable controlling whether the player LEDs should be lit to indicate
 * which player is associated with a PS5 controller.
 *
 * The variable can be set to the following values:
 *
 * - "0": player LEDs are not enabled.
 * - "1": player LEDs are enabled. (default)
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED                                \
  "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"

/**
 * A variable controlling whether the HIDAPI driver for NVIDIA SHIELD
 * controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_SHIELD "SDL_JOYSTICK_HIDAPI_SHIELD"

/**
 * A variable controlling whether the HIDAPI driver for Google Stadia
 * controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_STADIA "SDL_JOYSTICK_HIDAPI_STADIA"

/**
 * A variable controlling whether the HIDAPI driver for Bluetooth Steam
 * Controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used. (default)
 * - "1": HIDAPI driver is used for Steam Controllers, which requires
 *   Bluetooth access and may prompt the user for permission on iOS and
 *   Android.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_STEAM "SDL_JOYSTICK_HIDAPI_STEAM"

/**
 * A variable controlling whether the Steam button LED should be turned on
 * when a Steam controller is opened.
 *
 * The variable can be set to the following values:
 *
 * - "0": Steam button LED is turned off.
 * - "1": Steam button LED is turned on.
 *
 * By default the Steam button LED state is not changed. This hint can also be
 * set to a floating point value between 0.0 and 1.0 which controls the
 * brightness of the Steam button LED.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED                                \
  "SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED"

/**
 * A variable controlling whether the HIDAPI driver for the Steam Deck builtin
 * controller should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK "SDL_JOYSTICK_HIDAPI_STEAMDECK"

/**
 * A variable controlling whether the HIDAPI driver for HORI licensed Steam
 * controllers should be used.
 *
 * This variable can be set to the following values: "0" - HIDAPI driver is
 * not used "1" - HIDAPI driver is used
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI
 */
#define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI "SDL_JOYSTICK_HIDAPI_STEAM_HORI"

/**
 * A variable controlling whether the HIDAPI driver for Nintendo Switch
 * controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH "SDL_JOYSTICK_HIDAPI_SWITCH"

/**
 * A variable controlling whether the Home button LED should be turned on when
 * a Nintendo Switch Pro controller is opened.
 *
 * The variable can be set to the following values:
 *
 * - "0": Home button LED is turned off.
 * - "1": Home button LED is turned on.
 *
 * By default the Home button LED state is not changed. This hint can also be
 * set to a floating point value between 0.0 and 1.0 which controls the
 * brightness of the Home button LED.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED                               \
  "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"

/**
 * A variable controlling whether the player LEDs should be lit to indicate
 * which player is associated with a Nintendo Switch controller.
 *
 * The variable can be set to the following values:
 *
 * - "0": Player LEDs are not enabled.
 * - "1": Player LEDs are enabled. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED                             \
  "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"

/**
 * A variable controlling whether Nintendo Switch Joy-Con controllers will be
 * in vertical mode when using the HIDAPI driver.
 *
 * The variable can be set to the following values:
 *
 * - "0": Left and right Joy-Con controllers will not be in vertical mode.
 *   (default)
 * - "1": Left and right Joy-Con controllers will be in vertical mode.
 *
 * This hint should be set before opening a Joy-Con controller.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS                             \
  "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"

/**
 * A variable controlling whether the HIDAPI driver for Nintendo Wii and Wii U
 * controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * This driver doesn't work with the dolphinbar, so the default is false for
 * now.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_WII "SDL_JOYSTICK_HIDAPI_WII"

/**
 * A variable controlling whether the player LEDs should be lit to indicate
 * which player is associated with a Wii controller.
 *
 * The variable can be set to the following values:
 *
 * - "0": Player LEDs are not enabled.
 * - "1": Player LEDs are enabled. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED                                \
  "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"

/**
 * A variable controlling whether the HIDAPI driver for XBox controllers
 * should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is "0" on Windows, otherwise the value of
 * SDL_HINT_JOYSTICK_HIDAPI
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_XBOX "SDL_JOYSTICK_HIDAPI_XBOX"

/**
 * A variable controlling whether the HIDAPI driver for XBox 360 controllers
 * should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI_XBOX
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 "SDL_JOYSTICK_HIDAPI_XBOX_360"

/**
 * A variable controlling whether the player LEDs should be lit to indicate
 * which player is associated with an Xbox 360 controller.
 *
 * The variable can be set to the following values:
 *
 * - "0": Player LEDs are not enabled.
 * - "1": Player LEDs are enabled. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED                           \
  "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"

/**
 * A variable controlling whether the HIDAPI driver for XBox 360 wireless
 * controllers should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI_XBOX_360
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS                             \
  "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"

/**
 * A variable controlling whether the HIDAPI driver for XBox One controllers
 * should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": HIDAPI driver is not used.
 * - "1": HIDAPI driver is used.
 *
 * The default is the value of SDL_HINT_JOYSTICK_HIDAPI_XBOX.
 *
 * This hint should be set before initializing joysticks and gamepads.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE "SDL_JOYSTICK_HIDAPI_XBOX_ONE"

/**
 * A variable controlling whether the Home button LED should be turned on when
 * an Xbox One controller is opened.
 *
 * The variable can be set to the following values:
 *
 * - "0": Home button LED is turned off.
 * - "1": Home button LED is turned on.
 *
 * By default the Home button LED state is not changed. This hint can also be
 * set to a floating point value between 0.0 and 1.0 which controls the
 * brightness of the Home button LED. The default brightness is 0.4.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED                             \
  "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"

/**
 * A variable controlling whether IOKit should be used for controller
 * handling.
 *
 * The variable can be set to the following values:
 *
 * - "0": IOKit is not used.
 * - "1": IOKit is used. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_IOKIT "SDL_JOYSTICK_IOKIT"

/**
 * A variable controlling whether to use the classic /dev/input/js* joystick
 * interface or the newer /dev/input/event* joystick interface on Linux.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use /dev/input/event* (default)
 * - "1": Use /dev/input/js*
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_LINUX_CLASSIC "SDL_JOYSTICK_LINUX_CLASSIC"

/**
 * A variable controlling whether joysticks on Linux adhere to their
 * HID-defined deadzones or return unfiltered values.
 *
 * The variable can be set to the following values:
 *
 * - "0": Return unfiltered joystick axis values. (default)
 * - "1": Return axis values with deadzones taken into account.
 *
 * This hint should be set before a controller is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_LINUX_DEADZONES "SDL_JOYSTICK_LINUX_DEADZONES"

/**
 * A variable controlling whether joysticks on Linux will always treat 'hat'
 * axis inputs (ABS_HAT0X - ABS_HAT3Y) as 8-way digital hats without checking
 * whether they may be analog.
 *
 * The variable can be set to the following values:
 *
 * - "0": Only map hat axis inputs to digital hat outputs if the input axes
 *   appear to actually be digital. (default)
 * - "1": Always handle the input axes numbered ABS_HAT0X to ABS_HAT3Y as
 *   digital hats.
 *
 * This hint should be set before a controller is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS "SDL_JOYSTICK_LINUX_DIGITAL_HATS"

/**
 * A variable controlling whether digital hats on Linux will apply deadzones
 * to their underlying input axes or use unfiltered values.
 *
 * The variable can be set to the following values:
 *
 * - "0": Return digital hat values based on unfiltered input axis values.
 * - "1": Return digital hat values with deadzones on the input axes taken
 *   into account. (default)
 *
 * This hint should be set before a controller is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES "SDL_JOYSTICK_LINUX_HAT_DEADZONES"

/**
 * A variable controlling whether GCController should be used for controller
 * handling.
 *
 * The variable can be set to the following values:
 *
 * - "0": GCController is not used.
 * - "1": GCController is used. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_MFI "SDL_JOYSTICK_MFI"

/**
 * A variable controlling whether the RAWINPUT joystick drivers should be used
 * for better handling XInput-capable devices.
 *
 * The variable can be set to the following values:
 *
 * - "0": RAWINPUT drivers are not used.
 * - "1": RAWINPUT drivers are used. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_RAWINPUT "SDL_JOYSTICK_RAWINPUT"

/**
 * A variable controlling whether the RAWINPUT driver should pull correlated
 * data from XInput.
 *
 * The variable can be set to the following values:
 *
 * - "0": RAWINPUT driver will only use data from raw input APIs.
 * - "1": RAWINPUT driver will also pull data from XInput and
 *   Windows.Gaming.Input, providing better trigger axes, guide button
 *   presses, and rumble support for Xbox controllers. (default)
 *
 * This hint should be set before a gamepad is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT                            \
  "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"

/**
 * A variable controlling whether the ROG Chakram mice should show up as
 * joysticks.
 *
 * The variable can be set to the following values:
 *
 * - "0": ROG Chakram mice do not show up as joysticks. (default)
 * - "1": ROG Chakram mice show up as joysticks.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_ROG_CHAKRAM "SDL_JOYSTICK_ROG_CHAKRAM"

/**
 * A variable controlling whether a separate thread should be used for
 * handling joystick detection and raw input messages on Windows.
 *
 * The variable can be set to the following values:
 *
 * - "0": A separate thread is not used.
 * - "1": A separate thread is used for handling raw input messages. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_THREAD "SDL_JOYSTICK_THREAD"

/**
 * A variable containing a list of throttle style controllers.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES "SDL_JOYSTICK_THROTTLE_DEVICES"

/**
 * A variable containing a list of devices that are not throttle style
 * controllers.
 *
 * This will override SDL_HINT_JOYSTICK_THROTTLE_DEVICES and the built in
 * device list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED                            \
  "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED"

/**
 * A variable controlling whether Windows.Gaming.Input should be used for
 * controller handling.
 *
 * The variable can be set to the following values:
 *
 * - "0": WGI is not used.
 * - "1": WGI is used. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_WGI "SDL_JOYSTICK_WGI"

/**
 * A variable containing a list of wheel style controllers.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_WHEEL_DEVICES "SDL_JOYSTICK_WHEEL_DEVICES"

/**
 * A variable containing a list of devices that are not wheel style
 * controllers.
 *
 * This will override SDL_HINT_JOYSTICK_WHEEL_DEVICES and the built in device
 * list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED                               \
  "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED"

/**
 * A variable containing a list of devices known to have all axes centered at
 * zero.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint should be set before a controller is opened.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES                                \
  "SDL_JOYSTICK_ZERO_CENTERED_DEVICES"

#if SDL_VERSION_ATLEAST(3, 2, 5)

/**
 * A variable containing a list of devices and their desired number of haptic
 * (force feedback) enabled axis.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form plus the number of desired axes, e.g.
 *
 * `0xAAAA/0xBBBB/1,0xCCCC/0xDDDD/3`
 *
 * This hint supports a "wildcard" device that will set the number of haptic
 * axes on all initialized haptic devices which were not defined explicitly in
 * this hint.
 *
 * `0xFFFF/0xFFFF/1`
 *
 * This hint should be set before a controller is opened. The number of haptic
 * axes won't exceed the number of real axes found on the device.
 *
 * @since This hint is available since SDL 3.2.5.
 */
#define SDL_HINT_JOYSTICK_HAPTIC_AXES "SDL_JOYSTICK_HAPTIC_AXES"

#endif // SDL_VERSION_ATLEAST(3, 2, 5)

/**
 * A variable that controls keycode representation in keyboard events.
 *
 * This variable is a comma separated set of options for translating keycodes
 * in events:
 *
 * - "none": Keycode options are cleared, this overrides other options.
 * - "hide_numpad": The numpad keysyms will be translated into their
 *   non-numpad versions based on the current NumLock state. For example,
 *   SDLK_KP_4 would become SDLK_4 if KMOD_NUM is set in the event
 *   modifiers, and SDLK_LEFT if it is unset.
 * - "french_numbers": The number row on French keyboards is inverted, so
 *   pressing the 1 key would yield the keycode SDLK_1, or '1', instead of
 *   SDLK_AMPERSAND, or '&'
 * - "latin_letters": For keyboards using non-Latin letters, such as Russian
 *   or Thai, the letter keys generate keycodes as though it had an en_US
 *   layout. e.g. pressing the key associated with SCANCODE_A on a Russian
 *   keyboard would yield 'a' instead of a Cyrillic letter.
 *
 * The default value for this hint is "french_numbers,latin_letters"
 *
 * Some platforms like Emscripten only provide modified keycodes and the
 * options are not used.
 *
 * These options do not affect the return value of Keycode::Keycode() or
 * Keycode::GetScancode(), they just apply to the keycode included in key
 * events.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_KEYCODE_OPTIONS "SDL_KEYCODE_OPTIONS"

/**
 * A variable that controls what KMSDRM device to use.
 *
 * SDL might open something like "/dev/dri/cardNN" to access KMSDRM
 * functionality, where "NN" is a device index number. SDL makes a guess at
 * the best index to use (usually zero), but the app or user can set this hint
 * to a number between 0 and 99 to force selection.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_KMSDRM_DEVICE_INDEX "SDL_KMSDRM_DEVICE_INDEX"

/**
 * A variable that controls whether SDL requires DRM master access in order to
 * initialize the KMSDRM video backend.
 *
 * The DRM subsystem has a concept of a "DRM master" which is a DRM client
 * that has the ability to set planes, set cursor, etc. When SDL is DRM
 * master, it can draw to the screen using the SDL rendering APIs. Without DRM
 * master, SDL is still able to process input and query attributes of attached
 * displays, but it cannot change display state or draw to the screen
 * directly.
 *
 * In some cases, it can be useful to have the KMSDRM backend even if it
 * cannot be used for rendering. An app may want to use SDL for input
 * processing while using another rendering API (such as an MMAL overlay on
 * Raspberry Pi) or using its own code to render to DRM overlays that SDL
 * doesn't support.
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL will allow usage of the KMSDRM backend without DRM master.
 * - "1": SDL Will require DRM master to use the KMSDRM backend. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER "SDL_KMSDRM_REQUIRE_DRM_MASTER"

/**
 * A variable controlling the default SDL log levels.
 *
 * This variable is a comma separated set of category=level tokens that define
 * the default logging levels for SDL applications.
 *
 * The category can be a numeric category, one of "app", "error", "assert",
 * "system", "audio", "video", "render", "input", "test", or `*` for any
 * unspecified category.
 *
 * The level can be a numeric level, one of "verbose", "debug", "info",
 * "warn", "error", "critical", or "quiet" to disable that category.
 *
 * You can omit the category if you want to set the logging level for all
 * categories.
 *
 * If this hint isn't set, the default log levels are equivalent to:
 *
 * `app=info,assert=warn,test=verbose,*=error`
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_LOGGING "SDL_LOGGING"

/**
 * A variable controlling whether to force the application to become the
 * foreground process when launched on macOS.
 *
 * The variable can be set to the following values:
 *
 * - "0": The application is brought to the foreground when launched.
 *   (default)
 * - "1": The application may remain in the background when launched.
 *
 * This hint needs to be set before InitSubSystem().
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MAC_BACKGROUND_APP "SDL_MAC_BACKGROUND_APP"

/**
 * A variable that determines whether Ctrl+Click should generate a right-click
 * event on macOS.
 *
 * The variable can be set to the following values:
 *
 * - "0": Ctrl+Click does not generate a right mouse button click event.
 *   (default)
 * - "1": Ctrl+Click generated a right mouse button click event.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK                            \
  "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"

/**
 * A variable controlling whether dispatching OpenGL context updates should
 * block the dispatching thread until the main thread finishes processing on
 * macOS.
 *
 * The variable can be set to the following values:
 *
 * - "0": Dispatching OpenGL context updates will block the dispatching thread
 *   until the main thread finishes processing. (default)
 * - "1": Dispatching OpenGL context updates will allow the dispatching thread
 *   to continue execution.
 *
 * Generally you want the default, but if you have OpenGL code in a background
 * thread on a Mac, and the main thread hangs because it's waiting for that
 * background thread, but that background thread is also hanging because it's
 * waiting for the main thread to do an update, this might fix your issue.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH "SDL_MAC_OPENGL_ASYNC_DISPATCH"

/**
 * A variable controlling whether the Option key on macOS should be remapped
 * to act as the Alt key.
 *
 * The variable can be set to the following values:
 *
 * - "none": The Option key is not remapped to Alt. (default)
 * - "only_left": Only the left Option key is remapped to Alt.
 * - "only_right": Only the right Option key is remapped to Alt.
 * - "both": Both Option keys are remapped to Alt.
 *
 * This will prevent the triggering of key compositions that rely on the
 * Option key, but will still send the Alt modifier for keyboard events. In
 * the case that both Alt and Option are pressed, the Option key will be
 * ignored. This is particularly useful for applications like terminal
 * emulators and graphical user interfaces (GUIs) that rely on Alt key
 * functionality for shortcuts or navigation. This does not apply to
 * Keycode::Keycode and only has an effect if IME is enabled.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MAC_OPTION_AS_ALT "SDL_MAC_OPTION_AS_ALT"

/**
 * A variable controlling whether EVENT_MOUSE_WHEEL event values will have
 * momentum on macOS.
 *
 * The variable can be set to the following values:
 *
 * - "0": The mouse wheel events will have no momentum. (default)
 * - "1": The mouse wheel events will have momentum.
 *
 * This hint needs to be set before InitSubSystem().
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MAC_SCROLL_MOMENTUM "SDL_MAC_SCROLL_MOMENTUM"

/**
 * Request SDL_AppIterate() be called at a specific rate.
 *
 * If this is set to a number, it represents Hz, so "60" means try to iterate
 * 60 times per second. "0" means to iterate as fast as possible. Negative
 * values are illegal, but reserved, in case they are useful in a future
 * revision of SDL.
 *
 * There are other strings that have special meaning. If set to "waitevent",
 * SDL_AppIterate will not be called until new event(s) have arrived (and been
 * processed by SDL_AppEvent). This can be useful for apps that are completely
 * idle except in response to input.
 *
 * On some platforms, or if you are using SDL_main instead of SDL_AppIterate,
 * this hint is ignored. When the hint can be used, it is allowed to be
 * changed at any time.
 *
 * This defaults to 0, and specifying nullptr for the hint's value will restore
 * the default.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MAIN_CALLBACK_RATE "SDL_MAIN_CALLBACK_RATE"

/**
 * A variable controlling whether the mouse is captured while mouse buttons
 * are pressed.
 *
 * The variable can be set to the following values:
 *
 * - "0": The mouse is not captured while mouse buttons are pressed.
 * - "1": The mouse is captured while mouse buttons are pressed.
 *
 * By default the mouse is captured while mouse buttons are pressed so if the
 * mouse is dragged outside the window, the application continues to receive
 * mouse events until the button is released.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_AUTO_CAPTURE "SDL_MOUSE_AUTO_CAPTURE"

/**
 * A variable setting the double click radius, in pixels.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS "SDL_MOUSE_DOUBLE_CLICK_RADIUS"

/**
 * A variable setting the double click time, in milliseconds.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME "SDL_MOUSE_DOUBLE_CLICK_TIME"

/**
 * A variable setting which system cursor to use as the default cursor.
 *
 * This should be an integer corresponding to the SDL_SystemCursor enum. The
 * default value is zero (SDL_SYSTEM_CURSOR_DEFAULT).
 *
 * This hint needs to be set before InitSubSystem().
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR "SDL_MOUSE_DEFAULT_SYSTEM_CURSOR"

/**
 * A variable controlling whether warping a hidden mouse cursor will activate
 * relative mouse mode.
 *
 * When this hint is set, the mouse cursor is hidden, and multiple warps to
 * the window center occur within a short time period, SDL will emulate mouse
 * warps using relative mouse mode. This can provide smoother and more
 * reliable mouse motion for some older games, which continuously calculate
 * the distance travelled by the mouse pointer and warp it back to the center
 * of the window, rather than using relative mouse motion.
 *
 * Note that relative mouse mode may have different mouse acceleration
 * behavior than pointer warps.
 *
 * If your application needs to repeatedly warp the hidden mouse cursor at a
 * high-frequency for other purposes, it should disable this hint.
 *
 * The variable can be set to the following values:
 *
 * - "0": Attempts to warp the mouse will always be made.
 * - "1": Some mouse warps will be emulated by forcing relative mouse mode.
 *   (default)
 *
 * If not set, this is automatically enabled unless an application uses
 * relative mouse mode directly.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE                              \
  "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE"

/**
 * Allow mouse click events when clicking to focus an SDL window.
 *
 * The variable can be set to the following values:
 *
 * - "0": Ignore mouse clicks that activate a window. (default)
 * - "1": Generate events for mouse clicks that activate a window.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH "SDL_MOUSE_FOCUS_CLICKTHROUGH"

/**
 * A variable setting the speed scale for mouse motion, in floating point,
 * when the mouse is not in relative mode.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE "SDL_MOUSE_NORMAL_SPEED_SCALE"

/**
 * A variable controlling whether relative mouse mode constrains the mouse to
 * the center of the window.
 *
 * Constraining to the center of the window works better for FPS games and
 * when the application is running over RDP. Constraining to the whole window
 * works better for 2D games and increases the chance that the mouse will be
 * in the correct position when using high DPI mice.
 *
 * The variable can be set to the following values:
 *
 * - "0": Relative mouse mode constrains the mouse to the window.
 * - "1": Relative mouse mode constrains the mouse to the center of the
 *   window. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER "SDL_MOUSE_RELATIVE_MODE_CENTER"

/**
 * A variable setting the scale for mouse motion, in floating point, when the
 * mouse is in relative mode.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE "SDL_MOUSE_RELATIVE_SPEED_SCALE"

/**
 * A variable controlling whether the system mouse acceleration curve is used
 * for relative mouse motion.
 *
 * The variable can be set to the following values:
 *
 * - "0": Relative mouse motion will be unscaled. (default)
 * - "1": Relative mouse motion will be scaled using the system mouse
 *   acceleration curve.
 *
 * If SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE is set, that will be applied after
 * system speed scale.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"

/**
 * A variable controlling whether a motion event should be generated for mouse
 * warping in relative mode.
 *
 * The variable can be set to the following values:
 *
 * - "0": Warping the mouse will not generate a motion event in relative mode
 * - "1": Warping the mouse will generate a motion event in relative mode
 *
 * By default warping the mouse will not generate motion events in relative
 * mode. This avoids the application having to filter out large relative
 * motion due to warping.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION "SDL_MOUSE_RELATIVE_WARP_MOTION"

/**
 * A variable controlling whether the hardware cursor stays visible when
 * relative mode is active.
 *
 * This variable can be set to the following values:
 *
 * - "0": The cursor will be hidden while relative mode is active (default)
 * - "1": The cursor will remain visible while relative mode is active
 *
 * Note that for systems without raw hardware inputs, relative mode is
 * implemented using warping, so the hardware cursor will visibly warp between
 * frames if this is enabled on those systems.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE                                 \
  "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE"

/**
 * A variable controlling whether mouse events should generate synthetic touch
 * events.
 *
 * The variable can be set to the following values:
 *
 * - "0": Mouse events will not generate touch events. (default for desktop
 *   platforms)
 * - "1": Mouse events will generate touch events. (default for mobile
 *   platforms, such as Android and iOS)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MOUSE_TOUCH_EVENTS "SDL_MOUSE_TOUCH_EVENTS"

/**
 * A variable controlling whether the keyboard should be muted on the console.
 *
 * Normally the keyboard is muted while SDL applications are running so that
 * keyboard input doesn't show up as key strokes on the console. This hint
 * allows you to turn that off for debugging purposes.
 *
 * The variable can be set to the following values:
 *
 * - "0": Allow keystrokes to go through to the console.
 * - "1": Mute keyboard input so it doesn't show up on the console. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_MUTE_CONSOLE_KEYBOARD "SDL_MUTE_CONSOLE_KEYBOARD"

/**
 * Tell SDL not to catch the SIGINT or SIGTERM signals on POSIX platforms.
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL will install a SIGINT and SIGTERM handler, and when it catches a
 *   signal, convert it into an EVENT_QUIT event. (default)
 * - "1": SDL will not install a signal handler at all.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_NO_SIGNAL_HANDLERS "SDL_NO_SIGNAL_HANDLERS"

/**
 * Specify the OpenGL library to load.
 *
 * This hint should be set before creating an OpenGL window or creating an
 * OpenGL context. If this hint isn't set, SDL will choose a reasonable
 * default.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_OPENGL_LIBRARY "SDL_OPENGL_LIBRARY"

/**
 * Specify the EGL library to load.
 *
 * This hint should be set before creating an OpenGL window or creating an
 * OpenGL context. This hint is only considered if SDL is using EGL to manage
 * OpenGL contexts. If this hint isn't set, SDL will choose a reasonable
 * default.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_EGL_LIBRARY "SDL_EGL_LIBRARY"

/**
 * A variable controlling what driver to use for OpenGL ES contexts.
 *
 * On some platforms, currently Windows and X11, OpenGL drivers may support
 * creating contexts with an OpenGL ES profile. By default SDL uses these
 * profiles, when available, otherwise it attempts to load an OpenGL ES
 * library, e.g. that provided by the ANGLE project. This variable controls
 * whether SDL follows this default behaviour or will always load an OpenGL ES
 * library.
 *
 * Circumstances where this is useful include - Testing an app with a
 * particular OpenGL ES implementation, e.g ANGLE, or emulator, e.g. those
 * from ARM, Imagination or Qualcomm. - Resolving OpenGL ES function addresses
 * at link time by linking with the OpenGL ES library instead of querying them
 * at run time with GL_GetProcAddress().
 *
 * Caution: for an application to work with the default behaviour across
 * different OpenGL drivers it must query the OpenGL ES function addresses at
 * run time using GL_GetProcAddress().
 *
 * This variable is ignored on most platforms because OpenGL ES is native or
 * not supported.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use ES profile of OpenGL, if available. (default)
 * - "1": Load OpenGL ES library using the default library names.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_OPENGL_ES_DRIVER "SDL_OPENGL_ES_DRIVER"

/**
 * Mechanism to specify openvr_api library location
 *
 * By default, when using the OpenVR driver, it will search for the API
 * library in the current folder. But, if you wish to use a system API you can
 * specify that by using this hint. This should be the full or relative path
 * to a .dll on Windows or .so on Linux.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_OPENVR_LIBRARY "SDL_OPENVR_LIBRARY"

/**
 * A variable controlling which orientations are allowed on iOS/Android.
 *
 * In some circumstances it is necessary to be able to explicitly control
 * which UI orientations are allowed.
 *
 * This variable is a space delimited list of the following values:
 *
 * - "LandscapeLeft"
 * - "LandscapeRight"
 * - "Portrait"
 * - "PortraitUpsideDown"
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ORIENTATIONS "SDL_ORIENTATIONS"

/**
 * A variable controlling the use of a sentinel event when polling the event
 * queue.
 *
 * When polling for events, PumpEvents is used to gather new events from
 * devices. If a device keeps producing new events between calls to
 * PumpEvents, a poll loop will become stuck until the new events stop.
 * This is most noticeable when moving a high frequency mouse.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable poll sentinels.
 * - "1": Enable poll sentinels. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_POLL_SENTINEL "SDL_POLL_SENTINEL"

/**
 * Override for GetPreferredLocales().
 *
 * If set, this will be favored over anything the OS might report for the
 * user's preferred locales. Changing this hint at runtime will not generate a
 * EVENT_LOCALE_CHANGED event (but if you can change the hint, you can
 * push your own event, if you want).
 *
 * The format of this hint is a comma-separated list of language and locale,
 * combined with an underscore, as is a common format: "en_GB". Locale is
 * optional: "en". So you might have a list like this: "en_GB,jp,es_PT"
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_PREFERRED_LOCALES "SDL_PREFERRED_LOCALES"

/**
 * A variable that decides whether to send EVENT_QUIT when closing the
 * last window.
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL will not send an EVENT_QUIT event when the last window is
 *   requesting to close. Note that in this case, there are still other
 *   legitimate reasons one might get an EVENT_QUIT event: choosing "Quit"
 *   from the macOS menu bar, sending a SIGINT (ctrl-c) on Unix, etc.
 * - "1": SDL will send a quit event when the last window is requesting to
 *   close. (default)
 *
 * If there is at least one active system tray icon, EVENT_QUIT will
 * instead be sent when both the last window will be closed and the last tray
 * icon will be destroyed.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE "SDL_QUIT_ON_LAST_WINDOW_CLOSE"

/**
 * A variable controlling whether the Direct3D device is initialized for
 * thread-safe operations.
 *
 * The variable can be set to the following values:
 *
 * - "0": Thread-safety is not enabled. (default)
 * - "1": Thread-safety is enabled.
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE "SDL_RENDER_DIRECT3D_THREADSAFE"

/**
 * A variable controlling whether to enable Direct3D 11+'s Debug Layer.
 *
 * This variable does not have any effect on the Direct3D 9 based renderer.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable Debug Layer use. (default)
 * - "1": Enable Debug Layer use.
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_DIRECT3D11_DEBUG "SDL_RENDER_DIRECT3D11_DEBUG"

/**
 * A variable controlling whether to enable Vulkan Validation Layers.
 *
 * This variable can be set to the following values:
 *
 * - "0": Disable Validation Layer use
 * - "1": Enable Validation Layer use
 *
 * By default, SDL does not use Vulkan Validation Layers.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_VULKAN_DEBUG "SDL_RENDER_VULKAN_DEBUG"

/**
 * A variable controlling whether to create the GPU device in debug mode.
 *
 * This variable can be set to the following values:
 *
 * - "0": Disable debug mode use (default)
 * - "1": Enable debug mode use
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_GPU_DEBUG "SDL_RENDER_GPU_DEBUG"

/**
 * A variable controlling whether to prefer a low-power GPU on multi-GPU
 * systems.
 *
 * This variable can be set to the following values:
 *
 * - "0": Prefer high-performance GPU (default)
 * - "1": Prefer low-power GPU
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_GPU_LOW_POWER "SDL_RENDER_GPU_LOW_POWER"

/**
 * A variable specifying which render driver to use.
 *
 * If the application doesn't pick a specific renderer to use, this variable
 * specifies the name of the preferred renderer. If the preferred renderer
 * can't be initialized, creating a renderer will fail.
 *
 * This variable is case insensitive and can be set to the following values:
 *
 * - "direct3d"
 * - "direct3d11"
 * - "direct3d12"
 * - "opengl"
 * - "opengles2"
 * - "opengles"
 * - "metal"
 * - "vulkan"
 * - "gpu"
 * - "software"
 *
 * This hint accepts a comma-separated list of driver names, and each will be
 * tried in the order listed when creating a renderer until one succeeds or
 * all of them fail.
 *
 * The default varies by platform, but it's the first one in the list that is
 * available on the current platform.
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_DRIVER "SDL_RENDER_DRIVER"

/**
 * A variable controlling how the 2D render API renders lines.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use the default line drawing method (Bresenham's line algorithm)
 * - "1": Use the driver point API using Bresenham's line algorithm (correct,
 *   draws many points)
 * - "2": Use the driver line API (occasionally misses line endpoints based on
 *   hardware driver quirks
 * - "3": Use the driver geometry API (correct, draws thicker diagonal lines)
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_LINE_METHOD "SDL_RENDER_LINE_METHOD"

/**
 * A variable controlling whether the Metal render driver select low power
 * device over default one.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use the preferred OS device. (default)
 * - "1": Select a low power device.
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE                          \
  "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"

/**
 * A variable controlling whether updates to the SDL screen surface should be
 * synchronized with the vertical refresh, to avoid tearing.
 *
 * This hint overrides the application preference when creating a renderer.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable vsync. (default)
 * - "1": Enable vsync.
 *
 * This hint should be set before creating a renderer.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RENDER_VSYNC "SDL_RENDER_VSYNC"

/**
 * A variable to control whether the return key on the soft keyboard should
 * hide the soft keyboard on Android and iOS.
 *
 * This hint sets the default value of prop::TextInput.MULTILINE_BOOLEAN.
 *
 * The variable can be set to the following values:
 *
 * - "0": The return key will be handled as a key event. (default)
 * - "1": The return key will hide the keyboard.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RETURN_KEY_HIDES_IME "SDL_RETURN_KEY_HIDES_IME"

/**
 * A variable containing a list of ROG gamepad capable mice.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 *
 * @sa SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED
 */
#define SDL_HINT_ROG_GAMEPAD_MICE "SDL_ROG_GAMEPAD_MICE"

/**
 * A variable containing a list of devices that are not ROG gamepad capable
 * mice.
 *
 * This will override SDL_HINT_ROG_GAMEPAD_MICE and the built in device list.
 *
 * The format of the string is a comma separated list of USB VID/PID pairs in
 * hexadecimal form, e.g.
 *
 * `0xAAAA/0xBBBB,0xCCCC/0xDDDD`
 *
 * The variable can also take the form of "@file", in which case the named
 * file will be loaded and interpreted as the value of the variable.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED "SDL_ROG_GAMEPAD_MICE_EXCLUDED"

/**
 * A variable controlling which Dispmanx layer to use on a Raspberry PI.
 *
 * Also known as Z-order. The variable can take a negative or positive value.
 * The default is 10000.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_RPI_VIDEO_LAYER "SDL_RPI_VIDEO_LAYER"

/**
 * Specify an "activity name" for screensaver inhibition.
 *
 * Some platforms, notably Linux desktops, list the applications which are
 * inhibiting the screensaver or other power-saving features.
 *
 * This hint lets you specify the "activity name" sent to the OS when
 * DisableScreenSaver() is used (or the screensaver is automatically
 * disabled). The contents of this hint are used when the screensaver is
 * disabled. You should use a string that describes what your program is doing
 * (and, therefore, why the screensaver is disabled). For example, "Playing a
 * game" or "Watching a video".
 *
 * Setting this to "" or leaving it unset will have SDL use a reasonable
 * default: "Playing a game" or something similar.
 *
 * This hint should be set before calling DisableScreenSaver()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME                             \
  "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"

/**
 * A variable controlling whether SDL calls dbus_shutdown() on quit.
 *
 * This is useful as a debug tool to validate memory leaks, but shouldn't ever
 * be set in production applications, as other libraries used by the
 * application might use dbus under the hood and this can cause crashes if
 * they continue after Quit().
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL will not call dbus_shutdown() on quit. (default)
 * - "1": SDL will call dbus_shutdown() on quit.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT "SDL_SHUTDOWN_DBUS_ON_QUIT"

/**
 * A variable that specifies a backend to use for title storage.
 *
 * By default, SDL will try all available storage backends in a reasonable
 * order until it finds one that can work, but this hint allows the app or
 * user to force a specific target, such as "pc" if, say, you are on Steam but
 * want to avoid SteamRemoteStorage for title data.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_STORAGE_TITLE_DRIVER "SDL_STORAGE_TITLE_DRIVER"

/**
 * A variable that specifies a backend to use for user storage.
 *
 * By default, SDL will try all available storage backends in a reasonable
 * order until it finds one that can work, but this hint allows the app or
 * user to force a specific target, such as "pc" if, say, you are on Steam but
 * want to avoid SteamRemoteStorage for user data.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_STORAGE_USER_DRIVER "SDL_STORAGE_USER_DRIVER"

/**
 * Specifies whether SDL_THREAD_PRIORITY_TIME_CRITICAL should be treated as
 * realtime.
 *
 * On some platforms, like Linux, a realtime priority thread may be subject to
 * restrictions that require special handling by the application. This hint
 * exists to let SDL know that the app is prepared to handle said
 * restrictions.
 *
 * On Linux, SDL will apply the following configuration to any thread that
 * becomes realtime:
 *
 * - The SCHED_RESET_ON_FORK bit will be set on the scheduling policy,
 * - An RLIMIT_RTTIME budget will be configured to the rtkit specified limit.
 * - Exceeding this limit will result in the kernel sending SIGKILL to the
 *   app, refer to the man pages for more information.
 *
 * The variable can be set to the following values:
 *
 * - "0": default platform specific behaviour
 * - "1": Force SDL_THREAD_PRIORITY_TIME_CRITICAL to a realtime scheduling
 *   policy
 *
 * This hint should be set before calling SDL_SetCurrentThreadPriority()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL                           \
  "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"

/**
 * A string specifying additional information to use with
 * SDL_SetCurrentThreadPriority.
 *
 * By default SDL_SetCurrentThreadPriority will make appropriate system
 * changes in order to apply a thread priority. For example on systems using
 * pthreads the scheduler policy is changed automatically to a policy that
 * works well with a given priority. Code which has specific requirements can
 * override SDL's default behavior with this hint.
 *
 * pthread hint values are "current", "other", "fifo" and "rr". Currently no
 * other platform hint values are defined but may be in the future.
 *
 * On Linux, the kernel may send SIGKILL to realtime tasks which exceed the
 * distro configured execution budget for rtkit. This budget can be queried
 * through RLIMIT_RTTIME after calling SDL_SetCurrentThreadPriority().
 *
 * This hint should be set before calling SDL_SetCurrentThreadPriority()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_THREAD_PRIORITY_POLICY "SDL_THREAD_PRIORITY_POLICY"

/**
 * A variable that controls the timer resolution, in milliseconds.
 *
 * The higher resolution the timer, the more frequently the CPU services timer
 * interrupts, and the more precise delays are, but this takes up power and
 * CPU time. This hint is only used on Windows.
 *
 * See this blog post for more information:
 * http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
 *
 * The default value is "1".
 *
 * If this variable is set to "0", the system timer resolution is not set.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_TIMER_RESOLUTION "SDL_TIMER_RESOLUTION"

/**
 * A variable controlling whether touch events should generate synthetic mouse
 * events.
 *
 * The variable can be set to the following values:
 *
 * - "0": Touch events will not generate mouse events.
 * - "1": Touch events will generate mouse events. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_TOUCH_MOUSE_EVENTS "SDL_TOUCH_MOUSE_EVENTS"

/**
 * A variable controlling whether trackpads should be treated as touch
 * devices.
 *
 * On macOS (and possibly other platforms in the future), SDL will report
 * touches on a trackpad as mouse input, which is generally what users expect
 * from this device; however, these are often actually full multitouch-capable
 * touch devices, so it might be preferable to some apps to treat them as
 * such.
 *
 * The variable can be set to the following values:
 *
 * - "0": Trackpad will send mouse events. (default)
 * - "1": Trackpad will send touch events.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY "SDL_TRACKPAD_IS_TOUCH_ONLY"

/**
 * A variable controlling whether the Android / tvOS remotes should be listed
 * as joystick devices, instead of sending keyboard events.
 *
 * The variable can be set to the following values:
 *
 * - "0": Remotes send enter/escape/arrow key events.
 * - "1": Remotes are available as 2 axis, 2 button joysticks. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_TV_REMOTE_AS_JOYSTICK "SDL_TV_REMOTE_AS_JOYSTICK"

/**
 * A variable controlling whether the screensaver is enabled.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable screensaver. (default)
 * - "1": Enable screensaver.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER "SDL_VIDEO_ALLOW_SCREENSAVER"

/**
 * A comma separated list containing the names of the displays that SDL should
 * sort to the front of the display list.
 *
 * When this hint is set, displays with matching name strings will be
 * prioritized in the list of displays, as exposed by calling
 * Display.GetAll(), with the first listed becoming the primary display. The
 * naming convention can vary depending on the environment, but it is usually
 * a connector name (e.g. 'DP-1', 'DP-2', 'HDMI-A-1',etc...).
 *
 * On Wayland and X11 desktops, the connector names associated with displays
 * can typically be found by using the `xrandr` utility.
 *
 * This hint is currently supported on the following drivers:
 *
 * - KMSDRM (kmsdrm)
 * - Wayland (wayland)
 * - X11 (x11)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_DISPLAY_PRIORITY "SDL_VIDEO_DISPLAY_PRIORITY"

/**
 * Tell the video driver that we only want a double buffer.
 *
 * By default, most lowlevel 2D APIs will use a triple buffer scheme that
 * wastes no CPU time on waiting for vsync after issuing a flip, but
 * introduces a frame of latency. On the other hand, using a double buffer
 * scheme instead is recommended for cases where low latency is an important
 * factor because we save a whole frame of latency.
 *
 * We do so by waiting for vsync immediately after issuing a flip, usually
 * just after eglSwapBuffers call in the backend's *_SwapWindow function.
 *
 * This hint is currently supported on the following drivers:
 *
 * - Raspberry Pi (raspberrypi)
 * - Wayland (wayland)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_DOUBLE_BUFFER "SDL_VIDEO_DOUBLE_BUFFER"

/**
 * A variable that specifies a video backend to use.
 *
 * By default, SDL will try all available video backends in a reasonable order
 * until it finds one that can work, but this hint allows the app or user to
 * force a specific target, such as "x11" if, say, you are on Wayland but want
 * to try talking to the X server instead.
 *
 * This hint accepts a comma-separated list of driver names, and each will be
 * tried in the order listed during init, until one succeeds or all of them
 * fail.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_DRIVER "SDL_VIDEO_DRIVER"

/**
 * A variable controlling whether the dummy video driver saves output frames.
 *
 * - "0": Video frames are not saved to disk. (default)
 * - "1": Video frames are saved to files in the format "SDL_windowX-Y.bmp",
 *   where X is the window ID, and Y is the frame number.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES "SDL_VIDEO_DUMMY_SAVE_FRAMES"

/**
 * If eglGetPlatformDisplay fails, fall back to calling eglGetDisplay.
 *
 * The variable can be set to one of the following values:
 *
 * - "0": Do not fall back to eglGetDisplay.
 * - "1": Fall back to eglGetDisplay if eglGetPlatformDisplay fails. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK                           \
  "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK"

/**
 * A variable controlling whether the OpenGL context should be created with
 * EGL.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use platform-specific GL context creation API (GLX, WGL, CGL, etc).
 *   (default)
 * - "1": Use EGL
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_FORCE_EGL "SDL_VIDEO_FORCE_EGL"

/**
 * A variable that specifies the policy for fullscreen Spaces on macOS.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable Spaces support (FULLSCREEN_DESKTOP won't use them and
 *   WINDOW_RESIZABLE windows won't offer the "fullscreen" button on their
 *   titlebars).
 * - "1": Enable Spaces support (FULLSCREEN_DESKTOP will use them and
 *   WINDOW_RESIZABLE windows will offer the "fullscreen" button on their
 *   titlebars). (default)
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES "SDL_VIDEO_MAC_FULLSCREEN_SPACES"

/**
 * A variable that specifies the menu visibility when a window is fullscreen
 * in Spaces on macOS.
 *
 * The variable can be set to the following values:
 *
 * - "0": The menu will be hidden when the window is in a fullscreen space,
 *   and not accessible by moving the mouse to the top of the screen.
 * - "1": The menu will be accessible when the window is in a fullscreen
 *   space.
 * - "auto": The menu will be hidden if fullscreen mode was toggled on
 *   programmatically via `WindowBase.SetFullscreen()`, and accessible if
 *   fullscreen was entered via the "fullscreen" button on the window title
 *   bar. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY                          \
  "SDL_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY"

/**
 * A variable controlling whether fullscreen windows are minimized when they
 * lose focus.
 *
 * The variable can be set to the following values:
 *
 * - "0": Fullscreen windows will not be minimized when they lose focus.
 *   (default)
 * - "1": Fullscreen windows are minimized when they lose focus.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"

/**
 * A variable controlling whether the offscreen video driver saves output
 * frames.
 *
 * This only saves frames that are generated using software rendering, not
 * accelerated OpenGL rendering.
 *
 * - "0": Video frames are not saved to disk. (default)
 * - "1": Video frames are saved to files in the format "SDL_windowX-Y.bmp",
 *   where X is the window ID, and Y is the frame number.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES"

/**
 * A variable controlling whether all window operations will block until
 * complete.
 *
 * Window systems that run asynchronously may not have the results of window
 * operations that resize or move the window applied immediately upon the
 * return of the requesting function. Setting this hint will cause such
 * operations to block after every call until the pending operation has
 * completed. Setting this to '1' is the equivalent of calling
 * WindowBase.Sync() after every function call.
 *
 * Be aware that amount of time spent blocking while waiting for window
 * operations to complete can be quite lengthy, as animations may have to
 * complete, which can take upwards of multiple seconds in some cases.
 *
 * The variable can be set to the following values:
 *
 * - "0": Window operations are non-blocking. (default)
 * - "1": Window operations will block until completed.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS "SDL_VIDEO_SYNC_WINDOW_OPERATIONS"

/**
 * A variable controlling whether the libdecor Wayland backend is allowed to
 * be used.
 *
 * libdecor is used over xdg-shell when xdg-decoration protocol is
 * unavailable.
 *
 * The variable can be set to the following values:
 *
 * - "0": libdecor use is disabled.
 * - "1": libdecor use is enabled. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"

/**
 * A variable controlling whether video mode emulation is enabled under
 * Wayland.
 *
 * When this hint is set, a standard set of emulated CVT video modes will be
 * exposed for use by the application. If it is disabled, the only modes
 * exposed will be the logical desktop size and, in the case of a scaled
 * desktop, the native display resolution.
 *
 * The variable can be set to the following values:
 *
 * - "0": Video mode emulation is disabled.
 * - "1": Video mode emulation is enabled. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION "SDL_VIDEO_WAYLAND_MODE_EMULATION"

/**
 * A variable controlling how modes with a non-native aspect ratio are
 * displayed under Wayland.
 *
 * When this hint is set, the requested scaling will be used when displaying
 * fullscreen video modes that don't match the display's native aspect ratio.
 * This is contingent on compositor viewport support.
 *
 * The variable can be set to the following values:
 *
 * - "aspect" - Video modes will be displayed scaled, in their proper aspect
 *   ratio, with black bars.
 * - "stretch" - Video modes will be scaled to fill the entire display.
 *   (default)
 * - "none" - Video modes will be displayed as 1:1 with no scaling.
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_WAYLAND_MODE_SCALING "SDL_VIDEO_WAYLAND_MODE_SCALING"

/**
 * A variable controlling whether the libdecor Wayland backend is preferred
 * over native decorations.
 *
 * When this hint is set, libdecor will be used to provide window decorations,
 * even if xdg-decoration is available. (Note that, by default, libdecor will
 * use xdg-decoration itself if available).
 *
 * The variable can be set to the following values:
 *
 * - "0": libdecor is enabled only if server-side decorations are unavailable.
 *   (default)
 * - "1": libdecor is always enabled if available.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR                                 \
  "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"

/**
 * A variable forcing non-DPI-aware Wayland windows to output at 1:1 scaling.
 *
 * This must be set before initializing the video subsystem.
 *
 * When this hint is set, Wayland windows that are not flagged as being
 * DPI-aware will be output with scaling designed to force 1:1 pixel mapping.
 *
 * This is intended to allow legacy applications to be displayed without
 * desktop scaling being applied, and has issues with certain display
 * configurations, as this forces the window to behave in a way that Wayland
 * desktops were not designed to accommodate:
 *
 * - Rounding errors can result with odd window sizes and/or desktop scales,
 *   which can cause the window contents to appear slightly blurry.
 * - Positioning the window may be imprecise due to unit conversions and
 *   rounding.
 * - The window may be unusably small on scaled desktops.
 * - The window may jump in size when moving between displays of different
 *   scale factors.
 * - Displays may appear to overlap when using a multi-monitor setup with
 *   scaling enabled.
 * - Possible loss of cursor precision due to the logical size of the window
 *   being reduced.
 *
 * New applications should be designed with proper DPI awareness handling
 * instead of enabling this.
 *
 * The variable can be set to the following values:
 *
 * - "0": Windows will be scaled normally.
 * - "1": Windows will be forced to scale to achieve 1:1 output.
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY                                \
  "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY"

/**
 * A variable specifying which shader compiler to preload when using the
 * Chrome ANGLE binaries.
 *
 * SDL has EGL and OpenGL ES2 support on Windows via the ANGLE project. It can
 * use two different sets of binaries, those compiled by the user from source
 * or those provided by the Chrome browser. In the later case, these binaries
 * require that SDL loads a DLL providing the shader compiler.
 *
 * The variable can be set to the following values:
 *
 * - "d3dcompiler_46.dll" - best for Vista or later. (default)
 * - "d3dcompiler_43.dll" - for XP support.
 * - "none" - do not load any library, useful if you compiled ANGLE from
 *   source and included the compiler in your binaries.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_WIN_D3DCOMPILER "SDL_VIDEO_WIN_D3DCOMPILER"

#if SDL_VERSION_ATLEAST(3, 2, 10)

/**
 * A variable controlling whether SDL should call XSelectInput() to enable
 * input events on X11 windows wrapped by SDL windows.
 *
 * The variable can be set to the following values:
 *
 * - "0": Don't call XSelectInput(), assuming the native window code has done
 *   it already.
 * - "1": Call XSelectInput() to enable input events. (default)
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.10.
 */
#define SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT                               \
  "SDL_VIDEO_X11_EXTERNAL_WINDOW_INPUT"

#endif // SDL_VERSION_ATLEAST(3, 2, 10)

/**
 * A variable controlling whether the X11 _NET_WM_BYPASS_COMPOSITOR hint
 * should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable _NET_WM_BYPASS_COMPOSITOR.
 * - "1": Enable _NET_WM_BYPASS_COMPOSITOR. (default)
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR                            \
  "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"

/**
 * A variable controlling whether the X11 _NET_WM_PING protocol should be
 * supported.
 *
 * By default SDL will use _NET_WM_PING, but for applications that know they
 * will not always be able to respond to ping requests in a timely manner they
 * can turn it off to avoid the window manager thinking the app is hung.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable _NET_WM_PING.
 * - "1": Enable _NET_WM_PING. (default)
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_NET_WM_PING "SDL_VIDEO_X11_NET_WM_PING"

/**
 * A variable controlling whether SDL uses DirectColor visuals.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable DirectColor visuals.
 * - "1": Enable DirectColor visuals. (default)
 *
 * This hint should be set before initializing the video subsystem.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_NODIRECTCOLOR "SDL_VIDEO_X11_NODIRECTCOLOR"

/**
 * A variable forcing the content scaling factor for X11 displays.
 *
 * The variable can be set to a floating point value in the range 1.0-10.0f
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_SCALING_FACTOR "SDL_VIDEO_X11_SCALING_FACTOR"

/**
 * A variable forcing the visual ID used for X11 display modes.
 *
 * This hint should be set before initializing the video subsystem.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_VISUALID "SDL_VIDEO_X11_VISUALID"

/**
 * A variable forcing the visual ID chosen for new X11 windows.
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_WINDOW_VISUALID "SDL_VIDEO_X11_WINDOW_VISUALID"

/**
 * A variable controlling whether the X11 XRandR extension should be used.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable XRandR.
 * - "1": Enable XRandR. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VIDEO_X11_XRANDR "SDL_VIDEO_X11_XRANDR"

/**
 * A variable controlling whether touch should be enabled on the back panel of
 * the PlayStation Vita.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable touch on the back panel.
 * - "1": Enable touch on the back panel. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_ENABLE_BACK_TOUCH "SDL_VITA_ENABLE_BACK_TOUCH"

/**
 * A variable controlling whether touch should be enabled on the front panel
 * of the PlayStation Vita.
 *
 * The variable can be set to the following values:
 *
 * - "0": Disable touch on the front panel.
 * - "1": Enable touch on the front panel. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_ENABLE_FRONT_TOUCH "SDL_VITA_ENABLE_FRONT_TOUCH"

/**
 * A variable controlling the module path on the PlayStation Vita.
 *
 * This hint defaults to "app0:module"
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_MODULE_PATH "SDL_VITA_MODULE_PATH"

/**
 * A variable controlling whether to perform PVR initialization on the
 * PlayStation Vita.
 *
 * - "0": Skip PVR initialization.
 * - "1": Perform the normal PVR initialization. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_PVR_INIT "SDL_VITA_PVR_INIT"

/**
 * A variable overriding the resolution reported on the PlayStation Vita.
 *
 * The variable can be set to the following values:
 *
 * - "544": 544p (default)
 * - "720": 725p for PSTV
 * - "1080": 1088i for PSTV
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_RESOLUTION "SDL_VITA_RESOLUTION"

/**
 * A variable controlling whether OpenGL should be used instead of OpenGL ES
 * on the PlayStation Vita.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use OpenGL ES. (default)
 * - "1": Use OpenGL.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_PVR_OPENGL "SDL_VITA_PVR_OPENGL"

/**
 * A variable controlling which touchpad should generate synthetic mouse
 * events.
 *
 * The variable can be set to the following values:
 *
 * - "0": Only front touchpad should generate mouse events. (default)
 * - "1": Only back touchpad should generate mouse events.
 * - "2": Both touchpads should generate mouse events.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE "SDL_VITA_TOUCH_MOUSE_DEVICE"

/**
 * A variable overriding the display index used in SDL_Vulkan_CreateSurface()
 *
 * The display index starts at 0, which is the default.
 *
 * This hint should be set before calling SDL_Vulkan_CreateSurface()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VULKAN_DISPLAY "SDL_VULKAN_DISPLAY"

/**
 * Specify the Vulkan library to load.
 *
 * This hint should be set before creating a Vulkan window or calling
 * SDL_Vulkan_LoadLibrary().
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_VULKAN_LIBRARY "SDL_VULKAN_LIBRARY"

/**
 * A variable controlling how the fact chunk affects the loading of a WAVE
 * file.
 *
 * The fact chunk stores information about the number of samples of a WAVE
 * file. The Standards Update from Microsoft notes that this value can be used
 * to 'determine the length of the data in seconds'. This is especially useful
 * for compressed formats (for which this is a mandatory chunk) if they
 * produce multiple sample frames per block and truncating the block is not
 * allowed. The fact chunk can exactly specify how many sample frames there
 * should be in this case.
 *
 * Unfortunately, most application seem to ignore the fact chunk and so SDL
 * ignores it by default as well.
 *
 * The variable can be set to the following values:
 *
 * - "truncate" - Use the number of samples to truncate the wave data if the
 *   fact chunk is present and valid.
 * - "strict" - Like "truncate", but raise an error if the fact chunk is
 *   invalid, not present for non-PCM formats, or if the data chunk doesn't
 *   have that many samples.
 * - "ignorezero" - Like "truncate", but ignore fact chunk if the number of
 *   samples is zero.
 * - "ignore" - Ignore fact chunk entirely. (default)
 *
 * This hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WAVE_FACT_CHUNK "SDL_WAVE_FACT_CHUNK"

/**
 * A variable controlling the maximum number of chunks in a WAVE file.
 *
 * This sets an upper bound on the number of chunks in a WAVE file to avoid
 * wasting time on malformed or corrupt WAVE files. This defaults to "10000".
 *
 * This hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WAVE_CHUNK_LIMIT "SDL_WAVE_CHUNK_LIMIT"

/**
 * A variable controlling how the size of the RIFF chunk affects the loading
 * of a WAVE file.
 *
 * The size of the RIFF chunk (which includes all the sub-chunks of the WAVE
 * file) is not always reliable. In case the size is wrong, it's possible to
 * just ignore it and step through the chunks until a fixed limit is reached.
 *
 * Note that files that have trailing data unrelated to the WAVE file or
 * corrupt files may slow down the loading process without a reliable
 * boundary. By default, SDL stops after 10000 chunks to prevent wasting time.
 * Use SDL_HINT_WAVE_CHUNK_LIMIT to adjust this value.
 *
 * The variable can be set to the following values:
 *
 * - "force" - Always use the RIFF chunk size as a boundary for the chunk
 *   search.
 * - "ignorezero" - Like "force", but a zero size searches up to 4 GiB.
 *   (default)
 * - "ignore" - Ignore the RIFF chunk size and always search up to 4 GiB.
 * - "maximum" - Search for chunks until the end of file. (not recommended)
 *
 * This hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WAVE_RIFF_CHUNK_SIZE "SDL_WAVE_RIFF_CHUNK_SIZE"

/**
 * A variable controlling how a truncated WAVE file is handled.
 *
 * A WAVE file is considered truncated if any of the chunks are incomplete or
 * the data chunk size is not a multiple of the block size. By default, SDL
 * decodes until the first incomplete block, as most applications seem to do.
 *
 * The variable can be set to the following values:
 *
 * - "verystrict" - Raise an error if the file is truncated.
 * - "strict" - Like "verystrict", but the size of the RIFF chunk is ignored.
 * - "dropframe" - Decode until the first incomplete sample frame.
 * - "dropblock" - Decode until the first incomplete block. (default)
 *
 * This hint should be set before calling SDL_LoadWAV() or SDL_LoadWAV_IO()
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WAVE_TRUNCATION "SDL_WAVE_TRUNCATION"

/**
 * A variable controlling whether the window is activated when the
 * WindowBase.Raise function is called.
 *
 * The variable can be set to the following values:
 *
 * - "0": The window is not activated when the WindowBase.Raise function is
 *   called.
 * - "1": The window is activated when the WindowBase.Raise function is called.
 *   (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED "SDL_WINDOW_ACTIVATE_WHEN_RAISED"

/**
 * A variable controlling whether the window is activated when the
 * WindowBase.Show function is called.
 *
 * The variable can be set to the following values:
 *
 * - "0": The window is not activated when the WindowBase.Show function is
 *   called.
 * - "1": The window is activated when the WindowBase.Show function is called.
 *   (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN "SDL_WINDOW_ACTIVATE_WHEN_SHOWN"

/**
 * If set to "0" then never set the top-most flag on an SDL Window even if the
 * application requests it.
 *
 * This is a debugging aid for developers and not expected to be used by end
 * users.
 *
 * The variable can be set to the following values:
 *
 * - "0": don't allow topmost
 * - "1": allow topmost (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOW_ALLOW_TOPMOST "SDL_WINDOW_ALLOW_TOPMOST"

/**
 * A variable controlling whether the window frame and title bar are
 * interactive when the cursor is hidden.
 *
 * The variable can be set to the following values:
 *
 * - "0": The window frame is not interactive when the cursor is hidden (no
 *   move, resize, etc).
 * - "1": The window frame is interactive when the cursor is hidden. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN                       \
  "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"

/**
 * A variable controlling whether SDL generates window-close events for Alt+F4
 * on Windows.
 *
 * The variable can be set to the following values:
 *
 * - "0": SDL will only do normal key handling for Alt+F4.
 * - "1": SDL will generate a window-close event when it sees Alt+F4.
 *   (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 "SDL_WINDOWS_CLOSE_ON_ALT_F4"

/**
 * A variable controlling whether menus can be opened with their keyboard
 * shortcut (Alt+mnemonic).
 *
 * If the mnemonics are enabled, then menus can be opened by pressing the Alt
 * key and the corresponding mnemonic (for example, Alt+F opens the File
 * menu). However, in case an invalid mnemonic is pressed, Windows makes an
 * audible beep to convey that nothing happened. This is true even if the
 * window has no menu at all!
 *
 * Because most SDL applications don't have menus, and some want to use the
 * Alt key for other purposes, SDL disables mnemonics (and the beeping) by
 * default.
 *
 * Note: This also affects keyboard events: with mnemonics enabled, when a
 * menu is opened from the keyboard, you will not receive a KEYUP event for
 * the mnemonic key, and *might* not receive one for Alt.
 *
 * The variable can be set to the following values:
 *
 * - "0": Alt+mnemonic does nothing, no beeping. (default)
 * - "1": Alt+mnemonic opens menus, invalid mnemonics produce a beep.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS                                 \
  "SDL_WINDOWS_ENABLE_MENU_MNEMONICS"

/**
 * A variable controlling whether the windows message loop is processed by
 * SDL.
 *
 * The variable can be set to the following values:
 *
 * - "0": The window message loop is not run.
 * - "1": The window message loop is processed in PumpEvents(). (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP "SDL_WINDOWS_ENABLE_MESSAGELOOP"

/**
 * A variable controlling whether GameInput is used for raw keyboard and mouse
 * on Windows.
 *
 * The variable can be set to the following values:
 *
 * - "0": GameInput is not used for raw keyboard and mouse events.
 * - "1": GameInput is used for raw keyboard and mouse events, if available.
 *   (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_GAMEINPUT "SDL_WINDOWS_GAMEINPUT"

/**
 * A variable controlling whether raw keyboard events are used on Windows.
 *
 * The variable can be set to the following values:
 *
 * - "0": The Windows message loop is used for keyboard events. (default)
 * - "1": Low latency raw keyboard events are used.
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_RAW_KEYBOARD "SDL_WINDOWS_RAW_KEYBOARD"

/**
 * A variable controlling whether SDL uses Kernel Semaphores on Windows.
 *
 * Kernel Semaphores are inter-process and require a context switch on every
 * interaction. On Windows 8 and newer, the WaitOnAddress API is available.
 * Using that and atomics to implement semaphores increases performance. SDL
 * will fall back to Kernel Objects on older OS versions or if forced to by
 * this hint.
 *
 * The variable can be set to the following values:
 *
 * - "0": Use Atomics and WaitOnAddress API when available, otherwise fall
 *   back to Kernel Objects. (default)
 * - "1": Force the use of Kernel Objects in all cases.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL                                \
  "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"

/**
 * A variable to specify custom icon resource id from RC file on Windows
 * platform.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_INTRESOURCE_ICON "SDL_WINDOWS_INTRESOURCE_ICON"

/**
 * A variable to specify custom icon resource id from RC file on Windows
 * platform.
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL                                \
  "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"

/**
 * A variable controlling whether SDL uses the D3D9Ex API introduced in
 * Windows Vista, instead of normal D3D9.
 *
 * Direct3D 9Ex contains changes to state management that can eliminate device
 * loss errors during scenarios like Alt+Tab or UAC prompts. D3D9Ex may
 * require some changes to your application to cope with the new behavior, so
 * this is disabled by default.
 *
 * For more information on Direct3D 9Ex, see:
 *
 * -
 * https://docs.microsoft.com/en-us/windows/win32/direct3darticles/graphics-apis-in-windows-vista#direct3d-9ex
 * -
 * https://docs.microsoft.com/en-us/windows/win32/direct3darticles/direct3d-9ex-improvements
 *
 * The variable can be set to the following values:
 *
 * - "0": Use the original Direct3D 9 API. (default)
 * - "1": Use the Direct3D 9Ex API on Vista and later (and fall back if D3D9Ex
 *   is unavailable)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_USE_D3D9EX "SDL_WINDOWS_USE_D3D9EX"

/**
 * A variable controlling whether SDL will clear the window contents when the
 * WM_ERASEBKGND message is received.
 *
 * The variable can be set to the following values:
 *
 * - "0"/"never": Never clear the window.
 * - "1"/"initial": Clear the window when the first WM_ERASEBKGND event fires.
 *   (default)
 * - "2"/"always": Clear the window on every WM_ERASEBKGND event.
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE                                 \
  "SDL_WINDOWS_ERASE_BACKGROUND_MODE"

/**
 * A variable controlling whether X11 windows are marked as override-redirect.
 *
 * If set, this _might_ increase framerate at the expense of the desktop not
 * working as expected. Override-redirect windows aren't noticed by the window
 * manager at all.
 *
 * You should probably only use this for fullscreen windows, and you probably
 * shouldn't even use it for that. But it's here if you want to try!
 *
 * The variable can be set to the following values:
 *
 * - "0": Do not mark the window as override-redirect. (default)
 * - "1": Mark the window as override-redirect.
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT "SDL_X11_FORCE_OVERRIDE_REDIRECT"

/**
 * A variable specifying the type of an X11 window.
 *
 * During WindowBase.WindowBase, SDL uses the _NET_WM_WINDOW_TYPE X11 property
 * to report to the window manager the type of window it wants to create. This
 * might be set to various things if WINDOW_TOOLTIP or
 * WINDOW_POPUP_MENU, etc, were specified. For "normal" windows that
 * haven't set a specific type, this hint can be used to specify a custom
 * type. For example, a dock window might set this to
 * "_NET_WM_WINDOW_TYPE_DOCK".
 *
 * This hint should be set before creating a window.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_X11_WINDOW_TYPE "SDL_X11_WINDOW_TYPE"

/**
 * Specify the XCB library to load for the X11 driver.
 *
 * The default is platform-specific, often "libX11-xcb.so.1".
 *
 * This hint should be set before initializing the video subsystem.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_X11_XCB_LIBRARY "SDL_X11_XCB_LIBRARY"

/**
 * A variable controlling whether XInput should be used for controller
 * handling.
 *
 * The variable can be set to the following values:
 *
 * - "0": XInput is not enabled.
 * - "1": XInput is enabled. (default)
 *
 * This hint should be set before SDL is initialized.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_XINPUT_ENABLED "SDL_XINPUT_ENABLED"

/**
 * A variable controlling response to SDL_assert failures.
 *
 * The variable can be set to the following case-sensitive values:
 *
 * - "abort": Program terminates immediately.
 * - "break": Program triggers a debugger breakpoint.
 * - "retry": Program reruns the SDL_assert's test again.
 * - "ignore": Program continues on, ignoring this assertion failure this
 *   time.
 * - "always_ignore": Program continues on, ignoring this assertion failure
 *   for the rest of the run.
 *
 * Note that SetAssertionHandler offers a programmatic means to deal with
 * assertion failures through a callback, and this hint is largely intended to
 * be used via environment variables by end users and automated tools.
 *
 * This hint should be set before an assertion failure is triggered and can be
 * changed at any time.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_ASSERT "SDL_ASSERT"

/**
 * A variable controlling whether pen events should generate synthetic mouse
 * events.
 *
 * The variable can be set to the following values:
 *
 * - "0": Pen events will not generate mouse events.
 * - "1": Pen events will generate mouse events. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_PEN_MOUSE_EVENTS "SDL_PEN_MOUSE_EVENTS"

/**
 * A variable controlling whether pen events should generate synthetic touch
 * events.
 *
 * The variable can be set to the following values:
 *
 * - "0": Pen events will not generate touch events.
 * - "1": Pen events will generate touch events. (default)
 *
 * This hint can be set anytime.
 *
 * @since This hint is available since SDL 3.2.0.
 */
#define SDL_HINT_PEN_TOUCH_EVENTS "SDL_PEN_TOUCH_EVENTS"

#endif // SDL3PP_DOC

/**
 * An enumeration of hint priorities.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using HintPriority = SDL_HintPriority;

constexpr HintPriority HINT_DEFAULT = SDL_HINT_DEFAULT; ///< DEFAULT

constexpr HintPriority HINT_NORMAL = SDL_HINT_NORMAL; ///< NORMAL

constexpr HintPriority HINT_OVERRIDE = SDL_HINT_OVERRIDE; ///< OVERRIDE

/**
 * Set a hint with a specific priority.
 *
 * The priority controls the behavior when setting a hint that already has a
 * value. Hints will replace existing hints of their priority and lower.
 * Environment variables are considered to have override priority.
 *
 * @param name the hint to set.
 * @param value the value of the hint variable.
 * @param priority the HintPriority level for the hint.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetHint
 * @sa ResetHint
 * @sa SetHint
 */
inline bool SetHintWithPriority(StringParam name,
                                StringParam value,
                                HintPriority priority)
{
  return SDL_SetHintWithPriority(name, value, priority);
}

/**
 * Set a hint with normal priority.
 *
 * Hints will not be set if there is an existing override hint or environment
 * variable that takes precedence. You can use SetHintWithPriority() to
 * set the hint with override priority instead.
 *
 * @param name the hint to set.
 * @param value the value of the hint variable.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetHint
 * @sa ResetHint
 * @sa SetHintWithPriority
 */
inline bool SetHint(StringParam name, StringParam value)
{
  return SDL_SetHint(name, value);
}

/**
 * Reset a hint to the default value.
 *
 * This will reset a hint to the value of the environment variable, or nullptr
 * if the environment isn't set. Callbacks will be called normally with this
 * change.
 *
 * @param name the hint to set.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetHint
 * @sa ResetHints
 */
inline bool ResetHint(StringParam name) { return SDL_ResetHint(name); }

/**
 * Reset all hints to the default values.
 *
 * This will reset all hints to the value of the associated environment
 * variable, or nullptr if the environment isn't set. Callbacks will be called
 * normally with this change.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ResetHint
 */
inline void ResetHints() { SDL_ResetHints(); }

/**
 * Get the value of a hint.
 *
 * @param name the hint to query.
 * @returns the string value of a hint or nullptr if the hint isn't set.
 *
 * @threadsafety It is safe to call this function from any thread, however the
 *               return value only remains valid until the hint is changed; if
 *               another thread might do so, the app should supply locks
 *               and/or make a copy of the string. Note that using a hint
 *               callback instead is always thread-safe, as SDL holds a lock
 *               on the thread subsystem during the callback.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetHint
 * @sa SetHintWithPriority
 */
inline const char* GetHint(StringParam name) { return SDL_GetHint(name); }

/**
 * Get the boolean value of a hint variable.
 *
 * @param name the name of the hint to get the boolean value from.
 * @param default_value the value to return if the hint does not exist.
 * @returns the boolean value of a hint or the provided default value if the
 *          hint does not exist.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetHint
 * @sa SetHint
 */
inline bool GetHintBoolean(StringParam name, bool default_value)
{
  return SDL_GetHintBoolean(name, default_value);
}

/**
 * A callback used to send notifications of hint value changes.
 *
 * This is called an initial time during AddHintCallback with the hint's
 * current value, and then again each time the hint's value changes.
 *
 * @param userdata what was passed as `userdata` to AddHintCallback().
 * @param name what was passed as `name` to AddHintCallback().
 * @param oldValue the previous hint value.
 * @param newValue the new value hint is to be set to.
 *
 * @threadsafety This callback is fired from whatever thread is setting a new
 *               hint value. SDL holds a lock on the hint subsystem when
 *               calling this callback.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa AddHintCallback
 */
using HintCallback = SDL_HintCallback;

/**
 * Add a function to watch a particular hint.
 *
 * The callback function is called _during_ this function, to provide it an
 * initial value, and again each time the hint's value changes.
 *
 * @param name the hint to watch.
 * @param callback An HintCallback function that will be called when the
 *                 hint value changes.
 * @param userdata a pointer to pass to the callback function.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RemoveHintCallback
 */
inline bool AddHintCallback(StringParam name,
                            HintCallback callback,
                            void* userdata)
{
  return SDL_AddHintCallback(name, callback, userdata);
}

/**
 * Remove a function watching a particular hint.
 *
 * @param name the hint being watched.
 * @param callback an HintCallback function that will be called when the
 *                 hint value changes.
 * @param userdata a pointer being passed to the callback function.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa AddHintCallback
 */
inline void RemoveHintCallback(StringParam name,
                               HintCallback callback,
                               void* userdata)
{
  SDL_RemoveHintCallback(name, callback, userdata);
}

/// @}

/**
 * @defgroup CategoryIntrinsics Compiler Intrinsics Detection
 *
 * SDL does some preprocessor gymnastics to determine if any CPU-specific
 * compiler intrinsics are available, as this is not necessarily an easy thing
 * to calculate, and sometimes depends on quirks of a system, versions of
 * build tools, and other external forces.
 *
 * Apps including SDL's headers will be able to check consistent preprocessor
 * definitions to decide if it's safe to use compiler intrinsics for a
 * specific CPU architecture. This check only tells you that the compiler is
 * capable of using those intrinsics; at runtime, you should still check if
 * they are available on the current system with the
 * [CPU info functions](https://wiki.libsdl.org/SDL3/CategoryCPUInfo), such as
 * HasSSE() or HasNEON(). Otherwise, the process might crash for using an
 * unsupported CPU instruction.
 *
 * SDL only sets preprocessor defines for CPU intrinsics if they are
 * supported, so apps should check with `#ifdef` and not `#if`.
 *
 * SDL will also include the appropriate instruction-set-specific support
 * headers, so if SDL decides to define SDL_SSE2_INTRINSICS, it will also
 * `#include <emmintrin.h>` as well.
 *
 * @{
 */

#ifdef SDL3PP_DOC

/**
 * Defined if (and only if) the compiler supports Loongarch LSX intrinsics.
 *
 * If this macro is defined, SDL will have already included `<lsxintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_LASX_INTRINSICS
 */
#define SDL_LSX_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Loongarch LSX intrinsics.
 *
 * If this macro is defined, SDL will have already included `<lasxintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_LASX_INTRINSICS
 */
#define SDL_LASX_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports ARM NEON intrinsics.
 *
 * If this macro is defined, SDL will have already included `<armintr.h>`
 * `<arm_neon.h>`, `<arm64intr.h>`, and `<arm64_neon.h>`, as appropriate.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_NEON_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports PowerPC Altivec intrinsics.
 *
 * If this macro is defined, SDL will have already included `<altivec.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_ALTIVEC_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel MMX intrinsics.
 *
 * If this macro is defined, SDL will have already included `<mmintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SSE_INTRINSICS
 */
#define SDL_MMX_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel SSE intrinsics.
 *
 * If this macro is defined, SDL will have already included `<xmmintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SSE2_INTRINSICS
 * @sa SDL_SSE3_INTRINSICS
 * @sa SDL_SSE4_1_INTRINSICS
 * @sa SDL_SSE4_2_INTRINSICS
 */
#define SDL_SSE_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel SSE2 intrinsics.
 *
 * If this macro is defined, SDL will have already included `<emmintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SSE_INTRINSICS
 * @sa SDL_SSE3_INTRINSICS
 * @sa SDL_SSE4_1_INTRINSICS
 * @sa SDL_SSE4_2_INTRINSICS
 */
#define SDL_SSE2_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel SSE3 intrinsics.
 *
 * If this macro is defined, SDL will have already included `<pmmintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SSE_INTRINSICS
 * @sa SDL_SSE2_INTRINSICS
 * @sa SDL_SSE4_1_INTRINSICS
 * @sa SDL_SSE4_2_INTRINSICS
 */
#define SDL_SSE3_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel SSE4.1 intrinsics.
 *
 * If this macro is defined, SDL will have already included `<smmintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SSE_INTRINSICS
 * @sa SDL_SSE2_INTRINSICS
 * @sa SDL_SSE3_INTRINSICS
 * @sa SDL_SSE4_2_INTRINSICS
 */
#define SDL_SSE4_1_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel SSE4.2 intrinsics.
 *
 * If this macro is defined, SDL will have already included `<nmmintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_SSE_INTRINSICS
 * @sa SDL_SSE2_INTRINSICS
 * @sa SDL_SSE3_INTRINSICS
 * @sa SDL_SSE4_1_INTRINSICS
 */
#define SDL_SSE4_2_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel AVX intrinsics.
 *
 * If this macro is defined, SDL will have already included `<immintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_AVX2_INTRINSICS
 * @sa SDL_AVX512F_INTRINSICS
 */
#define SDL_AVX_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel AVX2 intrinsics.
 *
 * If this macro is defined, SDL will have already included `<immintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_AVX_INTRINSICS
 * @sa SDL_AVX512F_INTRINSICS
 */
#define SDL_AVX2_INTRINSICS 1

/**
 * Defined if (and only if) the compiler supports Intel AVX-512F intrinsics.
 *
 * AVX-512F is also sometimes referred to as "AVX-512 Foundation."
 *
 * If this macro is defined, SDL will have already included `<immintrin.h>`
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_AVX_INTRINSICS
 * @sa SDL_AVX2_INTRINSICS
 */
#define SDL_AVX512F_INTRINSICS 1

/**
 * A macro to decide if the compiler supports `__attribute__((target))`.
 *
 * Even though this is defined in SDL's public headers, it is generally not
 * used directly by apps. Apps should probably just use SDL_TARGETING
 * directly, instead.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_TARGETING
 */
#define SDL_HAS_TARGET_ATTRIBS

/**
 * A macro to tag a function as targeting a specific CPU architecture.
 *
 * This is a hint to the compiler that a function should be built with support
 * for a CPU instruction set that might be different than the rest of the
 * program.
 *
 * The particulars of this are explained in the GCC documentation:
 *
 * https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-target-function-attribute
 *
 * An example of using this feature is to turn on SSE2 support for a specific
 * function, even if the rest of the source code is not compiled to use SSE2
 * code:
 *
 * ```c
 * #ifdef SDL_SSE2_INTRINSICS
 * static void SDL_TARGETING("sse2") DoSomethingWithSSE2(char *x) {
 *    ...use SSE2 intrinsic functions, etc...
 * }
 * #endif
 *
 * // later...
 * #ifdef SDL_SSE2_INTRINSICS
 * if (SDL_HasSSE2()) {
 *     DoSomethingWithSSE2(str);
 * }
 * #endif
 * ```
 *
 * The application is, on a whole, built without SSE2 instructions, so it will
 * run on Intel machines that don't support SSE2. But then at runtime, it
 * checks if the system supports the instructions, and then calls into a
 * function that uses SSE2 opcodes. The ifdefs make sure that this code isn't
 * used on platforms that don't have SSE2 at all.
 *
 * On compilers without target support, this is defined to nothing.
 *
 * This symbol is used by SDL internally, but apps and other libraries are
 * welcome to use it for their own interfaces as well.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_TARGETING(x) __attribute__((target(x)))

#endif // SDL3PP_DOC

/// @}

/**
 *
 * @defgroup CategorySharedObject Shared Object/DLL Management
 *
 * System-dependent library loading routines.
 *
 * Shared objects are code that is programmatically loadable at runtime.
 * Windows calls these "DLLs", Linux calls them "shared libraries", etc.
 *
 * To use them, build such a library, then call SDL_LoadObject() on it. Once
 * loaded, you can use SDL_LoadFunction() on that object to find the address
 * of its exported symbols. When done with the object, call SDL_UnloadObject()
 * to dispose of it.
 *
 * Some things to keep in mind:
 *
 * - These functions only work on C function names. Other languages may have
 *   name mangling and intrinsic language support that varies from compiler to
 *   compiler.
 * - Make sure you declare your function pointers with the same calling
 *   convention as the actual library function. Your code will crash
 *   mysteriously if you do not do this.
 * - Avoid namespace collisions. If you load a symbol from the library, it is
 *   not defined whether or not it goes into the global symbol namespace for
 *   the application. If it does and it conflicts with symbols in your code or
 *   other shared libraries, you will not get the results you expect. :)
 * - Once a library is unloaded, all pointers into it obtained through
 *   SDL_LoadFunction() become invalid, even if the library is later reloaded.
 *   Don't unload a library if you plan to use these pointers in the future.
 *   Notably: beware of giving one of these pointers to atexit(), since it may
 *   call that pointer after the library unloads.
 *
 * @{
 */

// Forward decl
struct SharedObjectBase;

// Forward decl
struct SharedObjectRef;

// Forward decl
struct SharedObject;

/**
 * An opaque datatype that represents a loaded shared object.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa SharedObjectBase.SharedObjectBase
 * @sa SharedObjectBase.LoadFunction
 * @sa SharedObjectRef.Unload
 * @sa SharedObject
 * @sa SharedObjectRef
 */
struct SharedObjectBase : Resource<SDL_SharedObject*>
{
  using Resource::Resource;

  /**
   * Dynamically load a shared object.
   *
   * @param sofile a system-dependent name of the object file.
   * @post an opaque pointer to the object handle or nullptr on failure; call
   *       GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SharedObjectBase.LoadFunction
   * @sa SharedObjectRef.Unload
   */
  SharedObjectBase(StringParam sofile)
    : Resource(SDL_LoadObject(sofile))
  {
  }

  /**
   * Look up the address of the named function in a shared object.
   *
   * This function pointer is no longer valid after calling
   * SharedObjectRef.Unload().
   *
   * This function can only look up C function names. Other languages may have
   * name mangling and intrinsic language support that varies from compiler to
   * compiler.
   *
   * Make sure you declare your function pointers with the same calling
   * convention as the actual library function. Your code will crash
   * mysteriously if you do not do this.
   *
   * If the requested function doesn't exist, nullptr is returned.
   *
   * @param name the name of the function to look up.
   * @returns a pointer to the function or nullptr on failure; call GetError()
   *          for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SharedObjectBase.SharedObjectBase
   */
  FunctionPointer LoadFunction(StringParam name)
  {
    return SDL_LoadFunction(get(), name);
  }
};

/**
 * Handle to a non owned sharedObject
 *
 * @cat resource
 *
 * @sa SharedObjectBase
 * @sa SharedObject
 */
struct SharedObjectRef : SharedObjectBase
{
  using SharedObjectBase::SharedObjectBase;

  /**
   * Copy constructor.
   */
  constexpr SharedObjectRef(const SharedObjectRef& other)
    : SharedObjectBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr SharedObjectRef(SharedObjectRef&& other)
    : SharedObjectBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~SharedObjectRef() = default;

  /**
   * Assignment operator.
   */
  SharedObjectRef& operator=(SharedObjectRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Unload a shared object from memory.
   *
   * Note that any pointers from this object looked up through
   * SharedObjectBase.LoadFunction() will no longer be valid.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SharedObjectBase.SharedObjectBase
   */
  void reset(SDL_SharedObject* newResource = {})
  {
    SDL_UnloadObject(release(newResource));
  }

  /**
   * Unload a shared object from memory.
   *
   * Note that any pointers from this object looked up through
   * SharedObjectBase.LoadFunction() will no longer be valid.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SharedObjectBase.SharedObjectBase
   */
  void Unload() { reset(); }
};

/**
 * Handle to an owned sharedObject
 *
 * @cat resource
 *
 * @sa SharedObjectBase
 * @sa SharedObjectRef
 */
struct SharedObject : SharedObjectRef
{
  using SharedObjectRef::SharedObjectRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit SharedObject(SDL_SharedObject* resource = {})
    : SharedObjectRef(resource)
  {
  }

  constexpr SharedObject(const SharedObject& other) = delete;

  /**
   * Move constructor.
   */
  constexpr SharedObject(SharedObject&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~SharedObject() { reset(); }

  /**
   * Assignment operator.
   */
  SharedObject& operator=(SharedObject other)
  {
    reset(other.release());
    return *this;
  }
};

/// @}

/**
 * @defgroup CategoryLocale Locale Info
 *
 * SDL locale services.
 *
 * This provides a way to get a list of preferred locales (language plus
 * country) for the user. There is exactly one function:
 * GetPreferredLocales(), which handles all the heavy lifting, and offers
 * documentation on all the strange ways humans might have configured their
 * language settings.
 *
 * @{
 */

/**
 * A struct to provide locale data.
 *
 * Locale data is split into a spoken language, like English, and an optional
 * country, like Canada. The language will be in ISO-639 format (so English
 * would be "en"), and the country, if not nullptr, will be an ISO-3166 country
 * code (so Canada would be "CA").
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetPreferredLocales
 */
using Locale = SDL_Locale;

/**
 * Report the user's preferred locale.
 *
 * Returned language strings are in the format xx, where 'xx' is an ISO-639
 * language specifier (such as "en" for English, "de" for German, etc).
 * Country strings are in the format YY, where "YY" is an ISO-3166 country
 * code (such as "US" for the United States, "CA" for Canada, etc). Country
 * might be nullptr if there's no specific guidance on them (so you might get {
 * "en", "US" } for American English, but { "en", nullptr } means "English
 * language, generically"). Language strings are never nullptr, except to
 * terminate the array.
 *
 * Please note that not all of these strings are 2 characters; some are three
 * or more.
 *
 * The returned list of locales are in the order of the user's preference. For
 * example, a German citizen that is fluent in US English and knows enough
 * Japanese to navigate around Tokyo might have a list like: { "de", "en_US",
 * "jp", nullptr }. Someone from England might prefer British English (where
 * "color" is spelled "colour", etc), but will settle for anything like it: {
 * "en_GB", "en", nullptr }.
 *
 * This function returns nullptr on error, including when the platform does not
 * supply this information at all.
 *
 * This might be a "slow" call that has to query the operating system. It's
 * best to ask for this once and save the results. However, this list can
 * change, usually because the user has changed a system preference outside of
 * your program; SDL will send an EVENT_LOCALE_CHANGED event in this case,
 * if possible, and you can call this function again to get an updated copy of
 * preferred locales.
 *
 * @returns a nullptr terminated array of locale pointers, or nullptr on
 * failure; call GetError() for more information. This is a single allocation
 * that should be freed with free() when it is no longer needed.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline OwnArray<Locale*> GetPreferredLocales()
{
  int count = 0;
  auto data = SDL_GetPreferredLocales(&count);
  return OwnArray<Locale*>{data, size_t(count)};
}

/// @}

/**
 * @defgroup CategoryLog Log Handling
 *
 * Simple log messages with priorities and categories. A message's
 * LogPriority signifies how important the message is. A message's
 * LogCategory signifies from what domain it belongs to. Every category
 * has a minimum priority specified: when a message belongs to that category,
 * it will only be sent out if it has that minimum priority or higher.
 *
 * SDL's own logs are sent below the default priority threshold, so they are
 * quiet by default.
 *
 * You can change the log verbosity programmatically using
 * LogCategory.SetLogPriority() or with SDL_SetHint(SDL_HINT_LOGGING, ...), or
 * with the "SDL_LOGGING" environment variable. This variable is a comma
 * separated set of category=level tokens that define the default logging levels
 * for SDL applications.
 *
 * The category can be a numeric category, one of "app", "error", "assert",
 * "system", "audio", "video", "render", "input", "test", or `*` for any
 * unspecified category.
 *
 * The level can be a numeric level, one of "trace", "verbose", "debug",
 * "info", "warn", "error", "critical", or "quiet" to disable that category.
 *
 * You can omit the category if you want to set the logging level for all
 * categories.
 *
 * If this hint isn't set, the default log levels are equivalent to:
 *
 * `app=info,assert=warn,test=verbose,*=error`
 *
 * Here's where the messages go on different platforms:
 *
 * - Windows: debug output stream
 * - Android: log output
 * - Others: standard error output (stderr)
 *
 * You don't need to have a newline (`@n`) on the end of messages, the
 * functions will do that for you. For consistent behavior cross-platform, you
 * shouldn't have any newlines in messages, such as to log multiple lines in
 * one call; unusual platform-specific behavior can be observed in such usage.
 * Do one log call per line instead, with no newlines in messages.
 *
 * Each log call is atomic, so you won't see log messages cut off one another
 * when logging from multiple threads.
 *
 * @{
 */

/**
 * @name LogPriorities
 *
 * The priorities assignable for a LogCategory.
 *
 * @{
 */

/**
 * The predefined log priorities
 *
 * @since This enum is available since SDL 3.2.0.
 */
using LogPriority = SDL_LogPriority;

constexpr LogPriority LOG_PRIORITY_INVALID =
  SDL_LOG_PRIORITY_INVALID; ///< INVALID

constexpr LogPriority LOG_PRIORITY_TRACE = SDL_LOG_PRIORITY_TRACE; ///< TRACE

constexpr LogPriority LOG_PRIORITY_VERBOSE =
  SDL_LOG_PRIORITY_VERBOSE; ///< VERBOSE

constexpr LogPriority LOG_PRIORITY_DEBUG = SDL_LOG_PRIORITY_DEBUG; ///< DEBUG

constexpr LogPriority LOG_PRIORITY_INFO = SDL_LOG_PRIORITY_INFO; ///< INFO

constexpr LogPriority LOG_PRIORITY_WARN = SDL_LOG_PRIORITY_WARN; ///< WARN

constexpr LogPriority LOG_PRIORITY_ERROR = SDL_LOG_PRIORITY_ERROR; ///< ERROR

constexpr LogPriority LOG_PRIORITY_CRITICAL =
  SDL_LOG_PRIORITY_CRITICAL; ///< CRITICAL

constexpr LogPriority LOG_PRIORITY_COUNT = SDL_LOG_PRIORITY_COUNT; ///< COUNT

/// @}

/**
 * @name LogCategories
 *
 * The logging categories. see LogCategory for more info
 *
 * @{
 */

/**
 * The predefined log categories
 *
 * By default the application and gpu categories are enabled at the INFO
 * level, the assert category is enabled at the WARN level, test is enabled at
 * the VERBOSE level and all other categories are enabled at the ERROR level.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @cat wrap-state
 *
 * @sa wrap-state
 */
class LogCategory
{
  int m_category;

public:
  /// Constructor from int.
  constexpr explicit LogCategory(int category)
    : m_category(category)
  {
  }

  /// Constructor from SDL_LogCategory.
  constexpr LogCategory(SDL_LogCategory category = SDL_LOG_CATEGORY_APPLICATION)
    : m_category(category)
  {
  }

  /// Conversion operator to int.
  constexpr operator int() { return m_category; }

  /// Conversion operator to SDL_LogCategory
  constexpr operator SDL_LogCategory() { return SDL_LogCategory(m_category); }

  /// Comparison operator
  constexpr auto operator<=>(const LogCategory& other) const = default;

  /**
   * Set the priority of all log categories.
   *
   * @param priority the LogPriority to assign.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ResetLogPriorities()
   * @sa SetLogPriority()
   */
  static void SetLogPriorities(LogPriority priority)
  {
    return SDL_SetLogPriorities(priority);
  }

  /**
   * Set the priority of a particular log category.
   *
   * @param priority the SDL_LogPriority to assign.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetLogPriority()
   * @sa ResetLogPriorities()
   * @sa SetLogPriorities()
   */
  void SetLogPriority(LogPriority priority)
  {
    return SDL_SetLogPriority(m_category, priority);
  }

  /**
   * Get the priority of a particular log category.
   *
   * @returns the LogPriority for the requested category.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetLogPriority()
   */
  LogPriority GetLogPriority() const { return SDL_GetLogPriority(m_category); }

  /**
   * Reset all priorities to default.
   *
   * This is called by SDL_Quit().
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetLogPriorities
   * @sa SetLogPriority
   */
  static void ResetLogPriorities() { return SDL_ResetLogPriorities(); }

  /**
   * Log an unformatted message with the specified priority.
   *
   * @param priority the priority of the message.
   * @param message string to output.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SDL::Log()
   * @sa Log()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogError()
   * @sa LogInfo()
   * @sa LogTrace()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  void LogUnformatted(LogPriority priority, StringParam message) const
  {
    return SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
  }

  /**
   * Log a message with the specified priority.
   *
   * @param priority the priority of the message.
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogUnformatted()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogError()
   * @sa LogInfo()
   * @sa LogTrace()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void Log(LogPriority priority, std::string_view fmt, ARGS... args) const
  {
    return LogUnformatted(priority,
                          std::vformat(fmt, std::make_format_args(args...)));
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_TRACE.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogError()
   * @sa LogInfo()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void LogTrace(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_TRACE, fmt, std::forward<ARGS>(args)...);
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_VERBOSE.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogError()
   * @sa LogInfo()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogTrace()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void LogVerbose(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_VERBOSE, fmt, std::forward<ARGS>(args)...);
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_DEBUG.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogCritical()
   * @sa LogError()
   * @sa LogInfo()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogTrace()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void LogDebug(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_DEBUG, fmt, std::forward<ARGS>(args)...);
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_INFO.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogError()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogTrace()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void LogInfo(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_INFO, fmt, std::forward<ARGS>(args)...);
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_WARN.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogError()
   * @sa LogInfo()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogTrace()
   * @sa LogVerbose()
   */
  template<class... ARGS>
  void LogWarn(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_WARN, fmt, std::forward<ARGS>(args)...);
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_ERROR.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogCritical()
   * @sa LogDebug()
   * @sa LogInfo()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogTrace()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void LogError(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_ERROR, fmt, std::forward<ARGS>(args)...);
  }

  /**
   * Log a message with SDL_LOG_PRIORITY_CRITICAL.
   *
   * @param fmt a
   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
   * style message format string.
   * @param args additional parameters matching the `{}` tokens in the format
   * string, if any.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat formatted-string
   *
   * @sa formatted-string
   * @sa SDL::Log()
   * @sa LogDebug()
   * @sa LogError()
   * @sa LogInfo()
   * @sa Log()
   * @sa LogUnformatted()
   * @sa LogTrace()
   * @sa LogVerbose()
   * @sa LogWarn()
   */
  template<class... ARGS>
  void LogCritical(std::string_view fmt, ARGS&&... args) const
  {
    return Log(SDL_LOG_PRIORITY_CRITICAL, fmt, std::forward<ARGS>(args)...);
  }
};

constexpr LogCategory LOG_CATEGORY_APPLICATION =
  SDL_LOG_CATEGORY_APPLICATION; ///< APPLICATION

constexpr LogCategory LOG_CATEGORY_ERROR = SDL_LOG_CATEGORY_ERROR; ///< ERROR

constexpr LogCategory LOG_CATEGORY_ASSERT = SDL_LOG_CATEGORY_ASSERT; ///< ASSERT

constexpr LogCategory LOG_CATEGORY_SYSTEM = SDL_LOG_CATEGORY_SYSTEM; ///< SYSTEM

constexpr LogCategory LOG_CATEGORY_AUDIO = SDL_LOG_CATEGORY_AUDIO; ///< AUDIO

constexpr LogCategory LOG_CATEGORY_VIDEO = SDL_LOG_CATEGORY_VIDEO; ///< VIDEO

constexpr LogCategory LOG_CATEGORY_RENDER = SDL_LOG_CATEGORY_RENDER; ///< RENDER

constexpr LogCategory LOG_CATEGORY_INPUT = SDL_LOG_CATEGORY_INPUT; ///< INPUT

constexpr LogCategory LOG_CATEGORY_TEST = SDL_LOG_CATEGORY_TEST; ///< TEST

constexpr LogCategory LOG_CATEGORY_GPU = SDL_LOG_CATEGORY_GPU; ///< GPU

constexpr LogCategory LOG_CATEGORY_RESERVED2 =
  SDL_LOG_CATEGORY_RESERVED2; ///< RESERVED2

constexpr LogCategory LOG_CATEGORY_RESERVED3 =
  SDL_LOG_CATEGORY_RESERVED3; ///< RESERVED3

constexpr LogCategory LOG_CATEGORY_RESERVED4 =
  SDL_LOG_CATEGORY_RESERVED4; ///< RESERVED4

constexpr LogCategory LOG_CATEGORY_RESERVED5 =
  SDL_LOG_CATEGORY_RESERVED5; ///< RESERVED5

constexpr LogCategory LOG_CATEGORY_RESERVED6 =
  SDL_LOG_CATEGORY_RESERVED6; ///< RESERVED6

constexpr LogCategory LOG_CATEGORY_RESERVED7 =
  SDL_LOG_CATEGORY_RESERVED7; ///< RESERVED7

constexpr LogCategory LOG_CATEGORY_RESERVED8 =
  SDL_LOG_CATEGORY_RESERVED8; ///< RESERVED8

constexpr LogCategory LOG_CATEGORY_RESERVED9 =
  SDL_LOG_CATEGORY_RESERVED9; ///< RESERVED9

constexpr LogCategory LOG_CATEGORY_RESERVED10 =
  SDL_LOG_CATEGORY_RESERVED10; ///< RESERVED10

constexpr LogCategory LOG_CATEGORY_CUSTOM = SDL_LOG_CATEGORY_CUSTOM; ///< CUSTOM

/// @}

/**
 * Set the text prepended to log messages of a given priority.
 *
 * By default LOG_PRIORITY_INFO and below have no prefix, and
 * LOG_PRIORITY_WARN and higher have a prefix showing their priority, e.g.
 * "WARNING: ".
 *
 * @param priority the LogPriority to modify.
 * @param prefix the prefix to use for that log priority, or NULL to use no
 *               prefix.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa LogCategory::SetLogPriorities()
 * @sa LogCategory::SetLogPriority()
 */
inline bool SetLogPriorityPrefix(LogPriority priority, StringParam prefix)
{
  return SDL_SetLogPriorityPrefix(priority, prefix);
}

/**
 * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
 *
 * @param fmt a
 *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
 *            style message format string.
 * @param args additional parameters matching the `{}` tokens in the format
 *             string, if any.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat formatted-string
 *
 * @sa formatted-string
 * @sa LogUnformatted()
 * @sa LogCategory.LogCritical()
 * @sa LogCategory.LogDebug()
 * @sa LogCategory.LogError()
 * @sa LogCategory.LogInfo()
 * @sa LogCategory.Log()
 * @sa LogCategory.LogUnformatted()
 * @sa LogCategory.LogTrace()
 * @sa LogCategory.LogVerbose()
 * @sa LogCategory.LogWarn()
 */
template<class... ARGS>
inline void Log(std::string_view fmt, ARGS&&... args)
{
  LOG_CATEGORY_APPLICATION.Log(
    LOG_PRIORITY_INFO, fmt, std::forward<ARGS>(args)...);
}

/**
 * Log an unformatted message with LOG_CATEGORY_APPLICATION and
 * LOG_PRIORITY_INFO.
 *
 * @param message string to output.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Log()
 * @sa LogCategory.LogCritical()
 * @sa LogCategory.LogDebug()
 * @sa LogCategory.LogError()
 * @sa LogCategory.LogInfo()
 * @sa LogCategory.Log()
 * @sa LogCategory.LogUnformatted()
 * @sa LogCategory.LogTrace()
 * @sa LogCategory.LogVerbose()
 * @sa LogCategory.LogWarn()
 */
inline void LogUnformatted(StringParam message)
{
  SDL_Log("%s", static_cast<const char*>(message));
}

/**
 * The prototype for the log output callback function.
 *
 * This function is called by SDL when there is new text to be logged. A mutex
 * is held so that this function is never called by more than one thread at
 * once.
 *
 * @param userdata what was passed as `userdata` to
 *                 SetLogOutputFunction().
 * @param category the category of the message.
 * @param priority the priority of the message.
 * @param message the message being output.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using LogOutputFunction = SDL_LogOutputFunction;

/**
 * The prototype for the log output callback function.
 *
 * This function is called by SDL when there is new text to be logged. A mutex
 * is held so that this function is never called by more than one thread at
 * once.
 *
 * @param category the category of the message.
 * @param priority the priority of the message.
 * @param message the message being output.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa LogOutputFunction
 */
using LogOutputFunctionCB =
  std::function<void(LogCategory, LogPriority, StringParam)>;

/**
 * Get the default log output function.
 *
 * @returns the default log output callback.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetLogOutputFunction()
 * @sa GetLogOutputFunction()
 */
inline LogOutputFunction GetDefaultLogOutputFunction()
{
  return SDL_GetDefaultLogOutputFunction();
}

/**
 * Get the current log output function.
 *
 * @param callback an LogOutputFunction filled in with the current log callback.
 * @param userdata a pointer filled in with the pointer that is passed to
 *                 `callback`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetDefaultLogOutputFunction()
 * @sa SetLogOutputFunction()
 */
inline void GetLogOutputFunction(LogOutputFunction* callback, void** userdata)
{
  return SDL_GetLogOutputFunction(callback, userdata);
}

/**
 * Get the current log output function.
 *
 * @returns the LogOutputFunctionCB currently set
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa GetDefaultLogOutputFunction()
 * @sa SetLogOutputFunction()
 */
inline LogOutputFunctionCB GetLogOutputFunction()
{
  using Wrapper = UniqueWrapper<LogOutputFunctionCB>;
  LogOutputFunction cb;
  void* userdata;
  if (userdata == nullptr) {
    return [cb](LogCategory c, LogPriority p, StringParam m) {
      cb(nullptr, c, p, m);
    };
  }
  GetLogOutputFunction(&cb, &userdata);
  if (!Wrapper::contains(userdata)) {
    return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
      cb(userdata, c, p, m);
    };
  }
  return Wrapper::at(userdata);
}

/**
 * Replace the default log output function with one of your own.
 *
 * @param callback an LogOutputFunction to call instead of the default.
 * @param userdata a pointer that is passed to `callback`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetDefaultLogOutputFunction()
 * @sa GetLogOutputFunction()
 * @sa ResetLogOutputFunction()
 */
inline void SetLogOutputFunction(LogOutputFunction callback, void* userdata)
{
  UniqueWrapper<LogOutputFunctionCB>::erase();
  return SDL_SetLogOutputFunction(callback, userdata);
}

/**
 * Replace the default log output function with one of your own.
 *
 * @param callback an LogOutputFunction to call instead of the default.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa GetDefaultLogOutputFunction()
 * @sa GetLogOutputFunction()
 * @sa ResetLogOutputFunction()
 */
inline void SetLogOutputFunction(LogOutputFunctionCB callback)
{
  using Wrapper = UniqueWrapper<LogOutputFunctionCB>;
  SDL_SetLogOutputFunction(
    [](
      void* userdata, int category, LogPriority priority, const char* message) {
      return Wrapper::at(userdata)(LogCategory{category}, priority, message);
    },
    Wrapper::Wrap(std::move(callback)));
}

/**
 * Replace the current log output function with the default one
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetDefaultLogOutputFunction()
 * @sa GetLogOutputFunction()
 */
inline void ResetLogOutputFunction()
{
  return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
}

/// @}

/**
 * @defgroup CategoryPixels Pixel Formats and Conversion Routines
 *
 * SDL offers facilities for pixel management.
 *
 * Largely these facilities deal with pixel _format_: what does this set of
 * bits represent?
 *
 * If you mostly want to think of a pixel as some combination of red, green,
 * blue, and maybe alpha intensities, this is all pretty straightforward, and
 * in many cases, is enough information to build a perfectly fine game.
 *
 * However, the actual definition of a pixel is more complex than that:
 *
 * Pixels are a representation of a color in a particular color space.
 *
 * The first characteristic of a color space is the color type. SDL
 * understands two different color types, RGB and YCbCr, or in SDL also
 * referred to as YUV.
 *
 * RGB colors consist of red, green, and blue channels of color that are added
 * together to represent the colors we see on the screen.
 *
 * https://en.wikipedia.org/wiki/RGB_color_model
 *
 * YCbCr colors represent colors as a Y luma brightness component and red and
 * blue chroma color offsets. This color representation takes advantage of the
 * fact that the human eye is more sensitive to brightness than the color in
 * an image. The Cb and Cr components are often compressed and have lower
 * resolution than the luma component.
 *
 * https://en.wikipedia.org/wiki/YCbCr
 *
 * When the color information in YCbCr is compressed, the Y pixels are left at
 * full resolution and each Cr and Cb pixel represents an average of the color
 * information in a block of Y pixels. The chroma location determines where in
 * that block of pixels the color information is coming from.
 *
 * The color range defines how much of the pixel to use when converting a
 * pixel into a color on the display. When the full color range is used, the
 * entire numeric range of the pixel bits is significant. When narrow color
 * range is used, for historical reasons, the pixel uses only a portion of the
 * numeric range to represent colors.
 *
 * The color primaries and white point are a definition of the colors in the
 * color space relative to the standard XYZ color space.
 *
 * https://en.wikipedia.org/wiki/CIE_1931_color_space
 *
 * The transfer characteristic, or opto-electrical transfer function (OETF),
 * is the way a color is converted from mathematically linear space into a
 * non-linear output signals.
 *
 * https://en.wikipedia.org/wiki/Rec._709#Transfer_characteristics
 *
 * The matrix coefficients are used to convert between YCbCr and RGB colors.
 *
 * @{
 */

// Forward decl
struct Color;

// Forward decl
struct PaletteBase;

// Forward decl
struct PaletteRef;

// Forward decl
struct Palette;

#ifdef SDL3PP_DOC

/**
 * A fully opaque 8-bit alpha value.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_ALPHA_TRANSPARENT
 */
#define SDL_ALPHA_OPAQUE 255

/**
 * A fully opaque floating point alpha value.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_ALPHA_TRANSPARENT_FLOAT
 */
#define SDL_ALPHA_OPAQUE_FLOAT 1.0f

/**
 * A fully transparent 8-bit alpha value.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_ALPHA_OPAQUE
 */
#define SDL_ALPHA_TRANSPARENT 0

/**
 * A fully transparent floating point alpha value.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa SDL_ALPHA_OPAQUE_FLOAT
 */
#define SDL_ALPHA_TRANSPARENT_FLOAT 0.0f

#endif // SDL3PP_DOC

/**
 * @name PixelTypes
 * @{
 */

/**
 * Pixel type.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using PixelType = SDL_PixelType;

constexpr PixelType PIXELTYPE_UNKNOWN = SDL_PIXELTYPE_UNKNOWN; ///< UNKNOWN

constexpr PixelType PIXELTYPE_INDEX1 = SDL_PIXELTYPE_INDEX1; ///< INDEX1

constexpr PixelType PIXELTYPE_INDEX4 = SDL_PIXELTYPE_INDEX4; ///< INDEX4

constexpr PixelType PIXELTYPE_INDEX8 = SDL_PIXELTYPE_INDEX8; ///< INDEX8

constexpr PixelType PIXELTYPE_PACKED8 = SDL_PIXELTYPE_PACKED8; ///< PACKED8

constexpr PixelType PIXELTYPE_PACKED16 = SDL_PIXELTYPE_PACKED16; ///< PACKED16

constexpr PixelType PIXELTYPE_PACKED32 = SDL_PIXELTYPE_PACKED32; ///< PACKED32

constexpr PixelType PIXELTYPE_ARRAYU8 = SDL_PIXELTYPE_ARRAYU8; ///< ARRAYU8

constexpr PixelType PIXELTYPE_ARRAYU16 = SDL_PIXELTYPE_ARRAYU16; ///< ARRAYU16

constexpr PixelType PIXELTYPE_ARRAYU32 = SDL_PIXELTYPE_ARRAYU32; ///< ARRAYU32

constexpr PixelType PIXELTYPE_ARRAYF16 = SDL_PIXELTYPE_ARRAYF16; ///< ARRAYF16

constexpr PixelType PIXELTYPE_ARRAYF32 = SDL_PIXELTYPE_ARRAYF32; ///< ARRAYF32

constexpr PixelType PIXELTYPE_INDEX2 = SDL_PIXELTYPE_INDEX2; ///< INDEX2

/// @}

/**
 * @name BitmapOrders
 * @{
 */

/**
 * Bitmap pixel order, high bit -> low bit.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using BitmapOrder = SDL_BitmapOrder;

constexpr BitmapOrder BITMAPORDER_NONE = SDL_BITMAPORDER_NONE; ///< NONE

constexpr BitmapOrder BITMAPORDER_4321 = SDL_BITMAPORDER_4321; ///< 4321

constexpr BitmapOrder BITMAPORDER_1234 = SDL_BITMAPORDER_1234; ///< 1234

/// @}

/**
 * @name PackedOrders
 * @{
 */

/**
 * Packed component order, high bit -> low bit.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using PackedOrder = SDL_PackedOrder;

constexpr PackedOrder PACKEDORDER_NONE = SDL_PACKEDORDER_NONE; ///< NONE

constexpr PackedOrder PACKEDORDER_XRGB = SDL_PACKEDORDER_XRGB; ///< XRGB

constexpr PackedOrder PACKEDORDER_RGBX = SDL_PACKEDORDER_RGBX; ///< RGBX

constexpr PackedOrder PACKEDORDER_ARGB = SDL_PACKEDORDER_ARGB; ///< ARGB

constexpr PackedOrder PACKEDORDER_RGBA = SDL_PACKEDORDER_RGBA; ///< RGBA

constexpr PackedOrder PACKEDORDER_XBGR = SDL_PACKEDORDER_XBGR; ///< XBGR

constexpr PackedOrder PACKEDORDER_BGRX = SDL_PACKEDORDER_BGRX; ///< BGRX

constexpr PackedOrder PACKEDORDER_ABGR = SDL_PACKEDORDER_ABGR; ///< ABGR

constexpr PackedOrder PACKEDORDER_BGRA = SDL_PACKEDORDER_BGRA; ///< BGRA

/// @}

/**
 * @name ArrayOrders
 * @{
 */

/**
 * Array component order, low byte -> high byte.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ArrayOrder = SDL_ArrayOrder;

constexpr ArrayOrder ARRAYORDER_NONE = SDL_ARRAYORDER_NONE; ///< NONE

constexpr ArrayOrder ARRAYORDER_RGB = SDL_ARRAYORDER_RGB; ///< RGB

constexpr ArrayOrder ARRAYORDER_RGBA = SDL_ARRAYORDER_RGBA; ///< RGBA

constexpr ArrayOrder ARRAYORDER_ARGB = SDL_ARRAYORDER_ARGB; ///< ARGB

constexpr ArrayOrder ARRAYORDER_BGR = SDL_ARRAYORDER_BGR; ///< BGR

constexpr ArrayOrder ARRAYORDER_BGRA = SDL_ARRAYORDER_BGRA; ///< BGRA

constexpr ArrayOrder ARRAYORDER_ABGR = SDL_ARRAYORDER_ABGR; ///< ABGR

/// @}

/**
 * @name PackedLayouts
 * @{
 */

/**
 * Packed component layout.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using PackedLayout = SDL_PackedLayout;

constexpr PackedLayout PACKEDLAYOUT_NONE = SDL_PACKEDLAYOUT_NONE; ///< NONE

constexpr PackedLayout PACKEDLAYOUT_332 = SDL_PACKEDLAYOUT_332; ///< 332

constexpr PackedLayout PACKEDLAYOUT_4444 = SDL_PACKEDLAYOUT_4444; ///< 4444

constexpr PackedLayout PACKEDLAYOUT_1555 = SDL_PACKEDLAYOUT_1555; ///< 1555

constexpr PackedLayout PACKEDLAYOUT_5551 = SDL_PACKEDLAYOUT_5551; ///< 5551

constexpr PackedLayout PACKEDLAYOUT_565 = SDL_PACKEDLAYOUT_565; ///< 565

constexpr PackedLayout PACKEDLAYOUT_8888 = SDL_PACKEDLAYOUT_8888; ///< 8888

constexpr PackedLayout PACKEDLAYOUT_2101010 =
  SDL_PACKEDLAYOUT_2101010; ///< 2101010

constexpr PackedLayout PACKEDLAYOUT_1010102 =
  SDL_PACKEDLAYOUT_1010102; ///< 1010102

/// @}

/**
 * Details about the format of a pixel.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using PixelFormatDetails = SDL_PixelFormatDetails;

#ifdef SDL3PP_DOC

/**
 * A macro for defining custom FourCC pixel formats.
 *
 * For example, defining PIXELFORMAT_YV12 looks like this:
 *
 * ```c
 * SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2')
 * ```
 *
 * @param A the first character of the FourCC code.
 * @param B the second character of the FourCC code.
 * @param C the third character of the FourCC code.
 * @param D the fourth character of the FourCC code.
 * @returns a format value in the style of PixelFormat.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_DEFINE_PIXELFOURCC(A, B, C, D) SDL_FOURCC(A, B, C, D)

/**
 * A macro to retrieve the flags of an PixelFormat.
 *
 * This macro is generally not needed directly by an app, which should use
 * specific tests, like SDL_ISPIXELFORMAT_FOURCC, instead.
 *
 * @param format an PixelFormat to check.
 * @returns the flags of `format`.
 *
 * @threadsafety It is safe to call this macro from any thread.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_PIXELFLAG(format) (((format) >> 28) & 0x0F)

#endif // SDL3PP_DOC

/**
 * @name PixelFormats
 * @{
 */

/**
 * Pixel format.
 *
 * SDL's pixel formats have the following naming convention:
 *
 * - Names with a list of components and a single bit count, such as RGB24 and
 *   ABGR32, define a platform-independent encoding into bytes in the order
 *   specified. For example, in RGB24 data, each pixel is encoded in 3 bytes
 *   (red, green, blue) in that order, and in ABGR32 data, each pixel is
 *   encoded in 4 bytes alpha, blue, green, red) in that order. Use these
 *   names if the property of a format that is important to you is the order
 *   of the bytes in memory or on disk.
 * - Names with a bit count per component, such as ARGB8888 and XRGB1555, are
 *   "packed" into an appropriately-sized integer in the platform's native
 *   endianness. For example, ARGB8888 is a sequence of 32-bit integers; in
 *   each integer, the most significant bits are alpha, and the least
 *   significant bits are blue. On a little-endian CPU such as x86, the least
 *   significant bits of each integer are arranged first in memory, but on a
 *   big-endian CPU such as s390x, the most significant bits are arranged
 *   first. Use these names if the property of a format that is important to
 *   you is the meaning of each bit position within a native-endianness
 *   integer.
 * - In indexed formats such as INDEX4LSB, each pixel is represented by
 *   encoding an index into the palette into the indicated number of bits,
 *   with multiple pixels packed into each byte if appropriate. In LSB
 *   formats, the first (leftmost) pixel is stored in the least-significant
 *   bits of the byte; in MSB formats, it's stored in the most-significant
 *   bits. INDEX8 does not need LSB/MSB variants, because each pixel exactly
 *   fills one byte.
 *
 * The 32-bit byte-array encodings such as RGBA32 are aliases for the
 * appropriate 8888 encoding for the current platform. For example, RGBA32 is
 * an alias for ABGR8888 on little-endian CPUs like x86, or an alias for
 * RGBA8888 on big-endian CPUs.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @cat wrap-state
 *
 * @sa wrap-state
 * @sa PixelFormats
 */
class PixelFormat
{
  SDL_PixelFormat m_format;

public:
  /**
   * Wraps PixelFormat.
   *
   * @param format the value to be wrapped
   */
  constexpr PixelFormat(SDL_PixelFormat format = {})
    : m_format(format)
  {
  }

  /**
   * Defining custom non-FourCC pixel formats.
   *
   * For example, defining PIXELFORMAT_RGBA8888 looks like this:
   *
   * ```c
   * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
   * PACKEDLAYOUT_8888, 32, 4)
   * ```
   *
   * @param type the type of the new format, probably a PixelType value.
   * @param order the order of the new format, probably a BitmapOrder,
   *              PackedOrder, or ArrayOrder value.
   * @param layout the layout of the new format, probably an PackedLayout
   *               value or zero.
   * @param bits the number of bits per pixel of the new format.
   * @param bytes the number of bytes per pixel of the new format.
   * @post a format value in the style of PixelFormat.
   *
   * @threadsafety It is safe to call this macro from any thread.
   *
   * @since This macro is available since SDL 3.2.0.
   */
  constexpr PixelFormat(SDL_PixelType type,
                        int order,
                        SDL_PackedLayout layout,
                        int bits,
                        int bytes)
    : m_format(SDL_PixelFormat(
        SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
  {
  }

  /**
   * Default comparison operator
   */
  constexpr bool operator==(const PixelFormat& other) const = default;

  /**
   * Unwraps to the underlying PixelFormat.
   *
   * @returns the underlying PixelFormat.
   */
  constexpr operator SDL_PixelFormat() const { return m_format; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return m_format != 0; }

  /**
   * Retrieve the type.
   *
   * @returns the type as PixelType.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr PixelType GetType() const
  {
    return PixelType(SDL_PIXELTYPE(m_format));
  }

  /**
   * Retrieve the order.
   *
   * This is usually a value from the BitmapOrder, PackedOrder, or ArrayOrder
   * enumerations, depending on the format type.
   *
   * @returns the order.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr int GetOrder() const { return SDL_PIXELORDER(m_format); }

  /**
   * Retrieve the layout.
   *
   * This is usually a value from the PackedLayout enumeration, or zero if a
   * layout doesn't make sense for the format type.
   *
   * @returns the layout
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr PackedLayout GetLayout() const
  {
    return PackedLayout(SDL_PIXELLAYOUT(m_format));
  }

  /**
   * Determine this's bits per pixel.
   *
   * FourCC formats will report zero here, as it rarely makes sense to measure
   * them per-pixel.
   *
   * @returns the bits-per-pixel.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetBytesPerPixel
   */
  constexpr int GetBitsPerPixel() const { return SDL_BITSPERPIXEL(m_format); }

  /**
   * Determine this's bytes per pixel.
   *
   * Note that this macro double-evaluates its parameter, so do not use
   * expressions with side-effects here.
   *
   * FourCC formats do their best here, but many of them don't have a meaningful
   * measurement of bytes per pixel.
   *
   * @return the bytes-per-pixel.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetBitsPerPixel
   */
  constexpr int GetBytesPerPixel() const { return SDL_BYTESPERPIXEL(m_format); }

  /**
   * Determine if this is an indexed format.
   *
   * @returns true if the format is indexed, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsIndexed() const
  {
    return SDL_ISPIXELFORMAT_INDEXED(m_format);
  }

  /**
   * Determine if this is a packed format.
   *
   * @returns true if the format is packed, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsPacked() const { return SDL_ISPIXELFORMAT_PACKED(m_format); }

  /**
   * Determine if this is an array format.
   *
   * @returns true if the format is an array, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsArray() const { return SDL_ISPIXELFORMAT_ARRAY(m_format); }

  /**
   * Determine if this is a 10-bit format.
   *
   * @returns true if the format is 10-bit, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool Is10Bit() const { return SDL_ISPIXELFORMAT_10BIT(m_format); }

  /**
   * Determine if this is a floating point format.
   *
   * @returns true if the format is 10-bit, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsFloat() const { return SDL_ISPIXELFORMAT_FLOAT(m_format); }

  /**
   * Determine if this has an alpha channel.
   *
   * @returns true if the format has alpha, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsAlpha() const { return SDL_ISPIXELFORMAT_ALPHA(m_format); }

  /**
   * Determine if this is a "FourCC" format.
   *
   * This covers custom and other unusual formats.
   *
   * @returns true if the format has alpha, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsFourCC() const { return SDL_ISPIXELFORMAT_FOURCC(m_format); }

  /**
   * Get the human readable name of a pixel format.
   *
   * @returns the human readable name of the specified pixel format or
   *          "PIXELFORMAT_UNKNOWN" if the format isn't recognized.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  const char* GetName() const { return SDL_GetPixelFormatName(m_format); }

  /**
   * Convert one of the enumerated pixel formats to a bpp value and RGBA masks.
   *
   * @param bpp a bits per pixel value; usually 15, 16, or 32.
   * @param Rmask a pointer filled in with the red mask for the format.
   * @param Gmask a pointer filled in with the green mask for the format.
   * @param Bmask a pointer filled in with the blue mask for the format.
   * @param Amask a pointer filled in with the alpha mask for the format.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PixelFormat.ForMasks
   */
  bool GetMasks(int* bpp,
                Uint32* Rmask,
                Uint32* Gmask,
                Uint32* Bmask,
                Uint32* Amask) const
  {
    return SDL_GetMasksForPixelFormat(
      m_format, bpp, Rmask, Gmask, Bmask, Amask);
  }

  /**
   * Convert a bpp value and RGBA masks to an enumerated pixel format.
   *
   * This will return `PIXELFORMAT_UNKNOWN` if the conversion wasn't
   * possible.
   *
   * @param bpp a bits per pixel value; usually 15, 16, or 32.
   * @param Rmask the red mask for the format.
   * @param Gmask the green mask for the format.
   * @param Bmask the blue mask for the format.
   * @param Amask the alpha mask for the format.
   * @returns the PixelFormat value corresponding to the format masks, or
   *          PIXELFORMAT_UNKNOWN if there isn't a match.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PixelFormat.GetMasks
   */
  static PixelFormat ForMasks(int bpp,
                              Uint32 Rmask,
                              Uint32 Gmask,
                              Uint32 Bmask,
                              Uint32 Amask)
  {
    return SDL_GetPixelFormatForMasks(bpp, Rmask, Gmask, Bmask, Amask);
  }

  /**
   * Create an PixelFormatDetails structure corresponding to a pixel format.
   *
   * Returned structure may come from a shared global cache (i.e. not newly
   * allocated), and hence should not be modified, especially the palette. Weird
   * errors such as `Blit combination not supported` may occur.
   *
   * @returns a pointer to a PixelFormatDetails structure or nullptr on
   *          failure; call GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  const PixelFormatDetails* GetDetails() const
  {
    return SDL_GetPixelFormatDetails(m_format);
  }

  /**
   * Map an RGBA quadruple to a pixel value for a given pixel format.
   *
   * This function maps the RGBA color value to the specified pixel format and
   * returns the pixel value best approximating the given RGBA color value for
   * the given pixel format.
   *
   * If the specified pixel format has no alpha component the alpha value will
   * be ignored (as it will be in formats with a palette).
   *
   * If the format has a palette (8-bit) the index of the closest matching color
   * in the palette will be returned.
   *
   * If the pixel format bpp (color depth) is less than 32-bpp then the unused
   * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
   * format the return value can be assigned to a Uint16, and similarly a Uint8
   * for an 8-bpp format).
   *
   * @param color the color components of the pixel in the range 0-255.
   * @param palette an optional palette for indexed formats, may be NULL.
   * @returns a pixel value.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetPixelFormatDetails()
   * @sa Get()
   * @sa MapRGBA()
   * @sa Surface.MapColor()
   */
  inline Uint32 Map(Color color, PaletteRef palette) const;

  /**
   * Get RGBA values from a pixel in the specified format.
   *
   * This function uses the entire 8-bit [0..255] range when converting color
   * components from pixel formats with less than 8-bits per RGB component
   * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
   * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
   *
   * If the surface has no alpha component, the alpha will be returned as 0xff
   * (100% opaque).
   *
   * @param pixel a pixel value.
   * @param palette an optional palette for indexed formats, may be NULL.
   * @returns a color value.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetPixelFormatDetails()
   * @sa GetRGBA()
   * @sa Map()
   */
  inline Color Get(Uint32 pixel, PaletteRef palette) const;
};

constexpr PixelFormat PIXELFORMAT_UNKNOWN =
  SDL_PIXELFORMAT_UNKNOWN; ///< UNKNOWN

constexpr PixelFormat PIXELFORMAT_INDEX1LSB =
  SDL_PIXELFORMAT_INDEX1LSB; ///< INDEX1LSB

constexpr PixelFormat PIXELFORMAT_INDEX1MSB =
  SDL_PIXELFORMAT_INDEX1MSB; ///< INDEX1MSB

constexpr PixelFormat PIXELFORMAT_INDEX2LSB =
  SDL_PIXELFORMAT_INDEX2LSB; ///< INDEX2LSB

constexpr PixelFormat PIXELFORMAT_INDEX2MSB =
  SDL_PIXELFORMAT_INDEX2MSB; ///< INDEX2MSB

constexpr PixelFormat PIXELFORMAT_INDEX4LSB =
  SDL_PIXELFORMAT_INDEX4LSB; ///< INDEX4LSB

constexpr PixelFormat PIXELFORMAT_INDEX4MSB =
  SDL_PIXELFORMAT_INDEX4MSB; ///< INDEX4MSB

constexpr PixelFormat PIXELFORMAT_INDEX8 = SDL_PIXELFORMAT_INDEX8; ///< INDEX8

constexpr PixelFormat PIXELFORMAT_RGB332 = SDL_PIXELFORMAT_RGB332; ///< RGB332

constexpr PixelFormat PIXELFORMAT_XRGB4444 =
  SDL_PIXELFORMAT_XRGB4444; ///< XRGB4444

constexpr PixelFormat PIXELFORMAT_XBGR4444 =
  SDL_PIXELFORMAT_XBGR4444; ///< XBGR4444

constexpr PixelFormat PIXELFORMAT_XRGB1555 =
  SDL_PIXELFORMAT_XRGB1555; ///< XRGB1555

constexpr PixelFormat PIXELFORMAT_XBGR1555 =
  SDL_PIXELFORMAT_XBGR1555; ///< XBGR1555

constexpr PixelFormat PIXELFORMAT_ARGB4444 =
  SDL_PIXELFORMAT_ARGB4444; ///< ARGB4444

constexpr PixelFormat PIXELFORMAT_RGBA4444 =
  SDL_PIXELFORMAT_RGBA4444; ///< RGBA4444

constexpr PixelFormat PIXELFORMAT_ABGR4444 =
  SDL_PIXELFORMAT_ABGR4444; ///< ABGR4444

constexpr PixelFormat PIXELFORMAT_BGRA4444 =
  SDL_PIXELFORMAT_BGRA4444; ///< BGRA4444

constexpr PixelFormat PIXELFORMAT_ARGB1555 =
  SDL_PIXELFORMAT_ARGB1555; ///< ARGB1555

constexpr PixelFormat PIXELFORMAT_RGBA5551 =
  SDL_PIXELFORMAT_RGBA5551; ///< RGBA5551

constexpr PixelFormat PIXELFORMAT_ABGR1555 =
  SDL_PIXELFORMAT_ABGR1555; ///< ABGR1555

constexpr PixelFormat PIXELFORMAT_BGRA5551 =
  SDL_PIXELFORMAT_BGRA5551; ///< BGRA5551

constexpr PixelFormat PIXELFORMAT_RGB565 = SDL_PIXELFORMAT_RGB565; ///< RGB565

constexpr PixelFormat PIXELFORMAT_BGR565 = SDL_PIXELFORMAT_BGR565; ///< BGR565

constexpr PixelFormat PIXELFORMAT_RGB24 = SDL_PIXELFORMAT_RGB24; ///< RGB24

constexpr PixelFormat PIXELFORMAT_BGR24 = SDL_PIXELFORMAT_BGR24; ///< BGR24

constexpr PixelFormat PIXELFORMAT_XRGB8888 =
  SDL_PIXELFORMAT_XRGB8888; ///< XRGB8888

constexpr PixelFormat PIXELFORMAT_RGBX8888 =
  SDL_PIXELFORMAT_RGBX8888; ///< RGBX8888

constexpr PixelFormat PIXELFORMAT_XBGR8888 =
  SDL_PIXELFORMAT_XBGR8888; ///< XBGR8888

constexpr PixelFormat PIXELFORMAT_BGRX8888 =
  SDL_PIXELFORMAT_BGRX8888; ///< BGRX8888

constexpr PixelFormat PIXELFORMAT_ARGB8888 =
  SDL_PIXELFORMAT_ARGB8888; ///< ARGB8888

constexpr PixelFormat PIXELFORMAT_RGBA8888 =
  SDL_PIXELFORMAT_RGBA8888; ///< RGBA8888

constexpr PixelFormat PIXELFORMAT_ABGR8888 =
  SDL_PIXELFORMAT_ABGR8888; ///< ABGR8888

constexpr PixelFormat PIXELFORMAT_BGRA8888 =
  SDL_PIXELFORMAT_BGRA8888; ///< BGRA8888

constexpr PixelFormat PIXELFORMAT_XRGB2101010 =
  SDL_PIXELFORMAT_XRGB2101010; ///< XRGB2101010

constexpr PixelFormat PIXELFORMAT_XBGR2101010 =
  SDL_PIXELFORMAT_XBGR2101010; ///< XBGR2101010

constexpr PixelFormat PIXELFORMAT_ARGB2101010 =
  SDL_PIXELFORMAT_ARGB2101010; ///< ARGB2101010

constexpr PixelFormat PIXELFORMAT_ABGR2101010 =
  SDL_PIXELFORMAT_ABGR2101010; ///< ABGR2101010

constexpr PixelFormat PIXELFORMAT_RGB48 = SDL_PIXELFORMAT_RGB48; ///< RGB48

constexpr PixelFormat PIXELFORMAT_BGR48 = SDL_PIXELFORMAT_BGR48; ///< BGR48

constexpr PixelFormat PIXELFORMAT_RGBA64 = SDL_PIXELFORMAT_RGBA64; ///< RGBA64

constexpr PixelFormat PIXELFORMAT_ARGB64 = SDL_PIXELFORMAT_ARGB64; ///< ARGB64

constexpr PixelFormat PIXELFORMAT_BGRA64 = SDL_PIXELFORMAT_BGRA64; ///< BGRA64

constexpr PixelFormat PIXELFORMAT_ABGR64 = SDL_PIXELFORMAT_ABGR64; ///< ABGR64

constexpr PixelFormat PIXELFORMAT_RGB48_FLOAT =
  SDL_PIXELFORMAT_RGB48_FLOAT; ///< RGB48_FLOAT

constexpr PixelFormat PIXELFORMAT_BGR48_FLOAT =
  SDL_PIXELFORMAT_BGR48_FLOAT; ///< BGR48_FLOAT

constexpr PixelFormat PIXELFORMAT_RGBA64_FLOAT =
  SDL_PIXELFORMAT_RGBA64_FLOAT; ///< RGBA64_FLOAT

constexpr PixelFormat PIXELFORMAT_ARGB64_FLOAT =
  SDL_PIXELFORMAT_ARGB64_FLOAT; ///< ARGB64_FLOAT

constexpr PixelFormat PIXELFORMAT_BGRA64_FLOAT =
  SDL_PIXELFORMAT_BGRA64_FLOAT; ///< BGRA64_FLOAT

constexpr PixelFormat PIXELFORMAT_ABGR64_FLOAT =
  SDL_PIXELFORMAT_ABGR64_FLOAT; ///< ABGR64_FLOAT

constexpr PixelFormat PIXELFORMAT_RGB96_FLOAT =
  SDL_PIXELFORMAT_RGB96_FLOAT; ///< RGB96_FLOAT

constexpr PixelFormat PIXELFORMAT_BGR96_FLOAT =
  SDL_PIXELFORMAT_BGR96_FLOAT; ///< BGR96_FLOAT

constexpr PixelFormat PIXELFORMAT_RGBA128_FLOAT =
  SDL_PIXELFORMAT_RGBA128_FLOAT; ///< RGBA128_FLOAT

constexpr PixelFormat PIXELFORMAT_ARGB128_FLOAT =
  SDL_PIXELFORMAT_ARGB128_FLOAT; ///< ARGB128_FLOAT

constexpr PixelFormat PIXELFORMAT_BGRA128_FLOAT =
  SDL_PIXELFORMAT_BGRA128_FLOAT; ///< BGRA128_FLOAT

constexpr PixelFormat PIXELFORMAT_ABGR128_FLOAT =
  SDL_PIXELFORMAT_ABGR128_FLOAT; ///< ABGR128_FLOAT

constexpr PixelFormat PIXELFORMAT_YV12 =
  SDL_PIXELFORMAT_YV12; ///< Planar mode: Y + V + U (3 planes)

constexpr PixelFormat PIXELFORMAT_IYUV =
  SDL_PIXELFORMAT_IYUV; ///< Planar mode: Y + U + V (3 planes)

constexpr PixelFormat PIXELFORMAT_YUY2 =
  SDL_PIXELFORMAT_YUY2; ///< Packed mode: Y0+U0+Y1+V0 (1 plane)

constexpr PixelFormat PIXELFORMAT_UYVY =
  SDL_PIXELFORMAT_UYVY; ///< Packed mode: U0+Y0+V0+Y1 (1 plane)

constexpr PixelFormat PIXELFORMAT_YVYU =
  SDL_PIXELFORMAT_YVYU; ///< Packed mode: Y0+V0+Y1+U0 (1 plane)

constexpr PixelFormat PIXELFORMAT_NV12 =
  SDL_PIXELFORMAT_NV12; ///< Planar mode: Y + U/V interleaved (2 planes)

constexpr PixelFormat PIXELFORMAT_NV21 =
  SDL_PIXELFORMAT_NV21; ///< Planar mode: Y + V/U interleaved (2 planes)

constexpr PixelFormat PIXELFORMAT_P010 =
  SDL_PIXELFORMAT_P010; ///< Planar mode: Y + U/V interleaved (2 planes)

constexpr PixelFormat PIXELFORMAT_EXTERNAL_OES =
  SDL_PIXELFORMAT_EXTERNAL_OES; ///< Android video texture format.

#if SDL_VERSION_ATLEAST(3, 2, 10)

constexpr PixelFormat PIXELFORMAT_MJPG = SDL_PIXELFORMAT_MJPG; ///< Motion JPEG.

#endif // SDL_VERSION_ATLEAST(3, 2, 10)

constexpr PixelFormat PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA32; ///< RGBA32

constexpr PixelFormat PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB32; ///< ARGB32

constexpr PixelFormat PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA32; ///< BGRA32

constexpr PixelFormat PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR32; ///< ABGR32

constexpr PixelFormat PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_RGBX32; ///< RGBX32

constexpr PixelFormat PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_XRGB32; ///< XRGB32

constexpr PixelFormat PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_BGRX32; ///< BGRX32

constexpr PixelFormat PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_XBGR32; ///< XBGR32

/// @}

/**
 * @name ColorTypes
 * @{
 */

/**
 * Colorspace color type.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ColorType = SDL_ColorType;

constexpr ColorType COLOR_TYPE_UNKNOWN =
  SDL_COLOR_TYPE_UNKNOWN; ///< COLOR_TYPE_UNKNOWN

constexpr ColorType COLOR_TYPE_RGB = SDL_COLOR_TYPE_RGB; ///< COLOR_TYPE_RGB

constexpr ColorType COLOR_TYPE_YCBCR =
  SDL_COLOR_TYPE_YCBCR; ///< COLOR_TYPE_YCBCR

/// @}

/**
 * @name ColorRanges
 * @{
 */

/**
 * Colorspace color range, as described by
 * https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ColorRange = SDL_ColorRange;

constexpr ColorRange COLOR_RANGE_UNKNOWN =
  SDL_COLOR_RANGE_UNKNOWN; ///< COLOR_RANGE_UNKNOWN

/**
 * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
 */
constexpr ColorRange COLOR_RANGE_LIMITED = SDL_COLOR_RANGE_LIMITED;

/**
 * Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
 */
constexpr ColorRange COLOR_RANGE_FULL = SDL_COLOR_RANGE_FULL;

/// @}

/**
 * @name ColorPrimaries
 * @{
 */

/**
 * Colorspace color primaries, as described by
 * https://www.itu.int/rec/T-REC-H.273-201612-S/en
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ColorPrimaries = SDL_ColorPrimaries;

constexpr ColorPrimaries COLOR_PRIMARIES_UNKNOWN =
  SDL_COLOR_PRIMARIES_UNKNOWN; ///< COLOR_PRIMARIES_UNKNOWN

constexpr ColorPrimaries COLOR_PRIMARIES_BT709 =
  SDL_COLOR_PRIMARIES_BT709; ///< ITU-R BT.709-6.

constexpr ColorPrimaries COLOR_PRIMARIES_UNSPECIFIED =
  SDL_COLOR_PRIMARIES_UNSPECIFIED; ///< COLOR_PRIMARIES_UNSPECIFIED

constexpr ColorPrimaries COLOR_PRIMARIES_BT470M =
  SDL_COLOR_PRIMARIES_BT470M; ///< ITU-R BT.470-6 System M.

constexpr ColorPrimaries COLOR_PRIMARIES_BT470BG =
  SDL_COLOR_PRIMARIES_BT470BG; ///< ITU-R BT.470-6 System B, G / ITU-R BT.601-7
                               ///< 625.

constexpr ColorPrimaries COLOR_PRIMARIES_BT601 =
  SDL_COLOR_PRIMARIES_BT601; ///< ITU-R BT.601-7 525, SMPTE 170M.

/**
 * SMPTE 240M, functionally the same as COLOR_PRIMARIES_BT601.
 */
constexpr ColorPrimaries COLOR_PRIMARIES_SMPTE240 =
  SDL_COLOR_PRIMARIES_SMPTE240;

constexpr ColorPrimaries COLOR_PRIMARIES_GENERIC_FILM =
  SDL_COLOR_PRIMARIES_GENERIC_FILM; ///< Generic film (color filters using
                                    ///< Illuminant C)

constexpr ColorPrimaries COLOR_PRIMARIES_BT2020 =
  SDL_COLOR_PRIMARIES_BT2020; ///< ITU-R BT.2020-2 / ITU-R BT.2100-0.

constexpr ColorPrimaries COLOR_PRIMARIES_XYZ =
  SDL_COLOR_PRIMARIES_XYZ; ///< SMPTE ST 428-1.

constexpr ColorPrimaries COLOR_PRIMARIES_SMPTE431 =
  SDL_COLOR_PRIMARIES_SMPTE431; ///< SMPTE RP 431-2.

constexpr ColorPrimaries COLOR_PRIMARIES_SMPTE432 =
  SDL_COLOR_PRIMARIES_SMPTE432; ///< SMPTE EG 432-1 / DCI P3.

constexpr ColorPrimaries COLOR_PRIMARIES_EBU3213 =
  SDL_COLOR_PRIMARIES_EBU3213; ///< EBU Tech.  3213-E

constexpr ColorPrimaries COLOR_PRIMARIES_CUSTOM =
  SDL_COLOR_PRIMARIES_CUSTOM; ///< COLOR_PRIMARIES_CUSTOM

/// @}

/**
 * @name TransferCharacteristics
 * @{
 */

/**
 * Colorspace transfer characteristics.
 *
 * These are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en
 *
 * @since This enum is available since SDL 3.2.0.
 */
using TransferCharacteristics = SDL_TransferCharacteristics;

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_UNKNOWN =
  SDL_TRANSFER_CHARACTERISTICS_UNKNOWN; ///< TRANSFER_CHARACTERISTICS_UNKNOWN

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_BT709 =
  SDL_TRANSFER_CHARACTERISTICS_BT709; ///< Rec.  ITU-R BT.709-6 / ITU-R BT1361

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_UNSPECIFIED =
  SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED; ///< TRANSFER_CHARACTERISTICS_UNSPECIFIED

/**
 * ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM.
 */
constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_GAMMA22 =
  SDL_TRANSFER_CHARACTERISTICS_GAMMA22;

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_GAMMA28 =
  SDL_TRANSFER_CHARACTERISTICS_GAMMA28; ///< ITU-R BT.470-6 System B, G.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_BT601 =
  SDL_TRANSFER_CHARACTERISTICS_BT601; ///< SMPTE ST 170M / ITU-R BT.601-7 525 or
                                      ///< 625.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_SMPTE240 =
  SDL_TRANSFER_CHARACTERISTICS_SMPTE240; ///< SMPTE ST 240M.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_LINEAR =
  SDL_TRANSFER_CHARACTERISTICS_LINEAR; ///< TRANSFER_CHARACTERISTICS_LINEAR

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_LOG100 =
  SDL_TRANSFER_CHARACTERISTICS_LOG100; ///< TRANSFER_CHARACTERISTICS_LOG100

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_LOG100_SQRT10 =
  SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10; ///< TRANSFER_CHARACTERISTICS_LOG100_SQRT10

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_IEC61966 =
  SDL_TRANSFER_CHARACTERISTICS_IEC61966; ///< IEC 61966-2-4.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_BT1361 =
  SDL_TRANSFER_CHARACTERISTICS_BT1361; ///< ITU-R BT1361 Extended Colour Gamut.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_SRGB =
  SDL_TRANSFER_CHARACTERISTICS_SRGB; ///< IEC 61966-2-1 (sRGB or sYCC)

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_BT2020_10BIT =
  SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT; ///< ITU-R BT2020 for 10-bit
                                             ///< system.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_BT2020_12BIT =
  SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT; ///< ITU-R BT2020 for 12-bit
                                             ///< system.

/**
 * SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems.
 */
constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_PQ =
  SDL_TRANSFER_CHARACTERISTICS_PQ;

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_SMPTE428 =
  SDL_TRANSFER_CHARACTERISTICS_SMPTE428; ///< SMPTE ST 428-1.

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_HLG =
  SDL_TRANSFER_CHARACTERISTICS_HLG; ///< ARIB STD-B67, known as "hybrid
                                    ///< log-gamma" (HLG)

constexpr TransferCharacteristics TRANSFER_CHARACTERISTICS_CUSTOM =
  SDL_TRANSFER_CHARACTERISTICS_CUSTOM; ///< TRANSFER_CHARACTERISTICS_CUSTOM

/// @}

/**
 * @name MatrixCoefficients
 * @{
 */

/**
 * Colorspace matrix coefficients.
 *
 * These are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en
 *
 * @since This enum is available since SDL 3.2.0.
 */
using MatrixCoefficients = SDL_MatrixCoefficients;

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_IDENTITY =
  SDL_MATRIX_COEFFICIENTS_IDENTITY; ///< MATRIX_COEFFICIENTS_IDENTITY

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_BT709 =
  SDL_MATRIX_COEFFICIENTS_BT709; ///< ITU-R BT.709-6.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_UNSPECIFIED =
  SDL_MATRIX_COEFFICIENTS_UNSPECIFIED; ///< MATRIX_COEFFICIENTS_UNSPECIFIED

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_FCC =
  SDL_MATRIX_COEFFICIENTS_FCC; ///< US FCC Title 47.

/**
 * ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as
 * MATRIX_COEFFICIENTS_BT601.
 */
constexpr MatrixCoefficients MATRIX_COEFFICIENTS_BT470BG =
  SDL_MATRIX_COEFFICIENTS_BT470BG;

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_BT601 =
  SDL_MATRIX_COEFFICIENTS_BT601; ///< ITU-R BT.601-7 525.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_SMPTE240 =
  SDL_MATRIX_COEFFICIENTS_SMPTE240; ///< SMPTE 240M.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_YCGCO =
  SDL_MATRIX_COEFFICIENTS_YCGCO; ///< MATRIX_COEFFICIENTS_YCGCO

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_BT2020_NCL =
  SDL_MATRIX_COEFFICIENTS_BT2020_NCL; ///< ITU-R BT.2020-2 non-constant
                                      ///< luminance.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_BT2020_CL =
  SDL_MATRIX_COEFFICIENTS_BT2020_CL; ///< ITU-R BT.2020-2 constant luminance.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_SMPTE2085 =
  SDL_MATRIX_COEFFICIENTS_SMPTE2085; ///< SMPTE ST 2085.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL =
  SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL; ///< MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL =
  SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL; ///< MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_ICTCP =
  SDL_MATRIX_COEFFICIENTS_ICTCP; ///< ITU-R BT.2100-0 ICTCP.

constexpr MatrixCoefficients MATRIX_COEFFICIENTS_CUSTOM =
  SDL_MATRIX_COEFFICIENTS_CUSTOM; ///< MATRIX_COEFFICIENTS_CUSTOM

/// @}

/**
 * @name ChromaLocations
 * @{
 */

/**
 * Colorspace chroma sample location.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ChromaLocation = SDL_ChromaLocation;

constexpr ChromaLocation CHROMA_LOCATION_NONE =
  SDL_CHROMA_LOCATION_NONE; ///< RGB, no chroma sampling.

/**
 * In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge
 * of the 2x2 square. In other words, they have the same horizontal location as
 * the top-left pixel, but is shifted one-half pixel down vertically.
 */
constexpr ChromaLocation CHROMA_LOCATION_LEFT = SDL_CHROMA_LOCATION_LEFT;

/**
 * In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2
 * square. In other words, they are offset one-half pixel to the right and
 * one-half pixel down compared to the top-left pixel.
 */
constexpr ChromaLocation CHROMA_LOCATION_CENTER = SDL_CHROMA_LOCATION_CENTER;

/**
 * In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and
 * Cr are sampled at the same location as the group's top-left Y pixel
 * ("co-sited", "co-located").
 */
constexpr ChromaLocation CHROMA_LOCATION_TOPLEFT = SDL_CHROMA_LOCATION_TOPLEFT;

/// @}

/**
 * @name Colorspaces
 * @{
 */

/**
 * Colorspace definitions.
 *
 * Since similar colorspaces may vary in their details (matrix, transfer
 * function, etc.), this is not an exhaustive list, but rather a
 * representative sample of the kinds of colorspaces supported in SDL.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @cat wrap-state
 *
 * @sa Colorspaces
 * @sa ColorPrimaries
 * @sa ColorRange
 * @sa ColorType
 * @sa MatrixCoefficients
 * @sa TransferCharacteristics
 */
class Colorspace
{
  SDL_Colorspace m_colorspace;

public:
  /**
   * Wraps Colorspace.
   *
   * @param colorspace the value to be wrapped
   */
  constexpr Colorspace(SDL_Colorspace colorspace = {})
    : m_colorspace(colorspace)
  {
  }

  /**
   * Define custom Colorspace formats.
   *
   * For example, defining COLORSPACE_SRGB looks like this:
   *
   * ```cpp
   * Colorspace colorspace(COLOR_TYPE_RGB,
   *                       COLOR_RANGE_FULL,
   *                       COLOR_PRIMARIES_BT709,
   *                       TRANSFER_CHARACTERISTICS_SRGB,
   *                       MATRIX_COEFFICIENTS_IDENTITY,
   *                       CHROMA_LOCATION_NONE)
   * ```
   *
   * @param type the type of the new format, probably an ColorType value.
   * @param range the range of the new format, probably a ColorRange value.
   * @param primaries the primaries of the new format, probably an
   *                  ColorPrimaries value.
   * @param transfer the transfer characteristics of the new format, probably an
   *                 TransferCharacteristics value.
   * @param matrix the matrix coefficients of the new format, probably an
   *               MatrixCoefficients value.
   * @param chroma the chroma sample location of the new format, probably an
   *               ChromaLocation value.
   * @post a format value in the style of Colorspace.
   *
   * @threadsafety It is safe to call this macro from any thread.
   *
   * @since This macro is available since SDL 3.2.0.
   */
  constexpr Colorspace(ColorType type,
                       ColorRange range,
                       ColorPrimaries primaries,
                       TransferCharacteristics transfer,
                       MatrixCoefficients matrix,
                       ChromaLocation chroma)
    : m_colorspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
                                                        range,
                                                        primaries,
                                                        transfer,
                                                        matrix,
                                                        chroma)))
  {
  }

  /**
   * Default comparison operator
   */
  constexpr bool operator==(const Colorspace& other) const = default;

  /// True if a valid colorspace
  /**
   * Unwraps to the underlying Colorspace.
   *
   * @returns the underlying Colorspace.
   */
  constexpr operator SDL_Colorspace() const { return m_colorspace; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return m_colorspace != 0; }

  /**
   * Retrieve the type of a Colorspace.
   *
   * @returns the ColorType for `cspace`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr ColorType GetType() const
  {
    return SDL_COLORSPACETYPE(m_colorspace);
  }

  /**
   * Retrieve the range of a Colorspace.
   *
   * @returns the ColorRange of `cspace`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr ColorRange GetRange() const
  {
    return SDL_COLORSPACERANGE(m_colorspace);
  }

  /**
   * Retrieve the chroma sample location of an Colorspace.
   *
   * @returns the ChromaLocation of `cspace`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr ChromaLocation GetChroma() const
  {
    return SDL_COLORSPACECHROMA(m_colorspace);
  }

  /**
   * Retrieve the primaries of an Colorspace.
   *
   * @returns the ColorPrimaries of `cspace`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr ColorPrimaries GetPrimaries() const
  {
    return SDL_COLORSPACEPRIMARIES(m_colorspace);
  }

  /**
   * Retrieve the transfer characteristics of an Colorspace.
   *
   * @returns the TransferCharacteristics of `cspace`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr TransferCharacteristics GetTransfer() const
  {
    return SDL_COLORSPACETRANSFER(m_colorspace);
  }

  /**
   * Retrieve the matrix coefficients of an Colorspace.
   *
   * @returns the MatrixCoefficients of `cspace`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr MatrixCoefficients GetMatrix() const
  {
    return SDL_COLORSPACEMATRIX(m_colorspace);
  }

  /**
   * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
   *
   * @returns true if BT601 or BT470BG, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsMatrixBT601() const
  {
    return SDL_ISCOLORSPACE_MATRIX_BT601(m_colorspace);
  }

  /**
   * Determine if an Colorspace uses BT709 matrix coefficients.
   *
   * @returns true if BT709, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsMatrixBT709() const
  {
    return SDL_ISCOLORSPACE_MATRIX_BT709(m_colorspace);
  }

  /**
   * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
   *
   * @returns true if BT2020_NCL, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsMatrixBT2020_NCL() const
  {
    return SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(m_colorspace);
  }

  /**
   * A function to determine if an Colorspace has a limited range.
   *
   * @returns true if limited range, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsLimitedRange() const
  {
    return SDL_ISCOLORSPACE_LIMITED_RANGE(m_colorspace);
  }

  /**
   * A function to determine if an Colorspace has a full range.
   *
   * @returns true if full range, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsFullRange() const
  {
    return SDL_ISCOLORSPACE_FULL_RANGE(m_colorspace);
  }
};

constexpr Colorspace COLORSPACE_UNKNOWN = SDL_COLORSPACE_UNKNOWN; ///< UNKNOWN

/**
 * Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709.
 */
constexpr Colorspace COLORSPACE_SRGB = SDL_COLORSPACE_SRGB;

constexpr Colorspace COLORSPACE_SRGB_LINEAR =
  SDL_COLORSPACE_SRGB_LINEAR; ///< [object Object]

constexpr Colorspace COLORSPACE_HDR10 =
  SDL_COLORSPACE_HDR10; ///< [object Object]

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601.
 */
constexpr Colorspace COLORSPACE_JPEG = SDL_COLORSPACE_JPEG;

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601.
 */
constexpr Colorspace COLORSPACE_BT601_LIMITED = SDL_COLORSPACE_BT601_LIMITED;

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601.
 */
constexpr Colorspace COLORSPACE_BT601_FULL = SDL_COLORSPACE_BT601_FULL;

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709.
 */
constexpr Colorspace COLORSPACE_BT709_LIMITED = SDL_COLORSPACE_BT709_LIMITED;

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709.
 */
constexpr Colorspace COLORSPACE_BT709_FULL = SDL_COLORSPACE_BT709_FULL;

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020.
 */
constexpr Colorspace COLORSPACE_BT2020_LIMITED = SDL_COLORSPACE_BT2020_LIMITED;

/**
 * Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020.
 */
constexpr Colorspace COLORSPACE_BT2020_FULL = SDL_COLORSPACE_BT2020_FULL;

/**
 * The default colorspace for RGB surfaces if no colorspace is specified.
 */
constexpr Colorspace COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_RGB_DEFAULT;

/**
 * The default colorspace for YUV surfaces if no colorspace is specified.
 */
constexpr Colorspace COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_YUV_DEFAULT;

/// @}

/**
 * A structure that represents a color as RGBA components.
 *
 * The bits of this structure can be directly reinterpreted as an
 * integer-packed color which uses the PIXELFORMAT_RGBA32 format
 * (PIXELFORMAT_ABGR8888 on little-endian systems and
 * PIXELFORMAT_RGBA8888 on big-endian systems).
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat wrap-extending-struct
 * @sa FColor
 */
struct Color : SDL_Color
{
  /**
   * Wraps Color.
   *
   * @param color the value to be wrapped
   */
  constexpr Color(const SDL_Color& color = {})
    : SDL_Color(color)
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param r the value for channel r.
   * @param g the value for channel g.
   * @param b the value for channel b.
   * @param a the value for channel a.
   */
  constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
    : SDL_Color{r, g, b, a}
  {
  }

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const Color& other) const = default;

  /**
   * Get the red component from the color.
   *
   * @returns The red component from the color.
   *
   */
  constexpr Uint8 GetR() const { return r; }

  /**
   * Set the red component from the color.
   *
   * @param newR New red component value.
   * @returns Reference to self.
   */
  constexpr Color& SetR(Uint8 newR)
  {
    r = newR;
    return *this;
  }

  /**
   * Get the green component from the color.
   *
   * @returns The green component from the color.
   *
   */
  constexpr Uint8 GetG() const { return g; }

  /**
   * Set the green component from the color.
   *
   * @param newG New green component value.
   * @returns Reference to self.
   */
  constexpr Color& SetG(Uint8 newG)
  {
    g = newG;
    return *this;
  }

  /**
   * Get the blue component from the color.
   *
   * @returns The blue component from the color.
   *
   */
  constexpr Uint8 GetB() const { return b; }

  /**
   * Set the blue component from the color.
   *
   * @param newB New blue component value.
   * @returns Reference to self.
   */
  constexpr Color& SetB(Uint8 newB)
  {
    b = newB;
    return *this;
  }

  /**
   * Get the alpha component from the color.
   *
   * @returns The alpha component from the color.
   *
   */
  constexpr Uint8 GetA() const { return a; }

  /**
   * Set the alpha component from the color.
   *
   * @param newA New alpha component value.
   * @returns Reference to self.
   */
  constexpr Color& SetA(Uint8 newA)
  {
    a = newA;
    return *this;
  }

  /**
   * Map an RGBA quadruple to a pixel value for a given pixel format.
   *
   * This function maps the RGBA color value to the specified pixel format and
   * returns the pixel value best approximating the given RGBA color value for
   * the given pixel format.
   *
   * If the specified pixel format has no alpha component the alpha value will
   * be ignored (as it will be in formats with a palette).
   *
   * If the format has a palette (8-bit) the index of the closest matching color
   * in the palette will be returned.
   *
   * If the pixel format bpp (color depth) is less than 32-bpp then the unused
   * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
   * format the return value can be assigned to a Uint16, and similarly a Uint8
   * for an 8-bpp format).
   *
   * @param format a pointer to PixelFormatDetails describing the pixel
   *               format.
   * @param palette an optional palette for indexed formats, may be NULL.
   * @returns a pixel value.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified.
   */
  Uint32 Map(const PixelFormatDetails& format, PaletteRef palette) const;

  /**
   * Get RGBA values from a pixel in the specified format.
   *
   * This function uses the entire 8-bit [0..255] range when converting color
   * components from pixel formats with less than 8-bits per RGB component
   * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
   * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
   *
   * If the surface has no alpha component, the alpha will be returned as 0xff
   * (100% opaque).
   *
   * @param pixel a pixel value.
   * @param format a pointer to SDL_PixelFormatDetails describing the pixel
   *               format.
   * @param palette an optional palette for indexed formats, may be NULL.
   * @returns a color value.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PixelFormat.GetDetails()
   * @sa GetRGBA()
   * @sa Map()
   */
  static Color Get(Uint32 pixel,
                   const PixelFormatDetails& format,
                   PaletteRef palette);
};

/**
 * The bits of this structure can be directly reinterpreted as a float-packed
 * color which uses the PIXELFORMAT_RGBA128_FLOAT format
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat wrap-extending-struct
 *
 * @sa Color
 */
struct FColor : SDL_FColor
{
  /**
   * Wraps FColor.
   *
   * @param color the value to be wrapped
   */
  constexpr FColor(const SDL_FColor& color = {})
    : SDL_FColor(color)
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param r the value for r.
   * @param g the value for g.
   * @param b the value for b.
   * @param a the value for a.
   */
  constexpr FColor(float r, float g, float b, float a = 1)
    : SDL_FColor{r, g, b, a}
  {
  }

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const FColor& other) const = default;

  /**
   * Get the red component from the color.
   *
   * @returns The red component from the color.
   *
   */
  constexpr float GetR() const { return r; }

  /**
   * Set the red component from the color.
   *
   * @param newR New red component value.
   * @returns Reference to self.
   */
  constexpr FColor& SetR(float newR)
  {
    r = newR;
    return *this;
  }

  /**
   * Get the green component from the color.
   *
   * @returns The green component from the color.
   *
   */
  constexpr float GetG() const { return g; }

  /**
   * Set the green component from the color.
   *
   * @param newG New green component value.
   * @returns Reference to self.
   */
  constexpr FColor& SetG(float newG)
  {
    g = newG;
    return *this;
  }

  /**
   * Get the blue component from the color.
   *
   * @returns The blue component from the color.
   *
   */
  constexpr float GetB() const { return b; }

  /**
   * Set the blue component from the color.
   *
   * @param newB New blue component value.
   * @returns Reference to self.
   */
  constexpr FColor& SetB(float newB)
  {
    b = newB;
    return *this;
  }

  /**
   * Get the alpha component from the color.
   *
   * @returns The alpha component from the color.
   *
   */
  constexpr float GetA() const { return a; }

  /**
   * Set the alpha component from the color.
   *
   * @param newA New alpha component value.
   * @returns Reference to self.
   */
  constexpr FColor& SetA(float newA)
  {
    a = newA;
    return *this;
  }
};

/**
 * A set of indexed colors representing a palette.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa PaletteBase.SetColors
 * @sa Palette
 * @sa PaletteRef
 */
struct PaletteBase : Resource<SDL_Palette*>
{
  using Resource::Resource;

  /**
   * Create a palette structure with the specified number of color entries.
   *
   * The palette entries are initialized to white.
   *
   * @param ncolors represents the number of color entries in the color palette.
   * @post this represents a new Palette structure convertible to true on
   *       success or converts to false on failure (e.g. if there wasn't enough
   *       memory); call GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PaletteBase.SetColors
   * @sa SurfaceBase.SetPalette
   */
  PaletteBase(int ncolors)
    : Resource(SDL_CreatePalette(ncolors))
  {
  }

  /// Return the number of colors
  constexpr int GetSize() const { return get()->ncolors; }

  /// Get the index color
  constexpr Color operator[](int index) const { return get()->colors[index]; }

  /**
   * Set a range of colors in a palette.
   *
   * @param colors an array of Color structures to copy into the palette.
   * @param firstcolor the index of the first palette entry to modify.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified or destroyed in another thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetColors(std::span<const SDL_Color> colors, int firstcolor = 0)
  {
    return SDL_SetPaletteColors(
      get(), colors.data(), firstcolor, colors.size());
  }

  /**
   * Set a range of colors in a palette.
   *
   * @param colors a span of SDL_Color structures to copy into the palette.
   * @param firstcolor the index of the first palette entry to modify.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified or destroyed in another thread.
   */
  bool SetColors(SpanRef<const SDL_Color> colors, int firstcolor = 0)
  {
    SDL_assert_paranoid(colors.size() < SDL_MAX_SINT32);
    return SDL_SetPaletteColors(
      get(), colors.data(), firstcolor, colors.size());
  }
};

/**
 * Handle to a non owned palette
 *
 * @cat resource
 *
 * @sa PaletteBase
 * @sa Palette
 */
struct PaletteRef : PaletteBase
{
  using PaletteBase::PaletteBase;

  /**
   * Copy constructor.
   */
  constexpr PaletteRef(const PaletteRef& other)
    : PaletteBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr PaletteRef(PaletteRef&& other)
    : PaletteBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~PaletteRef() = default;

  /**
   * Assignment operator.
   */
  PaletteRef& operator=(PaletteRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Free a palette created with PaletteBase.PaletteBase().
   *
   * After calling, this object becomes empty.
   *
   * @threadsafety It is safe to call this function from any thread, as long as
   *               the palette is not modified or destroyed in another thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PaletteBase.PaletteBase
   */
  void reset(SDL_Palette* newResource = {})
  {
    SDL_DestroyPalette(release(newResource));
  }
};

/**
 * Handle to an owned palette
 *
 * @cat resource
 *
 * @sa PaletteBase
 * @sa PaletteRef
 */
struct Palette : PaletteRef
{
  using PaletteRef::PaletteRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Palette(SDL_Palette* resource = {})
    : PaletteRef(resource)
  {
  }

  constexpr Palette(const Palette& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Palette(Palette&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Palette() { reset(); }

  /**
   * Assignment operator.
   */
  Palette& operator=(Palette other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Map an RGB triple to an opaque pixel value for a given pixel format.
 *
 * This function maps the RGB color value to the specified pixel format and
 * returns the pixel value best approximating the given RGB color value for
 * the given pixel format.
 *
 * If the format has a palette (8-bit) the index of the closest matching color
 * in the palette will be returned.
 *
 * If the specified pixel format has an alpha component it will be returned as
 * all 1 bits (fully opaque).
 *
 * If the pixel format bpp (color depth) is less than 32-bpp then the unused
 * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
 * format the return value can be assigned to a Uint16, and similarly a Uint8
 * for an 8-bpp format).
 *
 * @param format a reference to PixelFormatDetails describing the pixel
 *               format.
 * @param palette an optional palette for indexed formats, may be nullptr.
 * @param r the red component of the pixel in the range 0-255.
 * @param g the green component of the pixel in the range 0-255.
 * @param b the blue component of the pixel in the range 0-255.
 * @returns a pixel value.
 *
 * @threadsafety It is safe to call this function from any thread, as long as
 *               the palette is not modified.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PixelFormat.GetDetails
 * @sa GetRGB
 * @sa MapRGBA
 * @sa SurfaceBase.MapColor
 */
inline Uint32 MapRGB(const PixelFormatDetails& format,
                     const PaletteBase& palette,
                     Uint8 r,
                     Uint8 g,
                     Uint8 b)
{
  return SDL_MapRGB(&format, palette.get(), r, g, b);
}

/**
 * Map an RGBA quadruple to a pixel value for a given pixel format.
 *
 * This function maps the RGBA color value to the specified pixel format and
 * returns the pixel value best approximating the given RGBA color value for
 * the given pixel format.
 *
 * If the specified pixel format has no alpha component the alpha value will
 * be ignored (as it will be in formats with a palette).
 *
 * If the format has a palette (8-bit) the index of the closest matching color
 * in the palette will be returned.
 *
 * If the pixel format bpp (color depth) is less than 32-bpp then the unused
 * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
 * format the return value can be assigned to a Uint16, and similarly a Uint8
 * for an 8-bpp format).
 *
 * @param format a reference to PixelFormatDetails describing the pixel
 *               format.
 * @param palette an optional palette for indexed formats, may be nullptr.
 * @param r the red component of the pixel in the range 0-255.
 * @param g the green component of the pixel in the range 0-255.
 * @param b the blue component of the pixel in the range 0-255.
 * @param a the alpha component of the pixel in the range 0-255.
 * @returns a pixel value.
 *
 * @threadsafety It is safe to call this function from any thread, as long as
 *               the palette is not modified.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PixelFormat.GetDetails
 * @sa GetRGBA
 * @sa MapRGB
 * @sa SurfaceBase.MapColor
 */
inline Uint32 MapRGBA(const PixelFormatDetails& format,
                      const PaletteBase& palette,
                      Uint8 r,
                      Uint8 g,
                      Uint8 b,
                      Uint8 a)
{
  return SDL_MapRGBA(&format, palette.get(), r, g, b, a);
}

/**
 * Get RGB values from a pixel in the specified format.
 *
 * This function uses the entire 8-bit [0..255] range when converting color
 * components from pixel formats with less than 8-bits per RGB component
 * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
 * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
 *
 * @param pixel a pixel value.
 * @param format a reference to PixelFormatDetails describing the pixel
 *               format.
 * @param palette an optional palette for indexed formats, may be nullptr.
 * @param r a pointer filled in with the red component, may be nullptr.
 * @param g a pointer filled in with the green component, may be nullptr.
 * @param b a pointer filled in with the blue component, may be nullptr.
 *
 * @threadsafety It is safe to call this function from any thread, as long as
 *               the palette is not modified.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PixelFormat.GetDetails
 * @sa GetRGBA
 * @sa MapRGB
 * @sa MapRGBA
 */
inline void GetRGB(Uint32 pixel,
                   const PixelFormatDetails& format,
                   const PaletteBase& palette,
                   Uint8* r,
                   Uint8* g,
                   Uint8* b)
{
  SDL_GetRGB(pixel, &format, palette.get(), r, g, b);
}

/**
 * Get RGBA values from a pixel in the specified format.
 *
 * This function uses the entire 8-bit [0..255] range when converting color
 * components from pixel formats with less than 8-bits per RGB component
 * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
 * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
 *
 * If the surface has no alpha component, the alpha will be returned as 0xff
 * (100% opaque).
 *
 * @param pixel a pixel value.
 * @param format a reference to PixelFormatDetails describing the pixel
 *               format.
 * @param palette an optional palette for indexed formats, may be nullptr.
 * @param r a pointer filled in with the red component, may be nullptr.
 * @param g a pointer filled in with the green component, may be nullptr.
 * @param b a pointer filled in with the blue component, may be nullptr.
 * @param a a pointer filled in with the alpha component, may be nullptr.
 *
 * @threadsafety It is safe to call this function from any thread, as long as
 *               the palette is not modified.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PixelFormat.GetDetails
 * @sa GetRGB
 * @sa MapRGB
 * @sa MapRGBA
 */
inline void GetRGBA(Uint32 pixel,
                    const PixelFormatDetails& format,
                    const PaletteBase& palette,
                    Uint8* r,
                    Uint8* g,
                    Uint8* b,
                    Uint8* a)
{
  SDL_GetRGBA(pixel, &format, palette.get(), r, g, b, a);
}

/** @} */

#pragma region impl

inline Uint32 Color::Map(const PixelFormatDetails& format,
                         PaletteRef palette = nullptr) const
{
  return MapRGBA(format, palette.get(), r, g, b, a);
}

inline Color Color::Get(Uint32 pixel,
                        const PixelFormatDetails& format,
                        PaletteRef palette = nullptr)
{
  Color c;
  GetRGBA(pixel, format, palette, &c.r, &c.g, &c.b, &c.a);
  return c;
}

inline Uint32 PixelFormat::Map(Color color, PaletteRef palette = nullptr) const
{
  return color.Map(*GetDetails(), palette);
}

inline Color PixelFormat::Get(Uint32 pixel, PaletteRef palette = nullptr) const
{
  return Color::Get(pixel, *GetDetails(), palette);
}

#pragma endregion impl

/**
 * @defgroup CategoryPlatform Platform Detection
 *
 * SDL provides a means to identify the app's platform, both at compile time
 * and runtime.
 *
 * For sanity, we don't wrap the macros, so use the regular SDL_* macros as
 * documented.
 *
 * @{
 */

/**
 * Get the name of the platform.
 *
 * Here are the names returned for some (but not all) supported platforms:
 *
 * - "Windows"
 * - "macOS"
 * - "Linux"
 * - "iOS"
 * - "Android"
 *
 * @returns the name of the platform. If the correct platform name is not
 *          available, returns a string beginning with the text "Unknown".
 *
 * @since This function is available since SDL 3.2.0.
 */
inline const char* GetPlatform() { return SDL_GetPlatform(); }

#ifdef SDL3PP_DOC

/**
 * A preprocessor macro that is only defined if compiling for AIX.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_AIX 1

/**
 * A preprocessor macro that is only defined if compiling for AIX.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_AIX 1

/**
 * A preprocessor macro that is only defined if compiling for BSDi
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_BSDI 1

/**
 * A preprocessor macro that is only defined if compiling for FreeBSD.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_FREEBSD 1

/**
 * A preprocessor macro that is only defined if compiling for HP-UX.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_HPUX 1

/**
 * A preprocessor macro that is only defined if compiling for IRIX.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_IRIX 1

/**
 * A preprocessor macro that is only defined if compiling for Linux.
 *
 * Note that Android, although ostensibly a Linux-based system, will not
 * define this. It defines SDL_PLATFORM_ANDROID instead.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_LINUX 1

/**
 * A preprocessor macro that is only defined if compiling for Android.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_ANDROID 1

/**
 * A preprocessor macro that is only defined if compiling for a Unix-like
 * system.
 *
 * Other platforms, like Linux, might define this in addition to their primary
 * define.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_UNIX 1

/**
 * A preprocessor macro that is only defined if compiling for Apple platforms.
 *
 * iOS, macOS, etc will additionally define a more specific platform macro.
 *
 * \since This macro is available since SDL 3.2.0.
 *
 * \sa SDL_PLATFORM_MACOS
 * \sa SDL_PLATFORM_IOS
 * \sa SDL_PLATFORM_TVOS
 * \sa SDL_PLATFORM_VISIONOS
 */
#define SDL_PLATFORM_APPLE 1

/**
 * A preprocessor macro that is only defined if compiling for tvOS.
 *
 * \since This macro is available since SDL 3.2.0.
 *
 * \sa SDL_PLATFORM_APPLE
 */
#define SDL_PLATFORM_TVOS 1

/**
 * A preprocessor macro that is only defined if compiling for VisionOS.
 *
 * \since This macro is available since SDL 3.2.0.
 *
 * \sa SDL_PLATFORM_APPLE
 */
#define SDL_PLATFORM_VISIONOS 1

/**
 * A preprocessor macro that is only defined if compiling for iOS.
 *
 * \since This macro is available since SDL 3.2.0.
 *
 * \sa SDL_PLATFORM_APPLE
 */
#define SDL_PLATFORM_IOS 1
/**
 * A preprocessor macro that is only defined if compiling for macOS.
 *
 * \since This macro is available since SDL 3.2.0.
 *
 * \sa SDL_PLATFORM_APPLE
 */
#define SDL_PLATFORM_MACOS 1

/**
 * A preprocessor macro that is only defined if compiling for Emscripten.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_EMSCRIPTEN 1

/**
 * A preprocessor macro that is only defined if compiling for NetBSD.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_NETBSD 1

/**
 * A preprocessor macro that is only defined if compiling for OpenBSD.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_OPENBSD 1

/**
 * A preprocessor macro that is only defined if compiling for OS/2.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_OS2 1

/**
 * A preprocessor macro that is only defined if compiling for Tru64 (OSF/1).
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_OSF 1

/**
 * A preprocessor macro that is only defined if compiling for QNX Neutrino.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_QNXNTO 1

/**
 * A preprocessor macro that is only defined if compiling for RISC OS.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_RISCOS 1

/**
 * A preprocessor macro that is only defined if compiling for SunOS/Solaris.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_SOLARIS 1

/**
 * A preprocessor macro that is only defined if compiling for Cygwin.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_CYGWIN 1

/**
 * A preprocessor macro that is only defined if compiling for Windows.
 *
 * This also covers several other platforms, like Microsoft GDK, Xbox, WinRT,
 * etc. Each will have their own more-specific platform macros, too.
 *
 * \since This macro is available since SDL 3.2.0.
 *
 * \sa SDL_PLATFORM_WIN32
 * \sa SDL_PLATFORM_XBOXONE
 * \sa SDL_PLATFORM_XBOXSERIES
 * \sa SDL_PLATFORM_WINGDK
 * \sa SDL_PLATFORM_GDK
 */
#define SDL_PLATFORM_WINDOWS 1

/**
 * A preprocessor macro that defined to 1 if compiling for Windows Phone.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_WINAPI_FAMILY_PHONE 1

/**
 * A preprocessor macro that is only defined if compiling for Microsoft GDK
 * for Windows.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_WINGDK 1

/**
 * A preprocessor macro that is only defined if compiling for Xbox Series.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_XBOXSERIES 1

/**
 * A preprocessor macro that is only defined if compiling for desktop Windows.
 *
 * Despite the "32", this also covers 64-bit Windows; as an informal
 * convention, its system layer tends to still be referred to as "the Win32
 * API."
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_WIN32 1

/**
 * A preprocessor macro that is only defined if compiling for Microsoft GDK on
 * any platform.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_GDK 1

/**
 * A preprocessor macro that is only defined if compiling for Sony PSP.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_PSP 1

/**
 * A preprocessor macro that is only defined if compiling for Sony PlayStation
 * 2.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_PS2 1

/**
 * A preprocessor macro that is only defined if compiling for Sony Vita.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_VITA 1

/**
 * A preprocessor macro that is only defined if compiling for Nintendo 3DS.
 *
 * \since This macro is available since SDL 3.2.0.
 */
#define SDL_PLATFORM_3DS 1

#endif // SDL3PP_DOC

/// @}

/**
 * @defgroup CategoryPower Power Management Status
 *
 * SDL power management routines.
 *
 * There is a single function in this category: GetPowerInfo().
 *
 * This function is useful for games on the go. This allows an app to know if
 * it's running on a draining battery, which can be useful if the app wants to
 * reduce processing, or perhaps framerate, to extend the duration of the
 * battery's charge. Perhaps the app just wants to show a battery meter when
 * fullscreen, or alert the user when the power is getting extremely low, so
 * they can save their game.
 *
 * @{
 */

/**
 * @name Power States
 * @{
 */

/**
 * The basic state for the system's power supply.
 *
 * These are results returned by GetPowerInfo().
 *
 * @since This enum is available since SDL 3.2.0.
 */
using PowerState = SDL_PowerState;

/**
 * error determining power status
 */
constexpr PowerState POWERSTATE_ERROR = SDL_POWERSTATE_ERROR;

/**
 * cannot determine power status
 */
constexpr PowerState POWERSTATE_UNKNOWN = SDL_POWERSTATE_UNKNOWN;

/**
 * Not plugged in, running on the battery.
 */
constexpr PowerState POWERSTATE_ON_BATTERY = SDL_POWERSTATE_ON_BATTERY;

/**
 * Plugged in, no battery available.
 */
constexpr PowerState POWERSTATE_NO_BATTERY = SDL_POWERSTATE_NO_BATTERY;

/**
 * Plugged in, charging battery.
 */
constexpr PowerState POWERSTATE_CHARGING = SDL_POWERSTATE_CHARGING;

/**
 * Plugged in, battery charged.
 */
constexpr PowerState POWERSTATE_CHARGED = SDL_POWERSTATE_CHARGED;

/// @}

/**
 * Get the current power supply details.
 *
 * You should never take a battery status as absolute truth. Batteries
 * (especially failing batteries) are delicate hardware, and the values
 * reported here are best estimates based on what that hardware reports. It's
 * not uncommon for older batteries to lose stored power much faster than it
 * reports, or completely drain when reporting it has 20 percent left, etc.
 *
 * Battery status can change at any time; if you are concerned with power
 * state, you should call this function frequently, and perhaps ignore changes
 * until they seem to be stable for a few seconds.
 *
 * It's possible a platform can only report battery percentage or time left
 * but not both.
 *
 * On some platforms, retrieving power supply details might be expensive. If
 * you want to display continuous status you could call this function every
 * minute or so.
 *
 * @param seconds a pointer filled in with the seconds of battery life left,
 *                or NULL to ignore. This will be filled in with -1 if we
 *                can't determine a value or there is no battery.
 * @param percent a pointer filled in with the percentage of battery life
 *                left, between 0 and 100, or NULL to ignore. This will be
 *                filled in with -1 we can't determine a value or there is no
 *                battery.
 * @returns the current battery state or `POWERSTATE_ERROR` on failure; call
 *          GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline PowerState GetPowerInfo(int* seconds, int* percent)
{
  return SDL_GetPowerInfo(seconds, percent);
}

/// @}

/**
 *
 * @defgroup CategoryScancode Keyboard Scancodes
 *
 * Defines keyboard scancodes.
 *
 * Please refer to the Best Keyboard Practices document for details on what
 * this information means and how best to use it.
 *
 * https://wiki.libsdl.org/SDL3/BestKeyboardPractices
 *
 * @{
 */

// Forward decl
struct Keycode;

/**
 * The SDL keyboard scancode representation.
 *
 * An SDL scancode is the physical representation of a key on the keyboard,
 * independent of language and keyboard mapping.
 *
 * Values of this type are used to represent keyboard keys, among other places
 * in the `scancode` field of the KeyboardEvent structure.
 *
 * The values in this enumeration are based on the USB usage page standard:
 * https://usb.org/sites/default/files/hut1_5.pdf
 *
 * @since This enum is available since SDL 3.2.0.
 */
class Scancode
{
  SDL_Scancode m_scancode;

public:
  /**
   * Wraps Scancode.
   *
   * @param scancode the value to be wrapped
   */
  constexpr Scancode(SDL_Scancode scancode = {})
    : m_scancode(scancode)
  {
  }

  // Get scan code from name
  Scancode(StringParam name);

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const Scancode& other) const = default;

  /**
   * Unwraps to the underlying Scancode.
   *
   * @returns the underlying Scancode.
   */
  constexpr operator SDL_Scancode() const { return m_scancode; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const
  {
    return m_scancode != SDL_SCANCODE_UNKNOWN;
  }

  // Set name
  bool SetName(StringParam name);

  // Get name
  const char* GetName() const;
};

constexpr Scancode SCANCODE_UNKNOWN = SDL_SCANCODE_UNKNOWN; ///< UNKNOWN

constexpr Scancode SCANCODE_A = SDL_SCANCODE_A; ///< A

constexpr Scancode SCANCODE_B = SDL_SCANCODE_B; ///< B

constexpr Scancode SCANCODE_C = SDL_SCANCODE_C; ///< C

constexpr Scancode SCANCODE_D = SDL_SCANCODE_D; ///< D

constexpr Scancode SCANCODE_E = SDL_SCANCODE_E; ///< E

constexpr Scancode SCANCODE_F = SDL_SCANCODE_F; ///< F

constexpr Scancode SCANCODE_G = SDL_SCANCODE_G; ///< G

constexpr Scancode SCANCODE_H = SDL_SCANCODE_H; ///< H

constexpr Scancode SCANCODE_I = SDL_SCANCODE_I; ///< I

constexpr Scancode SCANCODE_J = SDL_SCANCODE_J; ///< J

constexpr Scancode SCANCODE_K = SDL_SCANCODE_K; ///< K

constexpr Scancode SCANCODE_L = SDL_SCANCODE_L; ///< L

constexpr Scancode SCANCODE_M = SDL_SCANCODE_M; ///< M

constexpr Scancode SCANCODE_N = SDL_SCANCODE_N; ///< N

constexpr Scancode SCANCODE_O = SDL_SCANCODE_O; ///< O

constexpr Scancode SCANCODE_P = SDL_SCANCODE_P; ///< P

constexpr Scancode SCANCODE_Q = SDL_SCANCODE_Q; ///< Q

constexpr Scancode SCANCODE_R = SDL_SCANCODE_R; ///< R

constexpr Scancode SCANCODE_S = SDL_SCANCODE_S; ///< S

constexpr Scancode SCANCODE_T = SDL_SCANCODE_T; ///< T

constexpr Scancode SCANCODE_U = SDL_SCANCODE_U; ///< U

constexpr Scancode SCANCODE_V = SDL_SCANCODE_V; ///< V

constexpr Scancode SCANCODE_W = SDL_SCANCODE_W; ///< W

constexpr Scancode SCANCODE_X = SDL_SCANCODE_X; ///< X

constexpr Scancode SCANCODE_Y = SDL_SCANCODE_Y; ///< Y

constexpr Scancode SCANCODE_Z = SDL_SCANCODE_Z; ///< Z

constexpr Scancode SCANCODE_1 = SDL_SCANCODE_1; ///< 1

constexpr Scancode SCANCODE_2 = SDL_SCANCODE_2; ///< 2

constexpr Scancode SCANCODE_3 = SDL_SCANCODE_3; ///< 3

constexpr Scancode SCANCODE_4 = SDL_SCANCODE_4; ///< 4

constexpr Scancode SCANCODE_5 = SDL_SCANCODE_5; ///< 5

constexpr Scancode SCANCODE_6 = SDL_SCANCODE_6; ///< 6

constexpr Scancode SCANCODE_7 = SDL_SCANCODE_7; ///< 7

constexpr Scancode SCANCODE_8 = SDL_SCANCODE_8; ///< 8

constexpr Scancode SCANCODE_9 = SDL_SCANCODE_9; ///< 9

constexpr Scancode SCANCODE_0 = SDL_SCANCODE_0; ///< 0

constexpr Scancode SCANCODE_RETURN = SDL_SCANCODE_RETURN; ///< RETURN

constexpr Scancode SCANCODE_ESCAPE = SDL_SCANCODE_ESCAPE; ///< ESCAPE

constexpr Scancode SCANCODE_BACKSPACE = SDL_SCANCODE_BACKSPACE; ///< BACKSPACE

constexpr Scancode SCANCODE_TAB = SDL_SCANCODE_TAB; ///< TAB

constexpr Scancode SCANCODE_SPACE = SDL_SCANCODE_SPACE; ///< SPACE

constexpr Scancode SCANCODE_MINUS = SDL_SCANCODE_MINUS; ///< MINUS

constexpr Scancode SCANCODE_EQUALS = SDL_SCANCODE_EQUALS; ///< EQUALS

constexpr Scancode SCANCODE_LEFTBRACKET =
  SDL_SCANCODE_LEFTBRACKET; ///< LEFTBRACKET

constexpr Scancode SCANCODE_RIGHTBRACKET =
  SDL_SCANCODE_RIGHTBRACKET; ///< RIGHTBRACKET

/**
 * Located at the lower left of the return key on ISO keyboards and at the right
 * end of the QWERTY row on ANSI keyboards.  Produces REVERSE SOLIDUS
 * (backslash) and VERTICAL LINE in a US layout, REVERSE SOLIDUS and VERTICAL
 * LINE in a UK Mac layout, NUMBER SIGN and TILDE in a UK Windows layout, DOLLAR
 * SIGN and POUND SIGN in a Swiss German layout, NUMBER SIGN and APOSTROPHE in a
 * German layout, GRAVE ACCENT and POUND SIGN in a French Mac layout, and
 * ASTERISK and MICRO SIGN in a French Windows layout.
 */
constexpr Scancode SCANCODE_BACKSLASH = SDL_SCANCODE_BACKSLASH;

/**
 * ISO USB keyboards actually use this code instead of 49 for the same key, but
 * all OSes I've seen treat the two codes identically.  So, as an implementor,
 * unless your keyboard generates both of those codes and your OS treats them
 * differently, you should generate SCANCODE_BACKSLASH instead of this code. As
 * a user, you should not rely on this code because SDL will never generate it
 * with most (all?) keyboards.
 */
constexpr Scancode SCANCODE_NONUSHASH = SDL_SCANCODE_NONUSHASH;

constexpr Scancode SCANCODE_SEMICOLON = SDL_SCANCODE_SEMICOLON; ///< SEMICOLON

constexpr Scancode SCANCODE_APOSTROPHE =
  SDL_SCANCODE_APOSTROPHE; ///< APOSTROPHE

/**
 * Located in the top left corner (on both ANSI and ISO keyboards).  Produces
 * GRAVE ACCENT and TILDE in a US Windows layout and in US and UK Mac layouts on
 * ANSI keyboards, GRAVE ACCENT and NOT SIGN in a UK Windows layout, SECTION
 * SIGN and PLUS-MINUS SIGN in US and UK Mac layouts on ISO keyboards, SECTION
 * SIGN and DEGREE SIGN in a Swiss German layout (Mac: only on ISO keyboards),
 * CIRCUMFLEX ACCENT and DEGREE SIGN in a German layout (Mac: only on ISO
 * keyboards), SUPERSCRIPT TWO and TILDE in a French Windows layout, COMMERCIAL
 * AT and NUMBER SIGN in a French Mac layout on ISO keyboards, and LESS-THAN
 * SIGN and GREATER-THAN SIGN in a Swiss German, German, or French Mac layout on
 * ANSI keyboards.
 */
constexpr Scancode SCANCODE_GRAVE = SDL_SCANCODE_GRAVE;

constexpr Scancode SCANCODE_COMMA = SDL_SCANCODE_COMMA; ///< COMMA

constexpr Scancode SCANCODE_PERIOD = SDL_SCANCODE_PERIOD; ///< PERIOD

constexpr Scancode SCANCODE_SLASH = SDL_SCANCODE_SLASH; ///< SLASH

constexpr Scancode SCANCODE_CAPSLOCK = SDL_SCANCODE_CAPSLOCK; ///< CAPSLOCK

constexpr Scancode SCANCODE_F1 = SDL_SCANCODE_F1; ///< F1

constexpr Scancode SCANCODE_F2 = SDL_SCANCODE_F2; ///< F2

constexpr Scancode SCANCODE_F3 = SDL_SCANCODE_F3; ///< F3

constexpr Scancode SCANCODE_F4 = SDL_SCANCODE_F4; ///< F4

constexpr Scancode SCANCODE_F5 = SDL_SCANCODE_F5; ///< F5

constexpr Scancode SCANCODE_F6 = SDL_SCANCODE_F6; ///< F6

constexpr Scancode SCANCODE_F7 = SDL_SCANCODE_F7; ///< F7

constexpr Scancode SCANCODE_F8 = SDL_SCANCODE_F8; ///< F8

constexpr Scancode SCANCODE_F9 = SDL_SCANCODE_F9; ///< F9

constexpr Scancode SCANCODE_F10 = SDL_SCANCODE_F10; ///< F10

constexpr Scancode SCANCODE_F11 = SDL_SCANCODE_F11; ///< F11

constexpr Scancode SCANCODE_F12 = SDL_SCANCODE_F12; ///< F12

constexpr Scancode SCANCODE_PRINTSCREEN =
  SDL_SCANCODE_PRINTSCREEN; ///< PRINTSCREEN

constexpr Scancode SCANCODE_SCROLLLOCK =
  SDL_SCANCODE_SCROLLLOCK; ///< SCROLLLOCK

constexpr Scancode SCANCODE_PAUSE = SDL_SCANCODE_PAUSE; ///< PAUSE

/**
 * insert on PC, help on some Mac keyboards (but does send code 73, not 117)
 */
constexpr Scancode SCANCODE_INSERT = SDL_SCANCODE_INSERT;

constexpr Scancode SCANCODE_HOME = SDL_SCANCODE_HOME; ///< HOME

constexpr Scancode SCANCODE_PAGEUP = SDL_SCANCODE_PAGEUP; ///< PAGEUP

constexpr Scancode SCANCODE_DELETE = SDL_SCANCODE_DELETE; ///< DELETE

constexpr Scancode SCANCODE_END = SDL_SCANCODE_END; ///< END

constexpr Scancode SCANCODE_PAGEDOWN = SDL_SCANCODE_PAGEDOWN; ///< PAGEDOWN

constexpr Scancode SCANCODE_RIGHT = SDL_SCANCODE_RIGHT; ///< RIGHT

constexpr Scancode SCANCODE_LEFT = SDL_SCANCODE_LEFT; ///< LEFT

constexpr Scancode SCANCODE_DOWN = SDL_SCANCODE_DOWN; ///< DOWN

constexpr Scancode SCANCODE_UP = SDL_SCANCODE_UP; ///< UP

/**
 * num lock on PC, clear on Mac keyboards
 */
constexpr Scancode SCANCODE_NUMLOCKCLEAR = SDL_SCANCODE_NUMLOCKCLEAR;

constexpr Scancode SCANCODE_KP_DIVIDE = SDL_SCANCODE_KP_DIVIDE; ///< KP_DIVIDE

constexpr Scancode SCANCODE_KP_MULTIPLY =
  SDL_SCANCODE_KP_MULTIPLY; ///< KP_MULTIPLY

constexpr Scancode SCANCODE_KP_MINUS = SDL_SCANCODE_KP_MINUS; ///< KP_MINUS

constexpr Scancode SCANCODE_KP_PLUS = SDL_SCANCODE_KP_PLUS; ///< KP_PLUS

constexpr Scancode SCANCODE_KP_ENTER = SDL_SCANCODE_KP_ENTER; ///< KP_ENTER

constexpr Scancode SCANCODE_KP_1 = SDL_SCANCODE_KP_1; ///< KP_1

constexpr Scancode SCANCODE_KP_2 = SDL_SCANCODE_KP_2; ///< KP_2

constexpr Scancode SCANCODE_KP_3 = SDL_SCANCODE_KP_3; ///< KP_3

constexpr Scancode SCANCODE_KP_4 = SDL_SCANCODE_KP_4; ///< KP_4

constexpr Scancode SCANCODE_KP_5 = SDL_SCANCODE_KP_5; ///< KP_5

constexpr Scancode SCANCODE_KP_6 = SDL_SCANCODE_KP_6; ///< KP_6

constexpr Scancode SCANCODE_KP_7 = SDL_SCANCODE_KP_7; ///< KP_7

constexpr Scancode SCANCODE_KP_8 = SDL_SCANCODE_KP_8; ///< KP_8

constexpr Scancode SCANCODE_KP_9 = SDL_SCANCODE_KP_9; ///< KP_9

constexpr Scancode SCANCODE_KP_0 = SDL_SCANCODE_KP_0; ///< KP_0

constexpr Scancode SCANCODE_KP_PERIOD = SDL_SCANCODE_KP_PERIOD; ///< KP_PERIOD

/**
 * This is the additional key that ISO keyboards have over ANSI ones, located
 * between left shift and Y.  Produces GRAVE ACCENT and TILDE in a US or UK Mac
 * layout, REVERSE SOLIDUS (backslash) and VERTICAL LINE in a US or UK Windows
 * layout, and LESS-THAN SIGN and GREATER-THAN SIGN in a Swiss German, German,
 * or French layout.
 */
constexpr Scancode SCANCODE_NONUSBACKSLASH = SDL_SCANCODE_NONUSBACKSLASH;

/**
 * windows contextual menu, compose
 */
constexpr Scancode SCANCODE_APPLICATION = SDL_SCANCODE_APPLICATION;

/**
 * The USB document says this is a status flag, not a physical key - but some
 * Mac keyboards do have a power key.
 */
constexpr Scancode SCANCODE_POWER = SDL_SCANCODE_POWER;

constexpr Scancode SCANCODE_KP_EQUALS = SDL_SCANCODE_KP_EQUALS; ///< KP_EQUALS

constexpr Scancode SCANCODE_F13 = SDL_SCANCODE_F13; ///< F13

constexpr Scancode SCANCODE_F14 = SDL_SCANCODE_F14; ///< F14

constexpr Scancode SCANCODE_F15 = SDL_SCANCODE_F15; ///< F15

constexpr Scancode SCANCODE_F16 = SDL_SCANCODE_F16; ///< F16

constexpr Scancode SCANCODE_F17 = SDL_SCANCODE_F17; ///< F17

constexpr Scancode SCANCODE_F18 = SDL_SCANCODE_F18; ///< F18

constexpr Scancode SCANCODE_F19 = SDL_SCANCODE_F19; ///< F19

constexpr Scancode SCANCODE_F20 = SDL_SCANCODE_F20; ///< F20

constexpr Scancode SCANCODE_F21 = SDL_SCANCODE_F21; ///< F21

constexpr Scancode SCANCODE_F22 = SDL_SCANCODE_F22; ///< F22

constexpr Scancode SCANCODE_F23 = SDL_SCANCODE_F23; ///< F23

constexpr Scancode SCANCODE_F24 = SDL_SCANCODE_F24; ///< F24

constexpr Scancode SCANCODE_EXECUTE = SDL_SCANCODE_EXECUTE; ///< EXECUTE

constexpr Scancode SCANCODE_HELP =
  SDL_SCANCODE_HELP; ///< AL Integrated Help Center.

constexpr Scancode SCANCODE_MENU = SDL_SCANCODE_MENU; ///< Menu (show menu)

constexpr Scancode SCANCODE_SELECT = SDL_SCANCODE_SELECT; ///< SELECT

constexpr Scancode SCANCODE_STOP = SDL_SCANCODE_STOP; ///< AC Stop.

constexpr Scancode SCANCODE_AGAIN = SDL_SCANCODE_AGAIN; ///< AC Redo/Repeat.

constexpr Scancode SCANCODE_UNDO = SDL_SCANCODE_UNDO; ///< AC Undo.

constexpr Scancode SCANCODE_CUT = SDL_SCANCODE_CUT; ///< AC Cut.

constexpr Scancode SCANCODE_COPY = SDL_SCANCODE_COPY; ///< AC Copy.

constexpr Scancode SCANCODE_PASTE = SDL_SCANCODE_PASTE; ///< AC Paste.

constexpr Scancode SCANCODE_FIND = SDL_SCANCODE_FIND; ///< AC Find.

constexpr Scancode SCANCODE_MUTE = SDL_SCANCODE_MUTE; ///< MUTE

constexpr Scancode SCANCODE_VOLUMEUP = SDL_SCANCODE_VOLUMEUP; ///< VOLUMEUP

constexpr Scancode SCANCODE_VOLUMEDOWN =
  SDL_SCANCODE_VOLUMEDOWN; ///< VOLUMEDOWN

constexpr Scancode SCANCODE_KP_COMMA = SDL_SCANCODE_KP_COMMA; ///< KP_COMMA

constexpr Scancode SCANCODE_KP_EQUALSAS400 =
  SDL_SCANCODE_KP_EQUALSAS400; ///< KP_EQUALSAS400

/**
 * used on Asian keyboards, see footnotes in USB doc
 */
constexpr Scancode SCANCODE_INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1;

constexpr Scancode SCANCODE_INTERNATIONAL2 =
  SDL_SCANCODE_INTERNATIONAL2; ///< INTERNATIONAL2

constexpr Scancode SCANCODE_INTERNATIONAL3 =
  SDL_SCANCODE_INTERNATIONAL3; ///< Yen.

constexpr Scancode SCANCODE_INTERNATIONAL4 =
  SDL_SCANCODE_INTERNATIONAL4; ///< INTERNATIONAL4

constexpr Scancode SCANCODE_INTERNATIONAL5 =
  SDL_SCANCODE_INTERNATIONAL5; ///< INTERNATIONAL5

constexpr Scancode SCANCODE_INTERNATIONAL6 =
  SDL_SCANCODE_INTERNATIONAL6; ///< INTERNATIONAL6

constexpr Scancode SCANCODE_INTERNATIONAL7 =
  SDL_SCANCODE_INTERNATIONAL7; ///< INTERNATIONAL7

constexpr Scancode SCANCODE_INTERNATIONAL8 =
  SDL_SCANCODE_INTERNATIONAL8; ///< INTERNATIONAL8

constexpr Scancode SCANCODE_INTERNATIONAL9 =
  SDL_SCANCODE_INTERNATIONAL9; ///< INTERNATIONAL9

constexpr Scancode SCANCODE_LANG1 =
  SDL_SCANCODE_LANG1; ///< Hangul/English toggle.

constexpr Scancode SCANCODE_LANG2 = SDL_SCANCODE_LANG2; ///< Hanja conversion.

constexpr Scancode SCANCODE_LANG3 = SDL_SCANCODE_LANG3; ///< Katakana.

constexpr Scancode SCANCODE_LANG4 = SDL_SCANCODE_LANG4; ///< Hiragana.

constexpr Scancode SCANCODE_LANG5 = SDL_SCANCODE_LANG5; ///< Zenkaku/Hankaku.

constexpr Scancode SCANCODE_LANG6 = SDL_SCANCODE_LANG6; ///< reserved

constexpr Scancode SCANCODE_LANG7 = SDL_SCANCODE_LANG7; ///< reserved

constexpr Scancode SCANCODE_LANG8 = SDL_SCANCODE_LANG8; ///< reserved

constexpr Scancode SCANCODE_LANG9 = SDL_SCANCODE_LANG9; ///< reserved

constexpr Scancode SCANCODE_ALTERASE = SDL_SCANCODE_ALTERASE; ///< Erase-Eaze.

constexpr Scancode SCANCODE_SYSREQ = SDL_SCANCODE_SYSREQ; ///< SYSREQ

constexpr Scancode SCANCODE_CANCEL = SDL_SCANCODE_CANCEL; ///< AC Cancel.

constexpr Scancode SCANCODE_CLEAR = SDL_SCANCODE_CLEAR; ///< CLEAR

constexpr Scancode SCANCODE_PRIOR = SDL_SCANCODE_PRIOR; ///< PRIOR

constexpr Scancode SCANCODE_RETURN2 = SDL_SCANCODE_RETURN2; ///< RETURN2

constexpr Scancode SCANCODE_SEPARATOR = SDL_SCANCODE_SEPARATOR; ///< SEPARATOR

constexpr Scancode SCANCODE_OUT = SDL_SCANCODE_OUT; ///< OUT

constexpr Scancode SCANCODE_OPER = SDL_SCANCODE_OPER; ///< OPER

constexpr Scancode SCANCODE_CLEARAGAIN =
  SDL_SCANCODE_CLEARAGAIN; ///< CLEARAGAIN

constexpr Scancode SCANCODE_CRSEL = SDL_SCANCODE_CRSEL; ///< CRSEL

constexpr Scancode SCANCODE_EXSEL = SDL_SCANCODE_EXSEL; ///< EXSEL

constexpr Scancode SCANCODE_KP_00 = SDL_SCANCODE_KP_00; ///< KP_00

constexpr Scancode SCANCODE_KP_000 = SDL_SCANCODE_KP_000; ///< KP_000

constexpr Scancode SCANCODE_THOUSANDSSEPARATOR =
  SDL_SCANCODE_THOUSANDSSEPARATOR; ///< THOUSANDSSEPARATOR

constexpr Scancode SCANCODE_DECIMALSEPARATOR =
  SDL_SCANCODE_DECIMALSEPARATOR; ///< DECIMALSEPARATOR

constexpr Scancode SCANCODE_CURRENCYUNIT =
  SDL_SCANCODE_CURRENCYUNIT; ///< CURRENCYUNIT

constexpr Scancode SCANCODE_CURRENCYSUBUNIT =
  SDL_SCANCODE_CURRENCYSUBUNIT; ///< CURRENCYSUBUNIT

constexpr Scancode SCANCODE_KP_LEFTPAREN =
  SDL_SCANCODE_KP_LEFTPAREN; ///< KP_LEFTPAREN

constexpr Scancode SCANCODE_KP_RIGHTPAREN =
  SDL_SCANCODE_KP_RIGHTPAREN; ///< KP_RIGHTPAREN

constexpr Scancode SCANCODE_KP_LEFTBRACE =
  SDL_SCANCODE_KP_LEFTBRACE; ///< KP_LEFTBRACE

constexpr Scancode SCANCODE_KP_RIGHTBRACE =
  SDL_SCANCODE_KP_RIGHTBRACE; ///< KP_RIGHTBRACE

constexpr Scancode SCANCODE_KP_TAB = SDL_SCANCODE_KP_TAB; ///< KP_TAB

constexpr Scancode SCANCODE_KP_BACKSPACE =
  SDL_SCANCODE_KP_BACKSPACE; ///< KP_BACKSPACE

constexpr Scancode SCANCODE_KP_A = SDL_SCANCODE_KP_A; ///< KP_A

constexpr Scancode SCANCODE_KP_B = SDL_SCANCODE_KP_B; ///< KP_B

constexpr Scancode SCANCODE_KP_C = SDL_SCANCODE_KP_C; ///< KP_C

constexpr Scancode SCANCODE_KP_D = SDL_SCANCODE_KP_D; ///< KP_D

constexpr Scancode SCANCODE_KP_E = SDL_SCANCODE_KP_E; ///< KP_E

constexpr Scancode SCANCODE_KP_F = SDL_SCANCODE_KP_F; ///< KP_F

constexpr Scancode SCANCODE_KP_XOR = SDL_SCANCODE_KP_XOR; ///< KP_XOR

constexpr Scancode SCANCODE_KP_POWER = SDL_SCANCODE_KP_POWER; ///< KP_POWER

constexpr Scancode SCANCODE_KP_PERCENT =
  SDL_SCANCODE_KP_PERCENT; ///< KP_PERCENT

constexpr Scancode SCANCODE_KP_LESS = SDL_SCANCODE_KP_LESS; ///< KP_LESS

constexpr Scancode SCANCODE_KP_GREATER =
  SDL_SCANCODE_KP_GREATER; ///< KP_GREATER

constexpr Scancode SCANCODE_KP_AMPERSAND =
  SDL_SCANCODE_KP_AMPERSAND; ///< KP_AMPERSAND

constexpr Scancode SCANCODE_KP_DBLAMPERSAND =
  SDL_SCANCODE_KP_DBLAMPERSAND; ///< KP_DBLAMPERSAND

constexpr Scancode SCANCODE_KP_VERTICALBAR =
  SDL_SCANCODE_KP_VERTICALBAR; ///< KP_VERTICALBAR

constexpr Scancode SCANCODE_KP_DBLVERTICALBAR =
  SDL_SCANCODE_KP_DBLVERTICALBAR; ///< KP_DBLVERTICALBAR

constexpr Scancode SCANCODE_KP_COLON = SDL_SCANCODE_KP_COLON; ///< KP_COLON

constexpr Scancode SCANCODE_KP_HASH = SDL_SCANCODE_KP_HASH; ///< KP_HASH

constexpr Scancode SCANCODE_KP_SPACE = SDL_SCANCODE_KP_SPACE; ///< KP_SPACE

constexpr Scancode SCANCODE_KP_AT = SDL_SCANCODE_KP_AT; ///< KP_AT

constexpr Scancode SCANCODE_KP_EXCLAM = SDL_SCANCODE_KP_EXCLAM; ///< KP_EXCLAM

constexpr Scancode SCANCODE_KP_MEMSTORE =
  SDL_SCANCODE_KP_MEMSTORE; ///< KP_MEMSTORE

constexpr Scancode SCANCODE_KP_MEMRECALL =
  SDL_SCANCODE_KP_MEMRECALL; ///< KP_MEMRECALL

constexpr Scancode SCANCODE_KP_MEMCLEAR =
  SDL_SCANCODE_KP_MEMCLEAR; ///< KP_MEMCLEAR

constexpr Scancode SCANCODE_KP_MEMADD = SDL_SCANCODE_KP_MEMADD; ///< KP_MEMADD

constexpr Scancode SCANCODE_KP_MEMSUBTRACT =
  SDL_SCANCODE_KP_MEMSUBTRACT; ///< KP_MEMSUBTRACT

constexpr Scancode SCANCODE_KP_MEMMULTIPLY =
  SDL_SCANCODE_KP_MEMMULTIPLY; ///< KP_MEMMULTIPLY

constexpr Scancode SCANCODE_KP_MEMDIVIDE =
  SDL_SCANCODE_KP_MEMDIVIDE; ///< KP_MEMDIVIDE

constexpr Scancode SCANCODE_KP_PLUSMINUS =
  SDL_SCANCODE_KP_PLUSMINUS; ///< KP_PLUSMINUS

constexpr Scancode SCANCODE_KP_CLEAR = SDL_SCANCODE_KP_CLEAR; ///< KP_CLEAR

constexpr Scancode SCANCODE_KP_CLEARENTRY =
  SDL_SCANCODE_KP_CLEARENTRY; ///< KP_CLEARENTRY

constexpr Scancode SCANCODE_KP_BINARY = SDL_SCANCODE_KP_BINARY; ///< KP_BINARY

constexpr Scancode SCANCODE_KP_OCTAL = SDL_SCANCODE_KP_OCTAL; ///< KP_OCTAL

constexpr Scancode SCANCODE_KP_DECIMAL =
  SDL_SCANCODE_KP_DECIMAL; ///< KP_DECIMAL

constexpr Scancode SCANCODE_KP_HEXADECIMAL =
  SDL_SCANCODE_KP_HEXADECIMAL; ///< KP_HEXADECIMAL

constexpr Scancode SCANCODE_LCTRL = SDL_SCANCODE_LCTRL; ///< LCTRL

constexpr Scancode SCANCODE_LSHIFT = SDL_SCANCODE_LSHIFT; ///< LSHIFT

constexpr Scancode SCANCODE_LALT = SDL_SCANCODE_LALT; ///< alt, option

/**
 * windows, command (apple), meta
 */
constexpr Scancode SCANCODE_LGUI = SDL_SCANCODE_LGUI;

constexpr Scancode SCANCODE_RCTRL = SDL_SCANCODE_RCTRL; ///< RCTRL

constexpr Scancode SCANCODE_RSHIFT = SDL_SCANCODE_RSHIFT; ///< RSHIFT

constexpr Scancode SCANCODE_RALT = SDL_SCANCODE_RALT; ///< alt gr, option

/**
 * windows, command (apple), meta
 */
constexpr Scancode SCANCODE_RGUI = SDL_SCANCODE_RGUI;

/**
 * I'm not sure if this is really not covered by any of the above, but since
 * there's a special KMOD_MODE for it I'm adding it here.
 */
constexpr Scancode SCANCODE_MODE = SDL_SCANCODE_MODE;

constexpr Scancode SCANCODE_SLEEP = SDL_SCANCODE_SLEEP; ///< Sleep.

constexpr Scancode SCANCODE_WAKE = SDL_SCANCODE_WAKE; ///< Wake.

/**
 * Channel Increment.
 */
constexpr Scancode SCANCODE_CHANNEL_INCREMENT = SDL_SCANCODE_CHANNEL_INCREMENT;

/**
 * Channel Decrement.
 */
constexpr Scancode SCANCODE_CHANNEL_DECREMENT = SDL_SCANCODE_CHANNEL_DECREMENT;

constexpr Scancode SCANCODE_MEDIA_PLAY = SDL_SCANCODE_MEDIA_PLAY; ///< Play.

constexpr Scancode SCANCODE_MEDIA_PAUSE = SDL_SCANCODE_MEDIA_PAUSE; ///< Pause.

constexpr Scancode SCANCODE_MEDIA_RECORD =
  SDL_SCANCODE_MEDIA_RECORD; ///< Record.

/**
 * Fast Forward.
 */
constexpr Scancode SCANCODE_MEDIA_FAST_FORWARD =
  SDL_SCANCODE_MEDIA_FAST_FORWARD;

constexpr Scancode SCANCODE_MEDIA_REWIND =
  SDL_SCANCODE_MEDIA_REWIND; ///< Rewind.

/**
 * Next Track.
 */
constexpr Scancode SCANCODE_MEDIA_NEXT_TRACK = SDL_SCANCODE_MEDIA_NEXT_TRACK;

/**
 * Previous Track.
 */
constexpr Scancode SCANCODE_MEDIA_PREVIOUS_TRACK =
  SDL_SCANCODE_MEDIA_PREVIOUS_TRACK;

constexpr Scancode SCANCODE_MEDIA_STOP = SDL_SCANCODE_MEDIA_STOP; ///< Stop.

constexpr Scancode SCANCODE_MEDIA_EJECT = SDL_SCANCODE_MEDIA_EJECT; ///< Eject.

/**
 * Play / Pause.
 */
constexpr Scancode SCANCODE_MEDIA_PLAY_PAUSE = SDL_SCANCODE_MEDIA_PLAY_PAUSE;

constexpr Scancode SCANCODE_MEDIA_SELECT =
  SDL_SCANCODE_MEDIA_SELECT; ///< MEDIA_SELECT

constexpr Scancode SCANCODE_AC_NEW = SDL_SCANCODE_AC_NEW; ///< AC New.

constexpr Scancode SCANCODE_AC_OPEN = SDL_SCANCODE_AC_OPEN; ///< AC Open.

constexpr Scancode SCANCODE_AC_CLOSE = SDL_SCANCODE_AC_CLOSE; ///< AC Close.

constexpr Scancode SCANCODE_AC_EXIT = SDL_SCANCODE_AC_EXIT; ///< AC Exit.

constexpr Scancode SCANCODE_AC_SAVE = SDL_SCANCODE_AC_SAVE; ///< AC Save.

constexpr Scancode SCANCODE_AC_PRINT = SDL_SCANCODE_AC_PRINT; ///< AC Print.

/**
 * AC Properties.
 */
constexpr Scancode SCANCODE_AC_PROPERTIES = SDL_SCANCODE_AC_PROPERTIES;

constexpr Scancode SCANCODE_AC_SEARCH = SDL_SCANCODE_AC_SEARCH; ///< AC Search.

constexpr Scancode SCANCODE_AC_HOME = SDL_SCANCODE_AC_HOME; ///< AC Home.

constexpr Scancode SCANCODE_AC_BACK = SDL_SCANCODE_AC_BACK; ///< AC Back.

constexpr Scancode SCANCODE_AC_FORWARD =
  SDL_SCANCODE_AC_FORWARD; ///< AC Forward.

constexpr Scancode SCANCODE_AC_STOP = SDL_SCANCODE_AC_STOP; ///< AC Stop.

constexpr Scancode SCANCODE_AC_REFRESH =
  SDL_SCANCODE_AC_REFRESH; ///< AC Refresh.

/**
 * AC Bookmarks.
 */
constexpr Scancode SCANCODE_AC_BOOKMARKS = SDL_SCANCODE_AC_BOOKMARKS;

/**
 * Usually situated below the display on phones and used as a multi-function
 * feature key for selecting a software defined function shown on the bottom
 * left of the display.
 */
constexpr Scancode SCANCODE_SOFTLEFT = SDL_SCANCODE_SOFTLEFT;

/**
 * Usually situated below the display on phones and used as a multi-function
 * feature key for selecting a software defined function shown on the bottom
 * right of the display.
 */
constexpr Scancode SCANCODE_SOFTRIGHT = SDL_SCANCODE_SOFTRIGHT;

/**
 * Used for accepting phone calls.
 */
constexpr Scancode SCANCODE_CALL = SDL_SCANCODE_CALL;

/**
 * Used for rejecting phone calls.
 */
constexpr Scancode SCANCODE_ENDCALL = SDL_SCANCODE_ENDCALL;

/**
 * 400-500 reserved for dynamic keycodes
 */
constexpr Scancode SCANCODE_RESERVED = SDL_SCANCODE_RESERVED;

/**
 * not a key, just marks the number of scancodes for array bounds
 */
constexpr Scancode SCANCODE_COUNT = SDL_SCANCODE_COUNT;

/// @}

/**
 * @defgroup CategoryTime Date and Time
 *
 * SDL realtime clock and date/time routines.
 *
 * There are two data types that are used in this category: SDL_Time, which
 * represents the nanoseconds since a specific moment (an "epoch"), and
 * SDL_DateTime, which breaks time down into human-understandable components:
 * years, months, days, hours, etc.
 *
 * Much of the functionality is involved in converting those two types to
 * other useful forms.
 * @{
 */

/**
 * A structure holding a calendar date and time broken down into its
 * components.
 *
 * @since This struct is available since SDL 3.2.0.
 */
struct DateTime : SDL_DateTime
{
  /**
   * Wraps DateTime.
   *
   * @param dateTime the value to be wrapped
   */
  constexpr DateTime(const SDL_DateTime& dateTime = {})
    : SDL_DateTime(dateTime)
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param year the value for year.
   * @param month the value for month.
   * @param day the value for day.
   * @param hour the value for hour.
   * @param minute the value for minute.
   * @param second the value for second.
   * @param nanosecond the value for nanosecond.
   * @param day_of_week the value for day_of_week.
   * @param utc_offset the value for utc_offset.
   */
  constexpr DateTime(int year,
                     int month,
                     int day,
                     int hour,
                     int minute,
                     int second,
                     int nanosecond,
                     int day_of_week,
                     int utc_offset)
    : SDL_DateTime{year,
                   month,
                   day,
                   hour,
                   minute,
                   second,
                   nanosecond,
                   day_of_week,
                   utc_offset}
  {
  }

  /**
   * Converts an SDL_Time in nanoseconds since the epoch to a calendar time in
   * the SDL_DateTime format.
   *
   * @param ticks the SDL_Time to be converted.
   * @param localTime the resulting DateTime will be expressed in local time if
   *        true, otherwise it will be in Universal Coordinated Time (UTC).
   * @post true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  DateTime(Time ticks, bool localTime = true)
    : SDL_DateTime(0)
  {
    SDL_TimeToDateTime(ticks.ToNS(), this, localTime);
  }

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const DateTime& other) const = default;

  /// Returns If valid
  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const
  {
    return year != 0 || month != 0 || day != 0 || hour != 0 || minute != 0 ||
           second != 0 || nanosecond != 0;
  }

  /**
   * Get the year.
   *
   * @returns current year value.
   */
  constexpr int GetYear() const { return year; }

  /**
   * Set the year.
   *
   * @param newYear the new year value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetYear(int newYear)
  {
    year = newYear;
    return *this;
  }

  /**
   * Get the month.
   *
   * @returns current month value.
   */
  constexpr int GetMonth() const { return month; }

  /**
   * Set the month.
   *
   * @param newMonth the new month value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetMonth(int newMonth)
  {
    month = newMonth;
    return *this;
  }

  /**
   * Get the day.
   *
   * @returns current day value.
   */
  constexpr int GetDay() const { return day; }

  /**
   * Set the day.
   *
   * @param newDay the new day value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetDay(int newDay)
  {
    day = newDay;
    return *this;
  }

  /**
   * Get the hour.
   *
   * @returns current hour value.
   */
  constexpr int GetHour() const { return hour; }

  /**
   * Set the hour.
   *
   * @param newHour the new hour value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetHour(int newHour)
  {
    hour = newHour;
    return *this;
  }

  /**
   * Get the minute.
   *
   * @returns current minute value.
   */
  constexpr int GetMinute() const { return minute; }

  /**
   * Set the minute.
   *
   * @param newMinute the new minute value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetMinute(int newMinute)
  {
    minute = newMinute;
    return *this;
  }

  /**
   * Get the second.
   *
   * @returns current second value.
   */
  constexpr int GetSecond() const { return second; }

  /**
   * Set the second.
   *
   * @param newSecond the new second value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetSecond(int newSecond)
  {
    second = newSecond;
    return *this;
  }

  /**
   * Get the nanosecond.
   *
   * @returns current nanosecond value.
   */
  constexpr int GetNanosecond() const { return nanosecond; }

  /**
   * Set the nanosecond.
   *
   * @param newNanosecond the new nanosecond value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetNanosecond(int newNanosecond)
  {
    nanosecond = newNanosecond;
    return *this;
  }

  /**
   * Get the day_of_week.
   *
   * @returns current day_of_week value.
   */
  constexpr int GetDay_of_week() const { return day_of_week; }

  /**
   * Set the day_of_week.
   *
   * @param newDay_of_week the new day_of_week value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetDay_of_week(int newDay_of_week)
  {
    day_of_week = newDay_of_week;
    return *this;
  }

  /**
   * Get the utc_offset.
   *
   * @returns current utc_offset value.
   */
  constexpr int GetUtc_offset() const { return utc_offset; }

  /**
   * Set the utc_offset.
   *
   * @param newUtc_offset the new utc_offset value.
   * @returns Reference to self.
   */
  constexpr DateTime& SetUtc_offset(int newUtc_offset)
  {
    utc_offset = newUtc_offset;
    return *this;
  }

  /**
   * Converts a calendar time to an SDL_Time in nanoseconds since the epoch.
   *
   * This function ignores the day_of_week member of the SDL_DateTime struct, so
   * it may remain unset.
   *
   * @returns time on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  operator Time() const
  {
    if (SDL_Time t; SDL_DateTimeToTime(this, &t)) return Time::FromNS(t);
    return {};
  }
};

/**
 * The preferred date format of the current system locale.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa SDL_GetDateTimeLocalePreferences
 */
using DateFormat = SDL_DateFormat;

/**
 * Year/Month/Day.
 */
constexpr DateFormat DATE_FORMAT_YYYYMMDD = SDL_DATE_FORMAT_YYYYMMDD;

/**
 * Day/Month/Year.
 */
constexpr DateFormat DATE_FORMAT_DDMMYYYY = SDL_DATE_FORMAT_DDMMYYYY;

/**
 * Month/Day/Year.
 */
constexpr DateFormat DATE_FORMAT_MMDDYYYY = SDL_DATE_FORMAT_MMDDYYYY;

/**
 * The preferred time format of the current system locale.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa SDL_GetDateTimeLocalePreferences
 */
using TimeFormat = SDL_TimeFormat;

/**
 * 24 hour time
 */
constexpr TimeFormat TIME_FORMAT_24HR = SDL_TIME_FORMAT_24HR;

/**
 * 12 hour time
 */
constexpr TimeFormat TIME_FORMAT_12HR = SDL_TIME_FORMAT_12HR;

/**
 * Gets the current preferred date and time format for the system locale.
 *
 * This might be a "slow" call that has to query the operating system. It's
 * best to ask for this once and save the results. However, the preferred
 * formats can change, usually because the user has changed a system
 * preference outside of your program.
 *
 * @param dateFormat a pointer to the SDL_DateFormat to hold the returned date
 *                   format, may be NULL.
 * @param timeFormat a pointer to the SDL_TimeFormat to hold the returned time
 *                   format, may be NULL.
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool GetDateTimeLocalePreferences(DateFormat* dateFormat,
                                         TimeFormat* timeFormat)
{
  return SDL_GetDateTimeLocalePreferences(dateFormat, timeFormat);
}

/**
 * Gets the current value of the system realtime clock in nanoseconds since
 * Jan 1, 1970 in Universal Coordinated Time (UTC).
 *
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Time Time::Current()
{
  if (SDL_Time t; SDL_GetCurrentTime(&t)) return Time::FromNS(t);
  return Time{};
}

/**
 * Converts an SDL time into a Windows FILETIME (100-nanosecond intervals
 * since January 1, 1601).
 *
 * This function fills in the two 32-bit values of the FILETIME structure.
 *
 * @param dwLowDateTime a pointer filled in with the low portion of the
 *                      Windows FILETIME value.
 * @param dwHighDateTime a pointer filled in with the high portion of the
 *                       Windows FILETIME value.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void Time::ToWindows(Uint32* dwLowDateTime, Uint32* dwHighDateTime) const
{
  SDL_TimeToWindows(ToNS(), dwLowDateTime, dwHighDateTime);
}

/**
 * Converts a Windows FILETIME (100-nanosecond intervals since January 1,
 * 1601) to an SDL time.
 *
 * This function takes the two 32-bit values of the FILETIME structure as
 * parameters.
 *
 * @param dwLowDateTime the low portion of the Windows FILETIME value.
 * @param dwHighDateTime the high portion of the Windows FILETIME value.
 * @returns the converted SDL time.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Time Time::FromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime)
{
  return Time::FromNS(SDL_TimeFromWindows(dwLowDateTime, dwHighDateTime));
}

/**
 * Get the number of days in a month for a given year.
 *
 * @param year the year.
 * @param month the month [1-12].
 * @returns the number of days in the requested month or -1 on failure; call
 *          SDL_GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetDaysInMonth(int year, int month)
{
  return SDL_GetDaysInMonth(year, month);
}

/**
 * Get the day of year for a calendar date.
 *
 * @param year the year component of the date.
 * @param month the month component of the date.
 * @param day the day component of the date.
 * @returns the day of year [0-365] if the date is valid or -1 on failure;
 *          call SDL_GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetDayOfYear(int year, int month, int day)
{
  return SDL_GetDayOfYear(year, month, day);
}

/**
 * Get the day of week for a calendar date.
 *
 * @param year the year component of the date.
 * @param month the month component of the date.
 * @param day the day component of the date.
 * @returns a value between 0 and 6 (0 being Sunday) if the date is valid or
 *          -1 on failure; call SDL_GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline int GetDayOfWeek(int year, int month, int day)
{
  return SDL_GetDayOfWeek(year, month, day);
}

/// @}

/**
 * @defgroup CategoryInit Initialization and Shutdown
 *
 * All SDL programs need to initialize the library before starting to work
 * with it.
 *
 * Almost everything can simply call SDL_Init() near startup, with a handful
 * of flags to specify subsystems to touch. These are here to make sure SDL
 * does not even attempt to touch low-level pieces of the operating system
 * that you don't intend to use. For example, you might be using SDL for video
 * and input but chose an external library for audio, and in this case you
 * would just need to leave off the `SDL_INIT_AUDIO` flag to make sure that
 * external library has complete control.
 *
 * Most apps, when terminating, should call SDL_Quit(). This will clean up
 * (nearly) everything that SDL might have allocated, and crucially, it'll
 * make sure that the display's resolution is back to what the user expects if
 * you had previously changed it for your game.
 *
 * SDL3 apps are strongly encouraged to call SDL_SetAppMetadata() at startup
 * to fill in details about the program. This is completely optional, but it
 * helps in small ways (we can provide an About dialog box for the macOS menu,
 * we can name the app in the system's audio mixer, etc). Those that want to
 * provide a _lot_ of information should look at the more-detailed
 * SDL_SetAppMetadataProperty().
 *
 * @{
 */

/**
 * @defgroup InitFlags Initialization flags
 *
 * @{
 */

/**
 * Initialization flags for SDL
 *
 * These are the flags which may be passed to InitSubSystem(). You should
 * specify the subsystems which you will be using in your application.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa InitSubSystem
 * @sa InitFlagsExtra
 * @sa Quit
 * @sa QuitSubSystem
 * @sa WasInit
 */
using InitFlags = Uint32;

/**
 * Initialization flags for SDL satellite libraries
 *
 * Each satellite lib that needs initialization should extend this class and
 * provide an overload of InitSubSystem(), WasInit() and QuitSubSystem() with
 * a single parameter accepting this extended type.
 *
 * @sa InitFlags
 * @sa Init
 * @sa InitSubSystem
 */
struct InitFlagsExtra
{};

constexpr InitFlags INIT_AUDIO =
  SDL_INIT_AUDIO; ///< `INIT_AUDIO` implies `INIT_EVENTS`

/**
 * `INIT_VIDEO` implies `INIT_EVENTS`, should be initialized on the main thread
 */
constexpr InitFlags INIT_VIDEO = SDL_INIT_VIDEO;

/**
 * `INIT_JOYSTICK` implies `INIT_EVENTS`, should be initialized on the same
 * thread as INIT_VIDEO on Windows if you don't set SDL_HINT_JOYSTICK_THREAD
 */
constexpr InitFlags INIT_JOYSTICK = SDL_INIT_JOYSTICK;

constexpr InitFlags INIT_HAPTIC = SDL_INIT_HAPTIC; ///< HAPTIC

constexpr InitFlags INIT_GAMEPAD =
  SDL_INIT_GAMEPAD; ///< `INIT_GAMEPAD` implies `INIT_JOYSTICK`

constexpr InitFlags INIT_EVENTS = SDL_INIT_EVENTS; ///< EVENTS

constexpr InitFlags INIT_SENSOR =
  SDL_INIT_SENSOR; ///< `INIT_SENSOR` implies `INIT_EVENTS`

constexpr InitFlags INIT_CAMERA =
  SDL_INIT_CAMERA; ///< `INIT_CAMERA` implies `INIT_EVENTS`

/// @}

/**
 * @name AppResult
 * App result for Main callback
 * @{
 */

/**
 * Return values for optional main callbacks.
 *
 * Returning SDL_APP_SUCCESS or SDL_APP_FAILURE from SDL_AppInit,
 * SDL_AppEvent, or SDL_AppIterate will terminate the program and report
 * success/failure to the operating system. What that means is
 * platform-dependent. On Unix, for example, on success, the process error
 * code will be zero, and on failure it will be 1. This interface doesn't
 * allow you to return specific exit codes, just whether there was an error
 * generally or not.
 *
 * Returning SDL_APP_CONTINUE from these functions will let the app continue
 * to run.
 *
 * See
 * [Main callbacks in
 * SDL3](https://wiki.libsdl.org/SDL3/README/main-functions#main-callbacks-in-sdl3)
 * for complete details.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using AppResult = SDL_AppResult;

/**
 * Value that requests that the app continue from the main callbacks.
 */
constexpr AppResult APP_CONTINUE = SDL_APP_CONTINUE;

/**
 * Value that requests termination with success from the main callbacks.
 */
constexpr AppResult APP_SUCCESS = SDL_APP_SUCCESS;

/**
 * Value that requests termination with error from the main callbacks.
 */
constexpr AppResult APP_FAILURE = SDL_APP_FAILURE;

/// @}

/**
 * @name Callbacks for EnterAppMainCallbacks()
 *
 * @{
 */

/**
 * Function pointer typedef for SDL_AppInit.
 *
 * These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind
 * the scenes for apps using the optional main callbacks. Apps that want to
 * use this should just implement SDL_AppInit directly.
 *
 * @param appstate a place where the app can optionally store a pointer for
 *                 future use.
 * @param argc the standard ANSI C main's argc; number of elements in `argv`.
 * @param argv the standard ANSI C main's argv; array of command line
 *             arguments.
 * @returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to
 *          terminate with success, SDL_APP_CONTINUE to continue.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using AppInit_func = SDL_AppInit_func;

/**
 * Function pointer typedef for SDL_AppIterate.
 *
 * These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind
 * the scenes for apps using the optional main callbacks. Apps that want to
 * use this should just implement SDL_AppIterate directly.
 *
 * @param appstate an optional pointer, provided by the app in SDL_AppInit.
 * @returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to
 *          terminate with success, SDL_APP_CONTINUE to continue.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using AppIterate_func = SDL_AppIterate_func;

/**
 * Function pointer typedef for SDL_AppEvent.
 *
 * These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind
 * the scenes for apps using the optional main callbacks. Apps that want to
 * use this should just implement SDL_AppEvent directly.
 *
 * @param appstate an optional pointer, provided by the app in SDL_AppInit.
 * @param event the new event for the app to examine.
 * @returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to
 *          terminate with success, SDL_APP_CONTINUE to continue.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using AppEvent_func = SDL_AppEvent_func;

/**
 * Function pointer typedef for SDL_AppQuit.
 *
 * These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind
 * the scenes for apps using the optional main callbacks. Apps that want to
 * use this should just implement SDL_AppEvent directly.
 *
 * @param appstate an optional pointer, provided by the app in SDL_AppInit.
 * @param result the result code that terminated the app (success or failure).
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using AppQuit_func = SDL_AppQuit_func;

/// @}

/**
 * Initialize the SDL library.
 *
 * The class Init is probably what you are looking for, as it automatically
 * handles de-initialization.
 *
 * The file I/O (for example: IOStream) and threading (CreateThread)
 * subsystems are initialized by default. Message boxes
 * (ShowSimpleMessageBox) also attempt to work without initializing the
 * video subsystem, in hopes of being useful in showing an error dialog when
 * Init fails. You must specifically initialize other subsystems if you
 * use them in your application.
 *
 * Logging (such as Log) works without initialization, too.
 *
 * `flags` may be any of the following OR'd together:
 *
 * - `INIT_AUDIO`: audio subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_VIDEO`: video subsystem; automatically initializes the events
 *   subsystem, should be initialized on the main thread.
 * - `INIT_JOYSTICK`: joystick subsystem; automatically initializes the
 *   events subsystem
 * - `INIT_HAPTIC`: haptic (force feedback) subsystem
 * - `INIT_GAMEPAD`: gamepad subsystem; automatically initializes the
 *   joystick subsystem
 * - `INIT_EVENTS`: events subsystem
 * - `INIT_SENSOR`: sensor subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_CAMERA`: camera subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_TTF`: ttf satellite library subsystem; automatically initializes the
 *   events subsystem
 *
 * Subsystem initialization is ref-counted, you must call QuitSubSystem()
 * for each InitSubSystem() to correctly shutdown a subsystem manually (or
 * call Quit() to force shutdown). If a subsystem is already loaded then
 * this call will increase the ref-count and return.
 *
 * Consider reporting some basic metadata about your application before
 * calling Init, using either SetAppMetadata() or
 * SetAppMetadataProperty().
 *
 * @param flags subsystem initialization flags.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetAppMetadata()
 * @sa SetAppMetadataProperty()
 * @sa InitSubSystem()
 * @sa Quit()
 * @sa SetMainReady()
 * @sa WasInit()
 */
inline bool InitSubSystem(InitFlags flags) { return SDL_Init(flags); }

/**
 * Initialize the SDL library.
 *
 * The class Init is probably what you are looking for, as it automatically
 * handles de-initialization.
 *
 * The file I/O (for example: IOStream) and threading (CreateThread)
 * subsystems are initialized by default. Message boxes
 * (ShowSimpleMessageBox) also attempt to work without initializing the
 * video subsystem, in hopes of being useful in showing an error dialog when
 * Init fails. You must specifically initialize other subsystems if you
 * use them in your application.
 *
 * Logging (such as Log) works without initialization, too.
 *
 * `flags` may be any of the following OR'd together:
 *
 * - `INIT_AUDIO`: audio subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_VIDEO`: video subsystem; automatically initializes the events
 *   subsystem, should be initialized on the main thread.
 * - `INIT_JOYSTICK`: joystick subsystem; automatically initializes the
 *   events subsystem
 * - `INIT_HAPTIC`: haptic (force feedback) subsystem
 * - `INIT_GAMEPAD`: gamepad subsystem; automatically initializes the
 *   joystick subsystem
 * - `INIT_EVENTS`: events subsystem
 * - `INIT_SENSOR`: sensor subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_CAMERA`: camera subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_TTF`: ttf satellite library subsystem; automatically initializes the
 *   events subsystem
 *
 * Subsystem initialization is ref-counted, you must call QuitSubSystem()
 * for each InitSubSystem() to correctly shutdown a subsystem manually (or
 * call Quit() to force shutdown). If a subsystem is already loaded then
 * this call will increase the ref-count and return.
 *
 * Consider reporting some basic metadata about your application before
 * calling Init, using either SetAppMetadata() or
 * SetAppMetadataProperty().
 *
 * @tparam FLAG0
 * @tparam FLAG1
 * @tparam FLAGS
 * @param flag0 subsystem initialization flags.
 * @param flag1 subsystem initialization flags.
 * @param flags subsystem initialization flags.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetAppMetadata()
 * @sa SetAppMetadataProperty()
 * @sa InitSubSystem()
 * @sa Quit()
 * @sa SetMainReady()
 * @sa WasInit()
 */
template<class FLAG0, class FLAG1, class... FLAGS>
inline bool InitSubSystem(FLAG0 flag0, FLAG1 flag1, FLAGS... flags)
{
  if (InitSubSystem(flag0)) return InitSubSystem(flag1, flags...);
  return false;
}

/**
 * Initialize the SDL library.
 *
 * The class Init is probably what you are looking for, as it automatically
 * handles de-initialization.
 *
 * The file I/O (for example: IOStream) and threading (CreateThread)
 * subsystems are initialized by default. Message boxes
 * (ShowSimpleMessageBox) also attempt to work without initializing the
 * video subsystem, in hopes of being useful in showing an error dialog when
 * Init fails. You must specifically initialize other subsystems if you
 * use them in your application.
 *
 * Logging (such as Log) works without initialization, too.
 *
 * `flags` may be any of the following OR'd together:
 *
 * - `INIT_AUDIO`: audio subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_VIDEO`: video subsystem; automatically initializes the events
 *   subsystem, should be initialized on the main thread.
 * - `INIT_JOYSTICK`: joystick subsystem; automatically initializes the
 *   events subsystem
 * - `INIT_HAPTIC`: haptic (force feedback) subsystem
 * - `INIT_GAMEPAD`: gamepad subsystem; automatically initializes the
 *   joystick subsystem
 * - `INIT_EVENTS`: events subsystem
 * - `INIT_SENSOR`: sensor subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_CAMERA`: camera subsystem; automatically initializes the events
 *   subsystem
 * - `INIT_TTF`: ttf satellite library subsystem; automatically initializes the
 *   events subsystem
 *
 * Subsystem initialization is ref-counted, you must call QuitSubSystem()
 * for each InitSubSystem() to correctly shutdown a subsystem manually (or
 * call Quit() to force shutdown). If a subsystem is already loaded then
 * this call will increase the ref-count and return.
 *
 * Consider reporting some basic metadata about your application before
 * calling Init, using either SetAppMetadata() or
 * SetAppMetadataProperty().
 *
 * @tparam FLAG
 * @tparam FLAGS
 * @param flag0 subsystem initialization flags.
 * @param flag1 subsystem initialization flags.
 * @param flags subsystem initialization flags.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetAppMetadata()
 * @sa SetAppMetadataProperty()
 * @sa InitSubSystem()
 * @sa Quit()
 * @sa SetMainReady()
 * @sa WasInit()
 */
template<class FLAG, class... FLAGS>
inline bool InitSubSystem(FLAG flag0, FLAG flag1, FLAGS... flags)
{
  return InitSubSystem(flag0 | flag1, flags...);
}

/**
 * Shut down specific SDL subsystems.
 *
 * You still need to call Quit() even if you close all open subsystems with
 * QuitSubSystem().
 *
 * @param flags any of the flags used by Init(); see InitFlags for details.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa InitSubSystem()
 * @sa Quit()
 */
inline void QuitSubSystem(InitFlags flags) { return SDL_QuitSubSystem(flags); }

/**
 * Shut down specific SDL subsystems.
 *
 * You still need to call Quit() even if you close all open subsystems with
 * QuitSubSystem().
 *
 * @tparam FLAG0
 * @tparam FLAG1
 * @tparam FLAGS
 * @param flag0 any of the flags used by Init(); see InitFlags and
 * InitFlagsExtra for details.
 * @param flag1 any of the flags used by Init(); see InitFlags and
 * InitFlagsExtra for details.
 * @param flags any of the flags used by Init(); see InitFlags and
 * InitFlagsExtra for details.
 */
template<class FLAG0, class FLAG1, class... FLAGS>
inline void QuitSubSystem(FLAG0 flag0, FLAG1 flag1, FLAGS... flags)
{
  if (!QuitSubSystem(flag0)) return;
  QuitSubSystem(flag1, flags...);
}

/**
 * Shut down specific SDL subsystems.
 *
 * You still need to call Quit() even if you close all open subsystems with
 * QuitSubSystem().
 *
 * @tparam FLAG
 * @tparam FLAGS
 * @param flag0 any of the flags used by Init(); see InitFlags and
 * InitFlagsExtra for details.
 * @param flag1 any of the flags used by Init(); see InitFlags and
 * InitFlagsExtra for details.
 * @param flags any of the flags used by Init(); see InitFlags and
 * InitFlagsExtra for details.
 */
template<class FLAG, class... FLAGS>
inline void QuitSubSystem(FLAG flag0, FLAG flag1, FLAGS... flags)
{
  QuitSubSystem(flag0 | flag1, flags...);
}

/**
 * Check if all of the specified subsystems which are currently initialized.
 *
 * @param flags any of the flags used by SDL_Init(); see SDL_Init for details.
 * @returns true if all subsystems are currently initialized
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Init()
 * @sa InitSubSystem()
 */
inline bool WasInit(InitFlags flags) { return SDL_WasInit(flags) == flags; }

/**
 * Check if all of the specified subsystems which are currently initialized.
 *
 * @tparam FLAG0
 * @tparam FLAG1
 * @tparam FLAGS
 * @param flag0 flag to check
 * @param flag1 flag to check
 * @param flags flag to check
 * @returns true if all subsystems are currently initialized
 */
template<class FLAG0, class FLAG1, class... FLAGS>
inline bool WasInit(FLAG0 flag0, FLAG1 flag1, FLAGS... flags)
{
  if (WasInit(flag0)) return WasInit(flag1, flags...);
  return false;
}

/**
 * Check if all of the specified subsystems which are currently initialized.
 *
 * @tparam FLAG
 * @tparam FLAGS
 * @param flag0 flag to check
 * @param flag1 flag to check
 * @param flags flag to check
 * @returns true if all subsystems are currently initialized
 */
template<class FLAG, class... FLAGS>
inline bool WasInit(FLAG flag0, FLAG flag1, FLAGS... flags)
{
  return WasInit(flag0 | flag1, flags...);
}

/**
 * Clean up all initialized subsystems.
 *
 * You should call this function even if you have already shutdown each
 * initialized subsystem with SDL_QuitSubSystem(). It is safe to call this
 * function even in the case of errors in initialization.
 *
 * You can use this function with atexit() to ensure that it is run when your
 * application is shutdown, but it is not wise to do this from a library or
 * other dynamically loaded code.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Init()
 * @sa QuitSubSystem()
 */
inline void Quit() { return SDL_Quit(); }

/**
 * Initialize the SDL library.
 *
 * Also init any subsystem passed as InitFlags
 *
 * This might be called multiple times, it keeps a ref count and calls SDL_Quit
 * only on the last one.
 *
 * The SubSystems are out of the refCount, as SDL itself already keep track
 * internally.
 */
class SDL
{
  bool m_active = false;

  bool updateActive(bool active);

public:
  /**
   * Init given subsystems
   *
   * @param flags subsystem initialization flags.
   * @post convertible to true on success or to false on failure; call
   * GetError() for more information.
   *
   * This class must have only a single initialized instance at any given time,
   * as it will call Quit() when goes out of scope.
   */
  template<class... FLAGS>
  SDL(FLAGS... flags)
  {
    if (updateActive(true)) {
      if (!InitSubSystem(flags...)) updateActive(false);
    }
  }

  /**
   * Default ctor
   *
   * Useful if you plan to create it afterwards
   */
  constexpr SDL() = default;

  // Copy ctor
  SDL(const SDL& other) = delete;

  /// Move ctor
  constexpr SDL(SDL&& other)
    : m_active(other.m_active)
  {
    other.m_active = false;
  }

  // Dtor
  ~SDL() { reset(); }

  /// Assignment operator
  SDL& operator=(SDL rhs)
  {
    std::swap(m_active, rhs.m_active);
    return *this;
  }

  /**
   * @brief release locking such as reset() does, but never calls SDL_Quit() or
   * SDL_QuitSubSystem()
   * @return false if there are still other locks, true if this was last one
   *
   * When this returns true it is safe to call Quit() directly
   */
  bool release()
  {
    bool wasActive = m_active;
    if (wasActive) { updateActive(false); }
    return wasActive;
  }

  /**
   * @brief reset the value of this instance, acts like it was destroyed and
   * then newly instantiated with empty ctor
   * @return true if Quit() was called.
   */
  bool reset()
  {
    if (release()) Quit();
    return false;
  }

  /// @brief returns true if active and has no errors
  operator bool() const { return m_active; }
};

/**
 * Return whether this is the main thread.
 *
 * On Apple platforms, the main thread is the thread that runs your program's
 * main() entry point. On other platforms, the main thread is the one that
 * calls SDL_Init(SDL_INIT_VIDEO), which should usually be the one that runs
 * your program's main() entry point. If you are using the main callbacks,
 * SDL_AppInit(), SDL_AppIterate(), and SDL_AppQuit() are all called on the
 * main thread.
 *
 * @returns true if this thread is the main thread, or false otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RunOnMainThread()
 */
inline bool IsMainThread() { return SDL_IsMainThread(); }

/**
 * @name Callbacks for RunOnMainThread()
 * @{
 */

/**
 * Callback run on the main thread.
 *
 * @param userdata an app-controlled pointer that is passed to the callback.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa RunOnMainThread()
 */
using MainThreadCallback = SDL_MainThreadCallback;

/**
 * @sa PropertiesRef.MainThreadCallback
 * @sa result-callback
 *
 * @cat result-callback
 *
 */
using MainThreadCB = std::function<void()>;

/// @}

/**
 * Call a function on the main thread during event processing.
 *
 * If this is called on the main thread, the callback is executed immediately.
 * If this is called on another thread, this callback is queued for execution
 * on the main thread during event processing.
 *
 * Be careful of deadlocks when using this functionality. You should not have
 * the main thread wait for the current thread while this function is being
 * called with `wait_complete` true.
 *
 * @param callback the callback to call on the main thread.
 * @param userdata a pointer that is passed to `callback`.
 * @param wait_complete true to wait for the callback to complete, false to
 *                      return immediately.
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IsMainThread()
 */
inline bool RunOnMainThread(MainThreadCallback callback,
                            void* userdata,
                            bool wait_complete)
{
  return SDL_RunOnMainThread(callback, userdata, wait_complete);
}

/**
 * Call a function on the main thread during event processing.
 *
 * If this is called on the main thread, the callback is executed immediately.
 * If this is called on another thread, this callback is queued for execution
 * on the main thread during event processing.
 *
 * Be careful of deadlocks when using this functionality. You should not have
 * the main thread wait for the current thread while this function is being
 * called with `wait_complete` true.
 *
 * @param callback the callback to call on the main thread.
 * @param wait_complete true to wait for the callback to complete, false to
 *                      return immediately.
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IsMainThread()
 * @sa result-callback
 *
 * @cat result-callback
 */
inline bool RunOnMainThread(MainThreadCB callback, bool wait_complete)
{
  using Wrapper = CallbackWrapper<MainThreadCB>;
  return RunOnMainThread(
    &Wrapper::CallOnce, Wrapper::Wrap(std::move(callback)), wait_complete);
}

/**
 * Specify basic metadata about your app.
 *
 * You can optionally provide metadata about your app to SDL. This is not
 * required, but strongly encouraged.
 *
 * There are several locations where SDL can make use of metadata (an "About"
 * box in the macOS menu bar, the name of the app can be shown on some audio
 * mixers, etc). Any piece of metadata can be left as NULL, if a specific
 * detail doesn't make sense for the app.
 *
 * This function should be called as early as possible, before SDL_Init.
 * Multiple calls to this function are allowed, but various state might not
 * change once it has been set up with a previous call to this function.
 *
 * Passing a NULL removes any previous metadata.
 *
 * This is a simplified interface for the most important information. You can
 * supply significantly more detailed metadata with
 * SDL_SetAppMetadataProperty().
 *
 * @param appname The name of the application ("My Game 2: Bad Guy's
 *                Revenge!").
 * @param appversion The version of the application ("1.0.0beta5" or a git
 *                   hash, or whatever makes sense).
 * @param appidentifier A unique string in reverse-domain format that
 *                      identifies this app ("com.example.mygame2").
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetAppMetadataProperty()
 */
inline bool SetAppMetadata(StringParam appname,
                           StringParam appversion,
                           StringParam appidentifier)
{
  return SDL_SetAppMetadata(appname, appversion, appidentifier);
}

/**
 * Specify metadata about your app through a set of properties.
 *
 * You can optionally provide metadata about your app to SDL. This is not
 * required, but strongly encouraged.
 *
 * There are several locations where SDL can make use of metadata (an "About"
 * box in the macOS menu bar, the name of the app can be shown on some audio
 * mixers, etc). Any piece of metadata can be left out, if a specific detail
 * doesn't make sense for the app.
 *
 * This function should be called as early as possible, before SDL_Init.
 * Multiple calls to this function are allowed, but various state might not
 * change once it has been set up with a previous call to this function.
 *
 * Once set, this metadata can be read using SDL_GetAppMetadataProperty().
 *
 * These are the supported properties:
 *
 * - `SDL_PROP_APP_METADATA_NAME_STRING`: The human-readable name of the
 *   application, like "My Game 2: Bad Guy's Revenge!". This will show up
 *   anywhere the OS shows the name of the application separately from window
 *   titles, such as volume control applets, etc. This defaults to "SDL
 *   Application".
 * - `SDL_PROP_APP_METADATA_VERSION_STRING`: The version of the app that is
 *   running; there are no rules on format, so "1.0.3beta2" and "April 22nd,
 *   2024" and a git hash are all valid options. This has no default.
 * - `SDL_PROP_APP_METADATA_IDENTIFIER_STRING`: A unique string that
 *   identifies this app. This must be in reverse-domain format, like
 *   "com.example.mygame2". This string is used by desktop compositors to
 *   identify and group windows together, as well as match applications with
 *   associated desktop settings and icons. If you plan to package your
 *   application in a container such as Flatpak, the app ID should match the
 *   name of your Flatpak container as well. This has no default.
 * - `SDL_PROP_APP_METADATA_CREATOR_STRING`: The human-readable name of the
 *   creator/developer/maker of this app, like "MojoWorkshop, LLC"
 * - `SDL_PROP_APP_METADATA_COPYRIGHT_STRING`: The human-readable copyright
 *   notice, like "Copyright (c) 2024 MojoWorkshop, LLC" or whatnot. Keep this
 *   to one line, don't paste a copy of a whole software license in here. This
 *   has no default.
 * - `SDL_PROP_APP_METADATA_URL_STRING`: A URL to the app on the web. Maybe a
 *   product page, or a storefront, or even a GitHub repository, for user's
 *   further information This has no default.
 * - `SDL_PROP_APP_METADATA_TYPE_STRING`: The type of application this is.
 *   Currently this string can be "game" for a video game, "mediaplayer" for a
 *   media player, or generically "application" if nothing else applies.
 *   Future versions of SDL might add new types. This defaults to
 *   "application".
 *
 * @param name the name of the metadata property to set.
 * @param value the value of the property, or NULL to remove that property.
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetAppMetadataProperty()
 * @sa SetAppMetadata()
 */
inline bool SetAppMetadataProperty(StringParam name, StringParam value)
{
  return SDL_SetAppMetadataProperty(name, value);
}

namespace prop::appMetaData {

constexpr auto NAME_STRING = SDL_PROP_APP_METADATA_NAME_STRING;

constexpr auto VERSION_STRING = SDL_PROP_APP_METADATA_VERSION_STRING;

constexpr auto IDENTIFIER_STRING = SDL_PROP_APP_METADATA_IDENTIFIER_STRING;

constexpr auto CREATOR_STRING = SDL_PROP_APP_METADATA_CREATOR_STRING;

constexpr auto COPYRIGHT_STRING = SDL_PROP_APP_METADATA_COPYRIGHT_STRING;

constexpr auto URL_STRING = SDL_PROP_APP_METADATA_URL_STRING;

constexpr auto TYPE_STRING = SDL_PROP_APP_METADATA_TYPE_STRING;

} // namespace prop::appMetaData

/**
 * Get metadata about your app.
 *
 * This returns metadata previously set using SDL_SetAppMetadata() or
 * SDL_SetAppMetadataProperty(). See SDL_SetAppMetadataProperty() for the list
 * of available properties and their meanings.
 *
 * @param name the name of the metadata property to get.
 * @returns the current value of the metadata property, or the default if it
 *          is not set, NULL for properties with no default.
 *
 * @threadsafety It is safe to call this function from any thread, although
 *               the string returned is not protected and could potentially be
 *               freed if you call SDL_SetAppMetadataProperty() to set that
 *               property from another thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SDL_SetAppMetadata
 * @sa SDL_SetAppMetadataProperty
 */
inline const char* GetAppMetadataProperty(StringParam name)
{
  return SDL_GetAppMetadataProperty(name);
}

/// @}

#pragma region impl

inline bool SDL::updateActive(bool active)
{
  static std::atomic_bool currentlyInitd{false};
  bool result = !currentlyInitd.exchange(active);
  if (active && !result) {
    SetErrorUnformatted(
      "Can not initialize, there is already an active instance");
  } else
    m_active = active;
  return result;
}

#pragma endregion

/**
 *
 * @defgroup CategoryKeycode Keyboard Keycodes
 *
 * Defines constants which identify keyboard keys and modifiers.
 *
 * Please refer to the Best Keyboard Practices document for details on what
 * this information means and how best to use it.
 *
 * https://wiki.libsdl.org/SDL3/BestKeyboardPractices
 *
 * @{
 */

/**
 * Valid key modifiers (possibly OR'd together).
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using Keymod = Uint16;

/**
 * no modifier is applicable.
 */
constexpr Keymod KMOD_NONE = SDL_KMOD_NONE;

/**
 * the left Shift key is down.
 */
constexpr Keymod KMOD_LSHIFT = SDL_KMOD_LSHIFT;

/**
 * the right Shift key is down.
 */
constexpr Keymod KMOD_RSHIFT = SDL_KMOD_RSHIFT;

/**
 * the Level 5 Shift key is down.
 */
constexpr Keymod KMOD_LEVEL5 = SDL_KMOD_LEVEL5;

/**
 * the left Ctrl (Control) key is down.
 */
constexpr Keymod KMOD_LCTRL = SDL_KMOD_LCTRL;

/**
 * the right Ctrl (Control) key is down.
 */
constexpr Keymod KMOD_RCTRL = SDL_KMOD_RCTRL;

/**
 * the left Alt key is down.
 */
constexpr Keymod KMOD_LALT = SDL_KMOD_LALT;

/**
 * the right Alt key is down.
 */
constexpr Keymod KMOD_RALT = SDL_KMOD_RALT;

/**
 * the left GUI key (often the Windows key) is down.
 */
constexpr Keymod KMOD_LGUI = SDL_KMOD_LGUI;

/**
 * the right GUI key (often the Windows key) is down.
 */
constexpr Keymod KMOD_RGUI = SDL_KMOD_RGUI;

/**
 * the Num Lock key (may be located on an extended keypad) is down.
 */
constexpr Keymod KMOD_NUM = SDL_KMOD_NUM;

/**
 * the Caps Lock key is down.
 */
constexpr Keymod KMOD_CAPS = SDL_KMOD_CAPS;

/**
 * the !AltGr key is down.
 */
constexpr Keymod KMOD_MODE = SDL_KMOD_MODE;

/**
 * the Scroll Lock key is down.
 */
constexpr Keymod KMOD_SCROLL = SDL_KMOD_SCROLL;

/**
 * Any Ctrl key is down.
 */
constexpr Keymod KMOD_CTRL = SDL_KMOD_CTRL;

/**
 * Any Shift key is down.
 */
constexpr Keymod KMOD_SHIFT = SDL_KMOD_SHIFT;

/**
 * Any Alt key is down.
 */
constexpr Keymod KMOD_ALT = SDL_KMOD_ALT;

/**
 * Any GUI key is down.
 */
constexpr Keymod KMOD_GUI = SDL_KMOD_GUI;

/**
 * The SDL virtual key representation.
 *
 * Values of this type are used to represent keyboard keys using the current
 * layout of the keyboard. These values include Unicode values representing
 * the unmodified character that would be generated by pressing the key, or an
 * `SDLK_*` constant for those keys that do not generate characters.
 *
 * A special exception is the number keys at the top of the keyboard which map
 * to SDLK_0...SDLK_9 on AZERTY layouts.
 *
 * Keys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or
 * unicode code point.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
class Keycode
{
  SDL_Keycode m_keycode;

public:
  /**
   * Wraps Keycode.
   *
   * @param keycode the value to be wrapped
   */
  constexpr Keycode(SDL_Keycode keycode = {})
    : m_keycode(keycode)
  {
  }

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const Keycode& other) const = default;

  // Convert from scancode
  explicit Keycode(Scancode scancode,
                   Keymod modstate = 0,
                   bool key_event = false);

  // Create from key name
  explicit Keycode(StringParam name);

  /**
   * Unwraps to the underlying Keycode.
   *
   * @returns the underlying Keycode.
   */
  constexpr operator SDL_Keycode() const { return m_keycode; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return m_keycode != SDLK_UNKNOWN; }

  /// Has Extended flag.
  constexpr bool IsExtended() const { return m_keycode & SDLK_EXTENDED_MASK; }

  /// Has Scancode flag.
  constexpr bool IsScancode() const { return m_keycode & SDLK_SCANCODE_MASK; }

  Scancode GetScancode(Keymod* modstate) const;

  // Get name.
  const char* GetName() const;
};

constexpr Keycode KEYCODE_EXTENDED_MASK = SDLK_EXTENDED_MASK; ///< EXTENDED_MASK

constexpr Keycode KEYCODE_SCANCODE_MASK = SDLK_SCANCODE_MASK; ///< SCANCODE_MASK

/**
 * Transform scancode to keycode
 *
 * @param x scancode
 * @return keycode
 */
constexpr Keycode ScancodeToKeycode(Scancode x)
{
  return SDL_SCANCODE_TO_KEYCODE(x);
}

constexpr Keycode KEYCODE_UNKNOWN = SDLK_UNKNOWN; ///< 0

constexpr Keycode KEYCODE_RETURN = SDLK_RETURN; ///< '\\r'

constexpr Keycode KEYCODE_ESCAPE = SDLK_ESCAPE; ///< '\\x1B'

constexpr Keycode KEYCODE_BACKSPACE = SDLK_BACKSPACE; ///< '\\b'

constexpr Keycode KEYCODE_TAB = SDLK_TAB; ///< '\\t'

constexpr Keycode KEYCODE_SPACE = SDLK_SPACE; ///< ' '

constexpr Keycode KEYCODE_EXCLAIM = SDLK_EXCLAIM; ///< '!'

constexpr Keycode KEYCODE_DBLAPOSTROPHE = SDLK_DBLAPOSTROPHE; ///< '"'

constexpr Keycode KEYCODE_HASH = SDLK_HASH; ///< '#'

constexpr Keycode KEYCODE_DOLLAR = SDLK_DOLLAR; ///< '$'

constexpr Keycode KEYCODE_PERCENT = SDLK_PERCENT; ///< '%'

constexpr Keycode KEYCODE_AMPERSAND = SDLK_AMPERSAND; ///< '&'

constexpr Keycode KEYCODE_APOSTROPHE = SDLK_APOSTROPHE; ///< '\''

constexpr Keycode KEYCODE_LEFTPAREN = SDLK_LEFTPAREN; ///< '('

constexpr Keycode KEYCODE_RIGHTPAREN = SDLK_RIGHTPAREN; ///< ')'

constexpr Keycode KEYCODE_ASTERISK = SDLK_ASTERISK; ///< '*'

constexpr Keycode KEYCODE_PLUS = SDLK_PLUS; ///< '+'

constexpr Keycode KEYCODE_COMMA = SDLK_COMMA; ///< ','

constexpr Keycode KEYCODE_MINUS = SDLK_MINUS; ///< '-'

constexpr Keycode KEYCODE_PERIOD = SDLK_PERIOD; ///< '.'

constexpr Keycode KEYCODE_SLASH = SDLK_SLASH; ///< '/'

constexpr Keycode KEYCODE_0 = SDLK_0; ///< '0'

constexpr Keycode KEYCODE_1 = SDLK_1; ///< '1'

constexpr Keycode KEYCODE_2 = SDLK_2; ///< '2'

constexpr Keycode KEYCODE_3 = SDLK_3; ///< '3'

constexpr Keycode KEYCODE_4 = SDLK_4; ///< '4'

constexpr Keycode KEYCODE_5 = SDLK_5; ///< '5'

constexpr Keycode KEYCODE_6 = SDLK_6; ///< '6'

constexpr Keycode KEYCODE_7 = SDLK_7; ///< '7'

constexpr Keycode KEYCODE_8 = SDLK_8; ///< '8'

constexpr Keycode KEYCODE_9 = SDLK_9; ///< '9'

constexpr Keycode KEYCODE_COLON = SDLK_COLON; ///< ':'

constexpr Keycode KEYCODE_SEMICOLON = SDLK_SEMICOLON; ///< ';'

constexpr Keycode KEYCODE_LESS = SDLK_LESS; ///< '<'

constexpr Keycode KEYCODE_EQUALS = SDLK_EQUALS; ///< '='

constexpr Keycode KEYCODE_GREATER = SDLK_GREATER; ///< '>'

constexpr Keycode KEYCODE_QUESTION = SDLK_QUESTION; ///< '?'

constexpr Keycode KEYCODE_AT = SDLK_AT; ///< '@'

constexpr Keycode KEYCODE_LEFTBRACKET = SDLK_LEFTBRACKET; ///< '['

constexpr Keycode KEYCODE_BACKSLASH = SDLK_BACKSLASH; ///< '\\'

constexpr Keycode KEYCODE_RIGHTBRACKET = SDLK_RIGHTBRACKET; ///< ']'

constexpr Keycode KEYCODE_CARET = SDLK_CARET; ///< '^'

constexpr Keycode KEYCODE_UNDERSCORE = SDLK_UNDERSCORE; ///< '_'

constexpr Keycode KEYCODE_GRAVE = SDLK_GRAVE; ///< '`'

constexpr Keycode KEYCODE_A = SDLK_A; ///< 'a'

constexpr Keycode KEYCODE_B = SDLK_B; ///< 'b'

constexpr Keycode KEYCODE_C = SDLK_C; ///< 'c'

constexpr Keycode KEYCODE_D = SDLK_D; ///< 'd'

constexpr Keycode KEYCODE_E = SDLK_E; ///< 'e'

constexpr Keycode KEYCODE_F = SDLK_F; ///< 'f'

constexpr Keycode KEYCODE_G = SDLK_G; ///< 'g'

constexpr Keycode KEYCODE_H = SDLK_H; ///< 'h'

constexpr Keycode KEYCODE_I = SDLK_I; ///< 'i'

constexpr Keycode KEYCODE_J = SDLK_J; ///< 'j'

constexpr Keycode KEYCODE_K = SDLK_K; ///< 'k'

constexpr Keycode KEYCODE_L = SDLK_L; ///< 'l'

constexpr Keycode KEYCODE_M = SDLK_M; ///< 'm'

constexpr Keycode KEYCODE_N = SDLK_N; ///< 'n'

constexpr Keycode KEYCODE_O = SDLK_O; ///< 'o'

constexpr Keycode KEYCODE_P = SDLK_P; ///< 'p'

constexpr Keycode KEYCODE_Q = SDLK_Q; ///< 'q'

constexpr Keycode KEYCODE_R = SDLK_R; ///< 'r'

constexpr Keycode KEYCODE_S = SDLK_S; ///< 's'

constexpr Keycode KEYCODE_T = SDLK_T; ///< 't'

constexpr Keycode KEYCODE_U = SDLK_U; ///< 'u'

constexpr Keycode KEYCODE_V = SDLK_V; ///< 'v'

constexpr Keycode KEYCODE_W = SDLK_W; ///< 'w'

constexpr Keycode KEYCODE_X = SDLK_X; ///< 'x'

constexpr Keycode KEYCODE_Y = SDLK_Y; ///< 'y'

constexpr Keycode KEYCODE_Z = SDLK_Z; ///< 'z'

constexpr Keycode KEYCODE_LEFTBRACE = SDLK_LEFTBRACE; ///< '{'

constexpr Keycode KEYCODE_PIPE = SDLK_PIPE; ///< '|'

constexpr Keycode KEYCODE_RIGHTBRACE = SDLK_RIGHTBRACE; ///< '}'

constexpr Keycode KEYCODE_TILDE = SDLK_TILDE; ///< '~'

constexpr Keycode KEYCODE_DELETE = SDLK_DELETE; ///< '\\x7F'

constexpr Keycode KEYCODE_PLUSMINUS = SDLK_PLUSMINUS; ///< '\\xB1'

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CAPSLOCK)
 */
constexpr Keycode KEYCODE_CAPSLOCK = SDLK_CAPSLOCK;

constexpr Keycode KEYCODE_F1 = SDLK_F1; ///< ScancodeToKeycode(SCANCODE_F1)

constexpr Keycode KEYCODE_F2 = SDLK_F2; ///< ScancodeToKeycode(SCANCODE_F2)

constexpr Keycode KEYCODE_F3 = SDLK_F3; ///< ScancodeToKeycode(SCANCODE_F3)

constexpr Keycode KEYCODE_F4 = SDLK_F4; ///< ScancodeToKeycode(SCANCODE_F4)

constexpr Keycode KEYCODE_F5 = SDLK_F5; ///< ScancodeToKeycode(SCANCODE_F5)

constexpr Keycode KEYCODE_F6 = SDLK_F6; ///< ScancodeToKeycode(SCANCODE_F6)

constexpr Keycode KEYCODE_F7 = SDLK_F7; ///< ScancodeToKeycode(SCANCODE_F7)

constexpr Keycode KEYCODE_F8 = SDLK_F8; ///< ScancodeToKeycode(SCANCODE_F8)

constexpr Keycode KEYCODE_F9 = SDLK_F9; ///< ScancodeToKeycode(SCANCODE_F9)

constexpr Keycode KEYCODE_F10 = SDLK_F10; ///< ScancodeToKeycode(SCANCODE_F10)

constexpr Keycode KEYCODE_F11 = SDLK_F11; ///< ScancodeToKeycode(SCANCODE_F11)

constexpr Keycode KEYCODE_F12 = SDLK_F12; ///< ScancodeToKeycode(SCANCODE_F12)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PRINTSCREEN)
 */
constexpr Keycode KEYCODE_PRINTSCREEN = SDLK_PRINTSCREEN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SCROLLLOCK)
 */
constexpr Keycode KEYCODE_SCROLLLOCK = SDLK_SCROLLLOCK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PAUSE)
 */
constexpr Keycode KEYCODE_PAUSE = SDLK_PAUSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_INSERT)
 */
constexpr Keycode KEYCODE_INSERT = SDLK_INSERT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_HOME)
 */
constexpr Keycode KEYCODE_HOME = SDLK_HOME;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PAGEUP)
 */
constexpr Keycode KEYCODE_PAGEUP = SDLK_PAGEUP;

constexpr Keycode KEYCODE_END = SDLK_END; ///< ScancodeToKeycode(SCANCODE_END)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PAGEDOWN)
 */
constexpr Keycode KEYCODE_PAGEDOWN = SDLK_PAGEDOWN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RIGHT)
 */
constexpr Keycode KEYCODE_RIGHT = SDLK_RIGHT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LEFT)
 */
constexpr Keycode KEYCODE_LEFT = SDLK_LEFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_DOWN)
 */
constexpr Keycode KEYCODE_DOWN = SDLK_DOWN;

constexpr Keycode KEYCODE_UP = SDLK_UP; ///< ScancodeToKeycode(SCANCODE_UP)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_NUMLOCKCLEAR)
 */
constexpr Keycode KEYCODE_NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DIVIDE)
 */
constexpr Keycode KEYCODE_KP_DIVIDE = SDLK_KP_DIVIDE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MULTIPLY)
 */
constexpr Keycode KEYCODE_KP_MULTIPLY = SDLK_KP_MULTIPLY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MINUS)
 */
constexpr Keycode KEYCODE_KP_MINUS = SDLK_KP_MINUS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PLUS)
 */
constexpr Keycode KEYCODE_KP_PLUS = SDLK_KP_PLUS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_ENTER)
 */
constexpr Keycode KEYCODE_KP_ENTER = SDLK_KP_ENTER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_1)
 */
constexpr Keycode KEYCODE_KP_1 = SDLK_KP_1;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_2)
 */
constexpr Keycode KEYCODE_KP_2 = SDLK_KP_2;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_3)
 */
constexpr Keycode KEYCODE_KP_3 = SDLK_KP_3;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_4)
 */
constexpr Keycode KEYCODE_KP_4 = SDLK_KP_4;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_5)
 */
constexpr Keycode KEYCODE_KP_5 = SDLK_KP_5;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_6)
 */
constexpr Keycode KEYCODE_KP_6 = SDLK_KP_6;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_7)
 */
constexpr Keycode KEYCODE_KP_7 = SDLK_KP_7;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_8)
 */
constexpr Keycode KEYCODE_KP_8 = SDLK_KP_8;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_9)
 */
constexpr Keycode KEYCODE_KP_9 = SDLK_KP_9;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_0)
 */
constexpr Keycode KEYCODE_KP_0 = SDLK_KP_0;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PERIOD)
 */
constexpr Keycode KEYCODE_KP_PERIOD = SDLK_KP_PERIOD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_APPLICATION)
 */
constexpr Keycode KEYCODE_APPLICATION = SDLK_APPLICATION;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_POWER)
 */
constexpr Keycode KEYCODE_POWER = SDLK_POWER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_EQUALS)
 */
constexpr Keycode KEYCODE_KP_EQUALS = SDLK_KP_EQUALS;

constexpr Keycode KEYCODE_F13 = SDLK_F13; ///< ScancodeToKeycode(SCANCODE_F13)

constexpr Keycode KEYCODE_F14 = SDLK_F14; ///< ScancodeToKeycode(SCANCODE_F14)

constexpr Keycode KEYCODE_F15 = SDLK_F15; ///< ScancodeToKeycode(SCANCODE_F15)

constexpr Keycode KEYCODE_F16 = SDLK_F16; ///< ScancodeToKeycode(SCANCODE_F16)

constexpr Keycode KEYCODE_F17 = SDLK_F17; ///< ScancodeToKeycode(SCANCODE_F17)

constexpr Keycode KEYCODE_F18 = SDLK_F18; ///< ScancodeToKeycode(SCANCODE_F18)

constexpr Keycode KEYCODE_F19 = SDLK_F19; ///< ScancodeToKeycode(SCANCODE_F19)

constexpr Keycode KEYCODE_F20 = SDLK_F20; ///< ScancodeToKeycode(SCANCODE_F20)

constexpr Keycode KEYCODE_F21 = SDLK_F21; ///< ScancodeToKeycode(SCANCODE_F21)

constexpr Keycode KEYCODE_F22 = SDLK_F22; ///< ScancodeToKeycode(SCANCODE_F22)

constexpr Keycode KEYCODE_F23 = SDLK_F23; ///< ScancodeToKeycode(SCANCODE_F23)

constexpr Keycode KEYCODE_F24 = SDLK_F24; ///< ScancodeToKeycode(SCANCODE_F24)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_EXECUTE)
 */
constexpr Keycode KEYCODE_EXECUTE = SDLK_EXECUTE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_HELP)
 */
constexpr Keycode KEYCODE_HELP = SDLK_HELP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MENU)
 */
constexpr Keycode KEYCODE_MENU = SDLK_MENU;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SELECT)
 */
constexpr Keycode KEYCODE_SELECT = SDLK_SELECT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_STOP)
 */
constexpr Keycode KEYCODE_STOP = SDLK_STOP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AGAIN)
 */
constexpr Keycode KEYCODE_AGAIN = SDLK_AGAIN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_UNDO)
 */
constexpr Keycode KEYCODE_UNDO = SDLK_UNDO;

constexpr Keycode KEYCODE_CUT = SDLK_CUT; ///< ScancodeToKeycode(SCANCODE_CUT)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_COPY)
 */
constexpr Keycode KEYCODE_COPY = SDLK_COPY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PASTE)
 */
constexpr Keycode KEYCODE_PASTE = SDLK_PASTE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_FIND)
 */
constexpr Keycode KEYCODE_FIND = SDLK_FIND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MUTE)
 */
constexpr Keycode KEYCODE_MUTE = SDLK_MUTE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_VOLUMEUP)
 */
constexpr Keycode KEYCODE_VOLUMEUP = SDLK_VOLUMEUP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_VOLUMEDOWN)
 */
constexpr Keycode KEYCODE_VOLUMEDOWN = SDLK_VOLUMEDOWN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_COMMA)
 */
constexpr Keycode KEYCODE_KP_COMMA = SDLK_KP_COMMA;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_EQUALSAS400)
 */
constexpr Keycode KEYCODE_KP_EQUALSAS400 = SDLK_KP_EQUALSAS400;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_ALTERASE)
 */
constexpr Keycode KEYCODE_ALTERASE = SDLK_ALTERASE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SYSREQ)
 */
constexpr Keycode KEYCODE_SYSREQ = SDLK_SYSREQ;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CANCEL)
 */
constexpr Keycode KEYCODE_CANCEL = SDLK_CANCEL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CLEAR)
 */
constexpr Keycode KEYCODE_CLEAR = SDLK_CLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PRIOR)
 */
constexpr Keycode KEYCODE_PRIOR = SDLK_PRIOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RETURN2)
 */
constexpr Keycode KEYCODE_RETURN2 = SDLK_RETURN2;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SEPARATOR)
 */
constexpr Keycode KEYCODE_SEPARATOR = SDLK_SEPARATOR;

constexpr Keycode KEYCODE_OUT = SDLK_OUT; ///< ScancodeToKeycode(SCANCODE_OUT)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_OPER)
 */
constexpr Keycode KEYCODE_OPER = SDLK_OPER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CLEARAGAIN)
 */
constexpr Keycode KEYCODE_CLEARAGAIN = SDLK_CLEARAGAIN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CRSEL)
 */
constexpr Keycode KEYCODE_CRSEL = SDLK_CRSEL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_EXSEL)
 */
constexpr Keycode KEYCODE_EXSEL = SDLK_EXSEL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_00)
 */
constexpr Keycode KEYCODE_KP_00 = SDLK_KP_00;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_000)
 */
constexpr Keycode KEYCODE_KP_000 = SDLK_KP_000;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_THOUSANDSSEPARATOR)
 */
constexpr Keycode KEYCODE_THOUSANDSSEPARATOR = SDLK_THOUSANDSSEPARATOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_DECIMALSEPARATOR)
 */
constexpr Keycode KEYCODE_DECIMALSEPARATOR = SDLK_DECIMALSEPARATOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CURRENCYUNIT)
 */
constexpr Keycode KEYCODE_CURRENCYUNIT = SDLK_CURRENCYUNIT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CURRENCYSUBUNIT)
 */
constexpr Keycode KEYCODE_CURRENCYSUBUNIT = SDLK_CURRENCYSUBUNIT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_LEFTPAREN)
 */
constexpr Keycode KEYCODE_KP_LEFTPAREN = SDLK_KP_LEFTPAREN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_RIGHTPAREN)
 */
constexpr Keycode KEYCODE_KP_RIGHTPAREN = SDLK_KP_RIGHTPAREN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_LEFTBRACE)
 */
constexpr Keycode KEYCODE_KP_LEFTBRACE = SDLK_KP_LEFTBRACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_RIGHTBRACE)
 */
constexpr Keycode KEYCODE_KP_RIGHTBRACE = SDLK_KP_RIGHTBRACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_TAB)
 */
constexpr Keycode KEYCODE_KP_TAB = SDLK_KP_TAB;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_BACKSPACE)
 */
constexpr Keycode KEYCODE_KP_BACKSPACE = SDLK_KP_BACKSPACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_A)
 */
constexpr Keycode KEYCODE_KP_A = SDLK_KP_A;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_B)
 */
constexpr Keycode KEYCODE_KP_B = SDLK_KP_B;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_C)
 */
constexpr Keycode KEYCODE_KP_C = SDLK_KP_C;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_D)
 */
constexpr Keycode KEYCODE_KP_D = SDLK_KP_D;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_E)
 */
constexpr Keycode KEYCODE_KP_E = SDLK_KP_E;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_F)
 */
constexpr Keycode KEYCODE_KP_F = SDLK_KP_F;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_XOR)
 */
constexpr Keycode KEYCODE_KP_XOR = SDLK_KP_XOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_POWER)
 */
constexpr Keycode KEYCODE_KP_POWER = SDLK_KP_POWER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PERCENT)
 */
constexpr Keycode KEYCODE_KP_PERCENT = SDLK_KP_PERCENT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_LESS)
 */
constexpr Keycode KEYCODE_KP_LESS = SDLK_KP_LESS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_GREATER)
 */
constexpr Keycode KEYCODE_KP_GREATER = SDLK_KP_GREATER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_AMPERSAND)
 */
constexpr Keycode KEYCODE_KP_AMPERSAND = SDLK_KP_AMPERSAND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DBLAMPERSAND)
 */
constexpr Keycode KEYCODE_KP_DBLAMPERSAND = SDLK_KP_DBLAMPERSAND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_VERTICALBAR)
 */
constexpr Keycode KEYCODE_KP_VERTICALBAR = SDLK_KP_VERTICALBAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DBLVERTICALBAR)
 */
constexpr Keycode KEYCODE_KP_DBLVERTICALBAR = SDLK_KP_DBLVERTICALBAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_COLON)
 */
constexpr Keycode KEYCODE_KP_COLON = SDLK_KP_COLON;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_HASH)
 */
constexpr Keycode KEYCODE_KP_HASH = SDLK_KP_HASH;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_SPACE)
 */
constexpr Keycode KEYCODE_KP_SPACE = SDLK_KP_SPACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_AT)
 */
constexpr Keycode KEYCODE_KP_AT = SDLK_KP_AT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_EXCLAM)
 */
constexpr Keycode KEYCODE_KP_EXCLAM = SDLK_KP_EXCLAM;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMSTORE)
 */
constexpr Keycode KEYCODE_KP_MEMSTORE = SDLK_KP_MEMSTORE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMRECALL)
 */
constexpr Keycode KEYCODE_KP_MEMRECALL = SDLK_KP_MEMRECALL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMCLEAR)
 */
constexpr Keycode KEYCODE_KP_MEMCLEAR = SDLK_KP_MEMCLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMADD)
 */
constexpr Keycode KEYCODE_KP_MEMADD = SDLK_KP_MEMADD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMSUBTRACT)
 */
constexpr Keycode KEYCODE_KP_MEMSUBTRACT = SDLK_KP_MEMSUBTRACT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMMULTIPLY)
 */
constexpr Keycode KEYCODE_KP_MEMMULTIPLY = SDLK_KP_MEMMULTIPLY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMDIVIDE)
 */
constexpr Keycode KEYCODE_KP_MEMDIVIDE = SDLK_KP_MEMDIVIDE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PLUSMINUS)
 */
constexpr Keycode KEYCODE_KP_PLUSMINUS = SDLK_KP_PLUSMINUS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_CLEAR)
 */
constexpr Keycode KEYCODE_KP_CLEAR = SDLK_KP_CLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_CLEARENTRY)
 */
constexpr Keycode KEYCODE_KP_CLEARENTRY = SDLK_KP_CLEARENTRY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_BINARY)
 */
constexpr Keycode KEYCODE_KP_BINARY = SDLK_KP_BINARY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_OCTAL)
 */
constexpr Keycode KEYCODE_KP_OCTAL = SDLK_KP_OCTAL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DECIMAL)
 */
constexpr Keycode KEYCODE_KP_DECIMAL = SDLK_KP_DECIMAL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_HEXADECIMAL)
 */
constexpr Keycode KEYCODE_KP_HEXADECIMAL = SDLK_KP_HEXADECIMAL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LCTRL)
 */
constexpr Keycode KEYCODE_LCTRL = SDLK_LCTRL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LSHIFT)
 */
constexpr Keycode KEYCODE_LSHIFT = SDLK_LSHIFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LALT)
 */
constexpr Keycode KEYCODE_LALT = SDLK_LALT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LGUI)
 */
constexpr Keycode KEYCODE_LGUI = SDLK_LGUI;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RCTRL)
 */
constexpr Keycode KEYCODE_RCTRL = SDLK_RCTRL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RSHIFT)
 */
constexpr Keycode KEYCODE_RSHIFT = SDLK_RSHIFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RALT)
 */
constexpr Keycode KEYCODE_RALT = SDLK_RALT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RGUI)
 */
constexpr Keycode KEYCODE_RGUI = SDLK_RGUI;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MODE)
 */
constexpr Keycode KEYCODE_MODE = SDLK_MODE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SLEEP)
 */
constexpr Keycode KEYCODE_SLEEP = SDLK_SLEEP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_WAKE)
 */
constexpr Keycode KEYCODE_WAKE = SDLK_WAKE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CHANNEL_INCREMENT)
 */
constexpr Keycode KEYCODE_CHANNEL_INCREMENT = SDLK_CHANNEL_INCREMENT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CHANNEL_DECREMENT)
 */
constexpr Keycode KEYCODE_CHANNEL_DECREMENT = SDLK_CHANNEL_DECREMENT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PLAY)
 */
constexpr Keycode KEYCODE_MEDIA_PLAY = SDLK_MEDIA_PLAY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PAUSE)
 */
constexpr Keycode KEYCODE_MEDIA_PAUSE = SDLK_MEDIA_PAUSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_RECORD)
 */
constexpr Keycode KEYCODE_MEDIA_RECORD = SDLK_MEDIA_RECORD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_FAST_FORWARD)
 */
constexpr Keycode KEYCODE_MEDIA_FAST_FORWARD = SDLK_MEDIA_FAST_FORWARD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_REWIND)
 */
constexpr Keycode KEYCODE_MEDIA_REWIND = SDLK_MEDIA_REWIND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_NEXT_TRACK)
 */
constexpr Keycode KEYCODE_MEDIA_NEXT_TRACK = SDLK_MEDIA_NEXT_TRACK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PREVIOUS_TRACK)
 */
constexpr Keycode KEYCODE_MEDIA_PREVIOUS_TRACK = SDLK_MEDIA_PREVIOUS_TRACK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_STOP)
 */
constexpr Keycode KEYCODE_MEDIA_STOP = SDLK_MEDIA_STOP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_EJECT)
 */
constexpr Keycode KEYCODE_MEDIA_EJECT = SDLK_MEDIA_EJECT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PLAY_PAUSE)
 */
constexpr Keycode KEYCODE_MEDIA_PLAY_PAUSE = SDLK_MEDIA_PLAY_PAUSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_SELECT)
 */
constexpr Keycode KEYCODE_MEDIA_SELECT = SDLK_MEDIA_SELECT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_NEW)
 */
constexpr Keycode KEYCODE_AC_NEW = SDLK_AC_NEW;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_OPEN)
 */
constexpr Keycode KEYCODE_AC_OPEN = SDLK_AC_OPEN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_CLOSE)
 */
constexpr Keycode KEYCODE_AC_CLOSE = SDLK_AC_CLOSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_EXIT)
 */
constexpr Keycode KEYCODE_AC_EXIT = SDLK_AC_EXIT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_SAVE)
 */
constexpr Keycode KEYCODE_AC_SAVE = SDLK_AC_SAVE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_PRINT)
 */
constexpr Keycode KEYCODE_AC_PRINT = SDLK_AC_PRINT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_PROPERTIES)
 */
constexpr Keycode KEYCODE_AC_PROPERTIES = SDLK_AC_PROPERTIES;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_SEARCH)
 */
constexpr Keycode KEYCODE_AC_SEARCH = SDLK_AC_SEARCH;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_HOME)
 */
constexpr Keycode KEYCODE_AC_HOME = SDLK_AC_HOME;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_BACK)
 */
constexpr Keycode KEYCODE_AC_BACK = SDLK_AC_BACK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_FORWARD)
 */
constexpr Keycode KEYCODE_AC_FORWARD = SDLK_AC_FORWARD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_STOP)
 */
constexpr Keycode KEYCODE_AC_STOP = SDLK_AC_STOP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_REFRESH)
 */
constexpr Keycode KEYCODE_AC_REFRESH = SDLK_AC_REFRESH;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_BOOKMARKS)
 */
constexpr Keycode KEYCODE_AC_BOOKMARKS = SDLK_AC_BOOKMARKS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SOFTLEFT)
 */
constexpr Keycode KEYCODE_SOFTLEFT = SDLK_SOFTLEFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SOFTRIGHT)
 */
constexpr Keycode KEYCODE_SOFTRIGHT = SDLK_SOFTRIGHT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CALL)
 */
constexpr Keycode KEYCODE_CALL = SDLK_CALL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_ENDCALL)
 */
constexpr Keycode KEYCODE_ENDCALL = SDLK_ENDCALL;

constexpr Keycode KEYCODE_LEFT_TAB = SDLK_LEFT_TAB; ///< Extended key Left Tab

/**
 * Extended key Level 5 Shift
 */
constexpr Keycode KEYCODE_LEVEL5_SHIFT = SDLK_LEVEL5_SHIFT;

/**
 * Extended key Multi-key Compose
 */
constexpr Keycode KEYCODE_MULTI_KEY_COMPOSE = SDLK_MULTI_KEY_COMPOSE;

constexpr Keycode KEYCODE_LMETA = SDLK_LMETA; ///< Extended key Left Meta

constexpr Keycode KEYCODE_RMETA = SDLK_RMETA; ///< Extended key Right Meta

constexpr Keycode KEYCODE_LHYPER = SDLK_LHYPER; ///< Extended key Left Hyper

constexpr Keycode KEYCODE_RHYPER = SDLK_RHYPER; ///< Extended key Right Hyper

/// @}

/**
 * @defgroup CategoryMisc Miscellaneous
 *
 * SDL API functions that don't fit elsewhere.
 *
 * @{
 */

/**
 * Open a URL/URI in the browser or other appropriate external application.
 *
 * Open a URL in a separate, system-provided application. How this works will
 * vary wildly depending on the platform. This will likely launch what makes
 * sense to handle a specific URL's protocol (a web browser for `http://`,
 * etc), but it might also be able to launch file managers for directories and
 * other things.
 *
 * What happens when you open a URL varies wildly as well: your game window
 * may lose focus (and may or may not lose focus if your game was fullscreen
 * or grabbing input at the time). On mobile devices, your app will likely
 * move to the background or your process might be paused. Any given platform
 * may or may not handle a given URL.
 *
 * If this is unimplemented (or simply unavailable) for a platform, this will
 * fail with an error. A successful result does not mean the URL loaded, just
 * that we launched _something_ to handle it (or at least believe we did).
 *
 * All this to say: this function can be useful, but you should definitely
 * test it on every platform you target.
 *
 * @param url a valid URL/URI to open. Use `file:///full/path/to/file` for
 *            local files, if supported.
 * @returns true on success or false on failure; call SDL_GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool OpenURL(StringParam url) { return SDL_OpenURL(url); }

/// @}

/**
 * @defgroup CategoryProperties Object Properties
 *
 * A property is a variable that can be created and retrieved by name at
 * runtime.
 *
 * All properties are part of a property group (PropertiesBase). A property
 * group can be created with the CreateProperties() function or by simply
 * instantiating @ref Properties. It can be destroyed with the
 * PropertiesRef.reset(), but the Properties destructor probably will do what
 * you want to, automatically.
 *
 * Properties can be added to and retrieved from a property group through the
 * following functions:
 *
 * - PropertiesBase.SetPointer() and PropertiesBase.GetPointer() operate on
 * `void*` pointer types.
 * - PropertiesBase.SetString() and PropertiesBase.GetString() operate on string
 * types.
 * - PropertiesBase.SetNumber() and PropertiesBase.GetNumber() operate on signed
 * 64-bit integer types.
 * - PropertiesBase.SetFloat() and PropertiesBase.GetFloat() operate on floating
 * point types.
 * - PropertiesBase.SetBoolean() and PropertiesBase.GetBoolean() operate on
 * boolean types.
 *
 * Properties can be removed from a group by using PropertiesBase.Clear().
 * @{
 */

/**
 * SDL property type
 *
 * @since This enum is available since SDL 3.2.0.
 */
using PropertyType = SDL_PropertyType;

/**
 * @name Callbacks for PropertiesBase.SetPointerWithCleanup()
 * @{
 */

/**
 * A callback used to free resources when a property is deleted.
 *
 * This should release any resources associated with `value` that are no
 * longer needed.
 *
 * This callback is set per-property. Different properties in the same group
 * can have different cleanup callbacks.
 *
 * This callback will be called _during_ PropertiesBase.SetPointerWithCleanup if
 * the function fails for any reason.
 *
 * @param userdata an app-defined pointer passed to the callback.
 * @param value the pointer assigned to the property to clean up.
 *
 * @threadsafety This callback may fire without any locks held; if this is a
 *               concern, the app should provide its own locking.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa PropertiesBase.SetPointerWithCleanup
 */
using CleanupPropertyCallback = SDL_CleanupPropertyCallback;

/**
 * A callback used to free resources when a property is deleted.
 *
 * @sa CleanupPropertyCallback
 * @sa PropertiesBase.SetPointerWithCleanup()
 * @sa result-callback
 *
 * @cat result-callback
 */
using CleanupPropertyCB = std::function<void(void*)>;

/// @}
/**
 * @name Callbacks for PropertiesBase.Enumerate()
 * @{
 */

/**
 * A callback used to enumerate all the properties in a group of properties.
 *
 * This callback is called from PropertiesBase.Enumerate(), and is called once
 * per property in the set.
 *
 * @param userdata an app-defined pointer passed to the callback.
 * @param props the PropertiesBase that is being enumerated.
 * @param name the next property name in the enumeration.
 *
 * @threadsafety PropertiesBase.Enumerate holds a lock on `props` during this
 *               callback.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa PropertiesBase.Enumerate
 */
using EnumeratePropertiesCallback = SDL_EnumeratePropertiesCallback;

// Forward decl
struct PropertiesRef;

/**
 * A callback used to enumerate all the properties in a group of properties.
 *
 * This callback is called from PropertiesBase::Enumerate(), and is called once
 * per property in the set.
 *
 * @sa EnumeratePropertyCallback
 * @sa PropertiesBase::Enumerate()
 * @sa immediate-callback
 *
 * @cat immediate-callback
 */
using EnumeratePropertiesCB =
  std::function<void(PropertiesRef props, const char* name)>;

/// @}

// Forward decl
struct PropertiesLock;

// Forward decl
struct PropertiesBase;

// Forward decl
struct Properties;

constexpr PropertyType PROPERTY_TYPE_INVALID =
  SDL_PROPERTY_TYPE_INVALID; ///< INVALID

constexpr PropertyType PROPERTY_TYPE_POINTER =
  SDL_PROPERTY_TYPE_POINTER; ///< POINTER

constexpr PropertyType PROPERTY_TYPE_STRING =
  SDL_PROPERTY_TYPE_STRING; ///< STRING

constexpr PropertyType PROPERTY_TYPE_NUMBER =
  SDL_PROPERTY_TYPE_NUMBER; ///< NUMBER

constexpr PropertyType PROPERTY_TYPE_FLOAT = SDL_PROPERTY_TYPE_FLOAT; ///< FLOAT

constexpr PropertyType PROPERTY_TYPE_BOOLEAN =
  SDL_PROPERTY_TYPE_BOOLEAN; ///< BOOLEAN

/**
 * Wrap properties id
 *
 * A property is a variable that can be created and retrieved by name at
 * runtime.
 *
 * All properties are part of a property group (Properties). A property
 * group can be created with the Properties constructor and destroyed
 * with this goes out of scope.
 *
 * Properties can be added to and retrieved from a property group through the
 * following functions:
 *
 * - SetPointer() and GetPointer() operate on `void*`
 *   pointer types.
 * - SetString() and GetString() operate on string types.
 * - SetNumber() and GetNumber() operate on signed 64-bit
 *   integer types.
 * - SetFloat() and GetFloat() operate on floating point
 *   types.
 * - SetBoolean() and GetBoolean() operate on boolean
 *   types.
 *
 * Properties can be removed from a group by using SDL_ClearProperty.
 *
 * To create a new properties group use CreateProperties() or
 * Properties.Properties().
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa CreateProperties()
 * @sa Properties.Properties
 * @sa Properties
 * @sa PropertiesRef
 */
struct PropertiesBase : Resource<SDL_PropertiesID>
{
  using Resource::Resource;

  /**
   * Copy a group of properties.
   *
   * Copy all the properties from one group of properties to another, with the
   * exception of properties requiring cleanup (set using
   * PropertiesBase.SetPointerWithCleanup()), which will not be copied. Any
   * property that already exists on `dst` will be overwritten.
   *
   * @param dst the destination properties.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool CopyPropertiesTo(PropertiesBase& dst) const
  {
    return SDL_CopyProperties(get(), dst.get());
  }

  /**
   * Lock a group of properties.
   *
   * Obtain a multi-threaded lock for these properties. Other threads will wait
   * while trying to lock these properties until they are unlocked. Properties
   * must be unlocked before they are destroyed.
   *
   * The lock is automatically taken when setting individual properties, this
   * function is only needed when you want to set several properties atomically
   * or want to guarantee that properties being queried aren't freed in another
   * thread.
   *
   * @returns PropertiesLock on success or false on failure; call GetError() for
   *          more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesLock.Unlock
   */
  PropertiesLock Lock() &;

  /**
   * Set a pointer property in a group of properties with a cleanup
   * function that is called when the property is deleted.
   *
   * The cleanup function is also called if setting the property fails for any
   * reason.
   *
   * For simply setting basic data types, like numbers, bools, or strings, use
   * SetNumber(), SetBoolean(), or SetString()
   * instead, as those functions will handle cleanup on your behalf. This
   * function is only for more complex, custom data.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property, or NULL to delete the property.
   * @param cleanup the function to call when this property is deleted.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @sa result-callback
   *
   * @cat result-callback
   *
   */
  bool SetPointerWithCleanup(StringParam name,
                             void* value,
                             CleanupPropertyCB cleanup)
  {
    using Wrapper = CallbackWrapper<CleanupPropertyCB>;
    return SetPointerWithCleanup(std::move(name),
                                 value,
                                 &Wrapper::CallOnce,
                                 Wrapper::Wrap(std::move(cleanup)));
  }

  /**
   * Set a pointer property in a group of properties with a cleanup function
   * that is called when the property is deleted.
   *
   * The cleanup function is also called if setting the property fails for any
   * reason.
   *
   * For simply setting basic data types, like numbers, bools, or strings, use
   * PropertiesBase.SetNumber, PropertiesBase.SetBoolean, or
   * PropertiesBase.SetString instead, as those functions will handle cleanup on
   * your behalf. This function is only for more complex, custom data.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property, or nullptr to delete the
   *              property.
   * @param cleanup the function to call when this property is deleted, or
   *                nullptr if no cleanup is necessary.
   * @param userdata a pointer that is passed to the cleanup function.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetPointer
   * @sa PropertiesBase.SetPointer
   * @sa CleanupPropertyCallback
   */
  bool SetPointerWithCleanup(StringParam name,
                             void* value,
                             CleanupPropertyCallback cleanup,
                             void* userdata)
  {
    return SDL_SetPointerPropertyWithCleanup(
      get(), name, value, cleanup, userdata);
  }

  /**
   * Set a pointer property in a group of properties.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property, or nullptr to delete the
   *              property.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetPointer
   * @sa PropertiesBase.Has
   * @sa PropertiesBase.SetBoolean
   * @sa PropertiesBase.SetFloat
   * @sa PropertiesBase.SetNumber
   * @sa PropertiesBase.SetPointerWithCleanup
   * @sa PropertiesBase.SetString
   */
  bool SetPointer(StringParam name, void* value)
  {
    return SDL_SetPointerProperty(get(), name, value);
  }

  /**
   * Set a string property in a group of properties.
   *
   * This function makes a copy of the string; the caller does not have to
   * preserve the data after this call completes.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property, or nullptr to delete the
   *              property.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetString
   */
  bool SetString(StringParam name, StringParam value)
  {
    return SDL_SetStringProperty(get(), name, value);
  }

  /**
   * Set an integer property in a group of properties.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetNumber
   */
  bool SetNumber(StringParam name, Sint64 value)
  {
    return SDL_SetNumberProperty(get(), name, value);
  }

  /**
   * Set a floating point property in a group of properties.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetFloat
   */
  bool SetFloat(StringParam name, float value)
  {
    return SDL_SetFloatProperty(get(), name, value);
  }

  /**
   * Set a boolean property in a group of properties.
   *
   * @param name the name of the property to modify.
   * @param value the new value of the property.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetBoolean
   */
  bool SetBoolean(StringParam name, bool value)
  {
    return SDL_SetBooleanProperty(get(), name, value);
  }

  /**
   * Return whether a property exists.
   *
   * @param name the name of the property to query.
   * @returns true if the property exists, or false if it doesn't.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetType
   */
  bool Has(StringParam name) const { return SDL_HasProperty(get(), name); }

  /**
   * Get the type of a property.
   *
   * @param name the name of the property to query.
   * @returns the type of the property, or PROPERTY_TYPE_INVALID if it is
   *          not set.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.Has
   */
  PropertyType GetType(StringParam name) const
  {
    return SDL_GetPropertyType(get(), name);
  }

  /**
   * Get a pointer property from a group of properties.
   *
   * You can use SDL_GetPropertyType() to query whether the property exists and
   * is a pointer property.
   *
   * By convention, the names of properties that SDL exposes on objects will
   * start with "SDL.", and properties that SDL uses internally will start with
   * "SDL.internal.". These should be considered read-only and should not be
   * modified by applications.
   *
   * @param name the name of the property to query.
   * @param default_value the default value of the property.
   * @returns the value of the property, or `default_value` if it is not set or
   *          not a pointer property.
   *
   * @threadsafety It is safe to call this function from any thread, although
   *               the data returned is not protected and could potentially be
   *               freed if you call PropertiesBase.SetPointer() or
   *               PropertiesBase.Clear() on these properties from another
   *               thread. If you need to avoid this, use PropertiesBase.Lock()
   *               and PropertiesLock.Unlock().
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetBoolean
   * @sa PropertiesBase.GetFloat
   * @sa PropertiesBase.GetNumber
   * @sa PropertiesBase.GetType
   * @sa PropertiesBase.GetString
   * @sa PropertiesBase.Has
   * @sa PropertiesBase.SetPointer
   */
  void* GetPointer(StringParam name, void* default_value) const
  {
    return SDL_GetPointerProperty(get(), name, default_value);
  }

  /**
   * Get a string property from a group of properties.
   *
   * You can use SDL_GetPropertyType() to query whether the property exists and
   * is a string property.
   *
   * By convention, the names of properties that SDL exposes on objects will
   * start with "SDL.", and properties that SDL uses internally will start with
   * "SDL.internal.". These should be considered read-only and should not be
   * modified by applications.
   *
   * @param name the name of the property to query.
   * @param default_value the default value of the property.
   * @returns the value of the property, or `default_value` if it is not set or
   *          not a string property.
   *
   * @threadsafety It is safe to call this function from any thread, although
   *               the data returned is not protected and could potentially be
   *               freed if you call PropertiesBase.SetString() or
   *               PropertiesBase.Clear() on these properties from another
   *               thread. If you need to avoid this, use PropertiesBase.Lock()
   *               and PropertiesLock.Unlock().
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetType
   * @sa PropertiesBase.Has
   * @sa PropertiesBase.SetString
   */
  const char* GetString(StringParam name, StringParam default_value) const
  {
    return SDL_GetStringProperty(get(), name, default_value);
  }

  /**
   * Get a number property from a group of properties.
   *
   * You can use PropertiesBase.GetType() to query whether the property exists
   * and is a number property.
   *
   * By convention, the names of properties that SDL exposes on objects will
   * start with "SDL.", and properties that SDL uses internally will start with
   * "SDL.internal.". These should be considered read-only and should not be
   * modified by applications.
   *
   * @param name the name of the property to query.
   * @param default_value the default value of the property.
   * @returns the value of the property, or `default_value` if it is not set or
   *          not a number property.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetType
   * @sa PropertiesBase.Has
   * @sa PropertiesBase.SetNumber
   */
  Sint64 GetNumber(StringParam name, Sint64 default_value) const
  {
    return SDL_GetNumberProperty(get(), name, default_value);
  }

  /**
   * Get a floating point property from a group of properties.
   *
   * You can use PropertiesBase.GetType() to query whether the property exists
   * and is a floating point property.
   *
   * By convention, the names of properties that SDL exposes on objects will
   * start with "SDL.", and properties that SDL uses internally will start with
   * "SDL.internal.". These should be considered read-only and should not be
   * modified by applications.
   *
   * @param name the name of the property to query.
   * @param default_value the default value of the property.
   * @returns the value of the property, or `default_value` if it is not set or
   *          not a float property.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetType
   * @sa PropertiesBase.Has
   * @sa PropertiesBase.SetFloat
   */
  float GetFloat(StringParam name, float default_value) const
  {
    return SDL_GetFloatProperty(get(), name, default_value);
  }

  /**
   * Get a boolean property from a group of properties.
   *
   * You can use PropertiesBase.GetType() to query whether the property exists
   * and is a boolean property.
   *
   * By convention, the names of properties that SDL exposes on objects will
   * start with "SDL.", and properties that SDL uses internally will start with
   * "SDL.internal.". These should be considered read-only and should not be
   * modified by applications.
   *
   * @param name the name of the property to query.
   * @param default_value the default value of the property.
   * @returns the value of the property, or `default_value` if it is not set or
   *          not a boolean property.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.GetType
   * @sa PropertiesBase.Has
   * @sa PropertiesBase.SetBoolean
   */
  bool GetBoolean(StringParam name, bool default_value) const
  {
    return SDL_GetBooleanProperty(get(), name, default_value);
  }

  /**
   * Clear a property from a group of properties.
   *
   * @param name the name of the property to clear.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Clear(StringParam name) { return SDL_ClearProperty(get(), name); }

  /**
   * Enumerate the properties contained in a group of properties.
   *
   * @param outputIter an output iterator to be assigned to each property name
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   */
  template<std::output_iterator<const char*> IT>
  bool Enumerate(IT outputIter) const
  {
    return Enumerate(
      [&outputIter](auto props, const char name) { *outputIter++ = name; });
  }

  /**
   * Enumerate the properties contained in a group of properties.
   *
   * The callback function is called for each property in the group of
   * properties. The properties are locked during enumeration.
   *
   * @param callback the function to call for each property.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @cat immediate-callback
   *
   * @sa immediate-callback
   */
  bool Enumerate(EnumeratePropertiesCB callback) const;

  /**
   * Enumerate the properties contained in a group of properties.
   *
   * The callback function is called for each property in the group of
   * properties. The properties are locked during enumeration.
   *
   * @param callback the function to call for each property.
   * @param userdata a pointer that is passed to `callback`.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Enumerate(EnumeratePropertiesCallback callback, void* userdata) const
  {
    return SDL_EnumerateProperties(get(), callback, userdata);
  }

  /**
   * Returns the number of properties this has
   *
   * This uses Enumerate() internally, so might not be so fast
   */
  Uint64 GetCount() const;
};

/**
 * Handle to a non owned properties
 *
 * @cat resource
 *
 * @sa PropertiesBase
 * @sa Properties
 */
struct PropertiesRef : PropertiesBase
{
  using PropertiesBase::PropertiesBase;

  /**
   * Copy constructor.
   */
  constexpr PropertiesRef(const PropertiesRef& other)
    : PropertiesBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr PropertiesRef(PropertiesRef&& other)
    : PropertiesBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~PropertiesRef() = default;

  /**
   * Assignment operator.
   */
  PropertiesRef& operator=(PropertiesRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a group of properties.
   *
   * All properties are deleted and their cleanup functions will be called, if
   * any.
   *
   * @threadsafety This function should not be called while these properties are
   *               locked or other threads might be setting or getting values
   *               from these properties.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa CreateProperties
   * @sa Properties.Properties()
   */
  void reset(SDL_PropertiesID newResource = {})
  {
    SDL_DestroyProperties(release(newResource));
  }
};

/**
 * Handle to an owned properties
 *
 * @cat resource
 *
 * @sa PropertiesBase
 * @sa PropertiesRef
 */
struct Properties : PropertiesRef
{
  using PropertiesRef::PropertiesRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Properties(SDL_PropertiesID resource = {})
    : PropertiesRef(resource)
  {
  }

  constexpr Properties(const Properties& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Properties(Properties&& other) = default;

  /**
   * Create a group of properties.
   *
   * All properties are automatically destroyed when Quit() is called.
   *
   * @post an ID for a new group of properties, or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesRef.reset
   */
  Properties()
    : Properties(SDL_CreateProperties())
  {
  }

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Properties() { reset(); }

  /**
   * Assignment operator.
   */
  Properties& operator=(Properties other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Wrap the lock state for PropertiesBase
 *
 */
class PropertiesLock
{
  PropertiesRef properties;

  /**
   * @sa PropertiesBase.Lock()
   */
  explicit PropertiesLock(PropertiesRef properties)
    : properties(properties)
  {
  }

public:
  /// Default ctor
  constexpr PropertiesLock() = default;

  PropertiesLock(const PropertiesLock& other) = delete;

  /// Move ctor
  PropertiesLock(PropertiesLock&& other)
    : properties(std::move(other.properties))
  {
  }

  /**
   * @sa Unlock()
   */
  ~PropertiesLock() { Unlock(); }

  /// Assignment operator
  PropertiesLock& operator=(PropertiesLock other)
  {
    std::swap(properties, other.properties);
    return *this;
  }

  /**
   * Returns true if lock is active
   */
  constexpr operator bool() const { return bool(properties); }

  /**
   * Unlock a group of properties.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PropertiesBase.Lock
   */
  void Unlock() { return SDL_UnlockProperties(properties.release()); }

  friend class PropertiesBase;
};

/**
 * Get the global SDL properties.
 *
 * @returns a valid property ID on success or 0 on failure; call
 *          GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline PropertiesRef GetGlobalProperties() { return SDL_GetGlobalProperties(); }

/**
 * Create a group of properties.
 *
 * All properties are automatically destroyed when Quit() is called.
 *
 * @returns a valid Properties for a new group of properties, or false on
 *          failure; call GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Properties
 */
inline Properties CreateProperties()
{
  return Properties{SDL_CreateProperties()};
}

#pragma region impl
/// @}

inline bool PropertiesBase::Enumerate(EnumeratePropertiesCB callback) const
{
  return Enumerate(
    [](void* userdata, SDL_PropertiesID props, const char* name) {
      auto& f = *static_cast<EnumeratePropertiesCB*>(userdata);
      f(props, name);
    },
    &callback);
}

inline Uint64 PropertiesBase::GetCount() const
{
  Uint64 count = 0;
  if (Enumerate([&](auto, const char*) { count++; })) { return count; }
  return 0;
}

inline PropertiesLock PropertiesBase::Lock() &
{
  if (SDL_LockProperties(get())) return PropertiesLock{get()};
  return {};
}

#pragma endregion impl

/**
 * @defgroup CategoryRect Rectangle Functions
 *
 * Some helper functions for managing rectangles and 2D points, in both
 * integer and floating point versions.
 * @{
 */

// Forward decl
struct FPoint;

// Forward decl
struct Rect;

// Forward decl
struct FRect;

/**
 * @brief The structure that defines a point (using integers)
 *
 * Based on https://github.com/libSDL2pp/libSDL2pp/blob/master/SDL2pp/Point.hh
 *
 * @cat wrap-extending-struct
 *
 * @sa wrap-extending-struct
 */
struct Point : SDL_Point
{
  /**
   * Wraps Point.
   *
   * @param p the value to be wrapped
   */
  constexpr Point(const SDL_Point& p = {})
    : SDL_Point(p)
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param x the value for x.
   * @param y the value for y.
   */
  constexpr Point(int x, int y)
    : SDL_Point{x, y}
  {
  }

  /**
   * Explicit conversion from FPoint
   */
  constexpr explicit Point(const SDL_FPoint& p)
    : SDL_Point{int(p.x), int(p.y)}
  {
  }

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const Point& other) const = default;

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return x != 0 && y != 0; }

  /**
   * @brief Get x coordinate
   *
   * @returns x coordinate
   *
   */
  constexpr int GetX() const { return x; }

  /**
   * Set the x coordinate.
   *
   * @param newX the new x coordinate.
   * @returns Reference to self.
   */
  constexpr Point& SetX(int newX)
  {
    x = newX;
    return *this;
  }

  /**
   * @brief Get y coordinate
   *
   * @returns y coordinate
   *
   */
  constexpr int GetY() const { return y; }

  /**
   * Set the y.
   *
   * @param newY the new y value.
   * @returns Reference to self.
   */
  constexpr Point& SetY(int newY)
  {
    y = newY;
    return *this;
  }

  /**
   * Determine whether a point resides inside a rectangle.
   *
   * A point is considered part of a rectangle if both `p` and `r` are not NULL,
   * and `p`'s x and y coordinates are >= to the rectangle's top left corner,
   * and < the rectangle's x+w and y+h. So a 1x1 rectangle considers point (0,0)
   * as "inside" and (0,1) as not.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @param r the rectangle to test.
   * @returns true if this is contained by `r`, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsInRect(const Rect& r) const;

  /**
   * @brief Get point's memberwise negation
   *
   * @returns New Point representing memberwise negation
   *
   */
  constexpr Point operator-() const { return Point(-x, -y); }

  /**
   * @brief Get point's memberwise addition with another point
   *
   * @param[in] other Point to add
   *
   * @returns New Point representing memberwise addition with another point
   *
   */
  constexpr Point operator+(const Point& other) const
  {
    return Point(x + other.x, y + other.y);
  }

  /**
   * @brief Get point's memberwise subtraction with another point
   *
   * @param[in] other Point to subtract
   *
   * @returns New Point representing memberwise subtraction of another point
   *
   */
  constexpr Point operator-(const Point& other) const
  {
    return Point(x - other.x, y - other.y);
  }

  /**
   * @brief Get point's memberwise division by an integer
   *
   * @param[in] value Divisor
   *
   * @returns New Point representing memberwise division of
   *          point by an integer
   *
   */
  constexpr Point operator/(int value) const
  {
    return Point(x / value, y / value);
  }

  /**
   * @brief Get point's memberwise division by another point
   *
   * @param[in] other Divisor
   *
   * @returns New Point representing memberwise division of
   *          point by another point
   *
   */
  constexpr Point operator/(const Point& other) const
  {
    return Point(x / other.x, y / other.y);
  }

  /**
   * @brief Get point's memberwise remainder from division
   *        by an integer
   *
   * @param[in] value Divisor
   *
   * @returns New Point representing memberwise remainder
   *          from division by an integer
   *
   */
  constexpr Point operator%(int value) const
  {
    return Point(x % value, y % value);
  }

  /**
   * @brief Get point's memberwise remainder from division
   *        by another point
   *
   * @param[in] other Divisor
   *
   * @returns New Point representing memberwise remainder
   *          from division by another point
   *
   */
  constexpr Point operator%(const Point& other) const
  {
    return Point(x % other.x, y % other.y);
  }

  /**
   * @brief Get point's memberwise multiplication by an
   *        integer
   *
   * @param[in] value Multiplier
   *
   * @returns New Point representing memberwise multiplication
   *          of point by an integer
   *
   */
  constexpr Point operator*(int value) const
  {
    return Point(x * value, y * value);
  }

  /**
   * @brief Get point's memberwise multiplication by another
   *        point
   *
   * @param[in] other Multiplier
   *
   * @returns New Point representing memberwise multiplication
   *          of point by another point
   *
   */
  constexpr Point operator*(const Point& other) const
  {
    return Point(x * other.x, y * other.y);
  }

  /**
   * @brief Memberwise add another point
   *
   * @param[in] other Point to add to the current one
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator+=(const Point& other)
  {
    x += other.x;
    y += other.y;
    return *this;
  }

  /**
   * @brief Memberwise subtract another point
   *
   * @param[in] other Point to subtract from the current one
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator-=(const Point& other)
  {
    x -= other.x;
    y -= other.y;
    return *this;
  }

  /**
   * @brief Memberwise divide by an integer
   *
   * @param[in] value Divisor
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator/=(int value)
  {
    x /= value;
    y /= value;
    return *this;
  }

  /**
   * @brief Memberwise divide by another point
   *
   * @param[in] other Divisor
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator/=(const Point& other)
  {
    x /= other.x;
    y /= other.y;
    return *this;
  }

  /**
   * @brief Memberwise remainder from division by an integer
   *
   * @param[in] value Divisor
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator%=(int value)
  {
    x %= value;
    y %= value;
    return *this;
  }

  /**
   * @brief Memberwise remainder from division by another
   *        point
   *
   * @param[in] other Divisor
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator%=(const Point& other)
  {
    x %= other.x;
    y %= other.y;
    return *this;
  }

  /**
   * @brief Memberwise multiply by an integer
   *
   * @param[in] value Multiplier
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator*=(int value)
  {
    x *= value;
    y *= value;
    return *this;
  }

  /**
   * @brief Memberwise multiply by another point
   *
   * @param[in] other Multiplier
   *
   * @returns Reference to self
   *
   */
  constexpr Point& operator*=(const Point& other)
  {
    x *= other.x;
    y *= other.y;
    return *this;
  }

  /**
   * @brief Get a point with coordinates modified so it fits
   *        into a given rect
   *
   * @param[in] rect Rectangle to clamp with
   *
   * @returns Clamped point
   *
   */
  constexpr Point GetClamped(const Rect& rect) const;

  /**
   * @brief Clamp point coordinates to make it fit into a
   *        given rect
   *
   * @param[in] rect Rectangle to clamp with
   *
   * @returns Reference to self
   *
   */
  constexpr Point& Clamp(const Rect& rect);

  /**
   * @brief Get a point wrapped within a specified rect
   *
   * @param[in] rect Rectangle to wrap with
   *
   * @returns Wrapped point
   *
   */
  constexpr Point GetWrapped(const Rect& rect) const;

  /**
   * @brief Wrap point coordinates within a specified rect
   *
   * @param[in] rect Rectangle to wrap with
   *
   * @returns Reference to self
   *
   */
  constexpr Point& Wrap(const Rect& rect);

  /**
   * @brief Converts to FPoint
   *
   * @return FPoint
   */
  constexpr operator FPoint() const;
};

/**
 * @brief The structure that defines a point (using floating point values).
 *
 * @cat wrap-extending-struct
 *
 * @sa wrap-extending-struct
 */
struct FPoint : SDL_FPoint
{
  /**
   * Wraps FPoint.
   *
   * @param p the value to be wrapped
   */
  constexpr FPoint(const SDL_FPoint& p = {})
    : SDL_FPoint(p)
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param x the value for x.
   * @param y the value for y.
   */
  constexpr FPoint(float x, float y)
    : SDL_FPoint{x, y}
  {
  }

  /**
   * Default comparison operator
   */
  constexpr auto operator<=>(const FPoint& other) const = default;

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return x != 0 && y != 0; }

  /**
   * Get the x coordinate.
   *
   * @returns current x value.
   */
  constexpr float GetX() const { return x; }

  /**
   * Set the x coordinate.
   *
   * @param newX the new x coordinate.
   * @returns Reference to self.
   */
  constexpr FPoint& SetX(float newX)
  {
    x = newX;
    return *this;
  }

  /**
   * Get the y coordinate.
   *
   * @returns current y coordinate.
   */
  constexpr float GetY() const { return y; }

  /**
   * Set the y coordinate.
   *
   * @param newY the new y coordinate.
   * @returns Reference to self.
   */
  constexpr FPoint& SetY(float newY)
  {
    y = newY;
    return *this;
  }

  /**
   * Determine whether a point resides inside a floating point rectangle.
   *
   * A point is considered part of a rectangle if both `p` and `r` are not NULL,
   * and `p`'s x and y coordinates are >= to the rectangle's top left corner,
   * and <= the rectangle's x+w and y+h. So a 1x1 rectangle considers point
   * (0,0) and (0,1) as "inside" and (0,2) as not.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @param r the rectangle to test.
   * @returns true if this is contained by `r`, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool IsInRect(const FRect& r) const;

  /**
   * @brief Get point's memberwise negation
   *
   * @returns New Point representing memberwise negation
   *
   */
  constexpr FPoint operator-() const { return FPoint(-x, -y); }

  /**
   * @brief Get point's memberwise addition with another point
   *
   * @param[in] other Point to add
   *
   * @returns New Point representing memberwise addition with another point
   *
   */
  constexpr FPoint operator+(const FPoint& other) const
  {
    return FPoint(x + other.x, y + other.y);
  }

  /**
   * @brief Get point's memberwise subtraction with another point
   *
   * @param[in] other Point to subtract
   *
   * @returns New Point representing memberwise subtraction of another point
   *
   */
  constexpr FPoint operator-(const FPoint& other) const
  {
    return FPoint(x - other.x, y - other.y);
  }

  /**
   * @brief Get point's memberwise division by an float
   *
   * @param[in] value Divisor
   *
   * @returns New Point representing memberwise division of
   *          point by an float
   *
   */
  constexpr FPoint operator/(float value) const
  {
    return FPoint(x / value, y / value);
  }

  /**
   * @brief Get point's memberwise division by another point
   *
   * @param[in] other Divisor
   *
   * @returns New Point representing memberwise division of
   *          point by another point
   *
   */
  constexpr FPoint operator/(const FPoint& other) const
  {
    return FPoint(x / other.x, y / other.y);
  }

  /**
   * @brief Get point's memberwise multiplication by an
   *        float
   *
   * @param[in] value Multiplier
   *
   * @returns New Point representing memberwise multiplication
   *          of point by an float
   *
   */
  constexpr FPoint operator*(float value) const
  {
    return FPoint(x * value, y * value);
  }

  /**
   * @brief Get point's memberwise multiplication by another
   *        point
   *
   * @param[in] other Multiplier
   *
   * @returns New Point representing memberwise multiplication
   *          of point by another point
   *
   */
  constexpr FPoint operator*(const FPoint& other) const
  {
    return FPoint(x * other.x, y * other.y);
  }

  /**
   * @brief Memberwise add another point
   *
   * @param[in] other Point to add to the current one
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& operator+=(const Point& other)
  {
    x += other.x;
    y += other.y;
    return *this;
  }

  /**
   * @brief Memberwise subtract another point
   *
   * @param[in] other Point to subtract from the current one
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& operator-=(const Point& other)
  {
    x -= other.x;
    y -= other.y;
    return *this;
  }

  /**
   * @brief Memberwise divide by an float
   *
   * @param[in] value Divisor
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& operator/=(float value)
  {
    x /= value;
    y /= value;
    return *this;
  }

  /**
   * @brief Memberwise divide by another point
   *
   * @param[in] other Divisor
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& operator/=(const Point& other)
  {
    x /= other.x;
    y /= other.y;
    return *this;
  }

  /**
   * @brief Memberwise multiply by an float
   *
   * @param[in] value Multiplier
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& operator*=(float value)
  {
    x *= value;
    y *= value;
    return *this;
  }

  /**
   * @brief Memberwise multiply by another point
   *
   * @param[in] other Multiplier
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& operator*=(const FPoint& other)
  {
    x *= other.x;
    y *= other.y;
    return *this;
  }

  /**
   * @brief Get a point with coordinates modified so it fits
   *        into a given rect
   *
   * @param[in] rect Rectangle to clamp with
   *
   * @returns Clamped point
   *
   */
  constexpr FPoint GetClamped(const FRect& rect) const;

  /**
   * @brief Clamp point coordinates to make it fit into a
   *        given rect
   *
   * @param[in] rect Rectangle to clamp with
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& Clamp(const FRect& rect);

  /**
   * @brief Get a point wrapped within a specified rect
   *
   * @param[in] rect Rectangle to wrap with
   *
   * @returns Wrapped point
   *
   */
  constexpr FPoint GetWrapped(const FRect& rect) const;

  /**
   * @brief Wrap point coordinates within a specified rect
   *
   * @param[in] rect Rectangle to wrap with
   *
   * @returns Reference to self
   *
   */
  constexpr FPoint& Wrap(const FRect& rect);
};

/**
 * @brief A rectangle, with the origin at the upper left (using integers).
 *
 * @cat wrap-extending-struct
 *
 * @sa wrap-extending-struct
 */
struct Rect : SDL_Rect
{
  /**
   * Wraps Rect.
   *
   * @param r the value to be wrapped
   */
  constexpr Rect(const SDL_Rect& r = {})
    : SDL_Rect(r)
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param x the left x.
   * @param y the top y.
   * @param w the width.
   * @param h the height.
   */
  constexpr Rect(int x, int y, int w, int h)
    : SDL_Rect({x, y, w, h})
  {
  }

  /**
   * Construct from offset and size
   *
   * @param corner the top-left corner
   * @param size the size
   */
  constexpr Rect(const SDL_Point& corner, const SDL_Point& size)
    : Rect{corner.x, corner.y, size.x, size.y}
  {
  }

  /**
   * @sa Equal()
   */
  constexpr bool operator==(const Rect& other) const { return Equal(other); }

  /**
   * @sa Empty()
   */
  constexpr operator bool() const { return !Empty(); }

  /**
   * @brief Get left x coordinate.
   *
   * @returns coordinate of the left x
   *
   */
  constexpr int GetX() const { return x; }

  /**
   * Set the left x coordinate.
   *
   * @param newX the new left x.
   * @returns Reference to self.
   */
  constexpr Rect& SetX(int newX)
  {
    x = newX;
    return *this;
  }

  /**
   * @brief Get top y coordinate.
   *
   * @returns coordinate of the top y.
   *
   */
  constexpr int GetY() const { return y; }

  /**
   * Set the top y coordinate.
   *
   * @param newY the new top y.
   * @returns Reference to self.
   */
  constexpr Rect& SetY(int newY)
  {
    y = newY;
    return *this;
  }

  /**
   * @brief Get width of the rect
   *
   * @returns Width of the rect
   *
   */
  constexpr int GetW() const { return w; }

  /**
   * Set the width of the rect.
   *
   * @param newW the new width.
   * @returns Reference to self.
   */
  constexpr Rect& SetW(int newW)
  {
    w = newW;
    return *this;
  }

  /**
   * @brief Get height of the rect
   *
   * @returns Height of the rect
   *
   */
  constexpr int GetH() const { return h; }

  /**
   * Set the height of the rect.
   *
   * @param newH the new height.
   * @returns Reference to self.
   */
  constexpr Rect& SetH(int newH)
  {
    h = newH;
    return *this;
  }

  /**
   * Calculate a minimal rectangle enclosing a set of points.
   *
   * If `clip` is not NULL then only points inside of the clipping rectangle are
   * considered.
   *
   * @param points a span of SDL_Point structures representing points to be
   *               enclosed.
   * @param clip an SDL_Rect used for clipping or std::nullopt to enclose all
   *             points.
   * @returns a SDL_Rect structure filled in with the minimal enclosing
   * rectangle or std::nullopt if all the points were outside of the
   * clipping rectangle.
   *
   * @since This function is available since SDL 3.2.0.
   */
  static std::optional<Rect> GetEnclosingPoints(
    SpanRef<const SDL_Point> points,
    OptionalRef<const SDL_Rect> clip = std::nullopt)
  {
    Rect result;
    if (SDL_GetRectEnclosingPoints(
          points.data(), points.size(), clip, &result)) {
      return result;
    }
    return std::nullopt;
  }

  /**
   * @brief Construct the rect from given center coordinates, width and height
   *
   * @param[in] cx X coordinate of the rectangle center
   * @param[in] cy Y coordinate of the rectangle center
   * @param[in] w Width of the rectangle
   * @param[in] h Height of the rectangle
   *
   */
  static constexpr Rect FromCenter(int cx, int cy, int w, int h)
  {
    return Rect(cx - w / 2, cy - h / 2, w, h);
  }

  /**
   * @brief Construct the rect from given center coordinates and size
   *
   * @param[in] center Coordinates of the rectangle center
   * @param[in] size Dimensions of the rectangle
   *
   */
  static constexpr Rect FromCenter(const Point& center, const Point& size)
  {
    return Rect(center - size / 2, size);
  }

  /**
   * @brief Construct the rect from given corners coordinates
   *
   * @param[in] x1 X coordinate of the top left rectangle corner
   * @param[in] y1 Y coordinate of the top left rectangle corner
   * @param[in] x2 X coordinate of the bottom right rectangle corner
   * @param[in] y2 Y coordinate of the bottom right rectangle corner
   *
   */
  static constexpr Rect FromCorners(int x1, int y1, int x2, int y2)
  {
    return Rect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
  }

  /**
   * @brief Construct the rect from given centers coordinates
   *
   * @param[in] p1 Coordinates of the top left rectangle corner
   * @param[in] p2 Coordinates of the bottom right rectangle corner
   *
   */
  static constexpr Rect FromCorners(const Point& p1, const Point& p2)
  {
    return Rect(p1, p2 - p1 + Point(1, 1));
  }

  /**
   * @brief Get X coordinate of the rect second corner
   *
   * @returns X coordinate of the rect second corner
   *
   */
  constexpr int GetX2() const { return x + w - 1; }

  /**
   * @brief Set X coordinate of the rect second corner
   *
   * @param[in] x2 New X coordinate value
   *
   * This modifies rectangle width internally
   *
   * @returns Reference to self
   *
   */
  constexpr Rect& SetX2(int x2)
  {
    w = x2 - x + 1;
    return *this;
  }

  /**
   * @brief Get Y coordinate of the rect second corner
   *
   * @returns Y coordinate of the rect second corner
   *
   */
  constexpr int GetY2() const { return y + h - 1; }

  /**
   * @brief Set Y coordinate of the rect second corner
   *
   * @param[in] y2 New Y coordinate value
   *
   * This modifies rectangle height internally
   *
   * @returns Reference to self
   *
   */
  constexpr Rect& SetY2(int y2)
  {
    h = y2 - y + 1;
    return *this;
  }

  /**
   * @brief Get top left corner of the rect
   *
   * @returns Top left corner of the rect
   *
   */
  constexpr Point GetTopLeft() const { return Point(x, y); }

  /**
   * @brief Get top right corner of the rect
   *
   * @returns Top right corner of the rect
   *
   */
  constexpr Point GetTopRight() const { return Point(GetX2(), y); }

  /**
   * @brief Get bottom left corner of the rect
   *
   * @returns bottom left corner of the rect
   *
   */
  constexpr Point GetBottomLeft() const { return Point(x, GetY2()); }

  /**
   * @brief Get bottom right corner of the rect
   *
   * @returns Bottom right corner of the rect
   *
   */
  constexpr Point GetBottomRight() const { return Point(GetX2(), GetY2()); }

  /**
   * @brief Get size of the rect
   *
   * @returns Size of the rect
   *
   */
  constexpr Point GetSize() const { return Point(w, h); }

  /**
   * @brief Get centroid of the rect
   *
   * @returns Centroid of the rect
   *
   */
  constexpr Point GetCentroid() const { return Point(x + w / 2, y + h / 2); }

  /**
   * Calculate the intersection of a rectangle and line segment.
   *
   * This function is used to clip a line segment to a rectangle. A line segment
   * contained entirely within the rectangle or that does not intersect will
   * remain unchanged. A line segment that crosses the rectangle at either or
   * both ends will be clipped to the boundary of the rectangle and the new
   * coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.
   *
   * @param X1 a pointer to the starting X-coordinate of the line.
   * @param Y1 a pointer to the starting Y-coordinate of the line.
   * @param X2 a pointer to the ending X-coordinate of the line.
   * @param Y2 a pointer to the ending Y-coordinate of the line.
   * @returns true if there is an intersection, false otherwise.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool IntersectLine(int* X1, int* Y1, int* X2, int* Y2) const
  {
    return SDL_GetRectAndLineIntersection(this, X1, Y1, X2, Y2);
  }

  /**
   * @brief Calculate the intersection of a rectangle and line segment
   *
   * @param[in,out] p1 Starting coordinates of the line
   * @param[in,out] p2 Ending coordinates of the line
   *
   * @returns True if there is an intersection, false otherwise
   *
   * This function is used to clip a line segment to a
   * rectangle. A line segment contained entirely within the
   * rectangle or that does not intersect will remain unchanged.
   * A line segment that crosses the rectangle at either or both
   * ends will be clipped to the boundary of the rectangle and
   * the new coordinates saved in p1 and/or p2 as necessary.
   *
   */
  bool IntersectLine(Point* p1, Point* p2) const
  {
    return IntersectLine(p1 ? &p1->x : nullptr,
                         p1 ? &p1->y : nullptr,
                         p2 ? &p2->x : nullptr,
                         p2 ? &p2->y : nullptr);
  }

  /**
   * Convert an SDL_Rect to SDL_FRect
   *
   * @return A FRect filled in with the floating point representation of
   *              `rect`.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr operator FRect() const;

  /**
   * @sa operator FRect()
   */
  constexpr operator SDL_FRect() const { return operator SDL_FRect(); }

  /**
   * Determine whether a rectangle has no area.
   *
   * A rectangle is considered "empty" for this function if `r` is NULL, or if
   * `r`'s width and/or height are <= 0.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @returns true if the rectangle is "empty", false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool Empty() const { return SDL_RectEmpty(this); }

  /**
   * Determine whether two rectangles are equal.
   *
   * Rectangles are considered equal if both are not NULL and each of their x,
   * y, width and height match.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @param other the second rectangle to test.
   * @returns true if the rectangles are equal, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool Equal(const Rect& other) const
  {
    return SDL_RectsEqual(this, &other);
  }

  /**
   * @brief Check whether the rect contains given point
   *
   * @param p Point to check
   *
   * @returns True if the point is contained in the rect
   *
   */
  constexpr bool Contains(const Point& p) const
  {
    return SDL_PointInRect(&p, this);
  }

  /**
   * @brief Check whether the rect contains given point
   *
   * @param other Point to check
   *
   * @returns True if the point is contained in the rect
   *
   */
  constexpr bool Contains(const Rect& other) const
  {
    return GetUnion(other) == *this;
  }

  /**
   * Determine whether two rectangles intersect.
   *
   * @param other an SDL_Rect structure representing the second rectangle.
   * @returns true if there is an intersection, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetIntersection()
   */
  bool HasIntersection(const Rect& other) const
  {
    return SDL_HasRectIntersection(this, &other);
  }

  /**
   * Calculate the intersection of two rectangles.
   *
   * If `result` is NULL then this function will return false.
   *
   * @param other an SDL_Rect structure representing the second rectangle.
   * @returns an SDL_Rect structure filled in with the intersection of
   *               if there is intersection, std::nullopt otherwise.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa HasIntersection()
   */
  constexpr std::optional<Rect> GetIntersection(const Rect& other) const
  {
    if (Rect result; SDL_GetRectIntersection(this, &other, &result)) {
      return result;
    }
    return std::nullopt;
  }

  /**
   * Calculate the union of two rectangles.
   *
   * @param other an SDL_Rect structure representing the second rectangle.
   * @returns Rect representing union of two rectangles
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr std::optional<Rect> GetUnion(const Rect& other) const
  {
    if (Rect result; SDL_GetRectUnion(this, &other, &result)) return result;
    return std::nullopt;
  }

  /**
   * @brief Get a rect extended by specified amount of pixels
   *
   * @param[in] amount Number of pixels to extend by
   *
   * @returns Extended rect
   *
   */
  constexpr Rect GetExtension(unsigned int amount) const
  {
    Rect r = *this;
    r.Extend(amount);
    return r;
  }

  /**
   * @brief Get a rect extended by specified amount of pixels
   *
   * @param[in] hAmount Number of pixels to extend by
   *                    in horizontal direction
   * @param[in] vAmount Number of pixels to extend by
   *                    in vertical direction
   *
   * @returns Extended rect
   *
   */
  constexpr Rect GetExtension(unsigned int hAmount, unsigned int vAmount) const
  {
    Rect r = *this;
    r.Extend(hAmount, vAmount);
    return r;
  }

  /**
   * @brief Extend a rect by specified amount of pixels
   *
   * @param[in] amount Number of pixels to extend by
   *
   * @returns Reference to self
   *
   */
  constexpr Rect& Extend(unsigned int amount) { return Extend(amount, amount); }

  /**
   * @brief Extend a rect by specified amount of pixels
   *
   * @param[in] hAmount Number of pixels to extend by
   *                    in horizontal direction
   * @param[in] vAmount Number of pixels to extend by
   *                    in vertical direction
   *
   * @returns Reference to self
   *
   */
  constexpr Rect& Extend(unsigned int hAmount, unsigned int vAmount)
  {
    x -= hAmount;
    y -= vAmount;
    w += hAmount * 2;
    h += vAmount * 2;
    return *this;
  }

  /**
   * @brief Get rectangle moved by a given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Moved rectangle
   *
   */
  constexpr Rect operator+(const Point& offset) const
  {
    return Rect(x + offset.x, y + offset.y, w, h);
  }

  /**
   * @brief Get rectangle moved by an opposite of given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Moved rectangle
   *
   */
  constexpr Rect operator-(const Point& offset) const
  {
    return Rect(x - offset.x, y - offset.y, w, h);
  }

  /**
   * @brief Move by then given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Reference to self
   *
   */
  constexpr Rect& operator+=(const Point& offset)
  {
    x += offset.x;
    y += offset.y;
    return *this;
  }

  /**
   * @brief Move by an opposite of the given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Reference to self
   *
   */
  constexpr Rect& operator-=(const Point& offset)
  {
    x -= offset.x;
    y -= offset.y;
    return *this;
  }
};

/**
 * @brief A rectangle, with the origin at the upper left (using floats).
 *
 * @cat wrap-extending-struct
 *
 * @sa wrap-extending-struct
 */
struct FRect : SDL_FRect
{
  /**
   * Wraps FRect.
   *
   * @param r the value to be wrapped
   */
  constexpr FRect(const SDL_FRect& r = {})
    : SDL_FRect{r}
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param x the left x.
   * @param y the top y.
   * @param w the width.
   * @param h the height.
   */
  constexpr FRect(float x, float y, float w, float h)
    : SDL_FRect{x, y, w, h}
  {
  }

  /// Constructs from top-left corner plus size
  constexpr FRect(const SDL_FPoint& corner, const SDL_FPoint& size)
    : FRect{corner.x, corner.y, size.x, size.y}
  {
  }

  /**
   * @sa Equal()
   */
  constexpr bool operator==(const FRect& other) const { return Equal(other); }

  /**
   * @sa Empty()
   */
  constexpr operator bool() const { return !Empty(); }

  /**
   * @brief Get left x coordinate.
   *
   * @returns coordinate of the left x
   *
   */
  constexpr float GetX() const { return x; }

  /**
   * Set the left x coordinate.
   *
   * @param newX the new left x.
   * @returns Reference to self.
   */
  constexpr FRect& SetX(float newX)
  {
    x = newX;
    return *this;
  }

  /**
   * @brief Get top y coordinate.
   *
   * @returns coordinate of the top y.
   *
   */
  constexpr float GetY() const { return y; }

  /**
   * Set the top y coordinate.
   *
   * @param newY the new top y.
   * @returns Reference to self.
   */
  constexpr FRect& SetY(float newY)
  {
    y = newY;
    return *this;
  }

  /**
   * @brief Get width of the rect
   *
   * @returns Width of the rect
   *
   */
  constexpr float GetW() const { return w; }

  /**
   * Set the width of the rect.
   *
   * @param newW the new width.
   * @returns Reference to self.
   */
  constexpr FRect& SetW(float newW)
  {
    w = newW;
    return *this;
  }

  /**
   * @brief Get height of the rect
   *
   * @returns Height of the rect
   *
   */
  constexpr float GetH() const { return h; }

  /**
   * Set the height of the rect.
   *
   * @param newH the new height.
   * @returns Reference to self.
   */
  constexpr FRect& SetH(float newH)
  {
    h = newH;
    return *this;
  }

  /**
   * Calculate a minimal rectangle enclosing a set of points.
   *
   * If `clip` is not NULL then only points inside of the clipping rectangle are
   * considered.
   *
   * @param points a span of SDL_Point structures representing points to be
   *               enclosed.
   * @param clip an SDL_Rect used for clipping or std::nullopt to enclose all
   *             points.
   * @returns a FRect structure filled in with the minimal enclosing
   *          rectangle or std::nullopt if all the points were outside of
   * the clipping rectangle.
   *
   * @since This function is available since SDL 3.2.0.
   */
  static std::optional<FRect> GetEnclosingPoints(
    SpanRef<const SDL_FPoint> points,
    OptionalRef<const SDL_FRect> clip = std::nullopt)
  {
    FRect result;
    if (SDL_GetRectEnclosingPointsFloat(
          points.data(), points.size(), clip, &result)) {
      return result;
    }
    return std::nullopt;
  }

  /**
   * @brief Construct the rect from given center coordinates, width and height
   *
   * @param[in] cx X coordinate of the rectangle center
   * @param[in] cy Y coordinate of the rectangle center
   * @param[in] w Width of the rectangle
   * @param[in] h Height of the rectangle
   *
   */
  static constexpr FRect FromCenter(float cx, float cy, float w, float h)
  {
    return FRect(cx - w / 2, cy - h / 2, w, h);
  }

  /**
   * @brief Construct the rect from given center coordinates and size
   *
   * @param[in] center Coordinates of the rectangle center
   * @param[in] size Dimensions of the rectangle
   *
   */
  static constexpr FRect FromCenter(const FPoint& center, const FPoint& size)
  {
    return FRect(center - size / 2, size);
  }

  /**
   * @brief Construct the rect from given corners coordinates
   *
   * @param[in] x1 X coordinate of the top left rectangle corner
   * @param[in] y1 Y coordinate of the top left rectangle corner
   * @param[in] x2 X coordinate of the bottom right rectangle corner
   * @param[in] y2 Y coordinate of the bottom right rectangle corner
   *
   */
  static constexpr FRect FromCorners(float x1, float y1, float x2, float y2)
  {
    return FRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
  }

  /**
   * @brief Construct the rect from given centers coordinates
   *
   * @param[in] p1 Coordinates of the top left rectangle corner
   * @param[in] p2 Coordinates of the bottom right rectangle corner
   *
   */
  static constexpr FRect FromCorners(const FPoint& p1, const FPoint& p2)
  {
    return FRect(p1, p2 - p1 + FPoint(1, 1));
  }

  /**
   * @brief Get X coordinate of the rect second corner
   *
   * @returns X coordinate of the rect second corner
   *
   */
  constexpr float GetX2() const { return x + w - 1; }

  /**
   * @brief Set X coordinate of the rect second corner
   *
   * @param[in] x2 New X coordinate value
   *
   * This modifies rectangle width internally
   *
   * @returns Reference to self
   *
   */
  constexpr FRect& SetX2(float x2)
  {
    w = x2 - x + 1;
    return *this;
  }

  /**
   * @brief Get Y coordinate of the rect second corner
   *
   * @returns Y coordinate of the rect second corner
   *
   */
  constexpr float GetY2() const { return y + h - 1; }

  /**
   * @brief Set Y coordinate of the rect second corner
   *
   * @param[in] y2 New Y coordinate value
   *
   * This modifies rectangle height internally
   *
   * @returns Reference to self
   *
   */
  constexpr FRect& SetY2(float y2)
  {
    h = y2 - y + 1;
    return *this;
  }

  /**
   * @brief Get top left corner of the rect
   *
   * @returns Top left corner of the rect
   *
   */
  constexpr FPoint GetTopLeft() const { return FPoint(x, y); }

  /**
   * @brief Get top right corner of the rect
   *
   * @returns Top right corner of the rect
   *
   */
  constexpr FPoint GetTopRight() const { return FPoint(GetX2(), y); }

  /**
   * @brief Get bottom left corner of the rect
   *
   * @returns bottom left corner of the rect
   *
   */
  constexpr FPoint GetBottomLeft() const { return FPoint(x, GetY2()); }

  /**
   * @brief Get bottom right corner of the rect
   *
   * @returns Bottom right corner of the rect
   *
   */
  constexpr FPoint GetBottomRight() const { return FPoint(GetX2(), GetY2()); }

  /**
   * @brief Get size of the rect
   *
   * @returns Size of the rect
   *
   */
  constexpr FPoint GetSize() const { return FPoint(w, h); }

  /**
   * @brief Get centroid of the rect
   *
   * @returns Centroid of the rect
   *
   */
  constexpr FPoint GetCentroid() const { return FPoint(x + w / 2, y + h / 2); }

  /**
   * Calculate the intersection of a rectangle and line segment with float
   * precision.
   *
   * This function is used to clip a line segment to a rectangle. A line segment
   * contained entirely within the rectangle or that does not intersect will
   * remain unchanged. A line segment that crosses the rectangle at either or
   * both ends will be clipped to the boundary of the rectangle and the new
   * coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.
   *
   * @param X1 a pointer to the starting X-coordinate of the line.
   * @param Y1 a pointer to the starting Y-coordinate of the line.
   * @param X2 a pointer to the ending X-coordinate of the line.
   * @param Y2 a pointer to the ending Y-coordinate of the line.
   * @returns true if there is an intersection, false otherwise.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool IntersectLine(float* X1, float* Y1, float* X2, float* Y2) const
  {
    return SDL_GetRectAndLineIntersectionFloat(this, X1, Y1, X2, Y2);
  }

  /**
   * @brief Calculate the intersection of a rectangle and line segment
   *
   * @param[in,out] p1 Starting coordinates of the line
   * @param[in,out] p2 Ending coordinates of the line
   *
   * @returns True if there is an intersection, false otherwise
   *
   * This function is used to clip a line segment to a
   * rectangle. A line segment contained entirely within the
   * rectangle or that does not intersect will remain unchanged.
   * A line segment that crosses the rectangle at either or both
   * ends will be clipped to the boundary of the rectangle and
   * the new coordinates saved in p1 and/or p2 as necessary.
   *
   */
  bool IntersectLine(FPoint* p1, FPoint* p2) const
  {
    return IntersectLine(p1 ? &p1->x : nullptr,
                         p1 ? &p1->y : nullptr,
                         p2 ? &p2->x : nullptr,
                         p2 ? &p2->y : nullptr);
  }

  /**
   * Determine whether a rectangle has no area.
   *
   * A rectangle is considered "empty" for this function if `r` is NULL, or if
   * `r`'s width and/or height are <= 0.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @returns true if the rectangle is "empty", false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool Empty() const { return SDL_RectEmptyFloat(this); }

  /**
   * Determine whether two floating point rectangles are equal, within some
   * given epsilon.
   *
   * Rectangles are considered equal if both are not NULL and each of their x,
   * y, width and height are within `epsilon` of each other. If you don't know
   * what value to use for `epsilon`, you should call the SDL_RectsEqualFloat
   * function instead.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @param other the second rectangle to test.
   * @param epsilon the epsilon value for comparison.
   * @returns true if the rectangles are equal, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Equal()
   */
  constexpr bool EqualEpsilon(const FRect& other, const float epsilon) const
  {
    return SDL_RectsEqualEpsilon(this, &other, epsilon);
  }

  /**
   * Determine whether two rectangles are equal.
   *
   * Rectangles are considered equal if both are not NULL and each of their x,
   * y, width and height match.
   *
   * Note that this is a forced-inline function in a header, and not a public
   * API function available in the SDL library (which is to say, the code is
   * embedded in the calling program and the linker and dynamic loader will not
   * be able to find this function inside SDL itself).
   *
   * @param other the second rectangle to test.
   * @returns true if the rectangles are equal, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  constexpr bool Equal(const FRect& other) const
  {
    return SDL_RectsEqualFloat(this, &other);
  }

  /**
   * @brief Check whether the rect contains given point
   *
   * @param p Point to check
   *
   * @returns True if the point is contained in the rect
   *
   */
  constexpr bool Contains(const FPoint& p) const
  {
    return SDL_PointInRectFloat(&p, this);
  }

  /**
   * @brief Check whether the rect contains given point
   *
   * @param other Point to check
   *
   * @returns True if the point is contained in the rect
   *
   */
  constexpr bool Contains(const FRect& other) const
  {
    return GetUnion(other) == *this;
  }

  /**
   * Determine whether two rectangles intersect.
   *
   * @param other an SDL_Rect structure representing the second rectangle.
   * @returns true if there is an intersection, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetIntersection()
   */
  bool HasIntersection(const FRect& other) const
  {
    return SDL_HasRectIntersectionFloat(this, &other);
  }

  /**
   * Calculate the intersection of two rectangles.
   *
   * If `result` is NULL then this function will return false.
   *
   * @param other an SDL_Rect structure representing the second rectangle.
   * @returns an SDL_Rect structure filled in with the intersection of
   *               if there is intersection, std::nullopt otherwise.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa HasIntersection()
   */
  constexpr std::optional<FRect> GetIntersection(const FRect& other) const
  {
    if (FRect result; SDL_GetRectIntersectionFloat(this, &other, &result)) {
      return result;
    }
    return std::nullopt;
  }

  /**
   * Calculate the union of two rectangles with float precision.
   *
   * @param other an SDL_Rect structure representing the second rectangle.
   * @returns Rect representing union of two rectangles
   *
   * @since This function is available since SDL 3.2.0.
   */
  inline std::optional<FRect> GetUnion(const FRect& other) const
  {
    if (FRect result; SDL_GetRectUnionFloat(this, &other, &result))
      return result;
    return std::nullopt;
  }

  /**
   * @brief Get a rect extended by specified amount of pixels
   *
   * @param[in] amount Number of pixels to extend by
   *
   * @returns Extended rect
   *
   */
  constexpr FRect GetExtension(unsigned int amount) const
  {
    FRect r = *this;
    r.Extend(amount);
    return r;
  }

  /**
   * @brief Get a rect extended by specified amount of pixels
   *
   * @param[in] hAmount Number of pixels to extend by
   *                    in horizontal direction
   * @param[in] vAmount Number of pixels to extend by
   *                    in vertical direction
   *
   * @returns Extended rect
   *
   */
  constexpr FRect GetExtension(float hAmount, float vAmount) const
  {
    FRect r = *this;
    r.Extend(hAmount, vAmount);
    return r;
  }

  /**
   * @brief Extend a rect by specified amount of pixels
   *
   * @param[in] amount Number of pixels to extend by
   *
   * @returns Reference to self
   *
   */
  constexpr FRect& Extend(float amount) { return Extend(amount, amount); }

  /**
   * @brief Extend a rect by specified amount of pixels
   *
   * @param[in] hAmount Number of pixels to extend by
   *                    in horizontal direction
   * @param[in] vAmount Number of pixels to extend by
   *                    in vertical direction
   *
   * @returns Reference to self
   *
   */
  constexpr FRect& Extend(float hAmount, float vAmount)
  {
    x -= hAmount;
    y -= vAmount;
    w += hAmount * 2;
    h += vAmount * 2;
    return *this;
  }

  /**
   * @brief Get rectangle moved by a given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Moved rectangle
   *
   */
  constexpr FRect operator+(const FPoint& offset) const
  {
    return FRect(x + offset.x, y + offset.y, w, h);
  }

  /**
   * @brief Get rectangle moved by an opposite of given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Moved rectangle
   *
   */
  constexpr FRect operator-(const FPoint& offset) const
  {
    return FRect(x - offset.x, y - offset.y, w, h);
  }

  /**
   * @brief Move by then given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Reference to self
   *
   */
  constexpr FRect& operator+=(const FPoint& offset)
  {
    x += offset.x;
    y += offset.y;
    return *this;
  }

  /**
   * @brief Move by an opposite of the given offset
   *
   * @param[in] offset Point specifying an offset
   *
   * @returns Reference to self
   *
   */
  constexpr FRect& operator-=(const FPoint& offset)
  {
    x -= offset.x;
    y -= offset.y;
    return *this;
  }
};

#pragma region impl
/// @}

constexpr bool Point::IsInRect(const Rect& r) const
{
  return r.Contains(*this);
}

constexpr Point::operator FPoint() const { return {float(x), float(y)}; }

constexpr Point Point::GetClamped(const Rect& rect) const
{
  Point p = *this;
  p.Clamp(rect);
  return p;
}

constexpr Point& Point::Clamp(const Rect& rect)
{
  if (x < rect.x) x = rect.x;
  if (x > rect.GetX2()) x = rect.GetX2();
  if (y < rect.y) y = rect.y;
  if (y > rect.GetY2()) y = rect.GetY2();
  return *this;
}

constexpr Point Point::GetWrapped(const Rect& rect) const
{
  Point p = *this;
  p.Wrap(rect);
  return p;
}

constexpr Point& Point::Wrap(const Rect& rect)
{
  if (x < rect.x)
    x = rect.x + rect.w - 1 - (rect.x - x + rect.w - 1) % rect.w;
  else if (x >= rect.x + rect.w)
    x = rect.x + (x - rect.x - rect.w) % rect.w;

  if (y < rect.y)
    y = rect.y + rect.h - 1 - (rect.y - y + rect.h - 1) % rect.h;
  else if (y >= rect.y + rect.h)
    y = rect.y + (y - rect.y - rect.h) % rect.h;

  return *this;
}

constexpr bool FPoint::IsInRect(const FRect& r) const
{
  return r.Contains(*this);
}

constexpr FPoint FPoint::GetClamped(const FRect& rect) const
{
  FPoint p = *this;
  p.Clamp(rect);
  return p;
}

constexpr FPoint& FPoint::Clamp(const FRect& rect)
{
  if (x < rect.x) x = rect.x;
  if (x > rect.GetX2()) x = rect.GetX2();
  if (y < rect.y) y = rect.y;
  if (y > rect.GetY2()) y = rect.GetY2();
  return *this;
}

constexpr FPoint FPoint::GetWrapped(const FRect& rect) const
{
  FPoint p = *this;
  p.Wrap(rect);
  return p;
}

constexpr FPoint& FPoint::Wrap(const FRect& rect)
{
  if (x < rect.x)
    x = rect.x + rect.w - 1 - fmod(rect.x - x + rect.w - 1, rect.w);
  else if (x >= rect.x + rect.w)
    x = rect.x + fmod(x - rect.x - rect.w, rect.w);

  if (y < rect.y)
    y = rect.y + rect.h - 1 - fmod(rect.y - y + rect.h - 1, rect.h);
  else if (y >= rect.y + rect.h)
    y = rect.y + fmod(y - rect.y - rect.h, rect.h);

  return *this;
}

constexpr Rect::operator FRect() const
{
  return {float(x), float(y), float(w), float(h)};
}

#pragma endregion impl

/**
 * @defgroup CategoryTimer Timer Support
 *
 * SDL provides time management functionality. It is useful for dealing with
 * (usually) small durations of time.
 *
 * This is not to be confused with _calendar time_ management, which is
 * provided by [CategoryTime](#CategoryTime).
 *
 * This category covers measuring time elapsed (GetTicks(),
 * GetPerformanceCounter()), putting a thread to sleep for a certain
 * amount of time (SDL_Delay(), SDL_DelayNS(), SDL_DelayPrecise()), and firing
 * a callback function after a certain amount of time has elapsed
 * (AddTimer(), etc).
 *
 * @{
 */

/**
 * Convert seconds to nanoseconds.
 *
 * This only converts whole numbers, not fractional seconds.
 *
 * @param time the number of seconds to convert.
 * @returns the converted Time.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr Time Time::FromPosix(Sint64 time)
{
  return Time::FromNS(SDL_SECONDS_TO_NS(time));
}

/**
 * Convert nanoseconds to seconds.
 *
 * This only converts whole numbers, not fractional seconds.
 *
 * @returns Posix time (in seconds).
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
constexpr Sint64 Time::ToPosix() const
{
  return SDL_NS_TO_SECONDS(m_value.count());
}

/**
 * Get the time elapsed since SDL library initialization.
 *
 * @returns a std::chrono::nanoseconds value representing the number of
 * nanoseconds since the SDL library initialized.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline std::chrono::nanoseconds GetTicks()
{
  return std::chrono::nanoseconds{SDL_GetTicksNS()};
}

/**
 * Get the current value of the high resolution counter.
 *
 * This function is typically used for profiling.
 *
 * The counter values are only meaningful relative to each other. Differences
 * between values can be converted to times by using
 * SDL_GetPerformanceFrequency().
 *
 * @returns the current counter value.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetPerformanceFrequency()
 */
inline Uint64 GetPerformanceCounter() { return SDL_GetPerformanceCounter(); }

/**
 * Get the count per second of the high resolution counter.
 *
 * @returns a platform-specific count per second.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetPerformanceCounter()
 */
inline Uint64 GetPerformanceFrequency()
{
  return SDL_GetPerformanceFrequency();
}

/**
 * Wait a specified duration before returning.
 *
 * This function waits a specified duration before returning. It
 * waits at least the specified time, but possibly longer due to OS
 * scheduling.
 *
 * @param duration the duration to delay, with max precision in ns.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 */
inline void Delay(std::chrono::nanoseconds duration)
{
  SDL_DelayNS(duration.count());
}

/**
 * Wait a specified duration before returning.
 *
 * This function waits a specified duration before returning. It
 * will attempt to wait as close to the requested time as possible, busy
 * waiting if necessary, but could return later due to OS scheduling.
 *
 * @param duration the duration to delay.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Delay()
 * @sa DelayNS()
 */
inline void DelayPrecise(std::chrono::nanoseconds duration)
{
  SDL_DelayPrecise(duration.count());
}
/**
 * Definition of the timer ID type.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using TimerID = SDL_TimerID;

/**
 * Function prototype for the millisecond timer callback function.
 *
 * The callback function is passed the current timer interval and returns the
 * next timer interval, in milliseconds. If the returned value is the same as
 * the one passed in, the periodic alarm continues, otherwise a new alarm is
 * scheduled. If the callback returns 0, the periodic alarm is canceled and
 * will be removed.
 *
 * @param userdata an arbitrary pointer provided by the app through
 *                 SDL_AddTimer, for its own use.
 * @param timerID the current timer being processed.
 * @param interval the current callback time interval.
 * @returns the new callback time interval, or 0 to disable further runs of
 *          the callback.
 *
 * @threadsafety SDL may call this callback at any time from a background
 *               thread; the application is responsible for locking resources
 *               the callback touches that need to be protected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa AddTimer()
 */
using TimerCallback = SDL_TimerCallback;

/**
 * Function prototype for the nanosecond timer callback function.
 *
 * The callback function is passed the current timer interval and returns the
 * next timer interval, in nanoseconds. If the returned value is the same as
 * the one passed in, the periodic alarm continues, otherwise a new alarm is
 * scheduled. If the callback returns 0, the periodic alarm is canceled and
 * will be removed.
 *
 * @param userdata an arbitrary pointer provided by the app through
 *                 AddTimer(), for its own use.
 * @param timerID the current timer being processed.
 * @param interval the current callback time interval.
 * @returns the new callback time interval, or 0 to disable further runs of
 *          the callback.
 *
 * @threadsafety SDL may call this callback at any time from a background
 *               thread; the application is responsible for locking resources
 *               the callback touches that need to be protected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa AddTimer()
 */
using NSTimerCallback = SDL_NSTimerCallback;

/**
 * Function prototype for the nanosecond timer callback function.
 *
 * The callback function is passed the current timer interval and returns the
 * next timer interval, in nanoseconds. If the returned value is the same as
 * the one passed in, the periodic alarm continues, otherwise a new alarm is
 * scheduled. If the callback returns 0, the periodic alarm is canceled and
 * will be removed.
 *
 * @param timerID the current timer being processed.
 * @param interval the current callback time interval.
 * @returns the new callback time interval, or 0 to disable further runs of
 *          the callback.
 *
 * @threadsafety SDL may call this callback at any time from a background
 *               thread; the application is responsible for locking resources
 *               the callback touches that need to be protected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa AddTimer(TimerCB)
 */
using TimerCB =
  std::function<std::chrono::nanoseconds(TimerID, std::chrono::nanoseconds)>;

/**
 * Call a callback function at a future time.
 *
 * The callback function is passed the current timer interval and the user
 * supplied parameter from the AddTimer() call and should return the next
 * timer interval. If the value returned from the callback is 0, the timer is
 * canceled and will be removed.
 *
 * The callback is run on a separate thread, and for short timeouts can
 * potentially be called before this function returns.
 *
 * Timers take into account the amount of time it took to execute the
 * callback. For example, if the callback took 250 ms to execute and returned
 * 1000 (ms), the timer would only wait another 750 ms before its next
 * iteration.
 *
 * Timing may be inexact due to OS scheduling. Be sure to note the current
 * time with GetTicksNS() or GetPerformanceCounter() in case your
 * callback needs to adjust for variances.
 *
 * @param interval the timer delay, in milliseconds, passed to `callback`.
 * @param callback the TimerCallback function to call when the specified
 *                 `interval` elapses.
 * @param userdata a pointer that is passed to `callback`.
 * @returns a timer ID or 0 on failure; call SDL_GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RemoveTimer()
 */
inline TimerID AddTimer(std::chrono::milliseconds interval,
                        TimerCallback callback,
                        void* userdata)
{
  return SDL_AddTimer(interval.count(), callback, userdata);
}

/**
 * Call a callback function at a future time.
 *
 * The callback function is passed the current timer interval and the user
 * supplied parameter from the AddTimerNS() call and should return the
 * next timer interval. If the value returned from the callback is 0, the
 * timer is canceled and will be removed.
 *
 * The callback is run on a separate thread, and for short timeouts can
 * potentially be called before this function returns.
 *
 * Timers take into account the amount of time it took to execute the
 * callback. For example, if the callback took 250 ns to execute and returned
 * 1000 (ns), the timer would only wait another 750 ns before its next
 * iteration.
 *
 * Timing may be inexact due to OS scheduling. Be sure to note the current
 * time with GetTicksNS() or GetPerformanceCounter() in case your
 * callback needs to adjust for variances.
 *
 * @param interval the timer delay, in std::chrono::nanoseconds, passed to
 * `callback`.
 * @param callback the NSTimerCallback function to call when the specified
 *                 `interval` elapses.
 * @param userdata a pointer that is passed to `callback`.
 * @returns a timer ID or 0 on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RemoveTimer()
 */
inline TimerID AddTimer(std::chrono::nanoseconds interval,
                        NSTimerCallback callback,
                        void* userdata)
{
  return SDL_AddTimerNS(interval.count(), callback, userdata);
}

/**
 * Call a callback function at a future time.
 *
 * The callback function is passed the current timer interval and the user
 * supplied parameter from the AddTimerNS() call and should return the
 * next timer interval. If the value returned from the callback is 0, the
 * timer is canceled and will be removed.
 *
 * The callback is run on a separate thread, and for short timeouts can
 * potentially be called before this function returns.
 *
 * Timers take into account the amount of time it took to execute the
 * callback. For example, if the callback took 250 ns to execute and returned
 * 1000 (ns), the timer would only wait another 750 ns before its next
 * iteration.
 *
 * Timing may be inexact due to OS scheduling. Be sure to note the current
 * time with GetTicksNS() or GetPerformanceCounter() in case your
 * callback needs to adjust for variances.
 *
 * @param interval the timer delay, in std::chrono::nanoseconds, passed to
 * `callback`.
 * @param callback the TimerCB function to call when the specified
 *                 `interval` elapses.
 * @returns a timer ID or 0 on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa RemoveTimer()
 */
inline TimerID AddTimer(std::chrono::nanoseconds interval, TimerCB callback)
{
  using Wrapper = CallbackWrapper<TimerCB>;
  using Store = KeyValueWrapper<TimerID, TimerCB*>;

  auto cb = Wrapper::Wrap(std::move(callback));

  if (TimerID id = SDL_AddTimerNS(
        interval.count(),
        [](void* userdata, TimerID timerID, Uint64 interval) -> Uint64 {
          auto& f = *static_cast<TimerCB*>(userdata);
          auto next = f(timerID, std::chrono::nanoseconds(interval)).count();
          // If ask to removal, then remove it
          if (next == 0) delete Store::release(timerID);
          return next;
        },
        cb)) {
    Store::Wrap(id, std::move(cb));
    return id;
  }
  delete cb;
  return TimerID{0};
}

/**
 * Remove a timer created with AddTimer().
 *
 * @param id the ID of the timer to remove.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa AddTimer()
 */
inline bool RemoveTimer(TimerID id)
{
  delete KeyValueWrapper<TimerID, TimerCB*>::release(id);
  return SDL_RemoveTimer(id);
}

/// @}

/**
 * @defgroup CategoryVersion Querying SDL Version
 *
 * Functionality to query the current SDL version, both as headers the app was
 * compiled against, and a library the app is linked to.
 *
 * @{
 */

#ifdef SDL3PP_DOC

/**
 * The current major version of SDL headers.
 *
 * If this were SDL version 3.2.1, this value would be 3.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_MAJOR_VERSION 3

/**
 * The current minor version of the SDL headers.
 *
 * If this were SDL version 3.2.1, this value would be 2.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_MINOR_VERSION 2

/**
 * The current micro (or patchlevel) version of the SDL headers.
 *
 * If this were SDL version 3.2.1, this value would be 1.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_MICRO_VERSION 11

/**
 * This macro turns the version numbers into a numeric value.
 *
 * (1,2,3) becomes 1002003.
 *
 * @param major the major version number.
 * @param minor the minorversion number.
 * @param patch the patch version number.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_VERSIONNUM(major, minor, patch)                                    \
  ((major) * 1000000 + (minor) * 1000 + (patch))

/**
 * This macro extracts the major version from a version number
 *
 * 1002003 becomes 1.
 *
 * @param version the version number.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_VERSIONNUM_MAJOR(version) ((version) / 1000000)

/**
 * This macro extracts the minor version from a version number
 *
 * 1002003 becomes 2.
 *
 * @param version the version number.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_VERSIONNUM_MINOR(version) (((version) / 1000) % 1000)

/**
 * This macro extracts the micro version from a version number
 *
 * 1002003 becomes 3.
 *
 * @param version the version number.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_VERSIONNUM_MICRO(version) ((version) % 1000)

/**
 * This is the version number macro for the current SDL version.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa GetVersion
 */
#define SDL_VERSION                                                            \
  SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_MICRO_VERSION)

/**
 * This macro will evaluate to true if compiled with SDL at least X.Y.Z.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_VERSION_ATLEAST(X, Y, Z) (SDL_VERSION >= SDL_VERSIONNUM(X, Y, Z))

#endif // SDL3PP_DOC

/**
 * Get the version of SDL that is linked against your program.
 *
 * If you are linking to SDL dynamically, then it is possible that the current
 * version will be different than the version you compiled against. This
 * function returns the current version, while SDL_VERSION is the version you
 * compiled with.
 *
 * This function may be called safely at any time, even before InitSubSystem().
 *
 * @returns the version of the linked library.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetRevision
 */
inline int GetVersion() { return SDL_GetVersion(); }

/**
 * Get the code revision of SDL that is linked against your program.
 *
 * This value is the revision of the code you are linked with and may be
 * different from the code you are compiling with, which is found in the
 * constant SDL_REVISION.
 *
 * The revision is arbitrary string (a hash value) uniquely identifying the
 * exact revision of the SDL library in use, and is only useful in comparing
 * against other revisions. It is NOT an incrementing number.
 *
 * If SDL wasn't built from a git repository with the appropriate tools, this
 * will return an empty string.
 *
 * You shouldn't use this function for anything but logging it for debugging
 * purposes. The string is not intended to be reliable in any way.
 *
 * @returns an arbitrary string, uniquely identifying the exact revision of
 *          the SDL library in use.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetVersion
 */
inline const char* GetRevision() { return SDL_GetRevision(); }

/// @}

/**
 * @defgroup CategoryIOStream I/O Streams
 *
 * SDL provides an abstract interface for reading and writing data streams. It
 * offers implementations for files, memory, etc, and the app can provide
 * their own implementations, too.
 *
 * SDL_IOStream is not related to the standard C++ iostream class, other than
 * both are abstract interfaces to read/write data.
 *
 * @{
 */

/**
 * @cat constructor-tag
 */
constexpr struct IOFromDynamicMem_CtorTag
{
} IOFromDynamicMem;

// Forward decl
struct IOStreamBase;

// Forward decl
struct IOStreamRef;

// Forward decl
struct IOStream;

/**
 * IOStreamBase status, set by a read or write operation.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using IOStatus = SDL_IOStatus;

constexpr IOStatus IO_STATUS_READY =
  SDL_IO_STATUS_READY; ///< Everything is ready (no errors and not EOF).

constexpr IOStatus IO_STATUS_ERROR =
  SDL_IO_STATUS_ERROR; ///< Read or write I/O error.

constexpr IOStatus IO_STATUS_EOF = SDL_IO_STATUS_EOF; ///< End of file.

constexpr IOStatus IO_STATUS_NOT_READY =
  SDL_IO_STATUS_NOT_READY; ///< Non blocking I/O, not ready.

constexpr IOStatus IO_STATUS_READONLY =
  SDL_IO_STATUS_READONLY; ///< Tried to write a read-only buffer.

constexpr IOStatus IO_STATUS_WRITEONLY =
  SDL_IO_STATUS_WRITEONLY; ///< Tried to read a write-only buffer.

/**
 * Possible `whence` values for IOStreamBase seeking.
 *
 * These map to the same "whence" concept that `fseek` or `lseek` use in the
 * standard C runtime.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using IOWhence = SDL_IOWhence;

constexpr IOWhence IO_SEEK_SET =
  SDL_IO_SEEK_SET; ///< Seek from the beginning of data.

constexpr IOWhence IO_SEEK_CUR =
  SDL_IO_SEEK_CUR; ///< Seek relative to current read point.

constexpr IOWhence IO_SEEK_END =
  SDL_IO_SEEK_END; ///< Seek relative to the end of data.

/**
 * The function pointers that drive an IOStreamBase.
 *
 * Applications can provide this struct to IOStreamBase.IOStreamBase() to create
 * their own implementation of IOStreamBase. This is not necessarily required,
 * as SDL already offers several common types of I/O streams, via
 * IOStreamBase.IOStreamBase().
 *
 * This structure should be initialized using SDL_INIT_INTERFACE()
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa SDL_INIT_INTERFACE
 */
using IOStreamInterface = SDL_IOStreamInterface;

/**
 * The read/write operation structure.
 *
 * This operates as an opaque handle. There are several APIs to create various
 * types of I/O streams, or an app can supply an IOStreamInterface to
 * IOStreamBase.IOStreamBase() to provide their own stream implementation behind
 * this struct's abstract interface.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa IOStream
 * @sa IOStreamRef
 */
struct IOStreamBase : Resource<SDL_IOStream*>
{
  using Resource::Resource;

  /**
   * Use this function to create a new SDL_IOStream structure for reading from
   * and/or writing to a named file.
   *
   * The `mode` string is treated roughly the same as in a call to the C
   * library's fopen(), even if SDL doesn't happen to use fopen() behind the
   * scenes.
   *
   * Available `mode` strings:
   *
   * - "r": Open a file for reading. The file must exist.
   * - "w": Create an empty file for writing. If a file with the same name
   *   already exists its content is erased and the file is treated as a new
   *   empty file.
   * - "a": Append to a file. Writing operations append data at the end of the
   *   file. The file is created if it does not exist.
   * - "r+": Open a file for update both reading and writing. The file must
   *   exist.
   * - "w+": Create an empty file for both reading and writing. If a file with
   *   the same name already exists its content is erased and the file is
   *   treated as a new empty file.
   * - "a+": Open a file for reading and appending. All writing operations are
   *   performed at the end of the file, protecting the previous content to be
   *   overwritten. You can reposition (fseek, rewind) the internal pointer to
   *   anywhere in the file for reading, but writing operations will move it
   *   back to the end of file. The file is created if it does not exist.
   *
   * **NOTE**: In order to open a file as a binary file, a "b" character has to
   * be included in the `mode` string. This additional "b" character can either
   * be appended at the end of the string (thus making the following compound
   * modes: "rb", "wb", "ab", "r+b", "w+b", "a+b") or be inserted between the
   * letter and the "+" sign for the mixed modes ("rb+", "wb+", "ab+").
   * Additional characters may follow the sequence, although they should have no
   * effect. For example, "t" is sometimes appended to make explicit the file is
   * a text file.
   *
   * This function supports Unicode filenames, but they must be encoded in UTF-8
   * format, regardless of the underlying operating system.
   *
   * In Android, IOStreamBase.IOStreamBase() can be used to open content://
   * URIs. As a fallback, IOStreamBase.IOStreamBase() will transparently open a
   * matching filename in the app's `assets`.
   *
   * Closing the IOStreamBase will close SDL's internal file handle.
   *
   * The following properties may be set at creation time by SDL:
   *
   * - `prop::IOStream.WINDOWS_HANDLE_POINTER`: a pointer, that can be cast
   *   to a win32 `HANDLE`, that this IOStreamBase is using to access the
   *   filesystem. If the program isn't running on Windows, or SDL used some
   *   other method to access the filesystem, this property will not be set.
   * - `prop::IOStream.STDIO_FILE_POINTER`: a pointer, that can be cast to a
   *   stdio `FILE *`, that this IOStreamBase is using to access the filesystem.
   *   If SDL used some other method to access the filesystem, this property
   *   will not be set. PLEASE NOTE that if SDL is using a different C runtime
   *   than your app, trying to use this pointer will almost certainly result in
   *   a crash! This is mostly a problem on Windows; make sure you build SDL and
   *   your app with the same compiler and settings to avoid it.
   * - `prop::IOStream.FILE_DESCRIPTOR_NUMBER`: a file descriptor that this
   *   IOStreamBase is using to access the filesystem.
   * - `prop::IOStream.ANDROID_AASSET_POINTER`: a pointer, that can be cast
   *   to an Android NDK `AAsset *`, that this IOStreamBase is using to access
   *   the filesystem. If SDL used some other method to access the filesystem,
   *   this property will not be set.
   *
   * @param file a UTF-8 string representing the filename to open.
   * @param mode an ASCII string representing the mode to be used for opening
   *             the file.
   * @post the object is convertible to true if valid or false on failure; call
   *       GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamRef.Close
   * @sa IOStreamBase.Flush
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Tell
   * @sa IOStreamBase.Write
   */
  IOStreamBase(StringParam file, StringParam mode)
    : Resource(SDL_IOFromFile(file, mode))
  {
  }

  /**
   * Use this function to prepare a read-write memory buffer for use with
   * IOStreamBase.
   *
   * This function sets up an IOStreamBase struct based on a memory area of a
   * certain size, for both read and write access.
   *
   * This memory buffer is not copied by the IOStreamBase; the pointer you
   * provide must remain valid until you close the stream. Closing the stream
   * will not free the original buffer.
   *
   * If you need to make sure the IOStreamBase never writes to the memory
   * buffer, you should use IOStreamBase.IOStreamBase() with a read-only buffer
   * of memory instead.
   *
   * The following properties will be set at creation time by SDL:
   *
   * - `prop::IOStream.MEMORY_POINTER`: this will be the `mem` parameter that
   *   was passed to this function.
   * - `prop::IOStream.MEMORY_SIZE_NUMBER`: this will be the `size` parameter
   *   that was passed to this function.
   *
   * @param mem a pointer to a buffer to feed an IOStreamBase stream.
   * @param size the buffer size, in bytes.
   * @post the object is convertible to true if valid or false on failure; call
   *       GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.IOStreamBase
   * @sa IOStreamRef.Close
   * @sa IOStreamBase.Flush
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Tell
   * @sa IOStreamBase.Write
   */
  IOStreamBase(void* mem, size_t size)
    : Resource(SDL_IOFromMem(mem, size))
  {
  }

  /**
   * Use this function to prepare a read-only memory buffer for use with
   * IOStreamBase.
   *
   * This function sets up an IOStreamBase struct based on a memory area of a
   * certain size. It assumes the memory area is not writable.
   *
   * Attempting to write to this IOStreamBase stream will report an error
   * without writing to the memory buffer.
   *
   * This memory buffer is not copied by the IOStreamBase; the pointer you
   * provide must remain valid until you close the stream. Closing the stream
   * will not free the original buffer.
   *
   * If you need to write to a memory buffer, you should use
   * IOStreamBase.IOStreamBase() with a writable buffer of memory instead.
   *
   * The following properties will be set at creation time by SDL:
   *
   * - `prop::IOStream.MEMORY_POINTER`: this will be the `mem` parameter that
   *   was passed to this function.
   * - `prop::IOStream.MEMORY_SIZE_NUMBER`: this will be the `size` parameter
   *   that was passed to this function.
   *
   * @param mem a pointer to a read-only buffer to feed an IOStreamBase stream.
   * @param size the buffer size, in bytes.
   * @post the object is convertible to true if valid or false on failure; call
   *       GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.IOStreamBase
   * @sa IOStreamRef.Close
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Tell
   */
  IOStreamBase(const void* mem, size_t size)
    : Resource(SDL_IOFromConstMem(mem, size))
  {
  }

  /**
   * Use this function to create an IOStreamBase that is backed by dynamically
   * allocated memory.
   *
   * This supports the following properties to provide access to the memory and
   * control over allocations:
   *
   * - `prop::IOStream.DYNAMIC_MEMORY_POINTER`: a pointer to the internal
   *   memory of the stream. This can be set to nullptr to transfer ownership of
   *   the memory to the application, which should free the memory with
   *   free(). If this is done, the next operation on the stream must be
   *   IOStreamRef.Close().
   * - `prop::IOStream.DYNAMIC_CHUNKSIZE_NUMBER`: memory will be allocated in
   *   multiples of this size, defaulting to 1024.
   *
   * @post a pointer to a new IOStreamBase structure or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamRef.Close
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Tell
   * @sa IOStreamBase.Write
   */
  IOStreamBase(IOFromDynamicMem_CtorTag)
    : Resource(SDL_IOFromDynamicMem())
  {
  }

  /**
   * Create a custom IOStreamBase.
   *
   * Applications do not need to use this function unless they are providing
   * their own IOStreamBase implementation. If you just need an IOStreamBase to
   * read/write a common data source, you should use the built-in
   * implementations in SDL, like IOStreamBase.IOStreamBase() or
   * IOStreamBase.IOStreamBase(), etc.
   *
   * This function makes a copy of `iface` and the caller does not need to keep
   * it around after this call.
   *
   * @param iface the interface that implements this IOStreamBase, initialized
   *              using SDL_INIT_INTERFACE().
   * @param userdata the pointer that will be passed to the interface functions.
   * @post the object is convertible to true if valid or false on failure; call
   *       GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamRef.Close
   * @sa SDL_INIT_INTERFACE
   * @sa IOStreamBase.IOStreamBase
   * @sa IOStreamBase.IOStreamBase
   * @sa IOStreamBase.IOStreamBase
   */
  IOStreamBase(const IOStreamInterface& iface, void* userdata)
    : Resource(SDL_OpenIO(&iface, userdata))
  {
  }

  /**
   * Use this function to prepare a memory buffer for use with IOStreamBase.
   *
   * @tparam U
   * @param mem the span of memory to use as buffer. If const we get read-only,
   * otherwise we get a read-write buffer.
   *
   * @post the object is convertible to true if valid or false on failure; call
   *       GetError() for more information.
   */
  template<class U>
  IOStreamBase(std::span<U> mem)
    : IOStreamBase(mem.data(), mem.size_bytes())
  {
  }

  /**
   * Get the properties associated with an IOStreamBase.
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PropertiesRef GetProperties() const
  {
    return PropertiesRef{SDL_GetIOProperties(get())};
  }

  /**
   * Query the stream status of an IOStreamBase.
   *
   * This information can be useful to decide if a short read or write was due
   * to an error, an EOF, or a non-blocking operation that isn't yet ready to
   * complete.
   *
   * An IOStreamBase's status is only expected to change after a
   * IOStreamBase.Read or IOStreamBase.Write call; don't expect it to change if
   * you just call this query function in a tight loop.
   *
   * @returns an IOStatus enum with the current state.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  IOStatus GetStatus() const { return SDL_GetIOStatus(get()); }

  /**
   * Use this function to get the size of the data stream in an IOStreamBase.
   *
   * @returns the size of the data stream in the IOStreamBase on success or a
   *          negative error code on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  Sint64 GetSize() const { return SDL_GetIOSize(get()); }

  /**
   * Seek within an IOStreamBase data stream.
   *
   * This function seeks to byte `offset`, relative to `whence`.
   *
   * `whence` may be any of the following values:
   *
   * - `IO_SEEK_SET`: seek from the beginning of data
   * - `IO_SEEK_CUR`: seek relative to current read point
   * - `IO_SEEK_END`: seek relative to the end of data
   *
   * If this stream can not seek, it will return -1.
   *
   * @param offset an offset in bytes, relative to `whence` location; can be
   *               negative.
   * @param whence any of `IO_SEEK_SET`, `IO_SEEK_CUR`,
   *               `IO_SEEK_END`.
   * @returns the final offset in the data stream after the seek or -1 on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.Tell
   */
  Sint64 Seek(Sint64 offset, IOWhence whence)
  {
    return SDL_SeekIO(get(), offset, whence);
  }

  /**
   * Determine the current read/write offset in an IOStreamBase data stream.
   *
   * This is actually a wrapper function that calls the IOStreamBase's `seek`
   * method, with an offset of 0 bytes from `IO_SEEK_CUR`, to simplify
   * application development.
   *
   * @returns the current offset in the stream, or -1 if the information can not
   *          be determined.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.Seek
   */
  Sint64 Tell() const { return SDL_TellIO(get()); }

  /**
   * Read from a data source.
   *
   * This function reads up `size` bytes from the data source to the area
   * pointed at by `ptr`. This function may read less bytes than requested.
   *
   * This function will return zero when the data stream is completely read, and
   * IOStreamBase.GetStatus() will return IO_STATUS_EOF. If zero is returned and
   * the stream is not at EOF, IOStreamBase.GetStatus() will return a different
   * error value and GetError() will offer a human-readable message.
   *
   * @param ptr a pointer to a buffer to read data into.
   * @param size the number of bytes to read from the data source.
   * @returns the number of bytes read, or 0 on end of file or other failure;
   *          call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.Write
   * @sa IOStreamBase.GetStatus
   */
  size_t Read(void* ptr, size_t size) { return SDL_ReadIO(get(), ptr, size); }

  /**
   * Write to an IOStreamBase data stream.
   *
   * This function writes exactly `size` bytes from the area pointed at by `ptr`
   * to the stream. If this fails for any reason, it'll return less than `size`
   * to demonstrate how far the write progressed. On success, it returns `size`.
   *
   * On error, this function still attempts to write as much as possible, so it
   * might return a positive value less than the requested write size.
   *
   * The caller can use IOStreamBase.GetStatus() to determine if the problem is
   * recoverable, such as a non-blocking write that can simply be retried later,
   * or a fatal error.
   *
   * @param data the bytes to write to
   * @returns the number of bytes written, which will be less than `size` on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.printf
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Flush
   * @sa IOStreamBase.GetStatus
   */
  template<class U>
  size_t Write(std::span<U> data)
  {
    return Write(data.data(), data.size_bytes());
  }

  /**
   * Write to an IOStreamBase data stream.
   *
   * This function writes exactly `size` bytes from the area pointed at by `ptr`
   * to the stream. If this fails for any reason, it'll return less than `size`
   * to demonstrate how far the write progressed. On success, it returns `size`.
   *
   * On error, this function still attempts to write as much as possible, so it
   * might return a positive value less than the requested write size.
   *
   * The caller can use IOStreamBase.GetStatus() to determine if the problem is
   * recoverable, such as a non-blocking write that can simply be retried later,
   * or a fatal error.
   *
   * @param str the bytes to write to
   * @returns the number of bytes written, which will be less than `size` on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.printf
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Flush
   * @sa IOStreamBase.GetStatus
   */
  size_t Write(std::string_view str) { return Write(str.data(), str.size()); }

  /**
   * Write to an IOStreamBase data stream.
   *
   * This function writes exactly `size` bytes from the area pointed at by `ptr`
   * to the stream. If this fails for any reason, it'll return less than `size`
   * to demonstrate how far the write progressed. On success, it returns `size`.
   *
   * On error, this function still attempts to write as much as possible, so it
   * might return a positive value less than the requested write size.
   *
   * The caller can use IOStreamBase.GetStatus() to determine if the problem is
   * recoverable, such as a non-blocking write that can simply be retried later,
   * or a fatal error.
   *
   * @param ptr a pointer to a buffer containing data to write.
   * @param size the number of bytes to write.
   * @returns the number of bytes written, which will be less than `size` on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.printf
   * @sa IOStreamBase.Read
   * @sa IOStreamBase.Seek
   * @sa IOStreamBase.Flush
   * @sa IOStreamBase.GetStatus
   */
  size_t Write(const void* ptr, size_t size)
  {
    return SDL_WriteIO(get(), ptr, size);
  }

  /**
   * @cat formatted-string
   */
  size_t print(std::string_view fmt, auto... args)
  {
    return Write(std::vformat(fmt, std::make_format_args(args...)));
  }

  /**
   * @cat formatted-string
   */
  size_t println(std::string_view fmt, auto... args)
  {
    std::string result =
      std::vformat(fmt, std::make_format_args(args...)) + "\n";
    return Write(result);
  }

  /**
   * Print to an IOStreamBase data stream.
   *
   * @warning this is not typesafe! Prefer using print() and println()
   *
   * This function does formatted printing to the stream.
   *
   * @param fmt a printf() style format string.
   * @param ... additional parameters matching % tokens in the `fmt` string, if
   *            any.
   * @returns the number of bytes written or 0 on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.vprintf
   * @sa IOStreamBase.Write
   */
  size_t printf(SDL_PRINTF_FORMAT_STRING const char* fmt, ...)
  {
    va_list ap;
    size_t result;

    va_start(ap, fmt);
    result = vprintf(fmt, ap);
    va_end(ap);

    return result;
  }

  /**
   * Print to an IOStreamBase data stream.
   *
   * @warning this is not typesafe! Prefer using print() and println()
   *
   * This function does formatted printing to the stream.
   *
   * @param fmt a printf() style format string.
   * @param ap a variable argument list.
   * @returns the number of bytes written or 0 on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.printf
   * @sa IOStreamBase.Write
   */
  size_t vprintf(SDL_PRINTF_FORMAT_STRING const char* fmt, va_list ap)
  {
    return SDL_IOvprintf(get(), fmt, ap);
  }

  /**
   * Flush any buffered data in the stream.
   *
   * This function makes sure that any buffered data is written to the stream.
   * Normally this isn't necessary but if the stream is a pipe or socket it
   * guarantees that any pending data is sent.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.IOStreamBase
   * @sa IOStreamBase.Write
   */
  bool Flush() { return SDL_FlushIO(get()); }

  /**
   * Load all the data from an SDL data stream.
   *
   * The data is allocated with a zero byte at the end (null terminated) for
   * convenience. This extra byte is not included in the value reported via
   * `datasize`.
   *
   * @returns the data or nullptr on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa LoadFile
   * @sa IOStreamBase.SaveFile
   */
  OwnArray<std::byte> LoadFile()
  {
    size_t datasize = 0;
    auto data =
      static_cast<std::byte*>(SDL_LoadFile_IO(get(), &datasize, false));
    return OwnArray<std::byte>{data, datasize};
  }

  /**
   * Save all the data into an SDL data stream.
   *
   * @param data the data to be written. If datasize is 0, may be nullptr or a
   *             invalid pointer.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SaveFile
   * @sa IOStreamBase.LoadFile
   */
  template<class U>
  bool SaveFile(std::span<U> data)
  {
    return SaveFile(data.data(), data.size_bytes());
  }

  /**
   * Save all the data into an SDL data stream.
   *
   * @param str the data to be written. If datasize is 0, may be nullptr or a
   *            invalid pointer.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SaveFile
   * @sa IOStreamBase.LoadFile
   */
  bool SaveFile(std::string_view str)
  {
    return SaveFile(str.data(), str.size());
  }

  /**
   * Save all the data into an SDL data stream.
   *
   * @param data the data to be written. If datasize is 0, may be nullptr or a
   *             invalid pointer.
   * @param datasize the number of bytes to be written.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SaveFile
   * @sa IOStreamBase.LoadFile
   */
  bool SaveFile(const void* data, size_t datasize)
  {
    return SDL_SaveFile_IO(get(), data, datasize, false);
  }

  /**
   * Use this function to read a byte from an IOStreamBase.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on success or false on failure or EOF; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU8(Uint8* value) { return SDL_ReadU8(get(), value); }

  /**
   * Use this function to read a signed byte from an IOStreamBase.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS8(Sint8* value) { return SDL_ReadS8(get(), value); }

  /**
   * Use this function to read 16 bits of little-endian data from an
   * IOStreamBase and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU16LE(Uint16* value) { return SDL_ReadU16LE(get(), value); }

  /**
   * Use this function to read 16 bits of little-endian data from an
   * IOStreamBase and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS16LE(Sint16* value) { return SDL_ReadS16LE(get(), value); }

  /**
   * Use this function to read 16 bits of big-endian data from an IOStreamBase
   * and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU16BE(Uint16* value) { return SDL_ReadU16BE(get(), value); }

  /**
   * Use this function to read 16 bits of big-endian data from an IOStreamBase
   * and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS16BE(Sint16* value) { return SDL_ReadS16BE(get(), value); }

  /**
   * Use this function to read 32 bits of little-endian data from an
   * IOStreamBase and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU32LE(Uint32* value) { return SDL_ReadU32LE(get(), value); }

  /**
   * Use this function to read 32 bits of little-endian data from an
   * IOStreamBase and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS32LE(Sint32* value) { return SDL_ReadS32LE(get(), value); }

  /**
   * Use this function to read 32 bits of big-endian data from an IOStreamBase
   * and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU32BE(Uint32* value) { return SDL_ReadU32BE(get(), value); }

  /**
   * Use this function to read 32 bits of big-endian data from an IOStreamBase
   * and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS32BE(Sint32* value) { return SDL_ReadS32BE(get(), value); }

  /**
   * Use this function to read 64 bits of little-endian data from an
   * IOStreamBase and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU64LE(Uint64* value) { return SDL_ReadU64LE(get(), value); }

  /**
   * Use this function to read 64 bits of little-endian data from an
   * IOStreamBase and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS64LE(Sint64* value) { return SDL_ReadS64LE(get(), value); }

  /**
   * Use this function to read 64 bits of big-endian data from an IOStreamBase
   * and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadU64BE(Uint64* value) { return SDL_ReadU64BE(get(), value); }

  /**
   * Use this function to read 64 bits of big-endian data from an IOStreamBase
   * and return in native format.
   *
   * SDL byteswaps the data only if necessary, so the data returned will be in
   * the native byte order.
   *
   * This function will return false when the data stream is completely read,
   * and IOStreamBase.GetStatus() will return IO_STATUS_EOF. If false is
   * returned and the stream is not at EOF, IOStreamBase.GetStatus() will return
   * a different error value and GetError() will offer a human-readable message.
   *
   * @param value a pointer filled in with the data read.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadS64BE(Sint64* value) { return SDL_ReadS64BE(get(), value); }

  /**
   * Use this function to write a byte to an IOStreamBase.
   *
   * @param value the byte value to write.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU8(Uint8 value) { return SDL_WriteU8(get(), value); }

  /**
   * Use this function to write a signed byte to an IOStreamBase.
   *
   * @param value the byte value to write.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS8(Sint8 value) { return SDL_WriteS8(get(), value); }

  /**
   * Use this function to write 16 bits in native format to an IOStreamBase as
   * little-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in little-endian
   * format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU16LE(Uint16 value) { return SDL_WriteU16LE(get(), value); }

  /**
   * Use this function to write 16 bits in native format to an IOStreamBase as
   * little-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in little-endian
   * format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS16LE(Sint16 value) { return SDL_WriteS16LE(get(), value); }

  /**
   * Use this function to write 16 bits in native format to an IOStreamBase as
   * big-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in big-endian format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU16BE(Uint16 value) { return SDL_WriteU16BE(get(), value); }

  /**
   * Use this function to write 16 bits in native format to an IOStreamBase as
   * big-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in big-endian format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS16BE(Sint16 value) { return SDL_WriteS16BE(get(), value); }

  /**
   * Use this function to write 32 bits in native format to an IOStreamBase as
   * little-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in little-endian
   * format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU32LE(Uint32 value) { return SDL_WriteU32LE(get(), value); }

  /**
   * Use this function to write 32 bits in native format to an IOStreamBase as
   * little-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in little-endian
   * format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS32LE(Sint32 value) { return SDL_WriteS32LE(get(), value); }

  /**
   * Use this function to write 32 bits in native format to an IOStreamBase as
   * big-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in big-endian format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU32BE(Uint32 value) { return SDL_WriteU32BE(get(), value); }

  /**
   * Use this function to write 32 bits in native format to an IOStreamBase as
   * big-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in big-endian format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS32BE(Sint32 value) { return SDL_WriteS32BE(get(), value); }

  /**
   * Use this function to write 64 bits in native format to an IOStreamBase as
   * little-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in little-endian
   * format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU64LE(Uint64 value) { return SDL_WriteU64LE(get(), value); }

  /**
   * Use this function to write 64 bits in native format to an IOStreamBase as
   * little-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in little-endian
   * format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS64LE(Sint64 value) { return SDL_WriteS64LE(get(), value); }

  /**
   * Use this function to write 64 bits in native format to an IOStreamBase as
   * big-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in big-endian format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteU64BE(Uint64 value) { return SDL_WriteU64BE(get(), value); }

  /**
   * Use this function to write 64 bits in native format to an IOStreamBase as
   * big-endian data.
   *
   * SDL byteswaps the data only if necessary, so the application always
   * specifies native format, and the data written will be in big-endian format.
   *
   * @param value the data to be written, in native format.
   * @returns true on successful write or false on failure; call GetError()
   *          for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool WriteS64BE(Sint64 value) { return SDL_WriteS64BE(get(), value); }
};

/**
 * Handle to a non owned iOStream
 *
 * @cat resource
 *
 * @sa IOStreamBase
 * @sa IOStream
 */
struct IOStreamRef : IOStreamBase
{
  using IOStreamBase::IOStreamBase;

  /**
   * Copy constructor.
   */
  constexpr IOStreamRef(const IOStreamRef& other)
    : IOStreamBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr IOStreamRef(IOStreamRef&& other)
    : IOStreamBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~IOStreamRef() = default;

  /**
   * Assignment operator.
   */
  IOStreamRef& operator=(IOStreamRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Close and free an allocated IOStreamBase structure.
   *
   * IOStreamRef.Close() closes and cleans up the IOStreamBase stream. It
   * releases any resources used by the stream and frees the IOStreamBase
   * itself. This returns true on success, or false if the stream failed to
   * flush to its output (e.g. to disk).
   *
   * Note that if this fails to flush the stream for any reason, this function
   * reports an error, but the IOStreamBase is still invalid once this function
   * returns.
   *
   * This call flushes any buffered writes to the operating system, but there
   * are no guarantees that those writes have gone to physical media; they might
   * be in the OS's file cache, waiting to go to disk later. If it's absolutely
   * crucial that writes go to disk immediately, so they are definitely stored
   * even if the power fails before the file cache would have caught up, one
   * should call IOStreamBase.Flush() before closing. Note that flushing takes
   * time and makes the system and your app operate less efficiently, so do so
   * sparingly.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.IOStreamBase
   */
  bool reset(SDL_IOStream* newResource = {})
  {
    return SDL_CloseIO(release(newResource));
  }

  /**
   * Close and free an allocated IOStreamBase structure.
   *
   * IOStreamRef.Close() closes and cleans up the IOStreamBase stream. It
   * releases any resources used by the stream and frees the IOStreamBase
   * itself. This returns true on success, or false if the stream failed to
   * flush to its output (e.g. to disk).
   *
   * Note that if this fails to flush the stream for any reason, this function
   * reports an error, but the IOStreamBase is still invalid once this function
   * returns.
   *
   * This call flushes any buffered writes to the operating system, but there
   * are no guarantees that those writes have gone to physical media; they might
   * be in the OS's file cache, waiting to go to disk later. If it's absolutely
   * crucial that writes go to disk immediately, so they are definitely stored
   * even if the power fails before the file cache would have caught up, one
   * should call IOStreamBase.Flush() before closing. Note that flushing takes
   * time and makes the system and your app operate less efficiently, so do so
   * sparingly.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa IOStreamBase.IOStreamBase
   */
  bool Close() { return reset(); }
};

/**
 * Handle to an owned iOStream
 *
 * @cat resource
 *
 * @sa IOStreamBase
 * @sa IOStreamRef
 */
struct IOStream : IOStreamRef
{
  using IOStreamRef::IOStreamRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit IOStream(SDL_IOStream* resource = {})
    : IOStreamRef(resource)
  {
  }

  constexpr IOStream(const IOStream& other) = delete;

  /**
   * Move constructor.
   */
  constexpr IOStream(IOStream&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~IOStream() { reset(); }

  /**
   * Assignment operator.
   */
  IOStream& operator=(IOStream other)
  {
    reset(other.release());
    return *this;
  }
};

namespace prop::IOStream {

constexpr auto WINDOWS_HANDLE_POINTER =
  SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER;

constexpr auto STDIO_FILE_POINTER = SDL_PROP_IOSTREAM_STDIO_FILE_POINTER;

constexpr auto FILE_DESCRIPTOR_NUMBER =
  SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER;

constexpr auto ANDROID_AASSET_POINTER =
  SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER;

constexpr auto MEMORY_POINTER = SDL_PROP_IOSTREAM_MEMORY_POINTER;

constexpr auto MEMORY_SIZE_NUMBER = SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER;

constexpr auto DYNAMIC_MEMORY_POINTER =
  SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER;

constexpr auto DYNAMIC_CHUNKSIZE_NUMBER =
  SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER;

} // namespace prop::IOStream

/**
 * Load all the data from a file path.
 *
 * The data is allocated with a zero byte at the end (null terminated) for
 * convenience. This extra byte is not included in the value reported via
 * `datasize`.
 *
 * @param file the path to read all available data from.
 * @returns the data or nullptr on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IOStreamBase.LoadFile
 * @sa SaveFile
 */
inline OwnArray<std::byte> LoadFile(StringParam file)
{
  size_t datasize = 0;
  auto data = static_cast<std::byte*>(SDL_LoadFile(file, &datasize));
  return OwnArray<std::byte>{data, datasize};
}

/**
 * Save all the data into a file path.
 *
 * @param file the path to write all available data into.
 * @param data the data to be written. If datasize is 0, may be nullptr or a
 *             invalid pointer.
 * @param datasize the number of bytes to be written.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IOStreamBase.SaveFile
 * @sa LoadFile
 */
inline bool SaveFile(StringParam file, const void* data, size_t datasize)
{
  return SDL_SaveFile(file, data, datasize);
}

/**
 * Save all the data into a file path.
 *
 * @param file the path to write all available data into.
 * @param data the data to be written.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IOStreamBase.SaveFile
 * @sa LoadFile
 */
template<class T>
inline bool SaveFile(StringParam file, std::span<T> data)
{
  return SaveFile(file, data.data(), data.size_bytes());
}

/**
 * Save all the data into a file path.
 *
 * @param file the path to write all available data into.
 * @param str the data to be written.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa IOStreamBase.SaveFile
 * @sa LoadFile
 */
inline bool SaveFile(StringParam file, std::string_view str)
{
  return SaveFile(std::move(file), str.data(), str.size());
}

#pragma region impl
/// @}

#pragma endregion impl

/**
 *
 * @defgroup CategoryThread Thread Management
 *
 * Thread Management
 *
 * This is provided for compatibility and completeness, we advise you to use
 * std's thread facilities.
 *
 * SDL offers cross-platform thread management functions. These are mostly
 * concerned with starting threads, setting their priority, and dealing with
 * their termination.
 *
 * In addition, there is support for Thread Local Storage (data that is unique
 * to each thread, but accessed from a single key).
 *
 * On platforms without thread support (such as Emscripten when built without
 * pthreads), these functions still exist, but things like
 * ThreadBase.ThreadBase() will report failure without doing anything.
 *
 * If you're going to work with threads, you almost certainly need to have a
 * good understanding of [CategoryMutex](CategoryMutex) as well.
 *
 * @{
 */

/**
 * A unique numeric ID that identifies a thread.
 *
 * These are different from ThreadBase objects, which are generally what an
 * application will operate on, but having a way to uniquely identify a thread
 * can be useful at times.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa ThreadBase.GetID
 * @sa GetCurrentThreadID
 */
using ThreadID = SDL_ThreadID;

/**
 * Thread local storage ID.
 *
 * 0 is the invalid ID. An app can create these and then set data for these
 * IDs that is unique to each thread.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa ThreadBase.GetTLS
 * @sa ThreadBase.SetTLS
 */
using TLSID = AtomicInt;

/**
 * The function passed to ThreadBase.ThreadBase() as the new thread's entry
 * point.
 *
 * @param data what was passed as `data` to ThreadBase.ThreadBase().
 * @returns a value that can be reported through ThreadBase.Wait().
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using ThreadFunction = SDL_ThreadFunction;

/**
 * The function passed to ThreadBase.ThreadBase() as the new thread's entry
 * point.
 *
 * @returns a value that can be reported through ThreadBase.Wait().
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using ThreadCB = std::function<int()>;

/**
 * The callback used to cleanup data passed to ThreadBase.SetTLS.
 *
 * This is called when a thread exits, to allow an app to free any resources.
 *
 * @param value a pointer previously handed to ThreadBase.SetTLS.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa ThreadBase.SetTLS
 */
using TLSDestructorCallback = SDL_TLSDestructorCallback;

// Forward decl
struct ThreadBase;

// Forward decl
struct ThreadRef;

// Forward decl
struct Thread;

/**
 * The SDL thread priority.
 *
 * SDL will make system changes as necessary in order to apply the thread
 * priority. Code which attempts to control thread state related to priority
 * should be aware that calling ThreadBase.SetCurrentPriority may alter such
 * state. SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of
 * this behavior.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ThreadPriority = SDL_ThreadPriority;

constexpr ThreadPriority THREAD_PRIORITY_LOW = SDL_THREAD_PRIORITY_LOW; ///< LOW

constexpr ThreadPriority THREAD_PRIORITY_NORMAL =
  SDL_THREAD_PRIORITY_NORMAL; ///< NORMAL

constexpr ThreadPriority THREAD_PRIORITY_HIGH =
  SDL_THREAD_PRIORITY_HIGH; ///< HIGH

constexpr ThreadPriority THREAD_PRIORITY_TIME_CRITICAL =
  SDL_THREAD_PRIORITY_TIME_CRITICAL; ///< TIME_CRITICAL

/**
 * The SDL thread state.
 *
 * The current state of a thread can be checked by calling ThreadBase.GetState.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa ThreadBase.GetState
 */
using ThreadState = SDL_ThreadState;

constexpr ThreadState THREAD_UNKNOWN =
  SDL_THREAD_UNKNOWN; ///< The thread is not valid.

constexpr ThreadState THREAD_ALIVE =
  SDL_THREAD_ALIVE; ///< The thread is currently running.

constexpr ThreadState THREAD_DETACHED =
  SDL_THREAD_DETACHED; ///< The thread is detached and can't be waited on.

/**
 * The thread has finished and should be cleaned up with ThreadBase.Wait()
 */
constexpr ThreadState THREAD_COMPLETE = SDL_THREAD_COMPLETE;

/**
 * The SDL thread object.
 *
 * These are opaque data.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa ThreadBase.ThreadBase
 * @sa ThreadBase.Wait
 *
 * @cat resource
 *
 * @sa Thread
 * @sa ThreadRef
 */
struct ThreadBase : Resource<SDL_Thread*>
{
  using Resource::Resource;

  /**
   * Create a new thread with a default stack size.
   *
   * @param fn the ThreadFunction function to call in the new thread.
   * @param name the name of the thread.
   * @post an opaque pointer to the new thread object on success, nullptr if the
   *       new thread could not be created; call GetError() for more
   *       information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadBase.ThreadBase
   * @sa ThreadBase.Wait
   */
  ThreadBase(ThreadCB fn, StringParam name)
    : ThreadBase(
        [](void* handler) {
          return CallbackWrapper<ThreadCB>::CallOnce(handler);
        },
        std::move(name),
        CallbackWrapper<ThreadCB>::Wrap(std::move(fn)))
  {
  }

  /**
   * Create a new thread with a default stack size.
   *
   * This is a convenience function, equivalent to calling
   * ThreadBase.ThreadBase with the following properties set:
   *
   * - `prop::thread.CREATE_ENTRY_FUNCTION_POINTER`: `fn`
   * - `prop::thread.CREATE_NAME_STRING`: `name`
   * - `prop::thread.CREATE_USERDATA_POINTER`: `data`
   *
   * Usually, apps should just call this function the same way on every platform
   * and let the macros hide the details.
   *
   * @param fn the ThreadFunction function to call in the new thread.
   * @param name the name of the thread.
   * @param data a pointer that is passed to `fn`.
   * @post an opaque pointer to the new thread object on success, nullptr if the
   *       new thread could not be created; call GetError() for more
   *       information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadBase.ThreadBase
   * @sa ThreadBase.Wait
   */
  ThreadBase(ThreadFunction fn, StringParam name, void* data)
    : Resource(SDL_CreateThread(fn, name, data))
  {
  }

  /**
   * Create a new thread with with the specified properties.
   *
   * These are the supported properties:
   *
   * - `prop::thread.CREATE_ENTRY_FUNCTION_POINTER`: an ThreadFunction
   *   value that will be called at the start of the new thread's life.
   *   Required.
   * - `prop::thread.CREATE_NAME_STRING`: the name of the new thread, which
   *   might be available to debuggers. Optional, defaults to nullptr.
   * - `prop::thread.CREATE_USERDATA_POINTER`: an arbitrary app-defined
   *   pointer, which is passed to the entry function on the new thread, as its
   *   only parameter. Optional, defaults to nullptr.
   * - `prop::thread.CREATE_STACKSIZE_NUMBER`: the size, in bytes, of the new
   *   thread's stack. Optional, defaults to 0 (system-defined default).
   *
   * SDL makes an attempt to report `prop::thread.CREATE_NAME_STRING` to the
   * system, so that debuggers can display it. Not all platforms support this.
   *
   * Thread naming is a little complicated: Most systems have very small limits
   * for the string length (Haiku has 32 bytes, Linux currently has 16, Visual
   * C++ 6.0 has _nine_!), and possibly other arbitrary rules. You'll have to
   * see what happens with your system's debugger. The name should be UTF-8 (but
   * using the naming limits of C identifiers is a better bet). There are no
   * requirements for thread naming conventions, so long as the string is
   * null-terminated UTF-8, but these guidelines are helpful in choosing a name:
   *
   * https://stackoverflow.com/questions/149932/naming-conventions-for-threads
   *
   * If a system imposes requirements, SDL will try to munge the string for it
   * (truncate, etc), but the original string contents will be available from
   * ThreadBase.GetName().
   *
   * The size (in bytes) of the new stack can be specified with
   * `prop::thread.CREATE_STACKSIZE_NUMBER`. Zero means "use the system
   * default" which might be wildly different between platforms. x86 Linux
   * generally defaults to eight megabytes, an embedded device might be a few
   * kilobytes instead. You generally need to specify a stack that is a multiple
   * of the system's page size (in many cases, this is 4 kilobytes, but check
   * your system documentation).
   *
   * Note that this "function" is actually a macro that calls an internal
   * function with two extra parameters not listed here; they are hidden through
   * preprocessor macros and are needed to support various C runtimes at the
   * point of the function call. Language bindings that aren't using the C
   * headers will need to deal with this.
   *
   * The actual symbol in SDL is `SDL_CreateThreadWithPropertiesRuntime`, so
   * there is no symbol clash, but trying to load an SDL shared library and look
   * for "ThreadBase.ThreadBase" will fail.
   *
   * Usually, apps should just call this function the same way on every platform
   * and let the macros hide the details.
   *
   * @param props the properties to use.
   * @post an opaque pointer to the new thread object on success, nullptr if the
   *          new thread could not be created; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadBase.ThreadBase
   * @sa ThreadBase.Wait
   */
  ThreadBase(PropertiesBase& props)
    : Resource(SDL_CreateThreadWithProperties(props.get()))
  {
  }

  /**
   * Get the thread name as it was specified in ThreadBase.ThreadBase().
   *
   * @returns a pointer to a UTF-8 string that names the specified thread, or
   *          nullptr if it doesn't have a name.
   *
   * @since This function is available since SDL 3.2.0.
   */
  const char* GetName() const { return SDL_GetThreadName(get()); }

  /**
   * Get the thread identifier for the specified thread.
   *
   * This thread identifier is as reported by the underlying operating system.
   * If SDL is running on a platform that does not support threads the return
   * value will always be zero.
   *
   * @returns the ID of the specified thread, or the ID of the current thread if
   *          `thread` is nullptr.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetCurrentThreadID
   */
  ThreadID GetID() const { return SDL_GetThreadID(get()); }

  /**
   * Set the priority for the current thread.
   *
   * Note that some platforms will not let you alter the priority (or at least,
   * promote the thread to a higher priority) at all, and some require you to be
   * an administrator account. Be prepared for this to fail.
   *
   * @param priority the ThreadPriority to set.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  static bool SetCurrentPriority(ThreadPriority priority)
  {
    return SDL_SetCurrentThreadPriority(priority);
  }

  /**
   * Wait for a thread to finish.
   *
   * Threads that haven't been detached will remain until this function cleans
   * them up. Not doing so is a resource leak.
   *
   * Once a thread has been cleaned up through this function, the ThreadBase
   * that references it becomes invalid and should not be referenced again. As
   * such, only one thread may call ThreadBase.Wait() on another.
   *
   * The return code from the thread function is placed in the area pointed to
   * by `status`, if `status` is not nullptr.
   *
   * You may not wait on a thread that has been used in a call to
   * ThreadRef.Detach(). Use either that function or this one, but not both, or
   * behavior is undefined.
   *
   * It is safe to pass a nullptr thread to this function; it is a no-op.
   *
   * Note that the thread pointer is freed by this function and is not valid
   * afterward.
   *
   *               ThreadBase.ThreadBase() call that started this thread.
   * @param status a pointer filled in with the value returned from the thread
   *               function by its 'return', or -1 if the thread has been
   *               detached or isn't valid, may be nullptr.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadBase.ThreadBase
   * @sa ThreadRef.Detach
   */
  void Wait(int* status) { SDL_WaitThread(get(), status); }

  /**
   * Get the current state of a thread.
   *
   * @returns the current state of a thread, or THREAD_UNKNOWN if the thread
   *          isn't valid.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadState
   */
  ThreadState GetState() const { return SDL_GetThreadState(get()); }
};

/**
 * Handle to a non owned thread
 *
 * @cat resource
 *
 * @sa ThreadBase
 * @sa Thread
 */
struct ThreadRef : ThreadBase
{
  using ThreadBase::ThreadBase;

  /**
   * Copy constructor.
   */
  constexpr ThreadRef(const ThreadRef& other)
    : ThreadBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr ThreadRef(ThreadRef&& other)
    : ThreadBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~ThreadRef() = default;

  /**
   * Assignment operator.
   */
  ThreadRef& operator=(ThreadRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Let a thread clean up on exit without intervention.
   *
   * A thread may be "detached" to signify that it should not remain until
   * another thread has called ThreadBase.Wait() on it. Detaching a thread is
   * useful for long-running threads that nothing needs to synchronize with or
   * further manage. When a detached thread is done, it simply goes away.
   *
   * There is no way to recover the return code of a detached thread. If you
   * need this, don't detach the thread and instead use ThreadBase.Wait().
   *
   * Once a thread is detached, you should usually assume the ThreadBase isn't
   * safe to reference again, as it will become invalid immediately upon the
   * detached thread's exit, instead of remaining until someone has called
   * ThreadBase.Wait() to finally clean it up. As such, don't detach the same
   * thread more than once.
   *
   * If a thread has already exited when passed to ThreadRef.Detach(), it will
   * stop waiting for a call to ThreadBase.Wait() and clean up immediately. It
   * is not safe to detach a thread that might be used with ThreadBase.Wait().
   *
   * You may not call ThreadBase.Wait() on a thread that has been detached. Use
   * either that function or this one, but not both, or behavior is undefined.
   *
   * It is safe to pass nullptr to this function; it is a no-op.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadBase.ThreadBase
   * @sa ThreadBase.Wait
   */
  void reset(SDL_Thread* newResource = {})
  {
    SDL_DetachThread(release(newResource));
  }

  /**
   * Let a thread clean up on exit without intervention.
   *
   * A thread may be "detached" to signify that it should not remain until
   * another thread has called ThreadBase.Wait() on it. Detaching a thread is
   * useful for long-running threads that nothing needs to synchronize with or
   * further manage. When a detached thread is done, it simply goes away.
   *
   * There is no way to recover the return code of a detached thread. If you
   * need this, don't detach the thread and instead use ThreadBase.Wait().
   *
   * Once a thread is detached, you should usually assume the ThreadBase isn't
   * safe to reference again, as it will become invalid immediately upon the
   * detached thread's exit, instead of remaining until someone has called
   * ThreadBase.Wait() to finally clean it up. As such, don't detach the same
   * thread more than once.
   *
   * If a thread has already exited when passed to ThreadRef.Detach(), it will
   * stop waiting for a call to ThreadBase.Wait() and clean up immediately. It
   * is not safe to detach a thread that might be used with ThreadBase.Wait().
   *
   * You may not call ThreadBase.Wait() on a thread that has been detached. Use
   * either that function or this one, but not both, or behavior is undefined.
   *
   * It is safe to pass nullptr to this function; it is a no-op.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ThreadBase.ThreadBase
   * @sa ThreadBase.Wait
   */
  void Detach() { reset(); }
};

/**
 * Handle to an owned thread
 *
 * @cat resource
 *
 * @sa ThreadBase
 * @sa ThreadRef
 */
struct Thread : ThreadRef
{
  using ThreadRef::ThreadRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Thread(SDL_Thread* resource = {})
    : ThreadRef(resource)
  {
  }

  constexpr Thread(const Thread& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Thread(Thread&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Thread() { reset(); }

  /**
   * Assignment operator.
   */
  Thread& operator=(Thread other)
  {
    reset(other.release());
    return *this;
  }
};

namespace prop::thread {

constexpr auto CREATE_ENTRY_FUNCTION_POINTER =
  SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER;

constexpr auto CREATE_NAME_STRING = SDL_PROP_THREAD_CREATE_NAME_STRING;

constexpr auto CREATE_USERDATA_POINTER =
  SDL_PROP_THREAD_CREATE_USERDATA_POINTER;

constexpr auto CREATE_STACKSIZE_NUMBER =
  SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER;

} // namespace prop::thread

/**
 * Get the thread identifier for the current thread.
 *
 * This thread identifier is as reported by the underlying operating system.
 * If SDL is running on a platform that does not support threads the return
 * value will always be zero.
 *
 * This function also returns a valid thread ID when called from the main
 * thread.
 *
 * @returns the ID of the current thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ThreadBase.GetID
 */
inline ThreadID GetCurrentThreadID() { return SDL_GetCurrentThreadID(); }

/**
 * Get the current thread's value associated with a thread local storage ID.
 *
 * @param id a pointer to the thread local storage ID, may not be nullptr.
 * @returns the value associated with the ID for the current thread or nullptr
 * if no value has been set; call GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetTLS
 */
inline void* GetTLS(TLSID* id) { return SDL_GetTLS(*id); }

/**
 * Set the current thread's value associated with a thread local storage ID.
 *
 * If the thread local storage ID is not initialized (the value is 0), a new
 * ID will be created in a thread-safe way, so all calls using a pointer to
 * the same ID will refer to the same local storage.
 *
 * Note that replacing a value from a previous call to this function on the
 * same thread does _not_ call the previous value's destructor!
 *
 * `destructor` can be nullptr; it is assumed that `value` does not need to be
 * cleaned up if so.
 *
 * @param id a pointer to the thread local storage ID, may not be nullptr.
 * @param value the value to associate with the ID for the current thread.
 * @param destructor a function called when the thread exits, to free the
 *                   value, may be nullptr.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetTLS
 */
inline bool SetTLS(TLSID* id,
                   const void* value,
                   TLSDestructorCallback destructor)
{
  return SDL_SetTLS(*id, value, destructor);
}

/**
 * Cleanup all TLS data for this thread.
 *
 * If you are creating your threads outside of SDL and then calling SDL
 * functions, you should call this function before your thread exits, to
 * properly clean up SDL memory.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void CleanupTLS() { SDL_CleanupTLS(); }

/// @}

/**
 *
 * @defgroup CategoryMutex Thread Synchronization Primitives
 *
 * SDL offers several thread synchronization primitives. This document can't
 * cover the complicated topic of thread safety, but reading up on what each
 * of these primitives are, why they are useful, and how to correctly use them
 * is vital to writing correct and safe multithreaded programs.
 *
 * - Mutexes: MutexBase.MutexBase()
 * - Read/Write locks: RWLockBase.RWLockBase()
 * - Semaphores: SemaphoreBase.SemaphoreBase()
 * - Condition variables: ConditionBase.ConditionBase()
 *
 * SDL also offers a datatype, InitState, which can be used to make sure
 * only one thread initializes/deinitializes some resource that several
 * threads might try to use for the first time simultaneously.
 *
 * @{
 */

// Forward decl
struct MutexBase;

// Forward decl
struct MutexRef;

// Forward decl
struct Mutex;

// Forward decl
struct RWLockBase;

// Forward decl
struct RWLockRef;

// Forward decl
struct RWLock;

// Forward decl
struct SemaphoreBase;

// Forward decl
struct SemaphoreRef;

// Forward decl
struct Semaphore;

// Forward decl
struct ConditionBase;

// Forward decl
struct ConditionRef;

// Forward decl
struct Condition;

/**
 * A means to serialize access to a resource between threads.
 *
 * Mutexes (short for "mutual exclusion") are a synchronization primitive that
 * allows exactly one thread to proceed at a time.
 *
 * Wikipedia has a thorough explanation of the concept:
 *
 * https://en.wikipedia.org/wiki/Mutex
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa Mutex
 * @sa MutexRef
 */
struct MutexBase : Resource<SDL_Mutex*>
{
  using Resource::Resource;

  /**
   * Create a new mutex.
   *
   * All newly-created mutexes begin in the _unlocked_ state.
   *
   * Calls to MutexBase.Lock() will not return while the mutex is locked by
   * another thread. See MutexBase.TryLock() to attempt to lock without
   * blocking.
   *
   * SDL mutexes are reentrant.
   *
   * @post the initialized and unlocked mutex or nullptr on failure; call
   *          GetError() for more information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa MutexBase.Lock
   * @sa MutexBase.TryLock
   * @sa MutexBase.Unlock
   */
  MutexBase()
    : Resource(SDL_CreateMutex())
  {
  }

  /**
   * Lock the mutex.
   *
   * This will block until the mutex is available, which is to say it is in the
   * unlocked state and the OS has chosen the caller as the next thread to lock
   * it. Of all threads waiting to lock the mutex, only one may do so at a time.
   *
   * It is legal for the owning thread to lock an already-locked mutex. It must
   * unlock it the same number of times before it is actually made available for
   * other threads in the system (this is known as a "recursive mutex").
   *
   * This function does not fail; if mutex is nullptr, it will return
   * immediately having locked nothing. If the mutex is valid, this function
   * will always block until it can lock the mutex, and return with it locked.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa MutexBase.TryLock
   * @sa MutexBase.Unlock
   */
  void Lock() { SDL_LockMutex(get()); }

  /**
   * Try to lock a mutex without blocking.
   *
   * This works just like MutexBase.Lock(), but if the mutex is not available,
   * this function returns false immediately.
   *
   * This technique is useful if you need exclusive access to a resource but
   * don't want to wait for it, and will return to it to try again later.
   *
   * This function returns true if passed a nullptr mutex.
   *
   * @returns true on success, false if the mutex would block.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa MutexBase.Lock
   * @sa MutexBase.Unlock
   */
  bool TryLock() { return SDL_TryLockMutex(get()); }

  /**
   * Unlock the mutex.
   *
   * It is legal for the owning thread to lock an already-locked mutex. It must
   * unlock it the same number of times before it is actually made available for
   * other threads in the system (this is known as a "recursive mutex").
   *
   * It is illegal to unlock a mutex that has not been locked by the current
   * thread, and doing so results in undefined behavior.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa MutexBase.Lock
   * @sa MutexBase.TryLock
   */
  void Unlock() { SDL_UnlockMutex(get()); }
};

/**
 * Handle to a non owned mutex
 *
 * @cat resource
 *
 * @sa MutexBase
 * @sa Mutex
 */
struct MutexRef : MutexBase
{
  using MutexBase::MutexBase;

  /**
   * Copy constructor.
   */
  constexpr MutexRef(const MutexRef& other)
    : MutexBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr MutexRef(MutexRef&& other)
    : MutexBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~MutexRef() = default;

  /**
   * Assignment operator.
   */
  MutexRef& operator=(MutexRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a mutex created with MutexBase.MutexBase().
   *
   * This function must be called on any mutex that is no longer needed. Failure
   * to destroy a mutex will result in a system memory or resource leak. While
   * it is safe to destroy a mutex that is _unlocked_, it is not safe to attempt
   * to destroy a locked mutex, and may result in undefined behavior depending
   * on the platform.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa MutexBase.MutexBase
   */
  void reset(SDL_Mutex* newResource = {})
  {
    SDL_DestroyMutex(release(newResource));
  }
};

/**
 * Handle to an owned mutex
 *
 * @cat resource
 *
 * @sa MutexBase
 * @sa MutexRef
 */
struct Mutex : MutexRef
{
  using MutexRef::MutexRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Mutex(SDL_Mutex* resource = {})
    : MutexRef(resource)
  {
  }

  constexpr Mutex(const Mutex& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Mutex(Mutex&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Mutex() { reset(); }

  /**
   * Assignment operator.
   */
  Mutex& operator=(Mutex other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * A mutex that allows read-only threads to run in parallel.
 *
 * A rwlock is roughly the same concept as MutexBase, but allows threads that
 * request read-only access to all hold the lock at the same time. If a thread
 * requests write access, it will block until all read-only threads have
 * released the lock, and no one else can hold the thread (for reading or
 * writing) at the same time as the writing thread.
 *
 * This can be more efficient in cases where several threads need to access
 * data frequently, but changes to that data are rare.
 *
 * There are other rules that apply to rwlocks that don't apply to mutexes,
 * about how threads are scheduled and when they can be recursively locked.
 * These are documented in the other rwlock functions.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa RWLock
 * @sa RWLockRef
 */
struct RWLockBase : Resource<SDL_RWLock*>
{
  using Resource::Resource;

  /**
   * Create a new read/write lock.
   *
   * A read/write lock is useful for situations where you have multiple threads
   * trying to access a resource that is rarely updated. All threads requesting
   * a read-only lock will be allowed to run in parallel; if a thread requests a
   * write lock, it will be provided exclusive access. This makes it safe for
   * multiple threads to use a resource at the same time if they promise not to
   * change it, and when it has to be changed, the rwlock will serve as a
   * gateway to make sure those changes can be made safely.
   *
   * In the right situation, a rwlock can be more efficient than a mutex, which
   * only lets a single thread proceed at a time, even if it won't be modifying
   * the data.
   *
   * All newly-created read/write locks begin in the _unlocked_ state.
   *
   * Calls to RWLockBase.LockForReading() and RWLockBase.LockForWriting will not
   * return while the rwlock is locked _for writing_ by another thread. See
   * RWLockBase.TryLockForReading() and RWLockBase.TryLockForWriting() to
   * attempt to lock without blocking.
   *
   * SDL read/write locks are only recursive for read-only locks! They are not
   * guaranteed to be fair, or provide access in a FIFO manner! They are not
   * guaranteed to favor writers. You may not lock a rwlock for both read-only
   * and write access at the same time from the same thread (so you can't
   * promote your read-only lock to a write lock without unlocking first).
   *
   * @post the initialized and unlocked read/write lock or nullptr on failure;
   *          call GetError() for more information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.LockForReading
   * @sa RWLockBase.LockForWriting
   * @sa RWLockBase.TryLockForReading
   * @sa RWLockBase.TryLockForWriting
   * @sa RWLockBase.Unlock
   */
  RWLockBase()
    : Resource(SDL_CreateRWLock())
  {
  }

  /**
   * Lock the read/write lock for _read only_ operations.
   *
   * This will block until the rwlock is available, which is to say it is not
   * locked for writing by any other thread. Of all threads waiting to lock the
   * rwlock, all may do so at the same time as long as they are requesting
   * read-only access; if a thread wants to lock for writing, only one may do so
   * at a time, and no other threads, read-only or not, may hold the lock at the
   * same time.
   *
   * It is legal for the owning thread to lock an already-locked rwlock for
   * reading. It must unlock it the same number of times before it is actually
   * made available for other threads in the system (this is known as a
   * "recursive rwlock").
   *
   * Note that locking for writing is not recursive (this is only available to
   * read-only locks).
   *
   * It is illegal to request a read-only lock from a thread that already holds
   * the write lock. Doing so results in undefined behavior. Unlock the write
   * lock before requesting a read-only lock. (But, of course, if you have the
   * write lock, you don't need further locks to read in any case.)
   *
   * This function does not fail; if rwlock is nullptr, it will return
   * immediately having locked nothing. If the rwlock is valid, this function
   * will always block until it can lock the mutex, and return with it locked.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.LockForWriting
   * @sa RWLockBase.TryLockForReading
   * @sa RWLockBase.Unlock
   */
  void LockForReading() { SDL_LockRWLockForReading(get()); }

  /**
   * Lock the read/write lock for _write_ operations.
   *
   * This will block until the rwlock is available, which is to say it is not
   * locked for reading or writing by any other thread. Only one thread may hold
   * the lock when it requests write access; all other threads, whether they
   * also want to write or only want read-only access, must wait until the
   * writer thread has released the lock.
   *
   * It is illegal for the owning thread to lock an already-locked rwlock for
   * writing (read-only may be locked recursively, writing can not). Doing so
   * results in undefined behavior.
   *
   * It is illegal to request a write lock from a thread that already holds a
   * read-only lock. Doing so results in undefined behavior. Unlock the
   * read-only lock before requesting a write lock.
   *
   * This function does not fail; if rwlock is nullptr, it will return
   * immediately having locked nothing. If the rwlock is valid, this function
   * will always block until it can lock the mutex, and return with it locked.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.LockForReading
   * @sa RWLockBase.TryLockForWriting
   * @sa RWLockBase.Unlock
   */
  void LockForWriting() { SDL_LockRWLockForWriting(get()); }

  /**
   * Try to lock a read/write lock _for reading_ without blocking.
   *
   * This works just like RWLockBase.LockForReading(), but if the rwlock is not
   * available, then this function returns false immediately.
   *
   * This technique is useful if you need access to a resource but don't want to
   * wait for it, and will return to it to try again later.
   *
   * Trying to lock for read-only access can succeed if other threads are
   * holding read-only locks, as this won't prevent access.
   *
   * This function returns true if passed a nullptr rwlock.
   *
   * @returns true on success, false if the lock would block.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.LockForReading
   * @sa RWLockBase.TryLockForWriting
   * @sa RWLockBase.Unlock
   */
  bool TryLockForReading() { return SDL_TryLockRWLockForReading(get()); }

  /**
   * Try to lock a read/write lock _for writing_ without blocking.
   *
   * This works just like RWLockBase.LockForWriting(), but if the rwlock is not
   * available, then this function returns false immediately.
   *
   * This technique is useful if you need exclusive access to a resource but
   * don't want to wait for it, and will return to it to try again later.
   *
   * It is illegal for the owning thread to lock an already-locked rwlock for
   * writing (read-only may be locked recursively, writing can not). Doing so
   * results in undefined behavior.
   *
   * It is illegal to request a write lock from a thread that already holds a
   * read-only lock. Doing so results in undefined behavior. Unlock the
   * read-only lock before requesting a write lock.
   *
   * This function returns true if passed a nullptr rwlock.
   *
   * @returns true on success, false if the lock would block.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.LockForWriting
   * @sa RWLockBase.TryLockForReading
   * @sa RWLockBase.Unlock
   */
  bool TryLockForWriting() { return SDL_TryLockRWLockForWriting(get()); }

  /**
   * Unlock the read/write lock.
   *
   * Use this function to unlock the rwlock, whether it was locked for read-only
   * or write operations.
   *
   * It is legal for the owning thread to lock an already-locked read-only lock.
   * It must unlock it the same number of times before it is actually made
   * available for other threads in the system (this is known as a "recursive
   * rwlock").
   *
   * It is illegal to unlock a rwlock that has not been locked by the current
   * thread, and doing so results in undefined behavior.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.LockForReading
   * @sa RWLockBase.LockForWriting
   * @sa RWLockBase.TryLockForReading
   * @sa RWLockBase.TryLockForWriting
   */
  void Unlock() { SDL_UnlockRWLock(get()); }
};

/**
 * Handle to a non owned rWLock
 *
 * @cat resource
 *
 * @sa RWLockBase
 * @sa RWLock
 */
struct RWLockRef : RWLockBase
{
  using RWLockBase::RWLockBase;

  /**
   * Copy constructor.
   */
  constexpr RWLockRef(const RWLockRef& other)
    : RWLockBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr RWLockRef(RWLockRef&& other)
    : RWLockBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~RWLockRef() = default;

  /**
   * Assignment operator.
   */
  RWLockRef& operator=(RWLockRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a read/write lock created with RWLockBase.RWLockBase().
   *
   * This function must be called on any read/write lock that is no longer
   * needed. Failure to destroy a rwlock will result in a system memory or
   * resource leak. While it is safe to destroy a rwlock that is _unlocked_, it
   * is not safe to attempt to destroy a locked rwlock, and may result in
   * undefined behavior depending on the platform.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RWLockBase.RWLockBase
   */
  void reset(SDL_RWLock* newResource = {})
  {
    SDL_DestroyRWLock(release(newResource));
  }
};

/**
 * Handle to an owned rWLock
 *
 * @cat resource
 *
 * @sa RWLockBase
 * @sa RWLockRef
 */
struct RWLock : RWLockRef
{
  using RWLockRef::RWLockRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit RWLock(SDL_RWLock* resource = {})
    : RWLockRef(resource)
  {
  }

  constexpr RWLock(const RWLock& other) = delete;

  /**
   * Move constructor.
   */
  constexpr RWLock(RWLock&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~RWLock() { reset(); }

  /**
   * Assignment operator.
   */
  RWLock& operator=(RWLock other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * A means to manage access to a resource, by count, between threads.
 *
 * Semaphores (specifically, "counting semaphores"), let X number of threads
 * request access at the same time, each thread granted access decrementing a
 * counter. When the counter reaches zero, future requests block until a prior
 * thread releases their request, incrementing the counter again.
 *
 * Wikipedia has a thorough explanation of the concept:
 *
 * https://en.wikipedia.org/wiki/Semaphore_(programming)
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa Semaphore
 * @sa SemaphoreRef
 */
struct SemaphoreBase : Resource<SDL_Semaphore*>
{
  using Resource::Resource;

  /**
   * Create a semaphore.
   *
   * This function creates a new semaphore and initializes it with the value
   * `initial_value`. Each wait operation on the semaphore will atomically
   * decrement the semaphore value and potentially block if the semaphore value
   * is 0. Each post operation will atomically increment the semaphore value and
   * wake waiting threads and allow them to retry the wait operation.
   *
   * @param initial_value the starting value of the semaphore.
   * @post a new semaphore or nullptr on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SemaphoreBase.Signal
   * @sa SemaphoreBase.TryWait
   * @sa SemaphoreBase.GetValue
   * @sa SemaphoreBase.Wait
   * @sa SemaphoreBase.WaitTimeout
   */
  SemaphoreBase(Uint32 initial_value)
    : Resource(SDL_CreateSemaphore(initial_value))
  {
  }

  /**
   * Wait until a semaphore has a positive value and then decrements it.
   *
   * This function suspends the calling thread until the semaphore pointed to by
   * `sem` has a positive value, and then atomically decrement the semaphore
   * value.
   *
   * This function is the equivalent of calling SemaphoreBase.WaitTimeout() with
   * a time length of -1.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SemaphoreBase.Signal
   * @sa SemaphoreBase.TryWait
   * @sa SemaphoreBase.WaitTimeout
   */
  void Wait() { SDL_WaitSemaphore(get()); }

  /**
   * See if a semaphore has a positive value and decrement it if it does.
   *
   * This function checks to see if the semaphore pointed to by `sem` has a
   * positive value and atomically decrements the semaphore value if it does. If
   * the semaphore doesn't have a positive value, the function immediately
   * returns false.
   *
   * @returns true if the wait succeeds, false if the wait would block.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SemaphoreBase.Signal
   * @sa SemaphoreBase.Wait
   * @sa SemaphoreBase.WaitTimeout
   */
  bool TryWait() { return SDL_TryWaitSemaphore(get()); }

  /**
   * Wait until a semaphore has a positive value and then decrements it.
   *
   * This function suspends the calling thread until either the semaphore
   * pointed to by `sem` has a positive value or the specified time has elapsed.
   * If the call is successful it will atomically decrement the semaphore value.
   *
   * @param timeout the length of the timeout, in milliseconds, or -1 to wait
   *                  indefinitely.
   * @returns true if the wait succeeds or false if the wait times out.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SemaphoreBase.Signal
   * @sa SemaphoreBase.TryWait
   * @sa SemaphoreBase.Wait
   */
  bool WaitTimeout(std::chrono::milliseconds timeout)
  {
    return SDL_WaitSemaphoreTimeout(get(), timeout.count());
  }

  /**
   * Atomically increment a semaphore's value and wake waiting threads.
   *
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SemaphoreBase.TryWait
   * @sa SemaphoreBase.Wait
   * @sa SemaphoreBase.WaitTimeout
   */
  void Signal() { SDL_SignalSemaphore(get()); }

  /**
   * Get the current value of a semaphore.
   *
   * @returns the current value of the semaphore.
   *
   * @since This function is available since SDL 3.2.0.
   */
  Uint32 GetValue() const { return SDL_GetSemaphoreValue(get()); }
};

/**
 * Handle to a non owned semaphore
 *
 * @cat resource
 *
 * @sa SemaphoreBase
 * @sa Semaphore
 */
struct SemaphoreRef : SemaphoreBase
{
  using SemaphoreBase::SemaphoreBase;

  /**
   * Copy constructor.
   */
  constexpr SemaphoreRef(const SemaphoreRef& other)
    : SemaphoreBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr SemaphoreRef(SemaphoreRef&& other)
    : SemaphoreBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~SemaphoreRef() = default;

  /**
   * Assignment operator.
   */
  SemaphoreRef& operator=(SemaphoreRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a semaphore.
   *
   * It is not safe to destroy a semaphore if there are threads currently
   * waiting on it.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SemaphoreBase.SemaphoreBase
   */
  void reset(SDL_Semaphore* newResource = {})
  {
    SDL_DestroySemaphore(release(newResource));
  }
};

/**
 * Handle to an owned semaphore
 *
 * @cat resource
 *
 * @sa SemaphoreBase
 * @sa SemaphoreRef
 */
struct Semaphore : SemaphoreRef
{
  using SemaphoreRef::SemaphoreRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Semaphore(SDL_Semaphore* resource = {})
    : SemaphoreRef(resource)
  {
  }

  constexpr Semaphore(const Semaphore& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Semaphore(Semaphore&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Semaphore() { reset(); }

  /**
   * Assignment operator.
   */
  Semaphore& operator=(Semaphore other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * A means to block multiple threads until a condition is satisfied.
 *
 * Condition variables, paired with an MutexBase, let an app halt multiple
 * threads until a condition has occurred, at which time the app can release
 * one or all waiting threads.
 *
 * Wikipedia has a thorough explanation of the concept:
 *
 * https://en.wikipedia.org/wiki/Condition_variable
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa Condition
 * @sa ConditionRef
 */
struct ConditionBase : Resource<SDL_Condition*>
{
  using Resource::Resource;

  /**
   * Create a condition variable.
   *
   * @post a new condition variable or nullptr on failure; call GetError()
   *          for more information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ConditionBase.Broadcast
   * @sa ConditionBase.Signal
   * @sa ConditionBase.Wait
   * @sa ConditionBase.WaitTimeout
   */
  ConditionBase()
    : Resource(SDL_CreateCondition())
  {
  }

  /**
   * Restart one of the threads that are waiting on the condition variable.
   *
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ConditionBase.Broadcast
   * @sa ConditionBase.Wait
   * @sa ConditionBase.WaitTimeout
   */
  void Signal() { SDL_SignalCondition(get()); }

  /**
   * Restart all threads that are waiting on the condition variable.
   *
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ConditionBase.Signal
   * @sa ConditionBase.Wait
   * @sa ConditionBase.WaitTimeout
   */
  void Broadcast() { SDL_BroadcastCondition(get()); }

  /**
   * Wait until a condition variable is signaled.
   *
   * This function unlocks the specified `mutex` and waits for another thread to
   * call ConditionBase.Signal() or ConditionBase.Broadcast() on the condition
   * variable `cond`. Once the condition variable is signaled, the mutex is
   * re-locked and the function returns.
   *
   * The mutex must be locked before calling this function. Locking the mutex
   * recursively (more than once) is not supported and leads to undefined
   * behavior.
   *
   * This function is the equivalent of calling ConditionBase.WaitTimeout() with
   * a time length of -1.
   *
   * @param mutex the mutex used to coordinate thread access.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ConditionBase.Broadcast
   * @sa ConditionBase.Signal
   * @sa ConditionBase.WaitTimeout
   */
  void Wait(MutexBase& mutex) { SDL_WaitCondition(get(), mutex.get()); }

  /**
   * Wait until a condition variable is signaled or a certain time has passed.
   *
   * This function unlocks the specified `mutex` and waits for another thread to
   * call ConditionBase.Signal() or ConditionBase.Broadcast() on the condition
   * variable `cond`, or for the specified time to elapse. Once the condition
   * variable is signaled or the time elapsed, the mutex is re-locked and the
   * function returns.
   *
   * The mutex must be locked before calling this function. Locking the mutex
   * recursively (more than once) is not supported and leads to undefined
   * behavior.
   *
   * @param mutex the mutex used to coordinate thread access.
   * @param timeout the maximum time to wait, in milliseconds, or -1 to wait
   *                  indefinitely.
   * @returns true if the condition variable is signaled, false if the condition
   *          is not signaled in the allotted time.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ConditionBase.Broadcast
   * @sa ConditionBase.Signal
   * @sa ConditionBase.Wait
   */
  bool WaitTimeout(MutexBase& mutex, std::chrono::milliseconds timeout)
  {
    return SDL_WaitConditionTimeout(get(), mutex.get(), timeout.count());
  }
};

/**
 * Handle to a non owned condition
 *
 * @cat resource
 *
 * @sa ConditionBase
 * @sa Condition
 */
struct ConditionRef : ConditionBase
{
  using ConditionBase::ConditionBase;

  /**
   * Copy constructor.
   */
  constexpr ConditionRef(const ConditionRef& other)
    : ConditionBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr ConditionRef(ConditionRef&& other)
    : ConditionBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~ConditionRef() = default;

  /**
   * Assignment operator.
   */
  ConditionRef& operator=(ConditionRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a condition variable.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ConditionBase.ConditionBase
   */
  void reset(SDL_Condition* newResource = {})
  {
    SDL_DestroyCondition(release(newResource));
  }
};

/**
 * Handle to an owned condition
 *
 * @cat resource
 *
 * @sa ConditionBase
 * @sa ConditionRef
 */
struct Condition : ConditionRef
{
  using ConditionRef::ConditionRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Condition(SDL_Condition* resource = {})
    : ConditionRef(resource)
  {
  }

  constexpr Condition(const Condition& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Condition(Condition&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Condition() { reset(); }

  /**
   * Assignment operator.
   */
  Condition& operator=(Condition other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * The current status of an InitState structure.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using InitStatus = SDL_InitStatus;

constexpr InitStatus INIT_STATUS_UNINITIALIZED =
  SDL_INIT_STATUS_UNINITIALIZED; ///< INIT_STATUS_UNINITIALIZED

constexpr InitStatus INIT_STATUS_INITIALIZING =
  SDL_INIT_STATUS_INITIALIZING; ///< INIT_STATUS_INITIALIZING

constexpr InitStatus INIT_STATUS_INITIALIZED =
  SDL_INIT_STATUS_INITIALIZED; ///< INIT_STATUS_INITIALIZED

constexpr InitStatus INIT_STATUS_UNINITIALIZING =
  SDL_INIT_STATUS_UNINITIALIZING; ///< INIT_STATUS_UNINITIALIZING

/**
 * A structure used for thread-safe initialization and shutdown.
 *
 * Here is an example of using this:
 *
 * ```cpp
 *    static SDL::InitState init;
 *
 *    bool InitSystem(void)
 *    {
 *        if (!InitState.ShouldInit(&init)) {
 *            // The system is initialized
 *            return true;
 *        }
 *
 *        // At this point, you should not leave this function without calling
 * InitState.SetInitialized()
 *
 *        bool initialized = DoInitTasks();
 *        InitState.SetInitialized(&init, initialized);
 *        return initialized;
 *    }
 *
 *    bool UseSubsystem(void)
 *    {
 *        if (InitState.ShouldInit(&init)) {
 *            // Error, the subsystem isn't initialized
 *            InitState.SetInitialized(&init, false);
 *            return false;
 *        }
 *
 *        // Do work using the initialized subsystem
 *
 *        return true;
 *    }
 *
 *    void QuitSystem(void)
 *    {
 *        if (!InitState.ShouldQuit(&init)) {
 *            // The system is not initialized
 *            return;
 *        }
 *
 *        // At this point, you should not leave this function without calling
 * InitState.SetInitialized()
 *
 *        DoQuitTasks();
 *        InitState.SetInitialized(&init, false);
 *    }
 * ```
 *
 * Note that this doesn't protect any resources created during initialization,
 * or guarantee that nobody is using those resources during cleanup. You
 * should use other mechanisms to protect those, if that's a concern for your
 * code.
 *
 * @since This struct is available since SDL 3.2.0.
 */
struct InitState : SDL_InitState
{
  /**
   * Default comparison operator
   */
  constexpr bool operator==(const InitState& other) const = default;

  /**
   * Constructor
   */
  constexpr InitState()
    : SDL_InitState{0}
  {
  }

  /**
   * Return whether initialization should be done.
   *
   * This function checks the passed in state and if initialization should be
   * done, sets the status to `INIT_STATUS_INITIALIZING` and returns true.
   * If another thread is already modifying this state, it will wait until
   * that's done before returning.
   *
   * If this function returns true, the calling code must call
   * InitState.SetInitialized() to complete the initialization.
   *
   * @returns true if initialization needs to be done, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa InitState.SetInitialized
   * @sa InitState.ShouldQuit
   */
  bool ShouldInit() { return SDL_ShouldInit(this); }

  /**
   * Return whether cleanup should be done.
   *
   * This function checks the passed in state and if cleanup should be done,
   * sets the status to `INIT_STATUS_UNINITIALIZING` and returns true.
   *
   * If this function returns true, the calling code must call
   * InitState.SetInitialized() to complete the cleanup.
   *
   * @returns true if cleanup needs to be done, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa InitState.SetInitialized
   * @sa InitState.ShouldInit
   */
  bool ShouldQuit() { return SDL_ShouldQuit(this); }

  /**
   * Finish an initialization state transition.
   *
   * This function sets the status of the passed in state to
   * `INIT_STATUS_INITIALIZED` or `INIT_STATUS_UNINITIALIZED` and allows
   * any threads waiting for the status to proceed.
   *
   * @param initialized the new initialization state.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa InitState.ShouldInit
   * @sa InitState.ShouldQuit
   */
  void SetInitialized(bool initialized)
  {
    SDL_SetInitialized(this, initialized);
  }
};

/// @}

/**
 * @defgroup CategorySurface Surface Creation and Simple Drawing
 *
 * SDL surfaces are buffers of pixels in system RAM. These are useful for
 * passing around and manipulating images that are not stored in GPU memory.
 *
 * SDL_Surface makes serious efforts to manage images in various formats, and
 * provides a reasonable toolbox for transforming the data, including copying
 * between surfaces, filling rectangles in the image data, etc.
 *
 * There is also a simple .bmp loader, SDL::LoadBMP(). SDL itself does not
 * provide loaders for various other file formats, but there are several
 * excellent external libraries that do, including its own satellite library,
 * SDL_image:
 *
 * https://github.com/libsdl-org/SDL_image
 * @{
 */

// Forward decl
struct SurfaceLock;

// Forward decl
struct SurfaceBase;

// Forward decl
struct SurfaceRef;

// Forward decl
struct Surface;

/**
 * The flags on an SurfaceBase.
 *
 * These are generally considered read-only.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using SurfaceFlags = Uint32;

constexpr SurfaceFlags SURFACE_PREALLOCATED =
  SDL_SURFACE_PREALLOCATED; ///< Surface uses preallocated pixel memory

constexpr SurfaceFlags SURFACE_LOCK_NEEDED =
  SDL_SURFACE_LOCK_NEEDED; ///< Surface needs to be locked to access pixels

constexpr SurfaceFlags SURFACE_LOCKED =
  SDL_SURFACE_LOCKED; ///< Surface is currently locked

/**
 * Surface uses pixel memory allocated with aligned_alloc()
 */
constexpr SurfaceFlags SURFACE_SIMD_ALIGNED = SDL_SURFACE_SIMD_ALIGNED;

/**
 * The scaling mode.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using ScaleMode = SDL_ScaleMode;

#if SDL_VERSION_ATLEAST(3, 2, 10)

/**
 * @since SDL 3.2.10
 */
constexpr ScaleMode SCALEMODE_INVALID = SDL_SCALEMODE_INVALID;

#endif // SDL_VERSION_ATLEAST(3, 2, 10)

constexpr ScaleMode SCALEMODE_NEAREST =
  SDL_SCALEMODE_NEAREST; ///< nearest pixel sampling

constexpr ScaleMode SCALEMODE_LINEAR =
  SDL_SCALEMODE_LINEAR; ///< linear filtering

/**
 * The flip mode.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using FlipMode = SDL_FlipMode;

constexpr FlipMode FLIP_NONE = SDL_FLIP_NONE; ///< Do not flip.

constexpr FlipMode FLIP_HORIZONTAL = SDL_FLIP_HORIZONTAL; ///< flip horizontally

constexpr FlipMode FLIP_VERTICAL = SDL_FLIP_VERTICAL; ///< flip vertically

/**
 * A collection of pixels used in software blitting.
 *
 * Pixels are arranged in memory in rows, with the top row first. Each row
 * occupies an amount of memory given by the pitch (sometimes known as the row
 * stride in non-SDL APIs).
 *
 * Within each row, pixels are arranged from left to right until the width is
 * reached. Each pixel occupies a number of bits appropriate for its format,
 * with most formats representing each pixel as one or more whole bytes (in
 * some indexed formats, instead multiple pixels are packed into each byte),
 * and a byte order given by the format. After encoding all pixels, any
 * remaining bytes to reach the pitch are used as padding to reach a desired
 * alignment, and have undefined contents.
 *
 * When a surface holds YUV format data, the planes are assumed to be
 * contiguous without padding between them, e.g. a 32x32 surface in NV12
 * format with a pitch of 32 would consist of 32x32 bytes of Y plane followed
 * by 32x16 bytes of UV plane.
 *
 * When a surface holds MJPG format data, pixels points at the compressed JPEG
 * image and pitch is the length of that data.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa SurfaceBase.SurfaceBase
 * @sa SurfaceRef.reset
 *
 * @cat resource
 *
 * @sa Surface
 * @sa SurfaceRef
 */
struct SurfaceBase : Resource<SDL_Surface*>
{
  using Resource::Resource;

  /**
   * Load an image from a filesystem path into a software surface.
   *
   * If available, this uses LoadSurface(StringParam), otherwise it uses
   * LoadBMP(StringParam).
   *
   * @param file a path on the filesystem to load an image from.
   * @post the new SurfaceBase structure that is created or nullptr on failure;
   *       call GetError() for more information.
   *
   * @sa LoadSurface(StringParam)
   * @sa LoadBMP(StringParam)
   */
  SurfaceBase(StringParam file);

  /**
   * Load an image from a IOStreamBase into a software surface.
   *
   * If available, this uses LoadSurface(IOStreamBase&), otherwise it uses
   * LoadBMP(IOStreamBase&).
   *
   * @param src an IOStreamBase to load an image from.
   * @post the new SurfaceBase structure that is created or nullptr on failure;
   *       call GetError() for more information.
   *
   * @sa LoadSurface(StringParam)
   * @sa LoadBMP(StringParam)
   */
  SurfaceBase(IOStreamBase& src);

  /**
   * Allocate a new surface with a specific pixel format.
   *
   * The pixels of the new surface are initialized to zero.
   *
   * @param width the width of the surface.
   * @param height the height of the surface.
   * @param format the PixelFormat for the new surface's pixel format.
   * @post the new SurfaceBase structure that is created or nullptr on failure;
   *       call GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  SurfaceBase(int width, int height, PixelFormat format)
    : Resource(SDL_CreateSurface(width, height, format))
  {
  }

  /**
   * Allocate a new surface with a specific pixel format and existing pixel
   * data.
   *
   * No copy is made of the pixel data. Pixel data is not managed automatically;
   * you must free the surface before you free the pixel data.
   *
   * Pitch is the offset in bytes from one row of pixels to the next, e.g.
   * `width*4` for `PIXELFORMAT_RGBA8888`.
   *
   * You may pass nullptr for pixels and 0 for pitch to create a surface that
   * you will fill in with valid values later.
   *
   * @param width the width of the surface.
   * @param height the height of the surface.
   * @param format the PixelFormat for the new surface's pixel format.
   * @param pixels a pointer to existing pixel data.
   * @param pitch the number of bytes between each row, including padding.
   * @post the new SurfaceBase structure that is created or nullptr on failure;
   *       call GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  SurfaceBase(int width,
              int height,
              PixelFormat format,
              void* pixels,
              int pitch)
    : Resource(SDL_CreateSurfaceFrom(width, height, format, pixels, pitch))
  {
  }

  /**
   * Get the properties associated with a surface.
   *
   * The following properties are understood by SDL:
   *
   * - `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point
   *   surfaces, this defines the value of 100% diffuse white, with higher
   *   values being displayed in the High Dynamic Range headroom. This defaults
   *   to 203 for HDR10 surfaces and 1.0 for floating point surfaces.
   * - `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point
   *   surfaces, this defines the maximum dynamic range used by the content, in
   *   terms of the SDR white point. This defaults to 0.0, which disables tone
   *   mapping.
   * - `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator
   *   used when compressing from a surface with high dynamic range to another
   *   with lower dynamic range. Currently this supports "chrome", which uses
   *   the same tone mapping that Chrome uses for HDR content, the form "*=N",
   *   where N is a floating point scale factor applied in linear space, and
   *   "none", which disables tone mapping. This defaults to "chrome".
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PropertiesRef GetProperties() const
  {
    return PropertiesRef{SDL_GetSurfaceProperties(get())};
  }

  /**
   * Set the colorspace used by a surface.
   *
   * Setting the colorspace doesn't change the pixels, only how they are
   * interpreted in color operations.
   *
   * @param colorspace a Colorspace value describing the surface colorspace.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetColorspace()
   */
  bool SetColorspace(Colorspace colorspace)
  {
    return SDL_SetSurfaceColorspace(get(), colorspace);
  }

  /**
   * Get the colorspace used by a surface.
   *
   * The colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point
   * formats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for
   * other RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.
   *
   * @returns the colorspace used by the surface, or SDL_COLORSPACE_UNKNOWN if
   *          the surface is NULL.
   */
  Colorspace GetColorspace() const { return SDL_GetSurfaceColorspace(get()); }

  /**
   * Create a palette and associate it with a surface.
   *
   * This function creates a palette compatible with the provided surface. The
   * palette is then returned for you to modify, and the surface will
   * automatically use the new palette in future operations. You do not need to
   * destroy the returned palette, it will be freed when the reference count
   * reaches 0, usually when the surface is destroyed.
   *
   * Bitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or
   * SDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as
   * white and 1 as black. Other surfaces will get a palette initialized with
   * white in every entry.
   *
   * If this function is called for a surface that already has a palette, a new
   * palette will be created to replace it.
   *
   * @returns a new SDL_Palette structure on success or NULL on failure (e.g. if
   *          the surface didn't have an index format); call GetError() for
   *          more information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Palette.SetColors()
   */
  PaletteRef CreatePalette() { return SDL_CreateSurfacePalette(get()); }

  /**
   * Set the palette used by a surface.
   *
   * A single palette can be shared with many surfaces.
   *
   * @param palette the Palette to use.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa PaletteBase.PaletteBase
   * @sa SurfaceBase.GetPalette
   */
  bool SetPalette(PaletteBase& palette)
  {
    return SDL_SetSurfacePalette(get(), palette.get());
  }

  /**
   * Get the palette used by a surface.
   *
   * @returns a pointer to the palette used by the surface, or NULL if there is
   *          no palette used.
   */
  PaletteRef GetPalette() const { return SDL_GetSurfacePalette(get()); }

  /**
   * Add an alternate version of a surface.
   *
   * This function adds an alternate version of this surface, usually used for
   * content with high DPI representations like cursors or icons. The size,
   * format, and content do not need to match the original surface, and these
   * alternate versions will not be updated when the original surface changes.
   *
   * This function adds a reference to the alternate version, so you should call
   * SurfaceRef.reset() on the image after this call.
   *
   * @param image an alternate SurfaceBase to associate with this
   *              surface.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.RemoveAlternateImages
   * @sa SurfaceBase.GetImages
   * @sa SurfaceBase.HasAlternateImages
   */
  bool AddAlternateImage(SurfaceBase& image)
  {
    return SDL_AddSurfaceAlternateImage(get(), image.get());
  }

  /**
   * Return whether a surface has alternate versions available.
   *
   * @returns true if alternate versions are available or false otherwise.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AddAlternateImage()
   * @sa RemoveAlternateImages()
   * @sa GetImages()
   */
  bool HasAlternateImages() const
  {
    return SDL_SurfaceHasAlternateImages(get());
  }

  /**
   * Get an array including all versions of a surface.
   *
   * This returns all versions of a surface, with the surface being queried as
   * the first element in the returned array.
   *
   * @returns a NULL terminated array of SDL_Surface pointers or NULL on
   *          failure; call SDL_GetError() for more information. This should be
   *          freed with SDL_free() when it is no longer needed.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AddAlternateImage()
   * @sa RemoveAlternateImages()
   * @sa HasAlternateImages()
   */
  OwnArray<SurfaceRef> GetImages() const
  {
    int count = 0;
    auto data =
      reinterpret_cast<SurfaceRef*>(SDL_GetSurfaceImages(get(), &count));
    return OwnArray<SurfaceRef>{data, size_t(count)};
  }

  /**
   * Remove all alternate versions of a surface.
   *
   * This function removes a reference from all the alternative versions,
   * destroying them if this is the last reference to them.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa AddAlternateImage()
   * @sa GetImages()
   * @sa HasAlternateImages()
   */
  void RemoveAlternateImages() { SDL_RemoveSurfaceAlternateImages(get()); }

  /**
   * Evaluates to true if the surface needs to be locked before access.
   *
   * @since This macro is available since SDL 3.2.0.
   */
  constexpr bool MustLock() const { return SDL_MUSTLOCK(get()); }

  /**
   * Set up a surface for directly accessing the pixels.
   *
   * Between calls to SurfaceBase.Lock() / Unlock(), you can write
   * to and read from `GetPixels()`, using the pixel format stored in
   * `GetFormat()`. Once you are done accessing the surface, you should use
   * Unlock() to release it or let the destructor take care of this
   * for you.
   *
   * Not all surfaces require locking. If `SurfaceBase.MustLock(surface)`
   * evaluates to false, then you can read and write to the surface at any time,
   * and the pixel format of the surface will not change.
   *
   * @returns SurfaceLock object that converts to true on success or false on
   * failure; call GetError() for more information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa MustLock()
   * @sa SurfaceLock.Unlock()
   */
  SurfaceLock Lock() &;

  /**
   * Set the RLE acceleration hint for a surface.
   *
   * If RLE is enabled, color key and alpha blending blits are much faster, but
   * the surface must be locked before directly accessing the pixels.
   *
   * @param enabled true to enable RLE acceleration, false to disable it.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool SetRLE(bool enabled) { return SDL_SetSurfaceRLE(get(), enabled); }

  /**
   * Returns whether the surface is RLE enabled.
   *
   * @returns true if the surface is RLE enabled, false otherwise.
   */
  bool HasRLE() const { return SDL_SurfaceHasRLE(get()); }

  /**
   * Set the color key (transparent pixel) in a surface.
   *
   * The color key defines a pixel value that will be treated as transparent in
   * a blit. For example, one can use this to specify that cyan pixels should be
   * considered transparent, and therefore not rendered.
   *
   * It is a pixel of the format used by the surface, as generated by
   * SDL_MapRGB().
   *
   * @param key the transparent pixel color.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetColorKey()
   * @sa SetRLE()
   * @sa HasColorKey()
   */
  bool SetColorKey(Color key) { return SetColorKey(MapColor(key)); }

  /**
   * Set the color key (transparent pixel) in a surface.
   *
   * The color key defines a pixel value that will be treated as transparent in
   * a blit. For example, one can use this to specify that cyan pixels should be
   * considered transparent, and therefore not rendered.
   *
   * It is a pixel of the format used by the surface, as generated by
   * SDL_MapRGB().
   *
   * @param key the transparent pixel or std::nullopt to disable it.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetColorKey()
   * @sa SetRLE()
   * @sa HasColorKey()
   */
  bool SetColorKey(std::optional<Uint32> key)
  {
    return SDL_SetSurfaceColorKey(get(), key.has_value(), key.value_or(0));
  }

  /**
   * Unset the color key (transparent pixel) in a surface.
   *
   * The color key defines a pixel value that will be treated as transparent in
   * a blit. For example, one can use this to specify that cyan pixels should be
   * considered transparent, and therefore not rendered.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool ClearColorKey() { return SDL_SetSurfaceColorKey(get(), false, 0); }

  /**
   * Returns whether the surface has a color key.
   *
   * @returns true if the surface has a color key, false otherwise.
   */
  bool HasColorKey() const { return SDL_SurfaceHasColorKey(get()); }

  /**
   * Get the color key (transparent pixel) for a surface.
   *
   * The color key is a pixel of the format used by the surface, as generated by
   * MapRGB().
   *
   * If the surface doesn't have color key enabled this function returns
   * std::nullopt.
   *
   * @returns the color key as Color or std::nullopt if it does not have one.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetColorKey()
   * @sa HasColorKey()
   */
  std::optional<Color> GetColorKey() const
  {
    if (Color color; GetColorKey(&color)) return color;
    return std::nullopt;
  }

  /**
   * Get the color key (transparent pixel) for a surface.
   *
   * The color key is a pixel of the format used by the surface, as generated by
   * SDL_MapRGB().
   *
   * If the surface doesn't have color key enabled this function returns false.
   *
   * @param key a pointer filled in with the transparent pixel.
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetColorKey()
   * @sa HasColorKey()
   */
  bool GetColorKey(Color* key) const
  {
    if (Uint32 color; GetColorKey(&color)) {
      *key = GetFormat().Get(color, GetPalette());
      return true;
    }
    return false;
  }

  /**
   * Get the color key (transparent pixel) for a surface.
   *
   * The color key is a pixel of the format used by the surface, as generated by
   * SDL_MapRGB().
   *
   * If the surface doesn't have color key enabled this function returns false.
   *
   * @param key a pointer filled in with the transparent pixel.
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetColorKey()
   * @sa HasColorKey()
   */
  bool GetColorKey(Uint32* key) const
  {
    return SDL_GetSurfaceColorKey(get(), key);
  }

  /**
   * Set an additional color value multiplied into blit operations.
   *
   * When this surface is blitted, during the blit operation each source color
   * channel is modulated by the appropriate color value according to the
   * following formula:
   *
   * `srcC = srcC * (color / 255)`
   *
   * @param r the red color value multiplied into blit operations.
   * @param g the green color value multiplied into blit operations.
   * @param b the blue color value multiplied into blit operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool SetColorMod(Uint8 r, Uint8 g, Uint8 b)
  {
    return SDL_SetSurfaceColorMod(get(), r, g, b);
  }

  /**
   * Get the additional color value multiplied into blit operations.
   *
   * @param r a pointer filled in with the current red color value.
   * @param g a pointer filled in with the current green color value.
   * @param b a pointer filled in with the current blue color value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool GetColorMod(Uint8* r, Uint8* g, Uint8* b) const
  {
    return SDL_GetSurfaceColorMod(get(), r, g, b);
  }

  /**
   * Set an additional alpha value used in blit operations.
   *
   * When this surface is blitted, during the blit operation the source alpha
   * value is modulated by this alpha value according to the following formula:
   *
   * `srcA = srcA * (alpha / 255)`
   *
   * @param alpha the alpha value multiplied into blit operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool SetAlphaMod(Uint8 alpha) { return SDL_SetSurfaceAlphaMod(get(), alpha); }

  /**
   * Get the additional alpha value used in blit operations.
   *
   * @returns alpha on success or std::nullopt on failure; call GetError()
   * for more information.
   */
  std::optional<Uint8> GetAlphaMod() const
  {
    if (Uint8 alpha; SDL_GetSurfaceAlphaMod(get(), &alpha)) return alpha;
    return std::nullopt;
  }

  /**
   * Set an additional color and alpha value multiplied into blit
   * operations.
   *
   * When this surface is blitted, during the blit operation each source color
   * channel is modulated by the appropriate color value according to the
   * following formula:
   *
   * `srcC = srcC * (color / 255)`
   * `srcA = srcA * (alpha / 255)`
   *
   * @param color the color to be multiplied in blit operations
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool SetColorAndAlphaMod(Color color)
  {
    return SetColorMod(color.r, color.g, color.b) && SetAlphaMod(color.a);
  }

  /**
   * Get the additional color and alpha value multiplied into blit
   * operations.
   *
   * @returns a Color containing RGBA value on success or std::nullopt on
   * failure; call GetError() for more information.
   */
  std::optional<Color> GetColorAndAlphaMod() const
  {
    if (Color c;
        GetColorMod(&c.r, &c.g, &c.b) && SDL_GetSurfaceAlphaMod(get(), &c.a)) {
      return c;
    }
    return std::nullopt;
  }

  /**
   * Set the blend mode used for blit operations.
   *
   * To copy a surface to another surface (or texture) without blending with the
   * existing data, the blendmode of the SOURCE surface should be set to
   * `SDL_BLENDMODE_NONE`.
   *
   * @param blendMode the SDL_BlendMode to use for blit blending.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetBlendMode()
   */
  bool SetBlendMode(BlendMode blendMode)
  {
    return SDL_SetSurfaceBlendMode(get(), blendMode);
  }

  /**
   * Get the blend mode used for blit operations.
   *
   * @return the blendMode on success or BLENDMODE_INVALID on failure; call
   * GetError() for more information.
   */
  BlendMode GetBlendMode() const
  {
    if (BlendMode blendMode; SDL_GetSurfaceBlendMode(get(), &blendMode)) {
      return blendMode;
    }
    return BLENDMODE_INVALID;
  }

  /**
   * Set the clipping rectangle for a surface.
   *
   * When `surface` is the destination of a blit, only the area within the clip
   * rectangle is drawn into.
   *
   * Note that blits are automatically clipped to the edges of the source and
   * destination surfaces.
   *
   * @param rect the SDL_Rect structure representing the clipping rectangle or
   *        nullopt to disable it
   * @returns true if the rectangle intersects the surface, otherwise false and
   *          blits will be completely clipped.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ResetClipRect()
   */
  bool SetClipRect(OptionalRef<const SDL_Rect> rect)
  {
    return SDL_SetSurfaceClipRect(get(), rect);
  }

  /**
   * Disable the clipping rectangle for a surface.
   *
   * @returns true if clips was reset successfully
   *
   * @sa SetClipRect()
   */
  bool ResetClipRect() { return SDL_SetSurfaceClipRect(get(), nullptr); }

  /**
   * Get the clipping rectangle for a surface.
   *
   * When `surface` is the destination of a blit, only the area within the clip
   * rectangle is drawn into.
   *
   * @returns the Rect structure filled in with the clipping rectangle for the
   * surface on success, or false on failure; call GetError() for
   * more information.
   */
  Rect GetClipRect() const
  {
    if (Rect r; SDL_GetSurfaceClipRect(get(), &r)) return r;
    return {};
  }

  /**
   * Flip a surface vertically or horizontally.
   *
   * @param flip the direction to flip.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Flip(FlipMode flip) { return SDL_FlipSurface(get(), flip); }

  /**
   * Creates a new surface identical to the existing surface.
   *
   * If the original surface has alternate images, the new surface will have a
   * reference to them as well.
   *
   * @returns a copy of the surface or nullptr on failure; call GetError() for
   *          more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceRef.reset
   */
  Surface Duplicate() const;

  /**
   * Creates a new surface identical to the existing surface, scaled to the
   * desired size.
   *
   * @param width the width of the new surface.
   * @param height the height of the new surface.
   * @param scaleMode the ScaleMode to be used.
   * @returns a copy of the surface or nullptr on failure; call GetError() for
   *          more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceRef.reset
   */
  Surface Scale(int width, int height, ScaleMode scaleMode) const;

  /**
   * Copy an existing surface to a new surface of the specified format.
   *
   * This function is used to optimize images for faster *repeat* blitting. This
   * is accomplished by converting the original and storing the result as a new
   * surface. The new, optimized surface can then be used as the source for
   * future blits, making them faster.
   *
   * If you are converting to an indexed surface and want to map colors to a
   * palette, you can use SurfaceBase.Convert() instead.
   *
   * If the original surface has alternate images, the new surface will have a
   * reference to them as well.
   *
   * @param format the new pixel format.
   * @returns the new SurfaceBase structure that is created or nullptr on
   * failure; call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Convert
   * @sa SurfaceRef.reset
   */
  Surface Convert(PixelFormat format) const;

  /**
   * Copy an existing surface to a new surface of the specified format and
   * colorspace.
   *
   * This function converts an existing surface to a new format and colorspace
   * and returns the new surface. This will perform any pixel format and
   * colorspace conversion needed.
   *
   * If the original surface has alternate images, the new surface will have a
   * reference to them as well.
   *
   * @param format the new pixel format.
   * @param palette an optional palette to use for indexed formats, may be
   *                nullptr.
   * @param colorspace the new colorspace.
   * @param props an PropertiesBase with additional color properties, or 0.
   * @returns the new SurfaceBase structure that is created or nullptr on
   * failure; call GetError() for more information.
   *
   * @threadsafety This function is not thread safe.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Convert
   * @sa SurfaceRef.reset
   */
  Surface Convert(PixelFormat format,
                  PaletteBase& palette,
                  Colorspace colorspace,
                  PropertiesBase& props) const;

  /**
   * Premultiply the alpha in a surface.
   *
   * This is safe to use with src == dst, but not for other overlapping areas.
   *
   * @param linear true to convert from sRGB to linear space for the alpha
   *               multiplication, false to do multiplication in sRGB space.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool PremultiplyAlpha(bool linear)
  {
    return SDL_PremultiplySurfaceAlpha(get(), linear);
  }

  // TODO SDL_ConvertSurfaceAndColorspace

  /**
   * Clear a surface with a specific color, with floating point precision.
   *
   * This function handles all surface formats, and ignores any clip rectangle.
   *
   * If the surface is YUV, the color is assumed to be in the sRGB colorspace,
   * otherwise the color is assumed to be in the colorspace of the surface.
   *
   * @param color the color of the pixel, normally in the range 0-1.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Clear(SDL_FColor color)
  {
    return SDL_ClearSurface(get(), color.r, color.g, color.b, color.a);
  }

  /**
   * Perform a fast fill of a rectangle with a specific color.
   *
   * `color` should be a pixel of the format used by the surface, and can be
   * generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
   * alpha component then the destination is simply filled with that alpha
   * information, no blending takes place.
   *
   * If there is a clip rectangle set on the destination (set via
   * SDL_SetSurfaceClipRect()), then this function will fill based on the
   * the clip rectangle.
   *
   * @param color the color to fill with.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool Fill(SDL_Color color) { return Fill(MapColor(color)); }

  /**
   * Perform a fast fill of a rectangle with a specific color.
   *
   * `color` should be a pixel of the format used by the surface, and can be
   * generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
   * alpha component then the destination is simply filled with that alpha
   * information, no blending takes place.
   *
   * If there is a clip rectangle set on the destination (set via
   * SDL_SetSurfaceClipRect()), then this function will fill based on the
   * the clip rectangle.
   *
   * @param color the color to fill with.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool Fill(Uint32 color) { return SDL_FillSurfaceRect(get(), nullptr, color); }

  /**
   * Perform a fast fill of a rectangle with a specific color.
   *
   * If there is a clip rectangle set on the destination (set via
   * SDL_SetSurfaceClipRect()), then this function will fill based on the
   * intersection of the clip rectangle and `rect`.
   *
   * @param rect the SDL_Rect structure representing the rectangle to fill.
   * @param color the color to fill with.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool FillRect(const SDL_Rect& rect, SDL_Color color)
  {
    return FillRect(rect, MapColor(color));
  }

  /**
   * Perform a fast fill of a rectangle with a specific color.
   *
   * `color` should be a pixel of the format used by the surface, and can be
   * generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
   * alpha component then the destination is simply filled with that alpha
   * information, no blending takes place.
   *
   * If there is a clip rectangle set on the destination (set via
   * SDL_SetSurfaceClipRect()), then this function will fill based on the
   * intersection of the clip rectangle and `rect`.
   *
   * @param rect the SDL_Rect structure representing the rectangle to fill.
   * @param color the color to fill with.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool FillRect(const SDL_Rect& rect, Uint32 color)
  {
    return SDL_FillSurfaceRect(get(), &rect, color);
  }

  /**
   * Perform a fast fill of a set of rectangles with a specific color.
   *
   * If there is a clip rectangle set on the destination (set via
   * SDL_SetSurfaceClipRect()), then this function will fill based on the
   * intersection of the clip rectangle and `rect`.
   *
   * @param rects an array of SDL_Rects representing the rectangles to fill.
   * @param color the color to fill with.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa FillRect()
   */
  bool FillRects(SpanRef<const SDL_Rect> rects, SDL_Color color)
  {
    return FillRects(rects, MapColor(color));
  }

  /**
   * Perform a fast fill of a set of rectangles with a specific color.
   *
   * `color` should be a pixel of the format used by the surface, and can be
   * generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
   * alpha component then the destination is simply filled with that alpha
   * information, no blending takes place.
   *
   * If there is a clip rectangle set on the destination (set via
   * SDL_SetSurfaceClipRect()), then this function will fill based on the
   * intersection of the clip rectangle and `rect`.
   *
   * @param rects an array of SDL_Rects representing the rectangles to fill.
   * @param color the color to fill with.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa FillRect()
   */
  bool FillRects(SpanRef<const SDL_Rect> rects, Uint32 color)
  {
    SDL_assert_paranoid(rects.size() < SDL_MAX_UINT32);
    return SDL_FillSurfaceRects(get(), rects.data(), rects.size(), color);
  }

  /**
   * Performs a fast blit from the source surface to the destination surface
   * with clipping.
   *
   * If either `srcrect` or `dstrect` are NULL, the entire surface (`src` or
   * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
   *
   * The final blit rectangles are saved in `srcrect` and `dstrect` after all
   * clipping is performed.
   *
   * The blit function should not be called on a locked surface.
   *
   * The blit semantics for surfaces with and without blending and colorkey are
   * defined as follows:
   *
   * ```
   *    RGBA->RGB:
   *      Source surface blend mode set to SDL_BLENDMODE_BLEND:
   *       alpha-blend (using the source alpha-channel and per-surface alpha)
   *       SDL_SRCCOLORKEY ignored.
   *     Source surface blend mode set to SDL_BLENDMODE_NONE:
   *       copy RGB.
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       RGB values of the source color key, ignoring alpha in the
   *       comparison.
   *
   *   RGB->RGBA:
   *     Source surface blend mode set to SDL_BLENDMODE_BLEND:
   *       alpha-blend (using the source per-surface alpha)
   *     Source surface blend mode set to SDL_BLENDMODE_NONE:
   *       copy RGB, set destination alpha to source per-surface alpha value.
   *     both:
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       source color key.
   *
   *   RGBA->RGBA:
   *     Source surface blend mode set to SDL_BLENDMODE_BLEND:
   *       alpha-blend (using the source alpha-channel and per-surface alpha)
   *       SDL_SRCCOLORKEY ignored.
   *     Source surface blend mode set to SDL_BLENDMODE_NONE:
   *       copy all of RGBA to the destination.
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       RGB values of the source color key, ignoring alpha in the
   *       comparison.
   *
   *   RGB->RGB:
   *     Source surface blend mode set to SDL_BLENDMODE_BLEND:
   *       alpha-blend (using the source per-surface alpha)
   *     Source surface blend mode set to SDL_BLENDMODE_NONE:
   *       copy RGB.
   *     both:
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       source color key.
   * ```
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param srcrect the SDL_Rect structure representing the rectangle to be
   *                copied, or NULL to copy the entire surface.
   * @param dstpos  the SDL_Point structure representing the x and y position in
   *                the destination surface, or NULL for (0,0). The width and
   *                height are ignored, and are copied from `srcrect`. If you
   *                want a specific width and height, you should use
   *                SDL_BlitSurfaceScaled().
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @threadsafety The same destination surface should not be used from two
   *               threads at once. It is safe to use the same source surface
   *               from multiple threads.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa BlitScaled()
   */
  bool Blit(const SurfaceBase& src,
            OptionalRef<const SDL_Rect> srcrect,
            const SDL_Point& dstpos)
  {
    return Blit(src, srcrect, Rect{dstpos, {}});
  }

  /**
   * Performs a fast blit from the source surface to the destination surface
   * with clipping.
   *
   * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
   * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
   *
   * The final blit rectangles are saved in `srcrect` and `dstrect` after all
   * clipping is performed.
   *
   * The blit function should not be called on a locked surface.
   *
   * The blit semantics for surfaces with and without blending and colorkey are
   * defined as follows:
   *
   * ```
   *    RGBA->RGB:
   *      Source surface blend mode set to BLENDMODE_BLEND:
   *       alpha-blend (using the source alpha-channel and per-surface alpha)
   *       SDL_SRCCOLORKEY ignored.
   *     Source surface blend mode set to BLENDMODE_NONE:
   *       copy RGB.
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       RGB values of the source color key, ignoring alpha in the
   *       comparison.
   *
   *   RGB->RGBA:
   *     Source surface blend mode set to BLENDMODE_BLEND:
   *       alpha-blend (using the source per-surface alpha)
   *     Source surface blend mode set to BLENDMODE_NONE:
   *       copy RGB, set destination alpha to source per-surface alpha value.
   *     both:
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       source color key.
   *
   *   RGBA->RGBA:
   *     Source surface blend mode set to BLENDMODE_BLEND:
   *       alpha-blend (using the source alpha-channel and per-surface alpha)
   *       SDL_SRCCOLORKEY ignored.
   *     Source surface blend mode set to BLENDMODE_NONE:
   *       copy all of RGBA to the destination.
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       RGB values of the source color key, ignoring alpha in the
   *       comparison.
   *
   *   RGB->RGB:
   *     Source surface blend mode set to BLENDMODE_BLEND:
   *       alpha-blend (using the source per-surface alpha)
   *     Source surface blend mode set to BLENDMODE_NONE:
   *       copy RGB.
   *     both:
   *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
   *       source color key.
   * ```
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param srcrect the SDL_Rect structure representing the rectangle to be
   *                copied, or NULL to copy the entire surface.
   * @param dstrect the SDL_Point structure representing the x and y position in
   *                the destination surface, or NULL for (0,0). The width and
   *                height are ignored, and are copied from `srcrect`. If you
   *                want a specific width and height, you should use
   *                SurfaceBase.BlitScaled().
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.BlitScaled
   */
  bool Blit(const SurfaceBase& src,
            OptionalRef<const SDL_Rect> srcrect,
            OptionalRef<const SDL_Rect> dstrect)
  {
    return SDL_BlitSurface(src.get(), srcrect, get(), dstrect);
  }

  /**
   * Perform low-level surface blitting only.
   *
   * This is a semi-private blit function and it performs low-level surface
   * blitting, assuming the input rectangles have already been clipped.
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param srcrect the SDL_Rect structure representing the rectangle to be
   *                copied, may not be NULL.
   * @param dstrect the SDL_Rect structure representing the target rectangle in
   *                the destination surface, may not be NULL.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Blit
   */
  bool BlitUnchecked(const SurfaceBase& src,
                     const SDL_Rect& srcrect,
                     const SDL_Rect& dstrect)
  {
    return SDL_BlitSurfaceUnchecked(src.get(), &srcrect, get(), &dstrect);
  }

  /**
   * Perform a scaled blit to a destination surface, which may be of a different
   * format.
   *
   * @param src the Surface structure to be copied from.
   * @param srcrect the Rect structure representing the rectangle to be
   *                copied, or nullptr to copy the entire surface.
   * @param dstrect the Rect structure representing the target rectangle in
   *                the destination surface, or nullptr to fill the entire
   *                destination surface.
   * @param scaleMode the ScaleMode to be used.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Blit
   */
  bool BlitScaled(const SurfaceBase& src,
                  OptionalRef<const SDL_Rect> srcrect,
                  OptionalRef<const SDL_Rect> dstrect,
                  ScaleMode scaleMode)
  {
    return SDL_BlitSurfaceScaled(src.get(), srcrect, get(), dstrect, scaleMode);
  }

  /**
   * Perform low-level surface scaled blitting only.
   *
   * This is a semi-private function and it performs low-level surface blitting,
   * assuming the input rectangles have already been clipped.
   *
   * @param src the Surface structure to be copied from.
   * @param srcrect the Rect structure representing the rectangle to be
   *                copied, may not be nullptr.
   * @param dstrect the SDL_Rect structure representing the target rectangle in
   *                the destination surface, may not be nullptr.
   * @param scaleMode the ScaleMode to be used.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.BlitScaled
   */
  bool BlitUncheckedScaled(const SurfaceBase& src,
                           const SDL_Rect& srcrect,
                           const SDL_Rect& dstrect,
                           ScaleMode scaleMode)
  {
    return SDL_BlitSurfaceScaled(
      src.get(), &srcrect, get(), &dstrect, scaleMode);
  }

#if SDL_VERSION_ATLEAST(3, 2, 4)

  /**
   * Perform a stretched pixel copy from one surface to another.
   *
   * @param src the Surface structure to be copied from.
   * @param srcrect the Rect structure representing the rectangle to be
   *                copied.
   * @param dstrect the Rect structure representing the target rectangle in
   *                the destination surface, may not be nullptr.
   * @param scaleMode the ScaleMode to be used.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.4.
   *
   * @sa SurfaceBase.BlitScaled
   */
  bool Stretch(const SurfaceBase& src,
               const SDL_Rect& srcrect,
               const SDL_Rect& dstrect,
               ScaleMode scaleMode)
  {
    return SDL_StretchSurface(src.get(), &srcrect, get(), &dstrect, scaleMode);
  }

#endif // SDL_VERSION_ATLEAST(3, 2, 4)

  /**
   * Perform a tiled blit to a destination surface, which may be of a different
   * format.
   *
   * The pixels in `srcrect` will be repeated as many times as needed to
   * completely fill `dstrect`.
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param srcrect the Rect structure representing the rectangle to be
   *                copied, or nullptr to copy the entire surface.
   * @param dstrect the Rect structure representing the target rectangle in
   *                the destination surface, or nullptr to fill the entire
   *                surface.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Blit
   */
  bool BlitTiled(const SurfaceBase& src,
                 OptionalRef<const SDL_Rect> srcrect,
                 OptionalRef<const SDL_Rect> dstrect)
  {
    return SDL_BlitSurfaceTiled(src.get(), srcrect, get(), dstrect);
  }

  /**
   * Perform a scaled and tiled blit to a destination surface, which may be of a
   * different format.
   *
   * The pixels in `srcrect` will be scaled and repeated as many times as needed
   * to completely fill `dstrect`.
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param srcrect the Rect structure representing the rectangle to be
   *                copied, or nullptr to copy the entire surface.
   * @param scale the scale used to transform srcrect into the destination
   *              rectangle, e.g. a 32x32 texture with a scale of 2 would fill
   *              64x64 tiles.
   * @param scaleMode scale algorithm to be used.
   * @param dstrect the Rect structure representing the target rectangle in
   *                the destination surface, or nullptr to fill the entire
   * surface.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Blit
   */
  bool BlitTiledWithScale(const SurfaceBase& src,
                          OptionalRef<const SDL_Rect> srcrect,
                          float scale,
                          SDL_ScaleMode scaleMode,
                          OptionalRef<const SDL_Rect> dstrect)
  {
    return SDL_BlitSurfaceTiledWithScale(
      src.get(), srcrect, scale, scaleMode, get(), dstrect);
  }

  /**
   * Perform a scaled blit using the 9-grid algorithm to a destination surface,
   * which may be of a different format.
   *
   * The pixels in the source surface are split into a 3x3 grid, using the
   * different corner sizes for each corner, and the sides and center making up
   * the remaining pixels. The corners are then scaled using `scale` and fit
   * into the corners of the destination rectangle. The sides and center are
   * then stretched into place to cover the remaining destination rectangle.
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param left_width the width, in pixels, of the left corners in `srcrect`.
   * @param right_width the width, in pixels, of the right corners in `srcrect`.
   * @param top_height the height, in pixels, of the top corners in `srcrect`.
   * @param bottom_height the height, in pixels, of the bottom corners in
   *                      `srcrect`.
   * @param dstrect the SDL_Rect structure representing the target rectangle in
   *                the destination surface, or NULL to fill the entire surface.
   * @param srcrect the SDL_Rect structure representing the rectangle to be used
   *                for the 9-grid, or NULL to use the entire surface.
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @threadsafety The same destination surface should not be used from two
   *               threads at once. It is safe to use the same source surface
   *               from multiple threads.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Blit()
   */
  bool Blit9Grid(const SurfaceBase& src,
                 OptionalRef<const SDL_Rect> srcrect,
                 int left_width,
                 int right_width,
                 int top_height,
                 int bottom_height,
                 OptionalRef<const SDL_Rect> dstrect)
  {
    return Blit9GridWithScale(src,
                              srcrect,
                              left_width,
                              right_width,
                              top_height,
                              bottom_height,
                              0.0,
                              SDL_SCALEMODE_NEAREST,
                              dstrect);
  }

  /**
   * Perform a scaled blit using the 9-grid algorithm to a destination surface,
   * which may be of a different format.
   *
   * The pixels in the source surface are split into a 3x3 grid, using the
   * different corner sizes for each corner, and the sides and center making up
   * the remaining pixels. The corners are then scaled using `scale` and fit
   * into the corners of the destination rectangle. The sides and center are
   * then stretched into place to cover the remaining destination rectangle.
   *
   * @param src the SDL_Surface structure to be copied from.
   * @param srcrect the Rect structure representing the rectangle to be used
   *                for the 9-grid, or nullptr to use the entire surface.
   * @param left_width the width, in pixels, of the left corners in `srcrect`.
   * @param right_width the width, in pixels, of the right corners in `srcrect`.
   * @param top_height the height, in pixels, of the top corners in `srcrect`.
   * @param bottom_height the height, in pixels, of the bottom corners in
   *                      `srcrect`.
   * @param scale the scale used to transform the corner of `srcrect` into the
   *              corner of `dstrect`, or 0.0f for an unscaled blit.
   * @param scaleMode scale algorithm to be used.
   * @param dstrect the Rect structure representing the target rectangle in
   *                the destination surface, or nullptr to fill the entire
   *                surface.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety Only one thread should be using the `src` and `dst` surfaces
   *               at any given time.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.Blit
   */
  bool Blit9GridWithScale(const SurfaceBase& src,
                          OptionalRef<const SDL_Rect> srcrect,
                          int left_width,
                          int right_width,
                          int top_height,
                          int bottom_height,
                          float scale,
                          SDL_ScaleMode scaleMode,
                          OptionalRef<const SDL_Rect> dstrect)
  {
    return SDL_BlitSurface9Grid(src.get(),
                                srcrect,
                                left_width,
                                right_width,
                                top_height,
                                bottom_height,
                                scale,
                                scaleMode,
                                get(),
                                dstrect);
  }

  /**
   * Map an RGBA quadruple to a pixel value for a surface.
   *
   * This function maps the RGBA color value to the specified pixel format and
   * returns the pixel value best approximating the given RGBA color value for
   * the given pixel format.
   *
   * If the surface pixel format has no alpha component the alpha value will be
   * ignored (as it will be in formats with a palette).
   *
   * If the surface has a palette, the index of the closest matching color in
   * the palette will be returned.
   *
   * If the pixel format bpp (color depth) is less than 32-bpp then the unused
   * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
   * format the return value can be assigned to a Uint16, and similarly a Uint8
   * for an 8-bpp format).
   *
   * @param color the color components
   * @return a pixel value.
   */
  Uint32 MapColor(SDL_Color color) const
  {
    return MapColor(color.r, color.g, color.b, color.a);
  }

  /**
   * Map an RGB triple to an opaque pixel value for a surface.
   *
   * This function maps the RGB color value to the specified pixel format and
   * returns the pixel value best approximating the given RGB color value for
   * the given pixel format.
   *
   * If the surface has a palette, the index of the closest matching color in
   * the palette will be returned.
   *
   * If the surface pixel format has an alpha component it will be returned as
   * all 1 bits (fully opaque).
   *
   * If the pixel format bpp (color depth) is less than 32-bpp then the unused
   * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
   * format the return value can be assigned to a Uint16, and similarly a Uint8
   * for an 8-bpp format).
   *
   * @param r the red component of the pixel in the range 0-255.
   * @param g the green component of the pixel in the range 0-255.
   * @param b the blue component of the pixel in the range 0-255.
   * @returns a pixel value.
   */
  Uint32 MapColor(Uint8 r, Uint8 g, Uint8 b) const
  {
    return SDL_MapSurfaceRGB(get(), r, g, b);
  }

  /**
   * Map an RGBA quadruple to a pixel value for a surface.
   *
   * This function maps the RGBA color value to the specified pixel format and
   * returns the pixel value best approximating the given RGBA color value for
   * the given pixel format.
   *
   * If the surface pixel format has no alpha component the alpha value will be
   * ignored (as it will be in formats with a palette).
   *
   * If the surface has a palette, the index of the closest matching color in
   * the palette will be returned.
   *
   * If the pixel format bpp (color depth) is less than 32-bpp then the unused
   * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
   * format the return value can be assigned to a Uint16, and similarly a Uint8
   * for an 8-bpp format).
   *
   * @param r the red component of the pixel in the range 0-255.
   * @param g the green component of the pixel in the range 0-255.
   * @param b the blue component of the pixel in the range 0-255.
   * @param a the alpha component of the pixel in the range 0-255.
   * @return a pixel value.
   */
  Uint32 MapColor(Uint8 r, Uint8 g, Uint8 b, Uint8 a) const
  {
    return SDL_MapSurfaceRGBA(get(), r, g, b, a);
  }

  /**
   * This function prioritizes correctness over speed: it is suitable for
   * unit tests, but is not intended for use in a game engine.
   *
   * Like SDL_GetRGBA, this uses the entire 0..255 range when converting color
   * components from pixel formats with less than 8 bits per RGB component.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @returns color  on success or std::nullopt on failure; call GetError() for
   * more information.
   */
  std::optional<Color> ReadPixel(int x, int y) const
  {
    if (Color c; ReadPixel(x, y, &c)) return c;
    return std::nullopt;
  }

  /**
   * This function prioritizes correctness over speed: it is suitable for
   * unit tests, but is not intended for use in a game engine.
   *
   * Like SDL_GetRGBA, this uses the entire 0..255 range when converting color
   * components from pixel formats with less than 8 bits per RGB component.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param c a color pointer to be filled with the color information. Must not
   *          be NULL.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool ReadPixel(int x, int y, SDL_Color* c) const
  {
    return ReadPixel(x, y, &c->r, &c->g, &c->b, &c->a);
  }

  /**
   * Retrieves a single pixel from a surface.
   *
   * This function prioritizes correctness over speed: it is suitable for unit
   * tests, but is not intended for use in a game engine.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param c a color pointer to be filled with the color information. Must not
   *          be NULL.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool ReadPixel(int x, int y, SDL_FColor* c) const
  {
    return ReadPixel(x, y, &c->r, &c->g, &c->b, &c->a);
  }

  /**
   * Retrieves a single pixel from a surface.
   *
   * This function prioritizes correctness over speed: it is suitable for unit
   * tests, but is not intended for use in a game engine.
   *
   * Like SDL_GetRGBA, this uses the entire 0..255 range when converting color
   * components from pixel formats with less than 8 bits per RGB component.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param r a pointer filled in with the red channel, 0-255, or NULL to ignore
   *          this channel.
   * @param g a pointer filled in with the green channel, 0-255, or NULL to
   *          ignore this channel.
   * @param b a pointer filled in with the blue channel, 0-255, or NULL to
   *          ignore this channel.
   * @param a a pointer filled in with the alpha channel, 0-255, or NULL to
   *          ignore this channel.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ReadPixel(int x, int y, Uint8* r, Uint8* g, Uint8* b, Uint8* a) const
  {
    return SDL_ReadSurfacePixel(get(), x, y, r, g, b, a);
  }

  /**
   * Retrieves a single pixel from a surface.
   *
   * This function prioritizes correctness over speed: it is suitable for unit
   * tests, but is not intended for use in a game engine.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param r a pointer filled in with the red channel, normally in the range
   *          0-1, or NULL to ignore this channel.
   * @param g a pointer filled in with the green channel, normally in the range
   *          0-1, or NULL to ignore this channel.
   * @param b a pointer filled in with the blue channel, normally in the range
   *          0-1, or NULL to ignore this channel.
   * @param a a pointer filled in with the alpha channel, normally in the range
   *          0-1, or NULL to ignore this channel.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool ReadPixel(int x, int y, float* r, float* g, float* b, float* a) const
  {
    return SDL_ReadSurfacePixelFloat(get(), x, y, r, g, b, a);
  }

  /**
   * This function prioritizes correctness over speed: it is suitable for
   * unit tests, but is not intended for use in a game engine.
   *
   * Like MapRGBA(), this uses the entire 0..255 range when converting color
   * components from pixel formats with less than 8 bits per RGB component.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param c the color values, 0-255.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool WritePixel(int x, int y, SDL_Color c)
  {
    return WritePixel(x, y, c.r, c.g, c.b, c.a);
  }

  /**
   * Writes a single pixel to a surface.
   *
   * This function prioritizes correctness over speed: it is suitable for unit
   * tests, but is not intended for use in a game engine.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param c the color values, normally in the range 0-1.
   * @returns true on success or false on failure; call GetError() for
   * more information.
   */
  bool WritePixel(int x, int y, SDL_FColor c)
  {
    return WritePixel(x, y, c.r, c.g, c.b, c.a);
  }

  /**
   * This function prioritizes correctness over speed: it is suitable for
   * unit tests, but is not intended for use in a game engine.
   *
   * Like MapRGBA(), this uses the entire 0..255 range when converting color
   * components from pixel formats with less than 8 bits per RGB component.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param r the red channel value, 0-255.
   * @param g the green channel value, 0-255.
   * @param b the blue channel value, 0-255.
   * @param a the alpha channel value, 0-255.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool WritePixel(int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)
  {
    return SDL_WriteSurfacePixel(get(), x, y, r, g, b, a);
  }

  /**
   * Writes a single pixel to a surface.
   *
   * This function prioritizes correctness over speed: it is suitable for unit
   * tests, but is not intended for use in a game engine.
   *
   * @param x the horizontal coordinate, 0 <= x < width.
   * @param y the vertical coordinate, 0 <= y < height.
   * @param r the red channel value, normally in the range 0-1.
   * @param g the green channel value, normally in the range 0-1.
   * @param b the blue channel value, normally in the range 0-1.
   * @param a the alpha channel value, normally in the range 0-1.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   */
  bool WritePixel(int x, int y, float r, float g, float b, float a)
  {
    return SDL_WriteSurfacePixelFloat(get(), x, y, r, g, b, a);
  }

  /**
   * Get the width in pixels.
   */
  int GetWidth() const { return get()->w; }

  /**
   * Get the height in pixels.
   */
  int GetHeight() const { return get()->h; }

  /**
   * Get the size in pixels.
   */
  Point GetSize() const { return Point(GetWidth(), GetHeight()); }

  /**
   * Get the pixel format.
   */
  PixelFormat GetFormat() const { return get()->format; }
};

/**
 * Handle to a non owned surface
 *
 * @cat resource
 *
 * @sa SurfaceBase
 * @sa Surface
 */
struct SurfaceRef : SurfaceBase
{
  using SurfaceBase::SurfaceBase;

  /**
   * Copy constructor.
   */
  constexpr SurfaceRef(const SurfaceRef& other)
    : SurfaceBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr SurfaceRef(SurfaceRef&& other)
    : SurfaceBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~SurfaceRef() = default;

  /**
   * Assignment operator.
   */
  SurfaceRef& operator=(SurfaceRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Free a surface.
   *
   * It is safe to pass nullptr to this function.
   *
   * @threadsafety No other thread should be using the surface when it is freed.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SurfaceBase.SurfaceBase
   */
  void reset(SDL_Surface* newResource = {})
  {
    SDL_DestroySurface(release(newResource));
  }
};

/**
 * Handle to an owned surface
 *
 * @cat resource
 *
 * @sa SurfaceBase
 * @sa SurfaceRef
 */
struct Surface : SurfaceRef
{
  using SurfaceRef::SurfaceRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Surface(SDL_Surface* resource = {})
    : SurfaceRef(resource)
  {
  }

  constexpr Surface(const Surface& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Surface(Surface&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Surface() { reset(); }

  /**
   * Assignment operator.
   */
  Surface& operator=(Surface other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Locks a Surface for access to its pixels
 *
 * Only really necessary if Surface.MustLock() returns t
 */
class SurfaceLock
{
  SurfaceRef surface;

  /**
   * @sa SurfaceBase.Lock()
   */
  explicit SurfaceLock(SurfaceRef surface)
    : surface(std::move(surface))
  {
    if (!SDL_LockSurface(this->surface.get())) this->surface.reset();
  }

public:
  // default ctor
  SurfaceLock()
    : surface(nullptr)
  {
  }

  /// Copy ctor
  SurfaceLock(const SurfaceLock& other) = delete;

  /// Move ctor
  SurfaceLock(SurfaceLock&& other)
    : surface(other.surface.release())
  {
  }

  /**
   * destructor
   * @sa Unlock()
   */
  ~SurfaceLock() { Unlock(); }

  /// Assignment operator
  SurfaceLock& operator=(SurfaceLock other)
  {
    std::swap(surface, other.surface);
    return *this;
  }

  /**
   * Returns true if lock is active
   */
  constexpr operator bool() const { return bool(surface); }

  /**
   * Release the locked surface after directly accessing the pixels.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Surface.Lock()
   */
  void Unlock() { return SDL_UnlockSurface(surface.release()); }

  /**
   * Get the pixels
   */
  void* GetPixels() const { return surface->pixels; }

  /**
   * Get pitch (the number of bytes between the start of one row the next)
   */
  int GetPitch() const { return surface->pitch; }

  /**
   * Get the pixel format
   */
  PixelFormat GetFormat() const { return surface->format; }

  friend class SurfaceBase;
};

namespace prop::Surface {

constexpr auto SDR_WHITE_POINT_FLOAT = SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT;

constexpr auto HDR_HEADROOM_FLOAT = SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT;

constexpr auto TONEMAP_OPERATOR_STRING =
  SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING;

constexpr auto HOTSPOT_X_NUMBER = SDL_PROP_SURFACE_HOTSPOT_X_NUMBER;

constexpr auto HOTSPOT_Y_NUMBER = SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER;

} // namespace prop::Surface

/**
 * Load a BMP image from a seekable SDL data stream.
 *
 * @param src the data stream for the surface.
 * @returns a Surface with the loaded content or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SaveBMP
 */
inline Surface LoadBMP(IOStreamBase& src)
{
  return Surface{SDL_LoadBMP_IO(src.get(), false)};
}

/**
 * Load a BMP image from a file.
 *
 * @param file the BMP file to load.
 * @returns a Surface with the loaded content or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SaveBMP
 */
inline Surface LoadBMP(StringParam file) { return Surface{SDL_LoadBMP(file)}; }

/**
 * Save a surface to a seekable SDL data stream in BMP format.
 *
 * Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
 * BMP directly. Other RGB formats with 8-bit or higher get converted to a
 * 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
 * surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
 * not supported.
 *
 * @param surface the SurfaceBase structure containing the image to be saved.
 * @param dst a data stream to save to.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa LoadBMP
 */
inline bool SaveBMP(SurfaceBase& surface, IOStreamBase& dst)
{
  return SDL_SaveBMP_IO(surface.get(), dst.get(), false);
}

/**
 * Save a surface to a file.
 *
 * Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
 * BMP directly. Other RGB formats with 8-bit or higher get converted to a
 * 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
 * surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
 * not supported.
 *
 * @param surface the SurfaceBase structure containing the image to be saved.
 * @param file a file to save to.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa LoadBMP
 */
inline bool SaveBMP(SurfaceBase& surface, StringParam file)
{
  return SDL_SaveBMP(surface.get(), file);
}

inline Surface SurfaceBase::Duplicate() const
{
  return Surface{SDL_DuplicateSurface(get())};
}

inline Surface SurfaceBase::Scale(int width,
                                  int height,
                                  ScaleMode scaleMode) const
{
  return Surface{SDL_ScaleSurface(get(), width, height, scaleMode)};
}

inline Surface SurfaceBase::Convert(PixelFormat format) const
{
  return Surface{SDL_ConvertSurface(get(), format)};
}

inline Surface SurfaceBase::Convert(PixelFormat format,
                                    PaletteBase& palette,
                                    Colorspace colorspace,
                                    PropertiesBase& props) const
{
  return Surface{SDL_ConvertSurfaceAndColorspace(
    get(), format, palette.get(), colorspace, props.get())};
}

/**
 * Copy a block of pixels of one format to another format.
 *
 * @param width the width of the block to copy, in pixels.
 * @param height the height of the block to copy, in pixels.
 * @param src_format an PixelFormat value of the `src` pixels format.
 * @param src a pointer to the source pixels.
 * @param src_pitch the pitch of the source pixels, in bytes.
 * @param dst_format an PixelFormat value of the `dst` pixels format.
 * @param dst a pointer to be filled in with new pixel data.
 * @param dst_pitch the pitch of the destination pixels, in bytes.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety The same destination pixels should not be used from two
 *               threads at once. It is safe to use the same source pixels
 *               from multiple threads.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ConvertPixelsAndColorspace
 */
inline bool ConvertPixels(int width,
                          int height,
                          PixelFormat src_format,
                          const void* src,
                          int src_pitch,
                          PixelFormat dst_format,
                          void* dst,
                          int dst_pitch)
{
  return SDL_ConvertPixels(
    width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);
}

/**
 * Copy a block of pixels of one format and colorspace to another format and
 * colorspace.
 *
 * @param width the width of the block to copy, in pixels.
 * @param height the height of the block to copy, in pixels.
 * @param src_format an PixelFormat value of the `src` pixels format.
 * @param src_colorspace an Colorspace value describing the colorspace of
 *                       the `src` pixels.
 * @param src_properties an PropertiesBase with additional source color
 *                       properties, or 0.
 * @param src a pointer to the source pixels.
 * @param src_pitch the pitch of the source pixels, in bytes.
 * @param dst_format an PixelFormat value of the `dst` pixels format.
 * @param dst_colorspace an Colorspace value describing the colorspace of
 *                       the `dst` pixels.
 * @param dst_properties an PropertiesBase with additional destination color
 *                       properties, or 0.
 * @param dst a pointer to be filled in with new pixel data.
 * @param dst_pitch the pitch of the destination pixels, in bytes.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety The same destination pixels should not be used from two
 *               threads at once. It is safe to use the same source pixels
 *               from multiple threads.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa ConvertPixels
 */
inline bool ConvertPixelsAndColorspace(int width,
                                       int height,
                                       PixelFormat src_format,
                                       Colorspace src_colorspace,
                                       PropertiesBase& src_properties,
                                       const void* src,
                                       int src_pitch,
                                       PixelFormat dst_format,
                                       Colorspace dst_colorspace,
                                       PropertiesBase& dst_properties,
                                       void* dst,
                                       int dst_pitch)
{
  return SDL_ConvertPixelsAndColorspace(width,
                                        height,
                                        src_format,
                                        src_colorspace,
                                        src_properties.get(),
                                        src,
                                        src_pitch,
                                        dst_format,
                                        dst_colorspace,
                                        dst_properties.get(),
                                        dst,
                                        dst_pitch);
}

/**
 * Premultiply the alpha on a block of pixels.
 *
 * This is safe to use with src == dst, but not for other overlapping areas.
 *
 * @param width the width of the block to convert, in pixels.
 * @param height the height of the block to convert, in pixels.
 * @param src_format an PixelFormat value of the `src` pixels format.
 * @param src a pointer to the source pixels.
 * @param src_pitch the pitch of the source pixels, in bytes.
 * @param dst_format an PixelFormat value of the `dst` pixels format.
 * @param dst a pointer to be filled in with premultiplied pixel data.
 * @param dst_pitch the pitch of the destination pixels, in bytes.
 * @param linear true to convert from sRGB to linear space for the alpha
 *               multiplication, false to do multiplication in sRGB space.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety The same destination pixels should not be used from two
 *               threads at once. It is safe to use the same source pixels
 *               from multiple threads.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool PremultiplyAlpha(int width,
                             int height,
                             PixelFormat src_format,
                             const void* src,
                             int src_pitch,
                             PixelFormat dst_format,
                             void* dst,
                             int dst_pitch,
                             bool linear)
{
  return SDL_PremultiplyAlpha(width,
                              height,
                              src_format,
                              src,
                              src_pitch,
                              dst_format,
                              dst,
                              dst_pitch,
                              linear);
}

/// @}

#pragma region impl

inline SurfaceLock SurfaceBase::Lock() & { return SurfaceLock{get()}; }

#pragma endregion impl

/**
 *
 * @defgroup CategoryTray System Tray
 *
 * SDL offers a way to add items to the "system tray" (more correctly called
 * the "notification area" on Windows). On platforms that offer this concept,
 * an SDL app can add a tray icon, submenus, checkboxes, and clickable
 * entries, and register a callback that is fired when the user clicks on
 * these pieces.
 *
 * @{
 */

// Forward decl
struct TrayMenu;

// Forward decl
struct TrayBase;

// Forward decl
struct TrayRef;

// Forward decl
struct Tray;

// Forward decl
struct TrayEntryBase;

// Forward decl
struct TrayEntryRef;

// Forward decl
struct TrayEntry;

/**
 * A trayEntry result that will be owned only if assigned to a TrayEntry.
 *
 * This is designed as resource types to cases where ownership might not be
 * required.
 */
using DetachedTrayEntry = DetachedResource<TrayEntryRef, TrayEntry>;

/**
 * Flags that control the creation of system tray entries.
 *
 * Some of these flags are required; exactly one of them must be specified at
 * the time a tray entry is created. Other flags are optional; zero or more of
 * those can be OR'ed together with the required flag.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa TrayMenu.InsertEntry
 */
using TrayEntryFlags = Uint32;

constexpr TrayEntryFlags TRAYENTRY_BUTTON =
  SDL_TRAYENTRY_BUTTON; ///< Make the entry a simple button. Required.

constexpr TrayEntryFlags TRAYENTRY_CHECKBOX =
  SDL_TRAYENTRY_CHECKBOX; ///< Make the entry a checkbox. Required.

constexpr TrayEntryFlags TRAYENTRY_SUBMENU =
  SDL_TRAYENTRY_SUBMENU; ///< Prepare the entry to have a submenu. Required

constexpr TrayEntryFlags TRAYENTRY_DISABLED =
  SDL_TRAYENTRY_DISABLED; ///< Make the entry disabled. Optional.

/**
 * Make the entry checked. This is valid only for checkboxes. Optional.
 */
constexpr TrayEntryFlags TRAYENTRY_CHECKED = SDL_TRAYENTRY_CHECKED;

/**
 * An opaque handle representing a toplevel system tray object.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa Tray
 * @sa TrayRef
 */
struct TrayBase : Resource<SDL_Tray*>
{
  using Resource::Resource;

  /**
   * Create an icon to be placed in the operating system's tray, or equivalent.
   *
   * Many platforms advise not using a system tray unless persistence is a
   * necessary feature. Avoid needlessly creating a tray icon, as the user may
   * feel like it clutters their interface.
   *
   * Using tray icons require the video subsystem.
   *
   * @param icon a surface to be used as icon. May be nullptr.
   * @param tooltip a tooltip to be displayed when the mouse hovers the icon in
   *                UTF-8 encoding. Not supported on all platforms. May be
   *                nullptr.
   * @post The newly created system tray icon.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.CreateMenu
   * @sa TrayBase.GetMenu
   */
  TrayBase(SurfaceBase& icon, StringParam tooltip)
    : Resource(SDL_CreateTray(icon.get(), tooltip))
  {
  }

  /**
   * Updates the system tray icon's icon.
   *
   * @param icon the new icon. May be nullptr.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.TrayBase
   */
  void SetIcon(SurfaceBase& icon) { SDL_SetTrayIcon(get(), icon.get()); }

  /**
   * Updates the system tray icon's tooltip.
   *
   * @param tooltip the new tooltip in UTF-8 encoding. May be nullptr.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.TrayBase
   */
  void SetTooltip(StringParam tooltip) { SDL_SetTrayTooltip(get(), tooltip); }

  /**
   * Create a menu for a system tray.
   *
   * This should be called at most once per tray icon.
   *
   * This function does the same thing as TrayEntryBase.CreateSubmenu(), except
   * that it takes a TrayBase instead of a TrayEntryBase.
   *
   * A menu does not need to be destroyed; it will be destroyed with the tray.
   *
   * @returns the newly created menu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.TrayBase
   * @sa TrayBase.GetMenu
   * @sa TrayMenu.GetParentTray
   */
  TrayMenu CreateMenu();

  /**
   * Gets a previously created tray menu.
   *
   * You should have called TrayBase.CreateMenu() on the tray object. This
   * function allows you to fetch it again later.
   *
   * This function does the same thing as TrayEntryBase.GetSubmenu(), except
   * that it takes a TrayBase instead of a TrayEntryBase.
   *
   * A menu does not need to be destroyed; it will be destroyed with the tray.
   *
   * @returns the newly created menu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.TrayBase
   * @sa TrayBase.CreateMenu
   */
  TrayMenu GetMenu() const;
};

/**
 * Handle to a non owned tray
 *
 * @cat resource
 *
 * @sa TrayBase
 * @sa Tray
 */
struct TrayRef : TrayBase
{
  using TrayBase::TrayBase;

  /**
   * Copy constructor.
   */
  constexpr TrayRef(const TrayRef& other)
    : TrayBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr TrayRef(TrayRef&& other)
    : TrayBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~TrayRef() = default;

  /**
   * Assignment operator.
   */
  TrayRef& operator=(TrayRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroys a tray object.
   *
   * This also destroys all associated menus and entries.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.TrayBase
   */
  void reset(SDL_Tray* newResource = {})
  {
    SDL_DestroyTray(release(newResource));
  }
};

/**
 * Handle to an owned tray
 *
 * @cat resource
 *
 * @sa TrayBase
 * @sa TrayRef
 */
struct Tray : TrayRef
{
  using TrayRef::TrayRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Tray(SDL_Tray* resource = {})
    : TrayRef(resource)
  {
  }

  constexpr Tray(const Tray& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Tray(Tray&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Tray() { reset(); }

  /**
   * Assignment operator.
   */
  Tray& operator=(Tray other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * A callback that is invoked when a tray entry is selected.
 *
 * @param userdata an optional pointer to pass extra data to the callback when
 *                 it will be invoked.
 * @param entry the tray entry that was selected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa TrayEntryBase.SetCallback
 */
using TrayCallback = SDL_TrayCallback;

/**
 * A callback that is invoked when a tray entry is selected.
 *
 * @param entry the tray entry that was selected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa TrayEntryBase.SetCallback
 */
using TrayCB = std::function<void(TrayEntryRef)>;

/**
 * An opaque handle representing a menu/submenu on a system tray object.
 *
 * @since This struct is available since SDL 3.2.0.
 */
class TrayMenu
{
  SDL_TrayMenu* m_trayMenu;

public:
  /**
   * Wraps TrayMenu.
   *
   * @param trayMenu the value to be wrapped
   */
  constexpr TrayMenu(SDL_TrayMenu* trayMenu = {})
    : m_trayMenu(trayMenu)
  {
  }

  /**
   * Default comparison operator
   */
  constexpr bool operator==(const TrayMenu& other) const = default;

  /**
   * Unwraps to the underlying TrayMenu.
   *
   * @returns the underlying TrayMenu *.
   */
  constexpr operator SDL_TrayMenu*() const { return m_trayMenu; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return m_trayMenu != nullptr; }

  /**
   * Returns a list of entries in the menu, in order.
   *
   * @returns a nullptr-terminated list of entries within the given menu. The
   *          pointer becomes invalid when any function that inserts or deletes
   *          entries in the menu is called.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayEntryRef.Remove
   * @sa TrayMenu.InsertEntry
   */
  std::span<TrayEntry> GetEntries();

  /**
   * Insert a tray entry at a given position.
   *
   * If label is nullptr, the entry will be a separator. Many functions won't
   * work for an entry that is a separator.
   *
   * An entry does not need to be destroyed; it will be destroyed with the tray.
   *
   * @param pos the desired position for the new entry. Entries at or following
   *            this place will be moved. If pos is -1, the entry is appended.
   * @param label the text to be displayed on the entry, in UTF-8 encoding, or
   *              nullptr for a separator.
   * @param flags a combination of flags, some of which are mandatory.
   * @returns the newly created entry, or nullptr if pos is out of bounds.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.AppendEntry
   * @sa TrayEntryFlags
   * @sa TrayMenu.GetEntries
   * @sa TrayEntryRef.Remove
   * @sa TrayEntryBase.GetParent
   */
  DetachedTrayEntry InsertEntry(int pos,
                                StringParam label,
                                TrayEntryFlags flags);

  /**
   * Appends a tray entry.
   *
   * If label is nullptr, the entry will be a separator. Many functions won't
   * work for an entry that is a separator.
   *
   * An entry does not need to be destroyed; it will be destroyed with the tray.
   *
   * @param label the text to be displayed on the entry, in UTF-8 encoding, or
   *              nullptr for a separator.
   * @param flags a combination of flags, some of which are mandatory.
   * @returns the newly created entry, or nullptr if pos is out of bounds.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryFlags
   * @sa TrayMenu.GetEntries
   * @sa TrayEntryBase.Remove
   * @sa TrayEntryBase.GetParent
   */
  DetachedTrayEntry AppendEntry(StringParam label, TrayEntryFlags flags);

  /**
   * Gets the entry for which the menu is a submenu, if the current menu is a
   * submenu.
   *
   * Either this function or TrayMenu.GetParentTray() will return non-nullptr
   * for any given menu.
   *
   * @returns the parent entry, or nullptr if this menu is not a submenu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayEntryBase.CreateSubmenu
   * @sa TrayMenu.GetParentTray
   */
  TrayEntryRef GetParentEntry() const;

  /**
   * Gets the tray for which this menu is the first-level menu, if the current
   * menu isn't a submenu.
   *
   * Either this function or TrayMenu.GetParentEntry() will return non-nullptr
   * for any given menu.
   *
   * @returns the parent tray, or nullptr if this menu is a submenu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayBase.CreateMenu
   * @sa TrayMenu.GetParentEntry
   */
  TrayRef GetParentTray() const;
};

/**
 * An opaque handle representing an entry on a system tray object.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa TrayEntry
 * @sa TrayEntryRef
 */
struct TrayEntryBase : Resource<SDL_TrayEntry*>
{
  using Resource::Resource;

  /**
   * Create a submenu for a system tray entry.
   *
   * This should be called at most once per tray entry.
   *
   * This function does the same thing as TrayBase.CreateMenu, except that it
   * takes a TrayEntryBase instead of a TrayBase.
   *
   * A menu does not need to be destroyed; it will be destroyed with the tray.
   *
   * @returns the newly created menu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.GetSubmenu
   * @sa TrayMenu.GetParentEntry
   */
  TrayMenu CreateSubmenu() { return SDL_CreateTraySubmenu(get()); }

  /**
   * Gets a previously created tray entry submenu.
   *
   * You should have called TrayEntryBase.CreateSubmenu() on the entry object.
   * This function allows you to fetch it again later.
   *
   * This function does the same thing as TrayBase.GetMenu(), except that it
   * takes a TrayEntryBase instead of a TrayBase.
   *
   * A menu does not need to be destroyed; it will be destroyed with the tray.
   *
   * @returns the newly created menu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.CreateSubmenu
   */
  TrayMenu GetSubmenu() { return SDL_GetTraySubmenu(get()); }

  /**
   * Sets the label of an entry.
   *
   * An entry cannot change between a separator and an ordinary entry; that is,
   * it is not possible to set a non-nullptr label on an entry that has a
   * nullptr label (separators), or to set a nullptr label to an entry that has
   * a non-nullptr label. The function will silently fail if that happens.
   *
   * @param label the new label for the entry in UTF-8 encoding.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.GetLabel
   */
  void SetLabel(StringParam label) { SDL_SetTrayEntryLabel(get(), label); }

  /**
   * Gets the label of an entry.
   *
   * If the returned value is nullptr, the entry is a separator.
   *
   * @returns the label of the entry in UTF-8 encoding.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.SetLabel
   */
  const char* GetLabel() const { return SDL_GetTrayEntryLabel(get()); }

  /**
   * Sets whether or not an entry is checked.
   *
   * The entry must have been created with the TRAYENTRY_CHECKBOX flag.
   *
   * @param checked true if the entry should be checked; false otherwise.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.GetChecked
   */
  void SetChecked(bool checked) { SDL_SetTrayEntryChecked(get(), checked); }

  /**
   * Gets whether or not an entry is checked.
   *
   * The entry must have been created with the TRAYENTRY_CHECKBOX flag.
   *
   * @returns true if the entry is checked; false otherwise.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.SetChecked
   */
  bool GetChecked() const { return SDL_GetTrayEntryChecked(get()); }

  /**
   * Sets whether or not an entry is enabled.
   *
   * @param enabled true if the entry should be enabled; false otherwise.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.GetEnabled
   */
  void SetEnabled(bool enabled) { SDL_SetTrayEntryEnabled(get(), enabled); }

  /**
   * Gets whether or not an entry is enabled.
   *
   * @returns true if the entry is enabled; false otherwise.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   * @sa TrayEntryBase.SetEnabled
   */
  bool GetEnabled() const { return SDL_GetTrayEntryEnabled(get()); }

  /**
   * Sets a callback to be invoked when the entry is selected.
   *
   * @param callback a callback to be invoked when the entry is selected.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   */
  void SetCallback(TrayCB callback);

  /**
   * Sets a callback to be invoked when the entry is selected.
   *
   * @param callback a callback to be invoked when the entry is selected.
   * @param userdata an optional pointer to pass extra data to the callback when
   *                 it will be invoked.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   */
  void SetCallback(TrayCallback callback, void* userdata)
  {
    SDL_SetTrayEntryCallback(get(), callback, userdata);
  }

  /**
   * Simulate a click on a tray entry.
   *
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   */
  void Click() { SDL_ClickTrayEntry(get()); }

  /**
   * Gets the menu containing a certain tray entry.
   *
   * @returns the parent menu.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.InsertEntry
   */
  TrayMenu GetParent() { return SDL_GetTrayEntryParent(get()); }
};

/**
 * Handle to a non owned trayEntry
 *
 * @cat resource
 *
 * @sa TrayEntryBase
 * @sa TrayEntry
 */
struct TrayEntryRef : TrayEntryBase
{
  using TrayEntryBase::TrayEntryBase;

  /**
   * Copy constructor.
   */
  constexpr TrayEntryRef(const TrayEntryRef& other)
    : TrayEntryBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr TrayEntryRef(TrayEntryRef&& other)
    : TrayEntryBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~TrayEntryRef() = default;

  /**
   * Assignment operator.
   */
  TrayEntryRef& operator=(TrayEntryRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Removes a tray entry.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   */
  void reset(SDL_TrayEntry* newResource = {})
  {
    SDL_RemoveTrayEntry(release(newResource));
  }

  /**
   * Removes a tray entry.
   *
   * @threadsafety This function should be called on the thread that created the
   *               tray.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TrayMenu.GetEntries
   * @sa TrayMenu.InsertEntry
   */
  void Remove() { SDL_RemoveTrayEntry(release()); }
};

/**
 * Handle to an owned trayEntry
 *
 * @cat resource
 *
 * @sa TrayEntryBase
 * @sa TrayEntryRef
 */
struct TrayEntry : TrayEntryRef
{
  using TrayEntryRef::TrayEntryRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit TrayEntry(SDL_TrayEntry* resource = {})
    : TrayEntryRef(resource)
  {
  }

  constexpr TrayEntry(const TrayEntry& other) = delete;

  /**
   * Move constructor.
   */
  constexpr TrayEntry(TrayEntry&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~TrayEntry() { reset(); }

  /**
   * Assignment operator.
   */
  TrayEntry& operator=(TrayEntry other)
  {
    reset(other.release());
    return *this;
  }
};

inline TrayMenu TrayBase::CreateMenu() { return SDL_CreateTrayMenu(get()); }

inline TrayMenu TrayBase::GetMenu() const { return SDL_GetTrayMenu(get()); }

inline std::span<TrayEntry> TrayMenu::GetEntries()
{
  int count;
  auto entries = SDL_GetTrayEntries(m_trayMenu, &count);
  return std::span<TrayEntry>{reinterpret_cast<TrayEntry*>(entries),
                              size_t(count)};
}

inline DetachedTrayEntry TrayMenu::InsertEntry(int pos,
                                               StringParam label,
                                               TrayEntryFlags flags)
{
  return SDL_InsertTrayEntryAt(m_trayMenu, pos, label, flags);
}

inline TrayEntryRef TrayMenu::GetParentEntry() const
{
  return SDL_GetTrayMenuParentEntry(m_trayMenu);
}

inline TrayRef TrayMenu::GetParentTray() const
{
  return SDL_GetTrayMenuParentTray(m_trayMenu);
}

/**
 * Update the trays.
 *
 * This is called automatically by the event loop and is only needed if you're
 * using trays but aren't handling SDL events.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void UpdateTrays() { SDL_UpdateTrays(); }

#pragma region impl
/// @}

inline DetachedTrayEntry TrayMenu::AppendEntry(StringParam label,
                                               TrayEntryFlags flags)
{
  return InsertEntry(-1, std::move(label), flags);
}

void TrayEntryBase::SetCallback(TrayCB callback)
{
  using Wrapper = KeyValueWrapper<SDL_TrayEntry*, TrayCB>;
  SetCallback(
    [](void* userdata, SDL_TrayEntry* entry) {
      auto& f = Wrapper::at(userdata);
      f(TrayEntryRef{entry});
    },
    Wrapper::Wrap(get(), std::move(callback)));
}

#pragma endregion impl

/**
 * @defgroup CategoryVideo Display and Window Management
 *
 * SDL's video subsystem is largely interested in abstracting window
 * management from the underlying operating system. You can create windows,
 * manage them in various ways, set them fullscreen, and get events when
 * interesting things happen with them, such as the mouse or keyboard
 * interacting with a window.
 *
 * The video subsystem is also interested in abstracting away some
 * platform-specific differences in OpenGL: context creation, swapping
 * buffers, etc. This may be crucial to your app, but also you are not
 * required to use OpenGL at all. In fact, SDL can provide rendering to those
 * windows as well, either with an easy-to-use
 * [2D API](https://wiki.libsdl.org/SDL3/CategoryRender)
 * or with a more-powerful
 * [GPU API](https://wiki.libsdl.org/SDL3/CategoryGPU)
 * . Of course, it can simply get out of your way and give you the window
 * handles you need to use Vulkan, Direct3D, Metal, or whatever else you like
 * directly, too.
 *
 * The video subsystem covers a lot of functionality, out of necessity, so it
 * is worth perusing the list of functions just to see what's available, but
 * most apps can get by with simply creating a window and listening for
 * events, so start with SDL_CreateWindow() and SDL_PollEvent().
 * @{
 */

// Forward decl
struct WindowBase;

// Forward decl
struct WindowRef;

// Forward decl
struct Window;

// Forward decl
struct RendererBase;

// Forward decl
struct RendererRef;

/**
 * @name DisplayOrientations
 * @{
 */

/**
 * Display orientation values; the way a display is rotated.
 *
 * @since This enum is available since SDL 3.2.0.
 * @sa ORIENTATION_LANDSCAPE
 * @sa ORIENTATION_PORTRAIT
 * @sa ORIENTATION_UNKNOWN
 */
using DisplayOrientation = SDL_DisplayOrientation;

constexpr DisplayOrientation ORIENTATION_UNKNOWN =
  SDL_ORIENTATION_UNKNOWN; ///< The display orientation can't be determined.

/**
 * The display is in landscape mode, with the right side up, relative to
 * portrait mode.
 */
constexpr DisplayOrientation ORIENTATION_LANDSCAPE = SDL_ORIENTATION_LANDSCAPE;

/**
 * The display is in landscape mode, with the left side up, relative to portrait
 * mode.
 */
constexpr DisplayOrientation ORIENTATION_LANDSCAPE_FLIPPED =
  SDL_ORIENTATION_LANDSCAPE_FLIPPED;

constexpr DisplayOrientation ORIENTATION_PORTRAIT =
  SDL_ORIENTATION_PORTRAIT; ///< The display is in portrait mode.

constexpr DisplayOrientation ORIENTATION_PORTRAIT_FLIPPED =
  SDL_ORIENTATION_PORTRAIT_FLIPPED; ///< The display is in portrait mode, upside
                                    ///< down.

/// @}

/**
 * Internal display mode data.
 *
 * This lives as a field in DisplayMode, as opaque data.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa DisplayMode
 */
using DisplayModeData = SDL_DisplayModeData;

/**
 * The structure that defines a display mode.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa Display.GetFullscreenModes
 * @sa Display.GetDesktopMode
 * @sa Display.GetCurrentMode
 * @sa WindowBase.SetFullscreenMode
 * @sa WindowBase.GetFullscreenMode
 */
using DisplayMode = SDL_DisplayMode;

/**
 * @name WindowFlags
 * @{
 */

/**
 * The flags on a window.
 *
 * These cover a lot of true/false, or on/off, window state. Some of it is
 * immutable after being set through WindowBase.WindowBase(), some of it can be
 * changed on existing windows by the app, and some of it might be altered by
 * the user or system outside of the app's control.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa WindowBase.GetFlags
 */
using WindowFlags = SDL_WindowFlags;

constexpr WindowFlags WINDOW_FULLSCREEN =
  SDL_WINDOW_FULLSCREEN; ///< window is in fullscreen mode

constexpr WindowFlags WINDOW_OPENGL =
  SDL_WINDOW_OPENGL; ///< window usable with OpenGL context

constexpr WindowFlags WINDOW_OCCLUDED =
  SDL_WINDOW_OCCLUDED; ///< window is occluded

/**
 * window is neither mapped onto the desktop nor shown in the
 * taskbar/dock/window list; WindowBase.Show() is required for it to become
 * visible
 */
constexpr WindowFlags WINDOW_HIDDEN = SDL_WINDOW_HIDDEN;

constexpr WindowFlags WINDOW_BORDERLESS =
  SDL_WINDOW_BORDERLESS; ///< no window decoration

constexpr WindowFlags WINDOW_RESIZABLE =
  SDL_WINDOW_RESIZABLE; ///< window can be resized

constexpr WindowFlags WINDOW_MINIMIZED =
  SDL_WINDOW_MINIMIZED; ///< window is minimized

constexpr WindowFlags WINDOW_MAXIMIZED =
  SDL_WINDOW_MAXIMIZED; ///< window is maximized

constexpr WindowFlags WINDOW_MOUSE_GRABBED =
  SDL_WINDOW_MOUSE_GRABBED; ///< window has grabbed mouse input

constexpr WindowFlags WINDOW_INPUT_FOCUS =
  SDL_WINDOW_INPUT_FOCUS; ///< window has input focus

constexpr WindowFlags WINDOW_MOUSE_FOCUS =
  SDL_WINDOW_MOUSE_FOCUS; ///< window has mouse focus

constexpr WindowFlags WINDOW_EXTERNAL =
  SDL_WINDOW_EXTERNAL; ///< window not created by SDL

constexpr WindowFlags WINDOW_MODAL = SDL_WINDOW_MODAL; ///< window is modal

/**
 * window uses high pixel density back buffer if possible
 */
constexpr WindowFlags WINDOW_HIGH_PIXEL_DENSITY = SDL_WINDOW_HIGH_PIXEL_DENSITY;

/**
 * window has mouse captured (unrelated to MOUSE_GRABBED)
 */
constexpr WindowFlags WINDOW_MOUSE_CAPTURE = SDL_WINDOW_MOUSE_CAPTURE;

constexpr WindowFlags WINDOW_MOUSE_RELATIVE_MODE =
  SDL_WINDOW_MOUSE_RELATIVE_MODE; ///< window has relative mode enabled

constexpr WindowFlags WINDOW_ALWAYS_ON_TOP =
  SDL_WINDOW_ALWAYS_ON_TOP; ///< window should always be above others

/**
 * window should be treated as a utility window, not showing in the task bar and
 * window list
 */
constexpr WindowFlags WINDOW_UTILITY = SDL_WINDOW_UTILITY;

/**
 * window should be treated as a tooltip and does not get mouse or keyboard
 * focus, requires a parent window
 */
constexpr WindowFlags WINDOW_TOOLTIP = SDL_WINDOW_TOOLTIP;

/**
 * window should be treated as a popup menu, requires a parent window
 */
constexpr WindowFlags WINDOW_POPUP_MENU = SDL_WINDOW_POPUP_MENU;

constexpr WindowFlags WINDOW_KEYBOARD_GRABBED =
  SDL_WINDOW_KEYBOARD_GRABBED; ///< window has grabbed keyboard input

constexpr WindowFlags WINDOW_VULKAN =
  SDL_WINDOW_VULKAN; ///< window usable for Vulkan surface

constexpr WindowFlags WINDOW_METAL =
  SDL_WINDOW_METAL; ///< window usable for Metal view

constexpr WindowFlags WINDOW_TRANSPARENT =
  SDL_WINDOW_TRANSPARENT; ///< window with transparent buffer

constexpr WindowFlags WINDOW_NOT_FOCUSABLE =
  SDL_WINDOW_NOT_FOCUSABLE; ///< window should not be focusable

/// @}

/**
 * @name FlashOperations
 * @{
 */

/**
 * Window flash operation.
 *
 * @since This enum is available since SDL 3.2.0.
 * @sa FLASH_CANCEL
 * @sa FLASH_BRIEFLY
 * @sa FLASH_UNTIL_FOCUSED
 */
using FlashOperation = SDL_FlashOperation;

constexpr FlashOperation FLASH_CANCEL =
  SDL_FLASH_CANCEL; ///< Cancel any window flash state.

constexpr FlashOperation FLASH_BRIEFLY =
  SDL_FLASH_BRIEFLY; ///< Flash the window briefly to get attention.

constexpr FlashOperation FLASH_UNTIL_FOCUSED =
  SDL_FLASH_UNTIL_FOCUSED; ///< Flash the window until it gets focus.

/// @}

/**
 * @name HitTestResults
 * Possible return values from the HitTest callback
 *
 * @{
 */

/**
 * Possible return values from the HitTest callback.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa HitTest
 * @sa HITTEST_NORMAL
 */
using HitTestResult = SDL_HitTestResult;

constexpr HitTestResult HITTEST_NORMAL =
  SDL_HITTEST_NORMAL; ///< Region is normal.  No special properties.

constexpr HitTestResult HITTEST_DRAGGABLE =
  SDL_HITTEST_DRAGGABLE; ///< Region can drag entire window.

constexpr HitTestResult HITTEST_RESIZE_TOPLEFT =
  SDL_HITTEST_RESIZE_TOPLEFT; ///< Region is the resizable top-left corner
                              ///< border.

constexpr HitTestResult HITTEST_RESIZE_TOP =
  SDL_HITTEST_RESIZE_TOP; ///< Region is the resizable top border.

constexpr HitTestResult HITTEST_RESIZE_TOPRIGHT =
  SDL_HITTEST_RESIZE_TOPRIGHT; ///< Region is the resizable top-right corner
                               ///< border.

constexpr HitTestResult HITTEST_RESIZE_RIGHT =
  SDL_HITTEST_RESIZE_RIGHT; ///< Region is the resizable right border.

/**
 * Region is the resizable bottom-right corner border.
 */
constexpr HitTestResult HITTEST_RESIZE_BOTTOMRIGHT =
  SDL_HITTEST_RESIZE_BOTTOMRIGHT;

constexpr HitTestResult HITTEST_RESIZE_BOTTOM =
  SDL_HITTEST_RESIZE_BOTTOM; ///< Region is the resizable bottom border.

constexpr HitTestResult HITTEST_RESIZE_BOTTOMLEFT =
  SDL_HITTEST_RESIZE_BOTTOMLEFT; ///< Region is the resizable bottom-left corner
                                 ///< border.

constexpr HitTestResult HITTEST_RESIZE_LEFT =
  SDL_HITTEST_RESIZE_LEFT; ///< Region is the resizable left border.

/// @}

/**
 * @name Callbacks for WindowBase::SetHitTest()
 * @{
 */

/**
 * Callback used for hit-testing.
 *
 * @param win the WindowBase where hit-testing was set on.
 * @param area an Point which should be hit-tested.
 * @param data what was passed as `callback_data` to WindowBase.SetHitTest().
 * @returns an HitTestResult value.
 *
 * @sa WindowBase.SetHitTest
 */
using HitTest = SDL_HitTest;

/**
 * Callback used for hit-testing.
 *
 * @param win the WindowRef where hit-testing was set on.
 * @param area a Point const reference which should be hit-tested.
 * @returns an SDL::HitTestResult value.
 *
 * @sa HitTest
 *
 * @cat listener-callback
 */
using HitTestCB =
  std::function<HitTestResult(WindowRef window, const Point& area)>;

/**
 * A window parameter that might own its value.
 *
 * This is designed to be used on parameter's type and accepts that accepts a
 * std::nullopt, a non-owned WindowRef or an owned Window
 */
using OptionalWindow = OptionalResource<WindowRef, Window>;

/// @}

// Forward decl
struct GLContextBase;

// Forward decl
struct GLContextRef;

// Forward decl
struct GLContext;

/**
 * This is a unique ID for a display for the time it is connected to the
 * system, and is never reused for the lifetime of the application.
 *
 * If the display is disconnected and reconnected, it will get a new ID.
 *
 * The value 0 is an invalid ID.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
class Display
{
  SDL_DisplayID m_displayID;

public:
  /**
   * Wraps Display.
   *
   * @param displayID the value to be wrapped
   */
  constexpr Display(SDL_DisplayID displayID = {})
    : m_displayID(displayID)
  {
  }

  /**
   * Default comparison operator
   */
  constexpr bool operator==(const Display& other) const = default;

  /**
   * Unwraps to the underlying Display.
   *
   * @returns the underlying Display.
   */
  constexpr operator SDL_DisplayID() const { return m_displayID; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return m_displayID != 0; }

  /**
   * Get a list of currently connected displays.
   *
   * @returns a 0 terminated array of display instance IDs or nullptr on
   *          failure; call GetError() for more information. This should be
   *          freed with free() when it is no longer needed.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  static OwnArray<Display> GetAll()
  {
    int count = 0;
    auto data = reinterpret_cast<Display*>(SDL_GetDisplays(&count));
    return OwnArray<Display>{data, size_t(count)};
  }

  /**
   * Return the primary display.
   *
   * @returns the instance ID of the primary display on success or 0 on failure;
   *          call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetAll
   */
  static Display GetPrimary() { return {SDL_GetPrimaryDisplay()}; }

  /**
   * Get the properties associated with a display.
   *
   * The following read-only properties are provided by SDL:
   *
   * - `prop::Display.HDR_ENABLED_BOOLEAN`: true if the display has HDR
   *   headroom above the SDR white point. This is for informational and
   *   diagnostic purposes only, as not all platforms provide this information
   *   at the display level.
   *
   * On KMS/DRM:
   *
   * - `prop::Display.KMSDRM_PANEL_ORIENTATION_NUMBER`: the "panel
   *   orientation" property for the display in degrees of clockwise rotation.
   *   Note that this is provided only as a hint, and the application is
   *   responsible for any coordinate transformations needed to conform to the
   *   requested display orientation.
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PropertiesRef GetProperties() const
  {
    return SDL_GetDisplayProperties(m_displayID);
  }

  /**
   * Get the name of a display in UTF-8 encoding.
   *
   * @returns the name of a display or nullptr on failure; call GetError() for
   *          more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetAll
   */
  const char* GetName() const { return SDL_GetDisplayName(m_displayID); }

  /**
   * Get the desktop area represented by a display.
   *
   * The primary display is often located at (0,0), but may be placed at a
   * different location depending on monitor layout.
   *
   * @returns the Rect structure filled in with the display bounds on success
   *          or std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetUsableBounds
   * @sa Display.GetAll
   */
  std::optional<Rect> GetBounds() const
  {
    Rect bounds;
    if (SDL_GetDisplayBounds(m_displayID, &bounds)) return bounds;
    return std::nullopt;
  }

  /**
   * Get the usable desktop area represented by a display, in screen
   * coordinates.
   *
   * This is the same area as Display.GetBounds() reports, but with portions
   * reserved by the system removed. For example, on Apple's macOS, this
   * subtracts the area occupied by the menu bar and dock.
   *
   * Setting a window to be fullscreen generally bypasses these unusable areas,
   * so these are good guidelines for the maximum space available to a
   * non-fullscreen window.
   *
   * @returns the Rect structure filled in with the display bounds on success
   *          or nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetBounds
   * @sa Display.GetAll
   */
  std::optional<Rect> GetUsableBounds() const
  {
    Rect bounds;
    if (SDL_GetDisplayUsableBounds(m_displayID, &bounds)) return bounds;
    return {};
  }

  /**
   * Get the orientation of a display when it is unrotated.
   *
   * @returns the DisplayOrientation enum value of the display, or
   *          `ORIENTATION_UNKNOWN` if it isn't available.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetAll
   */
  DisplayOrientation GetNaturalOrientation() const
  {
    return SDL_GetNaturalDisplayOrientation(m_displayID);
  }

  /**
   * Get the orientation of a display.
   *
   * @returns the DisplayOrientation enum value of the display, or
   *          `ORIENTATION_UNKNOWN` if it isn't available.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetAll
   */
  DisplayOrientation GetCurrentOrientation() const
  {
    return SDL_GetCurrentDisplayOrientation(m_displayID);
  }

  /**
   * Get the content scale of a display.
   *
   * The content scale is the expected scale for content based on the DPI
   * settings of the display. For example, a 4K display might have a 2.0 (200%)
   * display scale, which means that the user expects UI elements to be twice as
   * big on this display, to aid in readability.
   *
   * After window creation, WindowBase.GetDisplayScale() should be used to query
   * the content scale factor for individual windows instead of querying the
   * display for a window and calling this function, as the per-window content
   * scale factor may differ from the base value of the display it is on,
   * particularly on high-DPI and/or multi-monitor desktop configurations.
   *
   * @returns the content scale of the display, or 0.0f on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetDisplayScale
   * @sa Display.GetAll
   */
  float GetContentScale() const
  {
    return SDL_GetDisplayContentScale(m_displayID);
  }

  /**
   * Get a list of fullscreen display modes available on a display.
   *
   * The display modes are sorted in this priority:
   *
   * - w -> largest to smallest
   * - h -> largest to smallest
   * - bits per pixel -> more colors to fewer colors
   * - packed pixel layout -> largest to smallest
   * - refresh rate -> highest to lowest
   * - pixel density -> lowest to highest
   *
   * @returns a nullptr terminated array of display mode pointers or nullptr on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * This automatically calls SDL_free after result is out of scope.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetAll
   */
  OwnArray<DisplayMode*> GetFullscreenModes() const
  {
    int count = 0;
    auto data = SDL_GetFullscreenDisplayModes(m_displayID, &count);
    return OwnArray<DisplayMode*>{data, size_t(count)};
  }

  /**
   * Get the closest match to the requested display mode.
   *
   * The available display modes are scanned and `closest` is filled in with the
   * closest mode matching the requested mode and returned. The mode format and
   * refresh rate default to the desktop mode if they are set to 0. The modes
   * are scanned with size being first priority, format being second priority,
   * and finally checking the refresh rate. If all the available modes are too
   * small, then false is returned.
   *
   * @param w the width in pixels of the desired display mode.
   * @param h the height in pixels of the desired display mode.
   * @param refresh_rate the refresh rate of the desired display mode, or 0.0f
   *                     for the desktop refresh rate.
   * @param include_high_density_modes boolean to include high density modes in
   *                                   the search.
   * @returns the closest display mode equal to or larger than the desired mode
   *          on success or std::nullopt on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetAll
   * @sa Display.GetFullscreenModes
   */
  std::optional<DisplayMode> GetClosestFullscreenMode(
    int w,
    int h,
    float refresh_rate,
    bool include_high_density_modes) const
  {
    if (SDL_DisplayMode closest;
        SDL_GetClosestFullscreenDisplayMode(m_displayID,
                                            w,
                                            h,
                                            refresh_rate,
                                            include_high_density_modes,
                                            &closest)) {
      return closest;
    }
    return {};
  }

  /**
   * Get information about the desktop's display mode.
   *
   * There's a difference between this function and Display.GetCurrentMode()
   * when SDL runs fullscreen and has changed the resolution. In that case this
   * function will return the previous native display mode, and not the current
   * display mode.
   *
   * @returns a pointer to the desktop display mode or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetCurrentMode
   * @sa Display.GetAll
   */
  const DisplayMode* GetDesktopMode() const
  {
    return SDL_GetDesktopDisplayMode(m_displayID);
  }

  /**
   * Get information about the current display mode.
   *
   * There's a difference between this function and Display.GetDesktopMode()
   * when SDL runs fullscreen and has changed the resolution. In that case this
   * function will return the current display mode, and not the previous native
   * display mode.
   *
   * @returns a pointer to the desktop display mode or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetDesktopMode
   * @sa Display.GetAll
   */
  const DisplayMode* GetCurrentMode() const
  {
    return SDL_GetCurrentDisplayMode(m_displayID);
  }

  /**
   * Get the display containing a point.
   *
   * @param point the point to query.
   * @returns the instance ID of the display containing the point or 0 on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetBounds
   * @sa Display.GetAll
   */
  static Display GetForPoint(const SDL_Point& point)
  {
    return {SDL_GetDisplayForPoint(&point)};
  }

  /**
   * Get the display primarily containing a rect.
   *
   * @param rect the rect to query.
   * @returns the instance ID of the display entirely containing the rect or
   *          closest to the center of the rect on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetBounds
   * @sa Display.GetAll
   */
  static Display GetForRect(const SDL_Rect& rect)
  {
    return {SDL_GetDisplayForRect(&rect)};
  }

  /**
   * @brief Get the display associated with a window.
   * @param window the window to query.
   * @returns the instance ID of the display containing the center of the window
   *          on success or 0 on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   */
  static Display GetForWindow(WindowBase& window);
};

/**
 * This is a unique ID for a window.
 *
 * The value 0 is an invalid ID.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using WindowID = SDL_WindowID;

namespace prop::Global {

/**
 * The pointer to the global `wl_display` object used by the Wayland video
 * backend.
 *
 * Can be set before the video subsystem is initialized to import an external
 * `wl_display` object from an application or toolkit for use in SDL, or read
 * after initialization to export the `wl_display` used by the Wayland video
 * backend. Setting this property after the video subsystem has been
 * initialized has no effect, and reading it when the video subsystem is
 * uninitialized will either return the user provided value, if one was set
 * prior to initialization, or NULL. See docs/README-wayland.md for more
 * information.
 */
constexpr auto VIDEO_WAYLAND_WL_DISPLAY_POINTER =
  SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER;

} // namespace prop::Global

/**
 * @name SystemThemes
 * @{
 */

/**
 * System theme.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using SystemTheme = SDL_SystemTheme;

constexpr SystemTheme SYSTEM_THEME_UNKNOWN =
  SDL_SYSTEM_THEME_UNKNOWN; ///< Unknown system theme.

constexpr SystemTheme SYSTEM_THEME_LIGHT =
  SDL_SYSTEM_THEME_LIGHT; ///< Light colored system theme.

constexpr SystemTheme SYSTEM_THEME_DARK =
  SDL_SYSTEM_THEME_DARK; ///< Dark colored system theme.

/// @}

/**
 * Represents a handle to a window.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa WindowBase.WindowBase
 *
 * @cat resource
 *
 * @sa Window
 * @sa WindowRef
 */
struct WindowBase : Resource<SDL_Window*>
{
  using Resource::Resource;

  /**
   * Create a window with the specified dimensions and flags.
   *
   * The window size is a request and may be different than expected based on
   * the desktop layout and window manager policies. Your application should be
   * prepared to handle a window of any size.
   *
   * `flags` may be any of the following OR'd together:
   *
   * - `WINDOW_FULLSCREEN`: fullscreen window at desktop resolution
   * - `WINDOW_OPENGL`: window usable with an OpenGL context
   * - `WINDOW_OCCLUDED`: window partially or completely obscured by another
   *   window
   * - `WINDOW_HIDDEN`: window is not visible
   * - `WINDOW_BORDERLESS`: no window decoration
   * - `WINDOW_RESIZABLE`: window can be resized
   * - `WINDOW_MINIMIZED`: window is minimized
   * - `WINDOW_MAXIMIZED`: window is maximized
   * - `WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus
   * - `WINDOW_INPUT_FOCUS`: window has input focus
   * - `WINDOW_MOUSE_FOCUS`: window has mouse focus
   * - `WINDOW_EXTERNAL`: window not created by SDL
   * - `WINDOW_MODAL`: window is modal
   * - `WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back
   *   buffer if possible
   * - `WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to
   *   MOUSE_GRABBED)
   * - `WINDOW_ALWAYS_ON_TOP`: window should always be above others
   * - `WINDOW_UTILITY`: window should be treated as a utility window, not
   *   showing in the task bar and window list
   * - `WINDOW_TOOLTIP`: window should be treated as a tooltip and does not
   *   get mouse or keyboard focus, requires a parent window
   * - `WINDOW_POPUP_MENU`: window should be treated as a popup menu,
   *   requires a parent window
   * - `WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input
   * - `WINDOW_VULKAN`: window usable with a Vulkan instance
   * - `WINDOW_METAL`: window usable with a Metal instance
   * - `WINDOW_TRANSPARENT`: window with transparent buffer
   * - `WINDOW_NOT_FOCUSABLE`: window should not be focusable
   *
   * The WindowBase is implicitly shown if WINDOW_HIDDEN is not set.
   *
   * On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist
   * property to YES, otherwise you will not receive a High-DPI OpenGL canvas.
   *
   * The window pixel size may differ from its window coordinate size if the
   * window is on a high pixel density display. Use WindowBase.GetSize() to
   * query the client area's size in window coordinates, and
   * WindowBase.GetSizeInPixels() or RendererBase.GetOutputSize() to query the
   * drawable size in pixels. Note that the drawable size can vary after the
   * window is created and should be queried again if you get an
   * EVENT_WINDOW_PIXEL_SIZE_CHANGED event.
   *
   * If the window is created with any of the WINDOW_OPENGL or
   * WINDOW_VULKAN flags, then the corresponding LoadLibrary function
   * (GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the
   * corresponding UnloadLibrary function is called by WindowRef.reset().
   *
   * If WINDOW_VULKAN is specified and there isn't a working Vulkan driver,
   * WindowBase.WindowBase() will fail, because SDL_Vulkan_LoadLibrary() will
   * fail.
   *
   * If WINDOW_METAL is specified on an OS that does not support Metal,
   * WindowBase.WindowBase() will fail.
   *
   * If you intend to use this window with an RendererBase, you should use
   * CreateWindowAndRenderer() instead of this function, to avoid window
   * flicker.
   *
   * On non-Apple devices, SDL requires you to either not link to the Vulkan
   * loader or link to a dynamic library version. This limitation may be removed
   * in a future version of SDL.
   *
   * @param title the title of the window, in UTF-8 encoding.
   * @param size the width and height of the window.
   * @param flags 0, or one or more WindowFlags OR'd together.
   * @post the window that was created, convertible to true on success or
   *       convertible to false on failure; call GetError() for more
   *       information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa CreateWindowAndRenderer()
   */
  WindowBase(StringParam title, SDL_Point size, WindowFlags flags = 0)
    : Resource(SDL_CreateWindow(title, size.x, size.y, flags))
  {
  }

  /**
   * Create a child popup window of the specified parent window.
   *
   * The window size is a request and may be different than expected based on
   * the desktop layout and window manager policies. Your application should be
   * prepared to handle a window of any size.
   *
   * The flags parameter **must** contain at least one of the following:
   *
   * - `WINDOW_TOOLTIP`: The popup window is a tooltip and will not pass any
   *   input events.
   * - `WINDOW_POPUP_MENU`: The popup window is a popup menu. The topmost
   *   popup menu will implicitly gain the keyboard focus.
   *
   * The following flags are not relevant to popup window creation and will be
   * ignored:
   *
   * - `WINDOW_MINIMIZED`
   * - `WINDOW_MAXIMIZED`
   * - `WINDOW_FULLSCREEN`
   * - `WINDOW_BORDERLESS`
   *
   * The following flags are incompatible with popup window creation and will
   * cause it to fail:
   *
   * - `WINDOW_UTILITY`
   * - `WINDOW_MODAL`
   *
   * The parent parameter **must** be non-null and a valid window. The parent of
   * a popup window can be either a regular, toplevel window, or another popup
   * window.
   *
   * Popup windows cannot be minimized, maximized, made fullscreen, raised,
   * flash, be made a modal window, be the parent of a toplevel window, or grab
   * the mouse and/or keyboard. Attempts to do so will fail.
   *
   * Popup windows implicitly do not have a border/decorations and do not appear
   * on the taskbar/dock or in lists of windows such as alt-tab menus.
   *
   * If a parent window is hidden or destroyed, any child popup windows will be
   * recursively hidden or destroyed as well. Child popup windows not explicitly
   * hidden will be restored when the parent is shown.
   *
   * @param parent the parent of the window, must not be nullptr.
   * @param offset the x, y position of the popup window relative to the origin
   *               of the parent.
   * @param size the width and height of the window.
   * @param flags WINDOW_TOOLTIP or WINDOW_POPUP_MENU, and zero or more
   *              additional WindowFlags OR'd together.
   * @post the window that was created, convertible to true on success or
   *       convertible to false on failure; call GetError() for more
   *       information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetParent
   */
  WindowBase(WindowBase& parent,
             SDL_Point offset,
             SDL_Point size,
             WindowFlags flags = 0)
    : Resource(SDL_CreatePopupWindow(parent.get(),
                                     offset.x,
                                     offset.y,
                                     size.x,
                                     size.y,
                                     flags))
  {
  }

  /**
   * Create a window with the specified properties.
   *
   * The window size is a request and may be different than expected based on
   * the desktop layout and window manager policies. Your application should be
   * prepared to handle a window of any size.
   *
   * These are the supported properties:
   *
   * - `prop::Window.CREATE_ALWAYS_ON_TOP_BOOLEAN`: true if the window should
   *   be always on top
   * - `prop::Window.CREATE_BORDERLESS_BOOLEAN`: true if the window has no
   *   window decoration
   * - `prop::Window.CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN`: true if the
   *   window will be used with an externally managed graphics context.
   * - `prop::Window.CREATE_FOCUSABLE_BOOLEAN`: true if the window should
   *   accept keyboard input (defaults true)
   * - `prop::Window.CREATE_FULLSCREEN_BOOLEAN`: true if the window should
   *   start in fullscreen mode at desktop resolution
   * - `prop::Window.CREATE_HEIGHT_NUMBER`: the height of the window
   * - `prop::Window.CREATE_HIDDEN_BOOLEAN`: true if the window should start
   *   hidden
   * - `prop::Window.CREATE_HIGH_PIXEL_DENSITY_BOOLEAN`: true if the window
   *   uses a high pixel density buffer if possible
   * - `prop::Window.CREATE_MAXIMIZED_BOOLEAN`: true if the window should
   *   start maximized
   * - `prop::Window.CREATE_MENU_BOOLEAN`: true if the window is a popup menu
   * - `prop::Window.CREATE_METAL_BOOLEAN`: true if the window will be used
   *   with Metal rendering
   * - `prop::Window.CREATE_MINIMIZED_BOOLEAN`: true if the window should
   *   start minimized
   * - `prop::Window.CREATE_MODAL_BOOLEAN`: true if the window is modal to
   *   its parent
   * - `prop::Window.CREATE_MOUSE_GRABBED_BOOLEAN`: true if the window starts
   *   with grabbed mouse focus
   * - `prop::Window.CREATE_OPENGL_BOOLEAN`: true if the window will be used
   *   with OpenGL rendering
   * - `prop::Window.CREATE_PARENT_POINTER`: an WindowBase that will be the
   *   parent of this window, required for windows with the "tooltip", "menu",
   *   and "modal" properties
   * - `prop::Window.CREATE_RESIZABLE_BOOLEAN`: true if the window should be
   *   resizable
   * - `prop::Window.CREATE_TITLE_STRING`: the title of the window, in UTF-8
   *   encoding
   * - `prop::Window.CREATE_TRANSPARENT_BOOLEAN`: true if the window show
   *   transparent in the areas with alpha of 0
   * - `prop::Window.CREATE_TOOLTIP_BOOLEAN`: true if the window is a tooltip
   * - `prop::Window.CREATE_UTILITY_BOOLEAN`: true if the window is a utility
   *   window, not showing in the task bar and window list
   * - `prop::Window.CREATE_VULKAN_BOOLEAN`: true if the window will be used
   *   with Vulkan rendering
   * - `prop::Window.CREATE_WIDTH_NUMBER`: the width of the window
   * - `prop::Window.CREATE_X_NUMBER`: the x position of the window, or
   *   `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is
   *   relative to the parent for windows with the "tooltip" or "menu" property
   *   set.
   * - `prop::Window.CREATE_Y_NUMBER`: the y position of the window, or
   *   `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is
   *   relative to the parent for windows with the "tooltip" or "menu" property
   *   set.
   *
   * These are additional supported properties on macOS:
   *
   * - `prop::Window.CREATE_COCOA_WINDOW_POINTER`: the
   *   `(__unsafe_unretained)` NSWindow associated with the window, if you want
   *   to wrap an existing window.
   * - `prop::Window.CREATE_COCOA_VIEW_POINTER`: the `(__unsafe_unretained)`
   *   NSView associated with the window, defaults to `[window contentView]`
   *
   * These are additional supported properties on Wayland:
   *
   * - `prop::Window.CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN` - true if
   *   the application wants to use the Wayland surface for a custom role and
   *   does not want it attached to an XDG toplevel window. See
   *   [README/wayland](README/wayland) for more information on using custom
   *   surfaces.
   * - `prop::Window.CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN` - true if the
   *   application wants an associated `wl_egl_window` object to be created and
   *   attached to the window, even if the window does not have the OpenGL
   *   property or `WINDOW_OPENGL` flag set.
   * - `prop::Window.CREATE_WAYLAND_WL_SURFACE_POINTER` - the wl_surface
   *   associated with the window, if you want to wrap an existing window. See
   *   [README/wayland](README/wayland) for more information.
   *
   * These are additional supported properties on Windows:
   *
   * - `prop::Window.CREATE_WIN32_HWND_POINTER`: the HWND associated with the
   *   window, if you want to wrap an existing window.
   * - `prop::Window.CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER`: optional,
   *   another window to share pixel format with, useful for OpenGL windows
   *
   * These are additional supported properties with X11:
   *
   * - `prop::Window.CREATE_X11_WINDOW_NUMBER`: the X11 Window associated
   *   with the window, if you want to wrap an existing window.
   *
   * The window is implicitly shown if the "hidden" property is not set.
   *
   * Windows with the "tooltip" and "menu" properties are popup windows and have
   * the behaviors and guidelines outlined in WindowBase.WindowBase().
   *
   * If this window is being created to be used with an RendererBase, you should
   * not add a graphics API specific property
   * (`prop::Window.CREATE_OPENGL_BOOLEAN`, etc), as SDL will handle that
   * internally when it chooses a renderer. However, SDL might need to recreate
   * your window at that point, which may cause the window to appear briefly,
   * and then flicker as it is recreated. The correct approach to this is to
   * create the window with the `prop::Window.CREATE_HIDDEN_BOOLEAN` property
   * set to true, then create the renderer, then show the window with
   * WindowBase.Show().
   *
   * @param props the properties to use.
   * @post the window that was created, convertible to true on success or
   *       convertible to false on failure; call GetError() for more
   *       information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Properties.Properties
   */
  WindowBase(PropertiesBase& props)
    : Resource(SDL_CreateWindowWithProperties(props.get()))
  {
  }

  /**
   * Get the display associated with a window.
   *
   * @returns the instance ID of the display containing the center of the window
   *          on success or 0 on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Display.GetBounds
   * @sa Display.GetAll
   */
  Display GetDisplay() const { return SDL_GetDisplayForWindow(get()); }

  /**
   * Get the pixel density of a window.
   *
   * This is a ratio of pixel size to window size. For example, if the window is
   * 1920x1080 and it has a high density back buffer of 3840x2160 pixels, it
   * would have a pixel density of 2.0.
   *
   * @returns the pixel density or 0.0f on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetDisplayScale
   */
  float GetPixelDensity() const { return SDL_GetWindowPixelDensity(get()); }

  /**
   * Get the content display scale relative to a window's pixel size.
   *
   * This is a combination of the window pixel density and the display content
   * scale, and is the expected scale for displaying content in this window. For
   * example, if a 3840x2160 window had a display scale of 2.0, the user expects
   * the content to take twice as many pixels and be the same physical size as
   * if it were being displayed in a 1920x1080 window with a display scale of
   * 1.0.
   *
   * Conceptually this value corresponds to the scale display setting, and is
   * updated when that setting is changed, or the window moves to a display with
   * a different scale setting.
   *
   * @returns the display scale, or 0.0f on failure; call GetError() for
   *          more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  float GetDisplayScale() const { return SDL_GetWindowDisplayScale(get()); }

  /**
   * Set the display mode to use when a window is visible and fullscreen.
   *
   * This only affects the display mode used when the window is fullscreen. To
   * change the window size when the window is not fullscreen, use
   * WindowBase.SetSize().
   *
   * If the window is currently in the fullscreen state, this request is
   * asynchronous on some windowing systems and the new mode dimensions may not
   * be applied immediately upon the return of this function. If an immediate
   * change is required, call WindowBase.Sync() to block until the changes have
   * taken effect.
   *
   * When the new mode takes effect, an EVENT_WINDOW_RESIZED and/or an
   * EVENT_WINDOW_PIXEL_SIZE_CHANGED event will be emitted with the new mode
   * dimensions.
   *
   * @param mode the display mode to use, which can be nullptr for borderless
   *             fullscreen desktop mode, or one of the fullscreen modes
   *             returned by Display.GetFullscreenModes() to set an exclusive
   *             fullscreen mode.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetFullscreenMode
   * @sa WindowBase.SetFullscreen
   * @sa WindowBase.Sync
   */
  bool SetFullscreenMode(OptionalRef<const DisplayMode> mode)
  {
    return SDL_SetWindowFullscreenMode(get(), mode);
  }

  /**
   * Query the display mode to use when a window is visible at fullscreen.
   *
   * @returns a pointer to the exclusive fullscreen mode to use or nullptr for
   *          borderless fullscreen desktop mode.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetFullscreenMode
   * @sa WindowBase.SetFullscreen
   */
  const DisplayMode* GetFullscreenMode() const
  {
    return SDL_GetWindowFullscreenMode(get());
  }

  /**
   * Get the raw ICC profile data for the screen the window is currently on.
   *
   * @param size the size of the ICC profile.
   * @returns the raw ICC profile data on success or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  OwnPtr<void> GetICCProfile(size_t* size) const
  {
    return OwnPtr<void>{SDL_GetWindowICCProfile(get(), size)};
  }

  /**
   * Get the pixel format associated with the window.
   *
   * @returns the pixel format of the window on success or
   *          PIXELFORMAT_UNKNOWN on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PixelFormat GetPixelFormat() const { return SDL_GetWindowPixelFormat(get()); }

  /**
   * Get the numeric ID of a window.
   *
   * The numeric ID is what WindowEvent references, and is necessary to map
   * these events to specific WindowBase objects.
   *
   * @returns the ID of the window on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowRef.FromID
   */
  WindowID GetID() const { return SDL_GetWindowID(get()); }

  /**
   * Get parent of a window.
   *
   * @returns the parent of the window on success or nullptr if the window has
   *          no parent.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.WindowBase
   */
  WindowRef GetParent() const;

  /**
   * Get the properties associated with a window.
   *
   * The following read-only properties are provided by SDL:
   *
   * - `prop::Window.SHAPE_POINTER`: the surface associated with a shaped
   *   window
   * - `prop::Window.HDR_ENABLED_BOOLEAN`: true if the window has HDR
   *   headroom above the SDR white point. This property can change dynamically
   *   when EVENT_WINDOW_HDR_STATE_CHANGED is sent.
   * - `prop::Window.SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the
   *   COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the
   *   SDR white level in scRGB colorspace, and on Apple platforms this is
   *   always 1.0 for EDR content. This property can change dynamically when
   *   EVENT_WINDOW_HDR_STATE_CHANGED is sent.
   * - `prop::Window.HDR_HEADROOM_FLOAT`: the additional high dynamic range
   *   that can be displayed, in terms of the SDR white point. When HDR is not
   *   enabled, this will be 1.0. This property can change dynamically when
   *   EVENT_WINDOW_HDR_STATE_CHANGED is sent.
   *
   * On Android:
   *
   * - `prop::Window.ANDROID_WINDOW_POINTER`: the ANativeWindow associated
   *   with the window
   * - `prop::Window.ANDROID_SURFACE_POINTER`: the EGLSurface associated with
   *   the window
   *
   * On iOS:
   *
   * - `prop::Window.UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`
   *   UIWindow associated with the window
   * - `prop::Window.UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag
   *   associated with metal views on the window
   * - `prop::Window.UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's
   *   framebuffer object. It must be bound when rendering to the screen using
   *   OpenGL.
   * - `prop::Window.UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's
   *   renderbuffer object. It must be bound when GL_SwapWindow is called.
   * - `prop::Window.UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL
   *   view's resolve framebuffer, when MSAA is used.
   *
   * On KMS/DRM:
   *
   * - `prop::Window.KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated
   *   with the window (e.g. the X in /dev/dri/cardX)
   * - `prop::Window.KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the
   *   window
   * - `prop::Window.KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated
   *   with the window
   *
   * On macOS:
   *
   * - `prop::Window.COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`
   *   NSWindow associated with the window
   * - `prop::Window.COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag
   *   assocated with metal views on the window
   *
   * On OpenVR:
   *
   * - `prop::Window.OPENVR_OVERLAY_ID`: the OpenVR Overlay Handle ID for the
   *   associated overlay window.
   *
   * On Vivante:
   *
   * - `prop::Window.VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType
   *   associated with the window
   * - `prop::Window.VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType
   *   associated with the window
   * - `prop::Window.VIVANTE_SURFACE_POINTER`: the EGLSurface associated with
   *   the window
   *
   * On Windows:
   *
   * - `prop::Window.WIN32_HWND_POINTER`: the HWND associated with the window
   * - `prop::Window.WIN32_HDC_POINTER`: the HDC associated with the window
   * - `prop::Window.WIN32_INSTANCE_POINTER`: the HINSTANCE associated with
   *   the window
   *
   * On Wayland:
   *
   * Note: The `xdg_*` window objects do not internally persist across window
   * show/hide calls. They will be null if the window is hidden and must be
   * queried each time it is shown.
   *
   * - `prop::Window.WAYLAND_DISPLAY_POINTER`: the wl_display associated with
   *   the window
   * - `prop::Window.WAYLAND_SURFACE_POINTER`: the wl_surface associated with
   *   the window
   * - `prop::Window.WAYLAND_VIEWPORT_POINTER`: the wp_viewport associated
   *   with the window
   * - `prop::Window.WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window
   *   associated with the window
   * - `prop::Window.WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated
   *   with the window
   * - `prop::Window.WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role
   *   associated with the window
   * - 'prop::Window.WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export
   *   handle associated with the window
   * - `prop::Window.WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role
   *   associated with the window
   * - `prop::Window.WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner
   *   associated with the window, in popup mode
   *
   * On X11:
   *
   * - `prop::Window.X11_DISPLAY_POINTER`: the X11 Display associated with
   *   the window
   * - `prop::Window.X11_SCREEN_NUMBER`: the screen number associated with
   *   the window
   * - `prop::Window.X11_WINDOW_NUMBER`: the X11 Window associated with the
   *   window
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PropertiesRef GetProperties() const { return SDL_GetWindowProperties(get()); }

  /**
   * Get the window flags.
   *
   * @returns a mask of the WindowFlags associated with `window`.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.WindowBase
   * @sa WindowBase.Hide
   * @sa WindowBase.Maximize
   * @sa WindowBase.Minimize
   * @sa WindowBase.SetFullscreen
   * @sa WindowBase.SetMouseGrab
   * @sa WindowBase.Show
   */
  WindowFlags GetFlags() const { return SDL_GetWindowFlags(get()); }

  /**
   * Set the title of a window.
   *
   * This string is expected to be in UTF-8 encoding.
   *
   * @param title the desired window title in UTF-8 format.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetTitle
   */
  bool SetTitle(StringParam title) { return SDL_SetWindowTitle(get(), title); }

  /**
   * Get the title of a window.
   *
   * @returns the title of the window in UTF-8 format or "" if there is no
   *          title.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetTitle
   */
  const char* GetTitle() const { return SDL_GetWindowTitle(get()); }

  /**
   * Set the icon for a window.
   *
   * If this function is passed a surface with alternate representations, the
   * surface will be interpreted as the content to be used for 100% display
   * scale, and the alternate representations will be used for high DPI
   * situations. For example, if the original surface is 32x32, then on a 2x
   * macOS display or 200% display scale on Windows, a 64x64 version of the
   * image will be used, if available. If a matching version of the image isn't
   * available, the closest larger size image will be downscaled to the
   * appropriate size and be used instead, if available. Otherwise, the closest
   * smaller image will be upscaled and be used instead.
   *
   * @param icon an SurfaceBase structure containing the icon for the window.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetIcon(SurfaceBase& icon)
  {
    return SDL_SetWindowIcon(get(), icon.get());
  }

  /**
   * @brief Request the window's position and size to be set.
   *
   * @param rect the rect containing the new coordinates
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @sa WindowBase.SetPosition()
   * @sa WindowBase.SetSize()
   */
  bool SetRect(Rect rect)
  {
    return SetPosition(rect.GetTopLeft()) && SetSize(rect.GetSize());
  }

  /**
   * Get the position and client size of a window.
   *
   * This is the current position of the window as last reported by the
   * windowing system.
   *
   * The window pixel size may differ from its window coordinate size if the
   * window is on a high pixel density display. Use Window.GetSizeInPixels()
   * or RendererBase.GetOutputSize() to get the real client area size in pixels.
   *
   * @return std::optional<Rect>
   */
  std::optional<Rect> GetRect() const
  {
    if (Rect rect; GetPosition(&rect.x, &rect.y) && GetSize(&rect.w, &rect.h)) {
      return rect;
    }
    return std::nullopt;
  }

  /**
   * Request that the window's position be set.
   *
   * If the window is in an exclusive fullscreen or maximized state, this
   * request has no effect.
   *
   * This can be used to reposition fullscreen-desktop windows onto a different
   * display, however, as exclusive fullscreen windows are locked to a specific
   * display, they can only be repositioned programmatically via
   * WindowBase.SetFullscreenMode().
   *
   * On some windowing systems this request is asynchronous and the new
   * coordinates may not have have been applied immediately upon the return of
   * this function. If an immediate change is required, call WindowBase.Sync()
   * to block until the changes have taken effect.
   *
   * When the window position changes, an EVENT_WINDOW_MOVED event will be
   * emitted with the window's new coordinates. Note that the new coordinates
   * may not match the exact coordinates requested, as some windowing systems
   * can restrict the position of the window in certain scenarios (e.g.
   * constraining the position so the window is always within desktop bounds).
   * Additionally, as this is just a request, it can be denied by the windowing
   * system.
   *
   * @param p the x, y coordinate of the window, or `WINDOWPOS_CENTERED` or
   *          `WINDOWPOS_UNDEFINED`.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetPosition
   * @sa WindowBase.Sync
   */
  bool SetPosition(SDL_Point p)
  {
    return SDL_SetWindowPosition(get(), p.x, p.y);
  }

  /**
   * Get the position of a window.
   *
   * This is the current position of the window as last reported by the
   * windowing system.
   *
   * @returns the position on success or false on std::nullopt; call
   * GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetPosition()
   * @sa SetPosition(int *, int *)
   */
  std::optional<Point> GetPosition() const
  {
    if (Point p; GetPosition(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the position of a window.
   *
   * This is the current position of the window as last reported by the
   * windowing system.
   *
   * If you do not need the value for one of the positions a nullptr may be
   * passed in the `x` or `y` parameter.
   *
   * @param x a pointer filled in with the x position of the window, may be
   *          nullptr.
   * @param y a pointer filled in with the y position of the window, may be
   *          nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetPosition
   */
  bool GetPosition(int* x, int* y) const
  {
    return SDL_GetWindowPosition(get(), x, y);
  }

  /**
   * Request that the size of a window's client area be set.
   *
   * If the window is in a fullscreen or maximized state, this request has no
   * effect.
   *
   * To change the exclusive fullscreen mode of a window, use
   * WindowBase.SetFullscreenMode().
   *
   * On some windowing systems, this request is asynchronous and the new window
   * size may not have have been applied immediately upon the return of this
   * function. If an immediate change is required, call WindowBase.Sync() to
   * block until the changes have taken effect.
   *
   * When the window size changes, an EVENT_WINDOW_RESIZED event will be
   * emitted with the new window dimensions. Note that the new dimensions may
   * not match the exact size requested, as some windowing systems can restrict
   * the window size in certain scenarios (e.g. constraining the size of the
   * content area to remain within the usable desktop bounds). Additionally, as
   * this is just a request, it can be denied by the windowing system.
   *
   * @param p the width, height of the window, both must be > 0.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSize
   * @sa WindowBase.SetFullscreenMode
   * @sa WindowBase.Sync
   */
  bool SetSize(SDL_Point p) { return SDL_SetWindowSize(get(), p.x, p.y); }

  /**
   * Get the size of a window's client area.
   *
   * The window pixel size may differ from its window coordinate size if the
   * window is on a high pixel density display. Use GetSizeInPixels()
   * or Renderer.GetOutputSize() to get the real client area size in pixels.
   *
   * @returns a point with width and height on success or std::nullopt on
   * failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Renderer.GetOutputSize()
   * @sa GetSizeInPixels()
   * @sa SetSize()
   * @sa GetSize(int *, int *)
   */
  std::optional<Point> GetSize() const
  {
    if (Point p; GetSize(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the size of a window's client area.
   *
   * The window pixel size may differ from its window coordinate size if the
   * window is on a high pixel density display. Use WindowBase.GetSizeInPixels()
   * or RendererBase.GetOutputSize() to get the real client area size in pixels.
   *
   * @param w a pointer filled in with the width of the window, may be nullptr.
   * @param h a pointer filled in with the height of the window, may be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetOutputSize
   * @sa WindowBase.GetSizeInPixels
   * @sa WindowBase.SetSize
   */
  bool GetSize(int* w, int* h) const { return SDL_GetWindowSize(get(), w, h); }

  /**
   * Get the safe area for this window.
   *
   * Some devices have portions of the screen which are partially obscured or
   * not interactive, possibly due to on-screen controls, curved edges, camera
   * notches, TV overscan, etc. This function provides the area of the window
   * which is safe to have interactable content. You should continue rendering
   * into the rest of the window, but it should not contain visually important
   * or interactible content.
   *
   * @returns the client area that is safe for interactive content on success or
   *          std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  std::optional<Rect> GetSafeArea() const
  {
    if (Rect rect; SDL_GetWindowSafeArea(get(), &rect)) return rect;
    return std::nullopt;
  }

  /**
   * Request that the aspect ratio of a window's client area be set.
   *
   * The aspect ratio is the ratio of width divided by height, e.g. 2560x1600
   * would be 1.6. Larger aspect ratios are wider and smaller aspect ratios are
   * narrower.
   *
   * If, at the time of this request, the window in a fixed-size state, such as
   * maximized or fullscreen, the request will be deferred until the window
   * exits this state and becomes resizable again.
   *
   * On some windowing systems, this request is asynchronous and the new window
   * aspect ratio may not have have been applied immediately upon the return of
   * this function. If an immediate change is required, call WindowBase.Sync()
   * to block until the changes have taken effect.
   *
   * When the window size changes, an EVENT_WINDOW_RESIZED event will be
   * emitted with the new window dimensions. Note that the new dimensions may
   * not match the exact aspect ratio requested, as some windowing systems can
   * restrict the window size in certain scenarios (e.g. constraining the size
   * of the content area to remain within the usable desktop bounds).
   * Additionally, as this is just a request, it can be denied by the windowing
   * system.
   *
   * @param min_aspect the minimum aspect ratio of the window, or 0.0f for no
   *                   limit.
   * @param max_aspect the maximum aspect ratio of the window, or 0.0f for no
   *                   limit.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetAspectRatio
   * @sa WindowBase.Sync
   */
  bool SetAspectRatio(float min_aspect, float max_aspect)
  {
    return SDL_SetWindowAspectRatio(get(), min_aspect, max_aspect);
  }

  /**
   * Get the size of a window's client area.
   *
   * @param min_aspect a pointer filled in with the minimum aspect ratio of the
   *                   window, may be nullptr.
   * @param max_aspect a pointer filled in with the maximum aspect ratio of the
   *                   window, may be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetAspectRatio
   */
  bool GetAspectRatio(float* min_aspect, float* max_aspect) const
  {
    return SDL_GetWindowAspectRatio(get(), min_aspect, max_aspect);
  }

  /**
   * Get the size of a window's borders (decorations) around the client area.
   *
   * Note: If this function fails (returns false), the size values will be
   * initialized to 0, 0, 0, 0 (if a non-nullptr pointer is provided), as if the
   * window in question was borderless.
   *
   * Note: This function may fail on systems where the window has not yet been
   * decorated by the display server (for example, immediately after calling
   * WindowBase.WindowBase). It is recommended that you wait at least until the
   * window has been presented and composited, so that the window system has a
   * chance to decorate the window and provide the border dimensions to SDL.
   *
   * This function also returns false if getting the information is not
   * supported.
   *
   * @param top pointer to variable for storing the size of the top border;
   *            nullptr is permitted.
   * @param left pointer to variable for storing the size of the left border;
   *             nullptr is permitted.
   * @param bottom pointer to variable for storing the size of the bottom
   *               border; nullptr is permitted.
   * @param right pointer to variable for storing the size of the right border;
   *              nullptr is permitted.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSize
   */
  bool GetBordersSize(int* top, int* left, int* bottom, int* right) const
  {
    return SDL_GetWindowBordersSize(get(), top, left, bottom, right);
  }

  /**
   * Get the size of a window's client area, in pixels.
   *
   * @returns the size on success or std::nullopt on failure; call GetError()
   * for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetSize()
   * @sa GetSizeInPixels(int*, int*)
   */
  std::optional<Point> GetSizeInPixels() const
  {
    if (Point p; GetSizeInPixels(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the size of a window's client area, in pixels.
   *
   * @param w a pointer to variable for storing the width in pixels, may be
   *          nullptr.
   * @param h a pointer to variable for storing the height in pixels, may be
   *          nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.WindowBase
   * @sa WindowBase.GetSize
   */
  bool GetSizeInPixels(int* w, int* h) const
  {
    return SDL_GetWindowSizeInPixels(get(), w, h);
  }

  /**
   * Set the minimum size of a window's client area.
   *
   * @param p the minimum width and height of the window, or 0 for no limit.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMinimumSize
   * @sa WindowBase.SetMaximumSize
   */
  bool SetMinimumSize(SDL_Point p)
  {
    return SDL_SetWindowMinimumSize(get(), p.x, p.y);
  }

  /**
   * Get the minimum size of a window's client area.
   *
   * @param w a pointer filled in with the minimum width of the window, may be
   *          nullptr.
   * @param h a pointer filled in with the minimum height of the window, may be
   *          nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMaximumSize
   * @sa WindowBase.SetMinimumSize
   */
  bool GetMinimumSize(int* w, int* h) const
  {
    return SDL_GetWindowMinimumSize(get(), w, h);
  }

  /**
   * Set the maximum size of a window's client area.
   *
   * @param p the maximum width and height of the window, or 0 for no limit.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMaximumSize
   * @sa WindowBase.SetMinimumSize
   */
  bool SetMaximumSize(SDL_Point p)
  {
    return SDL_SetWindowMaximumSize(get(), p.x, p.y);
  }

  /**
   * Get the maximum size of a window's client area.
   *
   * @param w a pointer filled in with the maximum width of the window, may be
   *          nullptr.
   * @param h a pointer filled in with the maximum height of the window, may be
   *          nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMinimumSize
   * @sa WindowBase.SetMaximumSize
   */
  bool GetMaximumSize(int* w, int* h) const
  {
    return SDL_GetWindowMaximumSize(get(), w, h);
  }

  /**
   * Set the border state of a window.
   *
   * This will add or remove the window's `WINDOW_BORDERLESS` flag and add
   * or remove the border from the actual window. This is a no-op if the
   * window's border already matches the requested state.
   *
   * You can't change the border state of a fullscreen window.
   *
   * @param bordered false to remove border, true to add border.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetFlags
   */
  bool SetBordered(bool bordered)
  {
    return SDL_SetWindowBordered(get(), bordered);
  }

  /**
   * Set the user-resizable state of a window.
   *
   * This will add or remove the window's `WINDOW_RESIZABLE` flag and
   * allow/disallow user resizing of the window. This is a no-op if the window's
   * resizable state already matches the requested state.
   *
   * You can't change the resizable state of a fullscreen window.
   *
   * @param resizable true to allow resizing, false to disallow.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetFlags
   */
  bool SetResizable(bool resizable)
  {
    return SDL_SetWindowResizable(get(), resizable);
  }

  /**
   * Set the window to always be above the others.
   *
   * This will add or remove the window's `WINDOW_ALWAYS_ON_TOP` flag. This
   * will bring the window to the front and keep the window above the rest.
   *
   * @param on_top true to set the window always on top, false to disable.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetFlags
   */
  bool SetAlwaysOnTop(bool on_top)
  {
    return SDL_SetWindowAlwaysOnTop(get(), on_top);
  }

  /**
   * Show a window.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.Hide
   * @sa WindowBase.Raise
   */
  bool Show() { return SDL_ShowWindow(get()); }

  /**
   * Hide a window.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.Show
   * @sa WINDOW_HIDDEN
   */
  bool Hide() { return SDL_HideWindow(get()); }

  /**
   * Request that a window be raised above other windows and gain the input
   * focus.
   *
   * The result of this request is subject to desktop window manager policy,
   * particularly if raising the requested window would result in stealing focus
   * from another application. If the window is successfully raised and gains
   * input focus, an EVENT_WINDOW_FOCUS_GAINED event will be emitted, and
   * the window will have the WINDOW_INPUT_FOCUS flag set.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Raise() { return SDL_RaiseWindow(get()); }

  /**
   * Request that the window be made as large as possible.
   *
   * Non-resizable windows can't be maximized. The window must have the
   * WINDOW_RESIZABLE flag set, or this will have no effect.
   *
   * On some windowing systems this request is asynchronous and the new window
   * state may not have have been applied immediately upon the return of this
   * function. If an immediate change is required, call WindowBase.Sync() to
   * block until the changes have taken effect.
   *
   * When the window state changes, an EVENT_WINDOW_MAXIMIZED event will be
   * emitted. Note that, as this is just a request, the windowing system can
   * deny the state change.
   *
   * When maximizing a window, whether the constraints set via
   * WindowBase.SetMaximumSize() are honored depends on the policy of the window
   * manager. Win32 and macOS enforce the constraints when maximizing, while X11
   * and Wayland window managers may vary.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.Minimize
   * @sa WindowBase.Restore
   * @sa WindowBase.Sync
   */
  bool Maximize() { return SDL_MaximizeWindow(get()); }

  /**
   * Request that the window be minimized to an iconic representation.
   *
   * If the window is in a fullscreen state, this request has no direct effect.
   * It may alter the state the window is returned to when leaving fullscreen.
   *
   * On some windowing systems this request is asynchronous and the new window
   * state may not have been applied immediately upon the return of this
   * function. If an immediate change is required, call WindowBase.Sync() to
   * block until the changes have taken effect.
   *
   * When the window state changes, an EVENT_WINDOW_MINIMIZED event will be
   * emitted. Note that, as this is just a request, the windowing system can
   * deny the state change.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.Maximize
   * @sa WindowBase.Restore
   * @sa WindowBase.Sync
   */
  bool Minimize() { return SDL_MinimizeWindow(get()); }

  /**
   * Request that the size and position of a minimized or maximized window be
   * restored.
   *
   * If the window is in a fullscreen state, this request has no direct effect.
   * It may alter the state the window is returned to when leaving fullscreen.
   *
   * On some windowing systems this request is asynchronous and the new window
   * state may not have have been applied immediately upon the return of this
   * function. If an immediate change is required, call WindowBase.Sync() to
   * block until the changes have taken effect.
   *
   * When the window state changes, an EVENT_WINDOW_RESTORED event will be
   * emitted. Note that, as this is just a request, the windowing system can
   * deny the state change.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.Maximize
   * @sa WindowBase.Minimize
   * @sa WindowBase.Sync
   */
  bool Restore() { return SDL_RestoreWindow(get()); }

  /**
   * Request that the window's fullscreen state be changed.
   *
   * By default a window in fullscreen state uses borderless fullscreen desktop
   * mode, but a specific exclusive display mode can be set using
   * WindowBase.SetFullscreenMode().
   *
   * On some windowing systems this request is asynchronous and the new
   * fullscreen state may not have have been applied immediately upon the return
   * of this function. If an immediate change is required, call
   * WindowBase.Sync() to block until the changes have taken effect.
   *
   * When the window state changes, an EVENT_WINDOW_ENTER_FULLSCREEN or
   * EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this
   * is just a request, it can be denied by the windowing system.
   *
   * @param fullscreen true for fullscreen mode, false for windowed mode.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetFullscreenMode
   * @sa WindowBase.SetFullscreenMode
   * @sa WindowBase.Sync
   * @sa WINDOW_FULLSCREEN
   */
  bool SetFullscreen(bool fullscreen)
  {
    return SDL_SetWindowFullscreen(get(), fullscreen);
  }

  /**
   * Block until any pending window state is finalized.
   *
   * On asynchronous windowing systems, this acts as a synchronization barrier
   * for pending window state. It will attempt to wait until any pending window
   * state has been applied and is guaranteed to return within finite time. Note
   * that for how long it can potentially block depends on the underlying window
   * system, as window state changes may involve somewhat lengthy animations
   * that must complete before the window is in its final requested state.
   *
   * On windowing systems where changes are immediate, this does nothing.
   *
   * @returns true on success or false if the operation timed out before the
   *          window was in the requested state.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetSize
   * @sa WindowBase.SetPosition
   * @sa WindowBase.SetFullscreen
   * @sa WindowBase.Minimize
   * @sa WindowBase.Maximize
   * @sa WindowBase.Restore
   * @sa SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS
   */
  bool Sync() { return SDL_SyncWindow(get()); }

  /**
   * Return whether the window has a surface associated with it.
   *
   * @returns true if there is a surface associated with the window, or false
   *          otherwise.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSurface
   */
  bool HasSurface() const { return SDL_WindowHasSurface(get()); }

  /**
   * Get the SDL surface associated with the window.
   *
   * A new surface will be created with the optimal format for the window, if
   * necessary. This surface will be freed when the window is destroyed. Do not
   * free this surface.
   *
   * This surface will be invalidated if the window is resized. After resizing a
   * window this function must be called again to return a valid surface.
   *
   * You may not combine this with 3D or the rendering API on this window.
   *
   * This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.
   *
   * @returns the surface associated with the window, or nullptr on failure;
   *          call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.DestroySurface
   * @sa WindowBase.HasSurface
   * @sa WindowBase.UpdateSurface
   * @sa WindowBase.UpdateSurfaceRects
   */
  SurfaceRef GetSurface() { return SDL_GetWindowSurface(get()); }

  /**
   * Toggle VSync for the window surface.
   *
   * When a window surface is created, vsync defaults to
   * SDL_WINDOW_SURFACE_VSYNC_DISABLED.
   *
   * The `vsync` parameter can be 1 to synchronize present with every vertical
   * refresh, 2 to synchronize present with every second vertical refresh, etc.,
   * SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync),
   * or SDL_WINDOW_SURFACE_VSYNC_DISABLED to disable. Not every value is
   * supported by every driver, so you should check the return value to see
   * whether the requested setting is supported.
   *
   * @param vsync the vertical refresh sync interval.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSurfaceVSync
   */
  bool SetSurfaceVSync(int vsync)
  {
    return SDL_SetWindowSurfaceVSync(get(), vsync);
  }

  /**
   * Get VSync for the window surface.
   *
   * @returns the current vertical refresh sync interval on success or
   * std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetSurfaceVSync
   */
  std::optional<int> GetSurfaceVSync() const
  {
    if (int vsync; SDL_GetWindowSurfaceVSync(get(), &vsync)) return vsync;
    return std::nullopt;
  }

  /**
   * Copy the window surface to the screen.
   *
   * This is the function you use to reflect any changes to the surface on the
   * screen.
   *
   * This function is equivalent to the SDL 1.2 API SDL_Flip().
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSurface
   * @sa WindowBase.UpdateSurfaceRects
   */
  bool UpdateSurface() { return SDL_UpdateWindowSurface(get()); }

  /**
   * Copy areas of the window surface to the screen.
   *
   * This is the function you use to reflect changes to portions of the surface
   * on the screen.
   *
   * This function is equivalent to the SDL 1.2 API SDL_UpdateRects().
   *
   * Note that this function will update _at least_ the rectangles specified,
   * but this is only intended as an optimization; in practice, this might
   * update more of the screen (or all of the screen!), depending on what method
   * SDL uses to send pixels to the system.
   *
   * @param rects an array of Rect structures representing areas of the
   *              surface to copy, in pixels.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSurface
   * @sa WindowBase.UpdateSurface
   */
  bool UpdateSurfaceRects(SpanRef<const SDL_Rect> rects)
  {
    SDL_assert_paranoid(rects.size() < SDL_MAX_SINT32);
    return SDL_UpdateWindowSurfaceRects(get(), rects.data(), rects.size());
  }

  /**
   * Destroy the surface associated with the window.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetSurface
   * @sa WindowBase.HasSurface
   */
  bool DestroySurface() { return SDL_DestroyWindowSurface(get()); }

  /**
   * Set a window's keyboard grab mode.
   *
   * Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or
   * the Meta/Super key. Note that not all system keyboard shortcuts can be
   * captured by applications (one example is Ctrl+Alt+Del on Windows).
   *
   * This is primarily intended for specialized applications such as VNC clients
   * or VM frontends. Normal games should not use keyboard grab.
   *
   * When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the
   * window is full-screen to ensure the user is not trapped in your
   * application. If you have a custom keyboard shortcut to exit fullscreen
   * mode, you may suppress this behavior with
   * `SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.
   *
   * If the caller enables a grab while another window is currently grabbed, the
   * other window loses its grab in favor of the caller's window.
   *
   * @param grabbed this is true to grab keyboard, and false to release.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetKeyboardGrab
   * @sa WindowBase.SetMouseGrab
   */
  bool SetKeyboardGrab(bool grabbed)
  {
    return SDL_SetWindowKeyboardGrab(get(), grabbed);
  }

  /**
   * Set a window's mouse grab mode.
   *
   * Mouse grab confines the mouse cursor to the window.
   *
   * @param grabbed this is true to grab mouse, and false to release.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMouseRect
   * @sa WindowBase.SetMouseRect
   * @sa WindowBase.SetMouseGrab
   * @sa WindowBase.SetKeyboardGrab
   */
  bool SetMouseGrab(bool grabbed)
  {
    return SDL_SetWindowMouseGrab(get(), grabbed);
  }

  /**
   * Get a window's keyboard grab mode.
   *
   * @returns true if keyboard is grabbed, and false otherwise.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetKeyboardGrab
   */
  bool GetKeyboardGrab() const { return SDL_GetWindowKeyboardGrab(get()); }

  /**
   * Get a window's mouse grab mode.
   *
   * @returns true if mouse is grabbed, and false otherwise.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMouseRect
   * @sa WindowBase.SetMouseRect
   * @sa WindowBase.SetMouseGrab
   * @sa WindowBase.SetKeyboardGrab
   */
  bool GetMouseGrab() const { return SDL_GetWindowMouseGrab(get()); }

  /**
   * Confines the cursor to the specified area of a window.
   *
   * Note that this does NOT grab the cursor, it only defines the area a cursor
   * is restricted to when the window has mouse focus.
   *
   * @param rect a rectangle area in window-relative coordinates. If nullptr the
   *             barrier for the specified window will be destroyed.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetMouseRect
   * @sa WindowBase.GetMouseGrab
   * @sa WindowBase.SetMouseGrab
   */
  bool SetMouseRect(const SDL_Rect& rect)
  {
    return SDL_SetWindowMouseRect(get(), &rect);
  }

  /**
   * Get the mouse confinement rectangle of a window.
   *
   * @returns a pointer to the mouse confinement rectangle of a window, or
   *          nullptr if there isn't one.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetMouseRect
   * @sa WindowBase.GetMouseGrab
   * @sa WindowBase.SetMouseGrab
   */
  const SDL_Rect* GetMouseRect() const { return SDL_GetWindowMouseRect(get()); }

  /**
   * Set the opacity for a window.
   *
   * The parameter `opacity` will be clamped internally between 0.0f
   * (transparent) and 1.0f (opaque).
   *
   * This function also returns false if setting the opacity isn't supported.
   *
   * @param opacity the opacity value (0.0f - transparent, 1.0f - opaque).
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetOpacity
   */
  bool SetOpacity(float opacity)
  {
    return SDL_SetWindowOpacity(get(), opacity);
  }

  /**
   * Get the opacity of a window.
   *
   * If transparency isn't supported on this platform, opacity will be returned
   * as 1.0f without error.
   *
   * @returns the opacity, (0.0f - transparent, 1.0f - opaque), or -1.0f on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetOpacity
   */
  float GetOpacity() const { return SDL_GetWindowOpacity(get()); }

  /**
   * Set the window as a child of a parent window.
   *
   * If the window is already the child of an existing window, it will be
   * reparented to the new owner. Setting the parent window to nullptr unparents
   * the window and removes child window status.
   *
   * If a parent window is hidden or destroyed, the operation will be
   * recursively applied to child windows. Child windows hidden with the parent
   * that did not have their hidden status explicitly set will be restored when
   * the parent is shown.
   *
   * Attempting to set the parent of a window that is currently in the modal
   * state will fail. Use WindowBase.SetModal() to cancel the modal status
   * before attempting to change the parent.
   *
   * Popup windows cannot change parents and attempts to do so will fail.
   *
   * Setting a parent window that is currently the sibling or descendent of the
   * child window results in undefined behavior.
   *
   * @param parent the new parent window for the child window.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetModal
   */
  bool SetParent(OptionalWindow parent);

  /**
   * Toggle the state of the window as modal.
   *
   * To enable modal status on a window, the window must currently be the child
   * window of a parent, or toggling modal status on will fail.
   *
   * @param modal true to toggle modal status on, false to toggle it off.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetParent
   * @sa WINDOW_MODAL
   */
  bool SetModal(bool modal) { return SDL_SetWindowModal(get(), modal); }

  /**
   * Set whether the window may have input focus.
   *
   * @param focusable true to allow input focus, false to not allow input focus.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetFocusable(bool focusable)
  {
    return SDL_SetWindowFocusable(get(), focusable);
  }

  /**
   * Display the system-level window menu.
   *
   * This default window menu is provided by the system and on some platforms
   * provides functionality for setting or changing privileged state on the
   * window, such as moving it between workspaces or displays, or toggling the
   * always-on-top property.
   *
   * On platforms or desktops where this is unsupported, this function does
   * nothing.
   *
   * @param p the x, y coordinate of the menu, relative to the origin (top-left)
   *          of the client area.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool ShowSystemMenu(SDL_Point p)
  {
    return SDL_ShowWindowSystemMenu(get(), p.x, p.y);
  }

  /**
   * Provide a callback that decides if a window region has special properties.
   *
   * Normally windows are dragged and resized by decorations provided by the
   * system window manager (a title bar, borders, etc), but for some apps, it
   * makes sense to drag them from somewhere else inside the window itself; for
   * example, one might have a borderless window that wants to be draggable from
   * any part, or simulate its own title bar, etc.
   *
   * This function lets the app provide a callback that designates pieces of a
   * given window as special. This callback is run during event processing if we
   * need to tell the OS to treat a region of the window specially; the use of
   * this callback is known as "hit testing."
   *
   * Mouse input may not be delivered to your application if it is within a
   * special area; the OS will often apply that input to moving the window or
   * resizing the window and not deliver it to the application.
   *
   * Specifying nullptr for a callback disables hit-testing. Hit-testing is
   * disabled by default.
   *
   * Platforms that don't support this functionality will return false
   * unconditionally, even if you're attempting to disable hit-testing.
   *
   * Your callback may fire at any time, and its firing does not indicate any
   * specific behavior (for example, on Windows, this certainly might fire when
   * the OS is deciding whether to drag your window, but it fires for lots of
   * other reasons, too, some unrelated to anything you probably care about _and
   * when the mouse isn't actually at the location it is testing_). Since this
   * can fire at any time, you should try to keep your callback efficient,
   * devoid of allocations, etc.
   *
   * @param callback the function to call when doing a hit-test.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @cat listener-callback
   */
  bool SetHitTest(HitTestCB callback);

  /**
   * Provide a callback that decides if a window region has special properties.
   *
   * Normally windows are dragged and resized by decorations provided by the
   * system window manager (a title bar, borders, etc), but for some apps, it
   * makes sense to drag them from somewhere else inside the window itself; for
   * example, one might have a borderless window that wants to be draggable from
   * any part, or simulate its own title bar, etc.
   *
   * This function lets the app provide a callback that designates pieces of a
   * given window as special. This callback is run during event processing if we
   * need to tell the OS to treat a region of the window specially; the use of
   * this callback is known as "hit testing."
   *
   * Mouse input may not be delivered to your application if it is within a
   * special area; the OS will often apply that input to moving the window or
   * resizing the window and not deliver it to the application.
   *
   * Specifying nullptr for a callback disables hit-testing. Hit-testing is
   * disabled by default.
   *
   * Platforms that don't support this functionality will return false
   * unconditionally, even if you're attempting to disable hit-testing.
   *
   * Your callback may fire at any time, and its firing does not indicate any
   * specific behavior (for example, on Windows, this certainly might fire when
   * the OS is deciding whether to drag your window, but it fires for lots of
   * other reasons, too, some unrelated to anything you probably care about _and
   * when the mouse isn't actually at the location it is testing_). Since this
   * can fire at any time, you should try to keep your callback efficient,
   * devoid of allocations, etc.
   *
   * @param callback the function to call when doing a hit-test.
   * @param callback_data an app-defined void pointer passed to **callback**.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetHitTest(HitTest callback, void* callback_data)
  {
    return SDL_SetWindowHitTest(get(), callback, callback_data);
  }

  /**
   * Set the shape of a transparent window.
   *
   * This sets the alpha channel of a transparent window and any fully
   * transparent areas are also transparent to mouse clicks. If you are using
   * something besides the SDL render API, then you are responsible for drawing
   * the alpha channel of the window to match the shape alpha channel to get
   * consistent cross-platform results.
   *
   * The shape is copied inside this function, so you can free it afterwards. If
   * your shape surface changes, you should call WindowBase.SetShape() again to
   * update the window. This is an expensive operation, so should be done
   * sparingly.
   *
   * The window must have been created with the WINDOW_TRANSPARENT flag.
   *
   * @param shape the surface representing the shape of the window, or nullptr
   *              to remove any current shape.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetShape(SurfaceBase& shape)
  {
    return SDL_SetWindowShape(get(), shape.get());
  }

  /**
   * Request a window to demand attention from the user.
   *
   * @param operation the operation to perform.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Flash(FlashOperation operation)
  {
    return SDL_FlashWindow(get(), operation);
  }

  RendererRef GetRenderer() const;

  bool StartTextInput();

  bool StartTextInput(PropertiesBase& props);

  bool IsTextInputActive() const;

  bool StopTextInput();

  bool ClearComposition();

  bool SetTextInputArea(const SDL_Rect& rect, int cursor);

  bool GetTextInputArea(Rect* rect, int* cursor);

  bool IsScreenKeyboardShown() const;
};

/**
 * Handle to a non owned window
 *
 * @cat resource
 *
 * @sa WindowBase
 * @sa Window
 */
struct WindowRef : WindowBase
{
  using WindowBase::WindowBase;

  /**
   * Copy constructor.
   */
  constexpr WindowRef(const WindowRef& other)
    : WindowBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr WindowRef(WindowRef&& other)
    : WindowBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~WindowRef() = default;

  /**
   * Assignment operator.
   */
  WindowRef& operator=(WindowRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a window.
   *
   * Any child windows owned by the window will be recursively destroyed as
   * well.
   *
   * Note that on some platforms, the visible window may not actually be removed
   * from the screen until the SDL event loop is pumped again, even though the
   * WindowBase is no longer valid after this call.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  void reset(SDL_Window* newResource = {})
  {
    SDL_DestroyWindow(release(newResource));
  }

  /**
   * Get a window from a stored ID.
   *
   * The numeric ID is what WindowEvent references, and is necessary to map
   * these events to specific WindowBase objects.
   *
   * @param id the ID of the window.
   * @returns the window associated with `id` or nullptr if it doesn't exist;
   * call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.GetID
   */
  static WindowRef FromID(WindowID id);

  /**
   * Get the window that currently has an input grab enabled.
   *
   * @returns the window if input is grabbed or nullptr otherwise.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa WindowBase.SetMouseGrab
   * @sa WindowBase.SetKeyboardGrab
   */
  static WindowRef GetGrabbed();
};

/**
 * Handle to an owned window
 *
 * @cat resource
 *
 * @sa WindowBase
 * @sa WindowRef
 */
struct Window : WindowRef
{
  using WindowRef::WindowRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Window(SDL_Window* resource = {})
    : WindowRef(resource)
  {
  }

  constexpr Window(const Window& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Window(Window&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Window() { reset(); }

  /**
   * Assignment operator.
   */
  Window& operator=(Window other)
  {
    reset(other.release());
    return *this;
  }
};

#ifdef SDL3PP_DOC

/**
 * A magic value used with SDL_WINDOWPOS_UNDEFINED.
 *
 * Generally this macro isn't used directly, but rather through
 * SDL_WINDOWPOS_UNDEFINED or SDL_WINDOWPOS_UNDEFINED_DISPLAY.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_UNDEFINED_MASK 0x1FFF0000u

/**
 * Used to indicate that you don't care what the window position is.
 *
 * If you _really_ don't care, SDL_WINDOWPOS_UNDEFINED is the same, but always
 * uses the primary display instead of specifying one.
 *
 * @param X the Display of the display to use.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_UNDEFINED_DISPLAY(X) (SDL_WINDOWPOS_UNDEFINED_MASK | (X))

/**
 * Used to indicate that you don't care what the window position/display is.
 *
 * This always uses the primary display.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)

/**
 * A macro to test if the window position is marked as "undefined."
 *
 * @param X the window position value.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_ISUNDEFINED(X)                                           \
  (((X) & 0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK)

/**
 * A magic value used with SDL_WINDOWPOS_CENTERED.
 *
 * Generally this macro isn't used directly, but rather through
 * SDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_CENTERED_DISPLAY.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_CENTERED_MASK 0x2FFF0000u

/**
 * Used to indicate that the window position should be centered.
 *
 * SDL_WINDOWPOS_CENTERED is the same, but always uses the primary display
 * instead of specifying one.
 *
 * @param X the Display of the display to use.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_CENTERED_DISPLAY(X) (SDL_WINDOWPOS_CENTERED_MASK | (X))

/**
 * Used to indicate that the window position should be centered.
 *
 * This always uses the primary display.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_CENTERED SDL_WINDOWPOS_CENTERED_DISPLAY(0)

/**
 * A macro to test if the window position is marked as "centered."
 *
 * @param X the window position value.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_WINDOWPOS_ISCENTERED(X)                                            \
  (((X) & 0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK)

#endif // SDL3PP_DOC

/**
 * An opaque handle to an OpenGL context.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa GLContextBase.GLContextBase
 *
 * @cat resource
 *
 * @sa GLContext
 * @sa GLContextRef
 */
struct GLContextBase : Resource<SDL_GLContextState*>
{
  using Resource::Resource;

  /**
   * Create an OpenGL context for an OpenGL window, and make it current.
   *
   * Windows users new to OpenGL should note that, for historical reasons, GL
   * functions added after OpenGL version 1.1 are not available by default.
   * Those functions must be loaded at run-time, either with an OpenGL
   * extension-handling library or with GL_GetProcAddress() and its related
   * functions.
   *
   * GLContextBase is opaque to the application.
   *
   * @param window the window to associate with the context.
   * @post the OpenGL context associated with `window` or nullptr on failure;
   *          call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GLContextRef.reset
   * @sa GLContextBase.MakeCurrent
   */
  GLContextBase(WindowBase& window)
    : Resource(SDL_GL_CreateContext(window.get()))
  {
  }

  /**
   * Set up an OpenGL context for rendering into an OpenGL window.
   *
   * The context must have been created with a compatible window.
   *
   * @param window the window to associate with the context.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GLContextBase.GLContextBase
   */
  bool MakeCurrent(WindowBase& window)
  {
    return SDL_GL_MakeCurrent(window.get(), get());
  }
};

/**
 * Handle to a non owned gLContext
 *
 * @cat resource
 *
 * @sa GLContextBase
 * @sa GLContext
 */
struct GLContextRef : GLContextBase
{
  using GLContextBase::GLContextBase;

  /**
   * Copy constructor.
   */
  constexpr GLContextRef(const GLContextRef& other)
    : GLContextBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr GLContextRef(GLContextRef&& other)
    : GLContextBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~GLContextRef() = default;

  /**
   * Assignment operator.
   */
  GLContextRef& operator=(GLContextRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Delete an OpenGL context.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GLContextBase.GLContextBase
   */
  bool reset(SDL_GLContextState* newResource = {})
  {
    return SDL_GL_DestroyContext(release(newResource));
  }
};

/**
 * Handle to an owned gLContext
 *
 * @cat resource
 *
 * @sa GLContextBase
 * @sa GLContextRef
 */
struct GLContext : GLContextRef
{
  using GLContextRef::GLContextRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit GLContext(SDL_GLContextState* resource = {})
    : GLContextRef(resource)
  {
  }

  constexpr GLContext(const GLContext& other) = delete;

  /**
   * Move constructor.
   */
  constexpr GLContext(GLContext&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~GLContext() { reset(); }

  /**
   * Assignment operator.
   */
  GLContext& operator=(GLContext other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Opaque type for an EGL display.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using EGLDisplay = SDL_EGLDisplay;

/**
 * Opaque type for an EGL config.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using EGLConfig = SDL_EGLConfig;

/**
 * Opaque type for an EGL surface.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using EGLSurface = SDL_EGLSurface;

/**
 * An EGL attribute, used when creating an EGL context.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using EGLAttrib = SDL_EGLAttrib;

/**
 * An EGL integer attribute, used when creating an EGL surface.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using EGLint = SDL_EGLint;

/**
 * EGL platform attribute initialization callback.
 *
 * This is called when SDL is attempting to create an EGL context, to let the
 * app add extra attributes to its eglGetPlatformDisplay() call.
 *
 * The callback should return a pointer to an EGL attribute array terminated
 * with `EGL_NONE`. If this function returns nullptr, the WindowBase.WindowBase
 * process will fail gracefully.
 *
 * The returned pointer should be allocated with malloc() and will be
 * passed to free().
 *
 * The arrays returned by each callback will be appended to the existing
 * attribute arrays defined by SDL.
 *
 * @param userdata an app-controlled pointer that is passed to the callback.
 * @returns a newly-allocated array of attributes, terminated with `EGL_NONE`.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa EGL_SetAttributeCallbacks
 */
using EGLAttribArrayCallback = SDL_EGLAttribArrayCallback;

/**
 * EGL surface/context attribute initialization callback types.
 *
 * This is called when SDL is attempting to create an EGL surface, to let the
 * app add extra attributes to its eglCreateWindowSurface() or
 * eglCreateContext calls.
 *
 * For convenience, the EGLDisplay and EGLConfig to use are provided to the
 * callback.
 *
 * The callback should return a pointer to an EGL attribute array terminated
 * with `EGL_NONE`. If this function returns nullptr, the WindowBase.WindowBase
 * process will fail gracefully.
 *
 * The returned pointer should be allocated with malloc() and will be
 * passed to free().
 *
 * The arrays returned by each callback will be appended to the existing
 * attribute arrays defined by SDL.
 *
 * @param userdata an app-controlled pointer that is passed to the callback.
 * @param display the EGL display to be used.
 * @param config the EGL config to be used.
 * @returns a newly-allocated array of attributes, terminated with `EGL_NONE`.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa EGL_SetAttributeCallbacks
 */
using EGLIntArrayCallback = SDL_EGLIntArrayCallback;

/**
 * @name GLAttrs
 * @{
 */

/**
 * An enumeration of OpenGL configuration attributes.
 *
 * While you can set most OpenGL attributes normally, the attributes listed
 * above must be known before SDL creates the window that will be used with
 * the OpenGL context. These attributes are set and read with
 * GL_SetAttribute() and GL_GetAttribute().
 *
 * In some cases, these attributes are minimum requests; the GL does not
 * promise to give you exactly what you asked for. It's possible to ask for a
 * 16-bit depth buffer and get a 24-bit one instead, for example, or to ask
 * for no stencil buffer and still have one available. Context creation should
 * fail if the GL can't provide your requested attributes at a minimum, but
 * you should check to see exactly what you got.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using GLAttr = SDL_GLAttr;

/**
 * the minimum number of bits for the red channel of the color buffer; defaults
 * to 8.
 */
constexpr GLAttr GL_RED_SIZE = SDL_GL_RED_SIZE;

/**
 * the minimum number of bits for the green channel of the color buffer;
 * defaults to 8.
 */
constexpr GLAttr GL_GREEN_SIZE = SDL_GL_GREEN_SIZE;

/**
 * the minimum number of bits for the blue channel of the color buffer; defaults
 * to 8.
 */
constexpr GLAttr GL_BLUE_SIZE = SDL_GL_BLUE_SIZE;

/**
 * the minimum number of bits for the alpha channel of the color buffer;
 * defaults to 8.
 */
constexpr GLAttr GL_ALPHA_SIZE = SDL_GL_ALPHA_SIZE;

/**
 * the minimum number of bits for frame buffer size; defaults to 0.
 */
constexpr GLAttr GL_BUFFER_SIZE = SDL_GL_BUFFER_SIZE;

/**
 * whether the output is single or double buffered; defaults to double buffering
 * on.
 */
constexpr GLAttr GL_DOUBLEBUFFER = SDL_GL_DOUBLEBUFFER;

/**
 * the minimum number of bits in the depth buffer; defaults to 16.
 */
constexpr GLAttr GL_DEPTH_SIZE = SDL_GL_DEPTH_SIZE;

/**
 * the minimum number of bits in the stencil buffer; defaults to 0.
 */
constexpr GLAttr GL_STENCIL_SIZE = SDL_GL_STENCIL_SIZE;

/**
 * the minimum number of bits for the red channel of the accumulation buffer;
 * defaults to 0.
 */
constexpr GLAttr GL_ACCUM_RED_SIZE = SDL_GL_ACCUM_RED_SIZE;

/**
 * the minimum number of bits for the green channel of the accumulation buffer;
 * defaults to 0.
 */
constexpr GLAttr GL_ACCUM_GREEN_SIZE = SDL_GL_ACCUM_GREEN_SIZE;

/**
 * the minimum number of bits for the blue channel of the accumulation buffer;
 * defaults to 0.
 */
constexpr GLAttr GL_ACCUM_BLUE_SIZE = SDL_GL_ACCUM_BLUE_SIZE;

/**
 * the minimum number of bits for the alpha channel of the accumulation buffer;
 * defaults to 0.
 */
constexpr GLAttr GL_ACCUM_ALPHA_SIZE = SDL_GL_ACCUM_ALPHA_SIZE;

constexpr GLAttr GL_STEREO =
  SDL_GL_STEREO; ///< whether the output is stereo 3D; defaults to off.

/**
 * the number of buffers used for multisample anti-aliasing; defaults to 0.
 */
constexpr GLAttr GL_MULTISAMPLEBUFFERS = SDL_GL_MULTISAMPLEBUFFERS;

/**
 * the number of samples used around the current pixel used for multisample
 * anti-aliasing.
 */
constexpr GLAttr GL_MULTISAMPLESAMPLES = SDL_GL_MULTISAMPLESAMPLES;

/**
 * set to 1 to require hardware acceleration, set to 0 to force software
 * rendering; defaults to allow either.
 */
constexpr GLAttr GL_ACCELERATED_VISUAL = SDL_GL_ACCELERATED_VISUAL;

constexpr GLAttr GL_RETAINED_BACKING =
  SDL_GL_RETAINED_BACKING; ///< not used (deprecated).

constexpr GLAttr GL_CONTEXT_MAJOR_VERSION =
  SDL_GL_CONTEXT_MAJOR_VERSION; ///< OpenGL context major version.

constexpr GLAttr GL_CONTEXT_MINOR_VERSION =
  SDL_GL_CONTEXT_MINOR_VERSION; ///< OpenGL context minor version.

/**
 * some combination of 0 or more of elements of the GLContextFlag enumeration;
 * defaults to 0.
 */
constexpr GLAttr GL_CONTEXT_FLAGS = SDL_GL_CONTEXT_FLAGS;

/**
 * type of GL context (Core, Compatibility, ES).  See GLProfile; default value
 * depends on platform.
 */
constexpr GLAttr GL_CONTEXT_PROFILE_MASK = SDL_GL_CONTEXT_PROFILE_MASK;

constexpr GLAttr GL_SHARE_WITH_CURRENT_CONTEXT =
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT; ///< OpenGL context sharing; defaults to 0.

constexpr GLAttr GL_FRAMEBUFFER_SRGB_CAPABLE =
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE; ///< requests sRGB capable visual; defaults
                                   ///< to 0.

/**
 * sets context the release behavior.  See GLContextReleaseFlag; defaults to
 * FLUSH.
 */
constexpr GLAttr GL_CONTEXT_RELEASE_BEHAVIOR = SDL_GL_CONTEXT_RELEASE_BEHAVIOR;

/**
 * set context reset notification.  See GLContextResetNotification; defaults to
 * NO_NOTIFICATION.
 */
constexpr GLAttr GL_CONTEXT_RESET_NOTIFICATION =
  SDL_GL_CONTEXT_RESET_NOTIFICATION;

constexpr GLAttr GL_CONTEXT_NO_ERROR =
  SDL_GL_CONTEXT_NO_ERROR; ///< GL_CONTEXT_NO_ERROR

constexpr GLAttr GL_FLOATBUFFERS = SDL_GL_FLOATBUFFERS; ///< GL_FLOATBUFFERS

constexpr GLAttr GL_EGL_PLATFORM = SDL_GL_EGL_PLATFORM; ///< GL_EGL_PLATFORM

/// @}

/**
 * @name GLProfiles
 * @{
 */

/**
 * Possible values to be set for the GL_CONTEXT_PROFILE_MASK attribute.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using GLProfile = Uint32;

constexpr GLProfile GL_CONTEXT_PROFILE_CORE =
  SDL_GL_CONTEXT_PROFILE_CORE; ///< OpenGL Core Profile context

constexpr GLProfile GL_CONTEXT_PROFILE_COMPATIBILITY =
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY; ///< OpenGL Compatibility Profile
                                        ///< context

constexpr GLProfile GL_CONTEXT_PROFILE_ES =
  SDL_GL_CONTEXT_PROFILE_ES; ///< GLX_CONTEXT_ES2_PROFILE_BIT_EXT

/// @}

/**
 * @name GLContextFlags
 * @{
 */

/**
 * Possible flags to be set for the GL_CONTEXT_FLAGS attribute.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using GLContextFlag = Uint32;

constexpr GLContextFlag GL_CONTEXT_DEBUG_FLAG =
  SDL_GL_CONTEXT_DEBUG_FLAG; ///< DEBUG_FLAG

constexpr GLContextFlag GL_CONTEXT_FORWARD_COMPATIBLE_FLAG =
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG; ///< FORWARD_COMPATIBLE_FLAG

constexpr GLContextFlag GL_CONTEXT_ROBUST_ACCESS_FLAG =
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG; ///< ROBUST_ACCESS_FLAG

constexpr GLContextFlag GL_CONTEXT_RESET_ISOLATION_FLAG =
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG; ///< RESET_ISOLATION_FLAG

/// @}

/**
 * @name GLContextFlags
 * @{
 */

/**
 * Possible values to be set for the GL_CONTEXT_RELEASE_BEHAVIOR
 * attribute.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using GLContextReleaseFlag = Uint32;

constexpr GLContextReleaseFlag GL_CONTEXT_RELEASE_BEHAVIOR_NONE =
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE; ///< BEHAVIOR_NONE

constexpr GLContextReleaseFlag GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH =
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH; ///< BEHAVIOR_FLUSH

/// @}

/**
 * @name GLContextResetNotifications
 * @{
 */

/**
 * Possible values to be set GL_CONTEXT_RESET_NOTIFICATION attribute.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using GLContextResetNotification = Uint32;

constexpr GLContextResetNotification GL_CONTEXT_RESET_NO_NOTIFICATION =
  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION; ///< NO_NOTIFICATION

constexpr GLContextResetNotification GL_CONTEXT_RESET_LOSE_CONTEXT =
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT; ///< LOSE_CONTEXT

/// @}

/**
 * Get the number of video drivers compiled into SDL.
 *
 * @returns the number of built in video drivers.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetVideoDriver
 */
inline int GetNumVideoDrivers() { return SDL_GetNumVideoDrivers(); }

/**
 * Get the name of a built in video driver.
 *
 * The video drivers are presented in the order in which they are normally
 * checked during initialization.
 *
 * The names of drivers are all simple, low-ASCII identifiers, like "cocoa",
 * "x11" or "windows". These never have Unicode characters, and are not meant
 * to be proper names.
 *
 * @param index the index of a video driver.
 * @returns the name of the video driver with the given **index**.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetNumVideoDrivers
 */
inline const char* GetVideoDriver(int index)
{
  return SDL_GetVideoDriver(index);
}

/**
 * Get the name of the currently initialized video driver.
 *
 * The names of drivers are all simple, low-ASCII identifiers, like "cocoa",
 * "x11" or "windows". These never have Unicode characters, and are not meant
 * to be proper names.
 *
 * @returns the name of the current video driver or nullptr if no driver has
 *          been initialized.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetNumVideoDrivers
 * @sa GetVideoDriver
 */
inline const char* GetCurrentVideoDriver()
{
  return SDL_GetCurrentVideoDriver();
}

/**
 * Get the current system theme.
 *
 * @returns the current system theme, light, dark, or unknown.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline SystemTheme GetSystemTheme() { return SDL_GetSystemTheme(); }

namespace prop::Display {

constexpr auto HDR_ENABLED_BOOLEAN = SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN;

constexpr auto KMSDRM_PANEL_ORIENTATION_NUMBER =
  SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER;

} // namespace prop::Display

/**
 * Get a list of valid windows.
 *
 * @returns a nullptr terminated array of WindowBase pointers or nullptr on
 * failure; call GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline OwnArray<WindowRef> GetWindows()
{
  int count = 0;
  auto data = reinterpret_cast<WindowRef*>(SDL_GetWindows(&count));
  return OwnArray<WindowRef>{data, size_t(count)};
}

namespace prop::Window {

constexpr auto CREATE_ALWAYS_ON_TOP_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN;

constexpr auto CREATE_BORDERLESS_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN;

constexpr auto CREATE_FOCUSABLE_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN;

constexpr auto CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN;

constexpr auto CREATE_FLAGS_NUMBER = SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER;

constexpr auto CREATE_FULLSCREEN_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN;

constexpr auto CREATE_HEIGHT_NUMBER = SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER;

constexpr auto CREATE_HIDDEN_BOOLEAN = SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN;

constexpr auto CREATE_HIGH_PIXEL_DENSITY_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN;

constexpr auto CREATE_MAXIMIZED_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN;

constexpr auto CREATE_MENU_BOOLEAN = SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN;

constexpr auto CREATE_METAL_BOOLEAN = SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN;

constexpr auto CREATE_MINIMIZED_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN;

constexpr auto CREATE_MODAL_BOOLEAN = SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN;

constexpr auto CREATE_MOUSE_GRABBED_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN;

constexpr auto CREATE_OPENGL_BOOLEAN = SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN;

constexpr auto CREATE_PARENT_POINTER = SDL_PROP_WINDOW_CREATE_PARENT_POINTER;

constexpr auto CREATE_RESIZABLE_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN;

constexpr auto CREATE_TITLE_STRING = SDL_PROP_WINDOW_CREATE_TITLE_STRING;

constexpr auto CREATE_TRANSPARENT_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN;

constexpr auto CREATE_TOOLTIP_BOOLEAN = SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN;

constexpr auto CREATE_UTILITY_BOOLEAN = SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN;

constexpr auto CREATE_VULKAN_BOOLEAN = SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN;

constexpr auto CREATE_WIDTH_NUMBER = SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER;

constexpr auto CREATE_X_NUMBER = SDL_PROP_WINDOW_CREATE_X_NUMBER;

constexpr auto CREATE_Y_NUMBER = SDL_PROP_WINDOW_CREATE_Y_NUMBER;

constexpr auto CREATE_COCOA_WINDOW_POINTER =
  SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER;

constexpr auto CREATE_COCOA_VIEW_POINTER =
  SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER;

constexpr auto CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN;

constexpr auto CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN =
  SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN;

constexpr auto CREATE_WAYLAND_WL_SURFACE_POINTER =
  SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER;

constexpr auto CREATE_WIN32_HWND_POINTER =
  SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER;

constexpr auto CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER =
  SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER;

constexpr auto CREATE_X11_WINDOW_NUMBER =
  SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER;

constexpr auto SHAPE_POINTER = SDL_PROP_WINDOW_SHAPE_POINTER;

constexpr auto HDR_ENABLED_BOOLEAN = SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN;

constexpr auto SDR_WHITE_LEVEL_FLOAT = SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT;

constexpr auto HDR_HEADROOM_FLOAT = SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT;

constexpr auto ANDROID_WINDOW_POINTER = SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER;

constexpr auto ANDROID_SURFACE_POINTER =
  SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER;

constexpr auto UIKIT_WINDOW_POINTER = SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER;

constexpr auto UIKIT_METAL_VIEW_TAG_NUMBER =
  SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER;

constexpr auto UIKIT_OPENGL_FRAMEBUFFER_NUMBER =
  SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER;

constexpr auto UIKIT_OPENGL_RENDERBUFFER_NUMBER =
  SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER;

constexpr auto UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER =
  SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER;

constexpr auto KMSDRM_DEVICE_INDEX_NUMBER =
  SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER;

constexpr auto KMSDRM_DRM_FD_NUMBER = SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER;

constexpr auto KMSDRM_GBM_DEVICE_POINTER =
  SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER;

constexpr auto COCOA_WINDOW_POINTER = SDL_PROP_WINDOW_COCOA_WINDOW_POINTER;

constexpr auto COCOA_METAL_VIEW_TAG_NUMBER =
  SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER;

constexpr auto OPENVR_OVERLAY_ID = SDL_PROP_WINDOW_OPENVR_OVERLAY_ID;

constexpr auto VIVANTE_DISPLAY_POINTER =
  SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER;

constexpr auto VIVANTE_WINDOW_POINTER = SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER;

constexpr auto VIVANTE_SURFACE_POINTER =
  SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER;

constexpr auto WIN32_HWND_POINTER = SDL_PROP_WINDOW_WIN32_HWND_POINTER;

constexpr auto WIN32_HDC_POINTER = SDL_PROP_WINDOW_WIN32_HDC_POINTER;

constexpr auto WIN32_INSTANCE_POINTER = SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER;

constexpr auto WAYLAND_DISPLAY_POINTER =
  SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER;

constexpr auto WAYLAND_SURFACE_POINTER =
  SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER;

constexpr auto WAYLAND_VIEWPORT_POINTER =
  SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER;

constexpr auto WAYLAND_EGL_WINDOW_POINTER =
  SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER;

constexpr auto WAYLAND_XDG_SURFACE_POINTER =
  SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER;

constexpr auto WAYLAND_XDG_TOPLEVEL_POINTER =
  SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER;

constexpr auto WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING =
  SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING;

constexpr auto WAYLAND_XDG_POPUP_POINTER =
  SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER;

constexpr auto WAYLAND_XDG_POSITIONER_POINTER =
  SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER;

constexpr auto X11_DISPLAY_POINTER = SDL_PROP_WINDOW_X11_DISPLAY_POINTER;

constexpr auto X11_SCREEN_NUMBER = SDL_PROP_WINDOW_X11_SCREEN_NUMBER;

constexpr auto X11_WINDOW_NUMBER = SDL_PROP_WINDOW_X11_WINDOW_NUMBER;

} // namespace prop::Window

inline WindowRef WindowRef::FromID(WindowID id)
{
  return SDL_GetWindowFromID(id);
}

inline WindowRef WindowBase::GetParent() const
{
  return SDL_GetWindowParent(get());
}

#ifdef SDL3PP_DOC

/// Disable vsync
#define SDL_WINDOW_SURFACE_VSYNC_DISABLED 0

/// Adaptative vsync
#define SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE (-1)

#endif // SDL3PP_DOC

inline WindowRef WindowRef::GetGrabbed() { return SDL_GetGrabbedWindow(); }

/**
 * Check whether the screensaver is currently enabled.
 *
 * The screensaver is disabled by default.
 *
 * The default can also be changed using `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`.
 *
 * @returns true if the screensaver is enabled, false if it is disabled.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DisableScreenSaver
 * @sa EnableScreenSaver
 */
inline bool ScreenSaverEnabled() { return SDL_ScreenSaverEnabled(); }

/**
 * Allow the screen to be blanked by a screen saver.
 *
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DisableScreenSaver
 * @sa ScreenSaverEnabled
 */
inline bool EnableScreenSaver() { return SDL_EnableScreenSaver(); }

/**
 * Prevent the screen from being blanked by a screen saver.
 *
 * If you disable the screensaver, it is automatically re-enabled when SDL
 * quits.
 *
 * The screensaver is disabled by default, but this may by changed by
 * SDL_HINT_VIDEO_ALLOW_SCREENSAVER.
 *
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa EnableScreenSaver
 * @sa ScreenSaverEnabled
 */
inline bool DisableScreenSaver() { return SDL_DisableScreenSaver(); }

/**
 * Dynamically load an OpenGL library.
 *
 * This should be done after initializing the video driver, but before
 * creating any OpenGL windows. If no OpenGL library is loaded, the default
 * library will be loaded upon creation of the first OpenGL window.
 *
 * If you do this, you need to retrieve all of the GL functions used in your
 * program from the dynamic library using GL_GetProcAddress().
 *
 * @param path the platform dependent OpenGL library name, or nullptr to open
 *             the default OpenGL library.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_GetProcAddress
 * @sa GL_UnloadLibrary
 */
inline bool GL_LoadLibrary(StringParam path)
{
  return SDL_GL_LoadLibrary(path);
}

/**
 * Get an OpenGL function by name.
 *
 * If the GL library is loaded at runtime with GL_LoadLibrary(), then all
 * GL functions must be retrieved this way. Usually this is used to retrieve
 * function pointers to OpenGL extensions.
 *
 * There are some quirks to looking up OpenGL functions that require some
 * extra care from the application. If you code carefully, you can handle
 * these quirks without any platform-specific code, though:
 *
 * - On Windows, function pointers are specific to the current GL context;
 *   this means you need to have created a GL context and made it current
 *   before calling GL_GetProcAddress(). If you recreate your context or
 *   create a second context, you should assume that any existing function
 *   pointers aren't valid to use with it. This is (currently) a
 *   Windows-specific limitation, and in practice lots of drivers don't suffer
 *   this limitation, but it is still the way the wgl API is documented to
 *   work and you should expect crashes if you don't respect it. Store a copy
 *   of the function pointers that comes and goes with context lifespan.
 * - On X11, function pointers returned by this function are valid for any
 *   context, and can even be looked up before a context is created at all.
 *   This means that, for at least some common OpenGL implementations, if you
 *   look up a function that doesn't exist, you'll get a non-nullptr result that
 *   is _NOT_ safe to call. You must always make sure the function is actually
 *   available for a given GL context before calling it, by checking for the
 *   existence of the appropriate extension with GL_ExtensionSupported(),
 *   or verifying that the version of OpenGL you're using offers the function
 *   as core functionality.
 * - Some OpenGL drivers, on all platforms, *will* return nullptr if a function
 *   isn't supported, but you can't count on this behavior. Check for
 *   extensions you use, and if you get a nullptr anyway, act as if that
 *   extension wasn't available. This is probably a bug in the driver, but you
 *   can code defensively for this scenario anyhow.
 * - Just because you're on Linux/Unix, don't assume you'll be using X11.
 *   Next-gen display servers are waiting to replace it, and may or may not
 *   make the same promises about function pointers.
 * - OpenGL function pointers must be declared `APIENTRY` as in the example
 *   code. This will ensure the proper calling convention is followed on
 *   platforms where this matters (Win32) thereby avoiding stack corruption.
 *
 * @param proc the name of an OpenGL function.
 * @returns a pointer to the named OpenGL function. The returned pointer
 *          should be cast to the appropriate function signature.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_ExtensionSupported
 * @sa GL_LoadLibrary
 * @sa GL_UnloadLibrary
 */
inline FunctionPointer GL_GetProcAddress(StringParam proc)
{
  return SDL_GL_GetProcAddress(proc);
}

/**
 * Get an EGL library function by name.
 *
 * If an EGL library is loaded, this function allows applications to get entry
 * points for EGL functions. This is useful to provide to an EGL API and
 * extension loader.
 *
 * @param proc the name of an EGL function.
 * @returns a pointer to the named EGL function. The returned pointer should
 *          be cast to the appropriate function signature.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa EGL_GetCurrentDisplay
 */
inline FunctionPointer EGL_GetProcAddress(StringParam proc)
{
  return SDL_EGL_GetProcAddress(proc);
}

/**
 * Unload the OpenGL library previously loaded by GL_LoadLibrary().
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_LoadLibrary
 */
inline void GL_UnloadLibrary() { SDL_GL_UnloadLibrary(); }

/**
 * Check if an OpenGL extension is supported for the current context.
 *
 * This function operates on the current GL context; you must have created a
 * context and it must be current before calling this function. Do not assume
 * that all contexts you create will have the same set of extensions
 * available, or that recreating an existing context will offer the same
 * extensions again.
 *
 * While it's probably not a massive overhead, this function is not an O(1)
 * operation. Check the extensions you care about after creating the GL
 * context and save that information somewhere instead of calling the function
 * every time you need to know.
 *
 * @param extension the name of the extension to check.
 * @returns true if the extension is supported, false otherwise.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool GL_ExtensionSupported(StringParam extension)
{
  return SDL_GL_ExtensionSupported(extension);
}

/**
 * Reset all previously set OpenGL context attributes to their default values.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_GetAttribute
 * @sa GL_SetAttribute
 */
inline void GL_ResetAttributes() { SDL_GL_ResetAttributes(); }

/**
 * Set an OpenGL window attribute before window creation.
 *
 * This function sets the OpenGL attribute `attr` to `value`. The requested
 * attributes should be set before creating an OpenGL window. You should use
 * GL_GetAttribute() to check the values after creating the OpenGL
 * context, since the values obtained can differ from the requested ones.
 *
 * @param attr an GLAttr enum value specifying the OpenGL attribute to
 *             set.
 * @param value the desired value for the attribute.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_GetAttribute
 * @sa GL_ResetAttributes
 */
inline bool GL_SetAttribute(GLAttr attr, int value)
{
  return SDL_GL_SetAttribute(attr, value);
}

/**
 * Get the actual value for an attribute from the current context.
 *
 * @param attr an GLAttr enum value specifying the OpenGL attribute to
 *             get.
 * @param value a pointer filled in with the current value of `attr`.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_ResetAttributes
 * @sa GL_SetAttribute
 */
inline bool GL_GetAttribute(GLAttr attr, int* value)
{
  return SDL_GL_GetAttribute(attr, value);
}

/**
 * Get the currently active OpenGL window.
 *
 * @returns the currently active OpenGL window on success or nullptr on failure;
 *          call GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline WindowRef GL_GetCurrentWindow() { return SDL_GL_GetCurrentWindow(); }

/**
 * Get the currently active OpenGL context.
 *
 * @returns the currently active OpenGL context or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GLContextBase.MakeCurrent
 */
inline GLContextRef GL_GetCurrentContext()
{
  return SDL_GL_GetCurrentContext();
}

/**
 * Get the currently active EGL display.
 *
 * @returns the currently active EGL display or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline EGLDisplay EGL_GetCurrentDisplay()
{
  return SDL_EGL_GetCurrentDisplay();
}

/**
 * Get the currently active EGL config.
 *
 * @returns the currently active EGL config or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline EGLConfig EGL_GetCurrentConfig() { return SDL_EGL_GetCurrentConfig(); }

/**
 * Get the EGL surface associated with the window.
 *
 * @param window the window to query.
 * @returns the EGLSurface pointer associated with the window, or nullptr on
 *          failure.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline EGLSurface EGL_GetWindowSurface(WindowBase& window)
{
  return SDL_EGL_GetWindowSurface(window.get());
}

/**
 * Sets the callbacks for defining custom EGLAttrib arrays for EGL
 * initialization.
 *
 * Callbacks that aren't needed can be set to nullptr.
 *
 * NOTE: These callback pointers will be reset after GL_ResetAttributes.
 *
 * @param platformAttribCallback callback for attributes to pass to
 *                               eglGetPlatformDisplay. May be nullptr.
 * @param surfaceAttribCallback callback for attributes to pass to
 *                              eglCreateSurface. May be nullptr.
 * @param contextAttribCallback callback for attributes to pass to
 *                              eglCreateContext. May be nullptr.
 * @param userdata a pointer that is passed to the callbacks.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline void EGL_SetAttributeCallbacks(
  EGLAttribArrayCallback platformAttribCallback,
  EGLIntArrayCallback surfaceAttribCallback,
  EGLIntArrayCallback contextAttribCallback,
  void* userdata)
{
  SDL_EGL_SetAttributeCallbacks(platformAttribCallback,
                                surfaceAttribCallback,
                                contextAttribCallback,
                                userdata);
}

/**
 * Set the swap interval for the current OpenGL context.
 *
 * Some systems allow specifying -1 for the interval, to enable adaptive
 * vsync. Adaptive vsync works the same as vsync, but if you've already missed
 * the vertical retrace for a given frame, it swaps buffers immediately, which
 * might be less jarring for the user during occasional framerate drops. If an
 * application requests adaptive vsync and the system does not support it,
 * this function will fail and return false. In such a case, you should
 * probably retry the call with 1 for the interval.
 *
 * Adaptive vsync is implemented for some glX drivers with
 * GLX_EXT_swap_control_tear, and for some Windows drivers with
 * WGL_EXT_swap_control_tear.
 *
 * Read more on the Khronos wiki:
 * https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync
 *
 * @param interval 0 for immediate updates, 1 for updates synchronized with
 *                 the vertical retrace, -1 for adaptive vsync.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_GetSwapInterval
 */
inline bool GL_SetSwapInterval(int interval)
{
  return SDL_GL_SetSwapInterval(interval);
}

/**
 * Get the swap interval for the current OpenGL context.
 *
 * If the system can't determine the swap interval, or there isn't a valid
 * current context, this function will set *interval to 0 as a safe default.
 *
 * @param interval output interval value. 0 if there is no vertical retrace
 *                 synchronization, 1 if the buffer swap is synchronized with
 *                 the vertical retrace, and -1 if late swaps happen
 *                 immediately instead of waiting for the next retrace.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GL_SetSwapInterval
 */
inline bool GL_GetSwapInterval(int* interval)
{
  return SDL_GL_GetSwapInterval(interval);
}

/**
 * Update a window with OpenGL rendering.
 *
 * This is used with double-buffered OpenGL contexts, which are the default.
 *
 * On macOS, make sure you bind 0 to the draw framebuffer before swapping the
 * window, otherwise nothing will happen. If you aren't using
 * glBindFramebuffer(), this is the default and you won't have to do anything
 * extra.
 *
 * @param window the window to change.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool GL_SwapWindow(WindowBase& window)
{
  return SDL_GL_SwapWindow(window.get());
}

#pragma region impl

/// @}

inline bool WindowBase::SetHitTest(HitTestCB callback)
{
  using Wrapper = KeyValueWrapper<SDL_Window*, HitTestCB>;
  void* cbHandle = Wrapper::Wrap(get(), std::move(callback));
  return SetHitTest(
    [](SDL_Window* win, const SDL_Point* area, void* data) {
      auto& cb = Wrapper::at(data);
      return cb(WindowRef{win}, Point(*area));
    },
    cbHandle);
}

#pragma endregion impl

/**
 *
 * @defgroup CategoryDialog File Dialogs
 *
 * File dialog support.
 *
 * SDL offers file dialogs, to let users select files with native GUI
 * interfaces. There are "open" dialogs, "save" dialogs, and folder selection
 * dialogs. The app can control some details, such as filtering to specific
 * files, or whether multiple files can be selected by the user.
 *
 * Note that launching a file dialog is a non-blocking operation; control
 * returns to the app immediately, and a callback is called later (possibly in
 * another thread) when the user makes a choice.
 *
 * @{
 */

/**
 * An entry for filters for file dialogs.
 *
 * `name` is a user-readable label for the filter (for example, "Office
 * document").
 *
 * `pattern` is a semicolon-separated list of file extensions (for example,
 * "doc;docx"). File extensions may only contain alphanumeric characters,
 * hyphens, underscores and periods. Alternatively, the whole string can be a
 * single asterisk ("*"), which serves as an "All files" filter.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 */
using DialogFileFilter = SDL_DialogFileFilter;

/**
 * Callback used by file dialog functions.
 *
 * The specific usage is described in each function.
 *
 * If `filelist` is:
 *
 * - nullptr, an error occurred. Details can be obtained with GetError().
 * - A pointer to nullptr, the user either didn't choose any file or canceled
 * the dialog.
 * - A pointer to non-`nullptr`, the user chose one or more files. The argument
 *   is a null-terminated array of pointers to UTF-8 encoded strings, each
 *   containing a path.
 *
 * The filelist argument should not be freed; it will automatically be freed
 * when the callback returns.
 *
 * The filter argument is the index of the filter that was selected, or -1 if
 * no filter was selected or if the platform or method doesn't support
 * fetching the selected filter.
 *
 * In Android, the `filelist` are `content://` URIs. They should be opened
 * using IOStreamBase.IOStreamBase() with appropriate modes. This applies both
 * to open and save file dialog.
 *
 * @param userdata an app-provided pointer, for the callback's use.
 * @param filelist the file(s) chosen by the user.
 * @param filter index of the selected filter.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa DialogFileFilter
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 * @sa DialogFileCB
 */
using DialogFileCallback = SDL_DialogFileCallback;

/**
 * Callback used by file dialog functions.
 *
 * The specific usage is described in each function.
 *
 * If `filelist` is:
 *
 * - nullptr, an error occurred. Details can be obtained with GetError().
 * - A pointer to nullptr, the user either didn't choose any file or canceled
 * the dialog.
 * - A pointer to non-`nullptr`, the user chose one or more files. The argument
 *   is a null-terminated array of pointers to UTF-8 encoded strings, each
 *   containing a path.
 *
 * The filelist argument should not be freed; it will automatically be freed
 * when the callback returns.
 *
 * The filter argument is the index of the filter that was selected, or -1 if
 * no filter was selected or if the platform or method doesn't support
 * fetching the selected filter.
 *
 * In Android, the `filelist` are `content://` URIs. They should be opened
 * using IOStreamBase.IOStreamBase() with appropriate modes. This applies both
 * to open and save file dialog.
 *
 * @param filelist the file(s) chosen by the user.
 * @param filter index of the selected filter.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa DialogFileFilter
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 * @sa DialogFileCallback
 */
using DialogFileCB = std::function<void(const char* const*, int)>;

/**
 * Displays a dialog that lets the user select a file on their filesystem.
 *
 * This is an asynchronous function; it will return immediately, and the
 * result will be passed to the callback.
 *
 * The callback will be invoked with a null-terminated list of files the user
 * chose. The list will be empty if the user canceled the dialog, and it will
 * be nullptr if an error occurred.
 *
 * Note that the callback may be called from a different thread than the one
 * the function was invoked on.
 *
 * Depending on the platform, the user may be allowed to input paths that
 * don't yet exist.
 *
 * On Linux, dialogs may require XDG Portals, which requires DBus, which
 * requires an event-handling loop. Apps that do not use SDL to handle events
 * should add a call to PumpEvents in their main loop.
 *
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param userdata an optional pointer to pass extra data to the callback when
 *                 it will be invoked.
 * @param window the window that the dialog should be modal for, may be nullptr.
 *               Not all platforms support this option.
 * @param filters a list of filters, may be empty. Not all platforms support
 *                this option, and platforms that do support it may allow the
 *                user to ignore the filters. If non-nullptr, it must remain
 *                valid at least until the callback is invoked.
 * @param default_location the default folder or file to start the dialog at,
 *                         may be nullptr. Not all platforms support this
 *                         option.
 * @param allow_many if non-zero, the user will be allowed to select multiple
 *                   entries. Not all platforms support this option.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa DialogFileFilter
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 */
inline void ShowOpenFileDialog(DialogFileCallback callback,
                               void* userdata,
                               OptionalWindow window = {},
                               std::span<const DialogFileFilter> filters = {},
                               StringParam default_location = {},
                               bool allow_many = false)
{
  SDL_ShowOpenFileDialog(callback,
                         userdata,
                         window.get(),
                         filters.data(),
                         filters.size(),
                         default_location,
                         allow_many);
}

/**
 * Displays a dialog that lets the user select a file on their filesystem.
 *
 * This is an asynchronous function; it will return immediately, and the
 * result will be passed to the callback.
 *
 * The callback will be invoked with a null-terminated list of files the user
 * chose. The list will be empty if the user canceled the dialog, and it will
 * be nullptr if an error occurred.
 *
 * Note that the callback may be called from a different thread than the one
 * the function was invoked on.
 *
 * Depending on the platform, the user may be allowed to input paths that
 * don't yet exist.
 *
 * On Linux, dialogs may require XDG Portals, which requires DBus, which
 * requires an event-handling loop. Apps that do not use SDL to handle events
 * should add a call to PumpEvents in their main loop.
 *
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param window the window that the dialog should be modal for, may be nullptr.
 *               Not all platforms support this option.
 * @param filters a list of filters, may be nullptr. Not all platforms support
 *                this option, and platforms that do support it may allow the
 *                user to ignore the filters. If non-nullptr, it must remain
 *                valid at least until the callback is invoked.
 * @param default_location the default folder or file to start the dialog at,
 *                         may be nullptr. Not all platforms support this
 *                         option.
 * @param allow_many if non-zero, the user will be allowed to select multiple
 *                   entries. Not all platforms support this option.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa DialogFileFilter
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 */
inline void ShowOpenFileDialog(DialogFileCB callback,
                               OptionalWindow window = {},
                               std::span<const DialogFileFilter> filters = {},
                               StringParam default_location = {},
                               bool allow_many = false)
{
  using Wrapper = CallbackWrapper<DialogFileCB>;
  ShowOpenFileDialog(&Wrapper::CallOnce,
                     Wrapper::Wrap(std::move(callback)),
                     std::move(window),
                     filters,
                     std::move(default_location),
                     allow_many);
}

/**
 * Displays a dialog that lets the user choose a new or existing file on their
 * filesystem.
 *
 * This is an asynchronous function; it will return immediately, and the
 * result will be passed to the callback.
 *
 * The callback will be invoked with a null-terminated list of files the user
 * chose. The list will be empty if the user canceled the dialog, and it will
 * be nullptr if an error occurred.
 *
 * Note that the callback may be called from a different thread than the one
 * the function was invoked on.
 *
 * The chosen file may or may not already exist.
 *
 * On Linux, dialogs may require XDG Portals, which requires DBus, which
 * requires an event-handling loop. Apps that do not use SDL to handle events
 * should add a call to PumpEvents in their main loop.
 *
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param userdata an optional pointer to pass extra data to the callback when
 *                 it will be invoked.
 * @param window the window that the dialog should be modal for, may be nullptr.
 *               Not all platforms support this option.
 * @param filters a list of filters, may be empty. Not all platforms support
 *                this option, and platforms that do support it may allow the
 *                user to ignore the filters. If non-nullptr, it must remain
 *                valid at least until the callback is invoked.
 * @param default_location the default folder or file to start the dialog at,
 *                         may be nullptr. Not all platforms support this
 *                         option.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa DialogFileFilter
 * @sa ShowOpenFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 */
inline void ShowSaveFileDialog(DialogFileCallback callback,
                               void* userdata,
                               OptionalWindow window = {},
                               std::span<const DialogFileFilter> filters = {},
                               StringParam default_location = {})
{
  SDL_ShowSaveFileDialog(callback,
                         userdata,
                         window.get(),
                         filters.data(),
                         filters.size(),
                         default_location);
}

/**
 * Displays a dialog that lets the user choose a new or existing file on their
 * filesystem.
 *
 * This is an asynchronous function; it will return immediately, and the
 * result will be passed to the callback.
 *
 * The callback will be invoked with a null-terminated list of files the user
 * chose. The list will be empty if the user canceled the dialog, and it will
 * be nullptr if an error occurred.
 *
 * Note that the callback may be called from a different thread than the one
 * the function was invoked on.
 *
 * The chosen file may or may not already exist.
 *
 * On Linux, dialogs may require XDG Portals, which requires DBus, which
 * requires an event-handling loop. Apps that do not use SDL to handle events
 * should add a call to PumpEvents in their main loop.
 *
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param window the window that the dialog should be modal for, may be nullptr.
 *               Not all platforms support this option.
 * @param filters a list of filters, may be nullptr. Not all platforms support
 *                this option, and platforms that do support it may allow the
 *                user to ignore the filters. If non-nullptr, it must remain
 *                valid at least until the callback is invoked.
 * @param default_location the default folder or file to start the dialog at,
 *                         may be nullptr. Not all platforms support this
 *                         option.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa DialogFileFilter
 * @sa ShowOpenFileDialog
 * @sa ShowOpenFolderDialog
 * @sa ShowFileDialogWithProperties
 */
inline void ShowSaveFileDialog(DialogFileCB callback,
                               OptionalWindow window = {},
                               std::span<const DialogFileFilter> filters = {},
                               StringParam default_location = {})
{
  using Wrapper = CallbackWrapper<DialogFileCB>;
  ShowSaveFileDialog(&Wrapper::CallOnce,
                     Wrapper::Wrap(std::move(callback)),
                     std::move(window),
                     filters,
                     std::move(default_location));
}

/**
 * Displays a dialog that lets the user select a folder on their filesystem.
 *
 * This is an asynchronous function; it will return immediately, and the
 * result will be passed to the callback.
 *
 * The callback will be invoked with a null-terminated list of files the user
 * chose. The list will be empty if the user canceled the dialog, and it will
 * be nullptr if an error occurred.
 *
 * Note that the callback may be called from a different thread than the one
 * the function was invoked on.
 *
 * Depending on the platform, the user may be allowed to input paths that
 * don't yet exist.
 *
 * On Linux, dialogs may require XDG Portals, which requires DBus, which
 * requires an event-handling loop. Apps that do not use SDL to handle events
 * should add a call to PumpEvents in their main loop.
 *
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param userdata an optional pointer to pass extra data to the callback when
 *                 it will be invoked.
 * @param window the window that the dialog should be modal for, may be nullptr.
 *               Not all platforms support this option.
 * @param default_location the default folder or file to start the dialog at,
 *                         may be nullptr. Not all platforms support this
 *                         option.
 * @param allow_many if non-zero, the user will be allowed to select multiple
 *                   entries. Not all platforms support this option.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowFileDialogWithProperties
 */
inline void ShowOpenFolderDialog(DialogFileCallback callback,
                                 void* userdata,
                                 OptionalWindow window = {},
                                 StringParam default_location = {},
                                 bool allow_many = false)
{
  SDL_ShowOpenFolderDialog(
    callback, userdata, window.get(), default_location, allow_many);
}

/**
 * Displays a dialog that lets the user select a folder on their filesystem.
 *
 * This is an asynchronous function; it will return immediately, and the
 * result will be passed to the callback.
 *
 * The callback will be invoked with a null-terminated list of files the user
 * chose. The list will be empty if the user canceled the dialog, and it will
 * be nullptr if an error occurred.
 *
 * Note that the callback may be called from a different thread than the one
 * the function was invoked on.
 *
 * Depending on the platform, the user may be allowed to input paths that
 * don't yet exist.
 *
 * On Linux, dialogs may require XDG Portals, which requires DBus, which
 * requires an event-handling loop. Apps that do not use SDL to handle events
 * should add a call to PumpEvents in their main loop.
 *
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param window the window that the dialog should be modal for, may be nullptr.
 *               Not all platforms support this option.
 * @param default_location the default folder or file to start the dialog at,
 *                         may be nullptr. Not all platforms support this
 *                         option.
 * @param allow_many if non-zero, the user will be allowed to select multiple
 *                   entries. Not all platforms support this option.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa DialogFileCallback
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowFileDialogWithProperties
 */
inline void ShowOpenFolderDialog(DialogFileCB callback,
                                 OptionalWindow window = {},
                                 StringParam default_location = {},
                                 bool allow_many = false)
{
  using Wrapper = CallbackWrapper<DialogFileCB>;
  ShowOpenFolderDialog(&Wrapper::CallOnce,
                       Wrapper::Wrap(std::move(callback)),
                       std::move(window),
                       std::move(default_location),
                       allow_many);
}

/**
 * Various types of file dialogs.
 *
 * This is used by ShowFileDialogWithProperties() to decide what kind of
 * dialog to present to the user.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa ShowFileDialogWithProperties
 */
using FileDialogType = SDL_FileDialogType;

constexpr FileDialogType FILEDIALOG_OPENFILE =
  SDL_FILEDIALOG_OPENFILE; ///< OPENFILE

constexpr FileDialogType FILEDIALOG_SAVEFILE =
  SDL_FILEDIALOG_SAVEFILE; ///< SAVEFILE

constexpr FileDialogType FILEDIALOG_OPENFOLDER =
  SDL_FILEDIALOG_OPENFOLDER; ///< OPENFOLDER

/**
 * Create and launch a file dialog with the specified properties.
 *
 * These are the supported properties:
 *
 * - `prop::FileDialog.FILTERS_POINTER`: a pointer to a list of
 *   DialogFileFilter structs, which will be used as filters for
 *   file-based selections. Ignored if the dialog is an "Open Folder" dialog.
 *   If non-nullptr, the array of filters must remain valid at least until the
 *   callback is invoked.
 * - `prop::FileDialog.NFILTERS_NUMBER`: the number of filters in the
 *   array of filters, if it exists.
 * - `prop::FileDialog.WINDOW_POINTER`: the window that the dialog should
 *   be modal for.
 * - `prop::FileDialog.LOCATION_STRING`: the default folder or file to
 *   start the dialog at.
 * - `prop::FileDialog.MANY_BOOLEAN`: true to allow the user to select
 *   more than one entry.
 * - `prop::FileDialog.TITLE_STRING`: the title for the dialog.
 * - `prop::FileDialog.ACCEPT_STRING`: the label that the accept button
 *   should have.
 * - `prop::FileDialog.CANCEL_STRING`: the label that the cancel button
 *   should have.
 *
 * Note that each platform may or may not support any of the properties.
 *
 * @param type the type of file dialog.
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param userdata an optional pointer to pass extra data to the callback when
 *                 it will be invoked.
 * @param props the properties to use.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa FileDialogType
 * @sa DialogFileCallback
 * @sa DialogFileFilter
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 */
inline void ShowFileDialogWithProperties(FileDialogType type,
                                         DialogFileCallback callback,
                                         void* userdata,
                                         PropertiesBase& props)
{
  SDL_ShowFileDialogWithProperties(type, callback, userdata, props.get());
}

/**
 * Create and launch a file dialog with the specified properties.
 *
 * These are the supported properties:
 *
 * - `SDL_PROP_FILE_DIALOG_FILTERS_POINTER`: a pointer to a list of
 *   DialogFileFilter structs, which will be used as filters for
 *   file-based selections. Ignored if the dialog is an "Open Folder" dialog.
 *   If non-nullptr, the array of filters must remain valid at least until the
 *   callback is invoked.
 * - `SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER`: the number of filters in the
 *   array of filters, if it exists.
 * - `SDL_PROP_FILE_DIALOG_WINDOW_POINTER`: the window that the dialog should
 *   be modal for.
 * - `SDL_PROP_FILE_DIALOG_LOCATION_STRING`: the default folder or file to
 *   start the dialog at.
 * - `SDL_PROP_FILE_DIALOG_MANY_BOOLEAN`: true to allow the user to select
 *   more than one entry.
 * - `SDL_PROP_FILE_DIALOG_TITLE_STRING`: the title for the dialog.
 * - `SDL_PROP_FILE_DIALOG_ACCEPT_STRING`: the label that the accept button
 *   should have.
 * - `SDL_PROP_FILE_DIALOG_CANCEL_STRING`: the label that the cancel button
 *   should have.
 *
 * Note that each platform may or may not support any of the properties.
 *
 * @param type the type of file dialog.
 * @param callback a function pointer to be invoked when the user selects a
 *                 file and accepts, or cancels the dialog, or an error
 *                 occurs.
 * @param props the properties to use.
 *
 * @threadsafety This function should be called only from the main thread. The
 *               callback may be invoked from the same thread or from a
 *               different one, depending on the OS's constraints.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa FileDialogType
 * @sa DialogFileCallback
 * @sa DialogFileFilter
 * @sa ShowOpenFileDialog
 * @sa ShowSaveFileDialog
 * @sa ShowOpenFolderDialog
 */
inline void ShowFileDialogWithProperties(FileDialogType type,
                                         DialogFileCB callback,
                                         PropertiesRef props)
{

  using Wrapper = CallbackWrapper<DialogFileCB>;
  ShowFileDialogWithProperties(
    type, &Wrapper::CallOnce, Wrapper::Wrap(std::move(callback)), props);
}

namespace prop::FileDialog {

constexpr auto FILTERS_POINTER = SDL_PROP_FILE_DIALOG_FILTERS_POINTER;

constexpr auto NFILTERS_NUMBER = SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER;

constexpr auto WINDOW_POINTER = SDL_PROP_FILE_DIALOG_WINDOW_POINTER;

constexpr auto LOCATION_STRING = SDL_PROP_FILE_DIALOG_LOCATION_STRING;

constexpr auto MANY_BOOLEAN = SDL_PROP_FILE_DIALOG_MANY_BOOLEAN;

constexpr auto TITLE_STRING = SDL_PROP_FILE_DIALOG_TITLE_STRING;

constexpr auto ACCEPT_STRING = SDL_PROP_FILE_DIALOG_ACCEPT_STRING;

constexpr auto CANCEL_STRING = SDL_PROP_FILE_DIALOG_CANCEL_STRING;

} // namespace prop::FileDialog

/// @}

/**
 * @defgroup CategoryEvents Category Events
 *
 * Event queue management.
 *
 * It's extremely common--often required--that an app deal with SDL's event
 * queue. Almost all useful information about interactions with the real world
 * flow through here: the user interacting with the computer and app, hardware
 * coming and going, the system changing in some way, etc.
 *
 * An app generally takes a moment, perhaps at the start of a new frame, to
 * examine any events that have occurred since the last time and process or
 * ignore them. This is generally done by calling SDL_PollEvent() in a loop
 * until it returns false (or, if using the main callbacks, events are
 * provided one at a time in calls to SDL_AppEvent() before the next call to
 * SDL_AppIterate(); in this scenario, the app does not call PollEvent()
 * at all).
 *
 * There is other forms of control, too: PeepEvents() has more
 * functionality at the cost of more complexity, and WaitEvent() can block
 * the process until something interesting happens, which might be beneficial
 * for certain types of programs on low-power hardware. One may also call
 * AddEventWatch() to set a callback when new events arrive.
 *
 * The app is free to generate their own events, too: PushEvent() allows the
 * app to put events onto the queue for later retrieval; RegisterEvents()
 * can guarantee that these events have a type that isn't in use by other
 * parts of the system.
 *
 * @{
 */

/**
 * The types of events that can be delivered.
 *
 * @since This enum is available since SDL 3.2.0.
 * @sa EventTypes
 */
using EventType = SDL_EventType;

/**
 * @defgroup EventTypes Event Types
 *
 * Event types for Event.
 * @{
 */

/**
 * Unused (do not remove)
 */
constexpr EventType EVENT_FIRST = SDL_EVENT_FIRST;

/**
 * User-requested quit
 */
constexpr EventType EVENT_QUIT = SDL_EVENT_QUIT;

/**
 * The application is being terminated by the OS.  This event must be handled in
 * a callback set with SDL_AddEventWatch(). Called on iOS in
 * applicationWillTerminate() Called on Android in onDestroy()
 */
constexpr EventType EVENT_TERMINATING = SDL_EVENT_TERMINATING;

/**
 * The application is low on memory, free memory if possible.  This event must
 * be handled in a callback set with SDL_AddEventWatch(). Called on iOS in
 * applicationDidReceiveMemoryWarning() Called on Android in onTrimMemory()
 */
constexpr EventType EVENT_LOW_MEMORY = SDL_EVENT_LOW_MEMORY;

/**
 * The application is about to enter the background.  This event must be handled
 * in a callback set with SDL_AddEventWatch(). Called on iOS in
 * applicationWillResignActive() Called on Android in onPause()
 */
constexpr EventType EVENT_WILL_ENTER_BACKGROUND =
  SDL_EVENT_WILL_ENTER_BACKGROUND;

/**
 * The application did enter the background and may not get CPU for some time.
 * This event must be handled in a callback set with SDL_AddEventWatch(). Called
 * on iOS in applicationDidEnterBackground() Called on Android in onPause()
 */
constexpr EventType EVENT_DID_ENTER_BACKGROUND = SDL_EVENT_DID_ENTER_BACKGROUND;

/**
 * The application is about to enter the foreground.  This event must be handled
 * in a callback set with SDL_AddEventWatch(). Called on iOS in
 * applicationWillEnterForeground() Called on Android in onResume()
 */
constexpr EventType EVENT_WILL_ENTER_FOREGROUND =
  SDL_EVENT_WILL_ENTER_FOREGROUND;

/**
 * The application is now interactive.  This event must be handled in a callback
 * set with SDL_AddEventWatch(). Called on iOS in applicationDidBecomeActive()
 * Called on Android in onResume()
 */
constexpr EventType EVENT_DID_ENTER_FOREGROUND = SDL_EVENT_DID_ENTER_FOREGROUND;

/**
 * The user's locale preferences have changed.
 */
constexpr EventType EVENT_LOCALE_CHANGED = SDL_EVENT_LOCALE_CHANGED;

/**
 * The system theme changed
 */
constexpr EventType EVENT_SYSTEM_THEME_CHANGED = SDL_EVENT_SYSTEM_THEME_CHANGED;

/**
 * Display orientation has changed to data1
 */
constexpr EventType EVENT_DISPLAY_ORIENTATION = SDL_EVENT_DISPLAY_ORIENTATION;

/**
 * Display has been added to the system
 */
constexpr EventType EVENT_DISPLAY_ADDED = SDL_EVENT_DISPLAY_ADDED;

/**
 * Display has been removed from the system
 */
constexpr EventType EVENT_DISPLAY_REMOVED = SDL_EVENT_DISPLAY_REMOVED;

/**
 * Display has changed position
 */
constexpr EventType EVENT_DISPLAY_MOVED = SDL_EVENT_DISPLAY_MOVED;

/**
 * Display has changed desktop mode
 */
constexpr EventType EVENT_DISPLAY_DESKTOP_MODE_CHANGED =
  SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED;

/**
 * Display has changed current mode
 */
constexpr EventType EVENT_DISPLAY_CURRENT_MODE_CHANGED =
  SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED;

/**
 * Display has changed content scale
 */
constexpr EventType EVENT_DISPLAY_CONTENT_SCALE_CHANGED =
  SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED;

constexpr EventType EVENT_DISPLAY_FIRST =
  SDL_EVENT_DISPLAY_FIRST; ///< DISPLAY_FIRST

constexpr EventType EVENT_DISPLAY_LAST =
  SDL_EVENT_DISPLAY_LAST; ///< DISPLAY_LAST

/**
 * Window has been shown
 */
constexpr EventType EVENT_WINDOW_SHOWN = SDL_EVENT_WINDOW_SHOWN;

/**
 * Window has been hidden
 */
constexpr EventType EVENT_WINDOW_HIDDEN = SDL_EVENT_WINDOW_HIDDEN;

/**
 * Window has been exposed and should be redrawn, and can be redrawn directly
 * from event watchers for this event
 */
constexpr EventType EVENT_WINDOW_EXPOSED = SDL_EVENT_WINDOW_EXPOSED;

/**
 * Window has been moved to data1, data2
 */
constexpr EventType EVENT_WINDOW_MOVED = SDL_EVENT_WINDOW_MOVED;

/**
 * Window has been resized to data1xdata2
 */
constexpr EventType EVENT_WINDOW_RESIZED = SDL_EVENT_WINDOW_RESIZED;

/**
 * The pixel size of the window has changed to data1xdata2
 */
constexpr EventType EVENT_WINDOW_PIXEL_SIZE_CHANGED =
  SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED;

/**
 * The pixel size of a Metal view associated with the window has changed
 */
constexpr EventType EVENT_WINDOW_METAL_VIEW_RESIZED =
  SDL_EVENT_WINDOW_METAL_VIEW_RESIZED;

/**
 * Window has been minimized
 */
constexpr EventType EVENT_WINDOW_MINIMIZED = SDL_EVENT_WINDOW_MINIMIZED;

/**
 * Window has been maximized
 */
constexpr EventType EVENT_WINDOW_MAXIMIZED = SDL_EVENT_WINDOW_MAXIMIZED;

/**
 * Window has been restored to normal size and position
 */
constexpr EventType EVENT_WINDOW_RESTORED = SDL_EVENT_WINDOW_RESTORED;

/**
 * Window has gained mouse focus
 */
constexpr EventType EVENT_WINDOW_MOUSE_ENTER = SDL_EVENT_WINDOW_MOUSE_ENTER;

/**
 * Window has lost mouse focus
 */
constexpr EventType EVENT_WINDOW_MOUSE_LEAVE = SDL_EVENT_WINDOW_MOUSE_LEAVE;

/**
 * Window has gained keyboard focus
 */
constexpr EventType EVENT_WINDOW_FOCUS_GAINED = SDL_EVENT_WINDOW_FOCUS_GAINED;

/**
 * Window has lost keyboard focus
 */
constexpr EventType EVENT_WINDOW_FOCUS_LOST = SDL_EVENT_WINDOW_FOCUS_LOST;

/**
 * The window manager requests that the window be closed
 */
constexpr EventType EVENT_WINDOW_CLOSE_REQUESTED =
  SDL_EVENT_WINDOW_CLOSE_REQUESTED;

/**
 * Window had a hit test that wasn't SDL_HITTEST_NORMAL
 */
constexpr EventType EVENT_WINDOW_HIT_TEST = SDL_EVENT_WINDOW_HIT_TEST;

/**
 * The ICC profile of the window's display has changed
 */
constexpr EventType EVENT_WINDOW_ICCPROF_CHANGED =
  SDL_EVENT_WINDOW_ICCPROF_CHANGED;

/**
 * Window has been moved to display data1
 */
constexpr EventType EVENT_WINDOW_DISPLAY_CHANGED =
  SDL_EVENT_WINDOW_DISPLAY_CHANGED;

/**
 * Window display scale has been changed
 */
constexpr EventType EVENT_WINDOW_DISPLAY_SCALE_CHANGED =
  SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED;

/**
 * The window safe area has been changed
 */
constexpr EventType EVENT_WINDOW_SAFE_AREA_CHANGED =
  SDL_EVENT_WINDOW_SAFE_AREA_CHANGED;

/**
 * The window has been occluded
 */
constexpr EventType EVENT_WINDOW_OCCLUDED = SDL_EVENT_WINDOW_OCCLUDED;

/**
 * The window has entered fullscreen mode
 */
constexpr EventType EVENT_WINDOW_ENTER_FULLSCREEN =
  SDL_EVENT_WINDOW_ENTER_FULLSCREEN;

/**
 * The window has left fullscreen mode
 */
constexpr EventType EVENT_WINDOW_LEAVE_FULLSCREEN =
  SDL_EVENT_WINDOW_LEAVE_FULLSCREEN;

/**
 * The window with the associated ID is being or has been destroyed.  If this
 * message is being handled in an event watcher, the window handle is still
 * valid and can still be used to retrieve any properties associated with the
 * window. Otherwise, the handle has already been destroyed and all resources
 * associated with it are invalid
 */
constexpr EventType EVENT_WINDOW_DESTROYED = SDL_EVENT_WINDOW_DESTROYED;

/**
 * Window HDR properties have changed
 */
constexpr EventType EVENT_WINDOW_HDR_STATE_CHANGED =
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED;

constexpr EventType EVENT_WINDOW_FIRST =
  SDL_EVENT_WINDOW_FIRST; ///< WINDOW_FIRST

constexpr EventType EVENT_WINDOW_LAST = SDL_EVENT_WINDOW_LAST; ///< WINDOW_LAST

/**
 * Key pressed
 */
constexpr EventType EVENT_KEY_DOWN = SDL_EVENT_KEY_DOWN;

/**
 * Key released
 */
constexpr EventType EVENT_KEY_UP = SDL_EVENT_KEY_UP;

/**
 * Keyboard text editing (composition)
 */
constexpr EventType EVENT_TEXT_EDITING = SDL_EVENT_TEXT_EDITING;

/**
 * Keyboard text input
 */
constexpr EventType EVENT_TEXT_INPUT = SDL_EVENT_TEXT_INPUT;

/**
 * Keymap changed due to a system event such as an input language or keyboard
 * layout change.
 */
constexpr EventType EVENT_KEYMAP_CHANGED = SDL_EVENT_KEYMAP_CHANGED;

/**
 * A new keyboard has been inserted into the system
 */
constexpr EventType EVENT_KEYBOARD_ADDED = SDL_EVENT_KEYBOARD_ADDED;

/**
 * A keyboard has been removed
 */
constexpr EventType EVENT_KEYBOARD_REMOVED = SDL_EVENT_KEYBOARD_REMOVED;

/**
 * Keyboard text editing candidates
 */
constexpr EventType EVENT_TEXT_EDITING_CANDIDATES =
  SDL_EVENT_TEXT_EDITING_CANDIDATES;

/**
 * Mouse moved
 */
constexpr EventType EVENT_MOUSE_MOTION = SDL_EVENT_MOUSE_MOTION;

/**
 * Mouse button pressed
 */
constexpr EventType EVENT_MOUSE_BUTTON_DOWN = SDL_EVENT_MOUSE_BUTTON_DOWN;

/**
 * Mouse button released
 */
constexpr EventType EVENT_MOUSE_BUTTON_UP = SDL_EVENT_MOUSE_BUTTON_UP;

/**
 * Mouse wheel motion
 */
constexpr EventType EVENT_MOUSE_WHEEL = SDL_EVENT_MOUSE_WHEEL;

/**
 * A new mouse has been inserted into the system
 */
constexpr EventType EVENT_MOUSE_ADDED = SDL_EVENT_MOUSE_ADDED;

/**
 * A mouse has been removed
 */
constexpr EventType EVENT_MOUSE_REMOVED = SDL_EVENT_MOUSE_REMOVED;

/**
 * Joystick axis motion
 */
constexpr EventType EVENT_JOYSTICK_AXIS_MOTION = SDL_EVENT_JOYSTICK_AXIS_MOTION;

/**
 * Joystick trackball motion
 */
constexpr EventType EVENT_JOYSTICK_BALL_MOTION = SDL_EVENT_JOYSTICK_BALL_MOTION;

/**
 * Joystick hat position change
 */
constexpr EventType EVENT_JOYSTICK_HAT_MOTION = SDL_EVENT_JOYSTICK_HAT_MOTION;

/**
 * Joystick button pressed
 */
constexpr EventType EVENT_JOYSTICK_BUTTON_DOWN = SDL_EVENT_JOYSTICK_BUTTON_DOWN;

/**
 * Joystick button released
 */
constexpr EventType EVENT_JOYSTICK_BUTTON_UP = SDL_EVENT_JOYSTICK_BUTTON_UP;

/**
 * A new joystick has been inserted into the system
 */
constexpr EventType EVENT_JOYSTICK_ADDED = SDL_EVENT_JOYSTICK_ADDED;

/**
 * An opened joystick has been removed
 */
constexpr EventType EVENT_JOYSTICK_REMOVED = SDL_EVENT_JOYSTICK_REMOVED;

/**
 * Joystick battery level change
 */
constexpr EventType EVENT_JOYSTICK_BATTERY_UPDATED =
  SDL_EVENT_JOYSTICK_BATTERY_UPDATED;

/**
 * Joystick update is complete
 */
constexpr EventType EVENT_JOYSTICK_UPDATE_COMPLETE =
  SDL_EVENT_JOYSTICK_UPDATE_COMPLETE;

/**
 * Gamepad axis motion
 */
constexpr EventType EVENT_GAMEPAD_AXIS_MOTION = SDL_EVENT_GAMEPAD_AXIS_MOTION;

/**
 * Gamepad button pressed
 */
constexpr EventType EVENT_GAMEPAD_BUTTON_DOWN = SDL_EVENT_GAMEPAD_BUTTON_DOWN;

/**
 * Gamepad button released
 */
constexpr EventType EVENT_GAMEPAD_BUTTON_UP = SDL_EVENT_GAMEPAD_BUTTON_UP;

/**
 * A new gamepad has been inserted into the system
 */
constexpr EventType EVENT_GAMEPAD_ADDED = SDL_EVENT_GAMEPAD_ADDED;

/**
 * A gamepad has been removed
 */
constexpr EventType EVENT_GAMEPAD_REMOVED = SDL_EVENT_GAMEPAD_REMOVED;

/**
 * The gamepad mapping was updated
 */
constexpr EventType EVENT_GAMEPAD_REMAPPED = SDL_EVENT_GAMEPAD_REMAPPED;

/**
 * Gamepad touchpad was touched
 */
constexpr EventType EVENT_GAMEPAD_TOUCHPAD_DOWN =
  SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN;

/**
 * Gamepad touchpad finger was moved
 */
constexpr EventType EVENT_GAMEPAD_TOUCHPAD_MOTION =
  SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION;

/**
 * Gamepad touchpad finger was lifted
 */
constexpr EventType EVENT_GAMEPAD_TOUCHPAD_UP = SDL_EVENT_GAMEPAD_TOUCHPAD_UP;

/**
 * Gamepad sensor was updated
 */
constexpr EventType EVENT_GAMEPAD_SENSOR_UPDATE =
  SDL_EVENT_GAMEPAD_SENSOR_UPDATE;

/**
 * Gamepad update is complete
 */
constexpr EventType EVENT_GAMEPAD_UPDATE_COMPLETE =
  SDL_EVENT_GAMEPAD_UPDATE_COMPLETE;

/**
 * Gamepad Steam handle has changed
 */
constexpr EventType EVENT_GAMEPAD_STEAM_HANDLE_UPDATED =
  SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED;

constexpr EventType EVENT_FINGER_DOWN = SDL_EVENT_FINGER_DOWN; ///< FINGER_DOWN

constexpr EventType EVENT_FINGER_UP = SDL_EVENT_FINGER_UP; ///< FINGER_UP

constexpr EventType EVENT_FINGER_MOTION =
  SDL_EVENT_FINGER_MOTION; ///< FINGER_MOTION

constexpr EventType EVENT_FINGER_CANCELED =
  SDL_EVENT_FINGER_CANCELED; ///< FINGER_CANCELED

/**
 * The clipboard or primary selection changed
 */
constexpr EventType EVENT_CLIPBOARD_UPDATE = SDL_EVENT_CLIPBOARD_UPDATE;

/**
 * The system requests a file open
 */
constexpr EventType EVENT_DROP_FILE = SDL_EVENT_DROP_FILE;

/**
 * text/plain drag-and-drop event
 */
constexpr EventType EVENT_DROP_TEXT = SDL_EVENT_DROP_TEXT;

/**
 * A new set of drops is beginning (NULL filename)
 */
constexpr EventType EVENT_DROP_BEGIN = SDL_EVENT_DROP_BEGIN;

/**
 * Current set of drops is now complete (NULL filename)
 */
constexpr EventType EVENT_DROP_COMPLETE = SDL_EVENT_DROP_COMPLETE;

/**
 * Position while moving over the window
 */
constexpr EventType EVENT_DROP_POSITION = SDL_EVENT_DROP_POSITION;

/**
 * A new audio device is available
 */
constexpr EventType EVENT_AUDIO_DEVICE_ADDED = SDL_EVENT_AUDIO_DEVICE_ADDED;

/**
 * An audio device has been removed.
 */
constexpr EventType EVENT_AUDIO_DEVICE_REMOVED = SDL_EVENT_AUDIO_DEVICE_REMOVED;

/**
 * An audio device's format has been changed by the system.
 */
constexpr EventType EVENT_AUDIO_DEVICE_FORMAT_CHANGED =
  SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED;

/**
 * A sensor was updated
 */
constexpr EventType EVENT_SENSOR_UPDATE = SDL_EVENT_SENSOR_UPDATE;

/**
 * Pressure-sensitive pen has become available
 */
constexpr EventType EVENT_PEN_PROXIMITY_IN = SDL_EVENT_PEN_PROXIMITY_IN;

/**
 * Pressure-sensitive pen has become unavailable
 */
constexpr EventType EVENT_PEN_PROXIMITY_OUT = SDL_EVENT_PEN_PROXIMITY_OUT;

/**
 * Pressure-sensitive pen touched drawing surface
 */
constexpr EventType EVENT_PEN_DOWN = SDL_EVENT_PEN_DOWN;

/**
 * Pressure-sensitive pen stopped touching drawing surface
 */
constexpr EventType EVENT_PEN_UP = SDL_EVENT_PEN_UP;

/**
 * Pressure-sensitive pen button pressed
 */
constexpr EventType EVENT_PEN_BUTTON_DOWN = SDL_EVENT_PEN_BUTTON_DOWN;

/**
 * Pressure-sensitive pen button released
 */
constexpr EventType EVENT_PEN_BUTTON_UP = SDL_EVENT_PEN_BUTTON_UP;

/**
 * Pressure-sensitive pen is moving on the tablet
 */
constexpr EventType EVENT_PEN_MOTION = SDL_EVENT_PEN_MOTION;

/**
 * Pressure-sensitive pen angle/pressure/etc changed
 */
constexpr EventType EVENT_PEN_AXIS = SDL_EVENT_PEN_AXIS;

/**
 * A new camera device is available
 */
constexpr EventType EVENT_CAMERA_DEVICE_ADDED = SDL_EVENT_CAMERA_DEVICE_ADDED;

/**
 * A camera device has been removed.
 */
constexpr EventType EVENT_CAMERA_DEVICE_REMOVED =
  SDL_EVENT_CAMERA_DEVICE_REMOVED;

/**
 * A camera device has been approved for use by the user.
 */
constexpr EventType EVENT_CAMERA_DEVICE_APPROVED =
  SDL_EVENT_CAMERA_DEVICE_APPROVED;

/**
 * A camera device has been denied for use by the user.
 */
constexpr EventType EVENT_CAMERA_DEVICE_DENIED = SDL_EVENT_CAMERA_DEVICE_DENIED;

/**
 * The render targets have been reset and their contents need to be updated
 */
constexpr EventType EVENT_RENDER_TARGETS_RESET = SDL_EVENT_RENDER_TARGETS_RESET;

/**
 * The device has been reset and all textures need to be recreated
 */
constexpr EventType EVENT_RENDER_DEVICE_RESET = SDL_EVENT_RENDER_DEVICE_RESET;

/**
 * The device has been lost and can't be recovered.
 */
constexpr EventType EVENT_RENDER_DEVICE_LOST = SDL_EVENT_RENDER_DEVICE_LOST;

constexpr EventType EVENT_PRIVATE0 = SDL_EVENT_PRIVATE0; ///< PRIVATE0

constexpr EventType EVENT_PRIVATE1 = SDL_EVENT_PRIVATE1; ///< PRIVATE1

constexpr EventType EVENT_PRIVATE2 = SDL_EVENT_PRIVATE2; ///< PRIVATE2

constexpr EventType EVENT_PRIVATE3 = SDL_EVENT_PRIVATE3; ///< PRIVATE3

/**
 * Signals the end of an event poll cycle
 */
constexpr EventType EVENT_POLL_SENTINEL = SDL_EVENT_POLL_SENTINEL;

/**
 * Events SDL_EVENT_USER through SDL_EVENT_LAST are for your use,
 *  and should be allocated with SDL_RegisterEvents()
 */
constexpr EventType EVENT_USER = SDL_EVENT_USER;

/**
 * This last event is only for bounding internal arrays
 */
constexpr EventType EVENT_LAST = SDL_EVENT_LAST;

constexpr EventType EVENT_ENUM_PADDING =
  SDL_EVENT_ENUM_PADDING; ///< ENUM_PADDING

/// @}

/**
 * Fields shared by every event
 *
 * @since This struct is available since SDL 3.2.0.
 */
using CommonEvent = SDL_CommonEvent;

/**
 * Display state change event data (event.display.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using DisplayEvent = SDL_DisplayEvent;

/**
 * Window state change event data (event.window.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using WindowEvent = SDL_WindowEvent;

/**
 * Keyboard device event structure (event.kdevice.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using KeyboardDeviceEvent = SDL_KeyboardDeviceEvent;

/**
 * Keyboard button event structure (event.key.*)
 *
 * The `key` is the base SDL_Keycode generated by pressing the `scancode`
 * using the current keyboard layout, applying any options specified in
 * SDL_HINT_KEYCODE_OPTIONS. You can get the SDL_Keycode corresponding to the
 * event scancode and modifiers directly from the keyboard layout, bypassing
 * SDL_HINT_KEYCODE_OPTIONS, by calling SDL_GetKeyFromScancode().
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa GetKeyFromScancode()
 * @sa HINT_KEYCODE_OPTIONS
 */
using KeyboardEvent = SDL_KeyboardEvent;

/**
 * Keyboard text editing event structure (event.edit.*)
 *
 * The start cursor is the position, in UTF-8 characters, where new typing
 * will be inserted into the editing text. The length is the number of UTF-8
 * characters that will be replaced by new typing.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using TextEditingEvent = SDL_TextEditingEvent;

/**
 * Keyboard IME candidates event structure (event.edit_candidates.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using TextEditingCandidatesEvent = SDL_TextEditingCandidatesEvent;

/**
 * Keyboard text input event structure (event.text.*)
 *
 * This event will never be delivered unless text input is enabled by calling
 * SDL_StartTextInput(). Text input is disabled by default!
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa StartTextInput()
 * @sa StopTextInput()
 */
using TextInputEvent = SDL_TextInputEvent;

/**
 * Mouse device event structure (event.mdevice.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MouseDeviceEvent = SDL_MouseDeviceEvent;

/**
 * Mouse motion event structure (event.motion.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MouseMotionEvent = SDL_MouseMotionEvent;

/**
 * Mouse button event structure (event.button.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MouseButtonEvent = SDL_MouseButtonEvent;

/**
 * Mouse wheel event structure (event.wheel.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MouseWheelEvent = SDL_MouseWheelEvent;

/**
 * Joystick axis motion event structure (event.jaxis.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using JoyAxisEvent = SDL_JoyAxisEvent;

/**
 * Joystick trackball motion event structure (event.jball.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using JoyBallEvent = SDL_JoyBallEvent;

/**
 * Joystick hat position change event structure (event.jhat.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using JoyHatEvent = SDL_JoyHatEvent;

/**
 * Joystick button event structure (event.jbutton.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using JoyButtonEvent = SDL_JoyButtonEvent;

/**
 * Joystick device event structure (event.jdevice.*)
 *
 * SDL will send JOYSTICK_ADDED events for devices that are already plugged in
 * during SDL_Init.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa GamepadDeviceEvent
 */
using JoyDeviceEvent = SDL_JoyDeviceEvent;

/**
 * Joystick battery level change event structure (event.jbattery.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using JoyBatteryEvent = SDL_JoyBatteryEvent;

/**
 * Gamepad axis motion event structure (event.gaxis.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using GamepadAxisEvent = SDL_GamepadAxisEvent;

/**
 * Gamepad button event structure (event.gbutton.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using GamepadButtonEvent = SDL_GamepadButtonEvent;

/**
 * Gamepad device event structure (event.gdevice.*)
 *
 * Joysticks that are supported gamepads receive both an SDL_JoyDeviceEvent
 * and an SDL_GamepadDeviceEvent.
 *
 * SDL will send GAMEPAD_ADDED events for joysticks that are already plugged
 * in during SDL_Init() and are recognized as gamepads. It will also send
 * events for joysticks that get gamepad mappings at runtime.
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa JoyDeviceEvent
 */
using GamepadDeviceEvent = SDL_GamepadDeviceEvent;

/**
 * Gamepad touchpad event structure (event.gtouchpad.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using GamepadTouchpadEvent = SDL_GamepadTouchpadEvent;

/**
 * Gamepad sensor event structure (event.gsensor.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using GamepadSensorEvent = SDL_GamepadSensorEvent;

/**
 * Audio device event structure (event.adevice.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using AudioDeviceEvent = SDL_AudioDeviceEvent;

/**
 * Camera device event structure (event.cdevice.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using CameraDeviceEvent = SDL_CameraDeviceEvent;

/**
 * Renderer event structure (event.render.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using RenderEvent = SDL_RenderEvent;

/**
 * Touch finger event structure (event.tfinger.*)
 *
 * Coordinates in this event are normalized. `x` and `y` are normalized to a
 * range between 0.0f and 1.0f, relative to the window, so (0,0) is the top
 * left and (1,1) is the bottom right. Delta coordinates `dx` and `dy` are
 * normalized in the ranges of -1.0f (traversed all the way from the bottom or
 * right to all the way up or left) to 1.0f (traversed all the way from the
 * top or left to all the way down or right).
 *
 * Note that while the coordinates are _normalized_, they are not _clamped_,
 * which means in some circumstances you can get a value outside of this
 * range. For example, a renderer using logical presentation might give a
 * negative value when the touch is in the letterboxing. Some platforms might
 * report a touch outside of the window, which will also be outside of the
 * range.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using TouchFingerEvent = SDL_TouchFingerEvent;

/**
 * Pressure-sensitive pen proximity event structure (event.pmotion.*)
 *
 * When a pen becomes visible to the system (it is close enough to a tablet,
 * etc), SDL will send an SDL_EVENT_PEN_PROXIMITY_IN event with the new pen's
 * ID. This ID is valid until the pen leaves proximity again (has been removed
 * from the tablet's area, the tablet has been unplugged, etc). If the same
 * pen reenters proximity again, it will be given a new ID.
 *
 * Note that "proximity" means "close enough for the tablet to know the tool
 * is there." The pen touching and lifting off from the tablet while not
 * leaving the area are handled by SDL_EVENT_PEN_DOWN and SDL_EVENT_PEN_UP.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using PenProximityEvent = SDL_PenProximityEvent;

/**
 * Pressure-sensitive pen motion event structure (event.pmotion.*)
 *
 * Depending on the hardware, you may get motion events when the pen is not
 * touching a tablet, for tracking a pen even when it isn't drawing. You
 * should listen for SDL_EVENT_PEN_DOWN and SDL_EVENT_PEN_UP events, or check
 * `pen_state & SDL_PEN_INPUT_DOWN` to decide if a pen is "drawing" when
 * dealing with pen motion.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using PenMotionEvent = SDL_PenMotionEvent;

/**
 * Pressure-sensitive pen touched event structure (event.ptouch.*)
 *
 * These events come when a pen touches a surface (a tablet, etc), or lifts
 * off from one.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using PenTouchEvent = SDL_PenTouchEvent;

/**
 * Pressure-sensitive pen button event structure (event.pbutton.*)
 *
 * This is for buttons on the pen itself that the user might click. The pen
 * itself pressing down to draw triggers a SDL_EVENT_PEN_DOWN event instead.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using PenButtonEvent = SDL_PenButtonEvent;

/**
 * Pressure-sensitive pen pressure / angle event structure (event.paxis.*)
 *
 * You might get some of these events even if the pen isn't touching the
 * tablet.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using PenAxisEvent = SDL_PenAxisEvent;

/**
 * An event used to drop text or request a file open by the system
 * (event.drop.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using DropEvent = SDL_DropEvent;

/**
 * An event triggered when the clipboard contents have changed
 * (event.clipboard.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using ClipboardEvent = SDL_ClipboardEvent;

/**
 * Sensor event structure (event.sensor.*)
 *
 * @since This struct is available since SDL 3.2.0.
 */
using SensorEvent = SDL_SensorEvent;

/**
 * The "quit requested" event
 *
 * @since This struct is available since SDL 3.2.0.
 */
using QuitEvent = SDL_QuitEvent;

/**
 * A user-defined event type (event.user.*)
 *
 * This event is unique; it is never created by SDL, but only by the
 * application. The event can be pushed onto the event queue using
 * SDL_PushEvent(). The contents of the structure members are completely up to
 * the programmer; the only requirement is that '''type''' is a value obtained
 * from SDL_RegisterEvents().
 *
 * @since This struct is available since SDL 3.2.0.
 */
using UserEvent = SDL_UserEvent;

/**
 * The structure for all events in SDL.
 *
 * The SDL_Event structure is the core of all event handling in SDL. SDL_Event
 * is a union of all event structures used in SDL.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using Event = SDL_Event;

/**
 * Pump the event loop, gathering events from the input devices.
 *
 * This function updates the event queue and internal input device state.
 *
 * SDL_PumpEvents() gathers all the pending input information from devices and
 * places it in the event queue. Without calls to SDL_PumpEvents() no events
 * would ever be placed on the queue. Often the need for calls to
 * SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and
 * SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not
 * polling or waiting for events (e.g. you are filtering them), then you must
 * call SDL_PumpEvents() to force an event queue update.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa WaitEvent()
 */
inline void PumpEvents() { return SDL_PumpEvents(); }

/**
 * @name EventActions
 * The type of action to request from PeepEvents().
 * @{
 */

/**
 * The type of action to request from PeepEvents().
 *
 * @since This enum is available since SDL 3.2.0.
 */
using EventAction = SDL_EventAction;

/**
 * Add events to the back of the queue.
 */
constexpr EventAction ADDEVENT = SDL_ADDEVENT;

/**
 * Check but don't remove events from the queue front.
 */
constexpr EventAction PEEKEVENT = SDL_PEEKEVENT;

/**
 * Retrieve/remove events from the front of the queue.
 */
constexpr EventAction GETEVENT = SDL_GETEVENT;

/// @}

/**
 * Check the event queue for messages and optionally return them.
 *
 * `action` may be any of the following:
 *
 * ## remarks
 *
 * - `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the
 *   event queue.
 * - `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,
 *   within the specified minimum and maximum type, will be returned to the
 *   caller and will _not_ be removed from the queue. If you pass NULL for
 *   `events`, then `numevents` is ignored and the total number of matching
 *   events will be returned.
 * - `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,
 *   within the specified minimum and maximum type, will be returned to the
 *   caller and will be removed from the queue.
 *
 * You may have to call SDL_PumpEvents() before calling this function.
 * Otherwise, the events may not be ready to be filtered when you call
 * SDL_PeepEvents().
 *
 * @param events destination buffer for the retrieved events, may be NULL to
 *               leave the events in the queue and return the number of events
 *               that would have been stored.
 * @param numevents if action is SDL_ADDEVENT, the number of events to add
 *                  back to the event queue; if action is SDL_PEEKEVENT or
 *                  SDL_GETEVENT, the maximum number of events to retrieve.
 * @param action action to take; see [Remarks](#remarks) for details.
 * @param minType minimum value of the event type to be considered;
 *                SDL_EVENT_FIRST is a safe choice.
 * @param maxType maximum value of the event type to be considered;
 *                SDL_EVENT_LAST is a safe choice.
 * @returns the number of events actually stored or -1 on failure; call
 *          GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PumpEvents()
 * @sa PushEvent()
 */
inline int PeepEvents(Event* events,
                      int numevents,
                      EventAction action,
                      Uint32 minType = EVENT_FIRST,
                      Uint32 maxType = EVENT_LAST)
{
  return SDL_PeepEvents(events, numevents, action, minType, maxType);
}

/**
 * Check for the existence of a certain event type in the event queue.
 *
 * If you need to check for a range of event types, use SDL_HasEvents()
 * instead.
 *
 * @param type the type of event to be queried; see @ref EventTypes for
 * details.
 * @returns true if events matching `type` are present, or false if events
 *          matching `type` are not present.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasEvents()
 */
inline bool HasEvent(Uint32 type) { return SDL_HasEvent(type); }

/**
 * Check for the existence of certain event types in the event queue.
 *
 * If you need to check for a single event type, use SDL_HasEvent() instead.
 *
 * @param minType the low end of event type to be queried, inclusive; see
 *                SDL_EventType for details.
 * @param maxType the high end of event type to be queried, inclusive; see
 *                SDL_EventType for details.
 * @returns true if events with type >= `minType` and <= `maxType` are
 *          present, or false if not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasEvent()
 */
inline bool HasEvents(Uint32 minType = EVENT_FIRST, Uint32 maxType = EVENT_LAST)
{
  return SDL_HasEvents(minType, maxType);
}

/**
 * Clear events of a specific type from the event queue.
 *
 * This will unconditionally remove any events from the queue that match
 * `type`. If you need to remove a range of event types, use SDL_FlushEvents()
 * instead.
 *
 * It's also normal to just ignore events you don't care about in your event
 * loop without calling this function.
 *
 * This function only affects currently queued events. If you want to make
 * sure that all pending OS events are flushed, you can call SDL_PumpEvents()
 * on the main thread immediately before the flush call.
 *
 * If you have user events with custom data that needs to be freed, you should
 * use SDL_PeepEvents() to remove and clean up those events before calling
 * this function.
 *
 * @param type the type of event to be cleared; see SDL_EventType for details.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa FlushEvents()
 */
inline void FlushEvent(Uint32 type) { return SDL_FlushEvent(type); }

/**
 * Clear events of a range of types from the event queue.
 *
 * This will unconditionally remove any events from the queue that are in the
 * range of `minType` to `maxType`, inclusive. If you need to remove a single
 * event type, use SDL_FlushEvent() instead.
 *
 * It's also normal to just ignore events you don't care about in your event
 * loop without calling this function.
 *
 * This function only affects currently queued events. If you want to make
 * sure that all pending OS events are flushed, you can call SDL_PumpEvents()
 * on the main thread immediately before the flush call.
 *
 * @param minType the low end of event type to be cleared, inclusive; see
 *                SDL_EventType for details.
 * @param maxType the high end of event type to be cleared, inclusive; see
 *                SDL_EventType for details.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa FlushEvent()
 */
inline void FlushEvents(Uint32 minType = EVENT_FIRST,
                        Uint32 maxType = EVENT_LAST)
{
  return SDL_FlushEvents(minType, maxType);
}

/**
 * Poll for currently pending events.
 *
 * If `event` is not nullptr, the next event is removed from the queue and
 * stored in the Event structure pointed to by `event`. The true returned
 * refers to this event, immediately stored in the SDL Event structure -- not an
 * event to follow.
 *
 * If `event` is nullptr, it simply returns true if there is an event in the
 * queue, but will not remove it from the queue.
 *
 * As this function may implicitly call PumpEvents(), you can only call
 * this function in the thread that set the video mode.
 *
 * PollEvent() is the favored way of receiving system events since it can
 * be done from the main loop and does not suspend the main loop while waiting
 * on an event to be posted.
 *
 * The common practice is to fully process the event queue once every frame,
 * usually as a first step before updating the game's state:
 *
 * ```c
 * while (game_is_still_running) {
 *     SDL::Event event;
 *     while (SDL::PollEvent(&event)) {  // poll until all events are handled!
 *         // decide what to do with this event.
 *     }
 *
 *     // update game state, draw the current frame
 * }
 * ```
 *
 * @param event the SDL_Event structure to be filled with the next event from
 *              the queue, or nullptr.
 * @returns true if this got an event or false if there are none available.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PushEvent()
 * @sa WaitEvent()
 * @sa WaitEventTimeout()
 */
inline bool PollEvent(Event* event) { return SDL_PollEvent(event); }

/**
 * Poll for currently pending events.
 *
 * The next event is removed from the queue and returned.
 *
 * As this function may implicitly call PumpEvents(), you can only call
 * this function in the thread that set the video mode.
 *
 * PollEvent() is the favored way of receiving system events since it can
 * be done from the main loop and does not suspend the main loop while waiting
 * on an event to be posted.
 *
 * The common practice is to fully process the event queue once every frame,
 * usually as a first step before updating the game's state:
 *
 * ```c
 * while (game_is_still_running) {
 *     while (auto event = SDL::PollEvent()) {  // poll until all events are
 * handled!
 *         // decide what to do with this event.
 *     }
 *
 *     // update game state, draw the current frame
 * }
 * ```
 *
 * @returns Event if this got an event or std::nullopt if there are none
 * available.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PushEvent()
 * @sa WaitEvent()
 * @sa WaitEventTimeout()
 */
inline std::optional<Event> PollEvent()
{
  if (Event event; PollEvent(&event)) return event;
  return std::nullopt;
}

/**
 * Wait indefinitely for the next available event.
 *
 * If `event` is not nullptr, the next event is removed from the queue and
 * stored in the Event structure pointed to by `event`.
 *
 * As this function may implicitly call PumpEvents(), you can only call
 * this function in the thread that initialized the video subsystem.
 *
 * @param event the Event structure to be filled in with the next event
 *              from the queue, or nullptr.
 * @returns true on success or false if there was an error while waiting for
 *          events; call GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PushEvent()
 * @sa WaitEventTimeout()
 */
inline bool WaitEvent(Event* event) { return SDL_WaitEvent(event); }

/**
 * Wait indefinitely for the next available event.
 *
 * The next event is removed from the queue and returned.
 *
 * As this function may implicitly call PumpEvents(), you can only call
 * this function in the thread that initialized the video subsystem.
 *
 * @returns Event on success or std::nullopt if there was an error while waiting
 * for events; call GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PushEvent()
 * @sa WaitEventTimeout()
 */
inline std::optional<Event> WaitEvent()
{
  if (Event event; WaitEvent(&event)) return event;
  return std::nullopt;
}

/**
 * Wait until the specified timeout (in milliseconds) for the next available
 * event.
 *
 * If `event` is not nullptr, the next event is removed from the queue and
 * stored in the Event structure pointed to by `event`.
 *
 * As this function may implicitly call PumpEvents(), you can only call this
 * function in the thread that initialized the video subsystem.
 *
 * The timeout is not guaranteed, the actual wait time could be longer due to
 * system scheduling.
 *
 * @param event the Event structure to be filled in with the next event from the
 * queue, or nullptr.
 * @param timeoutMS the maximum number of milliseconds to wait for the next
 *                  available event.
 * @returns true if this got an event or false if the timeout elapsed without
 *          any events available.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PushEvent()
 * @sa WaitEvent()
 */
inline bool WaitEventTimeout(Event* event, Sint32 timeoutMS)
{
  return SDL_WaitEventTimeout(event, timeoutMS);
}

/**
 * Wait until the specified timeout (in milliseconds) for the next available
 * event.
 *
 * As this function may implicitly call PumpEvents(), you can only call this
 * function in the thread that initialized the video subsystem.
 *
 * The timeout is not guaranteed, the actual wait time could be longer due to
 * system scheduling.
 *
 * @param timeoutMS the maximum number of milliseconds to wait for the next
 *                  available event.
 * @returns the Event if this got an event or std::nullopt if the timeout
 * elapsed without any events available.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PushEvent()
 * @sa WaitEvent()
 */
inline std::optional<Event> WaitEventTimeout(Sint32 timeoutMS)
{
  if (Event event; WaitEventTimeout(&event, timeoutMS)) return event;
  return std::nullopt;
}

/**
 * Wait until the specified timeout (with milliseconds precision) for the next
 * available event.
 *
 * If `event` is not nullptr, the next event is removed from the queue and
 * stored in the Event structure pointed to by `event`.
 *
 * As this function may implicitly call PumpEvents(), you can only call this
 * function in the thread that initialized the video subsystem.
 *
 * The timeout is not guaranteed, the actual wait time could be longer due to
 * system scheduling.
 *
 * @param event the Event structure to be filled in with the next event from the
 * queue, or nullptr.
 * @param timeoutDuration the duration to wait for the next available event,
 * with millisecond precision
 * @returns true if this got an event or false if the timeout elapsed without
 *          any events available.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PushEvent()
 * @sa WaitEvent()
 */
inline bool WaitEventTimeout(Event* event,
                             std::chrono::milliseconds timeoutDuration)
{
  return WaitEventTimeout(event, std::max(timeoutDuration.count(), 1l));
}
/**
 * Wait until the specified timeout (with milliseconds precision) for the next
 * available event.
 *
 * As this function may implicitly call PumpEvents(), you can only call this
 * function in the thread that initialized the video subsystem.
 *
 * The timeout is not guaranteed, the actual wait time could be longer due to
 * system scheduling.
 *
 * @param timeoutDuration the duration to wait for the next available event,
 * with millisecond precision.
 * @returns the Event if this got an event or std::nullopt if the timeout
 * elapsed without any events available.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent()
 * @sa PushEvent()
 * @sa WaitEvent()
 */
inline std::optional<Event> WaitEventTimeout(
  std::chrono::milliseconds timeoutDuration)
{
  if (Event event; WaitEventTimeout(&event, timeoutDuration)) return event;
  return std::nullopt;
}

/**
 * Add an event to the event queue.
 *
 * The event queue can actually be used as a two way communication channel.
 * Not only can events be read from the queue, but the user can also push
 * their own events onto it. `event` is a pointer to the event structure you
 * wish to push onto the queue. The event is copied into the queue, and the
 * caller may dispose of the memory pointed to after SDL_PushEvent() returns.
 *
 * Note: Pushing device input events onto the queue doesn't modify the state
 * of the device within SDL.
 *
 * Note: Events pushed onto the queue with SDL_PushEvent() get passed through
 * the event filter but events added with SDL_PeepEvents() do not.
 *
 * For pushing application-specific events, please use SDL_RegisterEvents() to
 * get an event type that does not conflict with other code that also wants
 * its own custom event types.
 *
 * @param event the SDL_Event to be added to the queue.
 * @returns true on success, false if the event was filtered or on failure;
 *          call GetError() for more information. A common reason for
 *          error is the event queue being full.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PeepEvents()
 * @sa PollEvent()
 * @sa RegisterEvents()
 */
inline bool PushEvent(Event* event) { return SDL_PushEvent(event); }

/**
 * Add an event to the event queue.
 *
 * The event queue can actually be used as a two way communication channel.
 * Not only can events be read from the queue, but the user can also push
 * their own events onto it. `event` is a pointer to the event structure you
 * wish to push onto the queue. The event is copied into the queue, and the
 * caller may dispose of the memory pointed to after SDL_PushEvent() returns.
 *
 * Note: Pushing device input events onto the queue doesn't modify the state
 * of the device within SDL.
 *
 * Note: Events pushed onto the queue with SDL_PushEvent() get passed through
 * the event filter but events added with SDL_PeepEvents() do not.
 *
 * For pushing application-specific events, please use SDL_RegisterEvents() to
 * get an event type that does not conflict with other code that also wants
 * its own custom event types.
 *
 * @param event the SDL_Event to be added to the queue.
 * @returns true on success, false if the event was filtered or on failure;
 *          call GetError() for more information. A common reason for
 *          error is the event queue being full.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PeepEvents()
 * @sa PollEvent()
 * @sa RegisterEvents()
 */
inline bool PushEvent(const Event& event)
{
  return PushEvent(const_cast<Event*>(&event));
}

/**
 * A function pointer used for callbacks that watch the event queue.
 *
 * @param userdata what was passed as `userdata` to SetEventFilter() or
 *                 AddEventWatch(), etc.
 * @param event the event that triggered the callback.
 * @returns true to permit event to be added to the queue, and false to
 *          disallow it. When used with AddEventWatch(), the return value is
 *          ignored.
 *
 * @threadsafety SDL may call this callback at any time from any thread; the
 *               application is responsible for locking resources the callback
 *               touches that need to be protected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @sa SetEventFilter()
 * @sa AddEventWatch()
 */
using EventFilter = SDL_EventFilter;

/**
 * A std::function used for callbacks that watch the event queue.
 *
 * @param event the event that triggered the callback.
 * @returns true to permit event to be added to the queue, and false to
 *          disallow it. When used with AddEventWatch(), the return value is
 *          ignored.
 *
 * @threadsafety SDL may call this callback at any time from any thread; the
 *               application is responsible for locking resources the callback
 *               touches that need to be protected.
 *
 * @since This datatype is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa SetEventFilter()
 * @sa AddEventWatch()
 * @sa EventFilter
 */
using EventFilterCB = std::function<bool(const Event&)>;

/**
 * Handle returned by AddEventWatch(EventFilterCB)
 *
 * This can be used later to remove the event filter
 * RemoveEventWatch(EventFilterHandle).
 */
class EventWatchHandle
{
  void* id;

public:
  /// @private
  constexpr explicit EventWatchHandle(void* id = nullptr)
    : id(id)
  {
  }

  /// Get Internal id
  constexpr void* get() const { return id; }

  /// True if has a valid id
  constexpr operator bool() const { return id != 0; }
};

/**
 * Set up a filter to process all events before they are added to the internal
 * event queue.
 *
 * If you just want to see events without modifying them or preventing them
 * from being queued, you should use SDL_AddEventWatch() instead.
 *
 * If the filter function returns true when called, then the event will be
 * added to the internal queue. If it returns false, then the event will be
 * dropped from the queue, but the internal state will still be updated. This
 * allows selective filtering of dynamically arriving events.
 *
 * **WARNING**: Be very careful of what you do in the event filter function,
 * as it may run in a different thread!
 *
 * On platforms that support it, if the quit event is generated by an
 * interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the
 * application at the next event poll.
 *
 * Note: Disabled events never make it to the event filter function; see
 * SDL_SetEventEnabled().
 *
 * Note: Events pushed onto the queue with SDL_PushEvent() get passed through
 * the event filter, but events pushed onto the queue with SDL_PeepEvents() do
 * not.
 *
 * @param filter an SDL_EventFilter function to call when an event happens.
 * @param userdata a pointer that is passed to `filter`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa AddEventWatch()
 * @sa SetEventEnabled()
 * @sa GetEventFilter()
 * @sa PeepEvents()
 * @sa PushEvent()
 */
inline void SetEventFilter(EventFilter filter, void* userdata)
{
  UniqueWrapper<EventFilterCB>::erase();
  return SDL_SetEventFilter(filter, userdata);
}

/**
 * Set up a filter to process all events before they are added to the internal
 * event queue.
 *
 * If you just want to see events without modifying them or preventing them
 * from being queued, you should use SDL_AddEventWatch() instead.
 *
 * If the filter function returns true when called, then the event will be
 * added to the internal queue. If it returns false, then the event will be
 * dropped from the queue, but the internal state will still be updated. This
 * allows selective filtering of dynamically arriving events.
 *
 * **WARNING**: Be very careful of what you do in the event filter function,
 * as it may run in a different thread!
 *
 * On platforms that support it, if the quit event is generated by an
 * interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the
 * application at the next event poll.
 *
 * Note: Disabled events never make it to the event filter function; see
 * SDL_SetEventEnabled().
 *
 * Note: Events pushed onto the queue with SDL_PushEvent() get passed through
 * the event filter, but events pushed onto the queue with SDL_PeepEvents() do
 * not.
 *
 * @param filter an EventFilterCB function to call when an event happens.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa AddEventWatch()
 * @sa SetEventEnabled()
 * @sa GetEventFilter()
 * @sa PeepEvents()
 * @sa PushEvent()
 */
inline void SetEventFilter(EventFilterCB filter = {})
{
  using Wrapper = UniqueWrapper<EventFilterCB>;
  SDL_SetEventFilter(
    [](void* userdata, SDL_Event* event) {
      return Wrapper::at(userdata)(*event);
    },
    Wrapper::Wrap(std::move(filter)));
}

/**
 * Query the current event filter.
 *
 * This function can be used to "chain" filters, by saving the existing filter
 * before replacing it with a function that will call that saved filter.
 *
 * @param filter the current callback function will be stored here.
 * @param userdata the pointer that is passed to the current event filter will
 *                 be stored here.
 * @returns true on success or false if there is no event filter set.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetEventFilter()
 */
inline bool GetEventFilter(EventFilter* filter, void** userdata)
{
  return SDL_GetEventFilter(filter, userdata);
}

/**
 * Query the current event filter.
 *
 * This function can be used to "chain" filters, by saving the existing filter
 * before replacing it with a function that will call that saved filter.
 *
 * @returns EventFilterCB on success or false if there is no event filter
 * set.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa SetEventFilter()
 */
inline EventFilterCB GetEventFilter()
{
  using Wrapper = UniqueWrapper<EventFilterCB>;

  EventFilter filter;
  void* userdata;
  if (!SDL_GetEventFilter(&filter, &userdata)) return {};
  if (auto cb = Wrapper::at(userdata)) return cb;
  return [filter, userdata](const Event& event) {
    return filter(userdata, const_cast<Event*>(&event));
  };
}

/// @private
inline bool EventWatchAuxCallback(void* userdata, Event* event)
{
  auto& f = *static_cast<EventFilterCB*>(userdata);
  return f(*event);
}

/**
 * Add a callback to be triggered when an event is added to the event queue.
 *
 * `filter` will be called when an event happens, and its return value is
 * ignored.
 *
 * **WARNING**: Be very careful of what you do in the event filter function,
 * as it may run in a different thread!
 *
 * If the quit event is generated by a signal (e.g. SIGINT), it will bypass
 * the internal queue and be delivered to the watch callback immediately, and
 * arrive at the next event poll.
 *
 * Note: the callback is called for events posted by the user through
 * PushEvent(), but not for disabled events, nor for events by a filter
 * callback set with SetEventFilter(), nor for events posted by the user
 * through PeepEvents().
 *
 * @param filter an EventFilter function to call when an event happens.
 * @param userdata a pointer that is passed to `filter`.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RemoveEventWatch()
 * @sa SetEventFilter()
 */
inline bool AddEventWatch(EventFilter filter, void* userdata)
{
  return SDL_AddEventWatch(filter, userdata);
}

/**
 * Add a callback to be triggered when an event is added to the event queue.
 *
 * `filter` will be called when an event happens, and its return value is
 * ignored.
 *
 * **WARNING**: Be very careful of what you do in the event filter function,
 * as it may run in a different thread!
 *
 * If the quit event is generated by a signal (e.g. SIGINT), it will bypass
 * the internal queue and be delivered to the watch callback immediately, and
 * arrive at the next event poll.
 *
 * Note: the callback is called for events posted by the user through
 * PushEvent(), but not for disabled events, nor for events by a filter
 * callback set with SetEventFilter(), nor for events posted by the user
 * through PeepEvents().
 *
 * @param filter an EventFilterCB to call when an event happens.
 * @returns a handle that can be used on RemoveEventWatch(EventFilterHandle) on
 * success or false on failure; call GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa RemoveEventWatch()
 * @sa SetEventFilter()
 */
inline EventWatchHandle AddEventWatch(EventFilterCB filter)
{
  using Wrapper = CallbackWrapper<EventFilterCB>;
  using Store = KeyValueWrapper<size_t, EventFilterCB*>;

  auto cb = Wrapper::Wrap(std::move(filter));
  if (!SDL_AddEventWatch(&EventWatchAuxCallback, &cb)) {
    delete cb;
    return EventWatchHandle{nullptr};
  }

  static std::atomic_size_t lastId = 0;
  size_t id = ++lastId;
  return EventWatchHandle{Store::Wrap(id, std::move(cb))};
}

/**
 * Remove an event watch callback added with SDL_AddEventWatch().
 *
 * This function takes the same input as SDL_AddEventWatch() to identify and
 * delete the corresponding callback.
 *
 * @param filter the function originally passed to SDL_AddEventWatch().
 * @param userdata the pointer originally passed to SDL_AddEventWatch().
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa AddEventWatch()
 */
inline void RemoveEventWatch(EventFilter filter, void* userdata)
{
  SDL_RemoveEventWatch(filter, userdata);
}

/**
 * Remove an event watch callback added with
 * SDL_AddEventWatch(EventFilterCB).
 *
 * @param handle the handle returned by SDL_AddEventWatch(EventFilterCB).
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat listener-callback
 *
 * @sa listener-callback
 * @sa AddEventWatch(EventFilterCB)
 */
inline void RemoveEventWatch(EventWatchHandle handle)
{
  using Store = KeyValueWrapper<size_t, EventFilterCB*>;
  delete Store::release(handle.get());
}

/**
 * Run a specific filter function on the current event queue, removing any
 * events for which the filter returns false.
 *
 * See SetEventFilter() for more information. Unlike SetEventFilter(), this
 * function does not change the filter permanently, it only uses the supplied
 * filter until this function returns.
 *
 * @param filter the EventFilter function to call when an event happens.
 * @param userdata a pointer that is passed to `filter`.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetEventFilter()
 * @sa SetEventFilter()
 */
inline void FilterEvents(EventFilter filter, void* userdata)
{
  SDL_FilterEvents(filter, userdata);
}

/**
 * Run a specific filter function on the current event queue, removing any
 * events for which the filter returns false.
 *
 * See SetEventFilter() for more information. Unlike SetEventFilter(), this
 * function does not change the filter permanently, it only uses the supplied
 * filter until this function returns.
 *
 * @param filter the EventFilter function to call when an event happens.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @cat immediate-callback
 *
 * @sa immediate-callback
 * @sa GetEventFilter()
 * @sa SetEventFilter()
 */
inline void FilterEvents(EventFilterCB filter)
{
  return FilterEvents(
    [](void* userdata, SDL_Event* event) {
      auto& f = *static_cast<EventFilterCB*>(userdata);
      return f(*event);
    },
    &filter);
}
/**
 * Set the state of processing events by type.
 *
 * @param type the type of event; see SDL_EventType for details.
 * @param enabled whether to process the event or not.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa EventEnabled()
 */
inline void SetEventEnabled(Uint32 type, bool enabled)
{
  return SDL_SetEventEnabled(type, enabled);
}

/**
 * Query the state of processing events by type.
 *
 * @param type the type of event; see SDL_EventType for details.
 * @returns true if the event is being processed, false otherwise.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa SetEventEnabled()
 */
inline bool EventEnabled(Uint32 type) { return SDL_EventEnabled(type); }

/**
 * Allocate a set of user-defined events, and return the beginning event
 * number for that set of events.
 *
 * @param numevents the number of events to be allocated.
 * @returns the beginning event number, or 0 if numevents is invalid or if
 *          there are not enough user-defined events left.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PushEvent()
 */
inline Uint32 RegisterEvents(int numevents)
{
  return SDL_RegisterEvents(numevents);
}

/**
 * Get window associated with an event.
 *
 * @param event an event containing a `windowID`.
 * @returns the associated window on success or nullptr if there is none.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PollEvent
 * @sa WaitEvent
 * @sa WaitEventTimeout
 */
inline WindowRef GetWindowFromEvent(const Event& event)
{
  return SDL_GetWindowFromEvent(&event);
}

/// @}

/**
 *
 * @defgroup CategoryKeyboard Keyboard Support
 *
 * SDL keyboard management.
 *
 * Please refer to the Best Keyboard Practices document for details on how
 * best to accept keyboard input in various types of programs:
 *
 * https://wiki.libsdl.org/SDL3/BestKeyboardPractices
 *
 * @{
 */

/**
 * This is a unique ID for a keyboard for the time it is connected to the
 * system, and is never reused for the lifetime of the application.
 *
 * If the keyboard is disconnected and reconnected, it will get a new ID.
 *
 * The value 0 is an invalid ID.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using KeyboardID = SDL_KeyboardID;

/**
 * Return whether a keyboard is currently connected.
 *
 * @returns true if a keyboard is connected, false otherwise.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetKeyboards
 */
inline bool HasKeyboard() { return SDL_HasKeyboard(); }

/**
 * Get a list of currently connected keyboards.
 *
 * Note that this will include any device or virtual driver that includes
 * keyboard functionality, including some mice, KVM switches, motherboard
 * power buttons, etc. You should wait for input from a device before you
 * consider it actively in use.
 *
 * @param count a pointer filled in with the number of keyboards returned, may
 *              be nullptr.
 * @returns a 0 terminated array of keyboards instance IDs or nullptr on
 * failure; call GetError() for more information. This should be freed with
 * free() when it is no longer needed.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetKeyboardNameForID
 * @sa HasKeyboard
 */
inline KeyboardID* GetKeyboards(int* count) { return SDL_GetKeyboards(count); }

/**
 * Get the name of a keyboard.
 *
 * This function returns "" if the keyboard doesn't have a name.
 *
 * @param instance_id the keyboard instance ID.
 * @returns the name of the selected keyboard or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetKeyboards
 */
inline const char* GetKeyboardNameForID(KeyboardID instance_id)
{
  return SDL_GetKeyboardNameForID(instance_id);
}

/**
 * Query the window which currently has keyboard focus.
 *
 * @returns the window with keyboard focus.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline WindowRef GetKeyboardFocus() { return SDL_GetKeyboardFocus(); }

/**
 * Get a snapshot of the current state of the keyboard.
 *
 * The pointer returned is a pointer to an internal SDL array. It will be
 * valid for the whole lifetime of the application and should not be freed by
 * the caller.
 *
 * A array element with a value of true means that the key is pressed and a
 * value of false means that it is not. Indexes into this array are obtained
 * by using Scancode values.
 *
 * Use PumpEvents() to update the state array.
 *
 * This function gives you the current state after all events have been
 * processed, so if a key or button has been pressed and released before you
 * process events, then the pressed state will never show up in the
 * GetKeyboardState() calls.
 *
 * Note: This function doesn't take into account whether shift has been
 * pressed or not.
 *
 * @param numkeys if non-nullptr, receives the length of the returned array.
 * @returns a pointer to an array of key states.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa PumpEvents
 * @sa ResetKeyboard
 */
inline const bool* GetKeyboardState(int* numkeys = nullptr)
{
  return SDL_GetKeyboardState(numkeys);
}

/**
 * Clear the state of the keyboard.
 *
 * This function will generate key up events for all pressed keys.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetKeyboardState
 */
inline void ResetKeyboard() { SDL_ResetKeyboard(); }

/**
 * Get the current key modifier state for the keyboard.
 *
 * @returns an OR'd combination of the modifier keys for the keyboard. See
 *          Keymod for details.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetKeyboardState
 * @sa SetModState
 */
inline Keymod GetModState() { return SDL_GetModState(); }

/**
 * Set the current key modifier state for the keyboard.
 *
 * The inverse of GetModState(), SetModState() allows you to impose
 * modifier key states on your application. Simply pass your desired modifier
 * states into `modstate`. This value may be a bitwise, OR'd combination of
 * Keymod values.
 *
 * This does not change the keyboard state, only the key modifier flags that
 * SDL reports.
 *
 * @param modstate the desired Keymod for the keyboard.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetModState
 */
inline void SetModState(Keymod modstate) { SDL_SetModState(modstate); }

/**
 * Get the key code corresponding to the given scancode according to the
 * current keyboard layout.
 *
 * If you want to get the keycode as it would be delivered in key events,
 * including options specified in SDL_HINT_KEYCODE_OPTIONS, then you should
 * pass `key_event` as true. Otherwise this function simply translates the
 * scancode based on the given modifier state.
 *
 * @param scancode the desired Scancode to query.
 * @param modstate the modifier state to use when translating the scancode to
 *                 a keycode.
 * @param key_event true if the keycode will be used in key events.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Keycode::GetName
 * @sa Keycode::GetScancode
 */
inline Keycode::Keycode(Scancode scancode, Keymod modstate, bool key_event)
  : Keycode(SDL_GetKeyFromScancode(scancode, modstate, key_event))
{
}

/**
 * Get a key code from a human-readable name.
 *
 * @param name the human-readable key name.
 * @post a valid key code, or `SDLK_UNKNOWN` if the name wasn't recognized; call
 *          GetError() for more information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Keycode::Keycode
 * @sa Keycode::GetName
 * @sa Scancode::Scancode
 */
inline Keycode::Keycode(StringParam name)
  : Keycode(SDL_GetKeyFromName(name))
{
}
/**
 * Get the scancode corresponding to the given key code according to the
 * current keyboard layout.
 *
 * Note that there may be multiple scancode+modifier states that can generate
 * this keycode, this will just return the first one found.
 *
 * @param modstate a pointer to the modifier state that would be used when the
 *                 scancode generates this key, may be nullptr.
 * @returns the Scancode that corresponds to the given Keycode.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Keycode::Keycode
 * @sa Scancode::GetName
 */
inline Scancode Keycode::GetScancode(Keymod* modstate) const
{
  return SDL_GetScancodeFromKey(m_keycode, modstate);
}

/**
 * Set a human-readable name for a scancode.
 *
 * @param name the name to use for the scancode, encoded as UTF-8. The string
 *             is not copied, so the pointer given to this function must stay
 *             valid while SDL is being used.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Scancode::GetName
 */
inline bool Scancode::SetName(StringParam name)
{
  return SDL_SetScancodeName(m_scancode, name);
}

/**
 * Get a human-readable name for a scancode.
 *
 * **Warning**: The returned name is by design not stable across platforms,
 * e.g. the name for `SCANCODE_LGUI` is "Left GUI" under Linux but "Left
 * Windows" under Microsoft Windows, and some scancodes like
 * `SCANCODE_NONUSBACKSLASH` don't have any name at all. There are even
 * scancodes that share names, e.g. `SCANCODE_RETURN` and
 * `SCANCODE_RETURN2` (both called "Return"). This function is therefore
 * unsuitable for creating a stable cross-platform two-way mapping between
 * strings and scancodes.
 *
 * @returns a pointer to the name for the scancode. If the scancode doesn't
 *          have a name this function returns an empty string ("").
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Keycode::GetScancode
 * @sa GetScancodeFromName
 * @sa Scancode::SetName
 */
inline const char* Scancode::GetName() const
{
  return SDL_GetScancodeName(m_scancode);
}

/**
 * Get a scancode from a human-readable name.
 *
 * @param name the human-readable scancode name.
 * @post the Scancode, or `SCANCODE_UNKNOWN` if the name wasn't
 *          recognized; call GetError() for more information.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Keycode::Keycode
 * @sa Keycode::GetScancode
 * @sa Scancode::GetName
 */
inline Scancode::Scancode(StringParam name)
  : Scancode(SDL_GetScancodeFromName(name))
{
}

/**
 * Get a human-readable name for a key.
 *
 * If the key doesn't have a name, this function returns an empty string ("").
 *
 * Letters will be presented in their uppercase form, if applicable.
 *
 * @returns a UTF-8 encoded string of the key name.
 *
 * @threadsafety This function is not thread safe.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa Keycode::Keycode
 * @sa Keycode::Keycode
 * @sa Keycode::GetScancode
 */
inline const char* Keycode::GetName() const
{
  return SDL_GetKeyName(m_keycode);
}

/**
 * Start accepting Unicode text input events in a window.
 *
 * This function will enable text input (EVENT_TEXT_INPUT and
 * EVENT_TEXT_EDITING events) in the specified window. Please use this
 * function paired with WindowBase.StopTextInput().
 *
 * Text input events are not received by default.
 *
 * On some platforms using this function shows the screen keyboard and/or
 * activates an IME, which can prevent some key press events from being passed
 * through.
 *
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.SetTextInputArea
 * @sa WindowBase.StartTextInput
 * @sa WindowBase.StopTextInput
 * @sa WindowBase.IsTextInputActive
 */
inline bool WindowBase::StartTextInput() { return SDL_StartTextInput(get()); }

/**
 * Start accepting Unicode text input events in a window, with properties
 * describing the input.
 *
 * This function will enable text input (EVENT_TEXT_INPUT and
 * EVENT_TEXT_EDITING events) in the specified window. Please use this
 * function paired with WindowBase.StopTextInput().
 *
 * Text input events are not received by default.
 *
 * On some platforms using this function shows the screen keyboard and/or
 * activates an IME, which can prevent some key press events from being passed
 * through.
 *
 * These are the supported properties:
 *
 * - `prop::TextInput.TYPE_NUMBER` - an TextInputType value that
 *   describes text being input, defaults to TEXTINPUT_TYPE_TEXT.
 * - `prop::TextInput.CAPITALIZATION_NUMBER` - an Capitalization value
 *   that describes how text should be capitalized, defaults to
 *   CAPITALIZE_SENTENCES for normal text entry, CAPITALIZE_WORDS for
 *   TEXTINPUT_TYPE_TEXT_NAME, and CAPITALIZE_NONE for e-mail
 *   addresses, usernames, and passwords.
 * - `prop::TextInput.AUTOCORRECT_BOOLEAN` - true to enable auto completion
 *   and auto correction, defaults to true.
 * - `prop::TextInput.MULTILINE_BOOLEAN` - true if multiple lines of text
 *   are allowed. This defaults to true if SDL_HINT_RETURN_KEY_HIDES_IME is
 *   "0" or is not set, and defaults to false if SDL_HINT_RETURN_KEY_HIDES_IME
 *   is "1".
 *
 * On Android you can directly specify the input type:
 *
 * - `prop::TextInput.ANDROID_INPUTTYPE_NUMBER` - the text input type to
 *   use, overriding other properties. This is documented at
 *   https://developer.android.com/reference/android/text/InputType
 *
 * @param props the properties to use.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.SetTextInputArea
 * @sa WindowBase.StartTextInput
 * @sa WindowBase.StopTextInput
 * @sa WindowBase.IsTextInputActive
 */
inline bool WindowBase::StartTextInput(PropertiesBase& props)
{
  return SDL_StartTextInputWithProperties(get(), props.get());
}

/**
 * Text input type.
 *
 * These are the valid values for SDL_PROP_TEXTINPUT_TYPE_NUMBER. Not every
 * value is valid on every platform, but where a value isn't supported, a
 * reasonable fallback will be used.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa StartTextInputWithProperties
 */
using TextInputType = SDL_TextInputType;

/**
 * The input is text.
 */
constexpr TextInputType TEXTINPUT_TYPE_TEXT = SDL_TEXTINPUT_TYPE_TEXT;

/**
 * The input is a person's name.
 */
constexpr TextInputType TEXTINPUT_TYPE_TEXT_NAME = SDL_TEXTINPUT_TYPE_TEXT_NAME;

/**
 * The input is an e-mail address.
 */
constexpr TextInputType TEXTINPUT_TYPE_TEXT_EMAIL =
  SDL_TEXTINPUT_TYPE_TEXT_EMAIL;

/**
 * The input is a username.
 */
constexpr TextInputType TEXTINPUT_TYPE_TEXT_USERNAME =
  SDL_TEXTINPUT_TYPE_TEXT_USERNAME;

/**
 * The input is a secure password that is hidden.
 */
constexpr TextInputType TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN =
  SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN;

/**
 * The input is a secure password that is visible.
 */
constexpr TextInputType TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE =
  SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE;

/**
 * The input is a number.
 */
constexpr TextInputType TEXTINPUT_TYPE_NUMBER = SDL_TEXTINPUT_TYPE_NUMBER;

/**
 * The input is a secure PIN that is hidden.
 */
constexpr TextInputType TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN =
  SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN;

/**
 * The input is a secure PIN that is visible.
 */
constexpr TextInputType TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE =
  SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE;

/**
 * Auto capitalization type.
 *
 * These are the valid values for SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER.
 * Not every value is valid on every platform, but where a value isn't
 * supported, a reasonable fallback will be used.
 *
 * @since This enum is available since SDL 3.2.0.
 *
 * @sa StartTextInputWithProperties
 */
using Capitalization = SDL_Capitalization;

/**
 * No auto-capitalization will be done.
 */
constexpr Capitalization CAPITALIZE_NONE = SDL_CAPITALIZE_NONE;

/**
 * The first letter of sentences will be capitalized.
 */
constexpr Capitalization CAPITALIZE_SENTENCES = SDL_CAPITALIZE_SENTENCES;

/**
 * The first letter of words will be capitalized.
 */
constexpr Capitalization CAPITALIZE_WORDS = SDL_CAPITALIZE_WORDS;

/**
 * All letters will be capitalized.
 */
constexpr Capitalization CAPITALIZE_LETTERS = SDL_CAPITALIZE_LETTERS;

namespace prop::TextInput {

constexpr auto TYPE_NUMBER = SDL_PROP_TEXTINPUT_TYPE_NUMBER;

constexpr auto CAPITALIZATION_NUMBER = SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER;

constexpr auto AUTOCORRECT_BOOLEAN = SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN;

constexpr auto MULTILINE_BOOLEAN = SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN;

constexpr auto ANDROID_INPUTTYPE_NUMBER =
  SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER;

} // namespace prop::TextInput

/**
 * Check whether or not Unicode text input events are enabled for a window.
 *
 * @returns true if text input events are enabled else false.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.StartTextInput
 */
inline bool WindowBase::IsTextInputActive() const
{
  return SDL_TextInputActive(get());
}

/**
 * Stop receiving any text input events in a window.
 *
 * If WindowBase.StartTextInput() showed the screen keyboard, this function will
 * hide it.
 *
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.StartTextInput
 */
inline bool WindowBase::StopTextInput() { return SDL_StopTextInput(get()); }

/**
 * Dismiss the composition window/IME without disabling the subsystem.
 *
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.StartTextInput
 * @sa WindowBase.StopTextInput
 */
inline bool WindowBase::ClearComposition()
{
  return SDL_ClearComposition(get());
}

/**
 * Set the area used to type Unicode text input.
 *
 * Native input methods may place a window with word suggestions near the
 * cursor, without covering the text being entered.
 *
 * @param rect the Rect representing the text input area, in window
 *             coordinates, or nullptr to clear it.
 * @param cursor the offset of the current cursor location relative to
 *               `rect->x`, in window coordinates.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.GetTextInputArea
 * @sa WindowBase.StartTextInput
 */
inline bool WindowBase::SetTextInputArea(const SDL_Rect& rect, int cursor)
{
  return SDL_SetTextInputArea(get(), &rect, cursor);
}

/**
 * Get the area used to type Unicode text input.
 *
 * This returns the values previously set by WindowBase.SetTextInputArea().
 *
 * @param rect a pointer to an Rect filled in with the text input area,
 *             may be nullptr.
 * @param cursor a pointer to the offset of the current cursor location
 *               relative to `rect->x`, may be nullptr.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.SetTextInputArea
 */
inline bool WindowBase::GetTextInputArea(Rect* rect, int* cursor)
{
  return SDL_GetTextInputArea(get(), rect, cursor);
}

/**
 * Check whether the platform has screen keyboard support.
 *
 * @returns true if the platform has some screen keyboard support or false if
 *          not.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa WindowBase.StartTextInput
 * @sa ScreenKeyboardShown
 */
inline bool HasScreenKeyboardSupport()
{
  return SDL_HasScreenKeyboardSupport();
}

/**
 * Check whether the screen keyboard is shown for given window.
 *
 * @returns true if screen keyboard is shown or false if not.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa HasScreenKeyboardSupport
 */
inline bool WindowBase::IsScreenKeyboardShown() const
{
  return SDL_ScreenKeyboardShown(get());
}

/// @}

/**
 *
 * @defgroup CategoryMessagebox Message Boxes
 *
 * SDL offers a simple message box API, which is useful for simple alerts,
 * such as informing the user when something fatal happens at startup without
 * the need to build a UI for it (or informing the user _before_ your UI is
 * ready).
 *
 * These message boxes are native system dialogs where possible.
 *
 * There is both a customizable function (ShowMessageBox()) that offers
 * lots of options for what to display and reports on what choice the user
 * made, and also a much-simplified version (ShowSimpleMessageBox()),
 * merely takes a text message and title, and waits until the user presses a
 * single "OK" UI button. Often, this is all that is necessary.
 *
 * @{
 */

/**
 * @name MessageBoxFlags
 * @{
 */

/**
 * Message box flags.
 *
 * If supported will display warning icon, etc.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using MessageBoxFlags = Uint32;

constexpr MessageBoxFlags MESSAGEBOX_ERROR =
  SDL_MESSAGEBOX_ERROR; ///< error dialog

/**
 * warning dialog
 */
constexpr MessageBoxFlags MESSAGEBOX_WARNING = SDL_MESSAGEBOX_WARNING;

/**
 * informational dialog
 */
constexpr MessageBoxFlags MESSAGEBOX_INFORMATION = SDL_MESSAGEBOX_INFORMATION;

/**
 * buttons placed left to right
 */
constexpr MessageBoxFlags MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT =
  SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT;

/**
 * buttons placed right to left
 */
constexpr MessageBoxFlags MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT =
  SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT;

/// @}

/**
 * @name MessageBoxButtonFlags
 * @{
 */

/**
 * MessageBoxButtonData flags.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using MessageBoxButtonFlags = Uint32;

/**
 * Marks the default button when return is hit
 */
constexpr MessageBoxButtonFlags MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT =
  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT;

/**
 * Marks the default button when escape is hit
 */
constexpr MessageBoxButtonFlags MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT =
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT;

/// @}

/**
 * Individual button data.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MessageBoxButtonData = SDL_MessageBoxButtonData;

/**
 * RGB value used in a message box color scheme
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MessageBoxColor = SDL_MessageBoxColor;

/**
 * @name MessageBoxColorTypes
 * @{
 */

/**
 * An enumeration of indices inside the colors array of
 * MessageBoxColorScheme.
 */
using MessageBoxColorType = SDL_MessageBoxColorType;

constexpr MessageBoxColorType MESSAGEBOX_COLOR_BACKGROUND =
  SDL_MESSAGEBOX_COLOR_BACKGROUND; ///< BACKGROUND

constexpr MessageBoxColorType MESSAGEBOX_COLOR_TEXT =
  SDL_MESSAGEBOX_COLOR_TEXT; ///< TEXT

constexpr MessageBoxColorType MESSAGEBOX_COLOR_BUTTON_BORDER =
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER; ///< BUTTON_BORDER

constexpr MessageBoxColorType MESSAGEBOX_COLOR_BUTTON_BACKGROUND =
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND; ///< BUTTON_BACKGROUND

constexpr MessageBoxColorType MESSAGEBOX_COLOR_BUTTON_SELECTED =
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED; ///< BUTTON_SELECTED

/**
 * Count
 */
constexpr MessageBoxColorType MESSAGEBOX_COLOR_COUNT =
  SDL_MESSAGEBOX_COLOR_COUNT;

/// @}

/**
 * A set of colors to use for message box dialogs
 *
 * @since This struct is available since SDL 3.2.0.
 */
using MessageBoxColorScheme = SDL_MessageBoxColorScheme;

/**
 * MessageBox structure containing title, text, window, etc.
 *
 * @since This struct is available since SDL 3.2.0.
 */
struct MessageBox : SDL_MessageBoxData
{
  /**
   * Wraps MessageBox.
   *
   * @param messageBox the value to be wrapped
   */
  constexpr MessageBox(const SDL_MessageBoxData& messageBox = {})
    : SDL_MessageBoxData{messageBox}
  {
  }

  /**
   * Constructs from its fields.
   *
   * @param flags the value for flags.
   * @param window the value for window.
   * @param title the value for title.
   * @param message the value for message.
   * @param buttons the value for buttons.
   * @param colorScheme the value for colorScheme.
   */
  constexpr MessageBox(MessageBoxFlags flags,
                       OptionalWindow window,
                       const char* title,
                       const char* message,
                       std::span<const MessageBoxButtonData> buttons,
                       OptionalRef<const MessageBoxColorScheme> colorScheme)
    : SDL_MessageBoxData{flags,
                         window.get(),
                         title,
                         message,
                         int(buttons.size()),
                         buttons.data(),
                         colorScheme}
  {
  }

  /**
   * Create a modal message box.
   *
   * If your needs aren't complex, it might be easier to use
   * ShowSimpleMessageBox.
   *
   * This function should be called on the thread that created the parent
   * window, or on the main thread if the messagebox has no parent. It will
   * block execution of that thread until the user clicks a button or closes the
   * messagebox.
   *
   * This function may be called at any time, even before InitSubSystem(). This
   * makes it useful for reporting errors like a failure to create a renderer or
   * OpenGL context.
   *
   * On X11, SDL rolls its own dialog box with X11 primitives instead of a
   * formal toolkit like GTK+ or Qt.
   *
   * Note that if InitSubSystem() would fail because there isn't any available
   * video target, this function is likely to fail for the same reasons. If this
   * is a concern, check the return value from this function and fall back to
   * writing to stderr if you can.
   *
   * @param buttonid the pointer to which user id of hit button should be
   *                 copied.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa ShowSimpleMessageBox
   */
  bool Show(int* buttonid) const { return SDL_ShowMessageBox(this, buttonid); }

  /**
   * Get the flags.
   *
   * @returns current flags value.
   */
  constexpr SDL_MessageBoxFlags GetFlags() const { return flags; }

  /**
   * Set the flags.
   *
   * @param newFlags the new flags value.
   * @returns Reference to self.
   */
  constexpr MessageBox& SetFlags(SDL_MessageBoxFlags newFlags)
  {
    flags = newFlags;
    return *this;
  }

  /**
   * Get the window.
   *
   * @returns current window value.
   */
  constexpr WindowRef GetWindow() const { return window; }

  /**
   * Set the window.
   *
   * @param newWindow the new window value.
   * @returns Reference to self.
   */
  constexpr MessageBox& SetWindow(WindowRef newWindow)
  {
    window = newWindow.get();
    return *this;
  }

  /**
   * Get the title.
   *
   * @returns current title value.
   */
  constexpr const char* GetTitle() const { return title; }

  /**
   * Set the title.
   *
   * @param newTitle the new title value.
   * @returns Reference to self.
   */
  constexpr MessageBox& SetTitle(const char* newTitle)
  {
    title = newTitle;
    return *this;
  }

  /**
   * Get the message.
   *
   * @returns current message value.
   */
  constexpr const char* GetMessage() const { return message; }

  /**
   * Set the message.
   *
   * @param newMessage the new message value.
   * @returns Reference to self.
   */
  constexpr MessageBox& SetMessage(const char* newMessage)
  {
    message = newMessage;
    return *this;
  }

  /**
   * Get the buttons.
   *
   * @returns current buttons value.
   */
  constexpr std::span<const MessageBoxButtonData> GetButtons() const
  {
    if (numbuttons == 0) return {};
    return std::span(buttons, size_t(numbuttons));
  }

  /**
   * Set the buttons.
   *
   * @param newButtons the new buttons value.
   * @returns Reference to self.
   */
  constexpr MessageBox& SetButtons(
    std::span<const MessageBoxButtonData> newButtons)
  {
    if (newButtons.empty()) {
      numbuttons = 0;
      buttons = nullptr;
    } else {
      numbuttons = newButtons.size();
      buttons = newButtons.data();
    }
    return *this;
  }

  /**
   * Get the colorScheme.
   *
   * @returns current colorScheme value.
   */
  constexpr const MessageBoxColorScheme* GetColorScheme() const
  {
    return colorScheme;
  }

  /**
   * Set the colorScheme.
   *
   * @param newColorScheme the new colorScheme value.
   * @returns Reference to self.
   */
  constexpr MessageBox& SetColorScheme(
    OptionalRef<const MessageBoxColorScheme> newColorScheme)
  {
    colorScheme = newColorScheme;
    return *this;
  }
};

/**
 * Display a simple modal message box.
 *
 * If your needs aren't complex, this function is preferred over
 * MessageBox.Show.
 *
 * `flags` may be any of the following:
 *
 * - `MESSAGEBOX_ERROR`: error dialog
 * - `MESSAGEBOX_WARNING`: warning dialog
 * - `MESSAGEBOX_INFORMATION`: informational dialog
 *
 * This function should be called on the thread that created the parent
 * window, or on the main thread if the messagebox has no parent. It will
 * block execution of that thread until the user clicks a button or closes the
 * messagebox.
 *
 * This function may be called at any time, even before InitSubSystem(). This
 * makes it useful for reporting errors like a failure to create a renderer or
 * OpenGL context.
 *
 * On X11, SDL rolls its own dialog box with X11 primitives instead of a
 * formal toolkit like GTK+ or Qt.
 *
 * Note that if InitSubSystem() would fail because there isn't any available
 * video target, this function is likely to fail for the same reasons. If this
 * is a concern, check the return value from this function and fall back to
 * writing to stderr if you can.
 *
 * @param flags an MessageBoxFlags value.
 * @param title UTF-8 title text.
 * @param message UTF-8 message text.
 * @param window the parent window, or nullptr for no parent.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa MessageBox.Show
 */
inline bool ShowSimpleMessageBox(MessageBoxFlags flags,
                                 StringParam title,
                                 StringParam message,
                                 OptionalWindow window)
{
  return SDL_ShowSimpleMessageBox(flags, title, message, window.get());
}

/// @}

/**
 * @defgroup CategoryRender 2D Accelerated Rendering
 *
 * Header file for SDL 2D rendering functions.
 *
 * This API supports the following features:
 *
 * - single pixel points
 * - single pixel lines
 * - filled rectangles
 * - texture images
 * - 2D polygons
 *
 * The primitives may be drawn in opaque, blended, or additive modes.
 *
 * The texture images may be drawn in opaque, blended, or additive modes. They
 * can have an additional color tint or alpha modulation applied to them, and
 * may also be stretched with linear interpolation.
 *
 * This API is designed to accelerate simple 2D operations. You may want more
 * functionality such as polygons and particle effects and in that case you
 * should use SDL's OpenGL/Direct3D support, the SDL3 GPU API, or one of the
 * many good 3D engines.
 *
 * These functions must be called from the main thread. See this bug for
 * details: https://github.com/libsdl-org/SDL/issues/986
 *
 * @{
 */

// Forward decl
struct TextureLock;

// Forward decl
struct RendererBase;

// Forward decl
struct RendererRef;

// Forward decl
struct Renderer;

// Forward decl
struct TextureBase;

// Forward decl
struct TextureRef;

// Forward decl
struct Texture;

/**
 * A texture parameter that might own its value.
 *
 * This is designed to be used on parameter's type and accepts that accepts a
 * std::nullopt, a non-owned TextureRef or an owned Texture
 */
using OptionalTexture = OptionalResource<TextureRef, Texture>;

#ifdef SDL3PP_DOC

/**
 * The name of the software renderer.
 *
 * @since This macro is available since SDL 3.2.0.
 */
#define SDL_SOFTWARE_RENDERER "software"

#endif // SDL3PP_DOC

/**
 * Vertex structure.
 *
 * @since This struct is available since SDL 3.2.0.
 */
using Vertex = SDL_Vertex;

/**
 * The access pattern allowed for a texture.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using TextureAccess = SDL_TextureAccess;

constexpr TextureAccess TEXTUREACCESS_STATIC =
  SDL_TEXTUREACCESS_STATIC; ///< Changes rarely, not lockable.

constexpr TextureAccess TEXTUREACCESS_STREAMING =
  SDL_TEXTUREACCESS_STREAMING; ///< Changes frequently, lockable.

constexpr TextureAccess TEXTUREACCESS_TARGET =
  SDL_TEXTUREACCESS_TARGET; ///< Texture can be used as a render target.

/**
 * How the logical size is mapped to the output.
 *
 * @since This enum is available since SDL 3.2.0.
 */
using RendererLogicalPresentation = SDL_RendererLogicalPresentation;

constexpr RendererLogicalPresentation LOGICAL_PRESENTATION_DISABLED =
  SDL_LOGICAL_PRESENTATION_DISABLED; ///< There is no logical size in effect.

/**
 * The rendered content is stretched to the output resolution.
 */
constexpr RendererLogicalPresentation LOGICAL_PRESENTATION_STRETCH =
  SDL_LOGICAL_PRESENTATION_STRETCH;

/**
 * The rendered content is fit to the largest dimension and the other dimension
 * is letterboxed with black bars.
 */
constexpr RendererLogicalPresentation LOGICAL_PRESENTATION_LETTERBOX =
  SDL_LOGICAL_PRESENTATION_LETTERBOX;

/**
 * The rendered content is fit to the smallest dimension and the other dimension
 * extends beyond the output bounds.
 */
constexpr RendererLogicalPresentation LOGICAL_PRESENTATION_OVERSCAN =
  SDL_LOGICAL_PRESENTATION_OVERSCAN;

/**
 * The rendered content is scaled up by integer multiples to fit the output
 * resolution.
 */
constexpr RendererLogicalPresentation LOGICAL_PRESENTATION_INTEGER_SCALE =
  SDL_LOGICAL_PRESENTATION_INTEGER_SCALE;

/**
 * A structure representing rendering state
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @cat resource
 *
 * @sa Renderer
 * @sa RendererRef
 */
struct RendererBase : Resource<SDL_Renderer*>
{
  using Resource::Resource;

  /**
   * Create a 2D rendering context for a window.
   *
   * By default the rendering size matches the window size in pixels, but you
   * can call SDL_SetRenderLogicalPresentation() to change the content size and
   * scaling options.
   *
   * It renderer creation fails for any reason this object is falsy; call
   * GetError() for more information.
   *
   * @param window the window where rendering is displayed.
   *
   * @threadsafety This function should only be called on the main thread.
   */
  RendererBase(WindowRef window)
    : Resource(SDL_CreateRenderer(window.get(), nullptr))
  {
  }

  /**
   * Create a 2D rendering context for a window.
   *
   * If you want a specific renderer, you can specify its name here. A list of
   * available renderers can be obtained by calling GetRenderDriver()
   * multiple times, with indices from 0 to GetNumRenderDrivers()-1. If you
   * don't need a specific renderer, specify nullptr and SDL will attempt to
   * choose the best option for you, based on what is available on the user's
   * system.
   *
   * If `name` is a comma-separated list, SDL will try each name, in the order
   * listed, until one succeeds or all of them fail.
   *
   * By default the rendering size matches the window size in pixels, but you
   * can call RendererBase.SetLogicalPresentation() to change the content size
   * and scaling options.
   *
   * It renderer creation fails for any reason this object is falsy; call
   * GetError() for more information.
   *
   * @param window the window where rendering is displayed.
   * @param name the name of the rendering driver to initialize, or nullptr to
   *             let SDL choose one.
   * @post a valid rendering context or nullptr if there was an error; call
   *       GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetNumRenderDrivers
   * @sa GetRenderDriver
   * @sa RendererBase.GetName
   */
  RendererBase(WindowBase& window, StringParam name)
    : Resource(SDL_CreateRenderer(window.get(), name))
  {
  }

  /**
   * Create a 2D rendering context for a window, with the specified properties.
   *
   * These are the supported properties:
   *
   * - `prop::Renderer.CREATE_NAME_STRING`: the name of the rendering driver
   *   to use, if a specific one is desired
   * - `prop::Renderer.CREATE_WINDOW_POINTER`: the window where rendering is
   *   displayed, required if this isn't a software renderer using a surface
   * - `prop::Renderer.CREATE_SURFACE_POINTER`: the surface where rendering
   *   is displayed, if you want a software renderer without a window
   * - `prop::Renderer.CREATE_OUTPUT_COLORSPACE_NUMBER`: an Colorspace
   *   value describing the colorspace for output to the display, defaults to
   *   COLORSPACE_SRGB. The direct3d11, direct3d12, and metal renderers
   *   support COLORSPACE_SRGB_LINEAR, which is a linear color space and
   *   supports HDR output. If you select COLORSPACE_SRGB_LINEAR, drawing
   *   still uses the sRGB colorspace, but values can go beyond 1.0 and float
   *   (linear) format textures can be used for HDR content.
   * - `prop::Renderer.CREATE_PRESENT_VSYNC_NUMBER`: non-zero if you want
   *   present synchronized with the refresh rate. This property can take any
   *   value that is supported by RendererBase.SetVSync() for the renderer.
   *
   * With the vulkan renderer:
   *
   * - `prop::Renderer.CREATE_VULKAN_INSTANCE_POINTER`: the VkInstance to use
   *   with the renderer, optional.
   * - `prop::Renderer.CREATE_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR to use
   *   with the renderer, optional.
   * - `prop::Renderer.CREATE_VULKAN_PHYSICAL_DEVICE_POINTER`: the
   *   VkPhysicalDevice to use with the renderer, optional.
   * - `prop::Renderer.CREATE_VULKAN_DEVICE_POINTER`: the VkDevice to use
   *   with the renderer, optional.
   * - `prop::Renderer.CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the
   *   queue family index used for rendering.
   * - `prop::Renderer.CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the
   *   queue family index used for presentation.
   *
   * It renderer creation fails for any reason this object is falsy; call
   * GetError() for more information.
   *
   * @param props the properties to use.
   * @post a valid rendering context or nullptr if there was an error; call
   *       GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Properties.Properties
   * @sa RendererBase.GetName
   */
  RendererBase(PropertiesBase& props)
    : Resource(SDL_CreateRendererWithProperties(props.get()))
  {
  }

  /**
   * Create a 2D software rendering context for a surface.
   *
   * Two other API which can be used to create RendererBase:
   * RendererBase.RendererBase() and CreateWindowAndRenderer(). These can _also_
   * create a software renderer, but they are intended to be used with an
   * WindowBase as the final destination and not an SurfaceBase.
   *
   * It renderer creation fails for any reason this object is falsy; call
   * GetError() for more information.
   *
   * @param surface the SDL_Surface structure representing the surface where
   *                rendering is done.
   * @post a valid rendering context or nullptr if there was an error; call
   *       GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  RendererBase(SurfaceBase& surface)
    : Resource(SDL_CreateSoftwareRenderer(surface.get()))
  {
  }

  /**
   * Get the window associated with a renderer.
   *
   * @returns the window on success or nullptr on failure; call GetError() for
   *          more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  WindowRef GetWindow() { return SDL_GetRenderWindow(get()); }

  /**
   * Get the name of a renderer.
   *
   * @returns the name of the selected renderer, or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   */
  const char* GetName() const { return SDL_GetRendererName(get()); }

  /**
   * Get the output size in pixels of a rendering context.
   *
   * This returns the true output size in pixels, ignoring any render targets or
   * logical size and presentation.
   *
   * @returns Point on success or std::nullopt on failure; call GetError() for
   *          more information.
   */
  std::optional<Point> GetOutputSize() const
  {
    if (Point p; GetOutputSize(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the output size in pixels of a rendering context.
   *
   * This returns the true output size in pixels, ignoring any render targets or
   * logical size and presentation.
   *
   * For the output size of the current rendering target, with logical size
   * adjustments, use RendererBase.GetCurrentOutputSize() instead.
   *
   * @param w a pointer filled in with the width in pixels.
   * @param h a pointer filled in with the height in pixels.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetCurrentOutputSize
   */
  bool GetOutputSize(int* w, int* h) const
  {
    return SDL_GetRenderOutputSize(get(), w, h);
  }

  /**
   * Get the current output size in pixels of a rendering context.
   *
   * If a rendering target is active, this will return the size of the rendering
   * target in pixels, otherwise if a logical size is set, it will return the
   * logical size, otherwise it will return the value of GetOutputSize().
   *
   * @returns the size on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetOutputSize()
   */
  std::optional<Point> GetCurrentOutputSize() const
  {
    if (Point p; GetCurrentOutputSize(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the current output size in pixels of a rendering context.
   *
   * If a rendering target is active, this will return the size of the rendering
   * target in pixels, otherwise return the value of
   * RendererBase.GetOutputSize().
   *
   * Rendering target or not, the output will be adjusted by the current logical
   * presentation state, dictated by RendererBase.SetLogicalPresentation().
   *
   * @param w a pointer filled in with the current width.
   * @param h a pointer filled in with the current height.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetOutputSize
   */
  bool GetCurrentOutputSize(int* w, int* h) const
  {
    return SDL_GetCurrentRenderOutputSize(get(), w, h);
  }

  /**
   * Get the properties associated with a renderer.
   *
   * The following read-only properties are provided by SDL:
   *
   * - `prop::Renderer.NAME_STRING`: the name of the rendering driver
   * - `prop::Renderer.WINDOW_POINTER`: the window where rendering is
   *   displayed, if any
   * - `prop::Renderer.SURFACE_POINTER`: the surface where rendering is
   *   displayed, if this is a software renderer without a window
   * - `prop::Renderer.VSYNC_NUMBER`: the current vsync setting
   * - `prop::Renderer.MAX_TEXTURE_SIZE_NUMBER`: the maximum texture width
   *   and height
   * - `prop::Renderer.TEXTURE_FORMATS_POINTER`: a (const PixelFormat *)
   *   array of pixel formats, terminated with PIXELFORMAT_UNKNOWN,
   *   representing the available texture formats for this renderer.
   * - `prop::Renderer.OUTPUT_COLORSPACE_NUMBER`: an Colorspace value
   *   describing the colorspace for output to the display, defaults to
   *   COLORSPACE_SRGB.
   * - `prop::Renderer.HDR_ENABLED_BOOLEAN`: true if the output colorspace is
   *   COLORSPACE_SRGB_LINEAR and the renderer is showing on a display with
   *   HDR enabled. This property can change dynamically when
   *   EVENT_WINDOW_HDR_STATE_CHANGED is sent.
   * - `prop::Renderer.SDR_WHITE_POINT_FLOAT`: the value of SDR white in the
   *   COLORSPACE_SRGB_LINEAR colorspace. When HDR is enabled, this value is
   *   automatically multiplied into the color scale. This property can change
   *   dynamically when EVENT_WINDOW_HDR_STATE_CHANGED is sent.
   * - `prop::Renderer.HDR_HEADROOM_FLOAT`: the additional high dynamic range
   *   that can be displayed, in terms of the SDR white point. When HDR is not
   *   enabled, this will be 1.0. This property can change dynamically when
   *   EVENT_WINDOW_HDR_STATE_CHANGED is sent.
   *
   * With the direct3d renderer:
   *
   * - `prop::Renderer.D3D9_DEVICE_POINTER`: the IDirect3DDevice9 associated
   *   with the renderer
   *
   * With the direct3d11 renderer:
   *
   * - `prop::Renderer.D3D11_DEVICE_POINTER`: the ID3D11Device associated
   *   with the renderer
   * - `prop::Renderer.D3D11_SWAPCHAIN_POINTER`: the IDXGISwapChain1
   *   associated with the renderer. This may change when the window is resized.
   *
   * With the direct3d12 renderer:
   *
   * - `prop::Renderer.D3D12_DEVICE_POINTER`: the ID3D12Device associated
   *   with the renderer
   * - `prop::Renderer.D3D12_SWAPCHAIN_POINTER`: the IDXGISwapChain4
   *   associated with the renderer.
   * - `prop::Renderer.D3D12_COMMAND_QUEUE_POINTER`: the ID3D12CommandQueue
   *   associated with the renderer
   *
   * With the vulkan renderer:
   *
   * - `prop::Renderer.VULKAN_INSTANCE_POINTER`: the VkInstance associated
   *   with the renderer
   * - `prop::Renderer.VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR associated
   *   with the renderer
   * - `prop::Renderer.VULKAN_PHYSICAL_DEVICE_POINTER`: the VkPhysicalDevice
   *   associated with the renderer
   * - `prop::Renderer.VULKAN_DEVICE_POINTER`: the VkDevice associated with
   *   the renderer
   * - `prop::Renderer.VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the queue
   *   family index used for rendering
   * - `prop::Renderer.VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the queue
   *   family index used for presentation
   * - `prop::Renderer.VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER`: the number of
   *   swapchain images, or potential frames in flight, used by the Vulkan
   *   renderer
   *
   * With the gpu renderer:
   *
   * - `prop::Renderer.GPU_DEVICE_POINTER`: the SDL_GPUDevice associated with
   *   the renderer
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PropertiesRef GetProperties() const
  {
    return SDL_GetRendererProperties(get());
  }

  /**
   * Set target texture back to window
   *
   * This is equivalent to SetTarget(nullptr)
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SetTarget(nullptr)
   * @sa GetTarget()
   */
  bool ResetTarget();

  /**
   * Set a texture as the current rendering target.
   *
   * The default render target is the window for which the renderer was created.
   * To stop rendering to a texture and render to the window again, call this
   * function with a nullptr `texture`.
   *
   * Viewport, cliprect, scale, and logical presentation are unique to each
   * render target. Get and set functions for these states apply to the current
   * render target set by this function, and those states persist on each target
   * when the current render target changes.
   *
   * @param texture the targeted texture, which must be created with the
   *                `TEXTUREACCESS_TARGET` flag, or nullptr to render to the
   *                window instead of a texture.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetTarget
   */
  bool SetTarget(OptionalTexture texture);

  /**
   * Get the current render target.
   *
   * The default render target is the window for which the renderer was created,
   * and is reported a nullptr here.
   *
   * @returns the current render target or nullptr for the default render
   * target.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetTarget
   */
  TextureRef GetTarget() const;

  /**
   * Set a device-independent resolution and presentation mode for rendering.
   *
   * This function sets the width and height of the logical rendering output.
   * The renderer will act as if the current render target is always the
   * requested dimensions, scaling to the actual resolution as necessary.
   *
   * This can be useful for games that expect a fixed size, but would like to
   * scale the output to whatever is available, regardless of how a user resizes
   * a window, or if the display is high DPI.
   *
   * Logical presentation can be used with both render target textures and the
   * renderer's window; the state is unique to each render target, and this
   * function sets the state for the current render target. It might be useful
   * to draw to a texture that matches the window dimensions with logical
   * presentation enabled, and then draw that texture across the entire window
   * with logical presentation disabled. Be careful not to render both with
   * logical presentation enabled, however, as this could produce
   * double-letterboxing, etc.
   *
   * You can disable logical coordinates by setting the mode to
   * LOGICAL_PRESENTATION_DISABLED, and in that case you get the full pixel
   * resolution of the render target; it is safe to toggle logical presentation
   * during the rendering of a frame: perhaps most of the rendering is done to
   * specific dimensions but to make fonts look sharp, the app turns off logical
   * presentation while drawing text, for example.
   *
   * For the renderer's window, letterboxing is drawn into the framebuffer if
   * logical presentation is enabled during RendererBase.Present; be sure to
   * reenable it before presenting if you were toggling it, otherwise the
   * letterbox areas might have artifacts from previous frames (or artifacts
   * from external overlays, etc). Letterboxing is never drawn into texture
   * render targets; be sure to call RendererBase.RenderClear() before drawing
   * into the texture so the letterboxing areas are cleared, if appropriate.
   *
   * You can convert coordinates in an event into rendering coordinates using
   * RendererBase.ConvertEventToRenderCoordinates().
   *
   * @param size the width and height of the logical resolution.
   * @param mode the presentation mode used.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.ConvertEventToRenderCoordinates
   * @sa RendererBase.GetLogicalPresentation
   * @sa RendererBase.GetLogicalPresentationRect
   */
  bool SetLogicalPresentation(SDL_Point size, RendererLogicalPresentation mode)
  {
    return SDL_SetRenderLogicalPresentation(get(), size.x, size.y, mode);
  }

  /**
   * Get device independent resolution and presentation mode for rendering.
   *
   * This function gets the width and height of the logical rendering output, or
   * the output size in pixels if a logical resolution is not enabled.
   *
   * @param size a Point to be filled with the width and height.
   * @param mode the presentation mode used.
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetLogicalPresentation
   */
  bool GetLogicalPresentation(SDL_Point* size,
                              RendererLogicalPresentation* mode)
  {
    if (!size) return GetLogicalPresentation(nullptr, nullptr, mode);
    return GetLogicalPresentation(&size->x, &size->y, mode);
  }

  /**
   * Get device independent resolution and presentation mode for rendering.
   *
   * This function gets the width and height of the logical rendering output, or
   * the output size in pixels if a logical resolution is not enabled.
   *
   * Each render target has its own logical presentation state. This function
   * gets the state for the current render target.
   *
   * @param w an int to be filled with the width.
   * @param h an int to be filled with the height.
   * @param mode the presentation mode used.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetLogicalPresentation
   */
  bool GetLogicalPresentation(int* w,
                              int* h,
                              RendererLogicalPresentation* mode) const
  {
    return SDL_GetRenderLogicalPresentation(get(), w, h, mode);
  }

  /**
   * Get the final presentation rectangle for rendering.
   *
   * This function returns the calculated rectangle used for logical
   * presentation, based on the presentation mode and output size. If logical
   * presentation is disabled, it will fill the rectangle with the output size,
   * in pixels.
   *
   * Each render target has its own logical presentation state. This function
   * gets the rectangle for the current render target.
   *
   * @returns the rect with the final presentation rectangle on success or
   * std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetLogicalPresentation
   */
  std::optional<FRect> GetLogicalPresentationRect() const
  {
    if (FRect rect; SDL_GetRenderLogicalPresentationRect(get(), &rect)) {
      return rect;
    }
    return std::nullopt;
  }

  /**
   * Get a point in render coordinates when given a point in window coordinates.
   *
   * This takes into account several states:
   *
   * - The window dimensions.
   * - The logical presentation settings (RendererBase.SetLogicalPresentation)
   * - The scale (RendererBase.SetScale)
   * - The viewport (RendererBase.SetViewport)
   *
   * @param window_coord the x, y coordinate in window coordinates.
   * @returns a FPoint containing ther render coordinates on success or
   * {0,0} on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetLogicalPresentation
   * @sa RendererBase.SetScale
   */
  std::optional<FPoint> RenderCoordinatesFromWindow(
    const SDL_FPoint& window_coord) const
  {
    if (FPoint p; SDL_RenderCoordinatesFromWindow(
          get(), window_coord.x, window_coord.y, &p.x, &p.y)) {
      return p;
    }
    return {};
  }

  /**
   * Get a point in window coordinates when given a point in render coordinates.
   *
   * This takes into account several states:
   *
   * - The window dimensions.
   * - The logical presentation settings (RendererBase.SetLogicalPresentation)
   * - The scale (RendererBase.SetScale)
   * - The viewport (RendererBase.SetViewport)
   *
   * @param coord the x, y coordinate in render coordinates.
   * @returns a FPoint filled with window coordinates on success or std::nullopt
   * on failure; call SDL_GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetLogicalPresentation
   * @sa RendererBase.SetScale
   * @sa RendererBase.SetViewport
   */
  std::optional<FPoint> RenderCoordinatesToWindow(const SDL_FPoint& coord) const
  {
    if (FPoint p;
        SDL_RenderCoordinatesToWindow(get(), coord.x, coord.y, &p.x, &p.y)) {
      return p;
    }
    return {};
  }

  /**
   * Convert the coordinates in an event to render coordinates.
   *
   * This takes into account several states:
   *
   * - The window dimensions.
   * - The logical presentation settings (RendererBase.SetLogicalPresentation)
   * - The scale (RendererBase.SetScale)
   * - The viewport (RendererBase.SetViewport)
   *
   * Various event types are converted with this function: mouse, touch, pen,
   * etc.
   *
   * Touch coordinates are converted from normalized coordinates in the window
   * to non-normalized rendering coordinates.
   *
   * Relative mouse coordinates (xrel and yrel event fields) are _also_
   * converted. Applications that do not want these fields converted should use
   * RendererBase.RenderCoordinatesFromWindow() on the specific event fields
   * instead of converting the entire event structure.
   *
   * Once converted, coordinates may be outside the rendering area.
   *
   * @param event the event to modify.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderCoordinatesFromWindow
   */
  bool ConvertEventToRenderCoordinates(Event* event) const
  {
    return SDL_ConvertEventToRenderCoordinates(get(), event);
  }

  /**
   * Reset the drawing area for rendering to the entire target
   *
   * This is equivalent to `SetViewport(std::nullopt)`
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetViewport()
   * @sa SetViewport()
   * @sa ViewportSet()
   */
  bool ResetViewport() { return SetViewport(std::nullopt); }

  /**
   * Set the drawing area for rendering on the current target.
   *
   * Drawing will clip to this area (separately from any clipping done with
   * RendererBase.SetClipRect), and the top left of the area will become
   * coordinate (0, 0) for future drawing commands.
   *
   * The area's width and height must be >= 0.
   *
   * Each render target has its own viewport. This function sets the viewport
   * for the current render target.
   *
   * @param rect the Rect structure representing the drawing area, or nullptr
   *             to set the viewport to the entire target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetViewport
   * @sa RendererBase.IsViewportSet
   */
  bool SetViewport(OptionalRef<const SDL_Rect> rect)
  {
    return SDL_SetRenderViewport(get(), rect);
  }

  /**
   * Get the drawing area for the current target.
   *
   * Each render target has its own viewport. This function gets the viewport
   * for the current render target.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.IsViewportSet
   * @sa RendererBase.SetViewport
   */
  std::optional<Rect> GetViewport() const
  {
    if (Rect rect; SDL_GetRenderViewport(get(), &rect)) return rect;
    return {};
  }

  /**
   * Return whether an explicit rectangle was set as the viewport.
   *
   * This is useful if you're saving and restoring the viewport and want to know
   * whether you should restore a specific rectangle or nullptr. Note that the
   * viewport is always reset when changing rendering targets.
   *
   * Each render target has its own viewport. This function checks the viewport
   * for the current render target.
   *
   * @returns true if the viewport was set to a specific rectangle, or false if
   *          it was set to nullptr (the entire target).
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetViewport
   * @sa RendererBase.SetViewport
   */
  bool IsViewportSet() const { return SDL_RenderViewportSet(get()); }

  /**
   * Get the safe area for rendering within the current viewport.
   *
   * Some devices have portions of the screen which are partially obscured or
   * not interactive, possibly due to on-screen controls, curved edges, camera
   * notches, TV overscan, etc. This function provides the area of the current
   * viewport which is safe to have interactible content. You should continue
   * rendering into the rest of the render target, but it should not contain
   * visually important or interactible content.
   *
   * @returns the rect filled the area that is safe for interactive content on
   * success or std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  std::optional<Rect> GetSafeArea() const
  {
    if (Rect rect; SDL_GetRenderSafeArea(get(), &rect)) return rect;
    return {};
  }

  /**
   * Reset the clip rectangle for rendering to the entire render target
   *
   * This is equivalent to `SetClipRect(std::nullopt)`
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetClipRect()
   * @sa SetClipRect()
   * @sa ClipEnabled()
   */
  bool ResetClipRect() { return SetClipRect({}); }

  /**
   * Set the clip rectangle for rendering on the specified target.
   *
   * Each render target has its own clip rectangle. This function sets the
   * cliprect for the current render target.
   *
   * @param rect an Rect structure representing the clip area, relative to
   *             the viewport, or nullptr to disable clipping.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetClipRect
   * @sa RendererBase.ResetClipRect()
   * @sa RendererBase.IsClipEnabled
   */
  bool SetClipRect(OptionalRef<const SDL_Rect> rect)
  {
    return SDL_SetRenderClipRect(get(), rect);
  }

  /**
   * Get the clip rectangle for the current target.
   *
   * Each render target has its own clip rectangle. This function gets the
   * cliprect for the current render target.
   *
   * @returns the rect filled in with the current clipping area or an empty
   * rectangle if clipping is disabled on success; std::nullopt on failure, call
   * GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.IsClipEnabled
   * @sa RendererBase.SetClipRect
   */
  std::optional<Rect> GetClipRect() const
  {
    if (Rect rect; SDL_GetRenderClipRect(get(), &rect)) return rect;
    return {};
  }

  /**
   * Get whether clipping is enabled on the given render target.
   *
   * Each render target has its own clip rectangle. This function checks the
   * cliprect for the current render target.
   *
   * @returns true if clipping is enabled or false if not; call GetError()
   *          for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetClipRect
   * @sa RendererBase.SetClipRect
   */
  bool IsClipEnabled() const { return SDL_RenderClipEnabled(get()); }

  /**
   * Set the drawing scale for rendering on the current target.
   *
   * The drawing coordinates are scaled by the x/y scaling factors before they
   * are used by the renderer. This allows resolution independent drawing with a
   * single coordinate system.
   *
   * If this results in scaling or subpixel drawing by the rendering backend, it
   * will be handled using the appropriate quality hints. For best results use
   * integer scaling factors.
   *
   * Each render target has its own scale. This function sets the scale for the
   * current render target.
   *
   * @param scale the x, y scaling factors.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetScale
   */
  bool SetScale(SDL_FPoint scale)
  {
    return SDL_SetRenderScale(get(), scale.x, scale.y);
  }

  /**
   * Get the drawing scale for the current target.
   *
   * Each render target has its own scale. This function gets the scale for the
   * current render target.
   *
   * @returns the scaling factors on success or std::nullopt on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetScale
   */
  std::optional<FPoint> GetScale() const
  {
    if (FPoint p; GetScale(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the drawing scale for the current target.
   *
   * Each render target has its own scale. This function gets the scale for the
   * current render target.
   *
   * @param scaleX a pointer filled in with the horizontal scaling factor.
   * @param scaleY a pointer filled in with the vertical scaling factor.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetScale
   */
  bool GetScale(float* scaleX, float* scaleY) const
  {
    return SDL_GetRenderScale(get(), scaleX, scaleY);
  }

  /**
   * Set the color used for drawing operations.
   *
   * Set the color for drawing or filling rectangles, lines, and points, and for
   * RendererBase.RenderClear().
   *
   * @param c the color value used to draw on the rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetDrawColor
   */
  bool SetDrawColor(SDL_Color c)
  {
    return SDL_SetRenderDrawColor(get(), c.r, c.g, c.b, c.a);
  }

  /**
   * Set the color used for drawing operations (Rect, Line and Clear).
   *
   * Set the color for drawing or filling rectangles, lines, and points, and for
   * RendererBase.RenderClear().
   *
   * @param c the RGBA values used to draw on the rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetDrawColor
   */
  bool SetDrawColor(SDL_FColor c)
  {
    return SDL_SetRenderDrawColorFloat(get(), c.r, c.g, c.b, c.a);
  }

  /**
   * Get the color used for drawing operations (Rect, Line and Clear).
   *
   * @returns the color on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetDrawColor(SDL_FColor*)
   * @sa SetDrawColor()
   */
  std::optional<FColor> GetDrawColor() const
  {
    if (FColor color; GetDrawColor(&color)) return color;
    return std::nullopt;
  }

  /**
   * Get the color used for drawing operations (Rect, Line and Clear).
   *
   * @param c a pointer filled in with the color channel values used to draw on
   *          the rendering target.
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetDrawColor(SDL_FColor*)
   * @sa SetDrawColor()
   */
  bool GetDrawColor(SDL_Color* c) const
  {
    if (!c) {
      return SDL_GetRenderDrawColor(get(), nullptr, nullptr, nullptr, nullptr);
    }
    return GetDrawColor(&c->r, &c->g, &c->b, &c->a);
  }

  /**
   * Get the color used for drawing operations (Rect, Line and Clear).
   *
   * @param c a pointer filled in with the color channel values used to draw on
   *          the rendering target.
   * @returns true on success or false on failure; call SDL_GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetDrawColor(SDL_Color*)
   * @sa SetDrawColor()
   */
  bool GetDrawColor(SDL_FColor* c) const
  {
    if (!c) {
      return SDL_GetRenderDrawColorFloat(
        get(), nullptr, nullptr, nullptr, nullptr);
    }
    return GetDrawColor(&c->r, &c->g, &c->b, &c->a);
  }

  /**
   * Get the color used for drawing operations (Rect, Line and Clear).
   *
   * @param r a pointer filled in with the red value used to draw on the
   *          rendering target.
   * @param g a pointer filled in with the green value used to draw on the
   *          rendering target.
   * @param b a pointer filled in with the blue value used to draw on the
   *          rendering target.
   * @param a a pointer filled in with the alpha value used to draw on the
   *          rendering target; usually `SDL_ALPHA_OPAQUE` (255).
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetDrawColor
   */
  bool GetDrawColor(Uint8* r, Uint8* g, Uint8* b, Uint8* a) const
  {
    return SDL_GetRenderDrawColor(get(), r, g, b, a);
  }

  /**
   * Get the color used for drawing operations (Rect, Line and Clear).
   *
   * @param r a pointer filled in with the red value used to draw on the
   *          rendering target.
   * @param g a pointer filled in with the green value used to draw on the
   *          rendering target.
   * @param b a pointer filled in with the blue value used to draw on the
   *          rendering target.
   * @param a a pointer filled in with the alpha value used to draw on the
   *          rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetDrawColor
   */
  bool GetDrawColor(float* r, float* g, float* b, float* a) const
  {
    return SDL_GetRenderDrawColorFloat(get(), r, g, b, a);
  }

  /**
   * Set the color scale used for render operations.
   *
   * The color scale is an additional scale multiplied into the pixel color
   * value while rendering. This can be used to adjust the brightness of colors
   * during HDR rendering, or changing HDR video brightness when playing on an
   * SDR display.
   *
   * The color scale does not affect the alpha channel, only the color
   * brightness.
   *
   * @param scale the color scale value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetColorScale
   */
  bool SetColorScale(float scale)
  {
    return SDL_SetRenderColorScale(get(), scale);
  }

  /**
   * Get the color scale used for render operations.
   *
   * @returns a float representing the current color scale on success or
   * std::nullopt on failure; call SDL_GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetColorScale
   */
  std::optional<float> GetColorScale() const
  {
    if (float scale; SDL_GetRenderColorScale(get(), &scale)) return scale;
    return std::nullopt;
  }

  /**
   * Set the blend mode used for drawing operations (Fill and Line).
   *
   * If the blend mode is not supported, the closest supported mode is chosen.
   *
   * @param blendMode the BlendMode to use for blending.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetDrawBlendMode
   */
  bool SetDrawBlendMode(BlendMode blendMode)
  {
    return SDL_SetRenderDrawBlendMode(get(), blendMode);
  }

  /**
   * Get the blend mode used for drawing operations.
   *
   * @returns the current BlendMode on success or std::nullopt on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetDrawBlendMode
   */
  std::optional<BlendMode> GetDrawBlendMode() const
  {
    if (BlendMode blendMode; SDL_GetRenderDrawBlendMode(get(), &blendMode)) {
      return blendMode;
    }
    return std::nullopt;
  }

  /**
   * Clear the current rendering target with the drawing color.
   *
   * This function clears the entire rendering target, ignoring the viewport and
   * the clip rectangle. Note, that clearing will also set/fill all pixels of
   * the rendering target to current renderer draw color, so make sure to invoke
   * RendererBase.SetDrawColor() when needed.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetDrawColor
   */
  bool RenderClear() { return SDL_RenderClear(get()); }

  /**
   * Draw a point on the current rendering target at subpixel precision.
   *
   * @param p the x, y coordinates of the point.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderPoints
   */
  bool RenderPoint(SDL_FPoint p) { return SDL_RenderPoint(get(), p.x, p.y); }

  /**
   * Draw multiple points on the current rendering target at subpixel precision.
   *
   * @param points the points to draw.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderPoint
   */
  bool RenderPoints(SpanRef<const SDL_FPoint> points)
  {
    SDL_assert_paranoid(points.size() < SDL_MAX_SINT32);
    return SDL_RenderPoints(get(), points.data(), points.size());
  }

  /**
   * Draw a line on the current rendering target at subpixel precision.
   *
   * @param p1 the x,y coordinate of the start point.
   * @param p2 the x,y coordinate of the end point.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderLines
   */
  bool RenderLine(SDL_FPoint p1, SDL_FPoint p2)
  {
    return SDL_RenderLine(get(), p1.x, p1.y, p2.x, p2.y);
  }

  /**
   * Draw a series of connected lines on the current rendering target at
   * subpixel precision.
   *
   * @param points the points along the lines, drawing points.size-1 lines.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderLine
   */
  bool RenderLines(SpanRef<const SDL_FPoint> points)
  {
    SDL_assert_paranoid(points.size() < SDL_MAX_SINT32);
    return SDL_RenderLines(get(), points.data(), points.size());
  }

  /**
   * Draw a rectangle on the current rendering target at subpixel precision.
   *
   * @param rect a pointer to the destination rectangle, or std::nullopt to
   *             outline the entire rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderRects
   */
  bool RenderRect(OptionalRef<const SDL_FRect> rect)
  {
    return SDL_RenderRect(get(), rect);
  }

  /**
   * Draw some number of rectangles on the current rendering target at subpixel
   * precision.
   *
   * @param rects a pointer to an array of destination rectangles.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderRect
   */
  bool RenderRects(SpanRef<const SDL_FRect> rects)
  {
    SDL_assert_paranoid(rects.size() < SDL_MAX_SINT32);
    return SDL_RenderRects(get(), rects.data(), rects.size());
  }

  /**
   * Fill a rectangle on the current rendering target with the drawing color at
   * subpixel precision.
   *
   * @param rect a pointer to the destination rectangle, or std::nullopt for the
   *             entire rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderFillRects
   */
  bool RenderFillRect(OptionalRef<const SDL_FRect> rect)
  {
    return SDL_RenderFillRect(get(), rect);
  }

  /**
   * Fill some number of rectangles on the current rendering target with the
   * drawing color at subpixel precision.
   *
   * @param rects a pointer to an array of destination rectangles.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderFillRect
   */
  bool RenderFillRects(SpanRef<const SDL_FRect> rects)
  {
    SDL_assert_paranoid(rects.size() < SDL_MAX_SINT32);
    return SDL_RenderFillRects(get(), rects.data(), rects.size());
  }

  /**
   * Copy a portion of the texture to the current rendering target at subpixel
   * precision.
   *
   * @param texture the source texture.
   * @param srcrect a pointer to the source rectangle, or nullptr for the entire
   *                texture.
   * @param dstrect a pointer to the destination rectangle, or nullptr for the
   *                entire rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderTextureRotated
   * @sa RendererBase.RenderTextureTiled
   */
  bool RenderTexture(TextureBase& texture,
                     OptionalRef<const SDL_FRect> srcrect,
                     OptionalRef<const SDL_FRect> dstrect);

  /**
   * Copy a portion of the source texture to the current rendering target, with
   * rotation and flipping, at subpixel precision.
   *
   * @param texture the source texture.
   * @param srcrect a pointer to the source rectangle, or nullptr for the entire
   *                texture.
   * @param dstrect a pointer to the destination rectangle, or nullptr for the
   *                entire rendering target.
   * @param angle an angle in degrees that indicates the rotation that will be
   *              applied to dstrect, rotating it in a clockwise direction.
   * @param center a pointer to a point indicating the point around which
   *               dstrect will be rotated (if nullptr, rotation will be done
   *               around dstrect.w/2, dstrect.h/2).
   * @param flip an FlipMode value stating which flipping actions should be
   *             performed on the texture.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderTexture
   */
  bool RenderTextureRotated(TextureBase& texture,
                            OptionalRef<const SDL_FRect> srcrect,
                            OptionalRef<const SDL_FRect> dstrect,
                            double angle,
                            OptionalRef<const SDL_FPoint> center = {},
                            FlipMode flip = SDL_FLIP_NONE);

  /**
   * Copy a portion of the source texture to the current rendering target, with
   * affine transform, at subpixel precision.
   *
   * @param texture the source texture.
   * @param srcrect a pointer to the source rectangle, or nullptr for the entire
   *                texture.
   * @param origin a pointer to a point indicating where the top-left corner of
   *               srcrect should be mapped to, or nullptr for the rendering
   *               target's origin.
   * @param right a pointer to a point indicating where the top-right corner of
   *              srcrect should be mapped to, or nullptr for the rendering
   *              target's top-right corner.
   * @param down a pointer to a point indicating where the bottom-left corner of
   *             srcrect should be mapped to, or nullptr for the rendering
   * target's bottom-left corner.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety You may only call this function from the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderTexture
   */
  bool RenderTextureAffine(TextureBase& texture,
                           OptionalRef<const SDL_FRect> srcrect,
                           OptionalRef<const SDL_FPoint> origin,
                           OptionalRef<const SDL_FPoint> right,
                           OptionalRef<const SDL_FPoint> down);

  /**
   * Tile a portion of the texture to the current rendering target at subpixel
   * precision.
   *
   * The pixels in `srcrect` will be repeated as many times as needed to
   * completely fill `dstrect`.
   *
   * @param texture the source texture.
   * @param srcrect a pointer to the source rectangle, or nullptr for the entire
   *                texture.
   * @param scale the scale used to transform srcrect into the destination
   *              rectangle, e.g. a 32x32 texture with a scale of 2 would fill
   *              64x64 tiles.
   * @param dstrect a pointer to the destination rectangle, or nullptr for the
   *                entire rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderTexture
   */
  bool RenderTextureTiled(TextureBase& texture,
                          OptionalRef<const SDL_FRect> srcrect,
                          float scale,
                          OptionalRef<const SDL_FRect> dstrect);

  /**
   * Perform a scaled copy using the 9-grid algorithm to the current rendering
   * target at subpixel precision.
   *
   * The pixels in the texture are split into a 3x3 grid, using the different
   * corner sizes for each corner, and the sides and center making up the
   * remaining pixels. The corners are then scaled using `scale` and fit into
   * the corners of the destination rectangle. The sides and center are then
   * stretched into place to cover the remaining destination rectangle.
   *
   * @param texture the source texture.
   * @param srcrect the Rect structure representing the rectangle to be used
   *                for the 9-grid, or nullptr to use the entire texture.
   * @param left_width the width, in pixels, of the left corners in `srcrect`.
   * @param right_width the width, in pixels, of the right corners in `srcrect`.
   * @param top_height the height, in pixels, of the top corners in `srcrect`.
   * @param bottom_height the height, in pixels, of the bottom corners in
   *                      `srcrect`.
   * @param scale the scale used to transform the corner of `srcrect` into the
   *              corner of `dstrect`, or 0.0f for an unscaled copy.
   * @param dstrect a pointer to the destination rectangle, or nullptr for the
   *                entire rendering target.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderTexture
   */
  bool RenderTexture9Grid(TextureBase& texture,
                          OptionalRef<const SDL_FRect> srcrect,
                          float left_width,
                          float right_width,
                          float top_height,
                          float bottom_height,
                          float scale,
                          OptionalRef<const SDL_FRect> dstrect);

  /**
   * Render a list of triangles, optionally using a texture and indices into the
   * vertex array Color and alpha modulation is done per vertex
   * (TextureBase.SetColorMod and TextureBase.SetAlphaMod are ignored).
   *
   * @param texture (optional) The SDL texture to use.
   * @param vertices vertices.
   * @param indices (optional) An array of integer indices into the 'vertices'
   *                array, if nullptr all vertices will be rendered in
   *                sequential order.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderGeometryRaw
   */
  bool RenderGeometry(OptionalTexture texture,
                      std::span<const Vertex> vertices,
                      std::span<const int> indices = {});

  /**
   * Render a list of triangles, optionally using a texture and indices into the
   * vertex arrays Color and alpha modulation is done per vertex
   * (TextureBase.SetColorMod and TextureBase.SetAlphaMod are ignored).
   *
   * @param texture (optional) The SDL texture to use.
   * @param xy vertex positions.
   * @param xy_stride byte size to move from one element to the next element.
   * @param color vertex colors (as FColor).
   * @param color_stride byte size to move from one element to the next element.
   * @param uv vertex normalized texture coordinates.
   * @param uv_stride byte size to move from one element to the next element.
   * @param num_vertices number of vertices.
   * @param indices (optional) An array of indices into the 'vertices' arrays,
   *                if nullptr all vertices will be rendered in sequential
   *                order.
   * @param num_indices number of indices.
   * @param size_indices index size: 1 (byte), 2 (short), 4 (int).
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RenderGeometry
   */
  bool RenderGeometryRaw(OptionalTexture texture,
                         const float* xy,
                         int xy_stride,
                         const FColor* color,
                         int color_stride,
                         const float* uv,
                         int uv_stride,
                         int num_vertices,
                         const void* indices,
                         int num_indices,
                         int size_indices);

  /**
   * Read pixels from the current rendering target.
   *
   * The returned surface contains pixels inside the desired area clipped to the
   * current viewport, and should be freed with SurfaceRef.reset().
   *
   * Note that this returns the actual pixels on the screen, so if you are using
   * logical presentation you should use
   * RendererBase.GetLogicalPresentationRect() to get the area containing your
   * content.
   *
   * **WARNING**: This is a very slow operation, and should not be used
   * frequently. If you're using this on the main rendering target, it should be
   * called after rendering and before RendererBase.Present().
   *
   * @param rect an Rect structure representing the area to read, which will
   *             be clipped to the current viewport, or nullptr for the entire
   *             viewport.
   * @returns a new Surface on success or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  Surface RenderReadPixels(OptionalRef<const SDL_Rect> rect) const
  {
    return Surface{SDL_RenderReadPixels(get(), rect)};
  }

  /**
   * Update the screen with any rendering performed since the previous call.
   *
   * SDL's rendering functions operate on a backbuffer; that is, calling a
   * rendering function such as RendererBase.RenderLine() does not directly put
   * a line on the screen, but rather updates the backbuffer. As such, you
   * compose your entire scene and *present* the composed backbuffer to the
   * screen as a complete picture.
   *
   * Therefore, when using SDL's rendering API, one does all drawing intended
   * for the frame, and then calls this function once per frame to present the
   * final drawing to the user.
   *
   * The backbuffer should be considered invalidated after each present; do not
   * assume that previous contents will exist between frames. You are strongly
   * encouraged to call RendererBase.RenderClear() to initialize the backbuffer
   * before starting each new frame's drawing, even if you plan to overwrite
   * every pixel.
   *
   * Please note, that in case of rendering to a texture - there is **no need**
   * to call `RendererBase.Present` after drawing needed objects to a texture,
   * and should not be done; you are only required to change back the rendering
   * target to default via `RendererBase.SetTarget(renderer, nullptr)`
   * afterwards, as textures by themselves do not have a concept of backbuffers.
   * Calling RendererBase.Present while rendering to a texture will still update
   * the screen with any current drawing that has been done _to the window
   * itself_.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RendererBase
   * @sa RendererBase.RenderClear
   * @sa RendererBase.RenderFillRect
   * @sa RendererBase.RenderFillRects
   * @sa RendererBase.RenderLine
   * @sa RendererBase.RenderLines
   * @sa RendererBase.RenderPoint
   * @sa RendererBase.RenderPoints
   * @sa RendererBase.RenderRect
   * @sa RendererBase.RenderRects
   * @sa RendererBase.SetDrawBlendMode
   * @sa RendererBase.SetDrawColor
   */
  bool Present() { return SDL_RenderPresent(get()); }

  /**
   * Force the rendering context to flush any pending commands and state.
   *
   * You do not need to (and in fact, shouldn't) call this function unless you
   * are planning to call into OpenGL/Direct3D/Metal/whatever directly, in
   * addition to using an RendererBase.
   *
   * This is for a very-specific case: if you are using SDL's render API, and
   * you plan to make OpenGL/D3D/whatever calls in addition to SDL render API
   * calls. If this applies, you should call this function between calls to
   * SDL's render API and the low-level API you're using in cooperation.
   *
   * In all other cases, you can ignore this function.
   *
   * This call makes SDL flush any pending rendering work it was queueing up to
   * do later in a single batch, and marks any internal cached state as invalid,
   * so it'll prepare all its state again later, from scratch.
   *
   * This means you do not need to save state in your rendering code to protect
   * the SDL renderer. However, there lots of arbitrary pieces of Direct3D and
   * OpenGL state that can confuse things; you should use your best judgment and
   * be prepared to make changes if specific state needs to be protected.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool Flush() { return SDL_FlushRenderer(get()); }

  /**
   * Toggle VSync of the given renderer.
   *
   * When a renderer is created, vsync defaults to SDL_RENDERER_VSYNC_DISABLED.
   *
   * The `vsync` parameter can be 1 to synchronize present with every vertical
   * refresh, 2 to synchronize present with every second vertical refresh, etc.,
   * SDL_RENDERER_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync), or
   * SDL_RENDERER_VSYNC_DISABLED to disable. Not every value is supported by
   * every driver, so you should check the return value to see whether the
   * requested setting is supported.
   *
   * @param vsync the vertical refresh sync interval.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.GetVSync
   */
  bool SetVSync(int vsync) { return SDL_SetRenderVSync(get(), vsync); }

  /**
   * Get VSync of the given renderer.
   *
   * @returns the current vertical refresh sync interval on success or
   * std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.SetVSync
   */
  std::optional<int> GetVSync() const
  {
    if (int vsync; SDL_GetRenderVSync(get(), &vsync)) return vsync;
    return std::nullopt;
  }

  /**
   * Draw debug text to an RendererBase.
   *
   * This function will render a string of text to an RendererBase. Note that
   * this is a convenience function for debugging, with severe limitations, and
   * not intended to be used for production apps and games.
   *
   * Among these limitations:
   *
   * - It accepts UTF-8 strings, but will only renders ASCII characters.
   * - It has a single, tiny size (8x8 pixels). One can use logical presentation
   *   or scaling to adjust it, but it will be blurry.
   * - It uses a simple, hardcoded bitmap font. It does not allow different font
   *   selections and it does not support truetype, for proper scaling.
   * - It does no word-wrapping and does not treat newline characters as a line
   *   break. If the text goes out of the window, it's gone.
   *
   * For serious text rendering, there are several good options, such as
   * SDL_ttf, stb_truetype, or other external libraries.
   *
   * On first use, this will create an internal texture for rendering glyphs.
   * This texture will live until the renderer is destroyed.
   *
   * The text is drawn in the color specified by RendererBase.SetDrawColor().
   *
   * @param p the x, y coordinates where the top-left corner of the text will
   * draw.
   * @param str the string to render.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE
   */
  bool RenderDebugText(FPoint p, StringParam str)
  {
    return SDL_RenderDebugText(get(), p.x, p.y, str);
  }

  /**
   * Draw debug text to an SDL_Renderer.
   *
   * This function will render a std::format()-style format string to a
   * renderer. Note that this is a convenience function for debugging, with
   * severe limitations, and is not intended to be used for production apps and
   * games.
   *
   * For the full list of limitations and other useful information, see
   * SDL_RenderDebugText.
   *
   * @param p the x, y coordinates where the top-left corner of the text will
   * draw.
   * @param fmt the format string to draw.
   * @param args additional parameters matching {} tokens in the `fmt` string,
   * if any.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RenderDebugText()
   * @sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE
   */
  template<class... ARGS>
  bool RenderDebugTextFormat(FPoint p, std::string_view fmt, ARGS... args)
  {
    return RenderDebugText(p,
                           std::vformat(fmt, std::make_format_args(args...)));
  }
};

/**
 * Handle to a non owned renderer
 *
 * @cat resource
 *
 * @sa RendererBase
 * @sa Renderer
 */
struct RendererRef : RendererBase
{
  using RendererBase::RendererBase;

  /**
   * Copy constructor.
   */
  constexpr RendererRef(const RendererRef& other)
    : RendererBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr RendererRef(RendererRef&& other)
    : RendererBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~RendererRef() = default;

  /**
   * Assignment operator.
   */
  RendererRef& operator=(RendererRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy the rendering context for a window and free all associated
   * textures.
   *
   * This should be called before destroying the associated window.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa RendererBase.RendererBase
   */
  void reset(SDL_Renderer* newResource = {})
  {
    SDL_DestroyRenderer(release(newResource));
  }
};

/**
 * Handle to an owned renderer
 *
 * @cat resource
 *
 * @sa RendererBase
 * @sa RendererRef
 */
struct Renderer : RendererRef
{
  using RendererRef::RendererRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Renderer(SDL_Renderer* resource = {})
    : RendererRef(resource)
  {
  }

  constexpr Renderer(const Renderer& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Renderer(Renderer&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Renderer() { reset(); }

  /**
   * Assignment operator.
   */
  Renderer& operator=(Renderer other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * An efficient driver-specific representation of pixel data
 *
 * @since This struct is available since SDL 3.2.0.
 *
 * @sa TextureBase.TextureBase
 * @sa TextureBase.TextureBase
 * @sa TextureBase.TextureBase
 * @sa TextureRef.reset
 *
 * @cat resource
 *
 * @sa Texture
 * @sa TextureRef
 */
struct TextureBase : Resource<SDL_Texture*>
{
  using Resource::Resource;

  /**
   * Load an image from a filesystem path into a software surface.
   *
   * If available, this uses LoadSurface(StringParam), otherwise it uses
   * LoadBMP(StringParam).
   *
   * @param renderer the rendering context.
   * @param file a path on the filesystem to load an image from.
   * @post the created texture is convertible to true on success or false on
   *       failure; call GetError() for more information.
   *
   * @sa LoadTexture(StringParam)
   */
  TextureBase(RendererBase& renderer, StringParam file);

  /**
   * Load an image from a IOStreamBase into a software surface.
   *
   * If available, this uses LoadSurface(IOStreamBase&), otherwise it uses
   * LoadBMP(IOStreamBase&).
   *
   * @param renderer the rendering context.
   * @param src an IOStreamBase to load an image from.
   * @post the created texture is convertible to true on success or false on
   *       failure; call GetError() for more information.
   *
   * @sa LoadSurface(StringParam)
   * @sa LoadBMP(StringParam)
   */
  TextureBase(RendererBase& renderer, IOStream& src);

  /**
   * Create a texture for a rendering context.
   *
   * The contents of a texture when first created are not defined.
   *
   * @param renderer the rendering context.
   * @param format one of the enumerated values in PixelFormat.
   * @param access one of the enumerated values in TextureAccess.
   * @param w the width of the texture in pixels.
   * @param h the height of the texture in pixels.
   * @post the created texture is convertible to true on success or false on
   *       failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetSize
   * @sa TextureBase.Update
   */
  TextureBase(RendererBase& renderer,
              PixelFormat format,
              TextureAccess access,
              int w,
              int h)
    : Resource(SDL_CreateTexture(renderer.get(), format, access, w, h))
  {
  }

  /**
   * Create a texture from an existing surface.
   *
   * The surface is not modified or freed by this function.
   *
   * The TextureAccess hint for the created texture is
   * `TEXTUREACCESS_STATIC`.
   *
   * The pixel format of the created texture may be different from the pixel
   * format of the surface, and can be queried using the
   * prop::Texture.FORMAT_NUMBER property.
   *
   * @param renderer the rendering context.
   * @param surface the SurfaceBase structure containing pixel data used to fill
   *                the texture.
   * @post the created texture is convertible to true on success or false on
   *       failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  TextureBase(RendererBase& renderer, SurfaceBase& surface)
    : Resource(SDL_CreateTextureFromSurface(renderer.get(), surface.get()))
  {
  }

  /**
   * Create a texture for a rendering context with the specified properties.
   *
   * These are the supported properties:
   *
   * - `prop::Texture.CREATE_COLORSPACE_NUMBER`: an Colorspace value
   *   describing the texture colorspace, defaults to COLORSPACE_SRGB_LINEAR
   *   for floating point textures, COLORSPACE_HDR10 for 10-bit textures,
   *   COLORSPACE_SRGB for other RGB textures and COLORSPACE_JPEG for
   *   YUV textures.
   * - `prop::Texture.CREATE_FORMAT_NUMBER`: one of the enumerated values in
   *   PixelFormat, defaults to the best RGBA format for the renderer
   * - `prop::Texture.CREATE_ACCESS_NUMBER`: one of the enumerated values in
   *   TextureAccess, defaults to TEXTUREACCESS_STATIC
   * - `prop::Texture.CREATE_WIDTH_NUMBER`: the width of the texture in
   *   pixels, required
   * - `prop::Texture.CREATE_HEIGHT_NUMBER`: the height of the texture in
   *   pixels, required
   * - `prop::Texture.CREATE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating
   *   point textures, this defines the value of 100% diffuse white, with higher
   *   values being displayed in the High Dynamic Range headroom. This defaults
   *   to 100 for HDR10 textures and 1.0 for floating point textures.
   * - `prop::Texture.CREATE_HDR_HEADROOM_FLOAT`: for HDR10 and floating
   *   point textures, this defines the maximum dynamic range used by the
   *   content, in terms of the SDR white point. This would be equivalent to
   *   maxCLL / prop::Texture.CREATE_SDR_WHITE_POINT_FLOAT for HDR10 content.
   *   If this is defined, any values outside the range supported by the display
   *   will be scaled into the available HDR headroom, otherwise they are
   *   clipped.
   *
   * With the direct3d11 renderer:
   *
   * - `prop::Texture.CREATE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D
   *   associated with the texture, if you want to wrap an existing texture.
   * - `prop::Texture.CREATE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D
   *   associated with the U plane of a YUV texture, if you want to wrap an
   *   existing texture.
   * - `prop::Texture.CREATE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D
   *   associated with the V plane of a YUV texture, if you want to wrap an
   *   existing texture.
   *
   * With the direct3d12 renderer:
   *
   * - `prop::Texture.CREATE_D3D12_TEXTURE_POINTER`: the ID3D12Resource
   *   associated with the texture, if you want to wrap an existing texture.
   * - `prop::Texture.CREATE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource
   *   associated with the U plane of a YUV texture, if you want to wrap an
   *   existing texture.
   * - `prop::Texture.CREATE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource
   *   associated with the V plane of a YUV texture, if you want to wrap an
   *   existing texture.
   *
   * With the metal renderer:
   *
   * - `prop::Texture.CREATE_METAL_PIXELBUFFER_POINTER`: the CVPixelBufferRef
   *   associated with the texture, if you want to create a texture from an
   *   existing pixel buffer.
   *
   * With the opengl renderer:
   *
   * - `prop::Texture.CREATE_OPENGL_TEXTURE_NUMBER`: the GLuint texture
   *   associated with the texture, if you want to wrap an existing texture.
   * - `prop::Texture.CREATE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture
   *   associated with the UV plane of an NV12 texture, if you want to wrap an
   *   existing texture.
   * - `prop::Texture.CREATE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture
   *   associated with the U plane of a YUV texture, if you want to wrap an
   *   existing texture.
   * - `prop::Texture.CREATE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture
   *   associated with the V plane of a YUV texture, if you want to wrap an
   *   existing texture.
   *
   * With the opengles2 renderer:
   *
   * - `prop::Texture.CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture
   *   associated with the texture, if you want to wrap an existing texture.
   * - `prop::Texture.CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture
   *   associated with the texture, if you want to wrap an existing texture.
   * - `prop::Texture.CREATE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture
   *   associated with the UV plane of an NV12 texture, if you want to wrap an
   *   existing texture.
   * - `prop::Texture.CREATE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture
   *   associated with the U plane of a YUV texture, if you want to wrap an
   *   existing texture.
   * - `prop::Texture.CREATE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture
   *   associated with the V plane of a YUV texture, if you want to wrap an
   *   existing texture.
   *
   * With the vulkan renderer:
   *
   * - `prop::Texture.CREATE_VULKAN_TEXTURE_NUMBER`: the VkImage with layout
   *   VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL associated with the texture, if
   *   you want to wrap an existing texture.
   *
   * @param renderer the rendering context.
   * @param props the properties to use.
   * @post the created texture is convertible to true on success or false on
   *       failure; call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa Properties.Properties
   * @sa TextureBase.TextureBase
   * @sa TextureBase.TextureBase
   * @sa TextureRef.reset
   * @sa TextureBase.GetSize
   * @sa TextureBase.Update
   */
  TextureBase(RendererBase& renderer, PropertiesBase& props)
    : Resource(SDL_CreateTextureWithProperties(renderer.get(), props.get()))
  {
  }

  /**
   * Get the properties associated with a texture.
   *
   * The following read-only properties are provided by SDL:
   *
   * - `prop::Texture.COLORSPACE_NUMBER`: an Colorspace value describing
   *   the texture colorspace.
   * - `prop::Texture.FORMAT_NUMBER`: one of the enumerated values in
   *   PixelFormat.
   * - `prop::Texture.ACCESS_NUMBER`: one of the enumerated values in
   *   TextureAccess.
   * - `prop::Texture.WIDTH_NUMBER`: the width of the texture in pixels.
   * - `prop::Texture.HEIGHT_NUMBER`: the height of the texture in pixels.
   * - `prop::Texture.SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point
   *   textures, this defines the value of 100% diffuse white, with higher
   *   values being displayed in the High Dynamic Range headroom. This defaults
   *   to 100 for HDR10 textures and 1.0 for other textures.
   * - `prop::Texture.HDR_HEADROOM_FLOAT`: for HDR10 and floating point
   *   textures, this defines the maximum dynamic range used by the content, in
   *   terms of the SDR white point. If this is defined, any values outside the
   *   range supported by the display will be scaled into the available HDR
   *   headroom, otherwise they are clipped. This defaults to 1.0 for SDR
   *   textures, 4.0 for HDR10 textures, and no default for floating point
   *   textures.
   *
   * With the direct3d11 renderer:
   *
   * - `prop::Texture.D3D11_TEXTURE_POINTER`: the ID3D11Texture2D associated
   *   with the texture
   * - `prop::Texture.D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D
   *   associated with the U plane of a YUV texture
   * - `prop::Texture.D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D
   *   associated with the V plane of a YUV texture
   *
   * With the direct3d12 renderer:
   *
   * - `prop::Texture.D3D12_TEXTURE_POINTER`: the ID3D12Resource associated
   *   with the texture
   * - `prop::Texture.D3D12_TEXTURE_U_POINTER`: the ID3D12Resource associated
   *   with the U plane of a YUV texture
   * - `prop::Texture.D3D12_TEXTURE_V_POINTER`: the ID3D12Resource associated
   *   with the V plane of a YUV texture
   *
   * With the vulkan renderer:
   *
   * - `prop::Texture.VULKAN_TEXTURE_NUMBER`: the VkImage associated with the
   *   texture
   *
   * With the opengl renderer:
   *
   * - `prop::Texture.OPENGL_TEXTURE_NUMBER`: the GLuint texture associated
   *   with the texture
   * - `prop::Texture.OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture
   *   associated with the UV plane of an NV12 texture
   * - `prop::Texture.OPENGL_TEXTURE_U_NUMBER`: the GLuint texture associated
   *   with the U plane of a YUV texture
   * - `prop::Texture.OPENGL_TEXTURE_V_NUMBER`: the GLuint texture associated
   *   with the V plane of a YUV texture
   * - `prop::Texture.OPENGL_TEXTURE_TARGET_NUMBER`: the GLenum for the
   *   texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_RECTANGLE_ARB`, etc)
   * - `prop::Texture.OPENGL_TEX_W_FLOAT`: the texture coordinate width of
   *   the texture (0.0 - 1.0)
   * - `prop::Texture.OPENGL_TEX_H_FLOAT`: the texture coordinate height of
   *   the texture (0.0 - 1.0)
   *
   * With the opengles2 renderer:
   *
   * - `prop::Texture.OPENGLES2_TEXTURE_NUMBER`: the GLuint texture
   *   associated with the texture
   * - `prop::Texture.OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture
   *   associated with the UV plane of an NV12 texture
   * - `prop::Texture.OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture
   *   associated with the U plane of a YUV texture
   * - `prop::Texture.OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture
   *   associated with the V plane of a YUV texture
   * - `prop::Texture.OPENGLES2_TEXTURE_TARGET_NUMBER`: the GLenum for the
   *   texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_EXTERNAL_OES`, etc)
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  PropertiesRef GetProperties() const
  {
    return SDL_GetTextureProperties(get());
  }

  /**
   * Get the renderer that created an TextureBase.
   *
   * @returns a pointer to the RendererBase that created the texture, or nullptr
   * on failure; call GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  RendererRef GetRenderer() const { return SDL_GetRendererFromTexture(get()); }

  /**
   * Set an additional color and alpha values multiplied into render copy
   * operations.
   *
   * When this texture is rendered, during the copy operation each source color
   * and alpha channels are modulated by the appropriate color value according
   * to the following formula:
   *
   *      srcC = srcC * (color / 255)
   *      srcA = srcA * (alpha / 255)
   *
   * Color and alpha modulation is not always supported by the renderer; it will
   * return false if either modulation is not supported.
   *
   * @param c the color and alpha channel values multiplied into copy
   *          operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetColorAndAlphaMod(Color c)
  {
    return SetColorMod(c.r, c.g, c.b) && SetAlphaMod(c.a);
  }

  /**
   * Set an additional color and alpha values multiplied into render copy
   * operations.
   *
   * When this texture is rendered, during the copy operation each source color
   * and alpha channels are modulated by the appropriate color value according
   * to the following formula:
   *
   *      srcC = srcC * (color / 255)
   *      srcA = srcA * (alpha / 255)
   *
   * Color and alpha modulation is not always supported by the renderer; it will
   * return false if either modulation is not supported.
   *
   * @param c the color and alpha channel values multiplied into copy
   *          operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   */
  bool SetColorAndAlphaMod(FColor c)
  {
    return SetColorMod(c.r, c.g, c.b) && SetAlphaMod(c.a);
  }

  /**
   * Get the additional color value multiplied into render copy operations.
   *
   * @returns the color channels (0-1) on success or false on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetAlphaMod()
   * @sa SetColorMod()
   */
  std::optional<FColor> GetColorAndAlphaMod() const
  {
    if (FColor color; GetColorAndAlphaMod(&color)) return color;
    return std::nullopt;
  }

  /**
   * Get the additional color value multiplied into render copy operations.
   *
   * @param c a pointer filled in with the current color and alpha mod values.
   * @returns true success or false on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetAlphaMod()
   * @sa SetColorMod()
   */
  bool GetColorAndAlphaMod(Color* c) const
  {
    SDL_assert(c != nullptr);
    return GetColorMod(&c->r, &c->g, &c->b) && GetAlphaMod(&c->a);
  }

  /**
   * Get the additional color value multiplied into render copy operations.
   *
   * @param c a pointer filled in with the current color and alpha mod values.
   * @returns true success or false on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa GetAlphaMod()
   * @sa SetColorMod()
   */
  bool GetColorAndAlphaMod(FColor* c) const
  {
    SDL_assert(c != nullptr);
    return GetColorMod(&c->r, &c->g, &c->b) && GetAlphaMod(&c->a);
  }

  /**
   * Set an additional color value multiplied into render copy operations.
   *
   * When this texture is rendered, during the copy operation each source color
   * channel is modulated by the appropriate color value according to the
   * following formula:
   *
   * `srcC = srcC * (color / 255)`
   *
   * Color modulation is not always supported by the renderer; it will return
   * false if color modulation is not supported.
   *
   * @param r the red color value multiplied into copy operations.
   * @param g the green color value multiplied into copy operations.
   * @param b the blue color value multiplied into copy operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetColorMod
   * @sa TextureBase.SetAlphaMod
   */
  bool SetColorMod(Uint8 r, Uint8 g, Uint8 b)
  {
    return SDL_SetTextureColorMod(get(), r, g, b);
  }

  /**
   * Set an additional color value multiplied into render copy operations.
   *
   * When this texture is rendered, during the copy operation each source color
   * channel is modulated by the appropriate color value according to the
   * following formula:
   *
   * `srcC = srcC * color`
   *
   * Color modulation is not always supported by the renderer; it will return
   * false if color modulation is not supported.
   *
   * @param r the red color value multiplied into copy operations.
   * @param g the green color value multiplied into copy operations.
   * @param b the blue color value multiplied into copy operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetColorMod
   * @sa TextureBase.SetAlphaMod
   */
  bool SetColorMod(float r, float g, float b)
  {
    return SDL_SetTextureColorModFloat(get(), r, g, b);
  }

  /**
   * Get the additional color value multiplied into render copy operations.
   *
   * @param r a pointer filled in with the current red color value.
   * @param g a pointer filled in with the current green color value.
   * @param b a pointer filled in with the current blue color value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetAlphaMod
   * @sa TextureBase.SetColorMod
   */
  bool GetColorMod(Uint8* r, Uint8* g, Uint8* b) const
  {
    return SDL_GetTextureColorMod(get(), r, g, b);
  }

  /**
   * Get the additional color value multiplied into render copy operations.
   *
   * @param r a pointer filled in with the current red color value.
   * @param g a pointer filled in with the current green color value.
   * @param b a pointer filled in with the current blue color value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetAlphaMod
   * @sa TextureBase.SetColorMod
   */
  bool GetColorMod(float* r, float* g, float* b) const
  {
    return SDL_GetTextureColorModFloat(get(), r, g, b);
  }

  /**
   * Set an additional alpha value multiplied into render copy operations.
   *
   * When this texture is rendered, during the copy operation the source alpha
   * value is modulated by this alpha value according to the following formula:
   *
   * `srcA = srcA * (alpha / 255)`
   *
   * Alpha modulation is not always supported by the renderer; it will return
   * false if alpha modulation is not supported.
   *
   * @param alpha the source alpha value multiplied into copy operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetAlphaMod
   * @sa TextureBase.SetColorMod
   */
  bool SetAlphaMod(Uint8 alpha) { return SDL_SetTextureAlphaMod(get(), alpha); }

  /**
   * Set an additional alpha value multiplied into render copy operations.
   *
   * When this texture is rendered, during the copy operation the source alpha
   * value is modulated by this alpha value according to the following formula:
   *
   * `srcA = srcA * alpha`
   *
   * Alpha modulation is not always supported by the renderer; it will return
   * false if alpha modulation is not supported.
   *
   * @param alpha the source alpha value multiplied into copy operations.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetAlphaMod
   * @sa TextureBase.SetColorMod
   */
  bool SetAlphaMod(float alpha)
  {
    return SDL_SetTextureAlphaModFloat(get(), alpha);
  }

  /**
   * Get the additional alpha value multiplied into render copy operations.
   *
   * @returns the current alpha value on success or false on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   */
  std::optional<float> GetAlphaMod() const
  {
    if (float alpha; GetAlphaMod(&alpha)) return alpha;
    return std::nullopt;
  }

  /**
   * Get the additional alpha value multiplied into render copy operations.
   *
   * @param alpha a pointer filled in with the current alpha value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetColorMod
   * @sa TextureBase.SetAlphaMod
   */
  bool GetAlphaMod(Uint8* alpha) const
  {
    return SDL_GetTextureAlphaMod(get(), alpha);
  }

  /**
   * Get the additional alpha value multiplied into render copy operations.
   *
   * @param alpha a pointer filled in with the current alpha value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetColorMod
   * @sa TextureBase.SetAlphaMod
   */
  bool GetAlphaMod(float* alpha) const
  {
    return SDL_GetTextureAlphaModFloat(get(), alpha);
  }

  /**
   * Set the blend mode for a texture, used by RendererBase.RenderTexture().
   *
   * If the blend mode is not supported, the closest supported mode is chosen
   * and this function returns false.
   *
   * @param blendMode the BlendMode to use for texture blending.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetBlendMode
   */
  bool SetBlendMode(BlendMode blendMode)
  {
    return SDL_SetTextureBlendMode(get(), blendMode);
  }

  /**
   * Get the blend mode used for texture copy operations.
   *
   * @returns the current SDL_BlendMode on success or std::nullopt on failure;
   *          call GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.SetBlendMode
   */
  std::optional<BlendMode> GetBlendMode() const
  {
    if (BlendMode blendMode; SDL_GetTextureBlendMode(get(), &blendMode)) {
      return blendMode;
    }
    return std::nullopt;
  }

  /**
   * Set the scale mode used for texture scale operations.
   *
   * The default texture scale mode is SCALEMODE_LINEAR.
   *
   * If the scale mode is not supported, the closest supported mode is chosen.
   *
   * @param scaleMode the ScaleMode to use for texture scaling.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.GetScaleMode
   */
  bool SetScaleMode(ScaleMode scaleMode)
  {
    return SDL_SetTextureScaleMode(get(), scaleMode);
  }

  /**
   * Get the scale mode used for texture scale operations.
   *
   * @returns the current scale mode on success or std::nullopt on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.SetScaleMode
   */
  std::optional<ScaleMode> GetScaleMode() const
  {
    if (ScaleMode scaleMode; SDL_GetTextureScaleMode(get(), &scaleMode)) {
      return scaleMode;
    }
    return std::nullopt;
  }

  /**
   * Update the given texture rectangle with new pixel data.
   *
   * The pixel data must be in the pixel format of the texture, which can be
   * queried using the prop::Texture.FORMAT_NUMBER property.
   *
   * This is a fairly slow function, intended for use with static textures that
   * do not change often.
   *
   * If the texture is intended to be updated often, it is preferred to create
   * the texture as streaming and use the locking functions referenced below.
   * While this function will work with streaming textures, for optimization
   * reasons you may not get the pixels back if you lock the texture afterward.
   *
   * @param rect an Rect structure representing the area to update, or nullptr
   *             to update the entire texture.
   * @param pixels the raw pixel data in the format of the texture.
   * @param pitch the number of bytes in a row of pixel data, including padding
   *              between lines.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.Lock
   * @sa TextureLock.Unlock
   * @sa TextureBase.UpdateNV
   * @sa TextureBase.UpdateYUV
   */
  bool Update(OptionalRef<const SDL_Rect> rect, const void* pixels, int pitch)
  {
    return SDL_UpdateTexture(get(), rect, pixels, pitch);
  }

  /**
   * Update a rectangle within a planar YV12 or IYUV texture with new pixel
   * data.
   *
   * You can use TextureBase.Update() as long as your pixel data is a contiguous
   * block of Y and U/V planes in the proper order, but this function is
   * available if your pixel data is not contiguous.
   *
   * @param rect a pointer to the rectangle of pixels to update, or nullptr to
   *             update the entire texture.
   * @param Yplane the raw pixel data for the Y plane.
   * @param Ypitch the number of bytes between rows of pixel data for the Y
   *               plane.
   * @param Uplane the raw pixel data for the U plane.
   * @param Upitch the number of bytes between rows of pixel data for the U
   *               plane.
   * @param Vplane the raw pixel data for the V plane.
   * @param Vpitch the number of bytes between rows of pixel data for the V
   *               plane.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.UpdateNV
   * @sa TextureBase.Update
   */
  bool UpdateYUV(OptionalRef<const SDL_Rect> rect,
                 const Uint8* Yplane,
                 int Ypitch,
                 const Uint8* Uplane,
                 int Upitch,
                 const Uint8* Vplane,
                 int Vpitch)
  {
    return SDL_UpdateYUVTexture(
      get(), rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);
  }

  /**
   * Update a rectangle within a planar NV12 or NV21 texture with new pixels.
   *
   * You can use TextureBase.Update() as long as your pixel data is a contiguous
   * block of NV12/21 planes in the proper order, but this function is available
   * if your pixel data is not contiguous.
   *
   * @param rect a pointer to the rectangle of pixels to update, or nullptr to
   *             update the entire texture.
   * @param Yplane the raw pixel data for the Y plane.
   * @param Ypitch the number of bytes between rows of pixel data for the Y
   *               plane.
   * @param UVplane the raw pixel data for the UV plane.
   * @param UVpitch the number of bytes between rows of pixel data for the UV
   *                plane.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.Update
   * @sa TextureBase.UpdateYUV
   */
  bool UpdateNV(OptionalRef<const SDL_Rect> rect,
                const Uint8* Yplane,
                int Ypitch,
                const Uint8* UVplane,
                int UVpitch)
  {
    return SDL_UpdateNVTexture(get(), rect, Yplane, Ypitch, UVplane, UVpitch);
  }

  /**
   * Lock a portion of the texture for **write-only** pixel access.
   *
   * As an optimization, the pixels made available for editing don't necessarily
   * contain the old texture data. This is a write-only operation, and if you
   * need to keep a copy of the texture data you should do that at the
   * application level.
   *
   * You must use TextureLock.Unlock() to unlock the pixels and apply any
   * changes.
   *
   * @param rect an Rect structure representing the area to lock for access;
   *             nullptr to lock the entire texture.
   * @returns TextureLock on success or false if the texture is not valid or was
   *          not created with `SDL_TEXTUREACCESS_STREAMING`; call GetError()
   *          for more information.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureLock.Unlock
   */
  TextureLock Lock(OptionalRef<const SDL_Rect> rect) &;

  /**
   * Get the width in pixels.
   */
  int GetWidth() const { return get()->w; }

  /**
   * Get the height in pixels.
   */
  int GetHeight() const { return get()->h; }

  /**
   * Get the size in pixels.
   */
  Point GetSize() const { return Point(GetWidth(), GetHeight()); }

  /**
   * Get the pixel format.
   */
  PixelFormat GetFormat() const { return get()->format; }
};

/**
 * Handle to a non owned texture
 *
 * @cat resource
 *
 * @sa TextureBase
 * @sa Texture
 */
struct TextureRef : TextureBase
{
  using TextureBase::TextureBase;

  /**
   * Copy constructor.
   */
  constexpr TextureRef(const TextureRef& other)
    : TextureBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr TextureRef(TextureRef&& other)
    : TextureBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~TextureRef() = default;

  /**
   * Assignment operator.
   */
  TextureRef& operator=(TextureRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy the specified texture.
   *
   * Passing nullptr or an otherwise invalid texture will set the SDL error
   * message to "Invalid texture".
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa TextureBase.TextureBase
   */
  void reset(SDL_Texture* newResource = {})
  {
    SDL_DestroyTexture(release(newResource));
  }
};

/**
 * Handle to an owned texture
 *
 * @cat resource
 *
 * @sa TextureBase
 * @sa TextureRef
 */
struct Texture : TextureRef
{
  using TextureRef::TextureRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Texture(SDL_Texture* resource = {})
    : TextureRef(resource)
  {
  }

  constexpr Texture(const Texture& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Texture(Texture&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Texture() { reset(); }

  /**
   * Assignment operator.
   */
  Texture& operator=(Texture other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Locks a Texture for access to its pixels
 */
class TextureLock
{
  TextureRef texture;
  SurfaceRef surface;

  /**
   * @sa TextureBase.Lock()
   */
  explicit TextureLock(TextureRef texture, OptionalRef<const SDL_Rect> rect)
    : texture(std::move(texture))
    , surface(nullptr)
  {
    SDL_Surface* maybeLock;
    if (SDL_LockTextureToSurface(this->texture.get(), rect, &maybeLock)) {
      surface = maybeLock;
    } else {
      texture.release();
    }
  }

public:
  /// default ctor
  TextureLock()
    : texture(nullptr)
    , surface(nullptr)
  {
  }

  // Copy ctor
  TextureLock(const TextureLock& other) = delete;

  /// Move ctor
  TextureLock(TextureLock&& other)
    : texture(other.texture.release())
    , surface(other.surface.release())
  {
  }

  /**
   * destructor
   * @sa Unlock()
   */
  ~TextureLock() { Unlock(); }

  /// Assignment operator
  TextureLock& operator=(TextureLock other)
  {
    std::swap(texture, other.texture);
    std::swap(surface, other.surface);
    return *this;
  }

  /**
   * Returns true if lock is active
   */
  constexpr operator bool() const { return bool(texture); }

  /**
   * Unlock a texture, uploading the changes to video memory, if needed.
   *
   * **Warning**: Please note that SDL_LockTexture() is intended to be
   * write-only; it will not guarantee the previous contents of the texture will
   * be provided. You must fully initialize any area of a texture that you lock
   * before unlocking it, as the pixels might otherwise be uninitialized memory.
   *
   * Which is to say: locking and immediately unlocking a texture can result in
   * corrupted textures, depending on the renderer in use.
   *
   * @threadsafety This function should only be called on the main thread.
   *
   * @since This function is available since SDL 3.2.0.
   *
   * @sa SDL_LockTexture
   */
  void Unlock()
  {
    surface.release();
    return SDL_UnlockTexture(texture.release());
  }

  /**
   * Get the pixels
   */
  void* GetPixels() const { return surface->pixels; }

  /**
   * Get pitch (the number of bytes between the start of one row the next)
   */
  int GetPitch() const { return surface->pitch; }

  /**
   * Get the pixel format
   */
  PixelFormat GetFormat() const { return surface->format; }

  friend class TextureBase;
};

/**
 * Get the number of 2D rendering drivers available for the current display.
 *
 * A render driver is a set of code that handles rendering and texture
 * management on a particular display. Normally there is only one, but some
 * drivers may have several available with different capabilities.
 *
 * There may be none if SDL was compiled without render support.
 *
 * @returns the number of built in render drivers.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RendererBase.RendererBase
 * @sa GetRenderDriver
 */
inline int GetNumRenderDrivers() { return SDL_GetNumRenderDrivers(); }

/**
 * Use this function to get the name of a built in 2D rendering driver.
 *
 * The list of rendering drivers is given in the order that they are normally
 * initialized by default; the drivers that seem more reasonable to choose
 * first (as far as the SDL developers believe) are earlier in the list.
 *
 * The names of drivers are all simple, low-ASCII identifiers, like "opengl",
 * "direct3d12" or "metal". These never have Unicode characters, and are not
 * meant to be proper names.
 *
 * @param index the index of the rendering driver; the value ranges from 0 to
 *              GetNumRenderDrivers() - 1.
 * @returns the name of the rendering driver at the requested index, or nullptr
 *          if an invalid index was specified.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetNumRenderDrivers
 */
inline const char* GetRenderDriver(int index)
{
  return SDL_GetRenderDriver(index);
}

/**
 * Create a window and default renderer.
 *
 * @param title the title of the window, in UTF-8 encoding.
 * @param size the width and height of the window.
 * @param window_flags the flags used to create the window (see
 *                     WindowBase.WindowBase()).
 * @returns a pair with Window and Renderer on success or a pair of nullptr on
 * failure; call GetError() for more information.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa RendererBase.RendererBase
 * @sa WindowBase.WindowBase
 */
inline std::pair<Window, Renderer> CreateWindowAndRenderer(
  StringParam title,
  SDL_Point size,
  WindowFlags window_flags = 0)
{
  SDL_Window* window;
  SDL_Renderer* renderer;
  SDL_CreateWindowAndRenderer(
    title, size.x, size.y, window_flags, &window, &renderer);
  return {Window{window}, Renderer{renderer}};
}

namespace prop::Renderer {

constexpr auto CREATE_NAME_STRING = SDL_PROP_RENDERER_CREATE_NAME_STRING;

constexpr auto CREATE_WINDOW_POINTER = SDL_PROP_RENDERER_CREATE_WINDOW_POINTER;

constexpr auto CREATE_SURFACE_POINTER =
  SDL_PROP_RENDERER_CREATE_SURFACE_POINTER;

constexpr auto CREATE_OUTPUT_COLORSPACE_NUMBER =
  SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER;

constexpr auto CREATE_PRESENT_VSYNC_NUMBER =
  SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER;

constexpr auto CREATE_VULKAN_INSTANCE_POINTER =
  SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER;

constexpr auto CREATE_VULKAN_SURFACE_NUMBER =
  SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER;

constexpr auto CREATE_VULKAN_PHYSICAL_DEVICE_POINTER =
  SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER;

constexpr auto CREATE_VULKAN_DEVICE_POINTER =
  SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER;

constexpr auto CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER =
  SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER;

constexpr auto CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER =
  SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER;

constexpr auto NAME_STRING = SDL_PROP_RENDERER_NAME_STRING;

constexpr auto WINDOW_POINTER = SDL_PROP_RENDERER_WINDOW_POINTER;

constexpr auto SURFACE_POINTER = SDL_PROP_RENDERER_SURFACE_POINTER;

constexpr auto VSYNC_NUMBER = SDL_PROP_RENDERER_VSYNC_NUMBER;

constexpr auto MAX_TEXTURE_SIZE_NUMBER =
  SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER;

constexpr auto TEXTURE_FORMATS_POINTER =
  SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER;

constexpr auto OUTPUT_COLORSPACE_NUMBER =
  SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER;

constexpr auto HDR_ENABLED_BOOLEAN = SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN;

constexpr auto SDR_WHITE_POINT_FLOAT = SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT;

constexpr auto HDR_HEADROOM_FLOAT = SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT;

constexpr auto D3D9_DEVICE_POINTER = SDL_PROP_RENDERER_D3D9_DEVICE_POINTER;

constexpr auto D3D11_DEVICE_POINTER = SDL_PROP_RENDERER_D3D11_DEVICE_POINTER;

constexpr auto D3D11_SWAPCHAIN_POINTER =
  SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER;

constexpr auto D3D12_DEVICE_POINTER = SDL_PROP_RENDERER_D3D12_DEVICE_POINTER;

constexpr auto D3D12_SWAPCHAIN_POINTER =
  SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER;

constexpr auto D3D12_COMMAND_QUEUE_POINTER =
  SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER;

constexpr auto VULKAN_INSTANCE_POINTER =
  SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER;

constexpr auto VULKAN_SURFACE_NUMBER = SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER;

constexpr auto VULKAN_PHYSICAL_DEVICE_POINTER =
  SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER;

constexpr auto VULKAN_DEVICE_POINTER = SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER;

constexpr auto VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER =
  SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER;

constexpr auto VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER =
  SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER;

constexpr auto VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER =
  SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER;

constexpr auto GPU_DEVICE_POINTER = SDL_PROP_RENDERER_GPU_DEVICE_POINTER;

} // namespace prop::Renderer

/**
 * Get the renderer associated with a window.
 *
 * @returns the rendering context on success or nullptr on failure; call
 *          GetError() for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline RendererRef WindowBase::GetRenderer() const
{
  return SDL_GetRenderer(get());
}

namespace prop::Texture {

constexpr auto CREATE_COLORSPACE_NUMBER =
  SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER;

constexpr auto CREATE_FORMAT_NUMBER = SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER;

constexpr auto CREATE_ACCESS_NUMBER = SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER;

constexpr auto CREATE_WIDTH_NUMBER = SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER;

constexpr auto CREATE_HEIGHT_NUMBER = SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER;

constexpr auto CREATE_SDR_WHITE_POINT_FLOAT =
  SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT;

constexpr auto CREATE_HDR_HEADROOM_FLOAT =
  SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT;

constexpr auto CREATE_D3D11_TEXTURE_POINTER =
  SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER;

constexpr auto CREATE_D3D11_TEXTURE_U_POINTER =
  SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER;

constexpr auto CREATE_D3D11_TEXTURE_V_POINTER =
  SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER;

constexpr auto CREATE_D3D12_TEXTURE_POINTER =
  SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER;

constexpr auto CREATE_D3D12_TEXTURE_U_POINTER =
  SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER;

constexpr auto CREATE_D3D12_TEXTURE_V_POINTER =
  SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER;

constexpr auto CREATE_METAL_PIXELBUFFER_POINTER =
  SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER;

constexpr auto CREATE_OPENGL_TEXTURE_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER;

constexpr auto CREATE_OPENGL_TEXTURE_UV_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER;

constexpr auto CREATE_OPENGL_TEXTURE_U_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER;

constexpr auto CREATE_OPENGL_TEXTURE_V_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER;

constexpr auto CREATE_OPENGLES2_TEXTURE_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER;

constexpr auto CREATE_OPENGLES2_TEXTURE_UV_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER;

constexpr auto CREATE_OPENGLES2_TEXTURE_U_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER;

constexpr auto CREATE_OPENGLES2_TEXTURE_V_NUMBER =
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER;

constexpr auto CREATE_VULKAN_TEXTURE_NUMBER =
  SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER;

constexpr auto COLORSPACE_NUMBER = SDL_PROP_TEXTURE_COLORSPACE_NUMBER;

constexpr auto FORMAT_NUMBER = SDL_PROP_TEXTURE_FORMAT_NUMBER;

constexpr auto ACCESS_NUMBER = SDL_PROP_TEXTURE_ACCESS_NUMBER;

constexpr auto WIDTH_NUMBER = SDL_PROP_TEXTURE_WIDTH_NUMBER;

constexpr auto HEIGHT_NUMBER = SDL_PROP_TEXTURE_HEIGHT_NUMBER;

constexpr auto SDR_WHITE_POINT_FLOAT = SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT;

constexpr auto HDR_HEADROOM_FLOAT = SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT;

constexpr auto D3D11_TEXTURE_POINTER = SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER;

constexpr auto D3D11_TEXTURE_U_POINTER =
  SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER;

constexpr auto D3D11_TEXTURE_V_POINTER =
  SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER;

constexpr auto D3D12_TEXTURE_POINTER = SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER;

constexpr auto D3D12_TEXTURE_U_POINTER =
  SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER;

constexpr auto D3D12_TEXTURE_V_POINTER =
  SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER;

constexpr auto OPENGL_TEXTURE_NUMBER = SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER;

constexpr auto OPENGL_TEXTURE_UV_NUMBER =
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER;

constexpr auto OPENGL_TEXTURE_U_NUMBER =
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER;

constexpr auto OPENGL_TEXTURE_V_NUMBER =
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER;

constexpr auto OPENGL_TEXTURE_TARGET_NUMBER =
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER;

constexpr auto OPENGL_TEX_W_FLOAT = SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT;

constexpr auto OPENGL_TEX_H_FLOAT = SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT;

constexpr auto OPENGLES2_TEXTURE_NUMBER =
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER;

constexpr auto OPENGLES2_TEXTURE_UV_NUMBER =
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER;

constexpr auto OPENGLES2_TEXTURE_U_NUMBER =
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER;

constexpr auto OPENGLES2_TEXTURE_V_NUMBER =
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER;

constexpr auto OPENGLES2_TEXTURE_TARGET_NUMBER =
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER;

constexpr auto VULKAN_TEXTURE_NUMBER = SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER;

} // namespace prop::Texture

inline bool RendererBase::SetTarget(OptionalTexture texture)
{
  return SDL_SetRenderTarget(get(), texture.get());
}

inline TextureRef RendererBase::GetTarget() const
{
  return SDL_GetRenderTarget(get());
}

inline bool RendererBase::RenderTexture(TextureBase& texture,
                                        OptionalRef<const SDL_FRect> srcrect,
                                        OptionalRef<const SDL_FRect> dstrect)
{
  return SDL_RenderTexture(get(), texture.get(), srcrect, dstrect);
}

inline bool RendererBase::RenderTextureRotated(
  TextureBase& texture,
  OptionalRef<const SDL_FRect> srcrect,
  OptionalRef<const SDL_FRect> dstrect,
  double angle,
  OptionalRef<const SDL_FPoint> center,
  FlipMode flip)
{
  return SDL_RenderTextureRotated(
    get(), texture.get(), srcrect, dstrect, angle, center, flip);
}

inline bool RendererBase::RenderTextureAffine(
  TextureBase& texture,
  OptionalRef<const SDL_FRect> srcrect,
  OptionalRef<const SDL_FPoint> origin,
  OptionalRef<const SDL_FPoint> right,
  OptionalRef<const SDL_FPoint> down)
{
  return SDL_RenderTextureAffine(
    get(), texture.get(), srcrect, origin, right, down);
}

inline bool RendererBase::RenderTextureTiled(
  TextureBase& texture,
  OptionalRef<const SDL_FRect> srcrect,
  float scale,
  OptionalRef<const SDL_FRect> dstrect)
{
  return SDL_RenderTextureTiled(get(), texture.get(), srcrect, scale, dstrect);
}

inline bool RendererBase::RenderTexture9Grid(
  TextureBase& texture,
  OptionalRef<const SDL_FRect> srcrect,
  float left_width,
  float right_width,
  float top_height,
  float bottom_height,
  float scale,
  OptionalRef<const SDL_FRect> dstrect)
{
  return SDL_RenderTexture9Grid(get(),
                                texture.get(),
                                srcrect,
                                left_width,
                                right_width,
                                top_height,
                                bottom_height,
                                scale,
                                dstrect);
}

inline bool RendererBase::RenderGeometry(OptionalTexture texture,
                                         std::span<const Vertex> vertices,
                                         std::span<const int> indices)
{
  return SDL_RenderGeometry(get(),
                            texture.get(),
                            vertices.data(),
                            vertices.size(),
                            indices.data(),
                            indices.size());
}

inline bool RendererBase::RenderGeometryRaw(OptionalTexture texture,
                                            const float* xy,
                                            int xy_stride,
                                            const FColor* color,
                                            int color_stride,
                                            const float* uv,
                                            int uv_stride,
                                            int num_vertices,
                                            const void* indices,
                                            int num_indices,
                                            int size_indices)
{
  return SDL_RenderGeometryRaw(get(),
                               texture.get(),
                               xy,
                               xy_stride,
                               color,
                               color_stride,
                               uv,
                               uv_stride,
                               num_vertices,
                               indices,
                               num_indices,
                               size_indices);
}

/**
 * Get the CAMetalLayer associated with the given Metal renderer.
 *
 * This function returns `void *`, so SDL doesn't have to include Metal's
 * headers, but it can be safely cast to a `CAMetalLayer *`.
 *
 * @param renderer the renderer to query.
 * @returns a `CAMetalLayer *` on success, or nullptr if the renderer isn't a
 *          Metal renderer.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetRenderMetalCommandEncoder
 */
inline void* GetRenderMetalLayer(RendererBase& renderer)
{
  return SDL_GetRenderMetalLayer(renderer.get());
}

/**
 * Get the Metal command encoder for the current frame.
 *
 * This function returns `void *`, so SDL doesn't have to include Metal's
 * headers, but it can be safely cast to an `id<MTLRenderCommandEncoder>`.
 *
 * This will return nullptr if Metal refuses to give SDL a drawable to render
 * to, which might happen if the window is hidden/minimized/offscreen. This
 * doesn't apply to command encoders for render targets, just the window's
 * backbuffer. Check your return values!
 *
 * @param renderer the renderer to query.
 * @returns an `id<MTLRenderCommandEncoder>` on success, or nullptr if the
 *          renderer isn't a Metal renderer or there was an error.
 *
 * @threadsafety This function should only be called on the main thread.
 *
 * @since This function is available since SDL 3.2.0.
 *
 * @sa GetRenderMetalLayer
 */
inline void* GetRenderMetalCommandEncoder(RendererBase& renderer)
{
  return SDL_GetRenderMetalCommandEncoder(renderer.get());
}

/**
 * Add a set of synchronization semaphores for the current frame.
 *
 * The Vulkan renderer will wait for `wait_semaphore` before submitting
 * rendering commands and signal `signal_semaphore` after rendering commands
 * are complete for this frame.
 *
 * This should be called each frame that you want semaphore synchronization.
 * The Vulkan renderer may have multiple frames in flight on the GPU, so you
 * should have multiple semaphores that are used for synchronization. Querying
 * prop::Renderer.VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER will give you the
 * maximum number of semaphores you'll need.
 *
 * @param renderer the rendering context.
 * @param wait_stage_mask the VkPipelineStageFlags for the wait.
 * @param wait_semaphore a VkSempahore to wait on before rendering the current
 *                       frame, or 0 if not needed.
 * @param signal_semaphore a VkSempahore that SDL will signal when rendering
 *                         for the current frame is complete, or 0 if not
 *                         needed.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @threadsafety It is **NOT** safe to call this function from two threads at
 *               once.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline bool AddVulkanRenderSemaphores(RendererBase& renderer,
                                      Uint32 wait_stage_mask,
                                      Sint64 wait_semaphore,
                                      Sint64 signal_semaphore)
{
  return SDL_AddVulkanRenderSemaphores(
    renderer.get(), wait_stage_mask, wait_semaphore, signal_semaphore);
}

#ifdef SDL3PP_DOC

/// Disable vsync
#define SDL_RENDERER_VSYNC_DISABLED 0

/// Adaptative vsync
#define SDL_RENDERER_VSYNC_ADAPTIVE (-1)

/**
 * The size, in pixels, of a single RendererBase.RenderDebugText() character.
 *
 * The font is monospaced and square, so this applies to all characters.
 *
 * @since This macro is available since SDL 3.2.0.
 *
 * @sa RendererBase.RenderDebugText
 */
#define SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE 8

#endif // SDL3PP_DOC

#pragma region impl

inline bool RendererBase::ResetTarget() { return SetTarget(nullptr); }

inline TextureLock TextureBase::Lock(OptionalRef<const SDL_Rect> rect) &
{
  return TextureLock{get(), rect};
}

/**
 * Load a BMP texture from a seekable SDL data stream.
 *
 * @param renderer the renderer to create texture
 * @param src the data stream for the surface.
 * @returns a Texture with loaded content or nullptr on failure; call
 *          GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 *
 */
inline Texture LoadTextureBMP(RendererBase& renderer, IOStreamBase& src)
{
  Surface surface{LoadBMP(src)};
  return Texture(renderer, surface);
}

/**
 * Load a BMP texture from a file.
 *
 * @param renderer the renderer to create texture
 * @param file the BMP file to load.
 * @returns a Texture with loaded content or nullptr on failure; call
 *          GetError() for more information.
 *
 * @since This function is available since SDL 3.2.0.
 */
inline Texture LoadTextureBMP(RendererBase& renderer, StringParam file)
{
  Surface surface{SDL_LoadBMP(file)};
  return Texture(renderer, surface);
}

#pragma endregion impl

/// @}

} // namespace SDL
#if !defined(SDL3PP_DISABLE_IMAGE) && !defined(SDL3PP_ENABLE_IMAGE) &&         \
  __has_include(<SDL3_image/SDL_image.h>)
#define SDL3PP_ENABLE_IMAGE
#endif

#if defined(SDL3PP_ENABLE_IMAGE) || defined(SDL3PP_DOC)

#include <SDL3_image/SDL_image.h>

namespace SDL {

/**
 * @defgroup CategorySDLImage Load images from several formats
 *
 * Header file for SDL_image library
 *
 * A simple library to load images of various formats as SDL surfaces
 * @{
 */

// Forward decl
struct AnimationBase;

// Forward decl
struct AnimationRef;

// Forward decl
struct Animation;

#ifdef SDL3PP_DOC

/**
 * @name Image version
 * @{
 * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
 */
#define SDL_IMAGE_MAJOR_VERSION

#define SDL_IMAGE_MINOR_VERSION

#define SDL_IMAGE_MICRO_VERSION

/// @}

/**
 * This is the version number macro for the current SDL_image version.
 */
#define SDL_IMAGE_VERSION                                                      \
  SDL_VERSIONNUM(                                                              \
    SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, SDL_IMAGE_MICRO_VERSION)

/**
 * This macro will evaluate to true if compiled with SDL_image at least X.Y.Z.
 */
#define SDL_IMAGE_VERSION_ATLEAST(X, Y, Z)                                     \
  ((SDL_IMAGE_MAJOR_VERSION >= X) &&                                           \
   (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION >= Y) &&            \
   (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION > Y ||              \
    SDL_IMAGE_MICRO_VERSION >= Z))

#endif // SDL3PP_DOC

/**
 * This function gets the version of the dynamically linked SDL_image library.
 *
 * @returns SDL_image version.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline int IMG_Version() { return ::IMG_Version(); }

/**
 * Load an image from an SDL data source into a software surface.
 *
 * An SurfaceBase is a buffer of pixels in memory accessible by the CPU. Use
 * this if you plan to hand the data to something else or manipulate it
 * further in code.
 *
 * There are no guarantees about what format the new SurfaceBase data will be;
 * in many cases, SDL_image will attempt to supply a surface that exactly
 * matches the provided image, but in others it might have to convert (either
 * because the image is in a format that SDL doesn't directly support or
 * because it's compressed data that could reasonably uncompress to various
 * formats and SDL_image had to pick one). You can inspect an SurfaceBase for
 * its specifics, and use SurfaceBase.Convert to then migrate to any supported
 * format.
 *
 * If the image format supports a transparent pixel, SDL will set the colorkey
 * for the surface. You can enable RLE acceleration on the surface afterwards
 * by calling: SurfaceBase.SetColorKey(image, SDL_RLEACCEL,
 * image->format->colorkey);
 *
 * Even though this function accepts a file type, SDL_image may still try
 * other decoders that are capable of detecting file type from the contents of
 * the image data, but may rely on the caller-provided type string for formats
 * that it cannot autodetect. If `type` is nullptr, SDL_image will rely solely
 * on its ability to guess the format.
 *
 * There is a separate function to read files from disk without having to deal
 * with IOStreamBase: `LoadSurface("filename.jpg")` will call this function and
 * manage those details for you, determining the file type from the filename's
 * extension.
 *
 * There is also LoadSurface(), which is equivalent to this function except
 * that it will rely on SDL_image to determine what type of data it is
 * loading, much like passing a nullptr for type.
 *
 * If you are using SDL's 2D rendering API, there is an equivalent call to
 * load images directly into an TextureBase for use by the GPU without using a
 * software surface: call LoadTexture() instead.
 *
 * @param src an IOStreamBase that data will be read from.
 * @param type a filename extension that represent this data ("BMP", "GIF",
 *             "PNG", etc).
 * @returns a new SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadSurface
 * @sa LoadSurface
 */
inline Surface LoadSurface(IOStreamBase& src, StringParam type)
{
  return Surface{IMG_LoadTyped_IO(src.get(), false, type)};
}

/**
 * Load an image from a filesystem path into a software surface.
 *
 * An SurfaceBase is a buffer of pixels in memory accessible by the CPU. Use
 * this if you plan to hand the data to something else or manipulate it
 * further in code.
 *
 * There are no guarantees about what format the new SDL_Surface data will be;
 * in many cases, SDL_image will attempt to supply a surface that exactly
 * matches the provided image, but in others it might have to convert (either
 * because the image is in a format that SDL doesn't directly support or
 * because it's compressed data that could reasonably uncompress to various
 * formats and SDL_image had to pick one). You can inspect an SurfaceBase for
 * its specifics, and use SurfaceBase::Convert() to then migrate to any
 * supported format.
 *
 * If the image format supports a transparent pixel, SDL will set the colorkey
 * for the surface. You can enable RLE acceleration on the surface afterwards
 * by calling: SurfaceBase::SetColorKey(image, SDL_RLEACCEL,
 * image->format->colorkey);
 *
 * There is a separate function to read files from an SDL_IOStream, if you
 * need an i/o abstraction to provide data from anywhere instead of a simple
 * filesystem read; that function is Load(SDL_IOStream*,bool).
 *
 * If you are using SDL's 2D rendering API, there is an equivalent call to
 * load images directly into an Texture for use by the GPU without using a
 * software surface: call LoadTexture() instead.
 *
 * @param file a path on the filesystem to load an image from.
 * @returns a new SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline Surface LoadSurface(StringParam file) { return Surface{IMG_Load(file)}; }

/**
 * Load an image from an SDL data source into a software surface.
 *
 * An SurfaceBase is a buffer of pixels in memory accessible by the CPU. Use
 * this if you plan to hand the data to something else or manipulate it
 * further in code.
 *
 * There are no guarantees about what format the new SurfaceBase data will be;
 * in many cases, SDL_image will attempt to supply a surface that exactly
 * matches the provided image, but in others it might have to convert (either
 * because the image is in a format that SDL doesn't directly support or
 * because it's compressed data that could reasonably uncompress to various
 * formats and SDL_image had to pick one). You can inspect an SurfaceBase for
 * its specifics, and use SurfaceBase.Convert to then migrate to any supported
 * format.
 *
 * If the image format supports a transparent pixel, SDL will set the colorkey
 * for the surface. You can enable RLE acceleration on the surface afterwards
 * by calling: SurfaceBase.SetColorKey(image, SDL_RLEACCEL,
 * image->format->colorkey);
 *
 * There is a separate function to read files from disk without having to deal
 * with IOStreamBase: `LoadSurface("filename.jpg")` will call this function and
 * manage those details for you, determining the file type from the filename's
 * extension.
 *
 * There is also LoadSurface(), which is equivalent to this function
 * except a file extension (like "BMP", "JPG", etc) can be specified, in case
 * SDL_image cannot autodetect the file format.
 *
 * If you are using SDL's 2D rendering API, there is an equivalent call to
 * load images directly into an TextureBase for use by the GPU without using a
 * software surface: call LoadTexture() instead.
 *
 * @param src an IOStreamBase that data will be read from.
 * @returns a new SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadSurface
 * @sa LoadSurface
 * @sa SurfaceRef.reset
 */
inline Surface LoadSurface(IOStreamBase& src)
{
  return Surface{IMG_Load_IO(src.get(), false)};
}

/**
 * Load an image from a filesystem path into a GPU texture.
 *
 * A Texture represents an image in GPU memory, usable by SDL's 2D Render
 * API. This can be significantly more efficient than using a CPU-bound
 * Surface if you don't need to manipulate the image directly after loading it.
 *
 * If the loaded image has transparency or a colorkey, a texture with an alpha
 * channel will be created. Otherwise, SDL_image will attempt to create an
 * Texture in the most format that most reasonably represents the image
 * data (but in many cases, this will just end up being 32-bit RGB or 32-bit
 * RGBA).
 *
 * If you would rather decode an image to an Surface (a buffer of pixels in CPU
 * memory), call LoadSurface() instead.
 *
 * @param renderer the RendererBase to use to create the GPU texture.
 * @param file a path on the filesystem to load an image from.
 * @returns a new texture, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline Texture LoadTexture(RendererBase& renderer, StringParam file)
{
  return Texture{IMG_LoadTexture(renderer.get(), file)};
}

/**
 * Load an image from an SDL data source into a GPU texture.
 *
 * An TextureBase represents an image in GPU memory, usable by SDL's 2D Render
 * API. This can be significantly more efficient than using a CPU-bound
 * SurfaceBase if you don't need to manipulate the image directly after
 * loading it.
 *
 * If the loaded image has transparency or a colorkey, a texture with an alpha
 * channel will be created. Otherwise, SDL_image will attempt to create an
 * TextureBase in the most format that most reasonably represents the image
 * data (but in many cases, this will just end up being 32-bit RGB or 32-bit
 * RGBA).
 *
 * There is a separate function to read files from disk without having to deal
 * with IOStreamBase: `LoadTexture(renderer, "filename.jpg")` will call
 * this function and manage those details for you, determining the file type
 * from the filename's extension.
 *
 * There is also LoadTexture(), which is equivalent to this
 * function except a file extension (like "BMP", "JPG", etc) can be specified,
 * in case SDL_image cannot autodetect the file format.
 *
 * If you would rather decode an image to an SurfaceBase (a buffer of pixels
 * in CPU memory), call LoadSurface() instead.
 *
 * @param renderer the RendererBase to use to create the GPU texture.
 * @param src an IOStreamBase that data will be read from.
 * @returns a new texture, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline Texture LoadTexture(RendererBase& renderer, IOStreamBase& src)
{
  return Texture{IMG_LoadTexture_IO(renderer.get(), src.get(), false)};
}

/**
 * Load an image from an SDL data source into a GPU texture.
 *
 * An TextureBase represents an image in GPU memory, usable by SDL's 2D Render
 * API. This can be significantly more efficient than using a CPU-bound
 * SurfaceBase if you don't need to manipulate the image directly after
 * loading it.
 *
 * If the loaded image has transparency or a colorkey, a texture with an alpha
 * channel will be created. Otherwise, SDL_image will attempt to create an
 * TextureBase in the most format that most reasonably represents the image
 * data (but in many cases, this will just end up being 32-bit RGB or 32-bit
 * RGBA).
 *
 * Even though this function accepts a file type, SDL_image may still try
 * other decoders that are capable of detecting file type from the contents of
 * the image data, but may rely on the caller-provided type string for formats
 * that it cannot autodetect. If `type` is nullptr, SDL_image will rely solely
 * on its ability to guess the format.
 *
 * There is a separate function to read files from disk without having to deal
 * with IOStreamBase: `LoadTexture("filename.jpg")` will call this
 * function and manage those details for you, determining the file type from
 * the filename's extension.
 *
 * There is also LoadTexture(), which is equivalent to this function
 * except that it will rely on SDL_image to determine what type of data it is
 * loading, much like passing a nullptr for type.
 *
 * If you would rather decode an image to an SurfaceBase (a buffer of pixels
 * in CPU memory), call LoadSurface() instead.
 *
 * @param renderer the RendererBase to use to create the GPU texture.
 * @param src an IOStreamBase that data will be read from.
 * @param type a filename extension that represent this data ("BMP", "GIF",
 *             "PNG", etc).
 * @returns a new texture, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline Texture LoadTexture(RendererBase& renderer,
                           IOStreamBase& src,
                           StringParam type)
{
  return Texture{
    IMG_LoadTextureTyped_IO(renderer.get(), src.get(), false, type)};
}

/**
 * Detect AVIF image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is AVIF data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isAVIF(IOStreamBase& src) { return IMG_isAVIF(src.get()); }

/**
 * Detect ICO image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is ICO data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isICO(IOStreamBase& src) { return IMG_isICO(src.get()); }

/**
 * Detect CUR image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is CUR data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isCUR(IOStreamBase& src) { return IMG_isCUR(src.get()); }

/**
 * Detect BMP image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is BMP data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isBMP(IOStreamBase& src) { return IMG_isBMP(src.get()); }

/**
 * Detect GIF image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is GIF data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isGIF(IOStreamBase& src) { return IMG_isGIF(src.get()); }

/**
 * Detect JPG image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is JPG data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isJPG(IOStreamBase& src) { return IMG_isJPG(src.get()); }

/**
 * Detect JXL image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is JXL data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isJXL(IOStreamBase& src) { return IMG_isJXL(src.get()); }

/**
 * Detect LBM image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is LBM data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isLBM(IOStreamBase& src) { return IMG_isLBM(src.get()); }

/**
 * Detect PCX image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is PCX data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isPCX(IOStreamBase& src) { return IMG_isPCX(src.get()); }

/**
 * Detect PNG image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is PNG data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isPNG(IOStreamBase& src) { return IMG_isPNG(src.get()); }

/**
 * Detect PNM image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is PNM data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isPNM(IOStreamBase& src) { return IMG_isPNM(src.get()); }

/**
 * Detect SVG image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is SVG data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isSVG(IOStreamBase& src) { return IMG_isSVG(src.get()); }

/**
 * Detect QOI image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is QOI data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isQOI(IOStreamBase& src) { return IMG_isQOI(src.get()); }

/**
 * Detect TIFF image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is TIFF data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isTIF(IOStreamBase& src) { return IMG_isTIF(src.get()); }

/**
 * Detect XCF image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is XCF data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXPM
 * @sa isXV
 * @sa isWEBP
 */
inline bool isXCF(IOStreamBase& src) { return IMG_isXCF(src.get()); }

/**
 * Detect XPM image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is XPM data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXV
 * @sa isWEBP
 */
inline bool isXPM(IOStreamBase& src) { return IMG_isXPM(src.get()); }

/**
 * Detect XV image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is XV data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isWEBP
 */
inline bool isXV(IOStreamBase& src) { return IMG_isXV(src.get()); }

/**
 * Detect WEBP image data on a readable/seekable IOStreamBase.
 *
 * This function attempts to determine if a file is a given filetype, reading
 * the least amount possible from the IOStreamBase (usually a few bytes).
 *
 * There is no distinction made between "not the filetype in question" and
 * basic i/o errors.
 *
 * This function will always attempt to seek `src` back to where it started
 * when this function was called, but it will not report any errors in doing
 * so, but assuming seeking works, this means you can immediately use this
 * with a different IMG_isTYPE function, or load the image without further
 * seeking.
 *
 * You do not need to call this function to load data; SDL_image can work to
 * determine file type in many cases in its standard load functions.
 *
 * @param src a seekable/readable IOStreamBase to provide image data.
 * @returns non-zero if this is WEBP data, zero otherwise.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa isAVIF
 * @sa isICO
 * @sa isCUR
 * @sa isBMP
 * @sa isGIF
 * @sa isJPG
 * @sa isJXL
 * @sa isLBM
 * @sa isPCX
 * @sa isPNG
 * @sa isPNM
 * @sa isSVG
 * @sa isQOI
 * @sa isTIF
 * @sa isXCF
 * @sa isXPM
 * @sa isXV
 */
inline bool isWEBP(IOStreamBase& src) { return IMG_isWEBP(src.get()); }

/**
 * Load a AVIF image directly.
 *
 * If you know you definitely have a AVIF image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadAVIF(IOStreamBase& src)
{
  return Surface{IMG_LoadAVIF_IO(src.get())};
}

/**
 * Load a ICO image directly.
 *
 * If you know you definitely have a ICO image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadICO(IOStreamBase& src)
{
  return Surface{IMG_LoadICO_IO(src.get())};
}

/**
 * Load a CUR image directly.
 *
 * If you know you definitely have a CUR image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadCUR(IOStreamBase& src)
{
  return Surface{IMG_LoadCUR_IO(src.get())};
}

/**
 * Load a GIF image directly.
 *
 * If you know you definitely have a GIF image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadGIF(IOStreamBase& src)
{
  return Surface{IMG_LoadGIF_IO(src.get())};
}

/**
 * Load a JPG image directly.
 *
 * If you know you definitely have a JPG image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadJPG(IOStreamBase& src)
{
  return Surface{IMG_LoadJPG_IO(src.get())};
}

/**
 * Load a JXL image directly.
 *
 * If you know you definitely have a JXL image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadJXL(IOStreamBase& src)
{
  return Surface{IMG_LoadJXL_IO(src.get())};
}

/**
 * Load a LBM image directly.
 *
 * If you know you definitely have a LBM image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadLBM(IOStreamBase& src)
{
  return Surface{IMG_LoadLBM_IO(src.get())};
}

/**
 * Load a PCX image directly.
 *
 * If you know you definitely have a PCX image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadPCX(IOStreamBase& src)
{
  return Surface{IMG_LoadPCX_IO(src.get())};
}

/**
 * Load a PNG image directly.
 *
 * If you know you definitely have a PNG image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadPNG(IOStreamBase& src)
{
  return Surface{IMG_LoadPNG_IO(src.get())};
}

/**
 * Load a PNM image directly.
 *
 * If you know you definitely have a PNM image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadPNM(IOStreamBase& src)
{
  return Surface{IMG_LoadPNM_IO(src.get())};
}

/**
 * Load a SVG image directly.
 *
 * If you know you definitely have a SVG image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadSVG(IOStreamBase& src)
{
  return Surface{IMG_LoadSVG_IO(src.get())};
}

/**
 * Load a QOI image directly.
 *
 * If you know you definitely have a QOI image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadQOI(IOStreamBase& src)
{
  return Surface{IMG_LoadQOI_IO(src.get())};
}

/**
 * Load a TGA image directly.
 *
 * If you know you definitely have a TGA image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadTGA(IOStreamBase& src)
{
  return Surface{IMG_LoadTGA_IO(src.get())};
}

/**
 * Load a TIFF image directly.
 *
 * If you know you definitely have a TIFF image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadTIF(IOStreamBase& src)
{
  return Surface{IMG_LoadTIF_IO(src.get())};
}

/**
 * Load a XCF image directly.
 *
 * If you know you definitely have a XCF image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXPM
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadXCF(IOStreamBase& src)
{
  return Surface{IMG_LoadXCF_IO(src.get())};
}

/**
 * Load a XPM image directly.
 *
 * If you know you definitely have a XPM image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXV
 * @sa LoadWEBP
 */
inline Surface LoadXPM(IOStreamBase& src)
{
  return Surface{IMG_LoadXPM_IO(src.get())};
}

/**
 * Load a XV image directly.
 *
 * If you know you definitely have a XV image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadWEBP
 */
inline Surface LoadXV(IOStreamBase& src)
{
  return Surface{IMG_LoadXV_IO(src.get())};
}

/**
 * Load a WEBP image directly.
 *
 * If you know you definitely have a WEBP image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase to load image data from.
 * @returns SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa LoadAVIF
 * @sa LoadICO
 * @sa LoadCUR
 * @sa LoadBMP
 * @sa LoadGIF
 * @sa LoadJPG
 * @sa LoadJXL
 * @sa LoadLBM
 * @sa LoadPCX
 * @sa LoadPNG
 * @sa LoadPNM
 * @sa LoadSVG
 * @sa LoadQOI
 * @sa LoadTGA
 * @sa LoadTIF
 * @sa LoadXCF
 * @sa LoadXPM
 * @sa LoadXV
 */
inline Surface LoadWEBP(IOStreamBase& src)
{
  return Surface{IMG_LoadWEBP_IO(src.get())};
}

/**
 * Load an SVG image, scaled to a specific size.
 *
 * Since SVG files are resolution-independent, you specify the size you would
 * like the output image to be and it will be generated at those dimensions.
 *
 * Either width or height may be 0 and the image will be auto-sized to
 * preserve aspect ratio.
 *
 * When done with the returned surface, the app should dispose of it with a
 * call to SurfaceRef.reset().
 *
 * @param src an IOStreamBase to load SVG data from.
 * @param width desired width of the generated surface, in pixels.
 * @param height desired height of the generated surface, in pixels.
 * @returns a new SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline Surface LoadSizedSVG(IOStreamBase& src, int width, int height)
{
  return Surface{IMG_LoadSizedSVG_IO(src.get(), width, height)};
}

/**
 * Load an XPM image from a memory array.
 *
 * The returned surface will be an 8bpp indexed surface, if possible,
 * otherwise it will be 32bpp. If you always want 32-bit data, use
 * IMG_ReadXPMFromArrayToRGB888() instead.
 *
 * When done with the returned surface, the app should dispose of it with a
 * call to SDL_DestroySurface().
 *
 * @param xpm a nullptr-terminated array of strings that comprise XPM data.
 * @returns a new SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa ReadXPMFromArrayToRGB888
 */
inline Surface ReadXPMFromArray(char** xpm)
{
  return Surface{IMG_ReadXPMFromArray(xpm)};
}

/**
 * Load an XPM image from a memory array.
 *
 * The returned surface will always be a 32-bit RGB surface. If you want 8-bit
 * indexed colors (and the XPM data allows it), use IMG_ReadXPMFromArray()
 * instead.
 *
 * When done with the returned surface, the app should dispose of it with a
 * call to SDL_DestroySurface().
 *
 * @param xpm a nullptr-terminated array of strings that comprise XPM data.
 * @returns a new SDL surface, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa ReadXPMFromArray
 */
inline Surface ReadXPMFromArrayToRGB888(char** xpm)
{
  return Surface{IMG_ReadXPMFromArrayToRGB888(xpm)};
}

/**
 * Save an SurfaceBase into a AVIF image file.
 *
 * If the file already exists, it will be overwritten.
 *
 * @param surface the SDL surface to save.
 * @param file path on the filesystem to write new file to.
 * @param quality the desired quality, ranging between 0 (lowest) and 100
 *                (highest).
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline bool SaveAVIF(SurfaceBase& surface, StringParam file, int quality)
{
  return IMG_SaveAVIF(surface.get(), file, quality);
}

/**
 * Save an SurfaceBase into AVIF image data, via an IOStreamBase.
 *
 * If you just want to save to a filename, you can use SaveAVIF() instead.
 *
 * @param surface the SDL surface to save.
 * @param dst the IOStreamBase to save the image data to.
 * @param quality the desired quality, ranging between 0 (lowest) and 100
 *                (highest).
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline bool SaveAVIF(SurfaceRef surface, IOStreamBase& dst, int quality)
{
  return IMG_SaveAVIF_IO(surface.get(), dst.get(), false, quality);
}

/**
 * Save an SurfaceBase into a PNG image file.
 *
 * If the file already exists, it will be overwritten.
 *
 * @param surface the SDL surface to save.
 * @param file path on the filesystem to write new file to.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa SavePNG
 */
inline bool SavePNG(SurfaceBase& surface, StringParam file)
{
  return IMG_SavePNG(surface.get(), file);
}

/**
 * Save an SurfaceBase into PNG image data, via an IOStreamBase.
 *
 * If you just want to save to a filename, you can use SavePNG() instead.
 *
 * @param surface the SDL surface to save.
 * @param dst the IOStreamBase to save the image data to.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa SavePNG
 */
inline bool SavePNG(SurfaceRef surface, IOStreamBase& dst)
{
  return IMG_SavePNG_IO(surface.get(), dst.get(), false);
}

/**
 * Save an SurfaceBase into a JPEG image file.
 *
 * If the file already exists, it will be overwritten.
 *
 * @param surface the SDL surface to save.
 * @param file path on the filesystem to write new file to.
 * @param quality [0; 33] is Lowest quality, [34; 66] is Middle quality, [67;
 *                100] is Highest quality.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_image 3.0.0.
 */
inline bool SaveJPG(SurfaceBase& surface, StringParam file, int quality)
{
  return IMG_SaveJPG(surface.get(), file, quality);
}

/**
 * Save an SurfaceBase into JPEG image data, via an IOStreamBase.
 *
 * If you just want to save to a filename, you can use SaveJPG() instead.
 *
 * @param surface the SDL surface to save.
 * @param dst the IOStreamBase to save the image data to.
 * @param quality [0; 33] is Lowest quality, [34; 66] is Middle quality, [67;
 *                100] is Highest quality.
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa SaveJPG
 */
inline bool SaveJPG(SurfaceRef surface, IOStreamBase& dst, int quality)
{
  return IMG_SaveJPG_IO(surface.get(), dst.get(), false, quality);
}

/**
 * Animated image support
 *
 * Currently only animated GIFs and WEBP images are supported.
 *
 * @cat resource
 *
 * @sa Animation
 * @sa AnimationRef
 */
struct AnimationBase : Resource<IMG_Animation*>
{
  using Resource::Resource;

  /**
   * Load an animation from a file.
   *
   * @param file path on the filesystem containing an animated image.
   * @post a new Animation, or nullptr on error.
   *
   * @since This function is available since SDL_image 3.0.0.
   *
   * @sa AnimationRef.reset
   */
  AnimationBase(StringParam file)
    : Resource(IMG_LoadAnimation(file))
  {
  }

  /**
   * Load an animation from an IOStreamBase.
   *
   * @param src an IOStreamBase that data will be read from.
   * @post a new AnimationBase, or nullptr on error.
   *
   * @since This function is available since SDL_image 3.0.0.
   *
   * @sa AnimationRef.reset
   */
  AnimationBase(IOStreamBase& src)
    : Resource(IMG_LoadAnimation_IO(src.get(), false))
  {
  }

  /**
   * Load an animation from an SDL datasource
   *
   * Even though this function accepts a file type, SDL_image may still try
   * other decoders that are capable of detecting file type from the contents of
   * the image data, but may rely on the caller-provided type string for formats
   * that it cannot autodetect. If `type` is nullptr, SDL_image will rely solely
   * on its ability to guess the format.
   *
   * @param src an SDL_IOStream that data will be read from.
   * @param type a filename extension that represent this data ("GIF", etc).
   * @post a new AnimationBase, or nullptr on error.
   *
   * @since This function is available since SDL_image 3.0.0.
   *
   * @sa AnimationRef.reset
   */
  AnimationBase(IOStreamBase& src, StringParam type)
    : Resource(IMG_LoadAnimationTyped_IO(src.get(), false, type))
  {
  }

  /**
   * Get the width in pixels.
   */
  int GetWidth() const { return get()->w; }

  /**
   * Get the height in pixels.
   */
  int GetHeight() const { return get()->h; }

  /**
   * Get the size in pixels.
   */
  Point GetSize() const { return Point(GetWidth(), GetHeight()); }

  /**
   * Return the number of frames.
   */
  int GetCount() const { return get()->count; }

  /**
   * Return the frame image under given index.
   *
   * @param index the index to get frame, within [0, GetCount() - 1]
   */
  SurfaceRef GetFrame(int index) const { return get()->frames[index]; }

  /**
   * Return the frame delay under given index.
   *
   * @param index the index to get frame, within [0, GetCount() - 1]
   */
  int GetDelay(int index) const { return get()->delays[index]; }
};

/**
 * Handle to a non owned animation
 *
 * @cat resource
 *
 * @sa AnimationBase
 * @sa Animation
 */
struct AnimationRef : AnimationBase
{
  using AnimationBase::AnimationBase;

  /**
   * Copy constructor.
   */
  constexpr AnimationRef(const AnimationRef& other)
    : AnimationBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr AnimationRef(AnimationRef&& other)
    : AnimationBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~AnimationRef() = default;

  /**
   * Assignment operator.
   */
  AnimationRef& operator=(AnimationRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Dispose of an AnimationBase and free its resources.
   *
   * @since This function is available since SDL_image 3.0.0.
   *
   * @sa AnimationBase.AnimationBase
   * @sa AnimationBase.AnimationBase
   * @sa AnimationBase.AnimationBase
   */
  void reset(IMG_Animation* newResource = {})
  {
    IMG_FreeAnimation(release(newResource));
  }
};

/**
 * Handle to an owned animation
 *
 * @cat resource
 *
 * @sa AnimationBase
 * @sa AnimationRef
 */
struct Animation : AnimationRef
{
  using AnimationRef::AnimationRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Animation(IMG_Animation* resource = {}) {}

  constexpr Animation(const Animation& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Animation(Animation&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Animation() { reset(); }

  /**
   * Assignment operator.
   */
  Animation& operator=(Animation other)
  {
    AnimationRef::operator=(other.release());
    return *this;
  }
};

/**
 * Load a GIF animation directly.
 *
 * If you know you definitely have a GIF image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase that data will be read from.
 * @returns a new AnimationBase, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa AnimationBase.AnimationBase
 * @sa AnimationRef.reset
 */
inline Animation LoadGIFAnimation(IOStreamBase& src)
{
  return Animation{IMG_LoadGIFAnimation_IO(src.get())};
}

/**
 * Load a WEBP animation directly.
 *
 * If you know you definitely have a WEBP image, you can call this function,
 * which will skip SDL_image's file format detection routines. Generally it's
 * better to use the abstract interfaces; also, there is only an IOStreamBase
 * interface available here.
 *
 * @param src an IOStreamBase that data will be read from.
 * @returns a new AnimationBase, or nullptr on error.
 *
 * @since This function is available since SDL_image 3.0.0.
 *
 * @sa AnimationBase.AnimationBase
 */
inline Animation LoadWEBPAnimation(IOStreamBase& src)
{
  return Animation{IMG_LoadWEBPAnimation_IO(src.get())};
}

#pragma region impl

/// @}

inline SurfaceBase::SurfaceBase(StringParam file)
  : Resource(IMG_Load(file))
{
}

inline SurfaceBase::SurfaceBase(IOStreamBase& src)
  : Resource(IMG_Load_IO(src.get(), false))
{
}

inline TextureBase::TextureBase(RendererBase& renderer, StringParam file)
  : Resource(IMG_LoadTexture(renderer.get(), file))
{
}

inline TextureBase::TextureBase(RendererBase& renderer, IOStream& src)
  : Resource(IMG_LoadTexture_IO(renderer.get(), src.get(), false))
{
}

#pragma endregion impl

} // namespace SDL

#else // defined(SDL3PP_ENABLE_IMAGE) || defined(SDL3PP_DOC)

namespace SDL {

inline SurfaceBase::SurfaceBase(StringParam file)
  : Resource(SDL_LoadBMP(file))
{
}

inline SurfaceBase::SurfaceBase(IOStreamBase& src)
  : Resource(SDL_LoadBMP_IO(src.get(), false))
{
}

inline TextureBase::TextureBase(RendererBase& renderer, StringParam file)
  : Resource(LoadTextureBMP(renderer, file).release())
{
}

inline TextureBase::TextureBase(RendererBase& renderer, IOStream& src)
  : Resource(LoadTextureBMP(renderer, src).release())
{
}

}

#endif // defined(SDL3PP_ENABLE_IMAGE) || defined(SDL3PP_DOC)

#if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
  __has_include(<SDL3_ttf/SDL_ttf.h>)
#define SDL3PP_ENABLE_TTF
#endif

#if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)

#include <SDL3_ttf/SDL_ttf.h>

namespace SDL {

/**
 * @defgroup CategorySDLTTF True type font support
 *
 * Header file for SDL_ttf library
 *
 * This library is a wrapper around the excellent FreeType 2.0 library,
 * available at: https://www.freetype.org/
 *
 * @{
 */

/**
 * Flag to init TTF
 *
 */
constexpr struct TtfInitFlag : InitFlagsExtra
{
} INIT_TTF; ///< Flag to init TTF support

// Forward decl
struct FontBase;

// Forward decl
struct FontRef;

// Forward decl
struct Font;

// Forward decl
struct TextEngineBase;

// Forward decl
struct TextEngineRef;

// Forward decl
struct TextEngine;

// Forward decl
struct TextBase;

// Forward decl
struct TextRef;

// Forward decl
struct Text;

/**
 * @name Font Style Flags
 * @{
 */

/**
 * Font style flags for FontBase
 *
 * These are the flags which can be used to set the style of a font in
 * SDL_ttf. A combination of these flags can be used with functions that set
 * or query font style, such as FontBase.SetStyle or FontBase.GetStyle.
 *
 * @since This datatype is available since SDL_ttf 3.0.0.
 *
 * @sa FontBase.SetStyle
 * @sa FontBase.GetStyle
 */
using FontStyleFlags = Uint32;

constexpr FontStyleFlags STYLE_NORMAL = TTF_STYLE_NORMAL; ///< No special style

constexpr FontStyleFlags STYLE_BOLD = TTF_STYLE_BOLD; ///< Bold style

constexpr FontStyleFlags STYLE_ITALIC = TTF_STYLE_ITALIC; ///< Italic style

constexpr FontStyleFlags STYLE_UNDERLINE =
  TTF_STYLE_UNDERLINE; ///< Underlined text

constexpr FontStyleFlags STYLE_STRIKETHROUGH =
  TTF_STYLE_STRIKETHROUGH; ///< Strikethrough text

/// @}

/**
 * @name Hinting Flags
 * @{
 */

/**
 * Hinting flags for TTF (TrueType Fonts)
 *
 * This enum specifies the level of hinting to be applied to the font
 * rendering. The hinting level determines how much the font's outlines are
 * adjusted for better alignment on the pixel grid.
 *
 * @since This enum is available since SDL_ttf 3.0.0.
 *
 * @sa FontBase.SetHinting
 * @sa FontBase.GetHinting
 */
using HintingFlags = TTF_HintingFlags;

constexpr HintingFlags HINTING_INVALID = TTF_HINTING_INVALID; ///< INVALID

constexpr HintingFlags HINTING_NORMAL =
  TTF_HINTING_NORMAL; ///< Normal hinting applies standard grid-fitting.

/**
 * Light hinting applies subtle adjustments to improve rendering.
 */
constexpr HintingFlags HINTING_LIGHT = TTF_HINTING_LIGHT;

/**
 * Monochrome hinting adjusts the font for better rendering at lower
 * resolutions.
 */
constexpr HintingFlags HINTING_MONO = TTF_HINTING_MONO;

/**
 * No hinting, the font is rendered without any grid-fitting.
 */
constexpr HintingFlags HINTING_NONE = TTF_HINTING_NONE;

/**
 * Light hinting with subpixel rendering for more precise font edges.
 */
constexpr HintingFlags HINTING_LIGHT_SUBPIXEL = TTF_HINTING_LIGHT_SUBPIXEL;

/// @}

/**
 * @name HorizontalAlignments
 * @{
 */

/**
 * The horizontal alignment used when rendering wrapped text.
 *
 * @since This enum is available since SDL_ttf 3.0.0.
 */
using HorizontalAlignment = TTF_HorizontalAlignment;

constexpr HorizontalAlignment HORIZONTAL_ALIGN_INVALID =
  TTF_HORIZONTAL_ALIGN_INVALID; ///< INVALID

constexpr HorizontalAlignment HORIZONTAL_ALIGN_LEFT =
  TTF_HORIZONTAL_ALIGN_LEFT; ///< LEFT

constexpr HorizontalAlignment HORIZONTAL_ALIGN_CENTER =
  TTF_HORIZONTAL_ALIGN_CENTER; ///< CENTER

constexpr HorizontalAlignment HORIZONTAL_ALIGN_RIGHT =
  TTF_HORIZONTAL_ALIGN_RIGHT; ///< RIGHT

/// @}

/**
 * @name Direction Flags
 * @{
 */

/**
 * Direction flags
 *
 * The values here are chosen to match
 * [hb_direction_t](https://harfbuzz.github.io/harfbuzz-hb-common.html#hb-direction-t).
 *
 * @since This enum is available since SDL_ttf 3.0.0.
 *
 * @sa FontBase.SetDirection
 */
using Direction = TTF_Direction;

constexpr Direction DIRECTION_INVALID = TTF_DIRECTION_INVALID; ///< INVALID

constexpr Direction DIRECTION_LTR = TTF_DIRECTION_LTR; ///< Left to Right.

constexpr Direction DIRECTION_RTL = TTF_DIRECTION_RTL; ///< Right to Left.

constexpr Direction DIRECTION_TTB = TTF_DIRECTION_TTB; ///< Top to Bottom.

constexpr Direction DIRECTION_BTT = TTF_DIRECTION_BTT; ///< Bottom to Top.

/// @}

/**
 * @name Image types
 * @{
 */

/**
 * The type of data in a glyph image
 *
 * @since This enum is available since SDL_ttf 3.0.0.
 */
using ImageType = TTF_ImageType;

constexpr ImageType IMAGE_INVALID = TTF_IMAGE_INVALID; ///< INVALID

constexpr ImageType IMAGE_ALPHA =
  TTF_IMAGE_ALPHA; ///< The color channels are white.

constexpr ImageType IMAGE_COLOR =
  TTF_IMAGE_COLOR; ///< The color channels have image data.

/**
 * The alpha channel has signed distance field information.
 */
constexpr ImageType IMAGE_SDF = TTF_IMAGE_SDF;

/// @}

/**
 * @name Flags for SubString
 * @{
 */

/**
 * Flags for SubString
 *
 * @since This datatype is available since SDL_ttf 3.0.0.
 *
 * @sa SubString
 */
using SubStringFlags = Uint32;

constexpr SubStringFlags SUBSTRING_DIRECTION_MASK =
  TTF_SUBSTRING_DIRECTION_MASK; ///< The mask for the flow direction for this
                                ///< substring

constexpr SubStringFlags SUBSTRING_TEXT_START =
  TTF_SUBSTRING_TEXT_START; ///< This substring contains the beginning of the
                            ///< text

/**
 * This substring contains the beginning of line `line_index`
 */
constexpr SubStringFlags SUBSTRING_LINE_START = TTF_SUBSTRING_LINE_START;

/**
 * This substring contains the end of line `line_index`
 */
constexpr SubStringFlags SUBSTRING_LINE_END = TTF_SUBSTRING_LINE_END;

constexpr SubStringFlags SUBSTRING_TEXT_END =
  TTF_SUBSTRING_TEXT_END; ///< This substring contains the end of the text

/// @}

/**
 * @name GPUTextEngineWindings
 * @{
 */

/**
 * The winding order of the vertices returned by TextBase.GetGPUDrawData
 *
 * @since This enum is available since SDL_ttf 3.0.0.
 */
using GPUTextEngineWinding = TTF_GPUTextEngineWinding;

constexpr GPUTextEngineWinding GPU_TEXTENGINE_WINDING_INVALID =
  TTF_GPU_TEXTENGINE_WINDING_INVALID; ///< INVALID

constexpr GPUTextEngineWinding GPU_TEXTENGINE_WINDING_CLOCKWISE =
  TTF_GPU_TEXTENGINE_WINDING_CLOCKWISE; ///< CLOCKWISE

constexpr GPUTextEngineWinding GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE =
  TTF_GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE; ///< COUNTER_CLOCKWISE

/// @}

#ifdef SDL3PP_DOC

/**
 * @name TTF version
 * @{
 * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
 */
#define SDL_TTF_MAJOR_VERSION

#define SDL_TTF_MINOR_VERSION

#define SDL_TTF_MICRO_VERSION

///@}

/**
 * This is the version number macro for the current SDL_ttf version.
 */
#define SDL_TTF_VERSION                                                        \
  SDL_VERSIONNUM(                                                              \
    SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, SDL_TTF_MICRO_VERSION)

/**
 * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
 */
#define SDL_TTF_VERSION_ATLEAST(X, Y, Z)                                       \
  ((SDL_TTF_MAJOR_VERSION >= X) &&                                             \
   (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION >= Y) &&                \
   (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION > Y ||                  \
    SDL_TTF_MICRO_VERSION >= Z))

#endif // SDL3PP_DOC

/**
 * This function gets the version of the dynamically linked SDL_ttf library.
 *
 * @returns SDL_ttf version.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 */
inline int TTF_Version() { return ::TTF_Version(); }

/**
 * Query the version of the FreeType library in use.
 *
 * Either Init() or InitSubSystem() should with with INIT_TTF be called before
 * calling this function.
 *
 * @param major to be filled in with the major version number. Can be nullptr.
 * @param minor to be filled in with the minor version number. Can be nullptr.
 * @param patch to be filled in with the param version number. Can be nullptr.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa Init
 * @sa InitSubSystem
 */
inline void GetFreeTypeVersion(int* major, int* minor, int* patch)
{
  TTF_GetFreeTypeVersion(major, minor, patch);
}

/**
 * Query the version of the HarfBuzz library in use.
 *
 * If HarfBuzz is not available, the version reported is 0.0.0.
 *
 * @param major to be filled in with the major version number. Can be nullptr.
 * @param minor to be filled in with the minor version number. Can be nullptr.
 * @param patch to be filled in with the param version number. Can be nullptr.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 */
inline void GetHarfBuzzVersion(int* major, int* minor, int* patch)
{
  TTF_GetHarfBuzzVersion(major, minor, patch);
}

/**
 * Internal data for TTF_Text
 *
 * @since This struct is available since SDL_ttf 3.0.0.
 */
using TextData = TTF_TextData;

/**
 * The internal structure containing font information.
 *
 * @cat resource
 *
 * @sa Font
 * @sa FontRef
 */
struct FontBase : Resource<TTF_Font*>
{
  using Resource::Resource;

  /**
   * Create a font from a file, using a specified point size.
   *
   * Some .fon fonts will have several sizes embedded in the file, so the point
   * size becomes the index of choosing which size. If the value is too high,
   * the last indexed size will be the default.
   *
   * @param file path to font file.
   * @param ptsize point size to use for the newly-opened font.
   * @post a valid FontBase, or nullptr on failure; call GetError() for more
   *       information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  FontBase(StringParam file, float ptsize)
    : Resource(TTF_OpenFont(file, ptsize))
  {
  }

  /**
   * Create a font from an IOStreamBase, using a specified point size.
   *
   * Some .fon fonts will have several sizes embedded in the file, so the point
   * size becomes the index of choosing which size. If the value is too high,
   * the last indexed size will be the default.
   *
   * @param src an IOStreamBase to provide a font file's data.
   * @param ptsize point size to use for the newly-opened font.
   * @post a valid FontBase, or nullptr on failure; call GetError() for more
   *       information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  FontBase(IOStreamBase& src, float ptsize)
    : Resource(TTF_OpenFontIO(src.get(), false, ptsize))
  {
  }

  /**
   * Create a font with the specified properties.
   *
   * These are the supported properties:
   *
   * - `prop::Font.CREATE_FILENAME_STRING`: the font file to open, if an
   *   IOStreamBase isn't being used. This is required if
   *   `prop::Font.CREATE_IOSTREAM_POINTER` and
   *   `prop::Font.CREATE_EXISTING_FONT` aren't set.
   * - `prop::Font.CREATE_IOSTREAM_POINTER`: an IOStreamBase containing the
   *   font to be opened. This should not be closed until the font is closed.
   *   This is required if `prop::Font.CREATE_FILENAME_STRING` and
   *   `prop::Font.CREATE_EXISTING_FONT` aren't set.
   * - `prop::Font.CREATE_IOSTREAM_OFFSET_NUMBER`: the offset in the iostream
   *   for the beginning of the font, defaults to 0.
   * - `prop::Font.CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN`: true if closing the
   *   font should also close the associated IOStreamBase.
   * - `prop::Font.CREATE_SIZE_FLOAT`: the point size of the font. Some .fon
   *   fonts will have several sizes embedded in the file, so the point size
   *   becomes the index of choosing which size. If the value is too high, the
   *   last indexed size will be the default.
   * - `prop::Font.CREATE_FACE_NUMBER`: the face index of the font, if the
   *   font contains multiple font faces.
   * - `prop::Font.CREATE_HORIZONTAL_DPI_NUMBER`: the horizontal DPI to use
   *   for font rendering, defaults to
   *   `prop::Font.CREATE_VERTICAL_DPI_NUMBER` if set, or 72 otherwise.
   * - `prop::Font.CREATE_VERTICAL_DPI_NUMBER`: the vertical DPI to use for
   *   font rendering, defaults to `prop::Font.CREATE_HORIZONTAL_DPI_NUMBER`
   *   if set, or 72 otherwise.
   * - `prop::Font.CREATE_EXISTING_FONT`: an optional FontBase that, if set,
   *   will be used as the font data source and the initial size and style of
   *   the new font.
   *
   * @param props the properties to use.
   * @post a valid FontBase, or nullptr on failure; call GetError() for more
   *       information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  FontBase(PropertiesBase& props)
    : Resource(TTF_OpenFontWithProperties(props.get()))
  {
  }

  /**
   * Create a copy of an existing font.
   *
   * The copy will be distinct from the original, but will share the font file
   * and have the same size and style as the original.
   *
   * @returns a valid Font, or nullptr on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               original font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  Font Copy() const;

  /**
   * Get the properties associated with a font.
   *
   * The following read-write properties are provided by SDL:
   *
   * - `prop::Font.OUTLINE_LINE_CAP_NUMBER`: The FT_Stroker_LineCap value
   *   used when setting the font outline, defaults to
   *   `FT_STROKER_LINECAP_ROUND`.
   * - `prop::Font.OUTLINE_LINE_JOIN_NUMBER`: The FT_Stroker_LineJoin value
   *   used when setting the font outline, defaults to
   *   `FT_STROKER_LINEJOIN_ROUND`.
   * - `prop::Font.OUTLINE_MITER_LIMIT_NUMBER`: The FT_Fixed miter limit used
   *   when setting the font outline, defaults to 0.
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  PropertiesRef GetProperties() { return TTF_GetFontProperties(get()); }

  /**
   * Get the font generation.
   *
   * The generation is incremented each time font properties change that require
   * rebuilding glyphs, such as style, size, etc.
   *
   * @returns the font generation or 0 on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  Uint32 GetGeneration() const { return TTF_GetFontGeneration(get()); }

  /**
   * Add a fallback font.
   *
   * Add a font that will be used for glyphs that are not in the current font.
   * The fallback font should have the same size and style as the current font.
   *
   * If there are multiple fallback fonts, they are used in the order added.
   *
   * This updates any TextBase objects using this font.
   *
   * @param fallback the font to add as a fallback.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created
   *               both fonts.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.ClearFallbacks
   * @sa FontBase.RemoveFallback
   */
  bool AddFallback(FontBase& fallback)
  {
    return TTF_AddFallbackFont(get(), fallback.get());
  }

  /**
   * Remove a fallback font.
   *
   * This updates any TextBase objects using this font.
   *
   * @param fallback the font to remove as a fallback.
   *
   * @threadsafety This function should be called on the thread that created
   *               both fonts.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.AddFallback
   * @sa FontBase.ClearFallbacks
   */
  void RemoveFallback(FontBase& fallback)
  {
    TTF_RemoveFallbackFont(get(), fallback.get());
  }

  /**
   * Remove all fallback fonts.
   *
   * This updates any TextBase objects using this font.
   *
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.AddFallback
   * @sa FontBase.RemoveFallback
   */
  void ClearFallbacks() { TTF_ClearFallbackFonts(get()); }

  /**
   * Set a font's size dynamically.
   *
   * This updates any TextBase objects using this font, and clears
   * already-generated glyphs, if any, from the cache.
   *
   * @param ptsize the new point size.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetSize
   */
  bool SetSize(float ptsize) { return TTF_SetFontSize(get(), ptsize); }

  /**
   * Set font size dynamically with target resolutions, in dots per inch.
   *
   * This updates any TextBase objects using this font, and clears
   * already-generated glyphs, if any, from the cache.
   *
   * @param ptsize the new point size.
   * @param hdpi the target horizontal DPI.
   * @param vdpi the target vertical DPI.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetSize
   * @sa TTF_GetFontSizeDPI
   */
  bool SetSizeDPI(float ptsize, int hdpi, int vdpi)
  {
    return TTF_SetFontSizeDPI(get(), ptsize, hdpi, vdpi);
  }

  /**
   * Get the size of a font.
   *
   * @returns the size of the font, or 0.0f on failure; call GetError() for
   *          more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetSize
   * @sa FontBase.SetSizeDPI
   */
  float GetSize() const { return TTF_GetFontSize(get()); }

  /**
   * Get font target resolutions, in dots per inch.
   *
   * @param hdpi a pointer filled in with the target horizontal DPI.
   * @param vdpi a pointer filled in with the target vertical DPI.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetSizeDPI
   */
  bool GetDPI(int* hdpi, int* vdpi) const
  {
    return TTF_GetFontDPI(get(), hdpi, vdpi);
  }

  /**
   * Set a font's current style.
   *
   * This updates any TextBase objects using this font, and clears
   * already-generated glyphs, if any, from the cache.
   *
   * The font styles are a set of bit flags, OR'd together:
   *
   * - `STYLE_NORMAL` (is zero)
   * - `STYLE_BOLD`
   * - `STYLE_ITALIC`
   * - `STYLE_UNDERLINE`
   * - `STYLE_STRIKETHROUGH`
   *
   * @param style the new style values to set, OR'd together.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetStyle
   */
  void SetStyle(FontStyleFlags style) { TTF_SetFontStyle(get(), style); }

  /**
   * Query a font's current style.
   *
   * The font styles are a set of bit flags, OR'd together:
   *
   * - `STYLE_NORMAL` (is zero)
   * - `STYLE_BOLD`
   * - `STYLE_ITALIC`
   * - `STYLE_UNDERLINE`
   * - `STYLE_STRIKETHROUGH`
   *
   * @returns the current font style, as a set of bit flags.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetStyle
   */
  FontStyleFlags GetStyle() const { return TTF_GetFontStyle(get()); }

  /**
   * Set a font's current outline.
   *
   * This uses the font properties `prop::Font.OUTLINE_LINE_CAP_NUMBER`,
   * `prop::Font.OUTLINE_LINE_JOIN_NUMBER`, and
   * `prop::Font.OUTLINE_MITER_LIMIT_NUMBER` when setting the font outline.
   *
   * This updates any TextBase objects using this font, and clears
   * already-generated glyphs, if any, from the cache.
   *
   * @param outline positive outline value, 0 to default.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetOutline
   */
  bool SetOutline(int outline) { return TTF_SetFontOutline(get(), outline); }

  /**
   * Query a font's current outline.
   *
   * @returns the font's current outline value.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetOutline
   */
  int GetOutline() const { return TTF_GetFontOutline(get()); }

  /**
   * Set a font's current hinter setting.
   *
   * This updates any TextBase objects using this font, and clears
   * already-generated glyphs, if any, from the cache.
   *
   * The hinter setting is a single value:
   *
   * - `HINTING_NORMAL`
   * - `HINTING_LIGHT`
   * - `HINTING_MONO`
   * - `HINTING_NONE`
   * - `HINTING_LIGHT_SUBPIXEL` (available in SDL_ttf 3.0.0 and later)
   *
   * @param hinting the new hinter setting.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetHinting
   */
  void SetHinting(HintingFlags hinting) { TTF_SetFontHinting(get(), hinting); }

  /**
   * Query the number of faces of a font.
   *
   * @returns the number of FreeType font faces.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  int GetNumFaces() const { return TTF_GetNumFontFaces(get()); }

  /**
   * Query a font's current FreeType hinter setting.
   *
   * The hinter setting is a single value:
   *
   * - `HINTING_NORMAL`
   * - `HINTING_LIGHT`
   * - `HINTING_MONO`
   * - `HINTING_NONE`
   * - `HINTING_LIGHT_SUBPIXEL` (available in SDL_ttf 3.0.0 and later)
   *
   * @returns the font's current hinter value, or HINTING_INVALID if the
   *          font is invalid.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetHinting
   */
  HintingFlags GetHinting() const { return TTF_GetFontHinting(get()); }

  /**
   * Enable Signed Distance Field rendering for a font.
   *
   * SDF is a technique that helps fonts look sharp even when scaling and
   * rotating, and requires special shader support for display.
   *
   * This works with Blended APIs, and generates the raw signed distance values
   * in the alpha channel of the resulting texture.
   *
   * This updates any TextBase objects using this font, and clears
   * already-generated glyphs, if any, from the cache.
   *
   * @param enabled true to enable SDF, false to disable.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetSDF
   */
  bool SetSDF(bool enabled) { return TTF_SetFontSDF(get(), enabled); }

  /**
   * Query whether Signed Distance Field rendering is enabled for a font.
   *
   * @returns true if enabled, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetSDF
   */
  bool GetSDF() const { return TTF_GetFontSDF(get()); }

#if SDL_TTF_VERSION_ATLEAST(3, 2, 2)

  /**
   * Query a font's weight, in terms of the lightness/heaviness of the strokes.
   *
   * @returns the font's current weight.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.2.2.
   */
  int GetWeight() const { return TTF_GetFontWeight(get()); }

#endif // SDL_TTF_VERSION_ATLEAST(3, 2, 2)

  /**
   * Set a font's current wrap alignment option.
   *
   * This updates any TextBase objects using this font.
   *
   * @param align the new wrap alignment option.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetWrapAlignment
   */
  void SetWrapAlignment(HorizontalAlignment align)
  {
    TTF_SetFontWrapAlignment(get(), align);
  }

  /**
   * Query a font's current wrap alignment option.
   *
   * @returns the font's current wrap alignment option.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetWrapAlignment
   */
  HorizontalAlignment GetWrapAlignment() const
  {
    return TTF_GetFontWrapAlignment(get());
  }

  /**
   * Query the total height of a font.
   *
   * This is usually equal to point size.
   *
   * @returns the font's height.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  int GetHeight() const { return TTF_GetFontHeight(get()); }

  /**
   * Query the offset from the baseline to the top of a font.
   *
   * This is a positive value, relative to the baseline.
   *
   * @returns the font's ascent.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  int GetAscent() const { return TTF_GetFontAscent(get()); }

  /**
   * Query the offset from the baseline to the bottom of a font.
   *
   * This is a negative value, relative to the baseline.
   *
   * @returns the font's descent.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  int GetDescent() const { return TTF_GetFontDescent(get()); }

  /**
   * Set the spacing between lines of text for a font.
   *
   * This updates any TextBase objects using this font.
   *
   * @param lineskip the new line spacing for the font.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetLineSkip
   */
  void SetLineSkip(int lineskip) { TTF_SetFontLineSkip(get(), lineskip); }

  /**
   * Query the spacing between lines of text for a font.
   *
   * @returns the font's recommended spacing.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetLineSkip
   */
  int GetLineSkip() const { return TTF_GetFontLineSkip(get()); }

  /**
   * Set if kerning is enabled for a font.
   *
   * Newly-opened fonts default to allowing kerning. This is generally a good
   * policy unless you have a strong reason to disable it, as it tends to
   * produce better rendering (with kerning disabled, some fonts might render
   * the word `kerning` as something that looks like `keming` for example).
   *
   * This updates any TextBase objects using this font.
   *
   * @param enabled true to enable kerning, false to disable.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.GetKerning
   */
  void SetKerning(bool enabled) { TTF_SetFontKerning(get(), enabled); }

  /**
   * Query whether or not kerning is enabled for a font.
   *
   * @returns true if kerning is enabled, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetKerning
   */
  bool GetKerning() const { return TTF_GetFontKerning(get()); }

  /**
   * Query whether a font is fixed-width.
   *
   * A "fixed-width" font means all glyphs are the same width across; a
   * lowercase 'i' will be the same size across as a capital 'W', for example.
   * This is common for terminals and text editors, and other apps that treat
   * text as a grid. Most other things (WYSIWYG word processors, web pages, etc)
   * are more likely to not be fixed-width in most cases.
   *
   * @returns true if the font is fixed-width, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool IsFixedWidth() const { return TTF_FontIsFixedWidth(get()); }

  /**
   * Query whether a font is scalable or not.
   *
   * Scalability lets us distinguish between outline and bitmap fonts.
   *
   * @returns true if the font is scalable, false otherwise.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.SetSDF
   */
  bool IsScalable() const { return TTF_FontIsScalable(get()); }

  /**
   * Query a font's family name.
   *
   * This string is dictated by the contents of the font file.
   *
   * Note that the returned string is to internal storage, and should not be
   * modified or free'd by the caller. The string becomes invalid, with the rest
   * of the font, when `font` is destroyed.
   *
   * @returns the font's family name.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  const char* GetFamilyName() const { return TTF_GetFontFamilyName(get()); }

  /**
   * Query a font's style name.
   *
   * This string is dictated by the contents of the font file.
   *
   * Note that the returned string is to internal storage, and should not be
   * modified or free'd by the caller. The string becomes invalid, with the rest
   * of the font, when `font` is destroyed.
   *
   * @returns the font's style name.
   *
   * @threadsafety It is safe to call this function from any thread.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  const char* GetStyleName() const { return TTF_GetFontStyleName(get()); }

  /**
   * Set the direction to be used for text shaping by a font.
   *
   * This function only supports left-to-right text shaping if SDL_ttf was not
   * built with HarfBuzz support.
   *
   * This updates any TextBase objects using this font.
   *
   * @param direction the new direction for text to flow.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool SetDirection(Direction direction)
  {
    return TTF_SetFontDirection(get(), direction);
  }

  /**
   * Get the direction to be used for text shaping by a font.
   *
   * This defaults to DIRECTION_INVALID if it hasn't been set.
   *
   * @returns the direction to be used for text shaping.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  Direction GetDirection() const { return TTF_GetFontDirection(get()); }

  /**
   * Set the script to be used for text shaping by a font.
   *
   * This returns false if SDL_ttf isn't built with HarfBuzz support.
   *
   * This updates any TextBase objects using this font.
   *
   * @param script an
   * [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html).
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa StringToTag
   */
  bool SetScript(Uint32 script) { return TTF_SetFontScript(get(), script); }

  /**
   * Get the script used for text shaping a font.
   *
   * @returns an
   * [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html) or 0 if
   * a script hasn't been set.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TagToString
   */
  Uint32 GetScript() const { return TTF_GetFontScript(get()); }

  /**
   * Get the script used by a 32-bit codepoint.
   *
   * @param ch the character code to check.
   * @returns an
   *          [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)
   *          on success, or 0 on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function is thread-safe.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TagToString
   */
  static Uint32 GetGlyphScript(Uint32 ch) { return TTF_GetGlyphScript(ch); }

  /**
   * Set language to be used for text shaping by a font.
   *
   * If SDL_ttf was not built with HarfBuzz support, this function returns
   * false.
   *
   * This updates any TextBase objects using this font.
   *
   * @param language_bcp47 a null-terminated string containing the desired
   *                       language's BCP47 code. Or null to reset the value.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool SetLanguage(StringParam language_bcp47)
  {
    return TTF_SetFontLanguage(get(), language_bcp47);
  }

  /**
   * Check whether a glyph is provided by the font for a UNICODE codepoint.
   *
   * @param ch the codepoint to check.
   * @returns true if font provides a glyph for this character, false if not.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool HasGlyph(Uint32 ch) const { return TTF_FontHasGlyph(get(), ch); }

  /**
   * Get the pixel image for a UNICODE codepoint.
   *
   * @param ch the codepoint to check.
   * @param image_type a pointer filled in with the glyph image type, may be
   *                   nullptr.
   * @returns an SurfaceBase containing the glyph, or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  SurfaceRef GetGlyphImage(Uint32 ch, ImageType* image_type = nullptr) const
  {
    return TTF_GetGlyphImage(get(), ch, image_type);
  }

  /**
   * Get the pixel image for a character index.
   *
   * This is useful for text engine implementations, which can call this with
   * the `glyph_index` in a TTF_CopyOperation
   *
   * @param glyph_index the index of the glyph to return.
   * @param image_type a pointer filled in with the glyph image type, may be
   *                   nullptr.
   * @returns an SurfaceRef containing the glyph, or nullptr on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  SurfaceRef GetGlyphImageForIndex(Uint32 glyph_index,
                                   ImageType* image_type = nullptr) const
  {
    return TTF_GetGlyphImageForIndex(get(), glyph_index, image_type);
  }

  /**
   * Query the metrics (dimensions) of a font's glyph for a UNICODE codepoint.
   *
   * To understand what these metrics mean, here is a useful link:
   *
   * https://freetype.sourceforge.net/freetype2/docs/tutorial/step2.html
   *
   * @param ch the codepoint to check.
   * @param minx a pointer filled in with the minimum x coordinate of the glyph
   *             from the left edge of its bounding box. This value may be
   *             negative.
   * @param maxx a pointer filled in with the maximum x coordinate of the glyph
   *             from the left edge of its bounding box.
   * @param miny a pointer filled in with the minimum y coordinate of the glyph
   *             from the bottom edge of its bounding box. This value may be
   *             negative.
   * @param maxy a pointer filled in with the maximum y coordinate of the glyph
   *             from the bottom edge of its bounding box.
   * @param advance a pointer filled in with the distance to the next glyph from
   *                the left edge of this glyph's bounding box.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetGlyphMetrics(Uint32 ch,
                       int* minx,
                       int* maxx,
                       int* miny,
                       int* maxy,
                       int* advance) const
  {
    return TTF_GetGlyphMetrics(get(), ch, minx, maxx, miny, maxy, advance);
  }

  /**
   * Query the kerning size between the glyphs of two UNICODE codepoints.
   *
   * @param previous_ch the previous codepoint.
   * @param ch the current codepoint.
   * @returns the kerning size between the two glyphs, in pixels, on success or
   *          false on failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  std::optional<int> GetGlyphKerning(Uint32 previous_ch, Uint32 ch) const
  {
    if (int r; TTF_GetGlyphKerning(get(), previous_ch, ch, &r)) return r;
    return std::nullopt;
  }

  /**
   * Calculate the dimensions of a rendered string of UTF-8 text.
   *
   * This will report the width and height, in pixels, of the space that the
   * specified string will take to fully render.
   *
   * @param text text to calculate, in UTF-8 encoding.
   * @returns return a Point with the width, height on success or std::nullopt
   *          on failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  std::optional<Point> GetStringSize(std::string_view text) const
  {
    if (Point p; GetStringSize(text, &p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Calculate the dimensions of a rendered string of UTF-8 text.
   *
   * This will report the width and height, in pixels, of the space that the
   * specified string will take to fully render.
   *
   * @param text text to calculate, in UTF-8 encoding.
   * @param w will be filled with width, in pixels, on return.
   * @param h will be filled with height, in pixels, on return.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetStringSize(std::string_view text, int* w, int* h) const
  {
    return TTF_GetStringSize(get(), text.data(), text.size(), w, h);
  }

  /**
   * Calculate the dimensions of a rendered string of UTF-8 text.
   *
   * This will report the width and height, in pixels, of the space that the
   * specified string will take to fully render.
   *
   * Text is wrapped to multiple lines on line endings and on word boundaries if
   * it extends beyond `wrap_width` in pixels.
   *
   * If wrap_width is 0, this function will only wrap on newline characters.
   *
   * @param text text to calculate, in UTF-8 encoding.
   * @param wrap_width the maximum width or 0 to wrap on newline characters.
   * @returns return a Point with the width, height on success or std::nullopt
   *          on failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  std::optional<Point> GetStringSizeWrapped(std::string_view text,
                                            int wrap_width) const
  {
    if (Point p; GetStringSizeWrapped(text, wrap_width, &p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Calculate the dimensions of a rendered string of UTF-8 text.
   *
   * This will report the width and height, in pixels, of the space that the
   * specified string will take to fully render.
   *
   * Text is wrapped to multiple lines on line endings and on word boundaries if
   * it extends beyond `wrap_width` in pixels.
   *
   * If wrap_width is 0, this function will only wrap on newline characters.
   *
   * @param text text to calculate, in UTF-8 encoding.
   * @param wrap_width the maximum width or 0 to wrap on newline characters.
   * @param w will be filled with width, in pixels, on return.
   * @param h will be filled with height, in pixels, on return.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetStringSizeWrapped(std::string_view text,
                            int wrap_width,
                            int* w,
                            int* h) const
  {
    return TTF_GetStringSizeWrapped(
      get(), text.data(), text.size(), wrap_width, w, h);
  }

  /**
   * Calculate how much of a UTF-8 string will fit in a given width.
   *
   * This reports the number of characters that can be rendered before reaching
   * `max_width`.
   *
   * This does not need to render the string to do this calculation.
   *
   * @param text text to calculate, in UTF-8 encoding.
   * @param max_width maximum width, in pixels, available for the string, or 0
   *                  for unbounded width.
   * @param measured_width a pointer filled in with the width, in pixels, of the
   *                       string that will fit, may be nullptr.
   * @param measured_length a pointer filled in with the length, in bytes, of
   *                        the string that will fit, may be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool MeasureString(std::string_view text,
                     int max_width,
                     int* measured_width,
                     size_t* measured_length) const
  {
    return TTF_MeasureString(get(),
                             text.data(),
                             text.size(),
                             max_width,
                             measured_width,
                             measured_length);
  }

  /**
   * Render UTF-8 text at fast quality to a new 8-bit surface.
   *
   * This function will allocate a new 8-bit, palettized surface. The surface's
   * 0 pixel will be the colorkey, giving a transparent background. The 1 pixel
   * will be set to the text color.
   *
   * This will not word-wrap the string; you'll get a surface with a single line
   * of text, as long as the string requires. You can use
   * FontBase.RenderText_Solid_Wrapped() instead if you need to wrap the output
   * to multiple lines.
   *
   * This will not wrap on newline characters.
   *
   * You can render at other quality levels with FontBase.RenderText_Shaded,
   * FontBase.RenderText_Blended, and FontBase.RenderText_LCD.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @returns a new 8-bit, palettized surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended
   * @sa FontBase.RenderText_LCD
   * @sa FontBase.RenderText_Shaded
   * @sa FontBase.RenderText_Solid
   * @sa FontBase.RenderText_Solid_Wrapped
   */
  Surface RenderText_Solid(std::string_view text, Color fg) const
  {
    return Surface{TTF_RenderText_Solid(get(), text.data(), text.size(), fg)};
  }

  /**
   * Render word-wrapped UTF-8 text at fast quality to a new 8-bit surface.
   *
   * This function will allocate a new 8-bit, palettized surface. The surface's
   * 0 pixel will be the colorkey, giving a transparent background. The 1 pixel
   * will be set to the text color.
   *
   * Text is wrapped to multiple lines on line endings and on word boundaries if
   * it extends beyond `wrapLength` in pixels.
   *
   * If wrapLength is 0, this function will only wrap on newline characters.
   *
   * You can render at other quality levels with
   * FontBase.RenderText_Shaded_Wrapped, FontBase.RenderText_Blended_Wrapped,
   * and FontBase.RenderText_LCD_Wrapped.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @param wrapLength the maximum width of the text surface or 0 to wrap on
   *                   newline characters.
   * @returns a new 8-bit, palettized surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended_Wrapped
   * @sa FontBase.RenderText_LCD_Wrapped
   * @sa FontBase.RenderText_Shaded_Wrapped
   * @sa FontBase.RenderText_Solid
   */
  Surface RenderText_Solid_Wrapped(std::string_view text,
                                   Color fg,
                                   int wrapLength) const
  {
    return Surface{TTF_RenderText_Solid_Wrapped(
      get(), text.data(), text.size(), fg, wrapLength)};
  }

  /**
   * Render a single 32-bit glyph at fast quality to a new 8-bit surface.
   *
   * This function will allocate a new 8-bit, palettized surface. The surface's
   * 0 pixel will be the colorkey, giving a transparent background. The 1 pixel
   * will be set to the text color.
   *
   * The glyph is rendered without any padding or centering in the X direction,
   * and aligned normally in the Y direction.
   *
   * You can render at other quality levels with FontBase.RenderGlyph_Shaded,
   * FontBase.RenderGlyph_Blended, and FontBase.RenderGlyph_LCD.
   *
   * @param ch the character to render.
   * @param fg the foreground color for the text.
   * @returns a new 8-bit, palettized surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderGlyph_Blended
   * @sa FontBase.RenderGlyph_LCD
   * @sa FontBase.RenderGlyph_Shaded
   */
  Surface RenderGlyph_Solid(Uint32 ch, Color fg) const
  {
    return Surface{TTF_RenderGlyph_Solid(get(), ch, fg)};
  }

  /**
   * Render UTF-8 text at high quality to a new 8-bit surface.
   *
   * This function will allocate a new 8-bit, palettized surface. The surface's
   * 0 pixel will be the specified background color, while other pixels have
   * varying degrees of the foreground color. This function returns the new
   * surface, or nullptr if there was an error.
   *
   * This will not word-wrap the string; you'll get a surface with a single line
   * of text, as long as the string requires. You can use
   * FontBase.RenderText_Shaded_Wrapped() instead if you need to wrap the output
   * to multiple lines.
   *
   * This will not wrap on newline characters.
   *
   * You can render at other quality levels with FontBase.RenderText_Solid,
   * FontBase.RenderText_Blended, and FontBase.RenderText_LCD.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @param bg the background color for the text.
   * @returns a new 8-bit, palettized surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended
   * @sa FontBase.RenderText_LCD
   * @sa FontBase.RenderText_Shaded_Wrapped
   * @sa FontBase.RenderText_Solid
   */
  Surface RenderText_Shaded(std::string_view text, Color fg, Color bg) const
  {
    return Surface{
      TTF_RenderText_Shaded(get(), text.data(), text.size(), fg, bg)};
  }

  /**
   * Render word-wrapped UTF-8 text at high quality to a new 8-bit surface.
   *
   * This function will allocate a new 8-bit, palettized surface. The surface's
   * 0 pixel will be the specified background color, while other pixels have
   * varying degrees of the foreground color. This function returns the new
   * surface, or nullptr if there was an error.
   *
   * Text is wrapped to multiple lines on line endings and on word boundaries if
   * it extends beyond `wrap_width` in pixels.
   *
   * If wrap_width is 0, this function will only wrap on newline characters.
   *
   * You can render at other quality levels with
   * FontBase.RenderText_Solid_Wrapped, FontBase.RenderText_Blended_Wrapped, and
   * FontBase.RenderText_LCD_Wrapped.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @param bg the background color for the text.
   * @param wrap_width the maximum width of the text surface or 0 to wrap on
   *                   newline characters.
   * @returns a new 8-bit, palettized surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended_Wrapped
   * @sa FontBase.RenderText_LCD_Wrapped
   * @sa FontBase.RenderText_Shaded
   * @sa FontBase.RenderText_Solid_Wrapped
   */
  Surface RenderText_Shaded_Wrapped(std::string_view text,
                                    Color fg,
                                    Color bg,
                                    int wrap_width) const
  {
    return Surface{TTF_RenderText_Shaded_Wrapped(
      get(), text.data(), text.size(), fg, bg, wrap_width)};
  }

  /**
   * Render a single UNICODE codepoint at high quality to a new 8-bit surface.
   *
   * This function will allocate a new 8-bit, palettized surface. The surface's
   * 0 pixel will be the specified background color, while other pixels have
   * varying degrees of the foreground color. This function returns the new
   * surface, or nullptr if there was an error.
   *
   * The glyph is rendered without any padding or centering in the X direction,
   * and aligned normally in the Y direction.
   *
   * You can render at other quality levels with FontBase.RenderGlyph_Solid,
   * FontBase.RenderGlyph_Blended, and FontBase.RenderGlyph_LCD.
   *
   * @param ch the codepoint to render.
   * @param fg the foreground color for the text.
   * @param bg the background color for the text.
   * @returns a new 8-bit, palettized surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderGlyph_Blended
   * @sa FontBase.RenderGlyph_LCD
   * @sa FontBase.RenderGlyph_Solid
   */
  Surface RenderGlyph_Shaded(Uint32 ch, Color fg, Color bg) const
  {
    return Surface{TTF_RenderGlyph_Shaded(get(), ch, fg, bg)};
  }

  /**
   * Render UTF-8 text at high quality to a new ARGB surface.
   *
   * This function will allocate a new 32-bit, ARGB surface, using alpha
   * blending to dither the font with the given color. This function returns the
   * new surface, or nullptr if there was an error.
   *
   * This will not word-wrap the string; you'll get a surface with a single line
   * of text, as long as the string requires. You can use
   * FontBase.RenderText_Blended_Wrapped() instead if you need to wrap the
   * output to multiple lines.
   *
   * This will not wrap on newline characters.
   *
   * You can render at other quality levels with FontBase.RenderText_Solid,
   * FontBase.RenderText_Shaded, and FontBase.RenderText_LCD.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @returns a new 32-bit, ARGB surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended_Wrapped
   * @sa FontBase.RenderText_LCD
   * @sa FontBase.RenderText_Shaded
   * @sa FontBase.RenderText_Solid
   */
  Surface RenderText_Blended(std::string_view text, Color fg) const
  {
    return Surface{TTF_RenderText_Blended(get(), text.data(), text.size(), fg)};
  }

  /**
   * Render word-wrapped UTF-8 text at high quality to a new ARGB surface.
   *
   * This function will allocate a new 32-bit, ARGB surface, using alpha
   * blending to dither the font with the given color. This function returns the
   * new surface, or nullptr if there was an error.
   *
   * Text is wrapped to multiple lines on line endings and on word boundaries if
   * it extends beyond `wrap_width` in pixels.
   *
   * If wrap_width is 0, this function will only wrap on newline characters.
   *
   * You can render at other quality levels with
   * FontBase.RenderText_Solid_Wrapped, FontBase.RenderText_Shaded_Wrapped, and
   * FontBase.RenderText_LCD_Wrapped.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @param wrap_width the maximum width of the text surface or 0 to wrap on
   *                   newline characters.
   * @returns a new 32-bit, ARGB surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended
   * @sa FontBase.RenderText_LCD_Wrapped
   * @sa FontBase.RenderText_Shaded_Wrapped
   * @sa FontBase.RenderText_Solid_Wrapped
   */
  Surface RenderText_Blended_Wrapped(std::string_view text,
                                     Color fg,
                                     int wrap_width) const
  {
    return Surface{TTF_RenderText_Blended_Wrapped(
      get(), text.data(), text.size(), fg, wrap_width)};
  }

  /**
   * Render a single UNICODE codepoint at high quality to a new ARGB surface.
   *
   * This function will allocate a new 32-bit, ARGB surface, using alpha
   * blending to dither the font with the given color. This function returns the
   * new surface, or nullptr if there was an error.
   *
   * The glyph is rendered without any padding or centering in the X direction,
   * and aligned normally in the Y direction.
   *
   * You can render at other quality levels with FontBase.RenderGlyph_Solid,
   * FontBase.RenderGlyph_Shaded, and FontBase.RenderGlyph_LCD.
   *
   * @param ch the codepoint to render.
   * @param fg the foreground color for the text.
   * @returns a new 32-bit, ARGB surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderGlyph_LCD
   * @sa FontBase.RenderGlyph_Shaded
   * @sa FontBase.RenderGlyph_Solid
   */
  Surface RenderGlyph_Blended(Uint32 ch, Color fg) const
  {
    return Surface{TTF_RenderGlyph_Blended(get(), ch, fg)};
  }

  /**
   * Render UTF-8 text at LCD subpixel quality to a new ARGB surface.
   *
   * This function will allocate a new 32-bit, ARGB surface, and render
   * alpha-blended text using FreeType's LCD subpixel rendering. This function
   * returns the new surface, or nullptr if there was an error.
   *
   * This will not word-wrap the string; you'll get a surface with a single line
   * of text, as long as the string requires. You can use
   * FontBase.RenderText_LCD_Wrapped() instead if you need to wrap the output to
   * multiple lines.
   *
   * This will not wrap on newline characters.
   *
   * You can render at other quality levels with FontBase.RenderText_Solid,
   * FontBase.RenderText_Shaded, and FontBase.RenderText_Blended.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @param bg the background color for the text.
   * @returns a new 32-bit, ARGB surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended
   * @sa FontBase.RenderText_LCD_Wrapped
   * @sa FontBase.RenderText_Shaded
   * @sa FontBase.RenderText_Solid
   */
  Surface RenderText_LCD(std::string_view text, Color fg, Color bg) const
  {
    return Surface{TTF_RenderText_LCD(get(), text.data(), text.size(), fg, bg)};
  }

  /**
   * Render word-wrapped UTF-8 text at LCD subpixel quality to a new ARGB
   * surface.
   *
   * This function will allocate a new 32-bit, ARGB surface, and render
   * alpha-blended text using FreeType's LCD subpixel rendering. This function
   * returns the new surface, or nullptr if there was an error.
   *
   * Text is wrapped to multiple lines on line endings and on word boundaries if
   * it extends beyond `wrap_width` in pixels.
   *
   * If wrap_width is 0, this function will only wrap on newline characters.
   *
   * You can render at other quality levels with
   * FontBase.RenderText_Solid_Wrapped, FontBase.RenderText_Shaded_Wrapped, and
   * FontBase.RenderText_Blended_Wrapped.
   *
   * @param text text to render, in UTF-8 encoding.
   * @param fg the foreground color for the text.
   * @param bg the background color for the text.
   * @param wrap_width the maximum width of the text surface or 0 to wrap on
   *                   newline characters.
   * @returns a new 32-bit, ARGB surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderText_Blended_Wrapped
   * @sa FontBase.RenderText_LCD
   * @sa FontBase.RenderText_Shaded_Wrapped
   * @sa FontBase.RenderText_Solid_Wrapped
   */
  Surface RenderText_LCD_Wrapped(std::string_view text,
                                 Color fg,
                                 Color bg,
                                 int wrap_width) const
  {
    return Surface{TTF_RenderText_LCD_Wrapped(
      get(), text.data(), text.size(), fg, bg, wrap_width)};
  }

  /**
   * Render a single UNICODE codepoint at LCD subpixel quality to a new ARGB
   * surface.
   *
   * This function will allocate a new 32-bit, ARGB surface, and render
   * alpha-blended text using FreeType's LCD subpixel rendering. This function
   * returns the new surface, or nullptr if there was an error.
   *
   * The glyph is rendered without any padding or centering in the X direction,
   * and aligned normally in the Y direction.
   *
   * You can render at other quality levels with FontBase.RenderGlyph_Solid,
   * FontBase.RenderGlyph_Shaded, and FontBase.RenderGlyph_Blended.
   *
   * @param ch the codepoint to render.
   * @param fg the foreground color for the text.
   * @param bg the background color for the text.
   * @returns a new 32-bit, ARGB surface, or nullptr if there was an error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.RenderGlyph_Blended
   * @sa FontBase.RenderGlyph_Shaded
   * @sa FontBase.RenderGlyph_Solid
   */
  Surface RenderGlyph_LCD(Uint32 ch, Color fg, Color bg) const
  {
    return Surface{TTF_RenderGlyph_LCD(get(), ch, fg, bg)};
  }
};

/**
 * Handle to a non owned font
 *
 * @cat resource
 *
 * @sa FontBase
 * @sa Font
 */
struct FontRef : FontBase
{
  using FontBase::FontBase;

  /**
   * Copy constructor.
   */
  constexpr FontRef(const FontRef& other)
    : FontBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr FontRef(FontRef&& other)
    : FontBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~FontRef() = default;

  /**
   * Assignment operator.
   */
  FontRef& operator=(FontRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Dispose of a previously-created font.
   *
   * Call this when done with a font. This function will free any resources
   * associated with it. It is safe to call this function on nullptr, for
   * example on the result of a failed call to FontBase.FontBase().
   *
   * The font is not valid after being passed to this function. String pointers
   * from functions that return information on this font, such as
   * FontBase.GetFamilyName() and FontBase.GetStyleName(), are no longer valid
   * after this call, as well.
   *
   * @threadsafety This function should not be called while any other thread is
   *               using the font.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa FontBase.FontBase
   */
  void reset(TTF_Font* newResource = {})
  {
    TTF_CloseFont(release(newResource));
  }
};

/**
 * Handle to an owned font
 *
 * @cat resource
 *
 * @sa FontBase
 * @sa FontRef
 */
struct Font : FontRef
{
  using FontRef::FontRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Font(TTF_Font* resource = {})
    : FontRef(resource)
  {
  }

  constexpr Font(const Font& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Font(Font&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Font() { reset(); }

  /**
   * Assignment operator.
   */
  Font& operator=(Font other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Initialize SDL_ttf.
 *
 * You must successfully call this function before it is safe to call any
 * other function in this library.
 *
 * It is safe to call this more than once, and each successful InitSubSystem()
 * call should be paired with a matching QuitSubSystem(TtfInitFlag) call.
 *
 * @param _ An INIT_TTF value;
 * @returns true on success or false on failure; call GetError() for more
 *          information.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa QuitSubSystem(TtfInitFlag)
 */
inline bool InitSubSystem(TtfInitFlag _) { return TTF_Init(); }

/**
 * A text engine used to create text objects.
 *
 * This is a public interface that can be used by applications and libraries
 * to perform customize rendering with text objects. See
 * <SDL3_ttf/SDL_textengine.h> for details.
 *
 * There are three text engines provided with the library:
 *
 * - Drawing to an SDL_Surface, created with CreateSurfaceTextEngine()
 * - Drawing with an SDL 2D renderer, created with CreateRendererTextEngine()
 * - Drawing with the SDL GPU API, created with CreateGPUTextEngine()
 *
 * @since This struct is available since SDL_ttf 3.0.0.
 *
 * @cat resource
 *
 * @sa TextEngine
 * @sa TextEngineRef
 */
struct TextEngineBase : Resource<TTF_TextEngine*>
{
  using Resource::Resource;

protected:
  /// Custom destroyer
  void (*m_destroy)(TTF_TextEngine* engine) = nullptr;

public:
  /// Create from engine and custom destroyer
  constexpr TextEngineBase(TTF_TextEngine* engine,
                           void (*destroy)(TTF_TextEngine* engine))
    : Resource(engine)
    , m_destroy(destroy)
  {
  }

  /**
   * Sets the winding order of the vertices returned by TextBase.GetGPUDrawData
   * for a particular GPU text engine.
   *
   * @param winding the new winding order option.
   *
   * @threadsafety This function should be called on the thread that created the
   *               engine.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextEngineBase.GetGPUWinding
   */
  void SetGPUWinding(GPUTextEngineWinding winding)
  {
    TTF_SetGPUTextEngineWinding(get(), winding);
  }

  /**
   * Get the winding order of the vertices returned by TextBase.GetGPUDrawData
   * for a particular GPU text engine
   *
   * @returns the winding order used by the GPU text engine or
   *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
   *
   * @threadsafety This function should be called on the thread that created the
   *               engine.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextEngineBase.SetGPUWinding
   */
  GPUTextEngineWinding GetGPUWinding() const
  {
    return TTF_GetGPUTextEngineWinding(get());
  }
};

/**
 * Handle to a non owned textEngine
 *
 * @cat resource
 *
 * @sa TextEngineBase
 * @sa TextEngine
 */
struct TextEngineRef : TextEngineBase
{
  using TextEngineBase::TextEngineBase;

  /**
   * Copy constructor.
   */
  constexpr TextEngineRef(const TextEngineRef& other)
    : TextEngineBase(other.get(), other.m_destroy)
  {
  }

  /**
   * Move constructor.
   */
  constexpr TextEngineRef(TextEngineRef&& other)
    : TextEngineBase(other.release(), other.m_destroy)
  {
  }

  /**
   * Default constructor
   */
  constexpr ~TextEngineRef() = default;

  /**
   * Assignment operator.
   */
  TextEngineRef& operator=(TextEngineRef other)
  {
    release(other.release());
    m_destroy = other.m_destroy;
    other.m_destroy = nullptr;
    return *this;
  }

  /**
   * frees up TextEngineBase.
   */
  void reset(TTF_TextEngine* newResource = {})
  {
    auto prevValue = release(newResource);
    if (m_destroy) m_destroy(prevValue);
    m_destroy = nullptr;
  }
};

/**
 * Handle to an owned textEngine
 *
 * @cat resource
 *
 * @sa TextEngineBase
 * @sa TextEngineRef
 */
struct TextEngine : TextEngineRef
{
  using TextEngineRef::TextEngineRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit TextEngine(TTF_TextEngine* resource = {})
    : TextEngineRef(resource)
  {
  }

  constexpr TextEngine(const TextEngine& other) = delete;

  /**
   * Move constructor.
   */
  constexpr TextEngine(TextEngine&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~TextEngine() { reset(); }

  /**
   * Assignment operator.
   */
  TextEngine& operator=(TextEngine other)
  {
    reset(other.release());
    m_destroy = other.m_destroy;
    other.m_destroy = nullptr;
    return *this;
  }
};

/**
 * Draw sequence returned by TextBase.GetGPUDrawData
 *
 * @since This struct is available since SDL_ttf 3.0.0.
 *
 * @sa TextBase.GetGPUDrawData
 */
using GPUAtlasDrawSequence = TTF_GPUAtlasDrawSequence;

/**
 * The representation of a substring within text.
 *
 * @since This struct is available since SDL_ttf 3.0.0.
 *
 * @sa TextBase.GetNextSubString
 * @sa TextBase.GetPreviousSubString
 * @sa TextBase.GetSubString
 * @sa TextBase.GetSubStrings
 * @sa TextBase.GetSubStringForLine
 * @sa TextBase.GetSubStringForPoint
 * @sa TextBase.GetSubStringsForRange
 */
using SubString = TTF_SubString;

// Forward decl
struct SubStringIterator;

namespace prop::Font {

constexpr auto CREATE_FILENAME_STRING = TTF_PROP_FONT_CREATE_FILENAME_STRING;

constexpr auto CREATE_IOSTREAM_POINTER = TTF_PROP_FONT_CREATE_IOSTREAM_POINTER;

constexpr auto CREATE_IOSTREAM_OFFSET_NUMBER =
  TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER;

constexpr auto CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN =
  TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN;

constexpr auto CREATE_SIZE_FLOAT = TTF_PROP_FONT_CREATE_SIZE_FLOAT;

constexpr auto CREATE_FACE_NUMBER = TTF_PROP_FONT_CREATE_FACE_NUMBER;

constexpr auto CREATE_HORIZONTAL_DPI_NUMBER =
  TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER;

constexpr auto CREATE_VERTICAL_DPI_NUMBER =
  TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER;

constexpr auto CREATE_EXISTING_FONT = TTF_PROP_FONT_CREATE_EXISTING_FONT;

constexpr auto OUTLINE_LINE_CAP_NUMBER = TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER;

constexpr auto OUTLINE_LINE_JOIN_NUMBER =
  TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER;

constexpr auto OUTLINE_MITER_LIMIT_NUMBER =
  TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER;

} // namespace prop::Font

inline Font FontBase::Copy() const { return Font{TTF_CopyFont(get())}; }

#ifdef SDL3PP_DOC

/**
 * Thin (100) named font weight value
 */
#define SDL_FONT_WEIGHT_THIN TTF_FONT_WEIGHT_THIN

/**
 * ExtraLight (200) named font weight value
 */
#define SDL_FONT_WEIGHT_EXTRA_LIGHT TTF_FONT_WEIGHT_EXTRA_LIGHT

/**
 * Light (300) named font weight value
 */
#define SDL_FONT_WEIGHT_LIGHT TTF_FONT_WEIGHT_LIGHT

/**
 * Normal (400) named font weight value
 */
#define SDL_FONT_WEIGHT_NORMAL TTF_FONT_WEIGHT_NORMAL

/**
 * Medium (500) named font weight value
 */
#define SDL_FONT_WEIGHT_MEDIUM TTF_FONT_WEIGHT_MEDIUM

/**
 * SemiBold (600) named font weight value
 */
#define SDL_FONT_WEIGHT_SEMI_BOLD TTF_FONT_WEIGHT_SEMI_BOLD

/**
 * Bold (700) named font weight value
 */
#define SDL_FONT_WEIGHT_BOLD TTF_FONT_WEIGHT_BOLD

/**
 * ExtraBold (800) named font weight value
 */
#define SDL_FONT_WEIGHT_EXTRA_BOLD TTF_FONT_WEIGHT_EXTRA_BOLD

/**
 * Black (900) named font weight value
 */
#define SDL_FONT_WEIGHT_BLACK TTF_FONT_WEIGHT_BLACK

/**
 * ExtraBlack (950) named font weight value
 */
#define SDL_FONT_WEIGHT_EXTRA_BLACK TTF_FONT_WEIGHT_EXTRA_BLACK

#endif // SDL3PP_DOC

/**
 * Convert from a 4 character string to a 32-bit tag.
 *
 * @param string the 4 character string to convert.
 * @returns the 32-bit representation of the string.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa TagToString
 */
inline Uint32 StringToTag(StringParam string)
{
  return TTF_StringToTag(string);
}

/**
 * Convert from a 32-bit tag to a 4 character string.
 *
 * @param tag the 32-bit tag to convert.
 * @param string a pointer filled in with the 4 character representation of
 *               the tag.
 * @param size the size of the buffer pointed at by string, should be at least
 *             4.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa TagToString
 */
inline void TagToString(Uint32 tag, char* string, size_t size)
{
  TTF_TagToString(tag, string, size);
}

/**
 * Text created with TextBase.TextBase()
 *
 * @since This struct is available since SDL_ttf 3.0.0.
 *
 * @cat resource
 *
 * @sa TextBase.TextBase
 * @sa TextBase.GetProperties
 * @sa Text
 * @sa TextRef
 */
struct TextBase : Resource<TTF_Text*>
{
  using Resource::Resource;

  /**
   * Draw text to an SDL surface.
   *
   * `text` must have been created using a TextEngineBase from
   * CreateSurfaceTextEngine().
   *
   * @param p the (x, y) coordinate in pixels, positive from the left edge
   *          towards the right and from the top edge towards the bottom.
   * @param surface the surface to draw on.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa CreateSurfaceTextEngine
   * @sa TextBase.TextBase
   */
  bool DrawSurface(Point p, SurfaceRef surface) const
  {
    return TTF_DrawSurfaceText(get(), p.x, p.y, surface.get());
  }

  /**
   * Draw text to an SDL renderer.
   *
   * `text` must have been created using a TextEngineBase from
   * CreateRendererTextEngine(), and will draw using the renderer passed to
   * that function.
   *
   * @param p the (x, y) coordinate in pixels, positive from the left edge
   *          towards the right and from the top edge towards the bottom.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa CreateRendererTextEngine
   * @sa TextBase.TextBase
   */
  bool DrawRenderer(FPoint p) const
  {
    return TTF_DrawRendererText(get(), p.x, p.y);
  }

  /**
   * Get the geometry data needed for drawing the text.
   *
   * `text` must have been created using a TextEngineBase from
   * CreateGPUTextEngine().
   *
   * The positive X-axis is taken towards the right and the positive Y-axis is
   * taken upwards for both the vertex and the texture coordinates, i.e, it
   * follows the same convention used by the SDL_GPU API. If you want to use a
   * different coordinate system you will need to transform the vertices
   * yourself.
   *
   * If the text looks blocky use linear filtering.
   *
   * @returns a nullptr terminated linked list of GPUAtlasDrawSequence objects
   *          or nullptr if the passed text is empty or in case of failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa CreateGPUTextEngine
   * @sa TextBase.TextBase
   */
  GPUAtlasDrawSequence* GetGPUDrawData() const
  {
    return TTF_GetGPUTextDrawData(get());
  }

  /**
   * Create a text object from UTF-8 text and a text engine.
   *
   * @param engine the text engine to use when creating the text object, may be
   *               nullptr.
   * @param font the font to render with.
   * @param text the text to use, in UTF-8 encoding.
   * @post a TextBase object or nullptr on failure; call GetError() for more
   *       information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               font and text engine.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  TextBase(TextEngineBase& engine, FontRef font, std::string_view text)
    : Resource(
        TTF_CreateText(engine.get(), font.get(), text.data(), text.size()))
  {
  }

  /**
   * Get the properties associated with a text object.
   *
   * @returns a valid property ID on success or 0 on failure; call
   *          GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  PropertiesRef GetProperties() const { return TTF_GetTextProperties(get()); }

  /**
   * Set the text engine used by a text object.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param engine the text engine to use for drawing.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.GetEngine
   */
  bool SetEngine(TextEngineBase& engine)
  {
    return TTF_SetTextEngine(get(), engine.get());
  }

  /**
   * Get the text engine used by a text object.
   *
   * @returns the TextEngineBase used by the text on success or nullptr on
   * failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.SetEngine
   */
  TextEngineRef GetEngine() const { return TTF_GetTextEngine(get()); }

  /**
   * Set the font used by a text object.
   *
   * When a text object has a font, any changes to the font will automatically
   * regenerate the text. If you set the font to nullptr, the text will continue
   * to render but changes to the font will no longer affect the text.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param font the font to use, may be nullptr.
   * @returns false if the text pointer is null; otherwise, true. call
   *          GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.GetFont
   */
  bool SetFont(FontBase& font) { return TTF_SetTextFont(get(), font.get()); }

  /**
   * Get the font used by a text object.
   *
   * @returns the FontBase used by the text on success or nullptr on failure;
   * call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.SetFont
   */
  FontRef GetFont() const { return TTF_GetTextFont(get()); }

  /**
   * Set the direction to be used for text shaping a text object.
   *
   * This function only supports left-to-right text shaping if SDL_ttf was not
   * built with HarfBuzz support.
   *
   * @param direction the new direction for text to flow.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool SetDirection(Direction direction)
  {
    return TTF_SetTextDirection(get(), direction);
  }

  /**
   * Get the direction to be used for text shaping a text object.
   *
   * This defaults to the direction of the font used by the text object.
   *
   * @returns the direction to be used for text shaping.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  Direction GetDirection() const { return TTF_GetTextDirection(get()); }

  /**
   * Set the script to be used for text shaping a text object.
   *
   * This returns false if SDL_ttf isn't built with HarfBuzz support.
   *
   * @param script an [ISO 15924
   * code](https://unicode.org/iso15924/iso15924-codes.html).
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa StringToTag
   */
  bool SetScript(Uint32 script) { return TTF_SetTextScript(get(), script); }

  /**
   * Get the script used for text shaping a text object.
   *
   * This defaults to the script of the font used by the text object.
   *
   * @returns an
   *          [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)
   *          or 0 if a script hasn't been set on either the text object or the
   *          font.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TagToString
   */
  Uint32 GetScript() const { return TTF_GetTextScript(get()); }

  /**
   * Set the color of a text object.
   *
   * The default text color is white (255, 255, 255, 255).
   *
   * @param c the color value in the range of 0-255.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.GetColor(Color*)
   * @sa TextBase.SetColor(FColor)
   */
  bool SetColor(Color c) { return TTF_SetTextColor(get(), c.r, c.g, c.b, c.a); }

  /**
   * Set the color of a text object.
   *
   * The default text color is white (1.0f, 1.0f, 1.0f, 1.0f).
   *
   * @param c the color value, normally in the range of 0-1.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.GetColor(FColor*)
   * @sa TextBase.SetColor(Color)
   */
  bool SetColor(FColor c)
  {
    return TTF_SetTextColorFloat(get(), c.r, c.g, c.b, c.a);
  }

  /**
   * Get the color of a text object.
   *
   * @return The color in the range of 0-1 or std::nullopt on failure; call
   * GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @sa SetColor(FColor)
   */
  std::optional<FColor> GetColor() const
  {
    if (FColor c; GetColor(&c)) return c;
    return std::nullopt;
  }

  /**
   * Get the color of a text object.
   *
   * @param c a pointer filled in with red color value in the range of 0-255,
   *          __must__ not be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa SetColor(Color)
   */
  bool GetColor(Color* c) const
  {
    SDL_assert_paranoid(c != nullptr);
    return GetColor(&c->r, &c->g, &c->b, &c->a);
  }

  /**
   * Get the color of a text object.
   *
   * @param c a pointer filled in with red color value in the range of 0-1,
   *          __must__ not be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa SetColor(FColor)
   */
  bool GetColor(FColor* c) const
  {
    SDL_assert_paranoid(c != nullptr);
    return GetColor(&c->r, &c->g, &c->b, &c->a);
  }

  /**
   * Get the color of a text object.
   *
   * @param r a pointer filled in with the red color value in the range of
   *          0-255, may be nullptr.
   * @param g a pointer filled in with the green color value in the range of
   *          0-255, may be nullptr.
   * @param b a pointer filled in with the blue color value in the range of
   *          0-255, may be nullptr.
   * @param a a pointer filled in with the alpha value in the range of 0-255,
   *          may be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa SetColor(Color)
   */
  bool GetColor(Uint8* r, Uint8* g, Uint8* b, Uint8* a) const
  {
    return TTF_GetTextColor(get(), r, g, b, a);
  }

  /**
   * Get the color of a text object.
   *
   * @param r a pointer filled in with the red color value, normally in the
   *          range of 0-1, may be nullptr.
   * @param g a pointer filled in with the green color value, normally in the
   *          range of 0-1, may be nullptr.
   * @param b a pointer filled in with the blue color value, normally in the
   *          range of 0-1, may be nullptr.
   * @param a a pointer filled in with the alpha value in the range of 0-1, may
   *          be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa SetColor(FColor)
   */
  bool GetColor(float* r, float* g, float* b, float* a) const
  {
    return TTF_GetTextColorFloat(get(), r, g, b, a);
  }

  /**
   * Set the position of a text object.
   *
   * This can be used to position multiple text objects within a single wrapping
   * text area.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param p the x, y offset of the upper left corner of this text in pixels.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.GetPosition
   */
  bool SetPosition(Point p) { return TTF_SetTextPosition(get(), p.x, p.y); }

  /**
   * Get the position of a text object.
   *
   * @returns a Point with the offset of the upper left corner of this text in
   *          pixels or std::nullopt on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa SetPosition()
   */
  std::optional<Point> GetPosition() const
  {
    if (Point p; GetPosition(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the position of a text object.
   *
   * @param x a pointer filled in with the x offset of the upper left corner of
   *          this text in pixels, may be nullptr.
   * @param y a pointer filled in with the y offset of the upper left corner of
   *          this text in pixels, may be nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.SetPosition
   */
  bool GetPosition(int* x, int* y) const
  {
    return TTF_GetTextPosition(get(), x, y);
  }

  /**
   * Set whether wrapping is enabled on a text object.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param wrap_width the maximum width in pixels, 0 to wrap on newline
   *                   characters.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.GetWrapWidth
   */
  bool SetWrapWidth(int wrap_width)
  {
    return TTF_SetTextWrapWidth(get(), wrap_width);
  }

  /**
   * Get whether wrapping is enabled on a text object.
   *
   * @returns an int with the maximum width in pixels or 0 if the text is being
   *          wrapped on newline characters on success or std::nullopt on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.SetWrapWidth
   */
  std::optional<int> GetWrapWidth() const
  {
    if (int w; TTF_GetTextWrapWidth(get(), &w)) return w;
    return std::nullopt;
  }

  /**
   * Set whether whitespace should be visible when wrapping a text object.
   *
   * If the whitespace is visible, it will take up space for purposes of
   * alignment and wrapping. This is good for editing, but looks better when
   * centered or aligned if whitespace around line wrapping is hidden. This
   * defaults false.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param visible true to show whitespace when wrapping text, false to hide
   *                it.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.IsWrapWhitespaceVisible
   */
  bool SetWrapWhitespaceVisible(bool visible)
  {
    return TTF_SetTextWrapWhitespaceVisible(get(), visible);
  }

  /**
   * Return whether whitespace is shown when wrapping a text object.
   *
   * @returns true if whitespace is shown when wrapping text, or false
   *          otherwise.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.SetWrapWhitespaceVisible
   */
  bool IsWrapWhitespaceVisible() const
  {
    return TTF_TextWrapWhitespaceVisible(get());
  }

  /**
   * Set the UTF-8 text used by a text object.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param string the UTF-8 text to use.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.AppendString
   * @sa TextBase.DeleteString
   * @sa TextBase.InsertString
   */
  bool SetString(std::string_view string)
  {
    return TTF_SetTextString(get(), string.data(), string.size());
  }

  /**
   * Insert UTF-8 text into a text object.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param offset the offset, in bytes, from the beginning of the string if >=
   *               0, the offset from the end of the string if < 0. Note that
   *               this does not do UTF-8 validation, so you should only insert
   *               at UTF-8 sequence boundaries.
   * @param string the UTF-8 text to insert.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.AppendString
   * @sa TextBase.DeleteString
   * @sa TextBase.SetString
   */
  bool InsertString(int offset, std::string_view string)
  {
    return TTF_InsertTextString(get(), offset, string.data(), string.size());
  }

  /**
   * Append UTF-8 text to a text object.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param string the UTF-8 text to insert.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.DeleteString
   * @sa TextBase.InsertString
   * @sa TextBase.SetString
   */
  bool AppendString(std::string_view string)
  {
    return TTF_AppendTextString(get(), string.data(), string.size());
  }

  /**
   * Delete UTF-8 text from a text object.
   *
   * This function may cause the internal text representation to be rebuilt.
   *
   * @param offset the offset, in bytes, from the beginning of the string if >=
   *               0, the offset from the end of the string if < 0. Note that
   *               this does not do UTF-8 validation, so you should only delete
   *               at UTF-8 sequence boundaries.
   * @param length the length of text to delete, in bytes, or -1 for the
   *               remainder of the string.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.AppendString
   * @sa TextBase.InsertString
   * @sa TextBase.SetString
   */
  bool DeleteString(int offset, int length = -1)
  {
    return TTF_DeleteTextString(get(), offset, length);
  }

  /**
   * Get the size of a text object.
   *
   * The size of the text may change when the font or font style and size
   * change.
   *
   * @returns Point containing the size on x and y axis on success or
   *          std::nullopt on failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @see GetSize(int*,int*) if might want only one of the coordinates
   */
  std::optional<Point> GetSize() const
  {
    if (Point p; GetSize(&p.x, &p.y)) return p;
    return std::nullopt;
  }

  /**
   * Get the size of a text object.
   *
   * The size of the text may change when the font or font style and size
   * change.
   *
   * @param w a pointer filled in with the width of the text, in pixels, may be
   *          nullptr.
   * @param h a pointer filled in with the height of the text, in pixels, may be
   *          nullptr.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @see GetSize() if you need both coordinates.
   */
  bool GetSize(int* w, int* h) const { return TTF_GetTextSize(get(), w, h); }

  /**
   * Get the substring of a text object that surrounds a text offset.
   *
   * If `offset` is less than 0, this will return a zero length substring at the
   * beginning of the text with the SUBSTRING_TEXT_START flag set. If `offset`
   * is greater than or equal to the length of the text string, this will return
   * a zero length substring at the end of the text with the SUBSTRING_TEXT_END
   * flag set.
   *
   * @param offset a byte offset into the text string.
   * @param substring a pointer filled in with the substring containing the
   *                  offset.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetSubString(int offset, SubString* substring) const
  {
    return TTF_GetTextSubString(get(), offset, substring);
  }

  /**
   * Get iterator to first substring
   */
  SubStringIterator begin() const;

  /**
   * Get iterator to one past last substring
   */
  SubStringIterator end() const;

  /**
   * Get iterator to substring of a text object that contains the given line.
   *
   * If `line` is greater than or equal to `text->num_lines` this will return an
   * iterator equal to end().
   *
   * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
   * @returns iterator on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  SubStringIterator GetSubStringForLine(int line) const;

  /**
   * Get the substring of a text object that contains the given line.
   *
   * If `line` is less than 0, this will return a zero length substring at the
   * beginning of the text with the SUBSTRING_TEXT_START flag set. If `line` is
   * greater than or equal to `text->num_lines` this will return a zero length
   * substring at the end of the text with the SUBSTRING_TEXT_END flag set.
   *
   * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
   * @param substring a pointer filled in with the substring containing the
   *                  offset.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetSubStringForLine(int line, SubString* substring) const
  {
    return TTF_GetTextSubStringForLine(get(), line, substring);
  }

  /**
   * Get all substrings of a text object.
   *
   * @returns a nullptr terminated array of substring pointers or nullptr on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  OwnArray<SubString*> GetSubStrings() const
  {
    return GetSubStringsForRange(0);
  }

  /**
   * Get the substrings of a text object that contain a range of text.
   *
   * @param offset a byte offset into the text string.
   * @param length the length of the range being queried, in bytes, or -1 for
   *               the remainder of the string.
   * @returns a nullptr terminated array of substring pointers or nullptr on
   *          failure; call GetError() for more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const
  {
    int count = 0;
    auto data = TTF_GetTextSubStringsForRange(get(), offset, length, &count);
    return OwnArray<SubString*>{data, size_t(count)};
  }

  /**
   * Get the portion of a text string that is closest to a point.
   *
   * This will return the closest substring of text to the given point.
   *
   * @param p the coordinates relative to the top-left side of the text, may be
   *          outside the bounds of the text area.
   * @returns the iterator on success or false on failure; call GetError() for
   *          more information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  SubStringIterator GetSubStringForPoint(Point p) const;

  /**
   * Get the portion of a text string that is closest to a point.
   *
   * This will return the closest substring of text to the given point.
   *
   * @param p the coordinates relative to the top-left side of the text, may be
   *          outside the bounds of the text area.
   * @param substring a pointer filled in with the closest substring of text to
   *                  the given point.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetSubStringForPoint(Point p, SubString* substring) const
  {
    return TTF_GetTextSubStringForPoint(get(), p.x, p.y, substring);
  }

  /**
   * Get the previous substring in a text object
   *
   * If called at the start of the text, this will return a zero length
   * substring with the SUBSTRING_TEXT_START flag set.
   *
   * @param substring the SubString to query.
   * @param previous a pointer filled in with the previous substring.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetPreviousSubString(const SubString& substring,
                            SubString* previous) const
  {
    return TTF_GetPreviousTextSubString(get(), &substring, previous);
  }

  /**
   * Get the next substring in a text object
   *
   * If called at the end of the text, this will return a zero length substring
   * with the SUBSTRING_TEXT_END flag set.
   *
   * @param substring the SubString to query.
   * @param next a pointer filled in with the next substring.
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool GetNextSubString(const SubString& substring, SubString* next) const
  {
    return TTF_GetNextTextSubString(get(), &substring, next);
  }

  /**
   * Update the layout of a text object.
   *
   * This is automatically done when the layout is requested or the text is
   * rendered, but you can call this if you need more control over the timing of
   * when the layout and text engine representation are updated.
   *
   * @returns true on success or false on failure; call GetError() for more
   *          information.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   */
  bool Update() { return TTF_UpdateText(get()); }

  /**
   * A copy of the UTF-8 string that this text object represents, useful for
   * layout, debugging and retrieving substring text
   */
  const char* GetText() const { return get()->text; }

  /**
   * The number of lines in the text, 0 if it's empty
   */
  int GetNumLines() const { return get()->num_lines; }
};

/**
 * Handle to a non owned text
 *
 * @cat resource
 *
 * @sa TextBase
 * @sa Text
 */
struct TextRef : TextBase
{
  using TextBase::TextBase;

  /**
   * Copy constructor.
   */
  constexpr TextRef(const TextRef& other)
    : TextBase(other.get())
  {
  }

  /**
   * Move constructor.
   */
  constexpr TextRef(TextRef&& other)
    : TextBase(other.release())
  {
  }

  /**
   * Default constructor
   */
  constexpr ~TextRef() = default;

  /**
   * Assignment operator.
   */
  TextRef& operator=(TextRef other)
  {
    release(other.release());
    return *this;
  }

  /**
   * Destroy a text object created by a text engine.
   *
   * @threadsafety This function should be called on the thread that created the
   *               text.
   *
   * @since This function is available since SDL_ttf 3.0.0.
   *
   * @sa TextBase.TextBase
   */
  void reset(TTF_Text* newResource = {})
  {
    TTF_DestroyText(release(newResource));
  }
};

/**
 * Handle to an owned text
 *
 * @cat resource
 *
 * @sa TextBase
 * @sa TextRef
 */
struct Text : TextRef
{
  using TextRef::TextRef;

  /**
   * Constructs from the underlying resource.
   */
  constexpr explicit Text(TTF_Text* resource = {})
    : TextRef(resource)
  {
  }

  constexpr Text(const Text& other) = delete;

  /**
   * Move constructor.
   */
  constexpr Text(Text&& other) = default;

  /**
   * Frees up resource when object goes out of scope.
   */
  ~Text() { reset(); }

  /**
   * Assignment operator.
   */
  Text& operator=(Text other)
  {
    reset(other.release());
    return *this;
  }
};

/**
 * Iterator for substrings
 *
 */
class SubStringIterator
{
  TextRef m_text;

  SubString m_subString;

  constexpr SubStringIterator(TextRef text)
    : m_text(std::move(text))
    , m_subString(0)
  {
  }

public:
  /// Default constructor.
  constexpr SubStringIterator()
    : SubStringIterator(nullptr)
  {
  }

  /// True if pointing to valid SubString.
  constexpr operator bool() const { return m_text != nullptr; }

  /// Retrieve SubString
  constexpr const SubString& operator*() const { return m_subString; }

  /// Retrieve SubString.
  constexpr const SubString* operator->() const { return &m_subString; }

  /// Comparison.
  constexpr bool operator==(const SubStringIterator& other) const
  {
    return m_subString.offset == other.m_subString.offset;
  }

  /// Increment operator.
  constexpr SubStringIterator& operator++()
  {
    m_text.GetNextSubString(m_subString, &m_subString);
    return *this;
  }

  /// Increment operator.
  constexpr SubStringIterator operator++(int)
  {
    auto curr = *this;
    m_text.GetNextSubString(m_subString, &m_subString);
    return curr;
  }

  /// Decrement operator.
  constexpr SubStringIterator& operator--()
  {
    m_text.GetPreviousSubString(m_subString, &m_subString);
    return *this;
  }

  /// Decrement operator.
  constexpr SubStringIterator operator--(int)
  {
    auto curr = *this;
    m_text.GetPreviousSubString(m_subString, &m_subString);
    return curr;
  }

  friend class TextBase;
};

/**
 * Create a text engine for drawing text on SDL surfaces.
 *
 * @returns a TextEngine object or nullptr on failure; call GetError()
 *          for more information.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa Text
 * @sa TextBase.DrawSurface
 */
inline TextEngine CreateSurfaceTextEngine()
{
  return TextEngine{TTF_CreateSurfaceTextEngine(),
                    TTF_DestroySurfaceTextEngine};
}

/**
 * Create a text engine for drawing text on an SDL renderer.
 *
 * @param renderer the renderer to use for creating textures and drawing text.
 * @returns a TextEngine object or nullptr on failure; call GetError()
 *          for more information.
 *
 * @threadsafety This function should be called on the thread that created the
 *               renderer.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa TextBase.DrawRenderer
 * @sa Text
 * @sa CreateRendererTextEngineWithProperties
 */
inline TextEngine CreateRendererTextEngine(RendererBase& renderer)
{
  return TextEngine{TTF_CreateRendererTextEngine(renderer.get()),
                    TTF_DestroyRendererTextEngine};
}

/**
 * Create a text engine for drawing text on an SDL renderer, with the
 * specified properties.
 *
 * These are the supported properties:
 *
 * - `prop::RendererTextEngine.RENDERER`: the renderer to use for
 *   creating textures and drawing text
 * - `prop::RendererTextEngine.ATLAS_TEXTURE_SIZE`: the size of the
 *   texture atlas
 *
 * @param props the properties to use.
 * @returns a TextEngineBase object or nullptr on failure; call GetError()
 *          for more information.
 *
 * @threadsafety This function should be called on the thread that created the
 *               renderer.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa CreateRendererTextEngine
 * @sa Text
 * @sa TextBase.DrawRenderer
 */
inline TextEngine CreateRendererTextEngineWithProperties(PropertiesBase& props)
{
  return TextEngine{TTF_CreateRendererTextEngineWithProperties(props.get()),
                    TTF_DestroyRendererTextEngine};
}

namespace prop::RendererTextEngine {

constexpr auto RENDERER = TTF_PROP_RENDERER_TEXT_ENGINE_RENDERER;

constexpr auto ATLAS_TEXTURE_SIZE =
  TTF_PROP_RENDERER_TEXT_ENGINE_ATLAS_TEXTURE_SIZE;

} // namespace prop::RendererTextEngine

/**
 * Create a text engine for drawing text with the SDL GPU API.
 *
 * @param device the SDL_GPUDevice to use for creating textures and drawing
 *               text.
 * @returns a TextEngine object or nullptr on failure; call GetError()
 *          for more information.
 *
 * @threadsafety This function should be called on the thread that created the
 *               device.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa CreateGPUTextEngineWithProperties
 * @sa Text
 * @sa TextBase.GetGPUDrawData
 */
inline TextEngine CreateGPUTextEngine(SDL_GPUDevice* device)
{
  return TextEngine{TTF_CreateGPUTextEngine(device), TTF_DestroyGPUTextEngine};
}

/**
 * Create a text engine for drawing text with the SDL GPU API, with the
 * specified properties.
 *
 * These are the supported properties:
 *
 * - `prop::GpuTextEngine.DEVICE`: the SDL_GPUDevice to use for creating
 *   textures and drawing text.
 * - `prop::GpuTextEngine.ATLAS_TEXTURE_SIZE`: the size of the texture
 *   atlas
 *
 * @param props the properties to use.
 * @returns a TextEngineBase object or nullptr on failure; call GetError()
 *          for more information.
 *
 * @threadsafety This function should be called on the thread that created the
 *               device.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa CreateGPUTextEngine
 * @sa Text
 * @sa TextBase.GetGPUDrawData
 */
inline TextEngine CreateGPUTextEngineWithProperties(PropertiesBase& props)
{
  return TextEngine{TTF_CreateGPUTextEngineWithProperties(props.get()),
                    TTF_DestroyGPUTextEngine};
}

namespace prop::GpuTextEngine {

constexpr auto DEVICE = TTF_PROP_GPU_TEXT_ENGINE_DEVICE;

constexpr auto ATLAS_TEXTURE_SIZE = TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE;

} // namespace prop::GpuTextEngine

/**
 * Deinitialize SDL_ttf.
 *
 * You must call this when done with the library, to free internal resources.
 * It is safe to call this when the library isn't initialized, as it will just
 * return immediately.
 *
 * Once you have as many quit calls as you have had successful calls to
 * InitSubSystem(TtfInitFlag), the library will actually deinitialize.
 *
 * Please note that this does not automatically close any fonts that are still
 * open at the time of deinitialization, and it is possibly not safe to close
 * them afterwards, as parts of the library will no longer be initialized to
 * deal with it.
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 */
inline void QuitSubSystem(TtfInitFlag _) { TTF_Quit(); }

/**
 * Check if SDL_ttf is initialized.
 *
 * This reports the number of times the library has been initialized by a call
 * to InitSubSystem(TtfInitFlag), without a paired deinitialization request from
 * QuitSubSystem(TtfInitFlag).
 *
 * In short: if it's greater than zero, the library is currently initialized
 * and ready to work. If zero, it is not initialized.
 *
 * Despite the return value being a signed integer, this function should not
 * return a negative number.
 *
 * @returns the current number of initialization calls, that need to
 *          eventually be paired with this many calls to
 *          QuitSubSystem(TtfInitFlag).
 *
 * @threadsafety It is safe to call this function from any thread.
 *
 * @since This function is available since SDL_ttf 3.0.0.
 *
 * @sa InitSubSystem(TtfInitFlag)
 * @sa QuitSubSystem(TtfInitFlag)
 */
inline int WasInit(TtfInitFlag _) { return TTF_WasInit(); }

/// @}

#pragma region impl

inline SubStringIterator TextBase::begin() const
{
  if (SubStringIterator it{get()}; GetSubString(0, &it.m_subString)) return it;
  return {};
}

inline SubStringIterator TextBase::end() const
{
  if (SubStringIterator it{get()}; GetSubString(INT_MAX, &it.m_subString)) {
    return it;
  }
  return {};
}

inline SubStringIterator TextBase::GetSubStringForLine(int line) const
{
  if (SubStringIterator it{get()}; GetSubStringForLine(line, &it.m_subString)) {
    return it;
  }
  return {};
}

inline SubStringIterator TextBase::GetSubStringForPoint(Point p) const
{
  if (SubStringIterator it{get()}; GetSubStringForPoint(p, &it.m_subString)) {
    return it;
  }
  return {};
}

#pragma endregion impl

} // namespace SDL

#endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)

#endif // SDL3PP_H_
