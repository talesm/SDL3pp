10c10
<  * @defgroup CategoryClipboard Category Clipboard
---
>  * @defgroup CategoryClipboard Clipboard Handling
101c101
<   return CheckError(SDL_GetClipboardText());
---
>   return StringResult{CheckError(SDL_GetClipboardText())};
154c154
<   return CheckError(SDL_GetPrimarySelectionText());
---
>   return StringResult{CheckError(SDL_GetPrimarySelectionText())};
157,158d156
< #error "ClipboardDataCB (plc)"
< 
189,190c187
<  *          breakage in receiving applications. The returned data will not be
<  *          freed, so it needs to be retained and dealt with internally.
---
>  *          breakage in receiving applications.
198a196,218
>  * Callback function that will be called when data for the specified mime-type
>  * is requested by the OS.
>  *
>  * The callback function is called with nullptr as the mime_type when the
>  * clipboard is cleared or new data is set. The clipboard is automatically
>  * cleared in Quit().
>  *
>  * @param mime_type the requested mime-type.
>  * @param size a pointer filled in with the length of the returned data.
>  * @returns a pointer to the data for the provided mime-type. Returning nullptr
>  *          or setting length to 0 will cause no data to be sent to the
>  *          "receiver". It is up to the receiver to handle this. Essentially
>  *          returning no data is more or less undefined behavior and may cause
>  *          breakage in receiving applications.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa SetClipboardData
>  * @sa ClipboardDataCallback
>  */
> using ClipboardDataCB = std::function<SourceBytes(const char* mime_type)>;
> 
> /**
214,215d233
<  * @param userdata a pointer to the provided user data.
<  *
242d259
<  * @param num_mime_types the number of mime-types in the mime_types list.
258c275,276
<   CheckError(SDL_SetClipboardData(callback, cleanup, userdata, mime_types));
---
>   CheckError(SDL_SetClipboardData(
>     callback, cleanup, userdata, mime_types.data(), mime_types.size()));
277d294
<  * @param userdata an opaque pointer that will be forwarded to the callbacks.
280d296
<  * @param num_mime_types the number of mime-types in the mime_types list.
295c311,326
<   static_assert(false, "Not implemented");
---
>   static ClipboardDataCB s_callback;
>   static ClipboardCleanupCB s_cleanup;
>   CheckError(SDL_ClearClipboardData());
>   s_callback = callback;
>   s_cleanup = cleanup;
>   SetClipboardData(
>     [](void*, const char* mime_type, size_t* size) -> const void* {
>       auto source = s_callback(mime_type);
>       *size = source.size_bytes();
>       return source.data();
>     },
>     [](void*) {
>       if (s_cleanup) s_cleanup();
>     },
>     nullptr,
>     mime_types);
318d348
<  * @param size a pointer filled in with the length of the returned data.
320,321c350
<  *          for more information. This should be freed with free() when it
<  *          is no longer needed.
---
>  *          for more information.
332c361,364
<   return SDL_GetClipboardData(mime_type);
---
>   size_t count = 0;
>   auto data = SDL_GetClipboardData(mime_type, &count);
>   if (!data) return {};
>   return StringResult{static_cast<char*>(data), count};
334a367,383
> /**
>  * Get the data from the clipboard for a given mime type.
>  *
>  * The size of text data does not include the terminator, but the text is
>  * guaranteed to be null-terminated.
>  *
>  * @param mime_type the mime type to read from the clipboard.
>  * @returns the retrieved data buffer or nullptr on failure; call GetError()
>  *          for more information.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa HasClipboardData
>  * @sa SetClipboardData
>  */
338c387,390
<   static_assert(false, "Not implemented");
---
>   size_t count = 0;
>   auto data = SDL_GetClipboardData(mime_type, &count);
>   if (!data) return {};
>   return OwnArray<T>{static_cast<T*>(data), count / sizeof(T)};
363,367c415,416
<  * @param num_mime_types a pointer filled with the number of mime types, may
<  *                       be nullptr.
<  * @returns a null-terminated array of strings with mime types, or nullptr on
<  *          failure; call GetError() for more information. This should be
<  *          freed with free() when it is no longer needed.
---
>  * @returns a null terminated array of strings with mime types, or empty on
>  *          failure; call GetError() for more information.
377c426,429
<   return SDL_GetClipboardMimeTypes();
---
>   size_t count = 0;
>   auto data = SDL_GetClipboardMimeTypes(&count);
>   if (!data) return {};
>   return OwnArray<char*>{data, count};
