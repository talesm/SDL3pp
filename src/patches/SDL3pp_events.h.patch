11c11
<  * @defgroup CategoryEvents Category Events
---
>  * @defgroup CategoryEvents Event Handling
42a43,49
>  * @defgroup EventTypes Event Types
>  *
>  * Event types for Event.
>  * @{
>  */
> 
> /**
268,271d274
< #endif // SDL_VERSION_ATLEAST(3, 3, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 0)
< 
374,377d376
< #endif // SDL_VERSION_ATLEAST(3, 3, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 0)
< 
381,384d379
< #endif // SDL_VERSION_ATLEAST(3, 3, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 0)
< 
491a487,488
> /// @}
> 
870a868,873
>  * @name EventActions
>  * The type of action to request from PeepEvents().
>  * @{
>  */
> 
> /**
885a889,890
> /// @}
> 
890a896,897
>  * ## remarks
>  *
1058c1065
<  * ```c
---
>  * ```cpp
1060,1061c1067,1068
<  *     Event event;
<  *     while (PollEvent(&event)) {  // poll until all events are handled!
---
>  *     SDL::Event event;
>  *     while (SDL::PollEvent(&event)) {  // poll until all events are handled!
1093,1099c1100
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`. The 1 returned refers to
<  * this event, immediately stored in the SDL Event structure -- not an event
<  * to follow.
<  *
<  * If `event` is nullptr, it simply returns 1 if there is an event in the queue,
<  * but will not remove it from the queue.
---
>  * The next event is removed from the queue and returned.
1113,1114c1114
<  *     Event event;
<  *     while (PollEvent(&event)) {  // poll until all events are handled!
---
>  *     while (auto event = SDL::PollEvent()) {
1129,1131c1129,1130
<  * @param event the Event structure to be filled with the next event from
<  *              the queue, or nullptr.
<  * @returns true if this got an event or false if there are none available.
---
>  * @returns Event if this got an event or std::nullopt if there are none
>  * available.
1143c1142,1143
<   static_assert(false, "Not implemented");
---
>   if (Event event; PollEvent(&event)) return event;
>   return std::nullopt;
1172,1173c1172
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`.
---
>  * The next event is removed from the queue and returned.
1178,1179c1177
<  * @param event the Event structure to be filled in with the next event
<  *              from the queue, or nullptr.
---
>  * @returns Event on success.
1190c1188,1193
< inline Event WaitEvent() { static_assert(false, "Not implemented"); }
---
> inline Event WaitEvent()
> {
>   Event event;
>   WaitEvent(&event);
>   return event;
> }
1229,1231d1231
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`.
<  *
1238,1239d1237
<  * @param event the Event structure to be filled in with the next event
<  *              from the queue, or nullptr.
1242,1243c1240,1241
<  * @returns true if this got an event or false if the timeout elapsed without
<  *          any events available.
---
>  * @returns the Event if this got an event or std::nullopt if the timeout
>  * elapsed without any events available.
1255c1253,1254
<   static_assert(false, "Not implemented");
---
>   if (Event event; WaitEventTimeout(&event, timeoutMS)) return event;
>   return std::nullopt;
1273,1274c1272,1273
<  * @param timeoutMS the maximum number of milliseconds to wait for the next
<  *                  available event.
---
>  * @param timeoutDuration the duration to wait for the next available event,
>  *                        with millisecond precision
1289c1288
<   static_assert(false, "Not implemented");
---
>   return WaitEventTimeout(event, std::max(timeoutDuration.count(), 1l));
1296,1297c1295
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`.
---
>  * The next event is removed from the queue and returned.
1305,1310c1303,1306
<  * @param event the Event structure to be filled in with the next event
<  *              from the queue, or nullptr.
<  * @param timeoutMS the maximum number of milliseconds to wait for the next
<  *                  available event.
<  * @returns true if this got an event or false if the timeout elapsed without
<  *          any events available.
---
>  * @param timeoutDuration the duration to wait for the next available event,
>  *                        with millisecond precision.
>  * @returns the Event if this got an event or std::nullopt if the timeout
>  * elapsed without any events available.
1323c1319,1320
<   static_assert(false, "Not implemented");
---
>   if (Event event; WaitEventTimeout(&event, timeoutDuration)) return event;
>   return std::nullopt;
1390c1387
<   static_assert(false, "Not implemented");
---
>   PushEvent(const_cast<Event*>(&event));
1415c1412
<  * A function pointer used for callbacks that watch the event queue.
---
>  * A std::function used for callbacks that watch the event queue.
1417,1418d1413
<  * @param userdata what was passed as `userdata` to SetEventFilter() or
<  *                 AddEventWatch, etc.
1429a1425,1426
>  * @cat listener-callback
>  *
1436c1433,1438
< /// Handle returned by AddEventWatch()
---
> /**
>  * Handle returned by AddEventWatch(EventFilterCB)
>  *
>  * This can be used later to remove the event filter
>  * RemoveEventWatch(EventFilterHandle).
>  */
1486c1488,1489
<   SDL_SetEventFilter(filter, userdata);
---
>   UniqueCallbackWrapper<EventFilterCB>::erase();
>   return SDL_SetEventFilter(filter, userdata);
1519d1521
<  * @param userdata a pointer that is passed to `filter`.
1524a1527,1528
>  * @cat listener-callback
>  *
1533c1537,1542
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<EventFilterCB>;
>   SDL_SetEventFilter(
>     [](void* userdata, SDL_Event* event) {
>       return Wrapper::Call(userdata, *event);
>     },
>     Wrapper::Wrap(std::move(filter)));
1564,1566c1573,1574
<  * @param filter the current callback function will be stored here.
<  * @param userdata the pointer that is passed to the current event filter will
<  *                 be stored here.
---
>  * @returns EventFilterCB on success or false if there is no event filter
>  *          set.
1572a1581,1582
>  * @cat listener-callback
>  *
1577c1587,1599
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<EventFilterCB>;
> 
>   EventFilter filter;
>   void* userdata;
>   GetEventFilter(&filter, &userdata);
>   if (!userdata)
>     return [filter](const Event& event) {
>       return filter(nullptr, const_cast<Event*>(&event));
>     };
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [filter, userdata](const Event& event) {
>     return filter(userdata, const_cast<Event*>(&event));
>   };
1579a1602
> /// @private
1582c1605,1606
<   static_assert(false, "Not implemented");
---
>   auto& f = *static_cast<EventFilterCB*>(userdata);
>   return f(*event);
1637,1638c1661,1663
<  * @param filter an EventFilter function to call when an event happens.
<  * @param userdata a pointer that is passed to `filter`.
---
>  * @param filter an EventFilterCB to call when an event happens.
>  * @returns a handle that can be used on RemoveEventWatch(EventFilterHandle) on
>  *          success.
1644a1670,1671
>  * @cat listener-callback
>  *
1650c1677,1683
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<EventFilterCB>;
>   auto cb = Wrapper::Wrap(std::move(filter));
>   if (!SDL_AddEventWatch(&EventWatchAuxCallback, &cb)) {
>     Wrapper::release(cb);
>     throw Error{};
>   }
>   return EventWatchHandle{cb};
1676,1680c1709
<  * This function takes the same input as AddEventWatch() to identify and
<  * delete the corresponding callback.
<  *
<  * @param filter the function originally passed to AddEventWatch().
<  * @param userdata the pointer originally passed to AddEventWatch().
---
>  * @param handle the handle returned by SDL_AddEventWatch(EventFilterCB).
1686c1715,1717
<  * @sa AddEventWatch
---
>  * @cat listener-callback
>  *
>  * @sa AddEventWatch(EventFilterCB)
1690c1721,1722
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<EventFilterCB>;
>   Wrapper::release(handle);
1725d1756
<  * @param userdata a pointer that is passed to `filter`.
1730a1762,1763
>  * @cat immediate-callback
>  *
1736c1769,1774
<   static_assert(false, "Not implemented");
---
>   return FilterEvents(
>     [](void* userdata, SDL_Event* event) {
>       auto& f = *static_cast<EventFilterCB*>(userdata);
>       return f(*event);
>     },
>     &filter);
1806c1844
<   return CheckError(SDL_GetWindowFromEvent(&event));
---
>   return {CheckError(SDL_GetWindowFromEvent(&event))};
1832,1834c1870,1871
<  * @param event an event to describe. May be nullptr.
<  * @param buf the buffer to fill with the description string. May be nullptr.
<  * @param buflen the maximum bytes that can be written to `buf`.
---
>  * @param event an event to describe
>  * @param buf the buffer to fill with the description string. May be empty.
1843a1881
>   if (buf.size_bytes() == 0) return SDL_GetEventDescription(event, nullptr, 0);
1847,1850d1884
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
1872,1876c1906,1907
<  * @param event an event to describe. May be nullptr.
<  * @param buf the buffer to fill with the description string. May be nullptr.
<  * @param buflen the maximum bytes that can be written to `buf`.
<  * @returns number of bytes needed for the full string, not counting the
<  *          null-terminator byte.
---
>  * @param event an event to describe
>  * @returns a std::string containing the the description string
1884c1915,1919
<   static_assert(false, "Not implemented");
---
>   int sz = SDL_GetEventDescription(event, nullptr, 0);
>   std::string r;
>   r.reserve(sz);
>   GetEventDescription(event, r);
>   return r;
