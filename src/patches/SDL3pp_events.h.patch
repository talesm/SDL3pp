42a43,49
>  * @defgroup EventTypes Event Types
>  *
>  * Event types for Event.
>  * @{
>  */
> 
> /**
447a455,456
> /// @}
> 
819a829,834
>  * @name EventActions
>  * The type of action to request from PeepEvents().
>  * @{
>  */
> 
> /**
834a850,851
> /// @}
> 
839a857,858
>  * ## remarks
>  *
880,881c899,900
<                       Uint32 minType,
<                       Uint32 maxType)
---
>                       Uint32 minType = EVENT_FIRST,
>                       Uint32 maxType = EVENT_LAST)
922c941
< inline bool HasEvents(Uint32 minType, Uint32 maxType)
---
> inline bool HasEvents(Uint32 minType = EVENT_FIRST, Uint32 maxType = EVENT_LAST)
980c999,1000
< inline void FlushEvents(Uint32 minType, Uint32 maxType)
---
> inline void FlushEvents(Uint32 minType = EVENT_FIRST,
>                         Uint32 maxType = EVENT_LAST)
1006c1026
<  * ```c
---
>  * ```cpp
1008,1009c1028,1029
<  *     Event event;
<  *     while (PollEvent(&event)) {  // poll until all events are handled!
---
>  *     SDL::Event event;
>  *     while (SDL::PollEvent(&event)) {  // poll until all events are handled!
1034,1040c1054
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`. The 1 returned refers to
<  * this event, immediately stored in the SDL Event structure -- not an event
<  * to follow.
<  *
<  * If `event` is nullptr, it simply returns 1 if there is an event in the queue,
<  * but will not remove it from the queue.
---
>  * The next event is removed from the queue and returned.
1054,1055c1068
<  *     Event event;
<  *     while (PollEvent(&event)) {  // poll until all events are handled!
---
>  *     while (auto event = SDL::PollEvent()) {
1063,1065c1076,1077
<  * @param event the Event structure to be filled with the next event from
<  *              the queue, or nullptr.
<  * @returns true if this got an event or false if there are none available.
---
>  * @returns Event if this got an event or std::nullopt if there are none
>  * available.
1077c1089,1090
<   static_assert(false, "Not implemented");
---
>   if (Event event; PollEvent(&event)) return event;
>   return std::nullopt;
1106,1107c1119
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`.
---
>  * The next event is removed from the queue and returned.
1112,1113c1124
<  * @param event the Event structure to be filled in with the next event
<  *              from the queue, or nullptr.
---
>  * @returns Event on success.
1124c1135,1140
< inline Event WaitEvent() { static_assert(false, "Not implemented"); }
---
> inline Event WaitEvent()
> {
>   Event event;
>   WaitEvent(&event);
>   return event;
> }
1163,1165d1178
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`.
<  *
1172,1173d1184
<  * @param event the Event structure to be filled in with the next event
<  *              from the queue, or nullptr.
1176,1177c1187,1188
<  * @returns true if this got an event or false if the timeout elapsed without
<  *          any events available.
---
>  * @returns the Event if this got an event or std::nullopt if the timeout
>  * elapsed without any events available.
1189c1200,1201
<   static_assert(false, "Not implemented");
---
>   if (Event event; WaitEventTimeout(&event, timeoutMS)) return event;
>   return std::nullopt;
1207,1208c1219,1220
<  * @param timeoutMS the maximum number of milliseconds to wait for the next
<  *                  available event.
---
>  * @param timeoutDuration the duration to wait for the next available event,
>  *                        with millisecond precision
1223c1235
<   static_assert(false, "Not implemented");
---
>   return WaitEventTimeout(event, std::max(timeoutDuration.count(), 1l));
1227,1231c1239,1240
<  * Wait until the specified timeout (in milliseconds) for the next available
<  * event.
<  *
<  * If `event` is not nullptr, the next event is removed from the queue and
<  * stored in the Event structure pointed to by `event`.
---
>  * Wait until the specified timeout (with milliseconds precision) for the next
>  * available event.
1239,1244c1248,1251
<  * @param event the Event structure to be filled in with the next event
<  *              from the queue, or nullptr.
<  * @param timeoutMS the maximum number of milliseconds to wait for the next
<  *                  available event.
<  * @returns true if this got an event or false if the timeout elapsed without
<  *          any events available.
---
>  * @param timeoutDuration the duration to wait for the next available event,
>  *                        with millisecond precision.
>  * @returns the Event if this got an event or std::nullopt if the timeout
>  * elapsed without any events available.
1257c1264,1265
<   static_assert(false, "Not implemented");
---
>   if (Event event; WaitEventTimeout(&event, timeoutDuration)) return event;
>   return std::nullopt;
1324c1332
<   static_assert(false, "Not implemented");
---
>   PushEvent(const_cast<Event*>(&event));
1349c1357
<  * A function pointer used for callbacks that watch the event queue.
---
>  * A std::function used for callbacks that watch the event queue.
1351,1352d1358
<  * @param userdata what was passed as `userdata` to SetEventFilter() or
<  *                 AddEventWatch, etc.
1355c1361
<  *          disallow it. When used with AddEventWatch, the return value is
---
>  *          disallow it. When used with AddEventWatch(), the return value is
1364,1365c1370,1374
<  * @sa SetEventFilter
<  * @sa AddEventWatch
---
>  * @cat listener-callback
>  *
>  * @sa listener-callback
>  * @sa SetEventFilter()
>  * @sa AddEventWatch()
1370c1379,1384
< /// Handle returned by AddEventWatch()
---
> /**
>  * Handle returned by AddEventWatch(EventFilterCB)
>  *
>  * This can be used later to remove the event filter
>  * RemoveEventWatch(EventFilterHandle).
>  */
1417c1431,1432
<   SDL_SetEventFilter(filter, userdata);
---
>   UniqueCallbackWrapper<EventFilterCB>::erase();
>   return SDL_SetEventFilter(filter, userdata);
1446,1447c1461
<  * @param filter an EventFilter function to call when an event happens.
<  * @param userdata a pointer that is passed to `filter`.
---
>  * @param filter an EventFilterCB function to call when an event happens.
1452a1467,1469
>  * @cat listener-callback
>  *
>  * @sa listener-callback
1461c1478,1483
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<EventFilterCB>;
>   SDL_SetEventFilter(
>     [](void* userdata, SDL_Event* event) {
>       return Wrapper::Call(userdata, *event);
>     },
>     Wrapper::Wrap(std::move(filter)));
1492,1495c1514,1515
<  * @param filter the current callback function will be stored here.
<  * @param userdata the pointer that is passed to the current event filter will
<  *                 be stored here.
<  * @throws Error on failure.
---
>  * @returns EventFilterCB on success or false if there is no event filter
>  * set.
1500a1521,1523
>  * @cat listener-callback
>  *
>  * @sa listener-callback
1505c1528,1540
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<EventFilterCB>;
> 
>   EventFilter filter;
>   void* userdata;
>   GetEventFilter(&filter, &userdata);
>   if (!userdata)
>     return [filter](const Event& event) {
>       return filter(nullptr, const_cast<Event*>(&event));
>     };
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [filter, userdata](const Event& event) {
>     return filter(userdata, const_cast<Event*>(&event));
>   };
1507a1543
> /// @private
1510c1546,1547
<   static_assert(false, "Not implemented");
---
>   auto& f = *static_cast<EventFilterCB*>(userdata);
>   return f(*event);
1565,1566c1602,1604
<  * @param filter an EventFilter function to call when an event happens.
<  * @param userdata a pointer that is passed to `filter`.
---
>  * @param filter an EventFilterCB to call when an event happens.
>  * @returns a handle that can be used on RemoveEventWatch(EventFilterHandle) on
>  *          success.
1572a1611,1613
>  * @cat listener-callback
>  *
>  * @sa listener-callback
1578c1619,1625
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<EventFilterCB>;
>   auto cb = Wrapper::Wrap(std::move(filter));
>   if (!SDL_AddEventWatch(&EventWatchAuxCallback, &cb)) {
>     Wrapper::release(cb);
>     throw Error{};
>   }
>   return EventWatchHandle{cb};
1604,1608c1651
<  * This function takes the same input as AddEventWatch() to identify and
<  * delete the corresponding callback.
<  *
<  * @param filter the function originally passed to AddEventWatch().
<  * @param userdata the pointer originally passed to AddEventWatch().
---
>  * @param handle the handle returned by SDL_AddEventWatch(EventFilterCB).
1614c1657,1660
<  * @sa AddEventWatch
---
>  * @cat listener-callback
>  *
>  * @sa listener-callback
>  * @sa AddEventWatch(EventFilterCB)
1618c1664,1665
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<EventFilterCB>;
>   Wrapper::release(handle);
1653d1699
<  * @param userdata a pointer that is passed to `filter`.
1658a1705,1707
>  * @cat immediate-callback
>  *
>  * @sa immediate-callback
1664c1713,1718
<   static_assert(false, "Not implemented");
---
>   return FilterEvents(
>     [](void* userdata, SDL_Event* event) {
>       auto& f = *static_cast<EventFilterCB*>(userdata);
>       return f(*event);
>     },
>     &filter);
1734c1788
<   return CheckError(SDL_GetWindowFromEvent(&event));
---
>   return {CheckError(SDL_GetWindowFromEvent(&event))};
