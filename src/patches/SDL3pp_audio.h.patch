12c12
<  * @defgroup CategoryAudio Category Audio
---
>  * @defgroup CategoryAudio Audio Playback, Recording, and Mixing
196a197,198
> #ifdef SDL3PP_DOC
> 
234a237,238
> #endif // SDL3PP_DOC
> 
286c290
<    * @param signed 1 for signed data, 0 for unsigned data.
---
>    * @param sign 1 for signed data, 0 for unsigned data.
297c301,302
<     : m_audioFormat(SDL_DEFINE_AUDIO_FORMAT(sign, bigendian, flt, size))
---
>     : m_audioFormat(
>         AudioFormatRaw(SDL_DEFINE_AUDIO_FORMAT(sign, bigendian, flt, size)))
315c320
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread
317c322
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
328c333
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
330c335
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
341c346
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
343c348
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
354c359
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
356c361
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
367c372
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
369c374
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
380c385
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
382c387
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
393c398
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
395c400
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
406c411
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
408c413
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
439a445,451
> // Unfortunate name clash with SDL_oldnames.h
> #undef AUDIO_U8
> #undef AUDIO_S8
> #undef AUDIO_S16
> #undef AUDIO_S32
> #undef AUDIO_F32
> 
482c494
<  * @param signed 1 for signed data, 0 for unsigned data.
---
>  * @param sign 1 for signed data, 0 for unsigned data.
720,721d731
<  * @param userdata a pointer provided by the app through
<  *                 AudioDevice.SetPostmixCallback, for its own use.
726d735
<  * @param buflen the size of `buffer` in bytes.
808,809d816
<  * @param userdata an opaque pointer provided by the app for their personal
<  *                 use.
990,991d996
<    *              AudioDevice.AudioDevice().
<    *
1000,1001d1004
<   constexpr auto operator<=>(AudioDeviceParam other) const = default;
< 
1005,1006c1008,1009
<    * @returns the name of the audio device, or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @returns the name of the audio device on success.
>    * @throws Error on failure.
1039d1041
<    * @param spec on return, will be filled with device details.
1041a1044
>    * @returns the device format details on success.
1059,1060d1061
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1062,1063c1063
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default
1266d1265
<    * @param num_streams number streams listed in the `streams` array.
1393d1391
<    * @param userdata app-controlled pointer passed to callback. Can be nullptr.
1440d1437
<    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
1458,1460c1455,1457
<   AudioStreamRef OpenStream(const AudioSpec& spec,
<                             AudioStreamCallback callback,
<                             void* userdata);
---
>   AudioStream OpenStream(OptionalRef<const AudioSpec> spec,
>                          AudioStreamCallback callback,
>                          void* userdata);
1500d1496
<    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
1503,1507c1499
<    *                 playback, or receive new data for recording. Can be
<    * nullptr, in which case the app will need to call AudioStream.PutData or
<    * AudioStream.GetData as necessary.
<    * @param userdata app-controlled pointer passed to callback. Can be nullptr.
<    *                 Ignored if callback is nullptr.
---
>    *                 playback, or receive new data for recording.
1556c1548
< constexpr AudioDeviceRaw AUDIO_DEVICE_DEFAULT_PLAYBACK =
---
> constexpr AudioDeviceID AUDIO_DEVICE_DEFAULT_PLAYBACK =
1568c1560
< constexpr AudioDeviceRaw AUDIO_DEVICE_DEFAULT_RECORDING =
---
> constexpr AudioDeviceID AUDIO_DEVICE_DEFAULT_RECORDING =
1586c1578
<   return SDL_AUDIO_FRAMESIZE(&x);
---
>   return SDL_AUDIO_FRAMESIZE(x);
1740c1732,1784
<   /// Default ctor
---
>   /**
>    * Convenience function for straightforward audio init for the common case.
>    *
>    * If all your app intends to do is provide a single source of PCM audio, this
>    * function allows you to do all your audio setup in a single call.
>    *
>    * This is also intended to be a clean means to migrate apps from SDL2.
>    *
>    * This function will open an audio device, create a stream and bind it.
>    * Unlike other methods of setup, the audio device will be closed when this
>    * stream is destroyed, so the app can treat the returned AudioStream as
>    * the only object needed to manage audio playback.
>    *
>    * Also unlike other functions, the audio device begins paused. This is to map
>    * more closely to SDL2-style behavior, since there is no extra step here to
>    * bind a stream to begin audio flowing. The audio device should be resumed
>    * with `AudioStream.ResumeDevice(stream);`
>    *
>    * This function works with both playback and recording devices.
>    *
>    * The `spec` parameter represents the app's side of the audio stream. That
>    * is, for recording audio, this will be the output format, and for playing
>    * audio, this will be the input format. If spec is nullptr, the system will
>    * choose the format, and the app can use AudioStream.GetFormat() to obtain
>    * this information later.
>    *
>    * If you don't care about opening a specific audio device, you can (and
>    * probably _should_), use AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and
>    * AUDIO_DEVICE_DEFAULT_RECORDING for recording.
>    *
>    * One can optionally provide a callback function; if nullptr, the app is
>    * expected to queue audio data for playback (or unqueue audio data if
>    * capturing). Otherwise, the callback will begin to fire once the device is
>    * unpaused.
>    *
>    * Destroying the returned stream with AudioStream.Destroy will also close
>    * the audio device associated with this stream.
>    *
>    * @param devid an audio device to open, or AUDIO_DEVICE_DEFAULT_PLAYBACK
>    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
>    * @param spec the audio stream's data format. Can be nullptr.
>    * @param callback a callback where the app will provide new data for
>    *                 playback, or receive new data for recording.
>    * @post an audio stream on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetDevice
>    * @sa AudioStream.ResumeDevice
>    */
1789d1832
<    *
1810c1853,1871
<   AudioSpec GetInputFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Query the current input format of an audio stream.
>    *
>    * @returns the input audio format.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetFormat
>    */
>   AudioSpec GetInputFormat() const
>   {
>     AudioSpec spec;
>     GetFormat(&spec, nullptr);
>     return spec;
>   }
1812c1873,1891
<   AudioSpec GetOutputFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Query the current output format of an audio stream.
>    *
>    * @returns the output audio format.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetFormat
>    */
>   AudioSpec GetOutputFormat() const
>   {
>     AudioSpec spec;
>     GetFormat(nullptr, &spec);
>     return spec;
>   }
1830,1833c1909,1939
<   void SetInputFormat(const AudioSpec& spec)
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Change the input format of an audio stream.
>    *
>    * Future calls to and AudioStreamRef.GetAvailable and
>    * AudioStreamRef.GetData will reflect the new format, and future calls to
>    * AudioStreamRef.PutData must provide data in the new input formats.
>    *
>    * Data that was previously queued in the stream will still be operated on in
>    * the format that was current when it was added, which is to say you can put
>    * the end of a sound file in one format to a stream, change formats for the
>    * next sound file, and start putting that new data while the previous sound
>    * file is still queued, and everything will still play back correctly.
>    *
>    * If a stream is bound to a device, then the format of the side of the stream
>    * bound to a device cannot be changed (src_spec for recording devices,
>    * dst_spec for playback devices). Attempts to make a change to this side will
>    * be ignored, but this will not report an error. The other side's format can
>    * be changed.
>    *
>    * @param spec the new format of the audio input.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetFormat
>    * @sa AudioStream.SetFrequencyRatio
>    */
>   void SetInputFormat(const AudioSpec& spec) { SetFormat(spec, std::nullopt); }
1835,1838c1941,1971
<   void SetOutputFormat(const AudioSpec& spec)
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Change the output format of an audio stream.
>    *
>    * Future calls to and AudioStreamRef.GetAvailable and
>    * AudioStreamRef.GetData will reflect the new format, and future calls to
>    * AudioStreamRef.PutData must provide data in the new input formats.
>    *
>    * Data that was previously queued in the stream will still be operated on in
>    * the format that was current when it was added, which is to say you can put
>    * the end of a sound file in one format to a stream, change formats for the
>    * next sound file, and start putting that new data while the previous sound
>    * file is still queued, and everything will still play back correctly.
>    *
>    * If a stream is bound to a device, then the format of the side of the stream
>    * bound to a device cannot be changed (src_spec for recording devices,
>    * dst_spec for playback devices). Attempts to make a change to this side will
>    * be ignored, but this will not report an error. The other side's format can
>    * be changed.
>    *
>    * @param spec the new format of the audio output.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetFormat
>    * @sa AudioStream.SetFrequencyRatio
>    */
>   void SetOutputFormat(const AudioSpec& spec) { SetFormat(std::nullopt, spec); }
1969,1970d2101
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1972,1973c2103
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default.
1993,1994d2122
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1996,1997c2124
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default.
2052d2178
<    * @param count The number of channels in the map.
2108d2233
<    * @param count The number of channels in the map.
2134d2258
<    * @param len the number of bytes to write to the stream.
2163d2286
<    * @param len the maximum number of bytes to fill.
2457,2458d2579
<    * @param userdata an opaque pointer provided to the callback for its own
<    *                 personal use.
2551,2552d2671
<    * @param userdata an opaque pointer provided to the callback for its own
<    *                 personal use.
2707,2711c2826,2827
<  * @param count a pointer filled in with the number of devices returned, may
<  *              be nullptr.
<  * @returns a 0 terminated array of device instance IDs or nullptr on error;
<  * call GetError() for more information. This should be freed with free() when
<  * it is no longer needed.
---
>  * @returns a 0 terminated array of device instance IDs on success.
>  * @throws Error on failure.
2722c2838,2841
<   return SDL_GetAudioPlaybackDevices();
---
>   int count;
>   auto data = CheckError(SDL_GetAudioPlaybackDevices(&count));
>   return OwnArray<AudioDeviceRef>{reinterpret_cast<AudioDeviceRef*>(data),
>                                   size_t(count)};
2739,2743c2858,2859
<  * @param count a pointer filled in with the number of devices returned, may
<  *              be nullptr.
<  * @returns a 0 terminated array of device instance IDs, or nullptr on failure;
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  * @returns a 0 terminated array of device instance IDs on success.
>  * @throws Error on failure.
2754c2870,2873
<   return SDL_GetAudioRecordingDevices();
---
>   int count;
>   auto data = CheckError(SDL_GetAudioRecordingDevices(&count));
>   return OwnArray<AudioDeviceRef>{reinterpret_cast<AudioDeviceRef*>(data),
>                                   size_t(count)};
2761,2762c2880,2881
<  * @returns the name of the audio device, or nullptr on failure; call
<  *          GetError() for more information.
---
>  * @returns the name of the audio device on success.
>  * @throws Error on failure.
2773c2892
<   return SDL_GetAudioDeviceName(devid);
---
>   return CheckError(SDL_GetAudioDeviceName(devid));
2804d2922
<  * @param spec on return, will be filled with device details.
2816c2934,2936
<   return CheckError(SDL_GetAudioDeviceFormat(devid, sample_frames));
---
>   AudioSpec spec;
>   CheckError(SDL_GetAudioDeviceFormat(devid, &spec, sample_frames));
>   return spec;
2834d2953
<  * @param count On output, set to number of channels in the map. Can be nullptr.
2836,2837c2955
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default
2847c2965,2967
<   return SDL_GetAudioDeviceChannelMap(devid);
---
>   int count;
>   auto data = SDL_GetAudioDeviceChannelMap(devid, &count);
>   return OwnArray<int>{data, size_t(count)};
2930c3050
<                                    const AudioSpec& spec)
---
>                                    OptionalRef<const AudioSpec> spec)
3212d3331
<  * @param num_streams number streams listed in the `streams` array.
3226c3345,3348
<   CheckError(SDL_BindAudioStreams(devid, streams));
---
>   CheckError(SDL_BindAudioStreams(
>     devid,
>     reinterpret_cast<SDL_AudioStream* const*>(streams.data()),
>     streams.size()));
3273d3394
<  * @param num_streams number streams listed in the `streams` array.
3283c3404,3405
<   SDL_UnbindAudioStreams(streams);
---
>   SDL_UnbindAudioStreams(
>     reinterpret_cast<SDL_AudioStream* const*>(streams.data()), streams.size());
3328c3450
<   return SDL_GetAudioStreamDevice(stream);
---
>   return {SDL_GetAudioStreamDevice(stream)};
3356,3357c3478,3479
< inline AudioStream CreateAudioStream(const AudioSpec& src_spec,
<                                      const AudioSpec& dst_spec)
---
> inline AudioStream CreateAudioStream(OptionalRef<const AudioSpec> src_spec,
>                                      OptionalRef<const AudioSpec> dst_spec)
3375c3497
<   return CheckError(SDL_GetAudioStreamProperties(stream));
---
>   return {CheckError(SDL_GetAudioStreamProperties(stream))};
3588d3709
<  * @param count On output, set to number of channels in the map. Can be nullptr.
3590,3591c3711
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default.
3602c3722,3725
<   return SDL_GetAudioStreamInputChannelMap(stream);
---
>   int count;
>   auto data = SDL_GetAudioStreamInputChannelMap(stream, &count);
>   if (!data) return {};
>   return OwnArray<int>{data, size_t(count)};
3620d3742
<  * @param count On output, set to number of channels in the map. Can be nullptr.
3622,3623c3744
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default.
3634c3755,3758
<   return SDL_GetAudioStreamOutputChannelMap(stream);
---
>   int count;
>   auto data = SDL_GetAudioStreamOutputChannelMap(stream, &count);
>   if (!data) return {};
>   return OwnArray<int>{data, size_t(count)};
3687d3810
<  * @param count The number of channels in the map.
3702c3825,3826
<   CheckError(SDL_SetAudioStreamInputChannelMap(stream, chmap));
---
>   CheckError(
>     SDL_SetAudioStreamInputChannelMap(stream, chmap.data(), chmap.size()));
3753d3876
<  * @param count The number of channels in the map.
3768c3891,3892
<   CheckError(SDL_SetAudioStreamOutputChannelMap(stream, chmap));
---
>   CheckError(
>     SDL_SetAudioStreamOutputChannelMap(stream, chmap.data(), chmap.size()));
3789d3912
<  * @param len the number of bytes to write to the stream.
3827d3949
<  * @param len the maximum number of bytes to fill.
4168a4291
>   KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 0>::release(stream);
4205,4206d4327
<  * @param userdata an opaque pointer provided to the callback for its own
<  *                 personal use.
4218c4339,4351
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 0>;
>   if (!SDL_SetAudioStreamGetCallback(
>         stream,
>         [](void* userdata,
>            SDL_AudioStream* stream,
>            int additional_amount,
>            int total_amount) {
>           Wrapper::Call(userdata, {stream}, additional_amount, total_amount);
>         },
>         Wrapper::Wrap(stream, std::move(callback)))) {
>     Wrapper::release(stream);
>     throw Error{};
>   }
4281a4415
>   KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 1>::release(stream);
4321,4322d4454
<  * @param userdata an opaque pointer provided to the callback for its own
<  *                 personal use.
4334c4466,4478
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 1>;
>   if (!SDL_SetAudioStreamPutCallback(
>         stream,
>         [](void* userdata,
>            SDL_AudioStream* stream,
>            int additional_amount,
>            int total_amount) {
>           Wrapper::Call(userdata, {stream}, additional_amount, total_amount);
>         },
>         Wrapper::Wrap(stream, std::move(callback)))) {
>     Wrapper::release(stream);
>     throw Error{};
>   }
4433,4435c4577,4579
<                                          const AudioSpec& spec,
<                                          AudioStreamCallback callback,
<                                          void* userdata)
---
>                                          OptionalRef<const AudioSpec> spec,
>                                          AudioStreamCallback callback = nullptr,
>                                          void* userdata = nullptr)
4482,4487c4626
<  *                 playback, or receive new data for recording. Can be nullptr,
<  *                 in which case the app will need to call
<  *                 AudioStream.PutData or AudioStream.GetData as
<  *                 necessary.
<  * @param userdata app-controlled pointer passed to callback. Can be nullptr.
<  *                 Ignored if callback is nullptr.
---
>  *                 playback, or receive new data for recording.
4505,4507c4644,4646
< inline AudioStreamRef AudioDevice::OpenStream(const AudioSpec& spec,
<                                               AudioStreamCallback callback,
<                                               void* userdata)
---
> inline AudioStream AudioDevice::OpenStream(OptionalRef<const AudioSpec> spec,
>                                            AudioStreamCallback callback,
>                                            void* userdata)
4515c4654
<   return SDL::OpenAudioDeviceStream(m_resource, spec, callback);
---
>   return AudioStream(m_resource, spec, callback);
4520a4660
>   : AudioStream(devid, spec)
4521a4662,4666
>   if (IsAudioDevicePlayback(devid)) {
>     SetGetCallback(std::move(callback));
>   } else {
>     SetPutCallback(std::move(callback));
>   }
4578a4724
>   KeyValueCallbackWrapper<AudioDeviceParam, AudioPostmixCB>::release(devid);
4626d4771
<  * @param userdata app-controlled pointer passed to callback. Can be nullptr.
4636c4781,4794
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<AudioDeviceParam, AudioPostmixCB>;
>   if (!SDL_SetAudioPostmixCallback(
>         devid,
>         [](void* userdata,
>            const SDL_AudioSpec* spec,
>            float* buffer,
>            int buflen) {
>           Wrapper::Call(
>             userdata, *spec, std::span<float>(buffer, size_t(buflen)));
>         },
>         Wrapper::Wrap(devid, std::move(callback)))) {
>     Wrapper::release(devid);
>     throw Error{};
>   }
4690,4691c4848,4849
<  * ```c
<  * LoadWAV(IOStream.FromFile("sample.wav", "rb"), true, &spec, &buf, &len);
---
>  * ```cpp
>  * LoadWAV(IOStream.FromFile("sample.wav", "rb"), spec);
4697,4698c4855,4856
<  * ```c
<  * LoadWAV("sample.wav", &spec, &buf, &len);
---
>  * ```cpp
>  * LoadWAV("sample.wav", &spec);
4702,4703d4859
<  * @param closeio if true, calls IOStream.Close() on `src` before returning,
<  * even in the case of an error.
4706,4709c4862,4863
<  * @param audio_buf a pointer filled with the audio data, allocated by the
<  *                  function.
<  * @param audio_len a pointer filled with the length of the audio data buffer
<  *                  in bytes.
---
>  * @param closeio if true, calls IOStream.Close() on `src` before returning,
>  *                even in the case of an error.
4712,4717c4866,4867
<  *          This function returns false if the .WAV file cannot be opened,
<  *          uses an unknown data format, or is corrupt; call GetError()
<  *          for more information.
<  *
<  *          When the application is done with the data returned in
<  *          `audio_buf`, it should call free() to dispose of it.
---
>  * This function throws if the .WAV file cannot be opened, uses an unknown data
>  * format, or is corrupt; call GetError() for more information.
4723d4872
<  * @sa free
4730c4879,4882
<   return CheckError(SDL_LoadWAV_IO(src, spec, closeio));
---
>   Uint8* buf;
>   Uint32 len;
>   if (!SDL_LoadWAV_IO(src, closeio, spec, &buf, &len)) return {};
>   return OwnArray<Uint8>{buf, size_t(len)};
4745,4748d4896
<  * @param audio_buf a pointer filled with the audio data, allocated by the
<  *                  function.
<  * @param audio_len a pointer filled with the length of the audio data buffer
<  *                  in bytes.
4751,4756c4899,4900
<  *          This function returns false if the .WAV file cannot be opened,
<  *          uses an unknown data format, or is corrupt; call GetError()
<  *          for more information.
<  *
<  *          When the application is done with the data returned in
<  *          `audio_buf`, it should call free() to dispose of it.
---
>  * This function throws if the .WAV file cannot be opened, uses an unknown data
>  * format, or is corrupt,
4762d4905
<  * @sa free
4767c4910,4913
<   return CheckError(SDL_LoadWAV(path, spec));
---
>   Uint8* buf;
>   Uint32 len;
>   if (!SDL_LoadWAV(path, spec, &buf, &len)) return {};
>   return OwnArray<Uint8>{buf, size_t(len)};
4794d4939
<  * @param len the length of the audio buffer in bytes.
4808c4953,4954
<   CheckError(SDL_MixAudio(dst, src.data(), src.size_bytes(), format, volume));
---
>   CheckError(
>     SDL_MixAudio(dst, src.data_as<Uint8>(), format, src.size_bytes(), volume));
4835d4980
<  * @param len the length of the audio buffer in bytes.
4849c4994,5000
<   static_assert(false, "Not implemented");
---
>   if (dst.size_bytes() < src.size_bytes()) {
>     MixAudio(dst.data_as<Uint8>(),
>              SourceBytes{src.data(), dst.size_bytes()},
>              format,
>              volume);
>   } else
>     MixAudio(dst.data_as<Uint8>(), src, format, volume);
4867d5017
<  * @param src_len the len of src_data.
4869,4872d5018
<  * @param dst_data will be filled with a pointer to converted audio data,
<  *                 which should be freed with free(). On error, it will be
<  *                 nullptr.
<  * @param dst_len will be filled with the len of dst_data.
4883,4884c5029,5037
<   return CheckError(SDL_ConvertAudioSamples(
<     &src_spec, src_data.data(), src_data.size_bytes(), &dst_spec));
---
>   Uint8* buf;
>   int len;
>   CheckError(SDL_ConvertAudioSamples(&src_spec,
>                                      src_data.data_as<Uint8>(),
>                                      src_data.size_bytes(),
>                                      &dst_spec,
>                                      &buf,
>                                      &len));
>   return OwnArray<Uint8>{buf, size_t(len)};
