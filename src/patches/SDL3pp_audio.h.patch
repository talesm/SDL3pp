12c12
<  * @defgroup CategoryAudio Category Audio
---
>  * @defgroup CategoryAudio Audio Playback, Recording, and Mixing
200c200
<  * Generally one should use AudioFormat.GetBitSize instead of this macro
---
>  * Generally one should use AudioFormat.GetBitSize instead of this constant
210c210,211
<  * Generally one should use AudioFormat.IsFloat instead of this macro directly.
---
>  * Generally one should use AudioFormat.IsFloat instead of this constant
>  * directly.
220c221
<  * AudioFormat.IsLittleEndian instead of this macro directly.
---
>  * AudioFormat.IsLittleEndian instead of this constant directly.
229c230,231
<  * Generally one should use AudioFormat.IsSigned instead of this macro directly.
---
>  * Generally one should use AudioFormat.IsSigned instead of this constant
>  * directly.
286c288
<    * @param signed 1 for signed data, 0 for unsigned data.
---
>    * @param sign 1 for signed data, 0 for unsigned data.
297c299,300
<     : m_audioFormat(SDL_DEFINE_AUDIO_FORMAT(sign, bigendian, flt, size))
---
>     : m_audioFormat(
>         AudioFormatRaw(SDL_DEFINE_AUDIO_FORMAT(sign, bigendian, flt, size)))
439a443,449
> // Unfortunate name clash with SDL_oldnames.h
> #undef AUDIO_U8
> #undef AUDIO_S8
> #undef AUDIO_S16
> #undef AUDIO_S32
> #undef AUDIO_F32
> 
482c492
<  * @param signed 1 for signed data, 0 for unsigned data.
---
>  * @param sign 1 for signed data, 0 for unsigned data.
720,721d729
<  * @param userdata a pointer provided by the app through
<  *                 AudioDevice.SetPostmixCallback, for its own use.
726d733
<  * @param buflen the size of `buffer` in bytes.
808,809d814
<  * @param userdata an opaque pointer provided by the app for their personal
<  *                 use.
990,991d994
<    *              AudioDevice.AudioDevice().
<    *
1000,1001d1002
<   constexpr auto operator<=>(AudioDeviceParam other) const = default;
< 
1005,1006c1006,1007
<    * @returns the name of the audio device, or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @returns the name of the audio device on success.
>    * @throws Error on failure.
1039d1039
<    * @param spec on return, will be filled with device details.
1041a1042
>    * @returns the device format details on success.
1059,1060d1059
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1062,1063c1061
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default
1266d1263
<    * @param num_streams number streams listed in the `streams` array.
1393d1389
<    * @param userdata app-controlled pointer passed to callback. Can be nullptr.
1440d1435
<    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
1458,1460c1453,1455
<   AudioStreamRef OpenStream(const AudioSpec& spec,
<                             AudioStreamCallback callback,
<                             void* userdata);
---
>   AudioStream OpenStream(OptionalRef<const AudioSpec> spec,
>                          AudioStreamCallback callback,
>                          void* userdata);
1500d1494
<    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
1503,1507c1497
<    *                 playback, or receive new data for recording. Can be
<    * nullptr, in which case the app will need to call AudioStream.PutData or
<    * AudioStream.GetData as necessary.
<    * @param userdata app-controlled pointer passed to callback. Can be nullptr.
<    *                 Ignored if callback is nullptr.
---
>    *                 playback, or receive new data for recording.
1556c1546
< constexpr AudioDeviceRaw AUDIO_DEVICE_DEFAULT_PLAYBACK =
---
> constexpr AudioDeviceID AUDIO_DEVICE_DEFAULT_PLAYBACK =
1568c1558
< constexpr AudioDeviceRaw AUDIO_DEVICE_DEFAULT_RECORDING =
---
> constexpr AudioDeviceID AUDIO_DEVICE_DEFAULT_RECORDING =
1586c1576
<   return SDL_AUDIO_FRAMESIZE(&x);
---
>   return SDL_AUDIO_FRAMESIZE(x);
1740c1730,1782
<   /// Default ctor
---
>   /**
>    * Convenience function for straightforward audio init for the common case.
>    *
>    * If all your app intends to do is provide a single source of PCM audio, this
>    * function allows you to do all your audio setup in a single call.
>    *
>    * This is also intended to be a clean means to migrate apps from SDL2.
>    *
>    * This function will open an audio device, create a stream and bind it.
>    * Unlike other methods of setup, the audio device will be closed when this
>    * stream is destroyed, so the app can treat the returned AudioStream as
>    * the only object needed to manage audio playback.
>    *
>    * Also unlike other functions, the audio device begins paused. This is to map
>    * more closely to SDL2-style behavior, since there is no extra step here to
>    * bind a stream to begin audio flowing. The audio device should be resumed
>    * with `AudioStream.ResumeDevice(stream);`
>    *
>    * This function works with both playback and recording devices.
>    *
>    * The `spec` parameter represents the app's side of the audio stream. That
>    * is, for recording audio, this will be the output format, and for playing
>    * audio, this will be the input format. If spec is nullptr, the system will
>    * choose the format, and the app can use AudioStream.GetFormat() to obtain
>    * this information later.
>    *
>    * If you don't care about opening a specific audio device, you can (and
>    * probably _should_), use AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and
>    * AUDIO_DEVICE_DEFAULT_RECORDING for recording.
>    *
>    * One can optionally provide a callback function; if nullptr, the app is
>    * expected to queue audio data for playback (or unqueue audio data if
>    * capturing). Otherwise, the callback will begin to fire once the device is
>    * unpaused.
>    *
>    * Destroying the returned stream with AudioStream.Destroy will also close
>    * the audio device associated with this stream.
>    *
>    * @param devid an audio device to open, or AUDIO_DEVICE_DEFAULT_PLAYBACK
>    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
>    * @param spec the audio stream's data format. Can be nullptr.
>    * @param callback a callback where the app will provide new data for
>    *                 playback, or receive new data for recording.
>    * @post an audio stream on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetDevice
>    * @sa AudioStream.ResumeDevice
>    */
1789d1830
<    *
1821c1862,1880
<   AudioSpec GetInputFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Query the current input format of an audio stream.
>    *
>    * @returns the input audio format.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetFormat
>    */
>   AudioSpec GetInputFormat() const
>   {
>     AudioSpec spec;
>     GetFormat(&spec, nullptr);
>     return spec;
>   }
1823c1882,1900
<   AudioSpec GetOutputFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Query the current output format of an audio stream.
>    *
>    * @returns the output audio format.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetFormat
>    */
>   AudioSpec GetOutputFormat() const
>   {
>     AudioSpec spec;
>     GetFormat(nullptr, &spec);
>     return spec;
>   }
1841,1844c1918,1948
<   void SetInputFormat(const AudioSpec& spec)
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Change the input format of an audio stream.
>    *
>    * Future calls to and AudioStreamRef.GetAvailable and
>    * AudioStreamRef.GetData will reflect the new format, and future calls to
>    * AudioStreamRef.PutData must provide data in the new input formats.
>    *
>    * Data that was previously queued in the stream will still be operated on in
>    * the format that was current when it was added, which is to say you can put
>    * the end of a sound file in one format to a stream, change formats for the
>    * next sound file, and start putting that new data while the previous sound
>    * file is still queued, and everything will still play back correctly.
>    *
>    * If a stream is bound to a device, then the format of the side of the stream
>    * bound to a device cannot be changed (src_spec for recording devices,
>    * dst_spec for playback devices). Attempts to make a change to this side will
>    * be ignored, but this will not report an error. The other side's format can
>    * be changed.
>    *
>    * @param spec the new format of the audio input.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetFormat
>    * @sa AudioStream.SetFrequencyRatio
>    */
>   void SetInputFormat(const AudioSpec& spec) { SetFormat(spec, std::nullopt); }
1846,1849c1950,1980
<   void SetOutputFormat(const AudioSpec& spec)
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Change the output format of an audio stream.
>    *
>    * Future calls to and AudioStreamRef.GetAvailable and
>    * AudioStreamRef.GetData will reflect the new format, and future calls to
>    * AudioStreamRef.PutData must provide data in the new input formats.
>    *
>    * Data that was previously queued in the stream will still be operated on in
>    * the format that was current when it was added, which is to say you can put
>    * the end of a sound file in one format to a stream, change formats for the
>    * next sound file, and start putting that new data while the previous sound
>    * file is still queued, and everything will still play back correctly.
>    *
>    * If a stream is bound to a device, then the format of the side of the stream
>    * bound to a device cannot be changed (src_spec for recording devices,
>    * dst_spec for playback devices). Attempts to make a change to this side will
>    * be ignored, but this will not report an error. The other side's format can
>    * be changed.
>    *
>    * @param spec the new format of the audio output.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetFormat
>    * @sa AudioStream.SetFrequencyRatio
>    */
>   void SetOutputFormat(const AudioSpec& spec) { SetFormat(std::nullopt, spec); }
1980,1981d2110
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1983,1984c2112
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default.
2004,2005d2131
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
2007,2008c2133
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default.
2063d2187
<    * @param count The number of channels in the map.
2119d2242
<    * @param count The number of channels in the map.
2145d2267
<    * @param len the number of bytes to write to the stream.
2174d2295
<    * @param len the maximum number of bytes to fill.
2468,2469d2588
<    * @param userdata an opaque pointer provided to the callback for its own
<    *                 personal use.
2562,2563d2680
<    * @param userdata an opaque pointer provided to the callback for its own
<    *                 personal use.
2659,2662d2775
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
2827,2831c2940,2941
<  * @param count a pointer filled in with the number of devices returned, may
<  *              be nullptr.
<  * @returns a 0 terminated array of device instance IDs or nullptr on error;
<  * call GetError() for more information. This should be freed with free() when
<  * it is no longer needed.
---
>  * @returns a 0 terminated array of device instance IDs on success.
>  * @throws Error on failure.
2842c2952,2955
<   return SDL_GetAudioPlaybackDevices();
---
>   int count;
>   auto data = CheckError(SDL_GetAudioPlaybackDevices(&count));
>   return OwnArray<AudioDeviceRef>{reinterpret_cast<AudioDeviceRef*>(data),
>                                   size_t(count)};
2859,2863c2972,2973
<  * @param count a pointer filled in with the number of devices returned, may
<  *              be nullptr.
<  * @returns a 0 terminated array of device instance IDs, or nullptr on failure;
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  * @returns a 0 terminated array of device instance IDs on success.
>  * @throws Error on failure.
2874c2984,2987
<   return SDL_GetAudioRecordingDevices();
---
>   int count;
>   auto data = CheckError(SDL_GetAudioRecordingDevices(&count));
>   return OwnArray<AudioDeviceRef>{reinterpret_cast<AudioDeviceRef*>(data),
>                                   size_t(count)};
2881,2882c2994,2995
<  * @returns the name of the audio device, or nullptr on failure; call
<  *          GetError() for more information.
---
>  * @returns the name of the audio device on success.
>  * @throws Error on failure.
2893c3006
<   return SDL_GetAudioDeviceName(devid);
---
>   return CheckError(SDL_GetAudioDeviceName(devid));
2924d3036
<  * @param spec on return, will be filled with device details.
2936c3048,3050
<   return CheckError(SDL_GetAudioDeviceFormat(devid, sample_frames));
---
>   AudioSpec spec;
>   CheckError(SDL_GetAudioDeviceFormat(devid, &spec, sample_frames));
>   return spec;
2954d3067
<  * @param count On output, set to number of channels in the map. Can be nullptr.
2956,2957c3069
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default
2967c3079,3081
<   return SDL_GetAudioDeviceChannelMap(devid);
---
>   int count;
>   auto data = SDL_GetAudioDeviceChannelMap(devid, &count);
>   return OwnArray<int>{data, size_t(count)};
3050c3164
<                                    const AudioSpec& spec)
---
>                                    OptionalRef<const AudioSpec> spec)
3332d3445
<  * @param num_streams number streams listed in the `streams` array.
3346c3459,3462
<   CheckError(SDL_BindAudioStreams(devid, streams));
---
>   CheckError(SDL_BindAudioStreams(
>     devid,
>     reinterpret_cast<SDL_AudioStream* const*>(streams.data()),
>     streams.size()));
3393d3508
<  * @param num_streams number streams listed in the `streams` array.
3403c3518,3519
<   SDL_UnbindAudioStreams(streams);
---
>   SDL_UnbindAudioStreams(
>     reinterpret_cast<SDL_AudioStream* const*>(streams.data()), streams.size());
3448c3564
<   return SDL_GetAudioStreamDevice(stream);
---
>   return {SDL_GetAudioStreamDevice(stream)};
3476,3477c3592,3593
< inline AudioStream CreateAudioStream(const AudioSpec& src_spec,
<                                      const AudioSpec& dst_spec)
---
> inline AudioStream CreateAudioStream(OptionalRef<const AudioSpec> src_spec,
>                                      OptionalRef<const AudioSpec> dst_spec)
3506c3622
<   return CheckError(SDL_GetAudioStreamProperties(stream));
---
>   return {CheckError(SDL_GetAudioStreamProperties(stream))};
3730d3845
<  * @param count On output, set to number of channels in the map. Can be nullptr.
3732,3733c3847
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default.
3744c3858,3861
<   return SDL_GetAudioStreamInputChannelMap(stream);
---
>   int count;
>   auto data = SDL_GetAudioStreamInputChannelMap(stream, &count);
>   if (!data) return {};
>   return OwnArray<int>{data, size_t(count)};
3762d3878
<  * @param count On output, set to number of channels in the map. Can be nullptr.
3764,3765c3880
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default.
3776c3891,3894
<   return SDL_GetAudioStreamOutputChannelMap(stream);
---
>   int count;
>   auto data = SDL_GetAudioStreamOutputChannelMap(stream, &count);
>   if (!data) return {};
>   return OwnArray<int>{data, size_t(count)};
3829d3946
<  * @param count The number of channels in the map.
3844c3961,3962
<   CheckError(SDL_SetAudioStreamInputChannelMap(stream, chmap));
---
>   CheckError(
>     SDL_SetAudioStreamInputChannelMap(stream, chmap.data(), chmap.size()));
3895d4012
<  * @param count The number of channels in the map.
3910c4027,4028
<   CheckError(SDL_SetAudioStreamOutputChannelMap(stream, chmap));
---
>   CheckError(
>     SDL_SetAudioStreamOutputChannelMap(stream, chmap.data(), chmap.size()));
3931d4048
<  * @param len the number of bytes to write to the stream.
3987,3990d4103
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
4022,4025d4134
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
4080,4083d4188
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
4092,4095d4196
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
4155,4158d4255
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
4183d4279
<  * @param len the maximum number of bytes to fill.
4524a4621
>   KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 0>::release(stream);
4561,4562d4657
<  * @param userdata an opaque pointer provided to the callback for its own
<  *                 personal use.
4574c4669,4681
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 0>;
>   if (!SDL_SetAudioStreamGetCallback(
>         stream,
>         [](void* userdata,
>            SDL_AudioStream* stream,
>            int additional_amount,
>            int total_amount) {
>           Wrapper::Call(userdata, {stream}, additional_amount, total_amount);
>         },
>         Wrapper::Wrap(stream, std::move(callback)))) {
>     Wrapper::release(stream);
>     throw Error{};
>   }
4637a4745
>   KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 1>::release(stream);
4677,4678d4784
<  * @param userdata an opaque pointer provided to the callback for its own
<  *                 personal use.
4690c4796,4808
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<SDL_AudioStream*, AudioStreamCB, 1>;
>   if (!SDL_SetAudioStreamPutCallback(
>         stream,
>         [](void* userdata,
>            SDL_AudioStream* stream,
>            int additional_amount,
>            int total_amount) {
>           Wrapper::Call(userdata, {stream}, additional_amount, total_amount);
>         },
>         Wrapper::Wrap(stream, std::move(callback)))) {
>     Wrapper::release(stream);
>     throw Error{};
>   }
4789,4791c4907,4909
<                                          const AudioSpec& spec,
<                                          AudioStreamCallback callback,
<                                          void* userdata)
---
>                                          OptionalRef<const AudioSpec> spec,
>                                          AudioStreamCallback callback = nullptr,
>                                          void* userdata = nullptr)
4838,4843c4956
<  *                 playback, or receive new data for recording. Can be nullptr,
<  *                 in which case the app will need to call
<  *                 AudioStream.PutData or AudioStream.GetData as
<  *                 necessary.
<  * @param userdata app-controlled pointer passed to callback. Can be nullptr.
<  *                 Ignored if callback is nullptr.
---
>  *                 playback, or receive new data for recording.
4861,4863c4974,4976
< inline AudioStreamRef AudioDevice::OpenStream(const AudioSpec& spec,
<                                               AudioStreamCallback callback,
<                                               void* userdata)
---
> inline AudioStream AudioDevice::OpenStream(OptionalRef<const AudioSpec> spec,
>                                            AudioStreamCallback callback,
>                                            void* userdata)
4871c4984
<   return SDL::OpenAudioDeviceStream(m_resource, spec, callback);
---
>   return AudioStream(m_resource, spec, callback);
4876a4990
>   : AudioStream(devid, spec)
4877a4992,4996
>   if (IsAudioDevicePlayback(devid)) {
>     SetGetCallback(std::move(callback));
>   } else {
>     SetPutCallback(std::move(callback));
>   }
4934a5054
>   KeyValueCallbackWrapper<AudioDeviceParam, AudioPostmixCB>::release(devid);
4982d5101
<  * @param userdata app-controlled pointer passed to callback. Can be nullptr.
4992c5111,5124
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<AudioDeviceParam, AudioPostmixCB>;
>   if (!SDL_SetAudioPostmixCallback(
>         devid,
>         [](void* userdata,
>            const SDL_AudioSpec* spec,
>            float* buffer,
>            int buflen) {
>           Wrapper::Call(
>             userdata, *spec, std::span<float>(buffer, size_t(buflen)));
>         },
>         Wrapper::Wrap(devid, std::move(callback)))) {
>     Wrapper::release(devid);
>     throw Error{};
>   }
5046,5047c5178,5179
<  * ```c
<  * LoadWAV(IOStream.FromFile("sample.wav", "rb"), true, &spec, &buf, &len);
---
>  * ```cpp
>  * LoadWAV(IOStream.FromFile("sample.wav", "rb"), spec);
5053,5054c5185,5186
<  * ```c
<  * LoadWAV("sample.wav", &spec, &buf, &len);
---
>  * ```cpp
>  * LoadWAV("sample.wav", &spec);
5058,5059d5189
<  * @param closeio if true, calls IOStream.Close() on `src` before returning,
<  * even in the case of an error.
5062,5065c5192,5193
<  * @param audio_buf a pointer filled with the audio data, allocated by the
<  *                  function.
<  * @param audio_len a pointer filled with the length of the audio data buffer
<  *                  in bytes.
---
>  * @param closeio if true, calls IOStream.Close() on `src` before returning,
>  *                even in the case of an error.
5068,5073c5196,5197
<  *          This function returns false if the .WAV file cannot be opened,
<  *          uses an unknown data format, or is corrupt; call GetError()
<  *          for more information.
<  *
<  *          When the application is done with the data returned in
<  *          `audio_buf`, it should call free() to dispose of it.
---
>  * This function throws if the .WAV file cannot be opened, uses an unknown data
>  * format, or is corrupt; call GetError() for more information.
5079d5202
<  * @sa free
5086c5209,5212
<   return CheckError(SDL_LoadWAV_IO(src, spec, closeio));
---
>   Uint8* buf;
>   Uint32 len;
>   if (!SDL_LoadWAV_IO(src, closeio, spec, &buf, &len)) return {};
>   return OwnArray<Uint8>{buf, size_t(len)};
5101,5104d5226
<  * @param audio_buf a pointer filled with the audio data, allocated by the
<  *                  function.
<  * @param audio_len a pointer filled with the length of the audio data buffer
<  *                  in bytes.
5107,5112c5229,5230
<  *          This function returns false if the .WAV file cannot be opened,
<  *          uses an unknown data format, or is corrupt; call GetError()
<  *          for more information.
<  *
<  *          When the application is done with the data returned in
<  *          `audio_buf`, it should call free() to dispose of it.
---
>  * This function throws if the .WAV file cannot be opened, uses an unknown data
>  * format, or is corrupt,
5118d5235
<  * @sa free
5123c5240,5243
<   return CheckError(SDL_LoadWAV(path, spec));
---
>   Uint8* buf;
>   Uint32 len;
>   if (!SDL_LoadWAV(path, spec, &buf, &len)) return {};
>   return OwnArray<Uint8>{buf, size_t(len)};
5150d5269
<  * @param len the length of the audio buffer in bytes.
5164c5283,5284
<   CheckError(SDL_MixAudio(dst, src.data(), src.size_bytes(), format, volume));
---
>   CheckError(
>     SDL_MixAudio(dst, src.data_as<Uint8>(), format, src.size_bytes(), volume));
5191d5310
<  * @param len the length of the audio buffer in bytes.
5205c5324,5330
<   static_assert(false, "Not implemented");
---
>   if (dst.size_bytes() < src.size_bytes()) {
>     MixAudio(dst.data_as<Uint8>(),
>              SourceBytes{src.data(), dst.size_bytes()},
>              format,
>              volume);
>   } else
>     MixAudio(dst.data_as<Uint8>(), src, format, volume);
5223d5347
<  * @param src_len the len of src_data.
5225,5228d5348
<  * @param dst_data will be filled with a pointer to converted audio data,
<  *                 which should be freed with free(). On error, it will be
<  *                 nullptr.
<  * @param dst_len will be filled with the len of dst_data.
5239,5240c5359,5367
<   return CheckError(SDL_ConvertAudioSamples(
<     &src_spec, src_data.data(), src_data.size_bytes(), &dst_spec));
---
>   Uint8* buf;
>   int len;
>   CheckError(SDL_ConvertAudioSamples(&src_spec,
>                                      src_data.data_as<Uint8>(),
>                                      src_data.size_bytes(),
>                                      &dst_spec,
>                                      &buf,
>                                      &len));
>   return OwnArray<Uint8>{buf, size_t(len)};
