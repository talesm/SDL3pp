12c12
<  * @defgroup CategoryAudio Category Audio
---
>  * @defgroup CategoryAudio Audio Playback, Recording, and Mixing
187a188,189
> #ifdef SDL3PP_DOC
> 
225a228,229
> #endif // SDL3PP_DOC
> 
279c283,284
<     : m_audioFormat(SDL_DEFINE_AUDIO_FORMAT(sign, bigendian, flt, size))
---
>     : m_audioFormat(
>         AudioFormatRaw(SDL_DEFINE_AUDIO_FORMAT(sign, bigendian, flt, size)))
311d315
<    * @param x an AudioFormat value.
314c318
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread
316c320
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
325d328
<    * @param x an AudioFormat value.
328c331
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
330c333
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
339d341
<    * @param x an AudioFormat value.
342c344
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
344c346
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
353d354
<    * @param x an AudioFormat value.
356c357
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
358c359
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
367d367
<    * @param x an AudioFormat value.
370c370
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
372c372
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
381d380
<    * @param x an AudioFormat value.
384c383
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
386c385
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
395d393
<    * @param x an AudioFormat value.
398c396
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
400c398
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
409d406
<    * @param x an AudioFormat value.
412c409
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
414c411
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
445a443,449
> // Unfortunate name clash with SDL_oldnames.h
> #undef AUDIO_U8
> #undef AUDIO_S8
> #undef AUDIO_S16
> #undef AUDIO_S32
> #undef AUDIO_F32
> 
709a714,747
> /**
>  * A callback that fires when data is about to be fed to an audio device.
>  *
>  * This is useful for accessing the final mix, perhaps for writing a
>  * visualizer or applying a final effect to the audio data before playback.
>  *
>  * This callback should run as quickly as possible and not block for any
>  * significant time, as this callback delays submission of data to the audio
>  * device, which can cause audio playback problems.
>  *
>  * The postmix callback _must_ be able to handle any audio data format
>  * specified in `spec`, which can change between callbacks if the audio device
>  * changed. However, this only covers frequency and channel count; data is
>  * always provided here in AUDIO_F32 format.
>  *
>  * The postmix callback runs _after_ logical device gain and audiostream gain
>  * have been applied, which is to say you can make the output data louder at
>  * this point than the gain settings would suggest.
>  *
>  * @param spec the current format of audio that is to be submitted to the
>  *             audio device.
>  * @param buffer the buffer of audio samples to be submitted. The callback can
>  *               inspect and/or modify this data.
>  * @param buflen the size of `buffer` in bytes.
>  *
>  * @threadsafety This will run from a background thread owned by SDL. The
>  *               application is responsible for locking resources the callback
>  *               touches that need to be protected.
>  *
>  * @since This datatype is available since SDL 3.2.0.
>  *
>  * @sa AudioDevice.SetPostmixCallback
>  * @sa AudioPostmixCallback
>  */
754a793,831
> /**
>  * A callback that fires when data passes through an AudioStream.
>  *
>  * Apps can (optionally) register a callback with an audio stream that is
>  * called when data is added with AudioStream.PutData, or requested with
>  * AudioStream.GetData.
>  *
>  * Two values are offered here: one is the amount of additional data needed to
>  * satisfy the immediate request (which might be zero if the stream already
>  * has enough data queued) and the other is the total amount being requested.
>  * In a Get call triggering a Put callback, these values can be different. In
>  * a Put call triggering a Get callback, these values are always the same.
>  *
>  * Byte counts might be slightly overestimated due to buffering or resampling,
>  * and may change from call to call.
>  *
>  * This callback is not required to do anything. Generally this is useful for
>  * adding/reading data on demand, and the app will often put/get data as
>  * appropriate, but the system goes on with the data currently available to it
>  * if this callback does nothing.
>  *
>  * @param stream the SDL audio stream associated with this callback.
>  * @param additional_amount the amount of data, in bytes, that is needed right
>  *                          now.
>  * @param total_amount the total amount of data requested, in bytes, that is
>  *                     requested or available.
>  *
>  * @threadsafety This callbacks may run from any thread, so if you need to
>  *               protect shared data, you should use AudioStream.Lock to
>  *               serialize access; this lock will be held before your callback
>  *               is called, so your callback does not need to manage the lock
>  *               explicitly.
>  *
>  * @since This datatype is available since SDL 3.2.0.
>  *
>  * @sa AudioStream.SetGetCallback
>  * @sa AudioStream.SetPutCallback
>  * @sa AudioStreamCB
>  */
916,917d992
<    *              AudioDevice.AudioDevice().
<    *
926c1001,1005
<   constexpr auto operator<=>(AudioDeviceParam other) const = default;
---
>   /// Comparison
>   constexpr auto operator<=>(AudioDeviceParam other) const
>   {
>     return get() <=> other;
>   }
931,932c1010,1011
<    * @returns the name of the audio device, or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @returns the name of the audio device on success.
>    * @throws Error on failure.
965d1043
<    * @param spec on return, will be filled with device details.
967a1046
>    * @returns the device format details on success.
985,986d1063
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
988,989c1065
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default
1192d1267
<    * @param num_streams number streams listed in the `streams` array.
1223a1299,1347
>   /**
>    * Set a callback that fires when data is about to be fed to an audio device.
>    *
>    * This is useful for accessing the final mix, perhaps for writing a
>    * visualizer or applying a final effect to the audio data before playback.
>    *
>    * The buffer is the final mix of all bound audio streams on an opened device;
>    * this callback will fire regularly for any device that is both opened and
>    * unpaused. If there is no new data to mix, either because no streams are
>    * bound to the device or all the streams are empty, this callback will still
>    * fire with the entire buffer set to silence.
>    *
>    * This callback is allowed to make changes to the data; the contents of the
>    * buffer after this call is what is ultimately passed along to the hardware.
>    *
>    * The callback is always provided the data in float format (values from -1.0f
>    * to 1.0f), but the number of channels or sample rate may be different than
>    * the format the app requested when opening the device; SDL might have had to
>    * manage a conversion behind the scenes, or the playback might have jumped to
>    * new physical hardware when a system default changed, etc. These details may
>    * change between calls. Accordingly, the size of the buffer might change
>    * between calls as well.
>    *
>    * This callback can run at any time, and from any thread; if you need to
>    * serialize access to your app's data, you should provide and use a mutex or
>    * other synchronization device.
>    *
>    * All of this to say: there are specific needs this callback can fulfill, but
>    * it is not the simplest interface. Apps should generally provide audio in
>    * their preferred format through an AudioStream and let SDL handle the
>    * difference.
>    *
>    * This function is extremely time-sensitive; the callback should do the least
>    * amount of work possible and return as quickly as it can. The longer the
>    * callback runs, the higher the risk of audio dropouts or other problems.
>    *
>    * This function will block until the audio device is in between iterations,
>    * so any existing callback that might be running will finish before this
>    * function sets the new callback and returns.
>    *
>    * Setting a nullptr callback function disables any previously-set callback.
>    *
>    * @param callback a callback function to be called. Can be nullptr.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1316d1439
<    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
1334,1336c1457,1459
<   AudioStreamRef OpenStream(const AudioSpec* spec,
<                             AudioStreamCallback callback,
<                             void* userdata);
---
>   AudioStream OpenStream(OptionalRef<const AudioSpec> spec,
>                          AudioStreamCallback callback,
>                          void* userdata);
1376,1377d1498
<    * @param devid an audio device to open, or AUDIO_DEVICE_DEFAULT_PLAYBACK
<    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
1380,1384c1501
<    *                 playback, or receive new data for recording. Can be
<    * nullptr, in which case the app will need to call AudioStream.PutData or
<    * AudioStream.GetData as necessary.
<    * @param userdata app-controlled pointer passed to callback. Can be nullptr.
<    *                 Ignored if callback is nullptr.
---
>    *                 playback, or receive new data for recording.
1427c1544
< constexpr AudioDeviceRaw AUDIO_DEVICE_DEFAULT_PLAYBACK =
---
> constexpr AudioDeviceID AUDIO_DEVICE_DEFAULT_PLAYBACK =
1439c1556
< constexpr AudioDeviceRaw AUDIO_DEVICE_DEFAULT_RECORDING =
---
> constexpr AudioDeviceID AUDIO_DEVICE_DEFAULT_RECORDING =
1611c1728,1780
<   /// Default ctor
---
>   /**
>    * Convenience function for straightforward audio init for the common case.
>    *
>    * If all your app intends to do is provide a single source of PCM audio, this
>    * function allows you to do all your audio setup in a single call.
>    *
>    * This is also intended to be a clean means to migrate apps from SDL2.
>    *
>    * This function will open an audio device, create a stream and bind it.
>    * Unlike other methods of setup, the audio device will be closed when this
>    * stream is destroyed, so the app can treat the returned AudioStream as
>    * the only object needed to manage audio playback.
>    *
>    * Also unlike other functions, the audio device begins paused. This is to map
>    * more closely to SDL2-style behavior, since there is no extra step here to
>    * bind a stream to begin audio flowing. The audio device should be resumed
>    * with `AudioStream.ResumeDevice(stream);`
>    *
>    * This function works with both playback and recording devices.
>    *
>    * The `spec` parameter represents the app's side of the audio stream. That
>    * is, for recording audio, this will be the output format, and for playing
>    * audio, this will be the input format. If spec is nullptr, the system will
>    * choose the format, and the app can use AudioStream.GetFormat() to obtain
>    * this information later.
>    *
>    * If you don't care about opening a specific audio device, you can (and
>    * probably _should_), use AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and
>    * AUDIO_DEVICE_DEFAULT_RECORDING for recording.
>    *
>    * One can optionally provide a callback function; if nullptr, the app is
>    * expected to queue audio data for playback (or unqueue audio data if
>    * capturing). Otherwise, the callback will begin to fire once the device is
>    * unpaused.
>    *
>    * Destroying the returned stream with AudioStream.Destroy will also close
>    * the audio device associated with this stream.
>    *
>    * @param devid an audio device to open, or AUDIO_DEVICE_DEFAULT_PLAYBACK
>    *              or AUDIO_DEVICE_DEFAULT_RECORDING.
>    * @param spec the audio stream's data format. Can be nullptr.
>    * @param callback a callback where the app will provide new data for
>    *                 playback, or receive new data for recording.
>    * @post an audio stream on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetDevice
>    * @sa AudioStream.ResumeDevice
>    */
1654d1822
<    *
1675c1843,1861
<   AudioSpec GetInputFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Query the current input format of an audio stream.
>    *
>    * @returns the input audio format.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetFormat
>    */
>   AudioSpec GetInputFormat() const
>   {
>     AudioSpec spec;
>     GetFormat(&spec, nullptr);
>     return spec;
>   }
1677c1863,1881
<   AudioSpec GetOutputFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Query the current output format of an audio stream.
>    *
>    * @returns the output audio format.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetFormat
>    */
>   AudioSpec GetOutputFormat() const
>   {
>     AudioSpec spec;
>     GetFormat(nullptr, &spec);
>     return spec;
>   }
1695,1698c1899,1929
<   void SetInputFormat(const AudioSpec& spec)
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Change the input format of an audio stream.
>    *
>    * Future calls to and AudioStreamRef.GetAvailable and
>    * AudioStreamRef.GetData will reflect the new format, and future calls to
>    * AudioStreamRef.PutData must provide data in the new input formats.
>    *
>    * Data that was previously queued in the stream will still be operated on in
>    * the format that was current when it was added, which is to say you can put
>    * the end of a sound file in one format to a stream, change formats for the
>    * next sound file, and start putting that new data while the previous sound
>    * file is still queued, and everything will still play back correctly.
>    *
>    * If a stream is bound to a device, then the format of the side of the stream
>    * bound to a device cannot be changed (src_spec for recording devices,
>    * dst_spec for playback devices). Attempts to make a change to this side will
>    * be ignored, but this will not report an error. The other side's format can
>    * be changed.
>    *
>    * @param spec the new format of the audio input.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetFormat
>    * @sa AudioStream.SetFrequencyRatio
>    */
>   void SetInputFormat(const AudioSpec& spec) { SetFormat(spec, std::nullopt); }
1700,1703c1931,1961
<   void SetOutputFormat(const AudioSpec& spec)
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Change the output format of an audio stream.
>    *
>    * Future calls to and AudioStreamRef.GetAvailable and
>    * AudioStreamRef.GetData will reflect the new format, and future calls to
>    * AudioStreamRef.PutData must provide data in the new input formats.
>    *
>    * Data that was previously queued in the stream will still be operated on in
>    * the format that was current when it was added, which is to say you can put
>    * the end of a sound file in one format to a stream, change formats for the
>    * next sound file, and start putting that new data while the previous sound
>    * file is still queued, and everything will still play back correctly.
>    *
>    * If a stream is bound to a device, then the format of the side of the stream
>    * bound to a device cannot be changed (src_spec for recording devices,
>    * dst_spec for playback devices). Attempts to make a change to this side will
>    * be ignored, but this will not report an error. The other side's format can
>    * be changed.
>    *
>    * @param spec the new format of the audio output.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread, as it holds
>    *               a stream-specific mutex while running.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.GetFormat
>    * @sa AudioStream.SetFrequencyRatio
>    */
>   void SetOutputFormat(const AudioSpec& spec) { SetFormat(std::nullopt, spec); }
1834,1835d2091
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1837,1838c2093
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default.
1858,1859d2112
<    * @param count On output, set to number of channels in the map. Can be
<    * nullptr.
1861,1862c2114
<    *          the current output spec's channels, or nullptr if default. This
<    *          should be freed with free() when it is no longer needed.
---
>    *          the current output spec's channels, or nullptr if default.
1917d2168
<    * @param count The number of channels in the map.
1973d2223
<    * @param count The number of channels in the map.
1999d2248
<    * @param len the number of bytes to write to the stream.
2028d2276
<    * @param len the maximum number of bytes to fill.
2245a2494,2533
>   /**
>    * Set a callback that runs when data is requested from an audio stream.
>    *
>    * This callback is called _before_ data is obtained from the stream, giving
>    * the callback the chance to add more on-demand.
>    *
>    * The callback can (optionally) call AudioStreamRef.PutData() to add more
>    * audio to the stream during this call; if needed, the request that triggered
>    * this callback will obtain the new data immediately.
>    *
>    * The callback's `additional_amount` argument is roughly how many bytes of
>    * _unconverted_ data (in the stream's input format) is needed by the caller,
>    * although this may overestimate a little for safety. This takes into account
>    * how much is already in the stream and only asks for any extra necessary to
>    * resolve the request, which means the callback may be asked for zero bytes,
>    * and a different amount on each call.
>    *
>    * The callback is not required to supply exact amounts; it is allowed to
>    * supply too much or too little or none at all. The caller will get what's
>    * available, up to the amount they requested, regardless of this callback's
>    * outcome.
>    *
>    * Clearing or flushing an audio stream does not call this callback.
>    *
>    * This function obtains the stream's lock, which means any existing callback
>    * (get or put) in progress will finish running before setting the new
>    * callback.
>    *
>    * Setting a nullptr function turns off the callback.
>    *
>    * @param callback the new callback function to call when data is requested
>    *                 from the stream.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetPutCallback
>    */
2291a2580,2622
>   /**
>    * Set a callback that runs when data is added to an audio stream.
>    *
>    * This callback is called _after_ the data is added to the stream, giving the
>    * callback the chance to obtain it immediately.
>    *
>    * The callback can (optionally) call AudioStreamRef.GetData() to obtain
>    * audio from the stream during this call.
>    *
>    * The callback's `additional_amount` argument is how many bytes of
>    * _converted_ data (in the stream's output format) was provided by the
>    * caller, although this may underestimate a little for safety. This value
>    * might be less than what is currently available in the stream, if data was
>    * already there, and might be less than the caller provided if the stream
>    * needs to keep a buffer to aid in resampling. Which means the callback may
>    * be provided with zero bytes, and a different amount on each call.
>    *
>    * The callback may call AudioStreamRef.GetAvailable to see the total amount
>    * currently available to read from the stream, instead of the total provided
>    * by the current call.
>    *
>    * The callback is not required to obtain all data. It is allowed to read less
>    * or none at all. Anything not read now simply remains in the stream for
>    * later access.
>    *
>    * Clearing or flushing an audio stream does not call this callback.
>    *
>    * This function obtains the stream's lock, which means any existing callback
>    * (get or put) in progress will finish running before setting the new
>    * callback.
>    *
>    * Setting a nullptr function turns off the callback.
>    *
>    * @param callback the new callback function to call when data is added to the
>    *                 stream.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa AudioStream.SetGetCallback
>    */
2479,2483c2810,2811
<  * @param count a pointer filled in with the number of devices returned, may
<  *              be nullptr.
<  * @returns a 0 terminated array of device instance IDs or nullptr on error;
<  * call GetError() for more information. This should be freed with free() when
<  * it is no longer needed.
---
>  * @returns a 0 terminated array of device instance IDs on success.
>  * @throws Error on failure.
2494c2822,2825
<   return SDL_GetAudioPlaybackDevices();
---
>   int count;
>   auto data = CheckError(SDL_GetAudioPlaybackDevices(&count));
>   return OwnArray<AudioDeviceRef>{reinterpret_cast<AudioDeviceRef*>(data),
>                                   size_t(count)};
2511,2515c2842,2843
<  * @param count a pointer filled in with the number of devices returned, may
<  *              be nullptr.
<  * @returns a 0 terminated array of device instance IDs, or nullptr on failure;
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  * @returns a 0 terminated array of device instance IDs on success.
>  * @throws Error on failure.
2526c2854,2857
<   return SDL_GetAudioRecordingDevices();
---
>   int count;
>   auto data = CheckError(SDL_GetAudioRecordingDevices(&count));
>   return OwnArray<AudioDeviceRef>{reinterpret_cast<AudioDeviceRef*>(data),
>                                   size_t(count)};
2533,2534c2864,2865
<  * @returns the name of the audio device, or nullptr on failure; call
<  *          GetError() for more information.
---
>  * @returns the name of the audio device on success.
>  * @throws Error on failure.
2545c2876
<   return SDL_GetAudioDeviceName(devid);
---
>   return CheckError(SDL_GetAudioDeviceName(devid));
2588c2919,2921
<   return CheckError(SDL_GetAudioDeviceFormat(devid, sample_frames));
---
>   AudioSpec spec;
>   CheckError(SDL_GetAudioDeviceFormat(devid, &spec, sample_frames));
>   return spec;
2591c2924
< inline AudioSpec AudioDevice::GetFormat(int* sample_frames = nullptr) const
---
> inline AudioSpec AudioDevice::GetFormat(int* sample_frames) const
2606d2938
<  * @param count On output, set to number of channels in the map. Can be nullptr.
2608,2609c2940
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default
2619c2950,2952
<   return SDL_GetAudioDeviceChannelMap(devid);
---
>   int count;
>   auto data = SDL_GetAudioDeviceChannelMap(devid, &count);
>   return OwnArray<int>{data, size_t(count)};
2702c3035
<                                    const AudioSpec* spec)
---
>                                    OptionalRef<const AudioSpec> spec)
2988d3320
<  * @param num_streams number streams listed in the `streams` array.
3002c3334,3337
<   CheckError(SDL_BindAudioStreams(devid, streams));
---
>   CheckError(SDL_BindAudioStreams(
>     devid,
>     reinterpret_cast<SDL_AudioStream* const*>(streams.data()),
>     streams.size()));
3049d3383
<  * @param num_streams number streams listed in the `streams` array.
3059c3393,3394
<   SDL_UnbindAudioStreams(streams);
---
>   SDL_UnbindAudioStreams(
>     reinterpret_cast<SDL_AudioStream* const*>(streams.data()), streams.size());
3104c3439
<   return SDL_GetAudioStreamDevice(stream);
---
>   return {SDL_GetAudioStreamDevice(stream)};
3132,3133c3467,3468
< inline AudioStream CreateAudioStream(const AudioSpec* src_spec,
<                                      const AudioSpec* dst_spec)
---
> inline AudioStream CreateAudioStream(OptionalRef<const AudioSpec> src_spec,
>                                      OptionalRef<const AudioSpec> dst_spec)
3151c3486
<   return CheckError(SDL_GetAudioStreamProperties(stream));
---
>   return {CheckError(SDL_GetAudioStreamProperties(stream))};
3364d3698
<  * @param count On output, set to number of channels in the map. Can be nullptr.
3366,3367c3700
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default.
3378c3711,3714
<   return SDL_GetAudioStreamInputChannelMap(stream);
---
>   int count;
>   auto data = SDL_GetAudioStreamInputChannelMap(stream, &count);
>   if (!data) return {};
>   return OwnArray<int>{data, size_t(count)};
3396d3731
<  * @param count On output, set to number of channels in the map. Can be nullptr.
3398,3399c3733
<  *          the current output spec's channels, or nullptr if default. This
<  *          should be freed with free() when it is no longer needed.
---
>  *          the current output spec's channels, or nullptr if default.
3410c3744,3747
<   return SDL_GetAudioStreamOutputChannelMap(stream);
---
>   int count;
>   auto data = SDL_GetAudioStreamOutputChannelMap(stream, &count);
>   if (!data) return {};
>   return OwnArray<int>{data, size_t(count)};
3463d3799
<  * @param count The number of channels in the map.
3478c3814,3815
<   CheckError(SDL_SetAudioStreamInputChannelMap(stream, chmap));
---
>   CheckError(
>     SDL_SetAudioStreamInputChannelMap(stream, chmap.data(), chmap.size()));
3529d3865
<  * @param count The number of channels in the map.
3544c3880,3881
<   CheckError(SDL_SetAudioStreamOutputChannelMap(stream, chmap));
---
>   CheckError(
>     SDL_SetAudioStreamOutputChannelMap(stream, chmap.data(), chmap.size()));
3565d3901
<  * @param len the number of bytes to write to the stream.
3581c3917
<   CheckError(SDL_PutAudioStreamData(stream, buf));
---
>   CheckError(SDL_PutAudioStreamData(stream, buf.data, buf.size_bytes));
3586c3922
<   SDL::PutAudioStreamData(m_resource, buf);
---
>   SDL::PutAudioStreamData(m_resource, std::move(buf));
3603d3938
<  * @param len the maximum number of bytes to fill.
3619c3954
<   return SDL_GetAudioStreamData(stream, buf);
---
>   return SDL_GetAudioStreamData(stream, buf.data, buf.size_bytes);
3624c3959
<   return SDL::GetAudioStreamData(m_resource, buf);
---
>   return SDL::GetAudioStreamData(m_resource, std::move(buf));
4043,4045c4378,4380
< inline AudioStreamRef AudioDevice::OpenStream(const AudioSpec* spec,
<                                               AudioStreamCallback callback,
<                                               void* userdata)
---
> inline AudioStream AudioDevice::OpenStream(OptionalRef<const AudioSpec> spec,
>                                            AudioStreamCallback callback,
>                                            void* userdata)
4053c4388
<   return SDL::OpenAudioDeviceStream(m_resource, spec, callback);
---
>   return AudioStream(m_resource, spec, callback);
4115,4117c4450,4452
<                                          const AudioSpec* spec,
<                                          AudioStreamCallback callback,
<                                          void* userdata)
---
>                                          OptionalRef<const AudioSpec> spec,
>                                          AudioStreamCallback callback = nullptr,
>                                          void* userdata = nullptr)
4164,4169c4499
<  *                 playback, or receive new data for recording. Can be nullptr,
<  *                 in which case the app will need to call
<  *                 AudioStream.PutData or AudioStream.GetData as
<  *                 necessary.
<  * @param userdata app-controlled pointer passed to callback. Can be nullptr.
<  *                 Ignored if callback is nullptr.
---
>  *                 playback, or receive new data for recording.
4189a4520
>   : AudioStream(devid, spec)
4191,4196c4522,4526
< }
< 
< inline AudioDevice::AudioStream::AudioStream(OptionalRef<const AudioSpec> spec,
<                                              AudioStreamCB callback)
<   : T(SDL::AudioStream::AudioStream(spec, callback))
< {
---
>   if (IsAudioDevicePlayback(devid)) {
>     SetGetCallback(std::move(callback));
>   } else {
>     SetPutCallback(std::move(callback));
>   }
4319,4322d4648
<  * @param audio_buf a pointer filled with the audio data, allocated by the
<  *                  function.
<  * @param audio_len a pointer filled with the length of the audio data buffer
<  *                  in bytes.
4325,4330c4651,4652
<  *          This function returns false if the .WAV file cannot be opened,
<  *          uses an unknown data format, or is corrupt; call GetError()
<  *          for more information.
<  *
<  *          When the application is done with the data returned in
<  *          `audio_buf`, it should call free() to dispose of it.
---
>  * This function throws if the .WAV file cannot be opened, uses an unknown data
>  * format, or is corrupt; call GetError() for more information.
4336d4657
<  * @sa free
4343c4664,4667
<   return CheckError(SDL_LoadWAV_IO(src, spec, closeio));
---
>   Uint8* buf;
>   Uint32 len;
>   if (!SDL_LoadWAV_IO(src, closeio, spec, &buf, &len)) return {};
>   return OwnArray<Uint8>{buf, size_t(len)};
4358,4361d4681
<  * @param audio_buf a pointer filled with the audio data, allocated by the
<  *                  function.
<  * @param audio_len a pointer filled with the length of the audio data buffer
<  *                  in bytes.
4364,4369c4684,4685
<  *          This function returns false if the .WAV file cannot be opened,
<  *          uses an unknown data format, or is corrupt; call GetError()
<  *          for more information.
<  *
<  *          When the application is done with the data returned in
<  *          `audio_buf`, it should call free() to dispose of it.
---
>  * This function throws if the .WAV file cannot be opened, uses an unknown data
>  * format, or is corrupt,
4375d4690
<  * @sa free
4380c4695,4698
<   return CheckError(SDL_LoadWAV(path, spec));
---
>   Uint8* buf;
>   Uint32 len;
>   if (!SDL_LoadWAV(path, spec, &buf, &len)) return {};
>   return OwnArray<Uint8>{buf, size_t(len)};
4407d4724
<  * @param len the length of the audio buffer in bytes.
4421c4738,4739
<   CheckError(SDL_MixAudio(dst, src, format, volume));
---
>   CheckError(SDL_MixAudio(
>     dst, static_cast<const Uint8*>(src.data), format, src.size_bytes, volume));
4448d4765
<  * @param len the length of the audio buffer in bytes.
4462c4779,4780
<   static_assert(false, "Not implemented");
---
>   if (dst.size_bytes < src.size_bytes) src.size_bytes = dst.size_bytes;
>   MixAudio(static_cast<Uint8*>(dst.data), src, format, volume);
4480d4797
<  * @param src_len the len of src_data.
4485d4801
<  * @param dst_len will be filled with the len of dst_data.
4496c4812,4820
<   return CheckError(SDL_ConvertAudioSamples(src_spec, src_data, dst_spec));
---
>   Uint8* buf;
>   int len;
>   CheckError(SDL_ConvertAudioSamples(&src_spec,
>                                      static_cast<const Uint8*>(src_data.data),
>                                      src_data.size_bytes,
>                                      &dst_spec,
>                                      &buf,
>                                      &len));
>   return OwnArray<Uint8>{buf, size_t(len)};
