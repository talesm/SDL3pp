16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
79c79
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
107d106
<   /// Converts to underlying IConvRaw
110a110,111
> #ifdef SDL3PP_DOC
> 
144a146,147
> #endif // SDL3PP_DOC
> 
151,155c154
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
160c159
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
162a162,163
> #ifdef SDL3PP_DOC
> 
178a180,181
> #endif // SDL3PP_DOC
> 
182,185c185,188
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
191c194
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
197a201,202
> #ifdef SDL3PP_DOC
> 
230a236,237
> #endif // SDL3PP_DOC
> 
234a242,243
> #ifdef SDL3PP_DOC
> 
241a251,252
> #endif // SDL3PP_DOC
> 
245a257,258
> #ifdef SDL3PP_DOC
> 
252a266,267
> #endif // SDL3PP_DOC
> 
256a272,273
> #ifdef SDL3PP_DOC
> 
263a281,282
> #endif // SDL3PP_DOC
> 
267a287,288
> #ifdef SDL3PP_DOC
> 
274a296,297
> #endif // SDL3PP_DOC
> 
278a302,303
> #ifdef SDL3PP_DOC
> 
285a311,312
> #endif // SDL3PP_DOC
> 
289a317,318
> #ifdef SDL3PP_DOC
> 
298a328,329
> #endif // SDL3PP_DOC
> 
302a334,335
> #ifdef SDL3PP_DOC
> 
311a345,346
> #endif // SDL3PP_DOC
> 
323,326c358
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
329,332c361
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
334c363
< /// Converts a time duration to seconds (float).
---
> /// Converts a time duration to nanoseconds (Sint64);
337c366
<   static_assert(false, "Not implemented");
---
>   return duration.count();
340,344c369,370
< /// Converts a float to seconds representation.
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a Sint64 to nanoseconds representation.
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
354c380
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
359c385
< struct Time
---
> class Time
363,365c389,390
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
367c392,396
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
369c398,400
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
371d401
<     static_assert(false, "Not implemented");
374c404,405
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
376c407
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
378a410,412
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
387c421
<   Time Current();
---
>   static Time Current();
388a423
>   /// Create from a nanoseconds Sint64.
391c426
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
394c429,430
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
456c492
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
459c495
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
461c497,498
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
463a501
>   /// Increment time
466c504,505
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
468a508
>   /// Decrement
471c511,512
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
475c516
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
477c518,520
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
> 
> #ifdef SDL3PP_DOC
497c540
<  * ```c
---
>  * ```cpp
511c554
<  * ```c
---
>  * ```cpp
532a576,577
> #endif // SDL3PP_DOC
> 
874a920,921
>  * @cat resource
>  *
882,883d928
<  *
<  * @cat resource
1012,1014c1057,1060
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
1028c1074,1086
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1195c1253
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1335,1336c1393
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1347c1404
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1354,1355c1411
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1366c1422
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1515d1570
<  * @param userdata the `userdata` pointer passed to the sort function.
1634d1688
<  * @param userdata a pointer to pass to the compare function.
1645c1699,1707
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1761d1822
<  * @param userdata a pointer to pass to the compare function.
1778c1839,1848
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1847c1917
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1849c1919
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1860c1930
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1869c1939
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1871c1941
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1885c1955
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1887c1957
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1897c1967
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1899c1969
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2239a2310
> #ifdef SDL_SLOW_MEMCPY
2240a2312,2314
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2242a2317,2318
> #ifdef SDL3PP_DOC
> 
2272a2349,2350
> #endif // SDL3PP_DOC
> 
2291a2370
> #ifdef SDL_SLOW_MEMMOVE
2292a2372,2374
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2314a2397
> #ifdef SDL_SLOW_MEMSET
2315a2399,2401
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2397c2483
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2399c2485
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2407c2493
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3824c3910,3915
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3887c3978,3985
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3927c4025,4032
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
4012c4117,4124
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4119c4231
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4139c4251,4261
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4143c4265,4269
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4145c4271,4277
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4147c4279,4280
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4156c4289
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4160c4293
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4168,4169d4300
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4173c4304
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4182c4313
<   Sint32 rand(Sint32 n);
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4196,4197d4326
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4200c4329
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4209c4338
<   float randf();
---
>   float randf() { return SDL_randf_r(&m_state); }
4214c4343
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4222,4223d4350
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4226c4353
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4234c4361
<   Uint32 rand_bits();
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4272,4273d4398
< inline Sint32 Random::rand(Sint32 n) { return SDL::rand_r(n); }
< 
4301,4302d4425
< inline float Random::randf() { return SDL::randf_r(); }
< 
4328,4329d4450
< inline Uint32 Random::rand_bits() { return SDL::rand_bits_r(); }
< 
4562d4682
<  * @sa atan2
5624,5625d5743
<  * @sa IConv.open
<  *
5626a5745,5747
>  *
>  * @sa IConv.open
>  * @sa IConv
5676c5797,5800
<   static IConv open(StringParam tocode, StringParam fromcode);
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
>   {
>   }
5746d5869
<    *           IConv.open().
5812,5816d5934
< inline IConv IConv::open(StringParam tocode, StringParam fromcode)
< {
<   return SDL::iconv_open(std::move(tocode), std::move(fromcode));
< }
< 
5876c5994
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5892a6011,6012
> #ifdef SDL3PP_DOC
> 
5894c6014
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5897c6017
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5900c6020
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5903c6023,6025
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5914,5916d6035
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5935c6054
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5937a6057,6058
> #ifdef SDL3PP_DOC
> 
5998a6120,6121
> #endif // SDL3PP_DOC
> 
6060a6184,6185
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
