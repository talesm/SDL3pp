16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
73c73
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
98a99,100
> #ifdef SDL3PP_DOC
> 
132a135,136
> #endif // SDL3PP_DOC
> 
139,143c143
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
148c148
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
150a151,152
> #ifdef SDL3PP_DOC
> 
166a169,170
> #endif // SDL3PP_DOC
> 
170,173c174,177
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
179c183
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
185a190,191
> #ifdef SDL3PP_DOC
> 
218a225,226
> #endif // SDL3PP_DOC
> 
222a231,232
> #ifdef SDL3PP_DOC
> 
229a240,241
> #endif // SDL3PP_DOC
> 
233a246,247
> #ifdef SDL3PP_DOC
> 
240a255,256
> #endif // SDL3PP_DOC
> 
244a261,262
> #ifdef SDL3PP_DOC
> 
251a270,271
> #endif // SDL3PP_DOC
> 
255a276,277
> #ifdef SDL3PP_DOC
> 
262a285,286
> #endif // SDL3PP_DOC
> 
266a291,292
> #ifdef SDL3PP_DOC
> 
273a300,301
> #endif // SDL3PP_DOC
> 
277a306,307
> #ifdef SDL3PP_DOC
> 
286a317,318
> #endif // SDL3PP_DOC
> 
290a323,324
> #ifdef SDL3PP_DOC
> 
299a334,335
> #endif // SDL3PP_DOC
> 
317,320c353
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
325,328c358
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
331c361
<  * Converts a time duration to seconds (float).
---
>  * Converts a time duration to nanoseconds (Sint64);
335c365
<   static_assert(false, "Not implemented");
---
>   return duration.count();
339c369
<  * Converts a float to seconds representation.
---
>  * Converts a Sint64 to nanoseconds representation.
341,344c371
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
350,352c377,379
<  * They can be converted between POSIX time_t values with SDL_NS_TO_SECONDS()
<  * and SDL_SECONDS_TO_NS(), and between Windows FILETIME values with
<  * SDL_TimeToWindows() and SDL_TimeFromWindows().
---
>  * They can be converted between POSIX time_t values with Time.ToPosix()
>  * and Time.FromPosix(), and between Windows FILETIME values with
>  * Time.ToWindows() and Time.FromWindows().
354c381
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
359c386
< struct Time
---
> class Time
361d387
< 
364,366c390,391
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
368c393,397
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
370c399,401
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
372d402
<     static_assert(false, "Not implemented");
375c405,406
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
377c408
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
380c411,414
< #error "Current (undefined)"
---
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
>   static Time Current();
381a416
>   /// Create from a nanoseconds Sint64.
384c419
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
387c422,423
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
389c425
< #error "FromPosix (undefined)"
---
>   static constexpr Time FromPosix(Sint64 time);
391c427
< #error "ToPosix (undefined)"
---
>   constexpr Sint64 ToPosix() const;
393c429
< #error "FromWindows (undefined)"
---
>   static Time FromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);
395c431
< #error "ToWindows (undefined)"
---
>   void ToWindows(Uint32* dwLowDateTime, Uint32* dwHighDateTime) const;
400c436
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
405c441
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
407c443,444
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
409a447
>   /// Increment time
412c450,451
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
414a454
>   /// Decrement
417c457,458
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
421c462,464
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
> 
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
423c466
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> #ifdef SDL3PP_DOC
443c486
<  * ```c
---
>  * ```cpp
457c500
<  * ```c
---
>  * ```cpp
478a522,523
> #endif // SDL3PP_DOC
> 
820a866,867
>  * @cat resource
>  *
828,829d874
<  *
<  * @cat resource
925,927c970,973
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
941c987
<     return SDL_GetEnvironmentVariables(m_resource);
---
>     return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(m_resource))};
944c990,1002
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1118c1176
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1147c1205
<   CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
---
>   return CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
1170c1228
<   CheckError(SDL_UnsetEnvironmentVariable(env, name));
---
>   return CheckError(SDL_UnsetEnvironmentVariable(env, name));
1234,1235c1292
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1246c1303
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1253,1254c1310
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1265c1321
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1414d1469
<  * @param userdata the `userdata` pointer passed to the sort function.
1533d1587
<  * @param userdata a pointer to pass to the compare function.
1544c1598,1606
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1660d1721
<  * @param userdata a pointer to pass to the compare function.
1677c1738,1747
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1746c1816
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1748c1818
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1759c1829
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1768c1838
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1770c1840
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1784c1854
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1786c1856
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1796c1866
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1798c1868
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2138a2209
> #ifdef SDL_SLOW_MEMCPY
2139a2211,2213
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2141a2216,2217
> #ifdef SDL3PP_DOC
> 
2171a2248,2249
> #endif // SDL3PP_DOC
> 
2190a2269
> #ifdef SDL_SLOW_MEMMOVE
2191a2271,2273
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2213a2296
> #ifdef SDL_SLOW_MEMSET
2214a2298,2300
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2296c2382
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2298c2384
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2306c2392
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3723c3809,3814
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3786c3877,3884
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3826c3924,3931
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3911c4016,4023
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4018c4130
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4038c4150,4160
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4040d4161
< 
4043c4164,4168
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4045c4170,4176
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4047c4178,4179
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4056c4188
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4060c4192
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4068,4069d4199
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4073c4203
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4082c4212
<   Sint32 rand(Sint32 n) { return SDL_rand_r(n); }
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4096,4097d4225
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4100c4228
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4109c4237
<   float randf() { return SDL_randf_r(); }
---
>   float randf() { return SDL_randf_r(&m_state); }
4114c4242
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4122,4123d4249
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4126c4252
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4134c4260
<   Uint32 rand_bits() { return SDL_rand_bits_r(); }
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4456d4581
<  * @sa atan2
5518,5519d5642
<  * @sa IConv.open
<  *
5520a5644,5646
>  *
>  * @sa IConv.open
>  * @sa IConv
5524d5649
< 
5561c5686,5687
<   static IConv open(StringParam tocode, StringParam fromcode)
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
5563d5688
<     return IConv(SDL_iconv_open(tocode, fromcode));
5606d5730
<    *           IConv.open().
5642c5766
<   static void close(SDL_iconv_t cd)
---
>   void close()
5735c5859
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5743a5868,5869
> #ifdef SDL3PP_DOC
> 
5747c5873
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5752c5878
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5757c5883
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5762c5888,5890
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5773,5775d5900
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5794c5919
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5796a5922,5923
> #ifdef SDL3PP_DOC
> 
5857a5985,5986
> #endif // SDL3PP_DOC
> 
5919a6049,6050
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
