16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
70c70
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
92a93,94
> #ifdef SDL3PP_DOC
> 
126a129,130
> #endif // SDL3PP_DOC
> 
133,137c137
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
142c142
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
144a145,146
> #ifdef SDL3PP_DOC
> 
160a163,164
> #endif // SDL3PP_DOC
> 
164,167c168,171
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
173c177
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
179a184,185
> #ifdef SDL3PP_DOC
> 
212a219,220
> #endif // SDL3PP_DOC
> 
216a225,226
> #ifdef SDL3PP_DOC
> 
223a234,235
> #endif // SDL3PP_DOC
> 
227a240,241
> #ifdef SDL3PP_DOC
> 
234a249,250
> #endif // SDL3PP_DOC
> 
238a255,256
> #ifdef SDL3PP_DOC
> 
245a264,265
> #endif // SDL3PP_DOC
> 
249a270,271
> #ifdef SDL3PP_DOC
> 
256a279,280
> #endif // SDL3PP_DOC
> 
260a285,286
> #ifdef SDL3PP_DOC
> 
267a294,295
> #endif // SDL3PP_DOC
> 
271a300,301
> #ifdef SDL3PP_DOC
> 
280a311,312
> #endif // SDL3PP_DOC
> 
284a317,318
> #ifdef SDL3PP_DOC
> 
293a328,329
> #endif // SDL3PP_DOC
> 
311,314c347
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
319,322c352
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
325c355
<  * Converts a time duration to seconds (float).
---
>  * Converts a time duration to nanoseconds (Sint64);
329c359
<   static_assert(false, "Not implemented");
---
>   return duration.count();
333c363
<  * Converts a float to seconds representation.
---
>  * Converts a Sint64 to nanoseconds representation.
335,338c365
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
344,346c371,373
<  * They can be converted between POSIX time_t values with SDL_NS_TO_SECONDS()
<  * and SDL_SECONDS_TO_NS(), and between Windows FILETIME values with
<  * SDL_TimeToWindows() and SDL_TimeFromWindows().
---
>  * They can be converted between POSIX time_t values with Time.ToPosix()
>  * and Time.FromPosix(), and between Windows FILETIME values with
>  * Time.ToWindows() and Time.FromWindows().
348c375
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
353c380
< struct Time
---
> class Time
355d381
< 
358,360c384,385
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
362c387,391
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
364c393,395
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
366d396
<     static_assert(false, "Not implemented");
369c399,400
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
371c402
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
374c405,408
< #error "Current (undefined)"
---
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
>   static Time Current();
375a410
>   /// Create from a nanoseconds Sint64.
378c413
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
381c416,417
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
383c419
< #error "FromPosix (undefined)"
---
>   static constexpr Time FromPosix(Sint64 time);
385c421
< #error "ToPosix (undefined)"
---
>   constexpr Sint64 ToPosix() const;
387c423
< #error "FromWindows (undefined)"
---
>   static Time FromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);
389c425
< #error "ToWindows (undefined)"
---
>   void ToWindows(Uint32* dwLowDateTime, Uint32* dwHighDateTime) const;
394c430
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
399c435
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
401c437,438
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
403a441
>   /// Increment time
406c444,445
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
408a448
>   /// Decrement
411c451,452
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
415c456,458
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
> 
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
417c460
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> #ifdef SDL3PP_DOC
437c480
<  * ```c
---
>  * ```cpp
451c494
<  * ```c
---
>  * ```cpp
472a516,517
> #endif // SDL3PP_DOC
> 
814a860,861
>  * @cat resource
>  *
822,823d868
<  *
<  * @cat resource
912,914c957,960
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
928c974
<     return SDL_GetEnvironmentVariables(m_resource);
---
>     return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(m_resource))};
931c977,989
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1091c1149
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1120c1178
<   CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
---
>   return CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
1143c1201
<   CheckError(SDL_UnsetEnvironmentVariable(env, name));
---
>   return CheckError(SDL_UnsetEnvironmentVariable(env, name));
1207,1208c1265
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1219c1276
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1226,1227c1283
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1238c1294
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1387d1442
<  * @param userdata the `userdata` pointer passed to the sort function.
1506d1560
<  * @param userdata a pointer to pass to the compare function.
1517c1571,1579
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1633d1694
<  * @param userdata a pointer to pass to the compare function.
1650c1711,1720
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1719c1789
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1721c1791
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1732c1802
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1741c1811
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1743c1813
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1757c1827
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1759c1829
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1769c1839
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1771c1841
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2111a2182
> #ifdef SDL_SLOW_MEMCPY
2112a2184,2186
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2114a2189,2190
> #ifdef SDL3PP_DOC
> 
2144a2221,2222
> #endif // SDL3PP_DOC
> 
2163a2242
> #ifdef SDL_SLOW_MEMMOVE
2164a2244,2246
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2186a2269
> #ifdef SDL_SLOW_MEMSET
2187a2271,2273
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2269c2355
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2271c2357
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2279c2365
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3696c3782,3787
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3759c3850,3857
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3799c3897,3904
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3884c3989,3996
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
3991c4103
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4011c4123,4133
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4013d4134
< 
4016c4137,4141
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4018c4143,4149
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4020c4151,4152
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4029c4161
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4033c4165
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4041,4042d4172
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4046c4176
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4055c4185
<   Sint32 rand(Sint32 n) { return SDL_rand_r(n); }
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4069,4070d4198
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4073c4201
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4082c4210
<   float randf() { return SDL_randf_r(); }
---
>   float randf() { return SDL_randf_r(&m_state); }
4087c4215
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4095,4096d4222
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4099c4225
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4107c4233
<   Uint32 rand_bits() { return SDL_rand_bits_r(); }
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4429d4554
<  * @sa atan2
5491,5492d5615
<  * @sa IConv.open
<  *
5493a5617,5619
>  *
>  * @sa IConv.open
>  * @sa IConv
5497d5622
< 
5527c5652,5653
<   static IConv open(StringParam tocode, StringParam fromcode)
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
5529d5654
<     return IConv(SDL_iconv_open(tocode, fromcode));
5572d5696
<    *           IConv.open().
5608c5732
<   static void close(SDL_iconv_t cd)
---
>   void close()
5687c5811
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5695a5820,5821
> #ifdef SDL3PP_DOC
> 
5699c5825
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5704c5830
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5709c5835
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5714c5840,5842
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5725,5727d5852
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5746c5871
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5748a5874,5875
> #ifdef SDL3PP_DOC
> 
5809a5937,5938
> #endif // SDL3PP_DOC
> 
5871a6001,6002
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
