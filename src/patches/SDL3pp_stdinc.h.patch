16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
73c73
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
95d94
<   /// Converts to underlying IConvRaw
98a98,99
> #ifdef SDL3PP_DOC
> 
132a134,135
> #endif // SDL3PP_DOC
> 
139,143c142
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
148c147
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
150a150,151
> #ifdef SDL3PP_DOC
> 
166a168,169
> #endif // SDL3PP_DOC
> 
170,173c173,176
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
179c182
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
185a189,190
> #ifdef SDL3PP_DOC
> 
218a224,225
> #endif // SDL3PP_DOC
> 
222a230,231
> #ifdef SDL3PP_DOC
> 
229a239,240
> #endif // SDL3PP_DOC
> 
233a245,246
> #ifdef SDL3PP_DOC
> 
240a254,255
> #endif // SDL3PP_DOC
> 
244a260,261
> #ifdef SDL3PP_DOC
> 
251a269,270
> #endif // SDL3PP_DOC
> 
255a275,276
> #ifdef SDL3PP_DOC
> 
262a284,285
> #endif // SDL3PP_DOC
> 
266a290,291
> #ifdef SDL3PP_DOC
> 
273a299,300
> #endif // SDL3PP_DOC
> 
277a305,306
> #ifdef SDL3PP_DOC
> 
286a316,317
> #endif // SDL3PP_DOC
> 
290a322,323
> #ifdef SDL3PP_DOC
> 
299a333,334
> #endif // SDL3PP_DOC
> 
311,314c346
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
317,320c349
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
322c351
< /// Converts a time duration to seconds (float).
---
> /// Converts a time duration to nanoseconds (Sint64);
325c354
<   static_assert(false, "Not implemented");
---
>   return duration.count();
328,332c357,358
< /// Converts a float to seconds representation.
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a Sint64 to nanoseconds representation.
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
342c368
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
347c373
< struct Time
---
> class Time
351,353c377,378
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
355c380,384
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
357c386,388
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
359d389
<     static_assert(false, "Not implemented");
362c392,393
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
364c395
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
366a398,400
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
375c409
<   Time Current();
---
>   static Time Current();
376a411
>   /// Create from a nanoseconds Sint64.
379c414
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
382c417,418
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
444c480
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
447c483
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
449c485,486
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
451a489
>   /// Increment time
454c492,493
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
456a496
>   /// Decrement
459c499,500
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
463c504
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
465c506,508
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
> 
> #ifdef SDL3PP_DOC
485c528
<  * ```c
---
>  * ```cpp
499c542
<  * ```c
---
>  * ```cpp
520a564,565
> #endif // SDL3PP_DOC
> 
862a908,909
>  * @cat resource
>  *
870,871d916
<  *
<  * @cat resource
991,993c1036,1039
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
1007c1053,1065
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1144c1202
<   return SDL::GetEnvironmentVariable(m_resource, name);
---
>   return SDL::GetEnvironmentVariable(m_resource, std::move(name));
1168c1226
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1209c1267,1268
<   SDL::SetEnvironmentVariable(m_resource, name, value, overwrite);
---
>   SDL::SetEnvironmentVariable(
>     m_resource, std::move(name), std::move(value), overwrite);
1237c1296
<   SDL::UnsetEnvironmentVariable(m_resource, name);
---
>   SDL::UnsetEnvironmentVariable(m_resource, std::move(name));
1307,1308c1366
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1319c1377
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1326,1327c1384
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1338c1395
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1487d1543
<  * @param userdata the `userdata` pointer passed to the sort function.
1606d1661
<  * @param userdata a pointer to pass to the compare function.
1617c1672,1680
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1733d1795
<  * @param userdata a pointer to pass to the compare function.
1750c1812,1821
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1819c1890
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1821c1892
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1832c1903
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1841c1912
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1843c1914
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1857c1928
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1859c1930
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1869c1940
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1871c1942
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2211a2283
> #ifdef SDL_SLOW_MEMCPY
2212a2285,2287
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2214a2290,2291
> #ifdef SDL3PP_DOC
> 
2244a2322,2323
> #endif // SDL3PP_DOC
> 
2263a2343
> #ifdef SDL_SLOW_MEMMOVE
2264a2345,2347
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2286a2370
> #ifdef SDL_SLOW_MEMSET
2287a2372,2374
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2369c2456
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2371c2458
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2379c2466
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3796c3883,3888
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3859c3951,3958
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3899c3998,4005
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3984c4090,4097
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4091c4204
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4111c4224,4234
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4115c4238,4242
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4117c4244,4250
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4119c4252,4253
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4128c4262
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4132c4266
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4140,4141d4273
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4145c4277
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4154c4286
<   Sint32 rand(Sint32 n);
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4168,4169d4299
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4172c4302
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4181c4311
<   float randf();
---
>   float randf() { return SDL_randf_r(&m_state); }
4186c4316
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4194,4195d4323
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4198c4326
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4206c4334
<   Uint32 rand_bits();
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4244,4245d4371
< inline Sint32 Random::rand(Sint32 n) { return SDL::rand_r(n); }
< 
4273,4274d4398
< inline float Random::randf() { return SDL::randf_r(); }
< 
4300,4301d4423
< inline Uint32 Random::rand_bits() { return SDL::rand_bits_r(); }
< 
4534d4655
<  * @sa atan2
5596,5597d5716
<  * @sa IConv.open
<  *
5598a5718,5720
>  *
>  * @sa IConv.open
>  * @sa IConv
5648c5770,5773
<   static IConv open(StringParam tocode, StringParam fromcode);
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
>   {
>   }
5709d5833
<    *           IConv.open().
5769,5773d5892
< inline IConv IConv::open(StringParam tocode, StringParam fromcode)
< {
<   return SDL::iconv_open(tocode, fromcode);
< }
< 
5833c5952
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5849a5969,5970
> #ifdef SDL3PP_DOC
> 
5851c5972
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5854c5975
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5857c5978
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5860c5981,5983
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5871,5873d5993
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5892c6012
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5894a6015,6016
> #ifdef SDL3PP_DOC
> 
5955a6078,6079
> #endif // SDL3PP_DOC
> 
6017a6142,6143
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
