16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
87c87
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
118a119,120
> #ifdef SDL3PP_DOC
> 
152a155,156
> #endif // SDL3PP_DOC
> 
159,162d162
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
168c168
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
170a171,172
> #ifdef SDL3PP_DOC
> 
186a189,190
> #endif // SDL3PP_DOC
> 
190,193c194,197
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
205a210,211
> #ifdef SDL3PP_DOC
> 
231a238,239
> #endif // SDL3PP_DOC
> 
238a247
> /// Max representable value
240a250
> /// Min representable value
249a260
> /// Max representable value
251a263
> /// Min representable value
260a273
> /// Max representable value
262a276
> /// Min representable value
271a286
> /// Max representable value
273a289
> /// Min representable value
282a299
> /// Max representable value
284a302
> /// Min representable value
293a312
> /// Max representable value
295a315
> /// Min representable value
306a327
> /// Max representable value
308a330
> /// Min representable value
319a342
> /// Max representable value
321a345
> /// Min representable value
334,337c358
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
340,343c361
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
345,349c363,364
< /// Converts a time duration to seconds (float).
< constexpr Sint64 ToNS(std::chrono::nanoseconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a time duration to nanoseconds (Sint64);
> constexpr Sint64 ToNS(Nanoseconds duration) { return duration.count(); }
351,355c366,367
< /// Converts a float to seconds representation.
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a Sint64 to nanoseconds representation.
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
365c377
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
372c384
<   TimeRaw m_time;
---
>   Nanoseconds m_time;
374a387,388
>   constexpr Time() = default;
> 
380c394
<   constexpr Time(TimeRaw time = {})
---
>   constexpr explicit Time(TimeRaw time)
390,397c404,407
<   constexpr Time(std::chrono::nanoseconds time) {}
< 
<   /**
<    * Unwraps to the underlying Time.
<    *
<    * @returns the underlying TimeRaw.
<    */
<   constexpr operator TimeRaw() const { return m_time; }
---
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_time(time)
>   {
>   }
399c409,410
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
401c412
<     static_assert(false, "Not implemented");
---
>     return m_time != std::chrono::nanoseconds{};
403a415,417
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_time; }
> 
412c426
<   Time Current();
---
>   static Time Current();
413a428
>   /// Create from a nanoseconds Sint64.
416c431
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
419c434,435
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_time.count(); }
426,427c442,443
<    * @param S the number of seconds to convert.
<    * @returns S, expressed in nanoseconds.
---
>    * @param time the number of seconds to convert.
>    * @returns the converted Time.
438,439c454
<    * This performs a division, so the results can be dramatically different if
<    * `NS` is an integer or floating point value.
---
>    * This only converts whole numbers, not fractional seconds.
441,442c456
<    * @param NS the number of nanoseconds to convert.
<    * @returns NS, expressed in seconds.
---
>    * @returns Posix time (in seconds).
481c495
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_time).count(); }
484c498
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
486c500,501
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
488a504
>   /// Increment time
491c507,508
<     static_assert(false, "Not implemented");
---
>     m_time += interval;
>     return *this;
493a511
>   /// Decrement
496c514,515
<     static_assert(false, "Not implemented");
---
>     m_time -= interval;
>     return *this;
500c519,523
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> /// Max allowed time representation
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
> 
> /// Min allowed time representation
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
502c525
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> #ifdef SDL3PP_DOC
522c545
<  * ```c
---
>  * ```cpp
536c559
<  * ```c
---
>  * ```cpp
557a581,582
> #endif // SDL3PP_DOC
> 
899a925,926
>  * @cat resource
>  *
907,908d933
<  *
<  * @cat resource
1037,1039c1062,1065
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
1053c1079,1091
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1220c1258
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1356,1357c1394
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1368c1405
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1375,1376c1412
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1387c1423
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1536d1571
<  * @param userdata the `userdata` pointer passed to the sort function.
1655d1689
<  * @param userdata a pointer to pass to the compare function.
1666c1700,1708
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1782d1823
<  * @param userdata a pointer to pass to the compare function.
1799c1840,1849
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1906c1956
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1908c1958
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
2260a2311
> #ifdef SDL_SLOW_MEMCPY
2261a2313,2315
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2263a2318,2319
> #ifdef SDL3PP_DOC
> 
2293a2350,2351
> #endif // SDL3PP_DOC
> 
2312a2371
> #ifdef SDL_SLOW_MEMMOVE
2313a2373,2375
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2335a2398
> #ifdef SDL_SLOW_MEMSET
2336a2400,2402
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2428c2494
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3845c3911,3916
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3908c3979,3986
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3948c4026,4033
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
4033c4118,4125
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4140c4232
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4160c4252,4262
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4164c4266,4270
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4166c4272,4278
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4168c4280,4281
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4177c4290
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4181c4294
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4189,4190d4301
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4194c4305
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4203c4314
<   Sint32 rand(Sint32 n);
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4217,4218d4327
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4221c4330
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4230c4339
<   float randf();
---
>   float randf() { return SDL_randf_r(&m_state); }
4235c4344
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4243,4244d4351
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4247c4354
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4255c4362
<   Uint32 rand_bits();
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4293,4294d4399
< inline Sint32 Random::rand(Sint32 n) { return SDL::rand_r(n); }
< 
4322,4323d4426
< inline float Random::randf() { return SDL::randf_r(); }
< 
4349,4350d4451
< inline Uint32 Random::rand_bits() { return SDL::rand_bits_r(); }
< 
4583d4683
<  * @sa atan2
5645,5646d5744
<  * @sa IConv.open
<  *
5647a5746,5748
>  *
>  * @sa IConv.open
>  * @sa IConv
5688,5689c5789
<    * @returns a handle that must be freed with IConv.close, or
<    *          SDL_ICONV_ERROR on failure.
---
>    * @post a valid handle or falsy on failure.
5697c5797,5800
<   static IConv open(StringParam tocode, StringParam fromcode);
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
>   {
>   }
5727c5830,5833
<   constexpr explicit operator bool() const { return !!m_resource; }
---
>   constexpr explicit operator bool() const
>   {
>     return m_resource != IConvRaw(SDL_ICONV_ERROR);
>   }
5735d5840
<    * @param cd The character set conversion handle.
5767d5871
<    *           IConv.open().
5833,5837d5936
< inline IConv IConv::open(StringParam tocode, StringParam fromcode)
< {
<   return SDL::iconv_open(std::move(tocode), std::move(fromcode));
< }
< 
5892c5991
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5908a6008,6009
> #ifdef SDL3PP_DOC
> 
5910c6011
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5913c6014
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5916c6017
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5919c6020,6022
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5930,5932d6032
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5951c6051
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5953a6054,6055
> #ifdef SDL3PP_DOC
> 
5964c6066
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
5995c6097
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
6018a6121,6122
> #endif // SDL3PP_DOC
> 
6080a6185,6186
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
