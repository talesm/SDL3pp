16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
73c73
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
95d94
<   /// Converts to underlying IConvRaw
98a98,99
> #ifdef SDL3PP_DOC
> 
132a134,135
> #endif // SDL3PP_DOC
> 
139,143c142
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
148c147
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
150a150,151
> #ifdef SDL3PP_DOC
> 
166a168,169
> #endif // SDL3PP_DOC
> 
170,173c173,176
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
179c182
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
185a189,190
> #ifdef SDL3PP_DOC
> 
218a224,225
> #endif // SDL3PP_DOC
> 
222a230,231
> #ifdef SDL3PP_DOC
> 
229a239,240
> #endif // SDL3PP_DOC
> 
233a245,246
> #ifdef SDL3PP_DOC
> 
240a254,255
> #endif // SDL3PP_DOC
> 
244a260,261
> #ifdef SDL3PP_DOC
> 
251a269,270
> #endif // SDL3PP_DOC
> 
255a275,276
> #ifdef SDL3PP_DOC
> 
262a284,285
> #endif // SDL3PP_DOC
> 
266a290,291
> #ifdef SDL3PP_DOC
> 
273a299,300
> #endif // SDL3PP_DOC
> 
277a305,306
> #ifdef SDL3PP_DOC
> 
286a316,317
> #endif // SDL3PP_DOC
> 
290a322,323
> #ifdef SDL3PP_DOC
> 
299a333,334
> #endif // SDL3PP_DOC
> 
311,314c346
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
317,320c349
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
322c351
< /// Converts a time duration to seconds (float).
---
> /// Converts a time duration to nanoseconds (Sint64);
325c354
<   static_assert(false, "Not implemented");
---
>   return duration.count();
328,332c357,358
< /// Converts a float to seconds representation.
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a Sint64 to nanoseconds representation.
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
342c368
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
347c373
< struct Time
---
> class Time
351,353c377,378
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
355c380,384
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
357c386,388
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
359d389
<     static_assert(false, "Not implemented");
362c392,393
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
364c395
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
367c398,401
< #error "Current (undefined)"
---
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
>   static Time Current();
368a403
>   /// Create from a nanoseconds Sint64.
371c406
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
374c409,410
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
405c441
< #error "FromWindows (undefined)"
---
>   static Time FromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);
407c443
< #error "ToWindows (undefined)"
---
>   void ToWindows(Uint32* dwLowDateTime, Uint32* dwHighDateTime) const;
410c446
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
413c449
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
415c451,452
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
417a455
>   /// Increment time
420c458,459
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
422a462
>   /// Decrement
425c465,466
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
429c470,472
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
> 
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
431c474
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> #ifdef SDL3PP_DOC
451c494
<  * ```c
---
>  * ```cpp
465c508
<  * ```c
---
>  * ```cpp
486a530,531
> #endif // SDL3PP_DOC
> 
828a874,875
>  * @cat resource
>  *
836,837d882
<  *
<  * @cat resource
947,949c992,995
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
963c1009
<     return SDL_GetEnvironmentVariables(m_resource);
---
>     return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(m_resource))};
966c1012,1024
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1145c1203
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1174c1232
<   CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
---
>   return CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
1197c1255
<   CheckError(SDL_UnsetEnvironmentVariable(env, name));
---
>   return CheckError(SDL_UnsetEnvironmentVariable(env, name));
1261,1262c1319
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1273c1330
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1280,1281c1337
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1292c1348
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1441d1496
<  * @param userdata the `userdata` pointer passed to the sort function.
1560d1614
<  * @param userdata a pointer to pass to the compare function.
1571c1625,1633
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1687d1748
<  * @param userdata a pointer to pass to the compare function.
1704c1765,1774
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1773c1843
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1775c1845
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1786c1856
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1795c1865
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1797c1867
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1811c1881
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1813c1883
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1823c1893
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1825c1895
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2165a2236
> #ifdef SDL_SLOW_MEMCPY
2166a2238,2240
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2168a2243,2244
> #ifdef SDL3PP_DOC
> 
2198a2275,2276
> #endif // SDL3PP_DOC
> 
2217a2296
> #ifdef SDL_SLOW_MEMMOVE
2218a2298,2300
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2240a2323
> #ifdef SDL_SLOW_MEMSET
2241a2325,2327
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2323c2409
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2325c2411
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2333c2419
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3750c3836,3841
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3813c3904,3911
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3853c3951,3958
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3938c4043,4050
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4045c4157
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4065c4177,4187
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4069c4191,4195
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4071c4197,4203
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4073c4205,4206
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4082c4215
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4086c4219
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4094,4095d4226
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4099c4230
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4108c4239
<   Sint32 rand(Sint32 n) { return SDL_rand_r(n); }
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4122,4123d4252
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4126c4255
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4135c4264
<   float randf() { return SDL_randf_r(); }
---
>   float randf() { return SDL_randf_r(&m_state); }
4140c4269
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4148,4149d4276
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4152c4279
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4160c4287
<   Uint32 rand_bits() { return SDL_rand_bits_r(); }
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4482d4608
<  * @sa atan2
5544,5545d5669
<  * @sa IConv.open
<  *
5546a5671,5673
>  *
>  * @sa IConv.open
>  * @sa IConv
5596c5723,5724
<   static IConv open(StringParam tocode, StringParam fromcode)
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
5598d5725
<     return IConv(SDL_iconv_open(tocode, fromcode));
5646d5772
<    *           IConv.open().
5682c5808
<   static void close(SDL_iconv_t cd)
---
>   void close()
5780c5906
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5788a5915,5916
> #ifdef SDL3PP_DOC
> 
5790c5918
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5793c5921
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5796c5924
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5799c5927,5929
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5810,5812d5939
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5831c5958
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5833a5961,5962
> #ifdef SDL3PP_DOC
> 
5894a6024,6025
> #endif // SDL3PP_DOC
> 
5956a6088,6089
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
