16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
72c72
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
96a97,98
> #ifdef SDL3PP_DOC
> 
130a133,134
> #endif // SDL3PP_DOC
> 
137,141c141
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
146c146
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
148a149,150
> #ifdef SDL3PP_DOC
> 
164a167,168
> #endif // SDL3PP_DOC
> 
168,171c172,175
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
177c181
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
183a188,189
> #ifdef SDL3PP_DOC
> 
216a223,224
> #endif // SDL3PP_DOC
> 
220a229,230
> #ifdef SDL3PP_DOC
> 
227a238,239
> #endif // SDL3PP_DOC
> 
231a244,245
> #ifdef SDL3PP_DOC
> 
238a253,254
> #endif // SDL3PP_DOC
> 
242a259,260
> #ifdef SDL3PP_DOC
> 
249a268,269
> #endif // SDL3PP_DOC
> 
253a274,275
> #ifdef SDL3PP_DOC
> 
260a283,284
> #endif // SDL3PP_DOC
> 
264a289,290
> #ifdef SDL3PP_DOC
> 
271a298,299
> #endif // SDL3PP_DOC
> 
275a304,305
> #ifdef SDL3PP_DOC
> 
284a315,316
> #endif // SDL3PP_DOC
> 
288a321,322
> #ifdef SDL3PP_DOC
> 
297a332,333
> #endif // SDL3PP_DOC
> 
315,318c351
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
323,326c356
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
329c359
<  * Converts a time duration to seconds (float).
---
>  * Converts a time duration to nanoseconds (Sint64);
333c363
<   static_assert(false, "Not implemented");
---
>   return duration.count();
337c367
<  * Converts a float to seconds representation.
---
>  * Converts a Sint64 to nanoseconds representation.
339,342c369
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
352c379
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
357c384
< struct Time
---
> class Time
361,363c388,389
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
365c391,395
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
367c397,399
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
369d400
<     static_assert(false, "Not implemented");
372c403,404
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
374c406
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
377c409,412
< #error "Current (undefined)"
---
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
>   static Time Current();
378a414
>   /// Create from a nanoseconds Sint64.
381c417
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
384c420,421
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
390c427
< #error "FromWindows (undefined)"
---
>   static Time FromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);
392c429
< #error "ToWindows (undefined)"
---
>   void ToWindows(Uint32* dwLowDateTime, Uint32* dwHighDateTime) const;
397c434
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
402c439
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
404c441,442
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
406a445
>   /// Increment time
409c448,449
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
411a452
>   /// Decrement
414c455,456
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
418c460,462
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
> 
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
420c464
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> #ifdef SDL3PP_DOC
440c484
<  * ```c
---
>  * ```cpp
454c498
<  * ```c
---
>  * ```cpp
475a520,521
> #endif // SDL3PP_DOC
> 
817a864,865
>  * @cat resource
>  *
825,826d872
<  *
<  * @cat resource
921,923c967,970
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
937c984
<     return SDL_GetEnvironmentVariables(m_resource);
---
>     return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(m_resource))};
940c987,999
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1113c1172
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1142c1201
<   CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
---
>   return CheckError(SDL_SetEnvironmentVariable(env, name, value, overwrite));
1165c1224
<   CheckError(SDL_UnsetEnvironmentVariable(env, name));
---
>   return CheckError(SDL_UnsetEnvironmentVariable(env, name));
1229,1230c1288
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1241c1299
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1248,1249c1306
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1260c1317
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1409d1465
<  * @param userdata the `userdata` pointer passed to the sort function.
1528d1583
<  * @param userdata a pointer to pass to the compare function.
1539c1594,1602
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1655d1717
<  * @param userdata a pointer to pass to the compare function.
1672c1734,1743
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1741c1812
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1743c1814
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1754c1825
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1763c1834
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1765c1836
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1779c1850
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1781c1852
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1791c1862
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1793c1864
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2133a2205
> #ifdef SDL_SLOW_MEMCPY
2134a2207,2209
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2136a2212,2213
> #ifdef SDL3PP_DOC
> 
2166a2244,2245
> #endif // SDL3PP_DOC
> 
2185a2265
> #ifdef SDL_SLOW_MEMMOVE
2186a2267,2269
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2208a2292
> #ifdef SDL_SLOW_MEMSET
2209a2294,2296
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2291c2378
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2293c2380
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2301c2388
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3718c3805,3810
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3781c3873,3880
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3821c3920,3927
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3906c4012,4019
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4013c4126
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4033c4146,4156
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4037c4160,4164
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4039c4166,4172
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4041c4174,4175
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4050c4184
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4054c4188
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4062,4063d4195
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4067c4199
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4076c4208
<   Sint32 rand(Sint32 n) { return SDL_rand_r(n); }
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4090,4091d4221
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4094c4224
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4103c4233
<   float randf() { return SDL_randf_r(); }
---
>   float randf() { return SDL_randf_r(&m_state); }
4108c4238
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4116,4117d4245
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4120c4248
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4128c4256
<   Uint32 rand_bits() { return SDL_rand_bits_r(); }
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4450d4577
<  * @sa atan2
5512,5513d5638
<  * @sa IConv.open
<  *
5514a5640,5642
>  *
>  * @sa IConv.open
>  * @sa IConv
5554c5682,5683
<   static IConv open(StringParam tocode, StringParam fromcode)
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
5556d5684
<     return IConv(SDL_iconv_open(tocode, fromcode));
5599d5726
<    *           IConv.open().
5635c5762
<   static void close(SDL_iconv_t cd)
---
>   void close()
5727c5854
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5735a5863,5864
> #ifdef SDL3PP_DOC
> 
5739c5868
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5744c5873
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5749c5878
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5754c5883,5885
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5765,5767d5895
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5786c5914
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5788a5917,5918
> #ifdef SDL3PP_DOC
> 
5849a5980,5981
> #endif // SDL3PP_DOC
> 
5911a6044,6045
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
