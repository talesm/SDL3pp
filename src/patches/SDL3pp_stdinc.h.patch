16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
81c81
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
112a113,114
> #ifdef SDL3PP_DOC
> 
146a149,150
> #endif // SDL3PP_DOC
> 
153,157c157
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
162c162
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
164a165,166
> #ifdef SDL3PP_DOC
> 
180a183,184
> #endif // SDL3PP_DOC
> 
184,187c188,191
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
193c197
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
199a204,205
> #ifdef SDL3PP_DOC
> 
232a239,241
> #endif // SDL3PP_DOC
> 
> /// Max representable value
234a244
> /// Min representable value
236a247,248
> #ifdef SDL3PP_DOC
> 
243a256,258
> #endif // SDL3PP_DOC
> 
> /// Max representable value
245a261
> /// Min representable value
247a264,265
> #ifdef SDL3PP_DOC
> 
254a273,275
> #endif // SDL3PP_DOC
> 
> /// Max representable value
256a278
> /// Min representable value
258a281,282
> #ifdef SDL3PP_DOC
> 
265a290,292
> #endif // SDL3PP_DOC
> 
> /// Max representable value
267a295
> /// Min representable value
269a298,299
> #ifdef SDL3PP_DOC
> 
276a307,309
> #endif // SDL3PP_DOC
> 
> /// Max representable value
278a312
> /// Min representable value
280a315,316
> #ifdef SDL3PP_DOC
> 
287a324,326
> #endif // SDL3PP_DOC
> 
> /// Max representable value
289a329
> /// Min representable value
291a332,333
> #ifdef SDL3PP_DOC
> 
300a343,345
> #endif // SDL3PP_DOC
> 
> /// Max representable value
302a348
> /// Min representable value
304a351,352
> #ifdef SDL3PP_DOC
> 
313a362,364
> #endif // SDL3PP_DOC
> 
> /// Max representable value
315a367
> /// Min representable value
325,328c377
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
331,334c380
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
336c382
< /// Converts a time duration to seconds (float).
---
> /// Converts a time duration to nanoseconds (Sint64);
339c385
<   static_assert(false, "Not implemented");
---
>   return duration.count();
342,346c388,389
< /// Converts a float to seconds representation.
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a Sint64 to nanoseconds representation.
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
356c399
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
361c404
< struct Time
---
> class Time
365,367c408,409
<   constexpr Time() {}
< 
<   constexpr Time(std::chrono::nanoseconds time) {}
---
> public:
>   constexpr Time() = default;
369c411,415
<   constexpr explicit Time(SDL_Time time) {}
---
>   /// Constructs from a nanoseconds period.
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_value(time)
>   {
>   }
371c417,419
<   constexpr explicit operator bool() const
---
>   /// Constructs from SDL_Time
>   constexpr explicit Time(SDL_Time time)
>     : m_value(FromNS(time))
373d420
<     static_assert(false, "Not implemented");
376c423,424
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
378c426
<     static_assert(false, "Not implemented");
---
>     return m_value != std::chrono::nanoseconds{};
380a429,431
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_value; }
> 
389c440
<   Time Current();
---
>   static Time Current();
390a442
>   /// Create from a nanoseconds Sint64.
393c445
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
396c448,449
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_value.count(); }
403,404c456,457
<    * @param S the number of seconds to convert.
<    * @returns S, expressed in nanoseconds.
---
>    * @param time the number of seconds to convert.
>    * @returns the converted Time.
406c459
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
408c461
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
415,416c468
<    * This performs a division, so the results can be dramatically different if
<    * `NS` is an integer or floating point value.
---
>    * This only converts whole numbers, not fractional seconds.
418,419c470
<    * @param NS the number of nanoseconds to convert.
<    * @returns NS, expressed in seconds.
---
>    * @returns Posix time (in seconds).
421c472
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
423c474
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
458c509
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_value).count(); }
461c512
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
463c514,515
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
465a518
>   /// Increment time
468c521,522
<     static_assert(false, "Not implemented");
---
>     m_value += interval;
>     return *this;
470a525
>   /// Decrement
473c528,529
<     static_assert(false, "Not implemented");
---
>     m_value -= interval;
>     return *this;
477c533,534
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> /// Max allowed time representation
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
479c536,539
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> /// Min allowed time representation
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
> 
> #ifdef SDL3PP_DOC
499c559
<  * ```c
---
>  * ```cpp
513c573
<  * ```c
---
>  * ```cpp
534a595,596
> #endif // SDL3PP_DOC
> 
876a939,940
>  * @cat resource
>  *
884,885d947
<  *
<  * @cat resource
1014,1016c1076,1079
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
1030c1093,1105
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1197c1272
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1337,1338c1412
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1349c1423
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1356,1357c1430
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1368c1441
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1517d1589
<  * @param userdata the `userdata` pointer passed to the sort function.
1636d1707
<  * @param userdata a pointer to pass to the compare function.
1647c1718,1726
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1763d1841
<  * @param userdata a pointer to pass to the compare function.
1780c1858,1867
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1849c1936
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1851c1938
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1862c1949
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1871c1958
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1873c1960
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1887c1974
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1889c1976
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1899c1986
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1901c1988
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2241a2329
> #ifdef SDL_SLOW_MEMCPY
2242a2331,2333
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2244a2336,2337
> #ifdef SDL3PP_DOC
> 
2274a2368,2369
> #endif // SDL3PP_DOC
> 
2293a2389
> #ifdef SDL_SLOW_MEMMOVE
2294a2391,2393
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2316a2416
> #ifdef SDL_SLOW_MEMSET
2317a2418,2420
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2399c2502
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2401c2504
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2409c2512
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3826c3929,3934
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3889c3997,4004
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3929c4044,4051
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
4014c4136,4143
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4121c4250
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4141c4270,4280
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4145c4284,4288
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4147c4290,4296
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4149c4298,4299
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4158c4308
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4162c4312
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4170,4171d4319
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4175c4323
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4184c4332
<   Sint32 rand(Sint32 n);
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4198,4199d4345
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4202c4348
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4211c4357
<   float randf();
---
>   float randf() { return SDL_randf_r(&m_state); }
4216c4362
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4224,4225d4369
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4228c4372
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4236c4380
<   Uint32 rand_bits();
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4274,4275d4417
< inline Sint32 Random::rand(Sint32 n) { return SDL::rand_r(n); }
< 
4303,4304d4444
< inline float Random::randf() { return SDL::randf_r(); }
< 
4330,4331d4469
< inline Uint32 Random::rand_bits() { return SDL::rand_bits_r(); }
< 
4564d4701
<  * @sa atan2
5626,5627d5762
<  * @sa IConv.open
<  *
5628a5764,5766
>  *
>  * @sa IConv.open
>  * @sa IConv
5669,5670c5807
<    * @returns a handle that must be freed with IConv.close, or
<    *          SDL_ICONV_ERROR on failure.
---
>    * @post a valid handle or falsy on failure.
5678c5815,5818
<   static IConv open(StringParam tocode, StringParam fromcode);
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
>   {
>   }
5708c5848,5851
<   constexpr explicit operator bool() const { return !!m_resource; }
---
>   constexpr explicit operator bool() const
>   {
>     return m_resource != IConvRaw(SDL_ICONV_ERROR);
>   }
5716d5858
<    * @param cd The character set conversion handle.
5748d5889
<    *           IConv.open().
5814,5818d5954
< inline IConv IConv::open(StringParam tocode, StringParam fromcode)
< {
<   return SDL::iconv_open(std::move(tocode), std::move(fromcode));
< }
< 
5878c6014
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5894a6031,6032
> #ifdef SDL3PP_DOC
> 
5896c6034
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5899c6037
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5902c6040
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5905c6043,6045
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5916,5918d6055
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5937c6074
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5939a6077,6078
> #ifdef SDL3PP_DOC
> 
6000a6140,6141
> #endif // SDL3PP_DOC
> 
6062a6204,6205
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
