16c16
<  * @defgroup CategoryStdinc Category Stdinc
---
>  * @defgroup CategoryStdinc Standard Library Functionality
84c84
< using IConvRaw = SDL_iconv_t*;
---
> using IConvRaw = SDL_iconv_t;
115a116,117
> #ifdef SDL3PP_DOC
> 
149a152,153
> #endif // SDL3PP_DOC
> 
156,160c160
<  * This macro looks like it double-evaluates the argument, but it does so
<  * inside of `sizeof`, so there are no side-effects here, as expressions do
<  * not actually run any code in these cases.
<  *
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
165c165
<   return SDL_arraysize((&array)[N]);
---
>   return SDL_arraysize(array);
167a168,169
> #ifdef SDL3PP_DOC
> 
183a186,187
> #endif // SDL3PP_DOC
> 
187,190c191,194
<  * @param A the first ASCII character.
<  * @param B the second ASCII character.
<  * @param C the third ASCII character.
<  * @param D the fourth ASCII character.
---
>  * @param a the first ASCII character.
>  * @param b the second ASCII character.
>  * @param c the third ASCII character.
>  * @param d the fourth ASCII character.
196c200
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
202a207,208
> #ifdef SDL3PP_DOC
> 
235a242,244
> #endif // SDL3PP_DOC
> 
> /// Max representable value
237a247
> /// Min representable value
239a250,251
> #ifdef SDL3PP_DOC
> 
246a259,261
> #endif // SDL3PP_DOC
> 
> /// Max representable value
248a264
> /// Min representable value
250a267,268
> #ifdef SDL3PP_DOC
> 
257a276,278
> #endif // SDL3PP_DOC
> 
> /// Max representable value
259a281
> /// Min representable value
261a284,285
> #ifdef SDL3PP_DOC
> 
268a293,295
> #endif // SDL3PP_DOC
> 
> /// Max representable value
270a298
> /// Min representable value
272a301,302
> #ifdef SDL3PP_DOC
> 
279a310,312
> #endif // SDL3PP_DOC
> 
> /// Max representable value
281a315
> /// Min representable value
283a318,319
> #ifdef SDL3PP_DOC
> 
290a327,329
> #endif // SDL3PP_DOC
> 
> /// Max representable value
292a332
> /// Min representable value
294a335,336
> #ifdef SDL3PP_DOC
> 
303a346,348
> #endif // SDL3PP_DOC
> 
> /// Max representable value
305a351
> /// Min representable value
307a354,355
> #ifdef SDL3PP_DOC
> 
316a365,367
> #endif // SDL3PP_DOC
> 
> /// Max representable value
318a370
> /// Min representable value
328,331c380
< constexpr float ToSeconds(Seconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr float ToSeconds(Seconds duration) { return duration.count(); }
334,337c383
< constexpr Seconds FromSeconds(float duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> constexpr Seconds FromSeconds(float duration) { return Seconds(duration); }
339,343c385,386
< /// Converts a time duration to seconds (float).
< constexpr Sint64 ToNS(std::chrono::nanoseconds duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a time duration to nanoseconds (Sint64);
> constexpr Sint64 ToNS(Nanoseconds duration) { return duration.count(); }
345,349c388,389
< /// Converts a float to seconds representation.
< constexpr Nanoseconds FromNS(Sint64 duration)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Converts a Sint64 to nanoseconds representation.
> constexpr Nanoseconds FromNS(Sint64 duration) { return Nanoseconds{duration}; }
359c399
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This type is available since SDL 3.2.0.
366c406
<   TimeRaw m_time;
---
>   Nanoseconds m_time;
368a409,410
>   constexpr Time() = default;
> 
374c416
<   constexpr Time(TimeRaw time = {})
---
>   constexpr explicit Time(TimeRaw time)
384,390c426,427
<   constexpr Time(std::chrono::nanoseconds time) {}
< 
<   /// Default comparison operator
<   constexpr bool operator==(const Time& other) const = default;
< 
<   /// Compares with the underlying type
<   constexpr bool operator==(TimeRaw time) const
---
>   constexpr Time(std::chrono::nanoseconds time)
>     : m_time(time)
392d428
<     return operator==(Time(time));
395,402c431,432
<   /**
<    * Unwraps to the underlying Time.
<    *
<    * @returns the underlying TimeRaw.
<    */
<   constexpr operator TimeRaw() const { return m_time; }
< 
<   constexpr operator std::chrono::nanoseconds() const
---
>   /// True if not zero
>   constexpr explicit operator bool() const
404c434
<     static_assert(false, "Not implemented");
---
>     return m_time != std::chrono::nanoseconds{};
406a437,439
>   /// Converts to nanoseconds period
>   constexpr operator std::chrono::nanoseconds() const { return m_time; }
> 
415c448
<   Time Current();
---
>   static Time Current();
416a450
>   /// Create from a nanoseconds Sint64.
419c453
<     static_assert(false, "Not implemented");
---
>     return Time{std::chrono::nanoseconds{time}};
422c456,457
<   constexpr Sint64 ToNS() const { static_assert(false, "Not implemented"); }
---
>   /// Converts to nanoseconds Sint64
>   constexpr Sint64 ToNS() const { return m_time.count(); }
429,430c464,465
<    * @param S the number of seconds to convert.
<    * @returns S, expressed in nanoseconds.
---
>    * @param time the number of seconds to convert.
>    * @returns the converted Time.
432c467
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
434c469
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
441,442c476
<    * This performs a division, so the results can be dramatically different if
<    * `NS` is an integer or floating point value.
---
>    * This only converts whole numbers, not fractional seconds.
444,445c478
<    * @param NS the number of nanoseconds to convert.
<    * @returns NS, expressed in seconds.
---
>    * @returns Posix time (in seconds).
447c480
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
449c482
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
484c517
<   constexpr float ToSeconds() const { static_assert(false, "Not implemented"); }
---
>   constexpr float ToSeconds() const { return Seconds(m_time).count(); }
487c520
<   static constexpr Time Time.FromSeconds(float interval)
---
>   static constexpr Time FromSeconds(float interval)
489c522,523
<     static_assert(false, "Not implemented");
---
>     return std::chrono::duration_cast<std::chrono::nanoseconds>(
>       Seconds(interval));
491a526
>   /// Increment time
494c529,530
<     static_assert(false, "Not implemented");
---
>     m_time += interval;
>     return *this;
496a533
>   /// Decrement
499c536,537
<     static_assert(false, "Not implemented");
---
>     m_time -= interval;
>     return *this;
503c541,545
< constexpr Time MAX_TIME = SDL_MAX_TIME;
---
> /// Max allowed time representation
> constexpr Time MAX_TIME = Time::FromNS(SDL_MAX_TIME);
> 
> /// Min allowed time representation
> constexpr Time MIN_TIME = Time::FromNS(SDL_MIN_TIME);
505c547
< constexpr Time MIN_TIME = SDL_MIN_TIME;
---
> #ifdef SDL3PP_DOC
525c567
<  * ```c
---
>  * ```cpp
539c581
<  * ```c
---
>  * ```cpp
560a603,604
> #endif // SDL3PP_DOC
> 
902a947,948
>  * @cat resource
>  *
910,911d955
<  *
<  * @cat resource
1040,1042c1084,1087
<    *          the form "variable=value" or nullptr on failure; call GetError()
<    *          for more information. This is a single allocation that should be
<    *          freed with free() when it is no longer needed.
---
>    *          the form "variable=value" on success. This is wrapped to be
>    *          auto-deleted, use FreeWrapper.release() if you want to manage
>    *          manually.
>    * @throws Error on failure
1056c1101,1113
<   Uint64 GetVariableCount() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the Variables count.
>    *
>    * @return the number of existing environment variables
>    *
>    * This might be slow.
>    */
>   Uint64 GetVariableCount()
>   {
>     Uint64 count = 0;
>     for (auto& var : GetVariables()) count += 1;
>     return count;
>   }
1223c1280
<   return SDL_GetEnvironmentVariables(env);
---
>   return OwnArray<char*>{CheckError(SDL_GetEnvironmentVariables(env))};
1363,1364c1420
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1375c1431
<   return CheckError(SDL_setenv_unsafe(name, value, overwrite));
---
>   return SDL_setenv_unsafe(name, value, overwrite);
1382,1383c1438
<  * @returns 0 on success.
<  * @throws Error on failure.
---
>  * @returns 0 on success, -1 on error.
1394c1449
<   return CheckError(SDL_unsetenv_unsafe(name));
---
>   return SDL_unsetenv_unsafe(name);
1543d1597
<  * @param userdata the `userdata` pointer passed to the sort function.
1662d1715
<  * @param userdata a pointer to pass to the compare function.
1673c1726,1734
<   static_assert(false, "Not implemented");
---
>   return qsort_r(
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1789d1849
<  * @param userdata a pointer to pass to the compare function.
1806c1866,1875
<   static_assert(false, "Not implemented");
---
>   return bsearch_r(
>     key,
>     base,
>     nmemb,
>     size,
>     [](void* userdata, const void* a, const void* b) {
>       auto& cb = *static_cast<CompareCB*>(userdata);
>       return cb(a, b);
>     },
>     &compare);
1875c1944
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1877c1946
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1888c1957
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1897c1966
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1899c1968
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1913c1982
<  * This macro will produce incorrect results if `b` is less than `a`.
---
>  * This function will produce incorrect results if `b` is less than `a`.
1915c1984
<  * This is a helper macro that might be more clear than writing out the
---
>  * This is a helper function that might be more clear than writing out the
1925c1994
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
1927c1996
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2267a2337
> #ifdef SDL_SLOW_MEMCPY
2268a2339,2341
> #else
>   return ::memcpy(dst, src, len);
> #endif // SDL_SLOW_MEMCPY
2270a2344,2345
> #ifdef SDL3PP_DOC
> 
2300a2376,2377
> #endif // SDL3PP_DOC
> 
2319a2397
> #ifdef SDL_SLOW_MEMMOVE
2320a2399,2401
> #else
>   return ::memmove(dst, src, len);
> #endif // SDL_SLOW_MEMMOVE
2342a2424
> #ifdef SDL_SLOW_MEMSET
2343a2426,2428
> #else
>   return ::memset(dst, c, len);
> #endif // SDL_SLOW_MEMSET
2425c2510
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
2427c2512
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
2435c2520
<   SDL_zeroa((&x)[N]);
---
>   SDL_zeroa(x);
3852c3937,3942
<   return SDL_sscanf(text, fmt, ...);
---
>   int rc;
>   va_list ap;
>   va_start(ap, fmt);
>   rc = SDL_vsscanf(text, fmt, ap);
>   va_end(ap);
>   return rc;
3915c4005,4012
<   return SDL_snprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vsnprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
3955c4052,4059
<   return SDL_swprintf(text, maxlen, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vswprintf(text, maxlen, fmt, ap);
>   va_end(ap);
> 
>   return result;
4040c4144,4151
<   return SDL_asprintf(strp, fmt, ...);
---
>   va_list ap;
>   int result;
> 
>   va_start(ap, fmt);
>   result = SDL_vasprintf(strp, fmt, ap);
>   va_end(ap);
> 
>   return result;
4147c4258
<  * You likely want to use rand() to get a psuedo-random number instead.
---
>  * You likely want to use rand() to get a pseudo-random number instead.
4167c4278,4288
< struct Random
---
> /**
>  * A independent pseudo random state
>  *
>  * This can be instantiated in any thread and as long as it is not shared with
>  * another thread all members are safe to call.
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  */
> class Random
4171c4292,4296
<   constexpr Random() {}
---
> public:
>   constexpr Random()
>     : m_state(0)
>   {
>   }
4173c4298,4304
<   constexpr explicit Random(Uint64 state) {}
---
>   /**
>    * Init state with the given value
>    */
>   constexpr explicit Random(Uint64 state)
>     : m_state(state)
>   {
>   }
4175c4306,4307
<   constexpr operator Uint64() { static_assert(false, "Not implemented"); }
---
>   /// Convert to the underlying type
>   constexpr operator Uint64() { return m_state; }
4184c4316
<    * Example: to simulate a d6 use `Random.rand(state, 6) + 1` The +1 converts
---
>    * Example: to simulate a d6 use `state.rand(6) + 1` The +1 converts
4188c4320
<    * you should use: (Sint32)Random.rand_bits(state)
---
>    * you should use: (Sint32)state.rand_bits()
4196,4197d4327
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4201c4331
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4210c4340
<   Sint32 rand(Sint32 n);
---
>   Sint32 rand(Sint32 n) { return SDL_rand_r(&m_state, n); }
4224,4225d4353
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4228c4356
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4237c4365
<   float randf();
---
>   float randf() { return SDL_randf_r(&m_state); }
4242c4370
<    * You likely want to use Random.rand() to get a psuedo-random number instead.
---
>    * You likely want to use Random.rand() to get a pseudo-random number instead.
4250,4251d4377
<    * @param state a pointer to the current random number state, this may not be
<    *              nullptr.
4254c4380
<    * @threadsafety This function is thread-safe, as long as the state pointer
---
>    * @threadsafety This function is thread-safe, as long as this object
4262c4388
<   Uint32 rand_bits();
---
>   Uint32 rand_bits() { return SDL_rand_bits_r(&m_state); }
4300,4301d4425
< inline Sint32 Random::rand(Sint32 n) { return SDL::rand_r(n); }
< 
4329,4330d4452
< inline float Random::randf() { return SDL::randf_r(); }
< 
4356,4357d4477
< inline Uint32 Random::rand_bits() { return SDL::rand_bits_r(); }
< 
4590d4709
<  * @sa atan2
5652,5653d5770
<  * @sa IConv.open
<  *
5654a5772,5774
>  *
>  * @sa IConv.open
>  * @sa IConv
5695,5696c5815
<    * @returns a handle that must be freed with IConv.close, or
<    *          SDL_ICONV_ERROR on failure.
---
>    * @post a valid handle or falsy on failure.
5704c5823,5826
<   static IConv open(StringParam tocode, StringParam fromcode);
---
>   IConv(StringParam tocode, StringParam fromcode)
>     : m_resource(SDL_iconv_open(tocode, fromcode))
>   {
>   }
5734c5856,5859
<   constexpr explicit operator bool() const { return !!m_resource; }
---
>   constexpr explicit operator bool() const
>   {
>     return m_resource != IConvRaw(SDL_ICONV_ERROR);
>   }
5742d5866
<    * @param cd The character set conversion handle.
5774d5897
<    *           IConv.open().
5840,5844d5962
< inline IConv IConv::open(StringParam tocode, StringParam fromcode)
< {
<   return SDL::iconv_open(std::move(tocode), std::move(fromcode));
< }
< 
5904c6022
< inline size_t iconv(IConv cd,
---
> inline size_t iconv(IConvRaw cd,
5920a6039,6040
> #ifdef SDL3PP_DOC
> 
5922c6042
< #define SDL_ICONV_ERROR (size_t) - 1
---
> #define SDL_ICONV_ERROR (size_t)-1
5925c6045
< #define SDL_ICONV_E2BIG (size_t) - 2
---
> #define SDL_ICONV_E2BIG (size_t)-2
5928c6048
< #define SDL_ICONV_EILSEQ (size_t) - 3
---
> #define SDL_ICONV_EILSEQ (size_t)-3
5931c6051,6053
< #define SDL_ICONV_EINVAL (size_t) - 4
---
> #define SDL_ICONV_EINVAL (size_t)-4
> 
> #endif // SDL3PP_DOC
5942,5944d6063
<  * The returned string is owned by the caller, and should be passed to
<  * free when no longer needed.
<  *
5963c6082
<   return SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft);
---
>   return OwnPtr<char>{SDL_iconv_string(tocode, fromcode, inbuf, inbytesleft)};
5965a6085,6086
> #ifdef SDL3PP_DOC
> 
6026a6148,6149
> #endif // SDL3PP_DOC
> 
6088a6212,6213
> 
> inline void PtrDeleter::operator()(void* ptr) const { SDL_free(ptr); }
