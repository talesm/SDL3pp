10c10
<  * @defgroup CategoryFilesystem Category Filesystem
---
>  * @defgroup CategoryFilesystem Filesystem Access
34a35,38
> /**
>  * Convenience representation of a path under SDL
>  *
>  */
36a41
>   /// Use parent ctors
38a44
>   /// Append
41c47,48
<     static_assert(false, "Not implemented");
---
>     StringResult::operator+=(other);
>     return *this;
44c51,56
<   Path& operator+=(char ch) { static_assert(false, "Not implemented"); }
---
>   /// Append
>   Path& operator+=(char ch)
>   {
>     StringResult::operator+=(ch);
>     return *this;
>   }
45a58
>   /// Append
48c61,63
<     static_assert(false, "Not implemented");
---
>     Path result(*this);
>     result += other;
>     return result;
51c66,72
<   Path operator+(char ch) const { static_assert(false, "Not implemented"); }
---
>   /// Append
>   Path operator+(char ch) const
>   {
>     Path result(*this);
>     result += ch;
>     return result;
>   }
52a74
>   /// Append path component.
55c77,78
<     static_assert(false, "Not implemented");
---
>     if (!empty() && back() != '/' && back() != '\\') this->operator+=('/');
>     return this->operator+=(other);
57a81
>   /// Append path component.
60c84,86
<     static_assert(false, "Not implemented");
---
>     Path result(*this);
>     result /= other;
>     return result;
160c186
<   return SDL_GetPrefPath(org, app);
---
>   return Path{SDL_GetPrefPath(org, app)};
172,184c198,210
<  * |             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten
<  * | | ----------- | ------- | --------- | ---- | ---------- | ----- |
<  * ---------- | | HOME        | X       | X         |      | X          | X | X
<  * | | DESKTOP     | X       | X         |      | X          | X     | | |
<  * DOCUMENTS   | X       | X         |      | X          |       |            |
<  * | DOWNLOADS   | Vista+  | X         |      | X          |       | | | MUSIC
<  * | X       | X         |      | X          |       |            | | PICTURES
<  * | X       | X         |      | X          |       |            | |
<  * PUBLICSHARE |         | X         |      | X          |       |            |
<  * | SAVEDGAMES  | Vista+  |           |      |            |       | | |
<  * SCREENSHOTS | Vista+  |           |      |            |       |            |
<  * | TEMPLATES   | X       | X         |      | X          |       | | | VIDEOS
<  * | X       | X*        |      | X          |       |            |
---
>  *             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten
>  * ----------- | ------- | --------- | ---- | ---------- | ----- | ----------
>  * HOME        | X       | X         |      | X          | X     | X
>  * DESKTOP     | X       | X         |      | X          | X     |
>  * DOCUMENTS   | X       | X         |      | X          |       |
>  * DOWNLOADS   | Vista+  | X         |      | X          |       |
>  * MUSIC       | X       | X         |      | X          |       |
>  * PICTURES    | X       | X         |      | X          |       |
>  * PUBLICSHARE |         | X         |      | X          |       |
>  * SAVEDGAMES  | Vista+  |           |      |            |       |
>  * SCREENSHOTS | Vista+  |           |      |            |       |
>  * TEMPLATES   | X       | X         |      | X          |       |
>  * VIDEOS      | X       | X*        |      | X          |       |
344c370
<   constexpr explicit operator bool() const { return *this != PathInfoRaw{}; }
---
>   constexpr explicit operator bool() const { return type != PATHTYPE_NONE; }
441d466
<  * @param userdata an app-controlled pointer that is passed to the callback.
496d520
<  * @param userdata a pointer that is passed to `callback`.
503c527,533
<   static_assert(false, "Not implemented");
---
>   return EnumerateDirectory(
>     std::move(path),
>     [](void* userdata, const char* dirname, const char* fname) {
>       auto& cb = *static_cast<EnumerateDirectoryCB*>(userdata);
>       return cb(dirname, fname);
>     },
>     &callback);
507,517c537
<  * Enumerate a directory through a callback function.
<  *
<  * This function provides every directory entry through an app-provided
<  * callback, called once for each directory entry, until all results have been
<  * provided or the callback returns either ENUM_SUCCESS or
<  * ENUM_FAILURE.
<  *
<  * This will return false if there was a system problem in general, or if a
<  * callback returns ENUM_FAILURE. A successful return means a callback
<  * returned ENUM_SUCCESS to halt enumeration, or all directory entries
<  * were enumerated.
---
>  * Enumerate a directory.
520,522c540
<  * @param callback a function that is called for each entry in the directory.
<  * @param userdata a pointer that is passed to `callback`.
<  * @throws Error on failure.
---
>  * @returns all the directory contents.
528c546,551
<   static_assert(false, "Not implemented");
---
>   std::vector<Path> r;
>   EnumerateDirectory(std::move(path), [&](const char*, const char* fname) {
>     r.emplace_back(fname);
>     return ENUM_CONTINUE;
>   });
>   return r;
534c557
<  * Directories that are not empty will fail; this function will not recursely
---
>  * Directories that are not empty will fail; this function will not recursively
615,616c638
<  * @param info a pointer filled in with information about the path, or nullptr
<  * to check for the existence of a file.
---
>  * @returns the information about the path on success.
623c645,647
<   return CheckError(SDL_GetPathInfo(path));
---
>   PathInfo info;
>   CheckError(SDL_GetPathInfo(path, &info));
>   return info;
647,648d670
<  * @param count on return, will be set to the number of items in the returned
<  *              array. Can be nullptr.
658c680
<                                      GlobFlags flags)
---
>                                      GlobFlags flags = 0)
660c682,684
<   return CheckError(SDL_GlobDirectory(path, pattern, flags));
---
>   int count;
>   auto data = CheckError(SDL_GlobDirectory(path, pattern, flags, &count));
>   return OwnArray<char*>{data, size_t(count)};
682c706
< inline Path GetCurrentDirectory() { return SDL_GetCurrentDirectory(); }
---
> inline Path GetCurrentDirectory() { return Path{SDL_GetCurrentDirectory()}; }
