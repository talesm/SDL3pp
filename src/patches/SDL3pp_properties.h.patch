12c12
<  * @defgroup CategoryProperties Category Properties
---
>  * @defgroup CategoryProperties Object Properties
17,19c17,20
<  * All properties are part of a property group (Properties). A property
<  * group can be created with the Properties.Create function and destroyed
<  * with the Properties.Destroy function.
---
>  * All properties are part of a property group (Properties). A property group
>  * can be created with the Properties.Create function and destroyed with the
>  * Properties.Destroy function, but the Properties destructor probably will do
>  * what you want to, automatically.
111a113,128
> /**
>  * A callback used to enumerate all the properties in a group of properties.
>  *
>  * This callback is called from Properties.Enumerate(), and is called once
>  * per property in the set.
>  *
>  * @param props the Properties that is being enumerated.
>  * @param name the next property name in the enumeration.
>  *
>  * @threadsafety Properties.Enumerate holds a lock on `props` during this
>  *               callback.
>  *
>  * @since This datatype is available since SDL 3.2.0.
>  *
>  * @sa Properties.Enumerate
>  */
120a138,139
>  *
>  * @sa Properties.Create
160,161c179,180
<    * @returns an ID for a new group of properties, or 0 on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid ID for a new group of properties on success;
>    * @throws Error on failure.
201d219
<    *
548c566
<   return CheckError(SDL_GetGlobalProperties());
---
>   return {CheckError(SDL_GetGlobalProperties())};
556,557c574,575
<  * @returns an ID for a new group of properties, or 0 on failure; call
<  *          GetError() for more information.
---
>  * @returns a valid ID for a new group of properties on success;
>  * @throws Error on failure.
567c585
<   return Properties(SDL_CreateProperties());
---
>   return Properties(CheckError(SDL_CreateProperties()));
675d692
<  * @param userdata an app-defined pointer passed to the callback.
745d761
<  * @param userdata a pointer that is passed to the cleanup function.
761c777,782
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<CleanupPropertyCB>;
>   SDL_SetPointerPropertyWithCleanup(props,
>                                     std::move(name),
>                                     value,
>                                     &Wrapper::CallOnce,
>                                     Wrapper::Wrap(std::move(cleanup)));
794c815
<   SDL::SetPointerProperty(m_resource, name, value);
---
>   SDL::SetPointerProperty(m_resource, std::move(name), value);
824c845
<   SDL::SetStringProperty(m_resource, name, value);
---
>   SDL::SetStringProperty(m_resource, std::move(name), std::move(value));
850c871
<   SDL::SetNumberProperty(m_resource, name, value);
---
>   SDL::SetNumberProperty(m_resource, std::move(name), value);
876c897
<   SDL::SetFloatProperty(m_resource, name, value);
---
>   SDL::SetFloatProperty(m_resource, std::move(name), value);
902c923
<   SDL::SetBooleanProperty(m_resource, name, value);
---
>   SDL::SetBooleanProperty(m_resource, std::move(name), value);
925c946
<   return SDL::HasProperty(m_resource, name);
---
>   return SDL::HasProperty(m_resource, std::move(name));
949c970
<   return SDL::GetPropertyType(m_resource, name);
---
>   return SDL::GetPropertyType(m_resource, std::move(name));
993c1014
<   return SDL::GetPointerProperty(m_resource, name, default_value);
---
>   return SDL::GetPointerProperty(m_resource, std::move(name), default_value);
1029c1050,1051
<   return SDL::GetStringProperty(m_resource, name, default_value);
---
>   return SDL::GetStringProperty(
>     m_resource, std::move(name), std::move(default_value));
1062c1084
<   return SDL::GetNumberProperty(m_resource, name, default_value);
---
>   return SDL::GetNumberProperty(m_resource, std::move(name), default_value);
1095c1117
<   return SDL::GetFloatProperty(m_resource, name, default_value);
---
>   return SDL::GetFloatProperty(m_resource, std::move(name), default_value);
1128c1150
<   return SDL::GetBooleanProperty(m_resource, name, default_value);
---
>   return SDL::GetBooleanProperty(m_resource, std::move(name), default_value);
1149c1171
<   SDL::ClearProperty(m_resource, name);
---
>   SDL::ClearProperty(m_resource, std::move(name));
1182d1203
<  * @param userdata a pointer that is passed to `callback`.
1192c1213,1219
<   static_assert(false, "Not implemented");
---
>   return EnumerateProperties(
>     props,
>     [](void* userdata, PropertiesID props, const char* name) {
>       auto& f = *static_cast<EnumeratePropertiesCB*>(userdata);
>       f(props, name);
>     },
>     &callback);
1194a1222,1226
> /**
>  * Returns the number of properties this has
>  *
>  * This uses Enumerate() internally, so might not be so fast
>  */
1203c1235,1242
<   static_assert(false, "Not implemented");
---
>   Uint64 count = 0;
>   EnumerateProperties(props, [&](auto, const char*) { count++; });
>   return count;
> }
> 
> inline Uint64 Properties::GetCount() const
> {
>   return CountProperties(m_resource);
