13c13
<  * @defgroup CategoryProperties Category Properties
---
>  * @defgroup CategoryProperties Object Properties
18,20c18,21
<  * All properties are part of a property group (Properties). A property
<  * group can be created with the Properties.Create function and destroyed
<  * with the Properties.Destroy function.
---
>  * All properties are part of a property group (Properties). A property group
>  * can be created with the Properties.Create function and destroyed with the
>  * Properties.Destroy function, but the Properties destructor probably will do
>  * what you want to, automatically.
126d126
<  * @param userdata an app-defined pointer passed to the callback.
136d135
<  * @sa EnumeratePropertiesCallback
164c163
< using CleanupPropertyCallback = SDL_EnumeratePropertiesCallback;
---
> using CleanupPropertyCallback = SDL_CleanupPropertyCallback;
179d177
<  * @param userdata an app-defined pointer passed to the callback.
197a196,197
>  *
>  * @sa Properties.Create
237,238c237,238
<    * @returns an ID for a new group of properties, or 0 on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid ID for a new group of properties on success;
>    * @throws Error on failure.
287d286
<    *
403d401
<    * @param userdata a pointer that is passed to the cleanup function.
686d683
<    * @param userdata a pointer that is passed to `callback`.
694a692,698
>   /**
>    * Returns the number of properties this has
>    *
>    * This uses EnumerateProperties() internally, so might not be so fast
>    *
>    * @return Uint64
>    */
762c766
<   return CheckError(SDL_GetGlobalProperties());
---
>   return {CheckError(SDL_GetGlobalProperties())};
770,771c774,775
<  * @returns an ID for a new group of properties, or 0 on failure; call
<  *          GetError() for more information.
---
>  * @returns a valid ID for a new group of properties on success;
>  * @throws Error on failure.
781c785
<   return Properties(SDL_CreateProperties());
---
>   return Properties(CheckError(SDL_CreateProperties()));
917d920
<  * @param userdata a pointer that is passed to the cleanup function.
933c936,941
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<CleanupPropertyCB>;
>   SDL_SetPointerPropertyWithCleanup(props,
>                                     std::move(name),
>                                     value,
>                                     &Wrapper::CallOnce,
>                                     Wrapper::Wrap(std::move(cleanup)));
1370d1377
<  * @param userdata a pointer that is passed to `callback`.
1380c1387,1393
<   static_assert(false, "Not implemented");
---
>   return EnumerateProperties(
>     props,
>     [](void* userdata, PropertiesID props, const char* name) {
>       auto& f = *static_cast<EnumeratePropertiesCB*>(userdata);
>       f(props, name);
>     },
>     &callback);
1393a1407,1414
> /**
>  * Returns the number of properties this has
>  *
>  * This uses EnumerateProperties() internally, so might not be so fast
>  *
>  * @param props
>  * @return Uint64
>  */
1396c1417,1419
<   static_assert(false, "Not implemented");
---
>   Uint64 count = 0;
>   EnumerateProperties(props, [&](auto, const char*) { count++; });
>   return count;
