12c12
<  * @defgroup CategoryProperties Category Properties
---
>  * @defgroup CategoryProperties Object Properties
17,19c17,20
<  * All properties are part of a property group (Properties). A property
<  * group can be created with the Properties.Create function and destroyed
<  * with the Properties.Destroy function.
---
>  * All properties are part of a property group (Properties). A property group
>  * can be created with the Properties.Create function and destroyed with the
>  * Properties.Destroy function, but the Properties destructor probably will do
>  * what you want to, automatically.
118a120,135
> /**
>  * A callback used to enumerate all the properties in a group of properties.
>  *
>  * This callback is called from Properties.Enumerate(), and is called once
>  * per property in the set.
>  *
>  * @param props the Properties that is being enumerated.
>  * @param name the next property name in the enumeration.
>  *
>  * @threadsafety Properties.Enumerate holds a lock on `props` during this
>  *               callback.
>  *
>  * @since This datatype is available since SDL 3.2.0.
>  *
>  * @sa Properties.Enumerate
>  */
127a145,146
>  *
>  * @sa Properties.Create
167,168c186,187
<    * @returns an ID for a new group of properties, or 0 on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid ID for a new group of properties on success;
>    * @throws Error on failure.
217d235
<    *
507a526,538
>   /**
>    * Enumerate the properties contained in a group of properties.
>    *
>    * The callback function is called for each property in the group of
>    * properties. The properties are locked during enumeration.
>    *
>    * @param callback the function to call for each property.
>    * @throws Error on failure.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
525a557,563
>   /**
>    * Returns the number of properties this has
>    *
>    * This uses EnumerateProperties() internally, so might not be so fast
>    *
>    * @return Uint64
>    */
564c602
<   return CheckError(SDL_GetGlobalProperties());
---
>   return {CheckError(SDL_GetGlobalProperties())};
572,573c610,611
<  * @returns an ID for a new group of properties, or 0 on failure; call
<  *          GetError() for more information.
---
>  * @returns a valid ID for a new group of properties on success;
>  * @throws Error on failure.
583c621
<   return Properties(SDL_CreateProperties());
---
>   return Properties(CheckError(SDL_CreateProperties()));
691d728
<  * @param userdata an app-defined pointer passed to the callback.
761d797
<  * @param userdata a pointer that is passed to the cleanup function.
777c813,818
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<CleanupPropertyCB>;
>   SDL_SetPointerPropertyWithCleanup(props,
>                                     std::move(name),
>                                     value,
>                                     &Wrapper::CallOnce,
>                                     Wrapper::Wrap(std::move(cleanup)));
1199d1239
<  * @param userdata a pointer that is passed to `callback`.
1209c1249,1255
<   static_assert(false, "Not implemented");
---
>   return EnumerateProperties(
>     props,
>     [](void* userdata, PropertiesID props, const char* name) {
>       auto& f = *static_cast<EnumeratePropertiesCB*>(userdata);
>       f(props, name);
>     },
>     &callback);
1211a1258,1262
> /**
>  * Returns the number of properties this has
>  *
>  * This uses Enumerate() internally, so might not be so fast
>  */
1217a1269,1276
> /**
>  * Returns the number of properties this has
>  *
>  * This uses EnumerateProperties() internally, so might not be so fast
>  *
>  * @param props
>  * @return Uint64
>  */
1220c1279,1286
<   static_assert(false, "Not implemented");
---
>   Uint64 count = 0;
>   EnumerateProperties(props, [&](auto, const char*) { count++; });
>   return count;
> }
> 
> inline Uint64 Properties::GetCount() const
> {
>   return CountProperties(m_resource);
