12c12
<  * @defgroup CategoryProperties Category Properties
---
>  * @defgroup CategoryProperties Object Properties
17,19c17,20
<  * All properties are part of a property group (Properties). A property
<  * group can be created with the Properties.Create function and destroyed
<  * with the Properties.Destroy function.
---
>  * All properties are part of a property group (Properties). A property group
>  * can be created with the Properties.Create function and destroyed with the
>  * Properties.Destroy function, but the Properties destructor probably will do
>  * what you want to, automatically.
72a74,75
>  *
>  * @sa Properties.Create
102,103c105,106
<    * @returns an ID for a new group of properties, or 0 on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid ID for a new group of properties on success;
>    * @throws Error on failure.
111c114,117
<   static Properties Create() { return Properties(SDL_CreateProperties()); }
---
>   static Properties Create()
>   {
>     return Properties(CheckError(SDL_CreateProperties()));
>   }
138d143
<    *
201c206
<   return CheckError(SDL_GetGlobalProperties());
---
>   return {CheckError(SDL_GetGlobalProperties())};
209,210c214,215
<  * @returns an ID for a new group of properties, or 0 on failure; call
<  *          GetError() for more information.
---
>  * @returns a valid ID for a new group of properties on success;
>  * @throws Error on failure.
220c225
<   return Properties(SDL_CreateProperties());
---
>   return Properties(CheckError(SDL_CreateProperties()));
322d326
<  * @param userdata an app-defined pointer passed to the callback.
392d395
<  * @param userdata a pointer that is passed to the cleanup function.
408c411,416
<   static_assert(false, "Not implemented");
---
>   using Wrapper = CallbackWrapper<CleanupPropertyCB>;
>   SDL_SetPointerPropertyWithCleanup(props,
>                                     std::move(name),
>                                     value,
>                                     &Wrapper::CallOnce,
>                                     Wrapper::Wrap(std::move(cleanup)));
753d760
<  * @param userdata an app-defined pointer passed to the callback.
798d804
<  * @param userdata a pointer that is passed to `callback`.
808c814,820
<   static_assert(false, "Not implemented");
---
>   return EnumerateProperties(
>     props,
>     [](void* userdata, PropertiesID props, const char* name) {
>       auto& f = *static_cast<EnumeratePropertiesCB*>(userdata);
>       f(props, name);
>     },
>     &callback);
810a823,827
> /**
>  * Returns the number of properties this has
>  *
>  * This uses Enumerate() internally, so might not be so fast
>  */
813c830,832
<   static_assert(false, "Not implemented");
---
>   Uint64 count = 0;
>   EnumerateProperties(props, [&](auto, const char*) { count++; });
>   return count;
