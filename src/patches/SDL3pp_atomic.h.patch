10c10
<  * @defgroup CategoryAtomic Category Atomic
---
>  * @defgroup CategoryAtomic Atomic Operations
84a85,86
> #ifdef SDL3PP_DOC
> 
182a185,186
> #endif // SDL3PP_DOC
> 
211a216,220
>   /**
>    * Wraps AtomicInt.
>    *
>    * @param value the value for value.
>    */
300d308
<    * @param a a pointer to an AtomicInt to increment.
316d323
<    * @param a a pointer to an AtomicInt to decrement.
441c448
< inline bool AtomicIncRef(const AtomicIntRaw& a) { return SDL_AtomicIncRef(a); }
---
> inline bool AtomicIncRef(AtomicIntRaw* a) { return SDL_AtomicIncRef(a); }
460c467
< inline bool AtomicDecRef(const AtomicIntRaw& a) { return SDL_AtomicDecRef(a); }
---
> inline bool AtomicDecRef(AtomicIntRaw* a) { return SDL_AtomicDecRef(a); }
492c499,503
< public:
---
>   /**
>    * Wraps value.
>    *
>    * @param value the value to be wrapped
>    */
494c505
<     : m_value(value)
---
>     : AtomicU32Raw(value)
562a574
>   /// Construcst from T
578d589
<    * @param a a pointer to a pointer.
599d609
<    * @param a a pointer to a pointer.
618d627
<    * @param a a pointer to a pointer.
708c717
<   return SDL::CompareAndSwapAtomicPointer(&m_value, oldval, newval);
---
>   return SDL_CompareAndSwapAtomicPointer(&m_value, oldval, newval);
714c723
<   return SDL::SetAtomicPointer(&m_value, v);
---
>   return SDL_SetAtomicPointer(&m_value, v);
720c729
<   return SDL::GetAtomicPointer(&m_value);
---
>   return SDL_GetAtomicPointer(&m_value);
