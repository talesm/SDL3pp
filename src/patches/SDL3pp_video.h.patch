12c12
<  * @defgroup CategoryVideo Category Video
---
>  * @defgroup CategoryVideo Display and Window Management
86c86
< using GLContextRaw = SDL_GLContext*;
---
> using GLContextRaw = SDL_GLContext;
295c295
<    * @param rect the Rect structure filled in with the display bounds.
---
>    * @returns the Rect structure filled in with the display bounds.
319c319
<    * @param rect the Rect structure filled in with the display bounds.
---
>    * @returns the Rect structure filled in with the display bounds.
397,398d396
<    * @param count a pointer filled in with the number of display modes returned,
<    *              may be nullptr.
400,402c398
<    *          failure; call GetError() for more information. This is a
<    *          single allocation that should be freed with free() when it is
<    *          no longer needed.
---
>    *          failure; call GetError() for more information.
422,423c418
<    * @param w the width in pixels of the desired display mode.
<    * @param h the height in pixels of the desired display mode.
---
>    * @param size the width and height in pixels of the desired display mode.
428,429c423
<    * @param closest a pointer filled in with the closest display mode equal to
<    *                or larger than the desired mode.
---
>    * @returns the closest display mode equal to or larger than the desired mode.
666a661
>  * @sa HitTestCB
716,717c711,724
< ///@sa HitTest
< using HitTestCB = HitTest;
---
> /**
>  * Callback used for hit-testing.
>  *
>  * @param win the WindowRef where hit-testing was set on.
>  * @param area a Point const reference which should be hit-tested.
>  * @returns an SDL::HitTestResult value.
>  *
>  * @cat listener-callback
>  *
>  * @sa HitTest
>  * @sa Window.SetHitTest
>  */
> using HitTestCB =
>   std::function<HitTestResult(WindowRaw window, const Point& area)>;
735,738d741
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
742,745d744
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
749,752d747
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
757,760d751
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
764,767d754
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
771,774d757
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
787,788d769
<  * @sa Window.Window
<  *
789a771,772
>  *
>  * @sa Window.Window
896,897c879
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param size the width and height of the window.
912c894
<     : m_resource(SDL_CreateWindow(title, size, flags))
---
>     : m_resource(SDL_CreateWindow(title, size.x, size.y, flags))
970,975c952,954
<    * @param offset_x the x position of the popup window relative to the origin
<    *                 of the parent.
<    * @param offset_y the y position of the popup window relative to the origin
<    *                 of the parent window.
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param offset the x, y position of the popup window relative to the origin
>    *               of the parent.
>    * @param size the width and height of the window.
994c973,978
<     : m_resource(SDL_CreatePopupWindow(parent, offset, size, flags))
---
>     : m_resource(SDL_CreatePopupWindow(parent,
>                                        offset.x,
>                                        offset.y,
>                                        size.x,
>                                        size.y,
>                                        flags))
1347d1330
<    * @param size the size of the ICC profile.
1629,1631c1612
<    * @param x the x coordinate of the window, or `WINDOWPOS_CENTERED` or
<    *          `WINDOWPOS_UNDEFINED`.
<    * @param y the y coordinate of the window, or `WINDOWPOS_CENTERED` or
---
>    * @param p the coordinates of the window, or `WINDOWPOS_CENTERED` or
1676,1680c1657
<    * @param window the window to query.
<    * @param x a pointer filled in with the x position of the window, may be
<    *          nullptr.
<    * @param y a pointer filled in with the y position of the window, may be
<    *          nullptr.
---
>    * @returns the position on success.
1687a1665
>    * @sa SetPosition(int *, int *)
1712,1713c1690
<    * @param w the width of the window, must be > 0.
<    * @param h the height of the window, must be > 0.
---
>    * @param size the width and height of the window, must be > 0.
1754,1756c1731
<    * @param window the window to query the width and height from.
<    * @param w a pointer filled in with the width of the window, may be nullptr.
<    * @param h a pointer filled in with the height of the window, may be nullptr.
---
>    * @returns a point with width and height on success
1765a1741
>    * @sa GetSize(int *, int *)
1768a1745,1755
>   /**
>    * @brief Request the window's position and size to be set.
>    *
>    * @param rect the rect containing the new coordinates
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @sa WindowRef.SetPosition()
>    * @sa WindowRef.SetSize()
>    */
1770a1758,1770
>   /**
>    * Get the position and client size of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use Window.GetSizeInPixels()
>    * or RendererRef.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @return Rect with the position and size
>    * @throws Error on failure.
>    */
1783,1784d1782
<    * @param rect a pointer filled in with the client area that is safe for
<    *             interactive content.
1898a1897
>    * @sa GetSizeInPixels()
1905,1909c1904,1905
<    * @param window the window from which the drawable size should be queried.
<    * @param w a pointer to variable for storing the width in pixels, may be
<    *          nullptr.
<    * @param h a pointer to variable for storing the height in pixels, may be
<    *          nullptr.
---
>    * @returns the size on success or std::nullopt on failure; call GetError()
>    * for more information.
1917a1914
>    * @sa GetSizeInPixels(int*, int*)
1924,1925c1921
<    * @param min_w the minimum width of the window, or 0 for no limit.
<    * @param min_h the minimum height of the window, or 0 for no limit.
---
>    * @param p the minimum width and heigh of the window, or 0 for no limit.
1958,1959c1954
<    * @param max_w the maximum width of the window, or 0 for no limit.
<    * @param max_h the maximum height of the window, or 0 for no limit.
---
>    * @param p the maximum width and height of the window, or 0 for no limit.
2307,2308c2302,2303
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Window.SetSurfaceVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval. See
>    *          Window.SetSurfaceVSync() for the meaning of the value.
2353d2347
<    * @param numrects the number of rectangles.
2602,2605c2596,2597
<    * @param x the x coordinate of the menu, relative to the origin (top-left) of
<    *          the client area.
<    * @param y the y coordinate of the menu, relative to the origin (top-left) of
<    *          the client area.
---
>    * @param p the x, y coordinates of the menu, relative to the origin
>    *          (top-left) of the client area.
2689d2680
<    * @param callback_data an app-defined void pointer passed to **callback**.
2694a2686,2687
>    *
>    * @cat listener-callback
2751,2754d2743
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
2767,2770d2755
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
2784,2787d2768
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
3059,3061c3040
<    *               mouse focus.
<    * @param x the x coordinate within the window.
<    * @param y the y coordinate within the window.
---
>    * @param p the x, y coordinates within the window.
3364,3366d3342
<    * @returns true on success or false on failure; call GetError() for more
<    *          information.
<    *
3381d3356
<    * @param context the OpenGL context to associate with the window.
3837,3838d3811
<  * @param count a pointer filled in with the number of displays returned, may
<  *              be nullptr.
3840,3841c3813
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  *          call GetError() for more information.
3847c3819,3824
< inline OwnArray<DisplayID> GetDisplays() { return SDL_GetDisplays(); }
---
> inline OwnArray<DisplayID> GetDisplays()
> {
>   int count = 0;
>   auto data = reinterpret_cast<DisplayID*>(SDL_GetDisplays(&count));
>   return OwnArray<DisplayID>{data, size_t(count)};
> }
3901c3878
<   return CheckError(SDL_GetDisplayProperties(displayID));
---
>   return {CheckError(SDL_GetDisplayProperties(displayID))};
3955c3932
<  * @param rect the Rect structure filled in with the display bounds.
---
>  * @returns the Rect structure filled in with the display bounds.
3967c3944,3946
<   return CheckError(SDL_GetDisplayBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayBounds(displayID, &bounds);
>   return bounds;
3988c3967
<  * @param rect the Rect structure filled in with the display bounds.
---
>  * @returns the Rect structure filled in with the display bounds.
4000c3979,3981
<   return CheckError(SDL_GetDisplayUsableBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayUsableBounds(displayID, &bounds);
>   return bounds;
4102,4103d4082
<  * @param count a pointer filled in with the number of display modes returned,
<  *              may be nullptr.
4105,4107c4084
<  *          failure; call GetError() for more information. This is a
<  *          single allocation that should be freed with free() when it is
<  *          no longer needed.
---
>  *          failure; call GetError() for more information.
4117c4094,4096
<   return SDL_GetFullscreenDisplayModes(displayID);
---
>   int count = 0;
>   auto data = CheckError(SDL_GetFullscreenDisplayModes(displayID, &count));
>   return OwnArray<DisplayMode*>{data, size_t(count)};
4136,4137c4115
<  * @param w the width in pixels of the desired display mode.
<  * @param h the height in pixels of the desired display mode.
---
>  * @param size the width and height in pixels of the desired display mode.
4142c4120
<  * @param closest a pointer filled in with the closest display mode equal to
---
>  * @returns a pointer filled in with the closest display mode equal to
4159,4160c4137,4144
<   return CheckError(SDL_GetClosestFullscreenDisplayMode(
<     displayID, size, refresh_rate, include_high_density_modes));
---
>   DisplayMode mode;
>   CheckError(SDL_GetClosestFullscreenDisplayMode(displayID,
>                                                  size.x,
>                                                  size.y,
>                                                  refresh_rate,
>                                                  include_high_density_modes,
>                                                  &mode));
>   return mode;
4193c4177
<   return SDL_GetDesktopDisplayMode(displayID);
---
>   return *SDL_GetDesktopDisplayMode(displayID);
4222c4206
<   return SDL_GetCurrentDisplayMode(displayID);
---
>   return *SDL_GetCurrentDisplayMode(displayID);
4246c4230
<   return SDL_GetDisplayForPoint(point);
---
>   return SDL_GetDisplayForPoint(&point);
4271c4255
<   return SDL_GetDisplayForRect(rect);
---
>   return SDL_GetDisplayForRect(&rect);
4422c4406
<   return SDL_GetWindowFullscreenMode(window);
---
>   return *SDL_GetWindowFullscreenMode(window);
4434d4417
<  * @param size the size of the ICC profile.
4444c4427,4428
<   return CheckError(SDL_GetWindowICCProfile(window));
---
>   size_t size;
>   return OwnPtr<void>{CheckError(SDL_GetWindowICCProfile(window, &size))};
4476,4477d4459
<  * @param count a pointer filled in with the number of windows returned, may
<  *              be nullptr.
4479,4481c4461
<  *          call GetError() for more information. This is a single
<  *          allocation that should be freed with free() when it is no
<  *          longer needed.
---
>  *          call GetError() for more information.
4487c4467,4472
< inline OwnArray<WindowRef> GetWindows() { return SDL_GetWindows(); }
---
> inline OwnArray<WindowRef> GetWindows()
> {
>   int count = 0;
>   auto data = CheckError(SDL_GetWindows(&count));
>   return OwnArray<WindowRef>{reinterpret_cast<WindowRef*>(data), size_t(count)};
> }
4561,4562c4546
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4637,4642c4621,4623
<  * @param offset_x the x position of the popup window relative to the origin
<  *                 of the parent.
<  * @param offset_y the y position of the popup window relative to the origin
<  *                 of the parent window.
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param offset the x, y position of the popup window relative to the origin
>  *               of the parent.
>  * @param size the width and height of the window.
4921,4924d4901
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
4928,4931d4904
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
4981a4955,4958
> #else
> 
> constexpr auto OPENVR_OVERLAY_ID_NUMBER = SDL_PROP_WINDOW_OPENVR_OVERLAY_ID;
> 
5036,5039d5012
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5043,5046d5015
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5095c5064
<   return SDL_GetWindowFromID(id);
---
>   return {SDL_GetWindowFromID(id)};
5118c5087
<   return CheckError(SDL_GetWindowParent(window));
---
>   return {CheckError(SDL_GetWindowParent(window))};
5258c5227
<   return CheckError(SDL_GetWindowProperties(window));
---
>   return {CheckError(SDL_GetWindowProperties(window))};
5401,5403c5370
<  * @param x the x coordinate of the window, or `WINDOWPOS_CENTERED` or
<  *          `WINDOWPOS_UNDEFINED`.
<  * @param y the y coordinate of the window, or `WINDOWPOS_CENTERED` or
---
>  * @param p the coordinates of the window, or `WINDOWPOS_CENTERED` or
5416c5383
<   CheckError(SDL_SetWindowPosition(window, p));
---
>   CheckError(SDL_SetWindowPosition(window, p.x, p.y));
5461,5464c5428
<  * @param x a pointer filled in with the x position of the window, may be
<  *          nullptr.
<  * @param y a pointer filled in with the y position of the window, may be
<  *          nullptr.
---
>  * @returns the position on success.
5475c5439,5441
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetWindowPosition(window, &p.x, &p.y);
>   return p;
5510,5511c5476
<  * @param w the width of the window, must be > 0.
<  * @param h the height of the window, must be > 0.
---
>  * @param size the width and height of the window, must be > 0.
5524c5489
<   CheckError(SDL_SetWindowSize(window, size));
---
>   CheckError(SDL_SetWindowSize(window, size.x, size.y));
5565,5566c5530
<  * @param w a pointer filled in with the width of the window, may be nullptr.
<  * @param h a pointer filled in with the height of the window, may be nullptr.
---
>  * @returns a point with width and height on success
5579c5543,5545
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetWindowSize(window, &p.x, &p.y);
>   return p;
5588a5555,5566
> /**
>  * @brief Request the window's position and size to be set.
>  *
>  * @param window the window to query the width and height from.
>  * @param rect the rect containing the new coordinates
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @sa WindowRef.SetPosition()
>  * @sa WindowRef.SetSize()
>  */
5591c5569,5570
<   static_assert(false, "Not implemented");
---
>   SetWindowPosition(window, rect.GetTopLeft());
>   SetWindowSize(window, rect.GetSize());
5595a5575,5588
> /**
>  * Get the position and client size of a window.
>  *
>  * This is the current position of the window as last reported by the
>  * windowing system.
>  *
>  * The window pixel size may differ from its window coordinate size if the
>  * window is on a high pixel density display. Use Window.GetSizeInPixels()
>  * or RendererRef.GetOutputSize() to get the real client area size in pixels.
>  *
>  * @param window the window to query the width and height from.
>  * @return Rect with the position and size
>  * @throws Error on failure.
>  */
5598c5591
<   static_assert(false, "Not implemented");
---
>   return Rect{GetWindowPosition(window), GetWindowSize(window)};
5614,5615d5606
<  * @param rect a pointer filled in with the client area that is safe for
<  *             interactive content.
5624c5615,5617
<   return CheckError(SDL_GetWindowSafeArea(window));
---
>   Rect rect;
>   CheckError(SDL_GetWindowSafeArea(window, &rect));
>   return rect;
5787,5790c5780,5781
<  * @param w a pointer to variable for storing the width in pixels, may be
<  *          nullptr.
<  * @param h a pointer to variable for storing the height in pixels, may be
<  *          nullptr.
---
>  * @returns the size on success or std::nullopt on failure; call GetError()
>  * for more information.
5802c5793,5795
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetWindowSizeInPixels(window, &p.x, &p.y);
>   return p;
5819,5820c5812
<  * @param min_w the minimum width of the window, or 0 for no limit.
<  * @param min_h the minimum height of the window, or 0 for no limit.
---
>  * @param p the minimum width and height of the window, or 0 for no limit.
5832c5824
<   CheckError(SDL_SetWindowMinimumSize(window, p));
---
>   CheckError(SDL_SetWindowMinimumSize(window, p.x, p.y));
5871,5872c5863
<  * @param max_w the maximum width of the window, or 0 for no limit.
<  * @param max_h the maximum height of the window, or 0 for no limit.
---
>  * @param p the maximum width and height of the window, or 0 for no limit.
5884c5875
<   CheckError(SDL_SetWindowMaximumSize(window, p));
---
>   CheckError(SDL_SetWindowMaximumSize(window, p.x, p.y));
6298c6289
<   return SDL_GetWindowSurface(window);
---
>   return Surface::Borrow(SDL_GetWindowSurface(window));
6338a6330
> /// Constant to disable vsync
6340a6333
> /// Constant to enable adaptive vsync
6347,6348d6339
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Window.SetSurfaceVSync() for the meaning of the value.
6359c6350,6352
<   return CheckError(SDL_GetWindowSurfaceVSync(window));
---
>   int vsync;
>   CheckError(SDL_GetWindowSurfaceVSync(window, &vsync));
>   return vsync;
6408d6400
<  * @param numrects the number of rectangles.
6421c6413
<   CheckError(SDL_UpdateWindowSurfaceRects(window, rects));
---
>   CheckError(SDL_UpdateWindowSurfaceRects(window, rects.data(), rects.size()));
6575c6567
< inline WindowRef GetGrabbedWindow() { return SDL_GetGrabbedWindow(); }
---
> inline WindowRef GetGrabbedWindow() { return {SDL_GetGrabbedWindow()}; }
6600c6592
<   CheckError(SDL_SetWindowMouseRect(window, rect));
---
>   CheckError(SDL_SetWindowMouseRect(window, &rect));
6788,6790c6780
<  * @param x the x coordinate of the menu, relative to the origin (top-left) of
<  *          the client area.
<  * @param y the y coordinate of the menu, relative to the origin (top-left) of
---
>  * @param p the coordinates of the menu, relative to the origin (top-left) of
6800c6790
<   CheckError(SDL_ShowWindowSystemMenu(window, p));
---
>   CheckError(SDL_ShowWindowSystemMenu(window, p.x, p.y));
6852a6843,6844
>   using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>   Wrapper::erase(window);
6890d6881
<  * @param callback_data an app-defined void pointer passed to **callback**.
6899c6890,6897
<   static_assert(false, "Not implemented");
---
>   using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>   void* cbHandle = Wrapper::Wrap(window, std::move(callback));
>   SetWindowHitTest(
>     window,
>     [](SDL_Window* win, const SDL_Point* area, void* data) {
>       return Wrapper::Call(data, win, Point(*area));
>     },
>     cbHandle);
6987,6990d6984
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
6996,6999d6989
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
7016,7019d7005
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
7025,7028d7010
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
7046,7049d7027
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
7055,7058d7032
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
7075,7078d7048
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
7106c7076,7081
< inline void DestroyWindow(WindowRaw window) { SDL_DestroyWindow(window); }
---
> inline void DestroyWindow(WindowRaw window)
> {
>   using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>   Wrapper::erase(window);
>   SDL_DestroyWindow(window);
> }
7414c7389
<   CheckError(SDL_GL_MakeCurrent(window, context));
---
>   CheckError(SDL_GL_MakeCurrent(window, context.get()));
7424c7399
<   SDL::Window::MakeCurrent(m_resource, window);
---
>   SDL::GL_MakeCurrent(window, m_resource);
7439c7414
<   return CheckError(SDL_GL_GetCurrentWindow());
---
>   return {CheckError(SDL_GL_GetCurrentWindow())};
