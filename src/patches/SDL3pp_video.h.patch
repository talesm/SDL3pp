12c12
<  * @defgroup CategoryVideo Category Video
---
>  * @defgroup CategoryVideo Display and Window Management
86c86
< using GLContextRaw = SDL_GLContext*;
---
> using GLContextRaw = SDL_GLContext;
199,200d198
<    * @param count a pointer filled in with the number of displays returned, may
<    *              be nullptr.
202,203c200
<    * failure; call GetError() for more information. This should be freed with
<    * free() when it is no longer needed.
---
>    * failure; call GetError() for more information.
272,273c269
<    * @param displayID the instance ID of the display to query.
<    * @param rect the Rect structure filled in with the display bounds.
---
>    * @returns the Rect structure filled in with the display bounds.
297,298c293
<    * @param displayID the instance ID of the display to query.
<    * @param rect the Rect structure filled in with the display bounds.
---
>    * @returns the Rect structure filled in with the display bounds.
376,378d370
<    * @param displayID the instance ID of the display to query.
<    * @param count a pointer filled in with the number of display modes returned,
<    *              may be nullptr.
380,382c372
<    *          failure; call GetError() for more information. This is a
<    *          single allocation that should be freed with free() when it is
<    *          no longer needed.
---
>    *          failure; call GetError() for more information.
402,403c392
<    * @param w the width in pixels of the desired display mode.
<    * @param h the height in pixels of the desired display mode.
---
>    * @param size the width and height in pixels of the desired display mode.
408,409c397
<    * @param closest a pointer filled in with the closest display mode equal to
<    *                or larger than the desired mode.
---
>    * @returns the closest display mode equal to or larger than the desired mode.
673a662
>  * @sa HitTestCB
723,724c712,725
< ///@sa HitTest
< using HitTestCB = HitTest;
---
> /**
>  * Callback used for hit-testing.
>  *
>  * @param win the WindowRef where hit-testing was set on.
>  * @param area a Point const reference which should be hit-tested.
>  * @returns an SDL::HitTestResult value.
>  *
>  * @cat listener-callback
>  *
>  * @sa HitTest
>  * @sa Window.SetHitTest
>  */
> using HitTestCB =
>   std::function<HitTestResult(WindowRaw window, const Point& area)>;
731,732d731
<  * @sa Window.Window
<  *
733a733,734
>  *
>  * @sa Window.Window
841,842c842
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param size the width and height of the window.
857c857
<     : m_resource(SDL_CreateWindow(title, size, flags))
---
>     : m_resource(SDL_CreateWindow(title, size.x, size.y, flags))
915,920c915,917
<    * @param offset_x the x position of the popup window relative to the origin
<    *                 of the parent.
<    * @param offset_y the y position of the popup window relative to the origin
<    *                 of the parent window.
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param offset the x, y position of the popup window relative to the origin
>    *               of the parent.
>    * @param size the width and height of the window.
939c936,941
<     : m_resource(SDL_CreatePopupWindow(parent, offset, size, flags))
---
>     : m_resource(SDL_CreatePopupWindow(parent,
>                                        offset.x,
>                                        offset.y,
>                                        size.x,
>                                        size.y,
>                                        flags))
1237d1238
<    * @param size the size of the ICC profile.
1482c1483,1498
<   void SetRect(Rect rect) { static_assert(false, "Not implemented"); }
---
>   /**
>    * @brief Request the window's position and size to be set.
>    *
>    * @param rect the rect containing the new coordinates
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @sa WindowRef.SetPosition()
>    * @sa WindowRef.SetSize()
>    */
>   void SetRect(Rect rect)
>   {
>     SetPosition(rect.GetTopLeft());
>     SetSize(rect.GetSize());
>   }
1484c1500,1513
<   Rect GetRect() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position and client size of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use Window.GetSizeInPixels()
>    * or RendererRef.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @return Rect with the position and size
>    * @throws Error on failure.
>    */
>   Rect GetRect() const { return Rect{GetPosition(), GetSize()}; }
1510,1513c1539
<    * @param window the window to reposition.
<    * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<    *          `SDL_WINDOWPOS_UNDEFINED`.
<    * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>    * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
1526c1552,1573
<   Point GetPosition() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * @returns the position on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetPosition()
>    * @sa SetPosition(int *, int *)
>    */
>   Point GetPosition() const
>   {
>     Point p;
>     GetPosition(&p.x, &p.y);
>     return p;
>   }
1572,1574c1619
<    * @param window the window to change.
<    * @param w the width of the window, must be > 0.
<    * @param h the height of the window, must be > 0.
---
>    * @param p the width and height of the window, must be > 0.
1587c1632,1656
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use GetSizeInPixels()
>    * or Renderer.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @returns a point with width and height on success or std::nullopt on
>    * failure; call GetError() for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    * @sa GetSizeInPixels()
>    * @sa SetSize()
>    * @sa GetSize(int *, int *)
>    */
>   Point GetSize() const
>   {
>     Point p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
1620,1622d1688
<    * @param window the window to query.
<    * @param rect a pointer filled in with the client area that is safe for
<    *             interactive content.
1722c1788,1806
<   Point GetSizeInPixels() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area, in pixels.
>    *
>    * @returns the size on success or std::nullopt on failure; call GetError()
>    * for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetSize()
>    * @sa GetSizeInPixels(int*, int*)
>    */
>   Point GetSizeInPixels() const
>   {
>     Point p;
>     GetSizeInPixels(&p.x, &p.y);
>     return p;
>   }
1745,1747c1829
<    * @param window the window to change.
<    * @param min_w the minimum width of the window, or 0 for no limit.
<    * @param min_h the minimum height of the window, or 0 for no limit.
---
>    * @param p the minimum width and heigh of the window, or 0 for no limit.
1780,1782c1862
<    * @param window the window to change.
<    * @param max_w the maximum width of the window, or 0 for no limit.
<    * @param max_h the maximum height of the window, or 0 for no limit.
---
>    * @param p the maximum width and height of the window, or 0 for no limit.
2130,2132c2210,2211
<    * @param window the window to query.
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Window.SetSurfaceVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval. See
>    *          Window.SetSurfaceVSync() for the meaning of the value.
2177d2255
<    * @param numrects the number of rectangles.
2427,2431c2505,2506
<    * @param window the window for which the menu will be displayed.
<    * @param x the x coordinate of the menu, relative to the origin (top-left) of
<    *          the client area.
<    * @param y the y coordinate of the menu, relative to the origin (top-left) of
<    *          the client area.
---
>    * @param p the x, y coordinates of the menu, relative to the origin
>    *          (top-left) of the client area.
2439a2515,2555
>   /**
>    * Provide a callback that decides if a window region has special properties.
>    *
>    * Normally windows are dragged and resized by decorations provided by the
>    * system window manager (a title bar, borders, etc), but for some apps, it
>    * makes sense to drag them from somewhere else inside the window itself; for
>    * example, one might have a borderless window that wants to be draggable from
>    * any part, or simulate its own title bar, etc.
>    *
>    * This function lets the app provide a callback that designates pieces of a
>    * given window as special. This callback is run during event processing if we
>    * need to tell the OS to treat a region of the window specially; the use of
>    * this callback is known as "hit testing."
>    *
>    * Mouse input may not be delivered to your application if it is within a
>    * special area; the OS will often apply that input to moving the window or
>    * resizing the window and not deliver it to the application.
>    *
>    * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>    * disabled by default.
>    *
>    * Platforms that don't support this functionality will return false
>    * unconditionally, even if you're attempting to disable hit-testing.
>    *
>    * Your callback may fire at any time, and its firing does not indicate any
>    * specific behavior (for example, on Windows, this certainly might fire when
>    * the OS is deciding whether to drag your window, but it fires for lots of
>    * other reasons, too, some unrelated to anything you probably care about _and
>    * when the mouse isn't actually at the location it is testing_). Since this
>    * can fire at any time, you should try to keep your callback efficient,
>    * devoid of allocations, etc.
>    *
>    * @param callback the function to call when doing a hit-test.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @cat listener-callback
>    */
2442c2558,2564
<     static_assert(false, "Not implemented");
---
>     using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>     void* cbHandle = Wrapper::Wrap(m_resource, std::move(callback));
>     SetHitTest(
>       [](SDL_Window* win, const SDL_Point* area, void* data) {
>         return Wrapper::Call(data, win, Point(*area));
>       },
>       cbHandle);
2739,2741c2861
<    *               mouse focus.
<    * @param x the x coordinate within the window.
<    * @param y the y coordinate within the window.
---
>    * @param p the x, y coordinates within the window.
2827a2948,2949
> #ifdef SDL3PP_DOC
> 
2909a3032,3033
> #endif // SDL3PP_DOC
> 
3009,3011d3132
<    * @returns true on success or false on failure; call GetError() for more
<    *          information.
<    *
3026d3146
<    * @param context the OpenGL context to associate with the window.
3488,3489d3607
<  * @param count a pointer filled in with the number of displays returned, may
<  *              be nullptr.
3491,3492c3609
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  *          call GetError() for more information.
3498c3615,3620
< inline OwnArray<DisplayID> GetDisplays() { return SDL_GetDisplays(); }
---
> inline OwnArray<DisplayID> GetDisplays()
> {
>   int count = 0;
>   auto data = reinterpret_cast<DisplayID*>(SDL_GetDisplays(&count));
>   return OwnArray<DisplayID>{data, size_t(count)};
> }
3549c3671
<   return CheckError(SDL_GetDisplayProperties(displayID));
---
>   return {CheckError(SDL_GetDisplayProperties(displayID))};
3596c3718
<  * @param rect the Rect structure filled in with the display bounds.
---
>  * @returns the Rect structure filled in with the display bounds.
3608c3730,3732
<   return CheckError(SDL_GetDisplayBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayBounds(displayID, &bounds);
>   return bounds;
3629c3753
<  * @param rect the Rect structure filled in with the display bounds.
---
>  * @returns the Rect structure filled in with the display bounds.
3641c3765,3767
<   return CheckError(SDL_GetDisplayUsableBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayUsableBounds(displayID, &bounds);
>   return bounds;
3743,3744d3868
<  * @param count a pointer filled in with the number of display modes returned,
<  *              may be nullptr.
3746,3748c3870
<  *          failure; call GetError() for more information. This is a
<  *          single allocation that should be freed with free() when it is
<  *          no longer needed.
---
>  *          failure; call GetError() for more information.
3758c3880,3882
<   return SDL_GetFullscreenDisplayModes(displayID);
---
>   int count = 0;
>   auto data = CheckError(SDL_GetFullscreenDisplayModes(displayID, &count));
>   return OwnArray<DisplayMode*>{data, size_t(count)};
3777,3778c3901
<  * @param w the width in pixels of the desired display mode.
<  * @param h the height in pixels of the desired display mode.
---
>  * @param size the width and height in pixels of the desired display mode.
3783c3906
<  * @param closest a pointer filled in with the closest display mode equal to
---
>  * @returns a pointer filled in with the closest display mode equal to
3800,3801c3923,3930
<   return CheckError(SDL_GetClosestFullscreenDisplayMode(
<     displayID, size, refresh_rate, include_high_density_modes));
---
>   DisplayMode mode;
>   CheckError(SDL_GetClosestFullscreenDisplayMode(displayID,
>                                                  size.x,
>                                                  size.y,
>                                                  refresh_rate,
>                                                  include_high_density_modes,
>                                                  &mode));
>   return mode;
3834c3963
<   return SDL_GetDesktopDisplayMode(displayID);
---
>   return *SDL_GetDesktopDisplayMode(displayID);
3863c3992
<   return SDL_GetCurrentDisplayMode(displayID);
---
>   return *SDL_GetCurrentDisplayMode(displayID);
3887c4016
<   return SDL_GetDisplayForPoint(point);
---
>   return SDL_GetDisplayForPoint(&point);
3912c4041
<   return SDL_GetDisplayForRect(rect);
---
>   return SDL_GetDisplayForRect(&rect);
4063c4192
<   return SDL_GetWindowFullscreenMode(window);
---
>   return *SDL_GetWindowFullscreenMode(window);
4075d4203
<  * @param size the size of the ICC profile.
4085c4213,4214
<   return CheckError(SDL_GetWindowICCProfile(window));
---
>   size_t size;
>   return OwnPtr<void>{CheckError(SDL_GetWindowICCProfile(window, &size))};
4117,4118d4245
<  * @param count a pointer filled in with the number of windows returned, may
<  *              be nullptr.
4120,4122c4247
<  *          call GetError() for more information. This is a single
<  *          allocation that should be freed with free() when it is no
<  *          longer needed.
---
>  *          call GetError() for more information.
4128c4253,4258
< inline OwnArray<WindowRef> GetWindows() { return SDL_GetWindows(); }
---
> inline OwnArray<WindowRef> GetWindows()
> {
>   int count = 0;
>   auto data = CheckError(SDL_GetWindows(&count));
>   return OwnArray<WindowRef>{reinterpret_cast<WindowRef*>(data), size_t(count)};
> }
4203,4204c4333
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4279,4284c4408,4410
<  * @param offset_x the x position of the popup window relative to the origin
<  *                 of the parent.
<  * @param offset_y the y position of the popup window relative to the origin
<  *                 of the parent window.
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param offset the x, y position of the popup window relative to the origin
>  *               of the parent.
>  * @param size the width and height of the window.
4663c4789
<   return SDL_GetWindowFromID(id);
---
>   return {SDL_GetWindowFromID(id)};
4686c4812
<   return CheckError(SDL_GetWindowParent(window));
---
>   return {CheckError(SDL_GetWindowParent(window))};
4816c4942
<   return CheckError(SDL_GetWindowProperties(window));
---
>   return {CheckError(SDL_GetWindowProperties(window))};
4956,4958c5082
<  * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<  *          `SDL_WINDOWPOS_UNDEFINED`.
<  * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>  * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
4971c5095
<   CheckError(SDL_SetWindowPosition(window, p));
---
>   CheckError(SDL_SetWindowPosition(window, p.x, p.y));
5033,5034c5157
<  * @param w the width of the window, must be > 0.
<  * @param h the height of the window, must be > 0.
---
>  * @param p the width and height of the window, must be > 0.
5047c5170
<   CheckError(SDL_SetWindowSize(window, p));
---
>   CheckError(SDL_SetWindowSize(window, p.x, p.y));
5096,5097d5218
<  * @param rect a pointer filled in with the client area that is safe for
<  *             interactive content.
5106c5227,5229
<   return CheckError(SDL_GetWindowSafeArea(window));
---
>   Rect rect;
>   CheckError(SDL_GetWindowSafeArea(window, &rect));
>   return rect;
5274,5275c5397
<  * @param min_w the minimum width of the window, or 0 for no limit.
<  * @param min_h the minimum height of the window, or 0 for no limit.
---
>  * @param p the minimum width and height of the window, or 0 for no limit.
5287c5409
<   CheckError(SDL_SetWindowMinimumSize(window, p));
---
>   CheckError(SDL_SetWindowMinimumSize(window, p.x, p.y));
5326,5327c5448
<  * @param max_w the maximum width of the window, or 0 for no limit.
<  * @param max_h the maximum height of the window, or 0 for no limit.
---
>  * @param p the maximum width and height of the window, or 0 for no limit.
5339c5460
<   CheckError(SDL_SetWindowMaximumSize(window, p));
---
>   CheckError(SDL_SetWindowMaximumSize(window, p.x, p.y));
5753c5874
<   return SDL_GetWindowSurface(window);
---
>   return Surface::Borrow(SDL_GetWindowSurface(window));
5793a5915
> /// Constant to disable vsync
5795a5918
> /// Constant to enable adaptive vsync
5802,5803d5924
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Window.SetSurfaceVSync() for the meaning of the value.
5814c5935,5937
<   return CheckError(SDL_GetWindowSurfaceVSync(window));
---
>   int vsync;
>   CheckError(SDL_GetWindowSurfaceVSync(window, &vsync));
>   return vsync;
5863d5985
<  * @param numrects the number of rectangles.
5876c5998
<   CheckError(SDL_UpdateWindowSurfaceRects(window, rects));
---
>   CheckError(SDL_UpdateWindowSurfaceRects(window, rects.data(), rects.size()));
6031c6153
< inline WindowRef GetGrabbedWindow() { return SDL_GetGrabbedWindow(); }
---
> inline WindowRef GetGrabbedWindow() { return {SDL_GetGrabbedWindow()}; }
6056c6178
<   CheckError(SDL_SetWindowMouseRect(window, rect));
---
>   CheckError(SDL_SetWindowMouseRect(window, &rect));
6244,6246c6366
<  * @param x the x coordinate of the menu, relative to the origin (top-left) of
<  *          the client area.
<  * @param y the y coordinate of the menu, relative to the origin (top-left) of
---
>  * @param p the coordinates of the menu, relative to the origin (top-left) of
6256c6376
<   CheckError(SDL_ShowWindowSystemMenu(window, p));
---
>   CheckError(SDL_ShowWindowSystemMenu(window, p.x, p.y));
6312c6432,6472
< inline void Window::SetHitTest(HitTest callback, void* callback_data)
---
> /**
>  * Provide a callback that decides if a window region has special properties.
>  *
>  * Normally windows are dragged and resized by decorations provided by the
>  * system window manager (a title bar, borders, etc), but for some apps, it
>  * makes sense to drag them from somewhere else inside the window itself; for
>  * example, one might have a borderless window that wants to be draggable from
>  * any part, or simulate its own title bar, etc.
>  *
>  * This function lets the app provide a callback that designates pieces of a
>  * given window as special. This callback is run during event processing if we
>  * need to tell the OS to treat a region of the window specially; the use of
>  * this callback is known as "hit testing."
>  *
>  * Mouse input may not be delivered to your application if it is within a
>  * special area; the OS will often apply that input to moving the window or
>  * resizing the window and not deliver it to the application.
>  *
>  * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>  * disabled by default.
>  *
>  * Platforms that don't support this functionality will return false
>  * unconditionally, even if you're attempting to disable hit-testing.
>  *
>  * Your callback may fire at any time, and its firing does not indicate any
>  * specific behavior (for example, on Windows, this certainly might fire when
>  * the OS is deciding whether to drag your window, but it fires for lots of
>  * other reasons, too, some unrelated to anything you probably care about _and
>  * when the mouse isn't actually at the location it is testing_). Since this
>  * can fire at any time, you should try to keep your callback efficient,
>  * devoid of allocations, etc.
>  *
>  * @param window the window to set hit-testing on.
>  * @param callback the function to call when doing a hit-test.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
> inline void SetWindowHitTest(WindowParam window, HitTestCB callback)
6314c6474,6481
<   SDL::SetWindowHitTest(m_resource, callback, callback_data);
---
>   using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>   void* cbHandle = Wrapper::Wrap(window, std::move(callback));
>   SetWindowHitTest(
>     window,
>     [](SDL_Window* win, const SDL_Point* area, void* data) {
>       return Wrapper::Call(data, win, Point(*area));
>     },
>     cbHandle);
6693c6860
<   CheckError(SDL_GL_MakeCurrent(window, context));
---
>   CheckError(SDL_GL_MakeCurrent(window, context.get()));
6698c6865
<   SDL::GL_MakeCurrent(m_resource, window);
---
>   SDL::GL_MakeCurrent(window, m_resource);
6713c6880
<   return CheckError(SDL_GL_GetCurrentWindow());
---
>   return {CheckError(SDL_GL_GetCurrentWindow())};
