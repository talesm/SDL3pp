12c12
<  * @defgroup CategoryVideo Category Video
---
>  * @defgroup CategoryVideo Display and Window Management
73c73
< using GLContextRaw = SDL_GLContext*;
---
> using GLContextRaw = SDL_GLContext;
206c206,211
<   OwnArray<DisplayID> GetAll() { return SDL_GetDisplays(m_displayID); }
---
>   static OwnArray<DisplayID> GetAll()
>   {
>     int count = 0;
>     auto data = reinterpret_cast<DisplayID*>(SDL_GetDisplays(&count));
>     return OwnArray<DisplayID>{data, size_t(count)};
>   }
220,223c225
<   Display GetPrimary()
<   {
<     return CheckError(SDL_GetPrimaryDisplay(m_displayID));
<   }
---
>   static Display GetPrimary() { return CheckError(SDL_GetPrimaryDisplay()); }
252c254
<     return CheckError(SDL_GetDisplayProperties(m_displayID));
---
>     return {CheckError(SDL_GetDisplayProperties(m_displayID))};
275d276
<    * @param displayID the instance ID of the display to query.
288c289,291
<     return CheckError(SDL_GetDisplayBounds(m_displayID));
---
>     Rect bounds;
>     SDL_GetDisplayBounds(m_displayID, &bounds);
>     return bounds;
303d305
<    * @param displayID the instance ID of the display to query.
316c318,320
<     return CheckError(SDL_GetDisplayUsableBounds(m_displayID));
---
>     Rect bounds;
>     CheckError(SDL_GetDisplayUsableBounds(m_displayID, &bounds));
>     return bounds;
394d397
<    * @param displayID the instance ID of the display to query.
410c413,415
<     return SDL_GetFullscreenDisplayModes(m_displayID);
---
>     int count = 0;
>     auto data = CheckError(SDL_GetFullscreenDisplayModes(m_displayID, &count));
>     return OwnArray<DisplayMode*>{data, size_t(count)};
423,424c428
<    * @param w the width in pixels of the desired display mode.
<    * @param h the height in pixels of the desired display mode.
---
>    * @param size the width and height in pixels of the desired display mode.
444,445c448,455
<     return CheckError(SDL_GetClosestFullscreenDisplayMode(
<       m_displayID, size, refresh_rate, include_high_density_modes));
---
>     DisplayMode mode;
>     CheckError(SDL_GetClosestFullscreenDisplayMode(m_displayID,
>                                                    size.x,
>                                                    size.y,
>                                                    refresh_rate,
>                                                    include_high_density_modes,
>                                                    &mode));
>     return mode;
510c520
<     return SDL_GetDisplayForPoint(point);
---
>     return SDL_GetDisplayForPoint(&point);
530c540
<     return SDL_GetDisplayForRect(rect);
---
>     return SDL_GetDisplayForRect(&rect);
768a779,786
>  * Callback used for hit-testing.
>  *
>  * @param win the WindowRef where hit-testing was set on.
>  * @param area a Point const reference which should be hit-tested.
>  * @returns an SDL::HitTestResult value.
>  *
>  * @cat listener-callback
>  *
769a788
>  * @sa Window.SetHitTest
771c790,791
< using HitTestCB = HitTest;
---
> using HitTestCB =
>   std::function<HitTestResult(WindowRef window, const Point& area)>;
778,779d797
<  * @sa Window.Window
<  *
780a799,800
>  *
>  * @sa Window.Window
878,879c898
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param size the width and height of the window.
894c913
<     : m_resource(SDL_CreateWindow(title, size, flags))
---
>     : m_resource(SDL_CreateWindow(title, size.x, size.y, flags))
952,957c971,973
<    * @param offset_x the x position of the popup window relative to the origin
<    *                 of the parent.
<    * @param offset_y the y position of the popup window relative to the origin
<    *                 of the parent window.
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param offset the x, y position of the popup window relative to the origin
>    *               of the parent.
>    * @param size the width and height of the window.
976c992,997
<     : m_resource(SDL_CreatePopupWindow(parent, offset, size, flags))
---
>     : m_resource(SDL_CreatePopupWindow(parent,
>                                        offset.x,
>                                        offset.y,
>                                        size.x,
>                                        size.y,
>                                        flags))
1261c1282
<     return CheckError(SDL_GetWindowICCProfile(m_resource, size));
---
>     return OwnPtr<void>{CheckError(SDL_GetWindowICCProfile(m_resource, size))};
1310c1331
<     return CheckError(SDL_GetWindowParent(m_resource));
---
>     return {CheckError(SDL_GetWindowParent(m_resource))};
1434c1455
<     return CheckError(SDL_GetWindowProperties(m_resource));
---
>     return {CheckError(SDL_GetWindowProperties(m_resource))};
1514c1535,1550
<   void SetRect(Rect rect) { static_assert(false, "Not implemented"); }
---
>   /**
>    * @brief Request the window's position and size to be set.
>    *
>    * @param rect the rect containing the new coordinates
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @sa WindowRef.SetPosition()
>    * @sa WindowRef.SetSize()
>    */
>   void SetRect(Rect rect)
>   {
>     SetPosition(rect.GetTopLeft());
>     SetSize(rect.GetSize());
>   }
1516c1552,1565
<   Rect GetRect() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position and client size of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use Window.GetSizeInPixels()
>    * or RendererRef.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @return Rect with the position and size
>    * @throws Error on failure.
>    */
>   Rect GetRect() const { return Rect{GetPosition(), GetSize()}; }
1543,1545c1592
<    * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<    *          `SDL_WINDOWPOS_UNDEFINED`.
<    * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>    * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
1558c1605
<     CheckError(SDL_SetWindowPosition(m_resource, p));
---
>     CheckError(SDL_SetWindowPosition(m_resource, p.x, p.y));
1561c1608,1629
<   Point GetPosition() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * @returns the position on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetPosition()
>    * @sa SetPosition(int *, int *)
>    */
>   Point GetPosition() const
>   {
>     Point p;
>     GetPosition(&p.x, &p.y);
>     return p;
>   }
1625c1693
<     CheckError(SDL_SetWindowSize(m_resource, p));
---
>     CheckError(SDL_SetWindowSize(m_resource, p.x, p.y));
1628c1696,1720
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use GetSizeInPixels()
>    * or Renderer.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @returns a point with width and height on success or std::nullopt on
>    * failure; call GetError() for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    * @sa GetSizeInPixels()
>    * @sa SetSize()
>    * @sa GetSize(int *, int *)
>    */
>   Point GetSize() const
>   {
>     Point p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
1675c1767,1769
<     return CheckError(SDL_GetWindowSafeArea(m_resource));
---
>     Rect rect;
>     CheckError(SDL_GetWindowSafeArea(m_resource, &rect));
>     return rect;
1778c1872,1890
<   Point GetSizeInPixels() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area, in pixels.
>    *
>    * @returns the size on success or std::nullopt on failure; call GetError()
>    * for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetSize()
>    * @sa GetSizeInPixels(int*, int*)
>    */
>   Point GetSizeInPixels() const
>   {
>     Point p;
>     GetSizeInPixels(&p.x, &p.y);
>     return p;
>   }
1818c1930
<     CheckError(SDL_SetWindowMinimumSize(m_resource, p));
---
>     CheckError(SDL_SetWindowMinimumSize(m_resource, p.x, p.y));
1859c1971
<     CheckError(SDL_SetWindowMaximumSize(m_resource, p));
---
>     CheckError(SDL_SetWindowMaximumSize(m_resource, p.x, p.y));
2184c2296,2299
<   Surface GetSurface() { return SDL_GetWindowSurface(m_resource); }
---
>   Surface GetSurface()
>   {
>     return Surface::Borrow(SDL_GetWindowSurface(m_resource));
>   }
2229c2344,2346
<     return CheckError(SDL_GetWindowSurfaceVSync(m_resource));
---
>     int vsync;
>     CheckError(SDL_GetWindowSurfaceVSync(m_resource, &vsync));
>     return vsync;
2278c2395,2396
<     CheckError(SDL_UpdateWindowSurfaceRects(m_resource, rects));
---
>     CheckError(
>       SDL_UpdateWindowSurfaceRects(m_resource, rects.data(), rects.size()));
2400c2518
<     CheckError(SDL_SetWindowMouseRect(m_resource, rect));
---
>     CheckError(SDL_SetWindowMouseRect(m_resource, &rect));
2556c2674
<     CheckError(SDL_ShowWindowSystemMenu(m_resource, p));
---
>     CheckError(SDL_ShowWindowSystemMenu(m_resource, p.x, p.y));
2558a2677,2717
>   /**
>    * Provide a callback that decides if a window region has special properties.
>    *
>    * Normally windows are dragged and resized by decorations provided by the
>    * system window manager (a title bar, borders, etc), but for some apps, it
>    * makes sense to drag them from somewhere else inside the window itself; for
>    * example, one might have a borderless window that wants to be draggable from
>    * any part, or simulate its own title bar, etc.
>    *
>    * This function lets the app provide a callback that designates pieces of a
>    * given window as special. This callback is run during event processing if we
>    * need to tell the OS to treat a region of the window specially; the use of
>    * this callback is known as "hit testing."
>    *
>    * Mouse input may not be delivered to your application if it is within a
>    * special area; the OS will often apply that input to moving the window or
>    * resizing the window and not deliver it to the application.
>    *
>    * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>    * disabled by default.
>    *
>    * Platforms that don't support this functionality will return false
>    * unconditionally, even if you're attempting to disable hit-testing.
>    *
>    * Your callback may fire at any time, and its firing does not indicate any
>    * specific behavior (for example, on Windows, this certainly might fire when
>    * the OS is deciding whether to drag your window, but it fires for lots of
>    * other reasons, too, some unrelated to anything you probably care about _and
>    * when the mouse isn't actually at the location it is testing_). Since this
>    * can fire at any time, you should try to keep your callback efficient,
>    * devoid of allocations, etc.
>    *
>    * @param callback the function to call when doing a hit-test.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @cat listener-callback
>    */
2561c2720,2726
<     static_assert(false, "Not implemented");
---
>     using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>     void* cbHandle = Wrapper::Wrap(m_resource, std::move(callback));
>     SetHitTest(
>       [](SDL_Window* win, const SDL_Point* area, void* data) {
>         return Wrapper::Call(data, WindowRef{win}, Point(*area));
>       },
>       cbHandle);
2669c2834
<   static WindowRef FromID(WindowID id) { return SDL_GetWindowFromID(id); }
---
>   static WindowRef FromID(WindowID id) { return {SDL_GetWindowFromID(id)}; }
2683c2848
<   static WindowRef GetGrabbed() { return SDL_GetGrabbedWindow(); }
---
>   static WindowRef GetGrabbed() { return {SDL_GetGrabbedWindow()}; }
2731c2896
<   GLContext GL_CreateContext() { return SDL_GL_CreateContext(m_resource); }
---
>   GLContext GL_CreateContext();
2747,2750c2912
<   void GL_MakeCurrent(GLContext context)
<   {
<     CheckError(SDL_GL_MakeCurrent(m_resource, context));
<   }
---
>   void GL_MakeCurrent(GLContext context);
2969c3131
<     CheckError(SDL_GL_MakeCurrent(m_resource, window));
---
>     CheckError(SDL_GL_MakeCurrent(window, m_resource));
3506c3668
<   return CheckError(SDL_GetDisplayProperties(displayID));
---
>   return {CheckError(SDL_GetDisplayProperties(displayID))};
3695,3696c3857
<  * @param w the width in pixels of the desired display mode.
<  * @param h the height in pixels of the desired display mode.
---
>  * @param size the width and height in pixels of the desired display mode.
3718,3719c3879,3886
<   return CheckError(SDL_GetClosestFullscreenDisplayMode(
<     displayID, size, refresh_rate, include_high_density_modes));
---
>   DisplayMode mode;
>   CheckError(SDL_GetClosestFullscreenDisplayMode(displayID,
>                                                  size.x,
>                                                  size.y,
>                                                  refresh_rate,
>                                                  include_high_density_modes,
>                                                  &mode));
>   return mode;
4057,4058c4224
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4076c4242
<   return Window(SDL_CreateWindow(title, size, flags));
---
>   return Window(SDL_CreateWindow(title, size.x, size.y, flags));
4137,4138c4303
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4158c4323,4324
<   return Window(SDL_CreatePopupWindow(parent, offset, size, flags));
---
>   return Window(
>     SDL_CreatePopupWindow(parent, offset.x, offset.y, size.x, size.y, flags));
4515c4681
<   return SDL_GetWindowFromID(id);
---
>   return {SDL_GetWindowFromID(id)};
4533c4699
<   return CheckError(SDL_GetWindowParent(window));
---
>   return {CheckError(SDL_GetWindowParent(window))};
4658c4824
<   return CheckError(SDL_GetWindowProperties(window));
---
>   return {CheckError(SDL_GetWindowProperties(window))};
5461c5627
< inline Surface GetWindowSurface(WindowParam window)
---
> inline SurfaceRef GetWindowSurface(WindowParam window)
5463c5629
<   return SDL_GetWindowSurface(window);
---
>   return {SDL_GetWindowSurface(window)};
5698c5864
< inline WindowRef GetGrabbedWindow() { return SDL_GetGrabbedWindow(); }
---
> inline WindowRef GetGrabbedWindow() { return {SDL_GetGrabbedWindow()}; }
