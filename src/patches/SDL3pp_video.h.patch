12c12
<  * @defgroup CategoryVideo Category Video
---
>  * @defgroup CategoryVideo Display and Window Management
83c83
< using GLContextRaw = SDL_GLContext*;
---
> using GLContextRaw = SDL_GLContext;
196,197d195
<    * @param count a pointer filled in with the number of displays returned, may
<    *              be nullptr.
199,200c197
<    * failure; call GetError() for more information. This should be freed with
<    * free() when it is no longer needed.
---
>    * failure; call GetError() for more information.
269,270c266
<    * @param displayID the instance ID of the display to query.
<    * @param rect the Rect structure filled in with the display bounds.
---
>    * @returns the Rect structure filled in with the display bounds.
294,295c290
<    * @param displayID the instance ID of the display to query.
<    * @param rect the Rect structure filled in with the display bounds.
---
>    * @returns the Rect structure filled in with the display bounds.
373,375d367
<    * @param displayID the instance ID of the display to query.
<    * @param count a pointer filled in with the number of display modes returned,
<    *              may be nullptr.
377,379c369
<    *          failure; call GetError() for more information. This is a
<    *          single allocation that should be freed with free() when it is
<    *          no longer needed.
---
>    *          failure; call GetError() for more information.
399,400c389
<    * @param w the width in pixels of the desired display mode.
<    * @param h the height in pixels of the desired display mode.
---
>    * @param size the width and height in pixels of the desired display mode.
405,406c394
<    * @param closest a pointer filled in with the closest display mode equal to
<    *                or larger than the desired mode.
---
>    * @returns the closest display mode equal to or larger than the desired mode.
670a659
>  * @sa HitTestCB
720,721c709,722
< ///@sa HitTest
< using HitTestCB = HitTest;
---
> /**
>  * Callback used for hit-testing.
>  *
>  * @param win the WindowRef where hit-testing was set on.
>  * @param area a Point const reference which should be hit-tested.
>  * @returns an SDL::HitTestResult value.
>  *
>  * @cat listener-callback
>  *
>  * @sa HitTest
>  * @sa Window.SetHitTest
>  */
> using HitTestCB =
>   std::function<HitTestResult(WindowRaw window, const Point& area)>;
728,729d728
<  * @sa Window.Window
<  *
730a730,731
>  *
>  * @sa Window.Window
838,839c839
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param size the width and height of the window.
854c854
<     : m_resource(SDL_CreateWindow(title, size, flags))
---
>     : m_resource(SDL_CreateWindow(title, size.x, size.y, flags))
912,917c912,914
<    * @param offset_x the x position of the popup window relative to the origin
<    *                 of the parent.
<    * @param offset_y the y position of the popup window relative to the origin
<    *                 of the parent window.
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param offset the x, y position of the popup window relative to the origin
>    *               of the parent.
>    * @param size the width and height of the window.
936c933,938
<     : m_resource(SDL_CreatePopupWindow(parent, offset, size, flags))
---
>     : m_resource(SDL_CreatePopupWindow(parent,
>                                        offset.x,
>                                        offset.y,
>                                        size.x,
>                                        size.y,
>                                        flags))
1234d1235
<    * @param size the size of the ICC profile.
1479c1480,1495
<   void SetRect(Rect rect) { static_assert(false, "Not implemented"); }
---
>   /**
>    * @brief Request the window's position and size to be set.
>    *
>    * @param rect the rect containing the new coordinates
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @sa WindowRef.SetPosition()
>    * @sa WindowRef.SetSize()
>    */
>   void SetRect(Rect rect)
>   {
>     SetPosition(rect.GetTopLeft());
>     SetSize(rect.GetSize());
>   }
1481c1497,1510
<   Rect GetRect() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position and client size of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use Window.GetSizeInPixels()
>    * or RendererRef.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @return Rect with the position and size
>    * @throws Error on failure.
>    */
>   Rect GetRect() const { return Rect{GetPosition(), GetSize()}; }
1507,1510c1536
<    * @param window the window to reposition.
<    * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<    *          `SDL_WINDOWPOS_UNDEFINED`.
<    * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>    * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
1523c1549,1570
<   Point GetPosition() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * @returns the position on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetPosition()
>    * @sa SetPosition(int *, int *)
>    */
>   Point GetPosition() const
>   {
>     Point p;
>     GetPosition(&p.x, &p.y);
>     return p;
>   }
1569,1571c1616
<    * @param window the window to change.
<    * @param w the width of the window, must be > 0.
<    * @param h the height of the window, must be > 0.
---
>    * @param p the width and height of the window, must be > 0.
1584c1629,1653
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use GetSizeInPixels()
>    * or Renderer.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @returns a point with width and height on success or std::nullopt on
>    * failure; call GetError() for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    * @sa GetSizeInPixels()
>    * @sa SetSize()
>    * @sa GetSize(int *, int *)
>    */
>   Point GetSize() const
>   {
>     Point p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
1617,1619d1685
<    * @param window the window to query.
<    * @param rect a pointer filled in with the client area that is safe for
<    *             interactive content.
1719c1785,1803
<   Point GetSizeInPixels() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area, in pixels.
>    *
>    * @returns the size on success or std::nullopt on failure; call GetError()
>    * for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetSize()
>    * @sa GetSizeInPixels(int*, int*)
>    */
>   Point GetSizeInPixels() const
>   {
>     Point p;
>     GetSizeInPixels(&p.x, &p.y);
>     return p;
>   }
1742,1744c1826
<    * @param window the window to change.
<    * @param min_w the minimum width of the window, or 0 for no limit.
<    * @param min_h the minimum height of the window, or 0 for no limit.
---
>    * @param p the minimum width and heigh of the window, or 0 for no limit.
1777,1779c1859
<    * @param window the window to change.
<    * @param max_w the maximum width of the window, or 0 for no limit.
<    * @param max_h the maximum height of the window, or 0 for no limit.
---
>    * @param p the maximum width and height of the window, or 0 for no limit.
2127,2129c2207,2208
<    * @param window the window to query.
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Window.SetSurfaceVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval. See
>    *          Window.SetSurfaceVSync() for the meaning of the value.
2174d2252
<    * @param numrects the number of rectangles.
2424,2428c2502,2503
<    * @param window the window for which the menu will be displayed.
<    * @param x the x coordinate of the menu, relative to the origin (top-left) of
<    *          the client area.
<    * @param y the y coordinate of the menu, relative to the origin (top-left) of
<    *          the client area.
---
>    * @param p the x, y coordinates of the menu, relative to the origin
>    *          (top-left) of the client area.
2436a2512,2552
>   /**
>    * Provide a callback that decides if a window region has special properties.
>    *
>    * Normally windows are dragged and resized by decorations provided by the
>    * system window manager (a title bar, borders, etc), but for some apps, it
>    * makes sense to drag them from somewhere else inside the window itself; for
>    * example, one might have a borderless window that wants to be draggable from
>    * any part, or simulate its own title bar, etc.
>    *
>    * This function lets the app provide a callback that designates pieces of a
>    * given window as special. This callback is run during event processing if we
>    * need to tell the OS to treat a region of the window specially; the use of
>    * this callback is known as "hit testing."
>    *
>    * Mouse input may not be delivered to your application if it is within a
>    * special area; the OS will often apply that input to moving the window or
>    * resizing the window and not deliver it to the application.
>    *
>    * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>    * disabled by default.
>    *
>    * Platforms that don't support this functionality will return false
>    * unconditionally, even if you're attempting to disable hit-testing.
>    *
>    * Your callback may fire at any time, and its firing does not indicate any
>    * specific behavior (for example, on Windows, this certainly might fire when
>    * the OS is deciding whether to drag your window, but it fires for lots of
>    * other reasons, too, some unrelated to anything you probably care about _and
>    * when the mouse isn't actually at the location it is testing_). Since this
>    * can fire at any time, you should try to keep your callback efficient,
>    * devoid of allocations, etc.
>    *
>    * @param callback the function to call when doing a hit-test.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @cat listener-callback
>    */
2439c2555,2561
<     static_assert(false, "Not implemented");
---
>     using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>     void* cbHandle = Wrapper::Wrap(m_resource, std::move(callback));
>     SetHitTest(
>       [](SDL_Window* win, const SDL_Point* area, void* data) {
>         return Wrapper::Call(data, win, Point(*area));
>       },
>       cbHandle);
2736,2738c2858
<    *               mouse focus.
<    * @param x the x coordinate within the window.
<    * @param y the y coordinate within the window.
---
>    * @param p the x, y coordinates within the window.
2824a2945,2946
> #ifdef SDL3PP_DOC
> 
2906a3029,3030
> #endif // SDL3PP_DOC
> 
3006,3008d3129
<    * @returns true on success or false on failure; call GetError() for more
<    *          information.
<    *
3023d3143
<    * @param context the OpenGL context to associate with the window.
3485,3486d3604
<  * @param count a pointer filled in with the number of displays returned, may
<  *              be nullptr.
3488,3489c3606
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  *          call GetError() for more information.
3495c3612,3617
< inline OwnArray<DisplayID> GetDisplays() { return SDL_GetDisplays(); }
---
> inline OwnArray<DisplayID> GetDisplays()
> {
>   int count = 0;
>   auto data = reinterpret_cast<DisplayID*>(SDL_GetDisplays(&count));
>   return OwnArray<DisplayID>{data, size_t(count)};
> }
3546c3668
<   return CheckError(SDL_GetDisplayProperties(displayID));
---
>   return {CheckError(SDL_GetDisplayProperties(displayID))};
3593c3715
<  * @param rect the Rect structure filled in with the display bounds.
---
>  * @returns the Rect structure filled in with the display bounds.
3605c3727,3729
<   return CheckError(SDL_GetDisplayBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayBounds(displayID, &bounds);
>   return bounds;
3626c3750
<  * @param rect the Rect structure filled in with the display bounds.
---
>  * @returns the Rect structure filled in with the display bounds.
3638c3762,3764
<   return CheckError(SDL_GetDisplayUsableBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayUsableBounds(displayID, &bounds);
>   return bounds;
3740,3741d3865
<  * @param count a pointer filled in with the number of display modes returned,
<  *              may be nullptr.
3743,3745c3867
<  *          failure; call GetError() for more information. This is a
<  *          single allocation that should be freed with free() when it is
<  *          no longer needed.
---
>  *          failure; call GetError() for more information.
3755c3877,3879
<   return SDL_GetFullscreenDisplayModes(displayID);
---
>   int count = 0;
>   auto data = CheckError(SDL_GetFullscreenDisplayModes(displayID, &count));
>   return OwnArray<DisplayMode*>{data, size_t(count)};
3774,3775c3898
<  * @param w the width in pixels of the desired display mode.
<  * @param h the height in pixels of the desired display mode.
---
>  * @param size the width and height in pixels of the desired display mode.
3780c3903
<  * @param closest a pointer filled in with the closest display mode equal to
---
>  * @returns a pointer filled in with the closest display mode equal to
3797,3798c3920,3927
<   return CheckError(SDL_GetClosestFullscreenDisplayMode(
<     displayID, size, refresh_rate, include_high_density_modes));
---
>   DisplayMode mode;
>   CheckError(SDL_GetClosestFullscreenDisplayMode(displayID,
>                                                  size.x,
>                                                  size.y,
>                                                  refresh_rate,
>                                                  include_high_density_modes,
>                                                  &mode));
>   return mode;
3831c3960
<   return SDL_GetDesktopDisplayMode(displayID);
---
>   return *SDL_GetDesktopDisplayMode(displayID);
3860c3989
<   return SDL_GetCurrentDisplayMode(displayID);
---
>   return *SDL_GetCurrentDisplayMode(displayID);
3884c4013
<   return SDL_GetDisplayForPoint(point);
---
>   return SDL_GetDisplayForPoint(&point);
3909c4038
<   return SDL_GetDisplayForRect(rect);
---
>   return SDL_GetDisplayForRect(&rect);
4060c4189
<   return SDL_GetWindowFullscreenMode(window);
---
>   return *SDL_GetWindowFullscreenMode(window);
4072d4200
<  * @param size the size of the ICC profile.
4082c4210,4211
<   return CheckError(SDL_GetWindowICCProfile(window));
---
>   size_t size;
>   return OwnPtr<void>{CheckError(SDL_GetWindowICCProfile(window, &size))};
4114,4115d4242
<  * @param count a pointer filled in with the number of windows returned, may
<  *              be nullptr.
4117,4119c4244
<  *          call GetError() for more information. This is a single
<  *          allocation that should be freed with free() when it is no
<  *          longer needed.
---
>  *          call GetError() for more information.
4125c4250,4255
< inline OwnArray<WindowRef> GetWindows() { return SDL_GetWindows(); }
---
> inline OwnArray<WindowRef> GetWindows()
> {
>   int count = 0;
>   auto data = CheckError(SDL_GetWindows(&count));
>   return OwnArray<WindowRef>{reinterpret_cast<WindowRef*>(data), size_t(count)};
> }
4200,4201c4330
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4276,4281c4405,4407
<  * @param offset_x the x position of the popup window relative to the origin
<  *                 of the parent.
<  * @param offset_y the y position of the popup window relative to the origin
<  *                 of the parent window.
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param offset the x, y position of the popup window relative to the origin
>  *               of the parent.
>  * @param size the width and height of the window.
4660c4786
<   return SDL_GetWindowFromID(id);
---
>   return {SDL_GetWindowFromID(id)};
4683c4809
<   return CheckError(SDL_GetWindowParent(window));
---
>   return {CheckError(SDL_GetWindowParent(window))};
4813c4939
<   return CheckError(SDL_GetWindowProperties(window));
---
>   return {CheckError(SDL_GetWindowProperties(window))};
4953,4955c5079
<  * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<  *          `SDL_WINDOWPOS_UNDEFINED`.
<  * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>  * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
4968c5092
<   CheckError(SDL_SetWindowPosition(window, p));
---
>   CheckError(SDL_SetWindowPosition(window, p.x, p.y));
5030,5031c5154
<  * @param w the width of the window, must be > 0.
<  * @param h the height of the window, must be > 0.
---
>  * @param p the width and height of the window, must be > 0.
5044c5167
<   CheckError(SDL_SetWindowSize(window, p));
---
>   CheckError(SDL_SetWindowSize(window, p.x, p.y));
5093,5094d5215
<  * @param rect a pointer filled in with the client area that is safe for
<  *             interactive content.
5103c5224,5226
<   return CheckError(SDL_GetWindowSafeArea(window));
---
>   Rect rect;
>   CheckError(SDL_GetWindowSafeArea(window, &rect));
>   return rect;
5271,5272c5394
<  * @param min_w the minimum width of the window, or 0 for no limit.
<  * @param min_h the minimum height of the window, or 0 for no limit.
---
>  * @param p the minimum width and height of the window, or 0 for no limit.
5284c5406
<   CheckError(SDL_SetWindowMinimumSize(window, p));
---
>   CheckError(SDL_SetWindowMinimumSize(window, p.x, p.y));
5323,5324c5445
<  * @param max_w the maximum width of the window, or 0 for no limit.
<  * @param max_h the maximum height of the window, or 0 for no limit.
---
>  * @param p the maximum width and height of the window, or 0 for no limit.
5336c5457
<   CheckError(SDL_SetWindowMaximumSize(window, p));
---
>   CheckError(SDL_SetWindowMaximumSize(window, p.x, p.y));
5750c5871
<   return SDL_GetWindowSurface(window);
---
>   return Surface::Borrow(SDL_GetWindowSurface(window));
5790a5912
> /// Constant to disable vsync
5792a5915
> /// Constant to enable adaptive vsync
5799,5800d5921
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Window.SetSurfaceVSync() for the meaning of the value.
5811c5932,5934
<   return CheckError(SDL_GetWindowSurfaceVSync(window));
---
>   int vsync;
>   CheckError(SDL_GetWindowSurfaceVSync(window, &vsync));
>   return vsync;
5860d5982
<  * @param numrects the number of rectangles.
5873c5995
<   CheckError(SDL_UpdateWindowSurfaceRects(window, rects));
---
>   CheckError(SDL_UpdateWindowSurfaceRects(window, rects.data(), rects.size()));
6028c6150
< inline WindowRef GetGrabbedWindow() { return SDL_GetGrabbedWindow(); }
---
> inline WindowRef GetGrabbedWindow() { return {SDL_GetGrabbedWindow()}; }
6053c6175
<   CheckError(SDL_SetWindowMouseRect(window, rect));
---
>   CheckError(SDL_SetWindowMouseRect(window, &rect));
6241,6243c6363
<  * @param x the x coordinate of the menu, relative to the origin (top-left) of
<  *          the client area.
<  * @param y the y coordinate of the menu, relative to the origin (top-left) of
---
>  * @param p the coordinates of the menu, relative to the origin (top-left) of
6253c6373
<   CheckError(SDL_ShowWindowSystemMenu(window, p));
---
>   CheckError(SDL_ShowWindowSystemMenu(window, p.x, p.y));
6309c6429,6469
< inline void Window::SetHitTest(HitTest callback, void* callback_data)
---
> /**
>  * Provide a callback that decides if a window region has special properties.
>  *
>  * Normally windows are dragged and resized by decorations provided by the
>  * system window manager (a title bar, borders, etc), but for some apps, it
>  * makes sense to drag them from somewhere else inside the window itself; for
>  * example, one might have a borderless window that wants to be draggable from
>  * any part, or simulate its own title bar, etc.
>  *
>  * This function lets the app provide a callback that designates pieces of a
>  * given window as special. This callback is run during event processing if we
>  * need to tell the OS to treat a region of the window specially; the use of
>  * this callback is known as "hit testing."
>  *
>  * Mouse input may not be delivered to your application if it is within a
>  * special area; the OS will often apply that input to moving the window or
>  * resizing the window and not deliver it to the application.
>  *
>  * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>  * disabled by default.
>  *
>  * Platforms that don't support this functionality will return false
>  * unconditionally, even if you're attempting to disable hit-testing.
>  *
>  * Your callback may fire at any time, and its firing does not indicate any
>  * specific behavior (for example, on Windows, this certainly might fire when
>  * the OS is deciding whether to drag your window, but it fires for lots of
>  * other reasons, too, some unrelated to anything you probably care about _and
>  * when the mouse isn't actually at the location it is testing_). Since this
>  * can fire at any time, you should try to keep your callback efficient,
>  * devoid of allocations, etc.
>  *
>  * @param window the window to set hit-testing on.
>  * @param callback the function to call when doing a hit-test.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
> inline void SetWindowHitTest(WindowParam window, HitTestCB callback)
6311c6471,6478
<   SDL::SetWindowHitTest(m_resource, callback, callback_data);
---
>   using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>   void* cbHandle = Wrapper::Wrap(window, std::move(callback));
>   SetWindowHitTest(
>     window,
>     [](SDL_Window* win, const SDL_Point* area, void* data) {
>       return Wrapper::Call(data, win, Point(*area));
>     },
>     cbHandle);
6690c6857
<   CheckError(SDL_GL_MakeCurrent(window, context));
---
>   CheckError(SDL_GL_MakeCurrent(window, context.get()));
6695c6862
<   SDL::GL_MakeCurrent(m_resource, window);
---
>   SDL::GL_MakeCurrent(window, m_resource);
6710c6877
<   return CheckError(SDL_GL_GetCurrentWindow());
---
>   return {CheckError(SDL_GL_GetCurrentWindow())};
