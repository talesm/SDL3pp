12c12
<  * @defgroup CategoryVideo Category Video
---
>  * @defgroup CategoryVideo Display and Window Management
74c74
< using GLContextRaw = SDL_GLContext*;
---
> using GLContextRaw = SDL_GLContext;
207c207,212
<   static OwnArray<DisplayID> GetAll() { return SDL_GetDisplays(); }
---
>   static OwnArray<Display> GetAll()
>   {
>     int count = 0;
>     auto data = reinterpret_cast<Display*>(SDL_GetDisplays(&count));
>     return OwnArray<Display>{data, size_t(count)};
>   }
250c255
<     return CheckError(SDL_GetDisplayProperties(m_displayID));
---
>     return {CheckError(SDL_GetDisplayProperties(m_displayID))};
273d277
<    * @param displayID the instance ID of the display to query.
286c290,292
<     return CheckError(SDL_GetDisplayBounds(m_displayID));
---
>     Rect bounds;
>     SDL_GetDisplayBounds(m_displayID, &bounds);
>     return bounds;
301d306
<    * @param displayID the instance ID of the display to query.
314c319,321
<     return CheckError(SDL_GetDisplayUsableBounds(m_displayID));
---
>     Rect bounds;
>     CheckError(SDL_GetDisplayUsableBounds(m_displayID, &bounds));
>     return bounds;
392d398
<    * @param displayID the instance ID of the display to query.
408c414,416
<     return SDL_GetFullscreenDisplayModes(m_displayID);
---
>     int count = 0;
>     auto data = CheckError(SDL_GetFullscreenDisplayModes(m_displayID, &count));
>     return OwnArray<DisplayMode*>{data, size_t(count)};
421,422c429
<    * @param w the width in pixels of the desired display mode.
<    * @param h the height in pixels of the desired display mode.
---
>    * @param size the width and height in pixels of the desired display mode.
442,443c449,456
<     return CheckError(SDL_GetClosestFullscreenDisplayMode(
<       m_displayID, size, refresh_rate, include_high_density_modes));
---
>     DisplayMode mode;
>     CheckError(SDL_GetClosestFullscreenDisplayMode(m_displayID,
>                                                    size.x,
>                                                    size.y,
>                                                    refresh_rate,
>                                                    include_high_density_modes,
>                                                    &mode));
>     return mode;
508c521
<     return SDL_GetDisplayForPoint(point);
---
>     return SDL_GetDisplayForPoint(&point);
528c541
<     return SDL_GetDisplayForRect(rect);
---
>     return SDL_GetDisplayForRect(&rect);
708a722
>  * @sa HitTestCB
758,759c772,785
< ///@sa HitTest
< using HitTestCB = HitTest;
---
> /**
>  * Callback used for hit-testing.
>  *
>  * @param win the WindowRef where hit-testing was set on.
>  * @param area a Point const reference which should be hit-tested.
>  * @returns an SDL::HitTestResult value.
>  *
>  * @cat listener-callback
>  *
>  * @sa HitTest
>  * @sa Window.SetHitTest
>  */
> using HitTestCB =
>   std::function<HitTestResult(WindowRaw window, const Point& area)>;
766,767d791
<  * @sa Window.Window
<  *
768a793,794
>  *
>  * @sa Window.Window
876,877c902
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param size the width and height of the window.
892c917
<     : m_resource(SDL_CreateWindow(title, size, flags))
---
>     : m_resource(SDL_CreateWindow(title, size.x, size.y, flags))
950,955c975,977
<    * @param offset_x the x position of the popup window relative to the origin
<    *                 of the parent.
<    * @param offset_y the y position of the popup window relative to the origin
<    *                 of the parent window.
<    * @param w the width of the window.
<    * @param h the height of the window.
---
>    * @param offset the x, y position of the popup window relative to the origin
>    *               of the parent.
>    * @param size the width and height of the window.
974c996,1001
<     : m_resource(SDL_CreatePopupWindow(parent, offset, size, flags))
---
>     : m_resource(SDL_CreatePopupWindow(parent,
>                                        offset.x,
>                                        offset.y,
>                                        size.x,
>                                        size.y,
>                                        flags))
1279d1305
<    * @param size the size of the ICC profile.
1289c1315,1316
<     return CheckError(SDL_GetWindowICCProfile(m_resource));
---
>     size_t size;
>     return OwnPtr<void>{CheckError(SDL_GetWindowICCProfile(m_resource, &size))};
1337d1363
< 
1459c1485
<     return CheckError(SDL_GetWindowProperties(m_resource));
---
>     return {CheckError(SDL_GetWindowProperties(m_resource))};
1539c1565,1580
<   void SetRect(Rect rect) { static_assert(false, "Not implemented"); }
---
>   /**
>    * @brief Request the window's position and size to be set.
>    *
>    * @param rect the rect containing the new coordinates
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @sa WindowRef.SetPosition()
>    * @sa WindowRef.SetSize()
>    */
>   void SetRect(Rect rect)
>   {
>     SetPosition(rect.GetTopLeft());
>     SetSize(rect.GetSize());
>   }
1541c1582,1595
<   Rect GetRect() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position and client size of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use Window.GetSizeInPixels()
>    * or RendererRef.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @return Rect with the position and size
>    * @throws Error on failure.
>    */
>   Rect GetRect() const { return Rect{GetPosition(), GetSize()}; }
1568,1570c1622
<    * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<    *          `SDL_WINDOWPOS_UNDEFINED`.
<    * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>    * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
1583c1635
<     CheckError(SDL_SetWindowPosition(m_resource, p));
---
>     CheckError(SDL_SetWindowPosition(m_resource, p.x, p.y));
1586c1638,1659
<   Point GetPosition() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the position of a window.
>    *
>    * This is the current position of the window as last reported by the
>    * windowing system.
>    *
>    * @returns the position on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetPosition()
>    * @sa SetPosition(int *, int *)
>    */
>   Point GetPosition() const
>   {
>     Point p;
>     GetPosition(&p.x, &p.y);
>     return p;
>   }
1650c1723
<     CheckError(SDL_SetWindowSize(m_resource, p));
---
>     CheckError(SDL_SetWindowSize(m_resource, p.x, p.y));
1653c1726,1750
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area.
>    *
>    * The window pixel size may differ from its window coordinate size if the
>    * window is on a high pixel density display. Use GetSizeInPixels()
>    * or Renderer.GetOutputSize() to get the real client area size in pixels.
>    *
>    * @returns a point with width and height on success or std::nullopt on
>    * failure; call GetError() for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    * @sa GetSizeInPixels()
>    * @sa SetSize()
>    * @sa GetSize(int *, int *)
>    */
>   Point GetSize() const
>   {
>     Point p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
1690,1691d1786
<    * @param rect a pointer filled in with the client area that is safe for
<    *             interactive content.
1700c1795,1797
<     return CheckError(SDL_GetWindowSafeArea(m_resource));
---
>     Rect rect;
>     CheckError(SDL_GetWindowSafeArea(m_resource, &rect));
>     return rect;
1803c1900,1918
<   Point GetSizeInPixels() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size of a window's client area, in pixels.
>    *
>    * @returns the size on success or std::nullopt on failure; call GetError()
>    * for more information.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetSize()
>    * @sa GetSizeInPixels(int*, int*)
>    */
>   Point GetSizeInPixels() const
>   {
>     Point p;
>     GetSizeInPixels(&p.x, &p.y);
>     return p;
>   }
1843c1958
<     CheckError(SDL_SetWindowMinimumSize(m_resource, p));
---
>     CheckError(SDL_SetWindowMinimumSize(m_resource, p.x, p.y));
1884c1999
<     CheckError(SDL_SetWindowMaximumSize(m_resource, p));
---
>     CheckError(SDL_SetWindowMaximumSize(m_resource, p.x, p.y));
2209c2324,2327
<   Surface GetSurface() { return SDL_GetWindowSurface(m_resource); }
---
>   Surface GetSurface()
>   {
>     return Surface::Borrow(SDL_GetWindowSurface(m_resource));
>   }
2254c2372,2374
<     return CheckError(SDL_GetWindowSurfaceVSync(m_resource));
---
>     int vsync;
>     CheckError(SDL_GetWindowSurfaceVSync(m_resource, &vsync));
>     return vsync;
2303c2423,2424
<     CheckError(SDL_UpdateWindowSurfaceRects(m_resource, rects));
---
>     CheckError(
>       SDL_UpdateWindowSurfaceRects(m_resource, rects.data(), rects.size()));
2425c2546
<     CheckError(SDL_SetWindowMouseRect(m_resource, rect));
---
>     CheckError(SDL_SetWindowMouseRect(m_resource, &rect));
2581c2702
<     CheckError(SDL_ShowWindowSystemMenu(m_resource, p));
---
>     CheckError(SDL_ShowWindowSystemMenu(m_resource, p.x, p.y));
2583a2705,2745
>   /**
>    * Provide a callback that decides if a window region has special properties.
>    *
>    * Normally windows are dragged and resized by decorations provided by the
>    * system window manager (a title bar, borders, etc), but for some apps, it
>    * makes sense to drag them from somewhere else inside the window itself; for
>    * example, one might have a borderless window that wants to be draggable from
>    * any part, or simulate its own title bar, etc.
>    *
>    * This function lets the app provide a callback that designates pieces of a
>    * given window as special. This callback is run during event processing if we
>    * need to tell the OS to treat a region of the window specially; the use of
>    * this callback is known as "hit testing."
>    *
>    * Mouse input may not be delivered to your application if it is within a
>    * special area; the OS will often apply that input to moving the window or
>    * resizing the window and not deliver it to the application.
>    *
>    * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>    * disabled by default.
>    *
>    * Platforms that don't support this functionality will return false
>    * unconditionally, even if you're attempting to disable hit-testing.
>    *
>    * Your callback may fire at any time, and its firing does not indicate any
>    * specific behavior (for example, on Windows, this certainly might fire when
>    * the OS is deciding whether to drag your window, but it fires for lots of
>    * other reasons, too, some unrelated to anything you probably care about _and
>    * when the mouse isn't actually at the location it is testing_). Since this
>    * can fire at any time, you should try to keep your callback efficient,
>    * devoid of allocations, etc.
>    *
>    * @param callback the function to call when doing a hit-test.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @cat listener-callback
>    */
2586c2748,2754
<     static_assert(false, "Not implemented");
---
>     using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>     void* cbHandle = Wrapper::Wrap(m_resource, std::move(callback));
>     SetHitTest(
>       [](SDL_Window* win, const SDL_Point* area, void* data) {
>         return Wrapper::Call(data, win, Point(*area));
>       },
>       cbHandle);
2741a2910,2911
> #ifdef SDL3PP_DOC
> 
2823a2994,2995
> #endif // SDL3PP_DOC
> 
2946c3118
<     CheckError(SDL_GL_MakeCurrent(m_resource, window));
---
>     CheckError(SDL_GL_MakeCurrent(window, m_resource));
3410c3582,3587
< inline OwnArray<DisplayID> GetDisplays() { return SDL_GetDisplays(); }
---
> inline OwnArray<DisplayID> GetDisplays()
> {
>   int count = 0;
>   auto data = reinterpret_cast<DisplayID*>(SDL_GetDisplays(&count));
>   return OwnArray<DisplayID>{data, size_t(count)};
> }
3457c3634
<   return CheckError(SDL_GetDisplayProperties(displayID));
---
>   return {CheckError(SDL_GetDisplayProperties(displayID))};
3506c3683,3685
<   return CheckError(SDL_GetDisplayBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayBounds(displayID, &bounds);
>   return bounds;
3534c3713,3715
<   return CheckError(SDL_GetDisplayUsableBounds(displayID));
---
>   Rect bounds;
>   SDL_GetDisplayUsableBounds(displayID, &bounds);
>   return bounds;
3631c3812,3814
<   return SDL_GetFullscreenDisplayModes(displayID);
---
>   int count = 0;
>   auto data = CheckError(SDL_GetFullscreenDisplayModes(displayID, &count));
>   return OwnArray<DisplayMode*>{data, size_t(count)};
3645,3646c3828
<  * @param w the width in pixels of the desired display mode.
<  * @param h the height in pixels of the desired display mode.
---
>  * @param size the width and height in pixels of the desired display mode.
3668,3669c3850,3857
<   return CheckError(SDL_GetClosestFullscreenDisplayMode(
<     displayID, size, refresh_rate, include_high_density_modes));
---
>   DisplayMode mode;
>   CheckError(SDL_GetClosestFullscreenDisplayMode(displayID,
>                                                  size.x,
>                                                  size.y,
>                                                  refresh_rate,
>                                                  include_high_density_modes,
>                                                  &mode));
>   return mode;
3736c3924
<   return SDL_GetDisplayForPoint(point);
---
>   return SDL_GetDisplayForPoint(&point);
3756c3944
<   return SDL_GetDisplayForRect(rect);
---
>   return SDL_GetDisplayForRect(&rect);
3889d4076
<  * @param size the size of the ICC profile.
3899c4086,4087
<   return CheckError(SDL_GetWindowICCProfile(window));
---
>   size_t size;
>   return OwnPtr<void>{CheckError(SDL_GetWindowICCProfile(window, &size))};
3921,3922d4108
<  * @param count a pointer filled in with the number of windows returned, may
<  *              be nullptr.
3924,3926c4110
<  *          call GetError() for more information. This is a single
<  *          allocation that should be freed with free() when it is no
<  *          longer needed.
---
>  *          call GetError() for more information.
3932c4116,4121
< inline OwnArray<WindowRef> GetWindows() { return SDL_GetWindows(); }
---
> inline OwnArray<WindowRef> GetWindows()
> {
>   int count = 0;
>   auto data = CheckError(SDL_GetWindows(&count));
>   return OwnArray<WindowRef>{reinterpret_cast<WindowRef*>(data), size_t(count)};
> }
4007,4008c4196
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4026c4214
<   return Window(SDL_CreateWindow(title, size, flags));
---
>   return Window(SDL_CreateWindow(title, size.x, size.y, flags));
4087,4088c4275
<  * @param w the width of the window.
<  * @param h the height of the window.
---
>  * @param size the width and height of the window.
4108c4295,4296
<   return Window(SDL_CreatePopupWindow(parent, offset, size, flags));
---
>   return Window(
>     SDL_CreatePopupWindow(parent, offset.x, offset.y, size.x, size.y, flags));
4465c4653
<   return SDL_GetWindowFromID(id);
---
>   return {SDL_GetWindowFromID(id)};
4468c4656,4659
< inline WindowRef Window::FromID(WindowID id) { return SDL_GetWindowFromID(id); }
---
> inline WindowRef Window::FromID(WindowID id)
> {
>   return {SDL_GetWindowFromID(id)};
> }
4485c4676
<   return CheckError(SDL_GetWindowParent(window));
---
>   return {CheckError(SDL_GetWindowParent(window))};
4490c4681
<   return CheckError(SDL_GetWindowParent(m_resource));
---
>   return GetWindowParent(m_resource);
4615c4806
<   return CheckError(SDL_GetWindowProperties(window));
---
>   return {CheckError(SDL_GetWindowProperties(window))};
4730,4732c4921
<  * @param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
<  *          `SDL_WINDOWPOS_UNDEFINED`.
<  * @param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
---
>  * @param p the coordinates of the window, or `SDL_WINDOWPOS_CENTERED` or
4745c4934
<   CheckError(SDL_SetWindowPosition(window, p));
---
>   CheckError(SDL_SetWindowPosition(window, p.x, p.y));
4797,4798c4986
<  * @param w the width of the window, must be > 0.
<  * @param h the height of the window, must be > 0.
---
>  * @param p the width and height of the window, must be > 0.
4811c4999
<   CheckError(SDL_SetWindowSize(window, p));
---
>   CheckError(SDL_SetWindowSize(window, p.x, p.y));
4850,4851d5037
<  * @param rect a pointer filled in with the client area that is safe for
<  *             interactive content.
4860c5046,5048
<   return CheckError(SDL_GetWindowSafeArea(window));
---
>   Rect rect;
>   CheckError(SDL_GetWindowSafeArea(window, &rect));
>   return rect;
5000,5001c5188
<  * @param min_w the minimum width of the window, or 0 for no limit.
<  * @param min_h the minimum height of the window, or 0 for no limit.
---
>  * @param p the minimum width and height of the window, or 0 for no limit.
5013c5200
<   CheckError(SDL_SetWindowMinimumSize(window, p));
---
>   CheckError(SDL_SetWindowMinimumSize(window, p.x, p.y));
5042,5043c5229
<  * @param max_w the maximum width of the window, or 0 for no limit.
<  * @param max_h the maximum height of the window, or 0 for no limit.
---
>  * @param p the maximum width and height of the window, or 0 for no limit.
5055c5241
<   CheckError(SDL_SetWindowMaximumSize(window, p));
---
>   CheckError(SDL_SetWindowMaximumSize(window, p.x, p.y));
5420c5606
<   return SDL_GetWindowSurface(window);
---
>   return Surface::Borrow(SDL_GetWindowSurface(window));
5459,5460d5644
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Window.SetSurfaceVSync() for the meaning of the value.
5471c5655,5657
<   return CheckError(SDL_GetWindowSurfaceVSync(window));
---
>   int vsync;
>   CheckError(SDL_GetWindowSurfaceVSync(window, &vsync));
>   return vsync;
5526c5712
<   CheckError(SDL_UpdateWindowSurfaceRects(window, rects));
---
>   CheckError(SDL_UpdateWindowSurfaceRects(window, rects.data(), rects.size()));
5654c5840
< inline WindowRef GetGrabbedWindow() { return SDL_GetGrabbedWindow(); }
---
> inline WindowRef GetGrabbedWindow() { return {SDL_GetGrabbedWindow()}; }
5656c5842
< inline WindowRef Window::GetGrabbed() { return SDL_GetGrabbedWindow(); }
---
> inline WindowRef Window::GetGrabbed() { return GetGrabbedWindow(); }
5679c5865
<   CheckError(SDL_SetWindowMouseRect(window, rect));
---
>   CheckError(SDL_SetWindowMouseRect(window, &rect));
5832,5834c6018
<  * @param x the x coordinate of the menu, relative to the origin (top-left) of
<  *          the client area.
<  * @param y the y coordinate of the menu, relative to the origin (top-left) of
---
>  * @param p the coordinates of the menu, relative to the origin (top-left) of
5844c6028
<   CheckError(SDL_ShowWindowSystemMenu(window, p));
---
>   CheckError(SDL_ShowWindowSystemMenu(window, p.x, p.y));
5895a6080,6132
>  * Provide a callback that decides if a window region has special properties.
>  *
>  * Normally windows are dragged and resized by decorations provided by the
>  * system window manager (a title bar, borders, etc), but for some apps, it
>  * makes sense to drag them from somewhere else inside the window itself; for
>  * example, one might have a borderless window that wants to be draggable from
>  * any part, or simulate its own title bar, etc.
>  *
>  * This function lets the app provide a callback that designates pieces of a
>  * given window as special. This callback is run during event processing if we
>  * need to tell the OS to treat a region of the window specially; the use of
>  * this callback is known as "hit testing."
>  *
>  * Mouse input may not be delivered to your application if it is within a
>  * special area; the OS will often apply that input to moving the window or
>  * resizing the window and not deliver it to the application.
>  *
>  * Specifying nullptr for a callback disables hit-testing. Hit-testing is
>  * disabled by default.
>  *
>  * Platforms that don't support this functionality will return false
>  * unconditionally, even if you're attempting to disable hit-testing.
>  *
>  * Your callback may fire at any time, and its firing does not indicate any
>  * specific behavior (for example, on Windows, this certainly might fire when
>  * the OS is deciding whether to drag your window, but it fires for lots of
>  * other reasons, too, some unrelated to anything you probably care about _and
>  * when the mouse isn't actually at the location it is testing_). Since this
>  * can fire at any time, you should try to keep your callback efficient,
>  * devoid of allocations, etc.
>  *
>  * @param window the window to set hit-testing on.
>  * @param callback the function to call when doing a hit-test.
>  * @param callback_data an app-defined void pointer passed to **callback**.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
> void SetWindowHitTest(WindowParam window, HitTestCB callback)
> {
>   using Wrapper = KeyValueCallbackWrapper<WindowRaw, HitTestCB>;
>   void* cbHandle = Wrapper::Wrap(window, std::move(callback));
>   SetWindowHitTest(
>     window,
>     [](SDL_Window* win, const SDL_Point* area, void* data) {
>       return Wrapper::Call(data, win, Point(*area));
>     },
>     cbHandle);
> }
> 
> /**
6259c6496
<   CheckError(SDL_GL_MakeCurrent(window, context));
---
>   CheckError(SDL_GL_MakeCurrent(window, context.get()));
6274c6511
<   return CheckError(SDL_GL_GetCurrentWindow());
---
>   return {CheckError(SDL_GL_GetCurrentWindow())};
