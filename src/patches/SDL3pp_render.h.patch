13c13
<  * @defgroup CategoryRender Category Render
---
>  * @defgroup CategoryRender 2D Accelerated Rendering
96a97,98
> #ifdef SDL3PP_DOC
> 
103a106,107
> #endif // SDL3PP_DOC
> 
202,203c206,240
<   /// Default ctor
<   Renderer(WindowParam window) {}
---
>   /**
>    * Create a 2D rendering context for a window.
>    *
>    * If you want a specific renderer, you can specify its name here. A list of
>    * available renderers can be obtained by calling GetRenderDriver()
>    * multiple times, with indices from 0 to GetNumRenderDrivers()-1. If you
>    * don't need a specific renderer, specify nullptr and SDL will attempt to
>    * choose the best option for you, based on what is available on the user's
>    * system.
>    *
>    * If `name` is a comma-separated list, SDL will try each name, in the order
>    * listed, until one succeeds or all of them fail.
>    *
>    * By default the rendering size matches the window size in pixels, but you
>    * can call Renderer.SetLogicalPresentation() to change the content size and
>    * scaling options.
>    *
>    * @param window the window where rendering is displayed.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.Renderer
>    * @sa Renderer.Renderer
>    * @sa Renderer.Destroy
>    * @sa GetNumRenderDrivers
>    * @sa GetRenderDriver
>    * @sa Renderer.GetName
>    */
>   Renderer(WindowParam window)
>     : m_resource(CheckError(SDL_CreateRenderer(window, nullptr)))
>   {
>   }
225,226c262
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
240c276
<     : m_resource(SDL_CreateRenderer(window, name))
---
>     : m_resource(CheckError(SDL_CreateRenderer(window, name)))
282,283c318
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
296c331
<     : m_resource(SDL_CreateRendererWithProperties(props))
---
>     : m_resource(CheckError(SDL_CreateRendererWithProperties(props)))
310,311c345
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
320c354
<     : m_resource(SDL_CreateSoftwareRenderer(surface))
---
>     : m_resource(CheckError(SDL_CreateSoftwareRenderer(surface)))
389d422
<    * @sa Renderer.Renderer
393c426,440
<   Point GetOutputSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the output size in pixels of a rendering context.
>    *
>    * This returns the true output size in pixels, ignoring any render targets or
>    * logical size and presentation.
>    *
>    * @returns Point on success.
>    * @throws Error on failure.
>    */
>   Point GetOutputSize() const
>   {
>     Point p;
>     GetOutputSize(&p.x, &p.y);
>     return p;
>   }
415a463,478
>   /**
>    * Get the current output size in pixels of a rendering context.
>    *
>    * If a rendering target is active, this will return the size of the rendering
>    * target in pixels, otherwise if a logical size is set, it will return the
>    * logical size, otherwise it will return the value of GetOutputSize().
>    *
>    * @returns the size on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    */
418c481,483
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetCurrentOutputSize(&p.x, &p.y);
>     return p;
527c592,606
<   void ResetTarget() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set target texture back to window
>    *
>    * This is equivalent to SetTarget(nullptr)
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetTarget(nullptr)
>    * @sa GetTarget()
>    */
>   void ResetTarget() { SetTarget(nullptr); }
609,610c688
<    * @param w the width of the logical resolution.
<    * @param h the height of the logical resolution.
---
>    * @param size the width and height of the logical resolution.
624a703,718
>   /**
>    * Get device independent resolution and presentation mode for rendering.
>    *
>    * This function gets the width and height of the logical rendering output, or
>    * the output size in pixels if a logical resolution is not enabled.
>    *
>    * @param size a Point to be filled with the width and height.
>    * @param mode the presentation mode used.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetLogicalPresentation
>    */
627c721,722
<     static_assert(false, "Not implemented");
---
>     if (!size) return GetLogicalPresentation(nullptr, nullptr, mode);
>     return GetLogicalPresentation(&size->x, &size->y, mode);
687,690c782,783
<    * @param window_x the x coordinate in window coordinates.
<    * @param window_y the y coordinate in window coordinates.
<    * @param x a pointer filled with the x coordinate in render coordinates.
<    * @param y a pointer filled with the y coordinate in render coordinates.
---
>    * @param window_coord the x, y coordinate in window coordinates.
>    * @returns a FPoint containing ther render coordinates on success.
708,710c801,803
<    * - The logical presentation settings (Renderer.SetLogicalPresentation)
<    * - The scale (Renderer.SetScale)
<    * - The viewport (Renderer.SetViewport)
---
>    * - The logical presentation settings (RendererRef.SetLogicalPresentation)
>    * - The scale (RendererRef.SetScale)
>    * - The viewport (RendererRef.SetViewport)
712,717c805,806
<    * @param x the x coordinate in render coordinates.
<    * @param y the y coordinate in render coordinates.
<    * @param window_x a pointer filled with the x coordinate in window
<    *                 coordinates.
<    * @param window_y a pointer filled with the y coordinate in window
<    *                 coordinates.
---
>    * @param coord the x, y coordinate in render coordinates.
>    * @returns a FPoint filled with window coordinates on success.
764c853,868
<   void ResetViewport() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the drawing area for rendering to the entire target
>    *
>    * This is equivalent to `SetViewport(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetViewport()
>    * @sa SetViewport()
>    * @sa ViewportSet()
>    */
>   void ResetViewport() { SetViewport(std::nullopt); }
797c901
<    * @param rect an Rect structure filled in with the current drawing area.
---
>    * @returns an Rect with the current drawing area.
840,841c944
<    * @param rect a pointer filled in with the area that is safe for interactive
<    *             content.
---
>    * @returns the rect filled the area that is safe for interactive content.
850c953,968
<   void ResetClipRect() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the clip rectangle for rendering to the entire render target
>    *
>    * This is equivalent to `SetClipRect(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetClipRect()
>    * @sa SetClipRect()
>    * @sa ClipEnabled()
>    */
>   void ResetClipRect() { SetClipRect({}); }
866a985
>    * @sa Renderer.ResetClipRect()
877,878c996,997
<    * @param rect an Rect structure filled in with the current clipping area
<    *             or an empty rectangle if clipping is disabled.
---
>    * @returns a Rect structure filled in with the current clipping area or an
>    *          empty rectangle if clipping is disabled.
922,923c1041
<    * @param scaleX the horizontal scaling factor.
<    * @param scaleY the vertical scaling factor.
---
>    * @param scale the x, y scaling factors.
934c1052,1072
<   FPoint GetScale() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the drawing scale for the current target.
>    *
>    * Each render target has its own scale. This function gets the scale for the
>    * current render target.
>    *
>    * @returns the scaling factors on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetScale
>    */
>   FPoint GetScale() const
>   {
>     FPoint p;
>     GetScale(&p.x, &p.y);
>     return p;
>   }
960,965c1098
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target; usually
<    *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<    *          specify how the alpha channel is used.
---
>    * @param c the color value used to draw on the rendering target.
983,988c1116
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target. Use
<    *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<    *          used.
---
>    * @param c the RGBA values used to draw on the rendering target.
1000c1128,1147
<   Color GetDrawColor() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @param c a pointer filled in with the color channel values used to draw on
>    *          the rendering target. @b must @b not be nullptr.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   Color GetDrawColor() const
>   {
>     Color c;
>     GetDrawColor(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1024c1171,1189
<   FColor GetDrawColorFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @returns the color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   FColor GetDrawColorFloat() const
>   {
>     FColor c;
>     GetDrawColorFloat(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1073c1238
<    * @param scale a pointer filled in with the current color scale value.
---
>    * @returns a float representing the current color scale on success.
1103c1268
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode on success.
1135,1136c1300
<    * @param x the x coordinate of the point.
<    * @param y the y coordinate of the point.
---
>    * @param p the x, y coordinates of the point.
1150d1313
<    * @param renderer the renderer which should draw multiple points.
1152d1314
<    * @param count the number of points to draw.
1166,1170c1328,1329
<    * @param renderer the renderer which should draw a line.
<    * @param x1 the x coordinate of the start point.
<    * @param y1 the y coordinate of the start point.
<    * @param x2 the x coordinate of the end point.
<    * @param y2 the y coordinate of the end point.
---
>    * @param p1 the x,y coordinate of the start point.
>    * @param p2 the x,y coordinate of the end point.
1185d1343
<    * @param renderer the renderer which should draw multiple lines.
1187d1344
<    * @param count the number of points, drawing count-1 lines.
1201,1203c1358,1359
<    * @param renderer the renderer which should draw a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr to outline
<    * the entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt to
>    *             outline the entire rendering target.
1218d1373
<    * @param renderer the renderer which should draw multiple rectangles.
1220d1374
<    * @param count the number of rectangles.
1235,1237c1389,1390
<    * @param renderer the renderer which should fill a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr for the
<    * entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt for the
>    *             entire rendering target.
1252d1404
<    * @param renderer the renderer which should fill multiple rectangles.
1254d1405
<    * @param count the number of rectangles.
1269d1419
<    * @param renderer the renderer which should copy parts of a texture.
1292d1441
<    * @param renderer the renderer which should copy parts of a texture.
1324d1472
<    * @param renderer the renderer which should copy parts of a texture.
1358d1505
<    * @param renderer the renderer which should copy parts of a texture.
1390d1536
<    * @param renderer the renderer which should copy parts of a texture.
1425d1570
<    * @param renderer the rendering context.
1428d1572
<    * @param num_vertices number of vertices.
1431,1432c1575
<    * sequential order.
<    * @param num_indices number of indices.
---
>    *                sequential order.
1497d1639
<    * @param renderer the rendering context.
1615,1617c1757
<    * @param renderer the renderer to toggle.
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Renderer.SetVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval on success.
1653,1654c1793,1794
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1667,1674d1806
<   template<class... ARGS>
<   void RenderDebugTextFormat(FPoint p, std::string_view fmt, ARGS... args)
<   {
<     static_assert(false, "Not implemented");
<   }
< 
<   auto RenderDebugTextFormat();
< 
1678,1680c1810,1813
<    * This function will render a printf()-style format string to a renderer.
<    * Note that this is a convenience function for debugging, with severe
<    * limitations, and is not intended to be used for production apps and games.
---
>    * This function will render a std::format()-style format string to a
>    * renderer. Note that this is a convenience function for debugging, with
>    * severe limitations, and is not intended to be used for production apps and
>    * games.
1685,1686c1818,1819
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1688,1689c1821,1822
<    * @param ... additional parameters matching % tokens in the `fmt` string, if
<    *            any.
---
>    * @param args additional parameters matching {} tokens in the `fmt` string,
>    *             if any.
1699,1702c1832,1836
<   void RenderDebugTextFormat(float x,
<                              float y,
<                              SDL_PRINTF_FORMAT_STRING const char* fmt,
<                              ...);
---
>   template<class... ARGS>
>   void RenderDebugTextFormat(FPoint p, std::string_view fmt, ARGS... args)
>   {
>     RenderDebugText(p, std::vformat(fmt, std::make_format_args(args...)));
>   }
1938,1951d2071
< inline auto Renderer::RenderDebugTextFormat()
<   : m_resource(SDL::RenderDebugTextFormat())
< {
< }
< 
< inline void Renderer::RenderDebugTextFormat(
<   float x,
<   float y,
<   SDL_PRINTF_FORMAT_STRING const char* fmt,
<   ...)
< {
<   SDL::RenderDebugTextFormat(m_resource, x, y, fmt, ...);
< }
< 
2020,2023c2140,2141
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @param size the width and height of the texture in pixels.
>    * @throws Error on failure.
2039c2157,2158
<     : m_resource(SDL_CreateTexture(renderer, format, access, size))
---
>     : m_resource(
>         CheckError(SDL_CreateTexture(renderer, format, access, size.x, size.y)))
2058,2059c2177
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2066d2183
<    * @sa Texture.Texture
2070c2187
<     : m_resource(SDL_CreateTextureFromSurface(renderer, surface))
---
>     : m_resource(CheckError(SDL_CreateTextureFromSurface(renderer, surface)))
2170,2171c2287
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2185c2301
<     : m_resource(SDL_CreateTextureWithProperties(renderer, props))
---
>     : m_resource(CheckError(SDL_CreateTextureWithProperties(renderer, props)))
2210,2212d2325
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2254,2256d2366
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2269c2379
<   Texture(RendererParam renderer, IOStreamParam src, bool closeio);
---
>   Texture(RendererParam renderer, IOStreamParam src, bool closeio = false);
2426c2536,2562
<   void SetMod(Color c) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   void SetMod(Color c)
>   {
>     SetColorMod(c.r, c.g, c.b);
>     SetAlphaMod(c.a);
>   }
2428c2564,2590
<   void SetModFloat(FColor c) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   void SetModFloat(FColor c)
>   {
>     SetColorMod(c.r, c.g, c.b);
>     SetAlphaMod(c.a);
>   }
2430c2592,2611
<   Color GetMod() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
>   Color GetMod() const
>   {
>     Color c;
>     GetColorMod(&c.r, &c.g, &c.b);
>     c.a = GetAlphaMod();
>     return c;
>   }
2432c2613,2632
<   FColor GetModFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
>   FColor GetModFloat() const
>   {
>     FColor c;
>     GetColorModFloat(&c.r, &c.g, &c.b);
>     c.a = GetAlphaModFloat();
>     return c;
>   }
2624c2824
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current SDL_BlendMode on success.
2656c2856
<    * @param scaleMode a pointer filled in with the current scale mode.
---
>    * @returns the current scale mode on success.
2848c3048,3051
<   int GetWidth() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the width in pixels.
>    */
>   int GetWidth() const { return m_resource->w; }
2850c3053,3056
<   int GetHeight() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the height in pixels.
>    */
>   int GetHeight() const { return m_resource->h; }
2852c3058,3061
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   Point GetSize() const { return Point(GetWidth(), GetHeight()); }
2869c3078,3086
<   FPoint GetSizeFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   FPoint GetSizeFloat() const
>   {
>     FPoint p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
2871c3088,3091
<   PixelFormat GetFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixel format.
>    */
>   PixelFormat GetFormat() const { return m_resource->format; }
2929,2930c3149
<  * @param window a pointer filled with the window, or nullptr on error.
<  * @param renderer a pointer filled with the renderer, or nullptr on error.
---
>  * @returns a pair with window and renderer.
2945c3164,3168
<   return CheckError(SDL_CreateWindowAndRenderer(title, size, window_flags));
---
>   SDL_Window* window = nullptr;
>   SDL_Renderer* renderer = nullptr;
>   CheckError(SDL_CreateWindowAndRenderer(
>     title, size.x, size.y, window_flags, &window, &renderer));
>   return {Window{window}, Renderer(renderer)};
3173c3396
<   return CheckError(SDL_GetRenderer(m_resource));
---
>   return {CheckError(SDL_GetRenderer(m_resource))};
3189c3412
<   return CheckError(SDL_GetRenderWindow(renderer));
---
>   return {CheckError(SDL_GetRenderWindow(renderer))};
3307c3530
<   return CheckError(SDL_GetRendererProperties(renderer));
---
>   return {CheckError(SDL_GetRendererProperties(renderer))};
3410c3633
<   return Texture(SDL_CreateTexture(renderer, format, access, size));
---
>   return Texture(renderer, format, access, size);
3793c4016
<   return CheckError(SDL_GetTextureProperties(texture));
---
>   return {CheckError(SDL_GetTextureProperties(texture))};
3814c4037
<   return SDL_GetRendererFromTexture(texture);
---
>   return {SDL_GetRendererFromTexture(texture)};
4064c4287,4289
<   return CheckError(SDL_GetTextureAlphaMod(texture));
---
>   Uint8 alpha;
>   CheckError(SDL_GetTextureAlphaMod(texture, &alpha));
>   return alpha;
4089c4314,4316
<   return CheckError(SDL_GetTextureAlphaModFloat(texture));
---
>   float alpha;
>   CheckError(SDL_GetTextureAlphaModFloat(texture, &alpha));
>   return alpha;
4127c4354
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
4138c4365,4367
<   return CheckError(SDL_GetTextureBlendMode(texture));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetTextureBlendMode(texture, &blendMode));
>   return blendMode;
4177c4406
<  * @param scaleMode a pointer filled in with the current scale mode.
---
>  * @return the current scale mode.
4188c4417,4419
<   return CheckError(SDL_GetTextureScaleMode(texture));
---
>   ScaleMode scaleMode;
>   CheckError(SDL_GetTextureScaleMode(texture, &scaleMode));
>   return scaleMode;
4421c4652,4654
<   return CheckError(SDL_LockTextureToSurface(texture, rect));
---
>   SurfaceRaw surface = nullptr;
>   CheckError(SDL_LockTextureToSurface(texture, rect, &surface));
>   return Surface::Borrow(surface);
4424,4425c4657
< inline Surface Texture::LockToSurface(
<   OptionalRef<const SDL_Rect> rect = std::nullopt)
---
> inline Surface Texture::LockToSurface(OptionalRef<const SDL_Rect> rect)
4504c4736,4738
<   return SDL_GetRenderTarget(renderer);
---
>   TextureRaw texture = SDL_GetRenderTarget(renderer);
>   if (texture) return Texture::Borrow(texture);
>   return {};
4568c4802
<   CheckError(SDL_SetRenderLogicalPresentation(renderer, size, mode));
---
>   CheckError(SDL_SetRenderLogicalPresentation(renderer, size.x, size.y, mode));
4638c4872,4874
<   return CheckError(SDL_GetRenderLogicalPresentationRect(renderer));
---
>   FRect rect;
>   CheckError(SDL_GetRenderLogicalPresentationRect(renderer, &rect));
>   return rect;
4673c4909,4912
<   return CheckError(SDL_RenderCoordinatesFromWindow(renderer, window_coord));
---
>   FPoint p;
>   CheckError(SDL_RenderCoordinatesFromWindow(
>     renderer, window_coord.x, window_coord.y, &p.x, &p.y));
>   return p;
4712c4951,4954
<   return CheckError(SDL_RenderCoordinatesToWindow(renderer, coord));
---
>   FPoint p;
>   CheckError(
>     SDL_RenderCoordinatesToWindow(renderer, coord.x, coord.y, &p.x, &p.y));
>   return p;
4818c5060,5062
<   return CheckError(SDL_GetRenderViewport(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderViewport(renderer, &rect));
>   return rect;
4877c5121,5123
<   return CheckError(SDL_GetRenderSafeArea(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderSafeArea(renderer, &rect));
>   return rect;
4934c5180,5182
<   return CheckError(SDL_GetRenderClipRect(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderClipRect(renderer, &rect));
>   return rect;
4996c5244
<   CheckError(SDL_SetRenderScale(renderer, scale));
---
>   CheckError(SDL_SetRenderScale(renderer, scale.x, scale.y));
5055c5303
<   CheckError(SDL_SetRenderDrawColor(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColor(renderer, c.r, c.g, c.b, c.a));
5087c5335
<   CheckError(SDL_SetRenderDrawColorFloat(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColorFloat(renderer, c.r, c.g, c.b, c.a));
5214c5462,5464
<   return CheckError(SDL_GetRenderColorScale(renderer));
---
>   float scale;
>   CheckError(SDL_GetRenderColorScale(renderer, &scale));
>   return scale;
5262c5512,5514
<   return CheckError(SDL_GetRenderDrawBlendMode(renderer));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetRenderDrawBlendMode(renderer, &blendMode));
>   return blendMode;
5310c5562
<   CheckError(SDL_RenderPoint(renderer, p));
---
>   CheckError(SDL_RenderPoint(renderer, p.x, p.y));
5335c5587
<   CheckError(SDL_RenderPoints(renderer, points));
---
>   CheckError(SDL_RenderPoints(renderer, points.data(), points.size()));
5363c5615
<   CheckError(SDL_RenderLine(renderer, p1, p2));
---
>   CheckError(SDL_RenderLine(renderer, p1.x, p1.y, p2.x, p2.y));
5388c5640
<   CheckError(SDL_RenderLines(renderer, points));
---
>   CheckError(SDL_RenderLines(renderer, points.data(), points.size()));
5437c5689
<   CheckError(SDL_RenderRects(renderer, rects));
---
>   CheckError(SDL_RenderRects(renderer, rects.data(), rects.size()));
5489c5741
<   CheckError(SDL_RenderFillRects(renderer, rects));
---
>   CheckError(SDL_RenderFillRects(renderer, rects.data(), rects.size()));
5764c6016,6021
<   CheckError(SDL_RenderGeometry(renderer, texture, vertices, indices));
---
>   CheckError(SDL_RenderGeometry(renderer,
>                                 texture,
>                                 vertices.data(),
>                                 vertices.size(),
>                                 indices.data(),
>                                 indices.size()));
5881c6138
<   return CheckError(SDL_RenderReadPixels(renderer, rect));
---
>   return Surface{CheckError(SDL_RenderReadPixels(renderer, rect))};
5884c6141
< inline Surface Renderer::ReadPixels(OptionalRef<const RectRaw> rect = {}) const
---
> inline Surface Renderer::ReadPixels(OptionalRef<const RectRaw> rect) const
6181c6438,6440
<   return CheckError(SDL_GetRenderVSync(renderer));
---
>   int vsync;
>   CheckError(SDL_GetRenderVSync(renderer, &vsync));
>   return vsync;
6240c6499
<   CheckError(SDL_RenderDebugText(renderer, p, str));
---
>   CheckError(SDL_RenderDebugText(renderer, p.x, p.y, str));
6272a6532
> template<class... ARGS>
6274,6277c6534,6536
<                                   float x,
<                                   float y,
<                                   SDL_PRINTF_FORMAT_STRING const char* fmt,
<                                   ...)
---
>                                   FPoint p,
>                                   std::string_view fmt,
>                                   ARGS... args)
6279c6538,6539
<   CheckError(SDL_RenderDebugTextFormat(renderer, x, y, fmt, ...));
---
>   RenderDebugText(
>     renderer, p, std::vformat(fmt, std::make_format_args(args...)));
