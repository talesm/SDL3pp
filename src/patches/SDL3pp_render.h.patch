13c13
<  * @defgroup CategoryRender Category Render
---
>  * @defgroup CategoryRender 2D Accelerated Rendering
120a121
> 
149a151,152
> #ifdef SDL3PP_DOC
> 
156a160,161
> #endif // SDL3PP_DOC
> 
255,256c260,294
<   /// Default ctor
<   Renderer(WindowParam window) {}
---
>   /**
>    * Create a 2D rendering context for a window.
>    *
>    * If you want a specific renderer, you can specify its name here. A list of
>    * available renderers can be obtained by calling GetRenderDriver()
>    * multiple times, with indices from 0 to GetNumRenderDrivers()-1. If you
>    * don't need a specific renderer, specify nullptr and SDL will attempt to
>    * choose the best option for you, based on what is available on the user's
>    * system.
>    *
>    * If `name` is a comma-separated list, SDL will try each name, in the order
>    * listed, until one succeeds or all of them fail.
>    *
>    * By default the rendering size matches the window size in pixels, but you
>    * can call Renderer.SetLogicalPresentation() to change the content size and
>    * scaling options.
>    *
>    * @param window the window where rendering is displayed.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.Renderer
>    * @sa Renderer.Renderer
>    * @sa Renderer.Destroy
>    * @sa GetNumRenderDrivers
>    * @sa GetRenderDriver
>    * @sa Renderer.GetName
>    */
>   Renderer(WindowParam window)
>     : m_resource(CheckError(SDL_CreateRenderer(window, nullptr)))
>   {
>   }
278,279c316
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
293c330
<     : m_resource(SDL_CreateRenderer(window, name))
---
>     : m_resource(CheckError(SDL_CreateRenderer(window, name)))
335,336c372
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
349c385
<     : m_resource(SDL_CreateRendererWithProperties(props))
---
>     : m_resource(CheckError(SDL_CreateRendererWithProperties(props)))
363,364c399
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
373c408
<     : m_resource(SDL_CreateSoftwareRenderer(surface))
---
>     : m_resource(CheckError(SDL_CreateSoftwareRenderer(surface)))
448d482
<    * @sa Renderer.Renderer
452c486,500
<   Point GetOutputSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the output size in pixels of a rendering context.
>    *
>    * This returns the true output size in pixels, ignoring any render targets or
>    * logical size and presentation.
>    *
>    * @returns Point on success.
>    * @throws Error on failure.
>    */
>   Point GetOutputSize() const
>   {
>     Point p;
>     GetOutputSize(&p.x, &p.y);
>     return p;
>   }
474a523,538
>   /**
>    * Get the current output size in pixels of a rendering context.
>    *
>    * If a rendering target is active, this will return the size of the rendering
>    * target in pixels, otherwise if a logical size is set, it will return the
>    * logical size, otherwise it will return the value of GetOutputSize().
>    *
>    * @returns the size on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    */
477c541,543
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetCurrentOutputSize(&p.x, &p.y);
>     return p;
586c652,666
<   void ResetTarget() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set target texture back to window
>    *
>    * This is equivalent to SetTarget(nullptr)
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetTarget(nullptr)
>    * @sa GetTarget()
>    */
>   void ResetTarget() { SetTarget(nullptr); }
668,669c748
<    * @param w the width of the logical resolution.
<    * @param h the height of the logical resolution.
---
>    * @param size the width and height of the logical resolution.
683a763,778
>   /**
>    * Get device independent resolution and presentation mode for rendering.
>    *
>    * This function gets the width and height of the logical rendering output, or
>    * the output size in pixels if a logical resolution is not enabled.
>    *
>    * @param size a Point to be filled with the width and height.
>    * @param mode the presentation mode used.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetLogicalPresentation
>    */
686c781,782
<     static_assert(false, "Not implemented");
---
>     if (!size) return GetLogicalPresentation(nullptr, nullptr, mode);
>     return GetLogicalPresentation(&size->x, &size->y, mode);
724,725c820
<    * @param rect a pointer filled in with the final presentation rectangle, may
<    *             be nullptr.
---
>    * @returns the final presentation rectangle.
746,749c841,842
<    * @param window_x the x coordinate in window coordinates.
<    * @param window_y the y coordinate in window coordinates.
<    * @param x a pointer filled with the x coordinate in render coordinates.
<    * @param y a pointer filled with the y coordinate in render coordinates.
---
>    * @param window_coord the x, y coordinate in window coordinates.
>    * @returns a FPoint containing ther render coordinates on success.
767,769c860,862
<    * - The logical presentation settings (Renderer.SetLogicalPresentation)
<    * - The scale (Renderer.SetScale)
<    * - The viewport (Renderer.SetViewport)
---
>    * - The logical presentation settings (RendererRef.SetLogicalPresentation)
>    * - The scale (RendererRef.SetScale)
>    * - The viewport (RendererRef.SetViewport)
771,776c864,865
<    * @param x the x coordinate in render coordinates.
<    * @param y the y coordinate in render coordinates.
<    * @param window_x a pointer filled with the x coordinate in window
<    *                 coordinates.
<    * @param window_y a pointer filled with the y coordinate in window
<    *                 coordinates.
---
>    * @param coord the x, y coordinate in render coordinates.
>    * @returns a FPoint filled with window coordinates on success.
823c912,927
<   void ResetViewport() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the drawing area for rendering to the entire target
>    *
>    * This is equivalent to `SetViewport(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetViewport()
>    * @sa SetViewport()
>    * @sa ViewportSet()
>    */
>   void ResetViewport() { SetViewport(std::nullopt); }
856c960
<    * @param rect an Rect structure filled in with the current drawing area.
---
>    * @returns an Rect with the current drawing area.
899,900c1003
<    * @param rect a pointer filled in with the area that is safe for interactive
<    *             content.
---
>    * @returns the rect filled the area that is safe for interactive content.
909c1012,1027
<   void ResetClipRect() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the clip rectangle for rendering to the entire render target
>    *
>    * This is equivalent to `SetClipRect(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetClipRect()
>    * @sa SetClipRect()
>    * @sa ClipEnabled()
>    */
>   void ResetClipRect() { SetClipRect({}); }
925a1044
>    * @sa Renderer.ResetClipRect()
936,937c1055,1056
<    * @param rect an Rect structure filled in with the current clipping area
<    *             or an empty rectangle if clipping is disabled.
---
>    * @returns a Rect structure filled in with the current clipping area or an
>    *          empty rectangle if clipping is disabled.
981,982c1100
<    * @param scaleX the horizontal scaling factor.
<    * @param scaleY the vertical scaling factor.
---
>    * @param scale the x, y scaling factors.
993c1111,1131
<   FPoint GetScale() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the drawing scale for the current target.
>    *
>    * Each render target has its own scale. This function gets the scale for the
>    * current render target.
>    *
>    * @returns the scaling factors on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetScale
>    */
>   FPoint GetScale() const
>   {
>     FPoint p;
>     GetScale(&p.x, &p.y);
>     return p;
>   }
1019,1024c1157
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target; usually
<    *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<    *          specify how the alpha channel is used.
---
>    * @param c the color value used to draw on the rendering target.
1042,1047c1175
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target. Use
<    *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<    *          used.
---
>    * @param c the RGBA values used to draw on the rendering target.
1059c1187,1205
<   Color GetDrawColor() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @returns the color channel values used to draw on the rendering target.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   Color GetDrawColor() const
>   {
>     Color c;
>     GetDrawColor(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1083c1229,1247
<   FColor GetDrawColorFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @returns the color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   FColor GetDrawColorFloat() const
>   {
>     FColor c;
>     GetDrawColorFloat(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1132c1296
<    * @param scale a pointer filled in with the current color scale value.
---
>    * @returns a float representing the current color scale on success.
1162c1326
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode on success.
1194,1195c1358
<    * @param x the x coordinate of the point.
<    * @param y the y coordinate of the point.
---
>    * @param p the x, y coordinates of the point.
1209d1371
<    * @param renderer the renderer which should draw multiple points.
1211d1372
<    * @param count the number of points to draw.
1225,1229c1386,1387
<    * @param renderer the renderer which should draw a line.
<    * @param x1 the x coordinate of the start point.
<    * @param y1 the y coordinate of the start point.
<    * @param x2 the x coordinate of the end point.
<    * @param y2 the y coordinate of the end point.
---
>    * @param p1 the x,y coordinate of the start point.
>    * @param p2 the x,y coordinate of the end point.
1244d1401
<    * @param renderer the renderer which should draw multiple lines.
1246d1402
<    * @param count the number of points, drawing count-1 lines.
1260,1262c1416,1417
<    * @param renderer the renderer which should draw a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr to outline
<    * the entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt to
>    *             outline the entire rendering target.
1277d1431
<    * @param renderer the renderer which should draw multiple rectangles.
1279d1432
<    * @param count the number of rectangles.
1294,1296c1447,1448
<    * @param renderer the renderer which should fill a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr for the
<    * entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt for the
>    *             entire rendering target.
1311d1462
<    * @param renderer the renderer which should fill multiple rectangles.
1313d1463
<    * @param count the number of rectangles.
1328d1477
<    * @param renderer the renderer which should copy parts of a texture.
1351d1499
<    * @param renderer the renderer which should copy parts of a texture.
1377c1525
<                             FlipMode flip);
---
>                             FlipMode flip = FlipMode::SDL_FLIP_NONE);
1383d1530
<    * @param renderer the renderer which should copy parts of a texture.
1417d1563
<    * @param renderer the renderer which should copy parts of a texture.
1449d1594
<    * @param renderer the renderer which should copy parts of a texture.
1484d1628
<    * @param renderer the rendering context.
1487d1630
<    * @param num_vertices number of vertices.
1490,1491c1633
<    * sequential order.
<    * @param num_indices number of indices.
---
>    *                sequential order.
1502c1644
<                       std::span<const int> indices);
---
>                       std::span<const int> indices = {});
1556d1697
<    * @param renderer the rendering context.
1674,1676c1815
<    * @param renderer the renderer to toggle.
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Renderer.SetVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval on success.
1712,1713c1851,1852
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1729,1731c1868,1871
<    * This function will render a printf()-style format string to a renderer.
<    * Note that this is a convenience function for debugging, with severe
<    * limitations, and is not intended to be used for production apps and games.
---
>    * This function will render a std::format()-style format string to a
>    * renderer. Note that this is a convenience function for debugging, with
>    * severe limitations, and is not intended to be used for production apps and
>    * games.
1736,1737c1876,1877
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1739,1740c1879,1880
<    * @param ... additional parameters matching % tokens in the `fmt` string, if
<    *            any.
---
>    * @param args additional parameters matching {} tokens in the `fmt` string,
>    *             if any.
1762,1763c1902
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
---
>    * @param size the width and height of the texture in pixels.
2063,2066c2202,2203
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @param size the width and height of the texture in pixels.
>    * @throws Error on failure.
2082c2219,2220
<     : m_resource(SDL_CreateTexture(renderer, format, access, size))
---
>     : m_resource(
>         CheckError(SDL_CreateTexture(renderer, format, access, size.x, size.y)))
2101,2102c2239
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2109d2245
<    * @sa Texture.Texture
2113c2249
<     : m_resource(SDL_CreateTextureFromSurface(renderer, surface))
---
>     : m_resource(CheckError(SDL_CreateTextureFromSurface(renderer, surface)))
2213,2214c2349
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2228c2363
<     : m_resource(SDL_CreateTextureWithProperties(renderer, props))
---
>     : m_resource(CheckError(SDL_CreateTextureWithProperties(renderer, props)))
2253,2255d2387
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2297,2299d2428
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2312c2441
<   Texture(RendererParam renderer, IOStreamParam src, bool closeio);
---
>   Texture(RendererParam renderer, IOStreamParam src, bool closeio = false);
2499,2512c2628
<   /**
<    * Get the size of a texture, as floating point values.
<    *
<    * @param texture the texture to query.
<    * @param w a pointer filled in with the width of the texture in pixels. This
<    *          argument can be nullptr if you don't need this information.
<    * @param h a pointer filled in with the height of the texture in pixels. This
<    *          argument can be nullptr if you don't need this information.
<    * @throws Error on failure.
<    *
<    * @threadsafety This function should only be called on the main thread.
<    *
<    * @since This function is available since SDL 3.2.0.
<    */
---
>   /// Get the size of a texture.
2514a2631
>   /// Get the size of a texture, as floating point values.
2516a2634
>   /// Get the width in pixels.
2518a2637
>   /// Get the height in pixels.
2520a2640
>   /// Get the pixel format.
2664c2784
<    * @param alpha a pointer filled in with the current alpha value.
---
>    * @returns the current alpha value.
2680c2800
<    * @param alpha a pointer filled in with the current alpha value.
---
>    * @returns the current alpha value.
2692a2813,2834
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
2694a2837,2858
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
2696a2861,2873
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
2698a2876,2888
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
2721c2911
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current SDL_BlendMode on success.
2753c2943
<    * @param scaleMode a pointer filled in with the current scale mode.
---
>    * @returns the current scale mode on success.
2810,2814c3000,3003
<    * @param rect an Rect structure representing the area to update, or nullptr
<    *             to update the entire texture.
<    * @param pixels the raw pixel data in the format of the texture.
<    * @param pitch the number of bytes in a row of pixel data, including padding
<    *              between lines.
---
>    * @param surface the surface containing pixel data in the format of the
>    *                texture.
>    * @param rect an Rect structure representing the area to update, or
>    *             std::nullopt to update the entire texture.
2945,2946c3134,3135
<    * @param surface a pointer to an SDL surface of size **rect**. Don't assume
<    *                any specific pixel content.
---
>    * @returns a surface of size **rect**. Don't assume any specific pixel
>    *          content.
3030,3031c3219
<  * @param width the width of the window.
<  * @param height the height of the window.
---
>  * @param size the width and height of the window.
3034,3035c3222
<  * @param window a pointer filled with the window, or nullptr on error.
<  * @param renderer a pointer filled with the renderer, or nullptr on error.
---
>  * @returns a pair with window and renderer.
3050c3237,3241
<   return CheckError(SDL_CreateWindowAndRenderer(title, size, window_flags));
---
>   SDL_Window* window = nullptr;
>   SDL_Renderer* renderer = nullptr;
>   CheckError(SDL_CreateWindowAndRenderer(
>     title, size.x, size.y, window_flags, &window, &renderer));
>   return {Window{window}, Renderer(renderer)};
3268c3459
<   return CheckError(SDL_GetRenderer(m_resource));
---
>   return {CheckError(SDL_GetRenderer(m_resource))};
3284c3475
<   return CheckError(SDL_GetRenderWindow(renderer));
---
>   return {CheckError(SDL_GetRenderWindow(renderer))};
3402c3593
<   return CheckError(SDL_GetRendererProperties(renderer));
---
>   return {CheckError(SDL_GetRendererProperties(renderer))};
3478,3479c3669
<  * @param w the width of the texture in pixels.
<  * @param h the height of the texture in pixels.
---
>  * @param size the width and height of the texture in pixels.
3888c4078
<   return CheckError(SDL_GetTextureProperties(texture));
---
>   return {CheckError(SDL_GetTextureProperties(texture))};
3909c4099
<   return SDL_GetRendererFromTexture(texture);
---
>   return {SDL_GetRendererFromTexture(texture)};
3936,3949c4126
< /**
<  * Get the size of a texture, as floating point values.
<  *
<  * @param texture the texture to query.
<  * @param w a pointer filled in with the width of the texture in pixels. This
<  *          argument can be nullptr if you don't need this information.
<  * @param h a pointer filled in with the height of the texture in pixels. This
<  *          argument can be nullptr if you don't need this information.
<  * @throws Error on failure.
<  *
<  * @threadsafety This function should only be called on the main thread.
<  *
<  * @since This function is available since SDL 3.2.0.
<  */
---
> /// Get the size of a texture.
3952c4129
<   static_assert(false, "Not implemented");
---
>   return Point(texture->w, texture->h);
3964a4142
> /// Get the size of a texture, as floating point values.
3967c4145,4147
<   static_assert(false, "Not implemented");
---
>   FPoint p;
>   GetTextureSize(texture, &p.x, &p.y);
>   return p;
3975,3978c4155,4156
< inline int GetTextureWidth(TextureConstParam texture)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Get the width in pixels.
> inline int GetTextureWidth(TextureConstParam texture) { return texture->w; }
3985,3988c4163,4164
< inline int GetTextureHeight(TextureConstParam texture)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Get the height in pixels.
> inline int GetTextureHeight(TextureConstParam texture) { return texture->h; }
3994a4171
> /// Get the pixel format.
3997c4174
<   static_assert(false, "Not implemented");
---
>   return texture->format;
4210c4387
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
4223c4400,4402
<   return CheckError(SDL_GetTextureAlphaMod(texture));
---
>   Uint8 alpha;
>   CheckError(SDL_GetTextureAlphaMod(texture, &alpha));
>   return alpha;
4235c4414
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
4248c4427,4429
<   return CheckError(SDL_GetTextureAlphaModFloat(texture));
---
>   float alpha;
>   CheckError(SDL_GetTextureAlphaModFloat(texture, &alpha));
>   return alpha;
4255a4437,4459
> /**
>  * Set an additional color and alpha values multiplied into render copy
>  * operations.
>  *
>  * When this texture is rendered, during the copy operation each source color
>  * and alpha channels are modulated by the appropriate color value according
>  * to the following formula:
>  *
>  *      srcC = srcC * (color / 255)
>  *      srcA = srcA * (alpha / 255)
>  *
>  * Color and alpha modulation is not always supported by the renderer; it will
>  * return false if either modulation is not supported.
>  *
>  * @param texture the texture to update.
>  * @param c the color and alpha channel values multiplied into copy
>  *          operations.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
4258c4462,4463
<   static_assert(false, "Not implemented");
---
>   SetTextureColorMod(texture, c.r, c.g, c.b);
>   SetTextureAlphaMod(texture, c.a);
4262a4468,4490
> /**
>  * Set an additional color and alpha values multiplied into render copy
>  * operations.
>  *
>  * When this texture is rendered, during the copy operation each source color
>  * and alpha channels are modulated by the appropriate color value according
>  * to the following formula:
>  *
>  *      srcC = srcC * (color / 255)
>  *      srcA = srcA * (alpha / 255)
>  *
>  * Color and alpha modulation is not always supported by the renderer; it will
>  * return false if either modulation is not supported.
>  *
>  * @param texture the texture to update.
>  * @param c the color and alpha channel values multiplied into copy
>  *          operations.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
4265c4493,4494
<   static_assert(false, "Not implemented");
---
>   SetTextureColorModFloat(texture, c.r, c.g, c.b);
>   SetTextureAlphaModFloat(texture, c.a);
4272a4502,4515
> /**
>  * Get the additional color value multiplied into render copy operations.
>  *
>  * @param texture the texture to query.
>  * @returns the color channels (0-1) on success.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetAlphaMod()
>  * @sa SetColorMod()
>  */
4275c4518,4521
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextureColorMod(texture, &c.r, &c.g, &c.b);
>   c.a = GetTextureAlphaMod(texture);
>   return c;
4279a4526,4539
> /**
>  * Get the additional color value multiplied into render copy operations.
>  *
>  * @param texture the texture to query.
>  * @returns the color channels (0-1) on success.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetAlphaMod()
>  * @sa SetColorMod()
>  */
4282c4542,4545
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextureColorModFloat(texture, &c.r, &c.g, &c.b);
>   c.a = GetTextureAlphaModFloat(texture);
>   return c;
4320c4583
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
4331c4594,4596
<   return CheckError(SDL_GetTextureBlendMode(texture));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetTextureBlendMode(texture, &blendMode));
>   return blendMode;
4370c4635
<  * @param scaleMode a pointer filled in with the current scale mode.
---
>  * @return the current scale mode.
4381c4646,4648
<   return CheckError(SDL_GetTextureScaleMode(texture));
---
>   ScaleMode scaleMode;
>   CheckError(SDL_GetTextureScaleMode(texture, &scaleMode));
>   return scaleMode;
4443,4447c4710,4713
<  * @param rect an Rect structure representing the area to update, or nullptr
<  *             to update the entire texture.
<  * @param pixels the raw pixel data in the format of the texture.
<  * @param pitch the number of bytes in a row of pixel data, including padding
<  *              between lines.
---
>  * @param surface the surface containing pixel data in the format of the
>  *                texture.
>  * @param rect an Rect structure representing the area to update, or
>  *             std::nullopt to update the entire texture.
4463c4729
<   static_assert(false, "Not implemented");
---
>   UpdateTexture(texture, rect, surface->pixels, surface->pitch);
4643,4644c4909
<  * @param surface a pointer to an SDL surface of size **rect**. Don't assume
<  *                any specific pixel content.
---
>  * @returns a surface of size **rect**. Don't assume any specific pixel content.
4658c4923,4925
<   return CheckError(SDL_LockTextureToSurface(texture, rect));
---
>   SurfaceRaw surface = nullptr;
>   CheckError(SDL_LockTextureToSurface(texture, rect, &surface));
>   return Surface::Borrow(surface);
4740c5007,5009
<   return SDL_GetRenderTarget(renderer);
---
>   TextureRaw texture = SDL_GetRenderTarget(renderer);
>   if (texture) return Texture::Borrow(texture);
>   return {};
4787,4788c5056
<  * @param w the width of the logical resolution.
<  * @param h the height of the logical resolution.
---
>  * @param size the width and height of the logical resolution.
4804c5072
<   CheckError(SDL_SetRenderLogicalPresentation(renderer, size, mode));
---
>   CheckError(SDL_SetRenderLogicalPresentation(renderer, size.x, size.y, mode));
4862,4863c5130
<  * @param rect a pointer filled in with the final presentation rectangle, may
<  *             be nullptr.
---
>  * @returns with the final presentation rectangle.
4874c5141,5143
<   return CheckError(SDL_GetRenderLogicalPresentationRect(renderer));
---
>   FRect rect;
>   CheckError(SDL_GetRenderLogicalPresentationRect(renderer, &rect));
>   return rect;
4893,4896c5162,5163
<  * @param window_x the x coordinate in window coordinates.
<  * @param window_y the y coordinate in window coordinates.
<  * @param x a pointer filled with the x coordinate in render coordinates.
<  * @param y a pointer filled with the y coordinate in render coordinates.
---
>  * @param window_coord the x, y coordinate in window coordinates.
>  * @returns the x, y coordinate in render coordinates.
4909c5176,5179
<   return CheckError(SDL_RenderCoordinatesFromWindow(renderer, window_coord));
---
>   FPoint p;
>   CheckError(SDL_RenderCoordinatesFromWindow(
>     renderer, window_coord.x, window_coord.y, &p.x, &p.y));
>   return p;
4929,4934c5199,5200
<  * @param x the x coordinate in render coordinates.
<  * @param y the y coordinate in render coordinates.
<  * @param window_x a pointer filled with the x coordinate in window
<  *                 coordinates.
<  * @param window_y a pointer filled with the y coordinate in window
<  *                 coordinates.
---
>  * @param coord the x, y coordinates in render coordinates.
>  * @returns x, y in window coordinates.
4948c5214,5217
<   return CheckError(SDL_RenderCoordinatesToWindow(renderer, coord));
---
>   FPoint p;
>   CheckError(
>     SDL_RenderCoordinatesToWindow(renderer, coord.x, coord.y, &p.x, &p.y));
>   return p;
5042c5311
<  * @param rect an Rect structure filled in with the current drawing area.
---
>  * @returns an Rect structure filled in with the current drawing area.
5054c5323,5325
<   return CheckError(SDL_GetRenderViewport(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderViewport(renderer, &rect));
>   return rect;
5103,5104c5374
<  * @param rect a pointer filled in with the area that is safe for interactive
<  *             content.
---
>  * @returns the area that is safe for interactive content.
5113c5383,5385
<   return CheckError(SDL_GetRenderSafeArea(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderSafeArea(renderer, &rect));
>   return rect;
5157,5158c5429,5430
<  * @param rect an Rect structure filled in with the current clipping area
<  *             or an empty rectangle if clipping is disabled.
---
>  * @returns an Rect structure filled in with the current clipping area
>  *          or an empty rectangle if clipping is disabled.
5170c5442,5444
<   return CheckError(SDL_GetRenderClipRect(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderClipRect(renderer, &rect));
>   return rect;
5220,5221c5494
<  * @param scaleX the horizontal scaling factor.
<  * @param scaleY the vertical scaling factor.
---
>  * @param scale the horizontal and vertical scaling factors.
5232c5505
<   CheckError(SDL_SetRenderScale(renderer, scale));
---
>   CheckError(SDL_SetRenderScale(renderer, scale.x, scale.y));
5274,5279c5547
<  * @param r the red value used to draw on the rendering target.
<  * @param g the green value used to draw on the rendering target.
<  * @param b the blue value used to draw on the rendering target.
<  * @param a the alpha value used to draw on the rendering target; usually
<  *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<  *          specify how the alpha channel is used.
---
>  * @param c the color used to draw on the rendering target.
5291c5559
<   CheckError(SDL_SetRenderDrawColor(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColor(renderer, c.r, c.g, c.b, c.a));
5306,5311c5574
<  * @param r the red value used to draw on the rendering target.
<  * @param g the green value used to draw on the rendering target.
<  * @param b the blue value used to draw on the rendering target.
<  * @param a the alpha value used to draw on the rendering target. Use
<  *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<  *          used.
---
>  * @param c the color used to draw on the rendering target.
5323c5586
<   CheckError(SDL_SetRenderDrawColorFloat(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColorFloat(renderer, c.r, c.g, c.b, c.a));
5439c5702
<  * @param scale a pointer filled in with the current color scale value.
---
>  * @return the current color scale value.
5450c5713,5715
<   return CheckError(SDL_GetRenderColorScale(renderer));
---
>   float scale;
>   CheckError(SDL_GetRenderColorScale(renderer, &scale));
>   return scale;
5487c5752
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
5498c5763,5765
<   return CheckError(SDL_GetRenderDrawBlendMode(renderer));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetRenderDrawBlendMode(renderer, &blendMode));
>   return blendMode;
5534,5535c5801
<  * @param x the x coordinate of the point.
<  * @param y the y coordinate of the point.
---
>  * @param p the x, y coordinate of the point.
5546c5812
<   CheckError(SDL_RenderPoint(renderer, p));
---
>   CheckError(SDL_RenderPoint(renderer, p.x, p.y));
5559d5824
<  * @param count the number of points to draw.
5571c5836
<   CheckError(SDL_RenderPoints(renderer, points));
---
>   CheckError(SDL_RenderPoints(renderer, points.data(), points.size()));
5583,5586c5848,5849
<  * @param x1 the x coordinate of the start point.
<  * @param y1 the y coordinate of the start point.
<  * @param x2 the x coordinate of the end point.
<  * @param y2 the y coordinate of the end point.
---
>  * @param p1 the x,y coordinates of the start point.
>  * @param p2 the x,y coordinates of the end point.
5599c5862
<   CheckError(SDL_RenderLine(renderer, p1, p2));
---
>   CheckError(SDL_RenderLine(renderer, p1.x, p1.y, p2.x, p2.y));
5613d5875
<  * @param count the number of points, drawing count-1 lines.
5624c5886
<   CheckError(SDL_RenderLines(renderer, points));
---
>   CheckError(SDL_RenderLines(renderer, points.data(), points.size()));
5662d5923
<  * @param count the number of rectangles.
5673c5934
<   CheckError(SDL_RenderRects(renderer, rects));
---
>   CheckError(SDL_RenderRects(renderer, rects.data(), rects.size()));
5713d5973
<  * @param count the number of rectangles.
5725c5985
<   CheckError(SDL_RenderFillRects(renderer, rects));
---
>   CheckError(SDL_RenderFillRects(renderer, rects.data(), rects.size()));
5798c6058
<                                  FlipMode flip)
---
>                                  FlipMode flip = FlipMode::SDL_FLIP_NONE)
5982d6241
<  * @param num_vertices number of vertices.
5986d6244
<  * @param num_indices number of indices.
5998c6256
<                            std::span<const int> indices)
---
>                            std::span<const int> indices = {})
6000c6258,6263
<   CheckError(SDL_RenderGeometry(renderer, texture, vertices, indices));
---
>   CheckError(SDL_RenderGeometry(renderer,
>                                 texture,
>                                 vertices.data(),
>                                 vertices.size(),
>                                 indices.data(),
>                                 indices.size()));
6117c6380
<   return CheckError(SDL_RenderReadPixels(renderer, rect));
---
>   return Surface{CheckError(SDL_RenderReadPixels(renderer, rect))};
6388a6652
> /// Constant for disabling renderer vsync
6390a6655
> /// Constant for enabling asaptive renderer vsync
6397,6398c6662,6663
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Renderer.SetVSync() for the meaning of the value.
---
>  * @returns the current vertical refresh sync interval. See Renderer.SetVSync()
>  *          for the meaning of the value.
6409c6674,6676
<   return CheckError(SDL_GetRenderVSync(renderer));
---
>   int vsync;
>   CheckError(SDL_GetRenderVSync(renderer, &vsync));
>   return vsync;
6454,6455c6721
<  * @param x the x coordinate where the top-left corner of the text will draw.
<  * @param y the y coordinate where the top-left corner of the text will draw.
---
>  * @param p the x,y coordinates where the top-left corner of the text will draw.
6470c6736
<   CheckError(SDL_RenderDebugText(renderer, p, str));
---
>   CheckError(SDL_RenderDebugText(renderer, p.x, p.y, str));
6489,6490c6755
<  * @param x the x coordinate where the top-left corner of the text will draw.
<  * @param y the y coordinate where the top-left corner of the text will draw.
---
>  * @param p the x,y coordinate where the top-left corner of the text will draw.
6492c6757
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
---
>  * @param args additional parameters matching % tokens in the `fmt` string, if
6509c6774,6775
<   CheckError(SDL_RenderDebugTextFormat(renderer, p, fmt, args));
---
>   RenderDebugText(
>     renderer, p, std::vformat(fmt, std::make_format_args(args...)));
6517c6783
<   SDL::RenderDebugTextFormat(m_resource, p, fmt, args);
---
>   SDL::RenderDebugTextFormat(m_resource, p, fmt, args...);
