13c13
<  * @defgroup CategoryRender Category Render
---
>  * @defgroup CategoryRender 2D Accelerated Rendering
255,256c255,289
<   /// Default ctor
<   Renderer(WindowParam window) {}
---
>   /**
>    * Create a 2D rendering context for a window.
>    *
>    * If you want a specific renderer, you can specify its name here. A list of
>    * available renderers can be obtained by calling GetRenderDriver()
>    * multiple times, with indices from 0 to GetNumRenderDrivers()-1. If you
>    * don't need a specific renderer, specify nullptr and SDL will attempt to
>    * choose the best option for you, based on what is available on the user's
>    * system.
>    *
>    * If `name` is a comma-separated list, SDL will try each name, in the order
>    * listed, until one succeeds or all of them fail.
>    *
>    * By default the rendering size matches the window size in pixels, but you
>    * can call Renderer.SetLogicalPresentation() to change the content size and
>    * scaling options.
>    *
>    * @param window the window where rendering is displayed.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.Renderer
>    * @sa Renderer.Renderer
>    * @sa Renderer.Destroy
>    * @sa GetNumRenderDrivers
>    * @sa GetRenderDriver
>    * @sa Renderer.GetName
>    */
>   Renderer(WindowParam window)
>     : m_resource(CheckError(SDL_CreateRenderer(window, nullptr)))
>   {
>   }
278,279c311
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
293c325
<     : m_resource(SDL_CreateRenderer(window, name))
---
>     : m_resource(CheckError(SDL_CreateRenderer(window, name)))
335,336c367
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
349c380
<     : m_resource(SDL_CreateRendererWithProperties(props))
---
>     : m_resource(CheckError(SDL_CreateRendererWithProperties(props)))
363,364c394
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
373c403
<     : m_resource(SDL_CreateSoftwareRenderer(surface))
---
>     : m_resource(CheckError(SDL_CreateSoftwareRenderer(surface)))
448d477
<    * @sa Renderer.Renderer
567,569c596
<    * @param renderer the rendering context.
<    * @param w a pointer filled in with the width in pixels.
<    * @param h a pointer filled in with the height in pixels.
---
>    * @returns Point on success.
572,573d598
<    * @threadsafety This function should only be called on the main thread.
<    *
610,612c635
<    * @param renderer the rendering context.
<    * @param w a pointer filled in with the current width.
<    * @param h a pointer filled in with the current height.
---
>    * @returns the size on success.
630,631c653
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
---
>    * @param size the width and height of the texture in pixels.
811a834,847
>   /**
>    * Set target texture back to window
>    *
>    * This is equivalent to SetTarget(nullptr)
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetTarget(nullptr)
>    * @sa GetTarget()
>    */
869,870c905
<    * @param w the width of the logical resolution.
<    * @param h the height of the logical resolution.
---
>    * @param size the width and height of the logical resolution.
915,919c950
<    * Each render target has its own logical presentation state. This function
<    * gets the state for the current render target.
<    *
<    * @param w an int to be filled with the width.
<    * @param h an int to be filled with the height.
---
>    * @param size a Point to be filled with the width and height.
943,944c974
<    * @param rect a pointer filled in with the final presentation rectangle, may
<    *             be nullptr.
---
>    * @returns the final presentation rectangle.
965,968c995,996
<    * @param window_x the x coordinate in window coordinates.
<    * @param window_y the y coordinate in window coordinates.
<    * @param x a pointer filled with the x coordinate in render coordinates.
<    * @param y a pointer filled with the y coordinate in render coordinates.
---
>    * @param window_coord the x, y coordinate in window coordinates.
>    * @returns a FPoint containing ther render coordinates on success.
986,988c1014,1016
<    * - The logical presentation settings (Renderer.SetLogicalPresentation)
<    * - The scale (Renderer.SetScale)
<    * - The viewport (Renderer.SetViewport)
---
>    * - The logical presentation settings (RendererRef.SetLogicalPresentation)
>    * - The scale (RendererRef.SetScale)
>    * - The viewport (RendererRef.SetViewport)
990,995c1018,1019
<    * @param x the x coordinate in render coordinates.
<    * @param y the y coordinate in render coordinates.
<    * @param window_x a pointer filled with the x coordinate in window
<    *                 coordinates.
<    * @param window_y a pointer filled with the y coordinate in window
<    *                 coordinates.
---
>    * @param coord the x, y coordinate in render coordinates.
>    * @returns a FPoint filled with window coordinates on success.
1063c1087
<    * @sa Renderer.ViewportSet
---
>    * @sa Renderer.IsViewportSet
1066a1091,1105
>   /**
>    * Reset the drawing area for rendering to the entire target
>    *
>    * This is equivalent to `SetViewport(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetViewport()
>    * @sa SetViewport()
>    * @sa ViewportSet()
>    */
1075c1114
<    * @param rect an Rect structure filled in with the current drawing area.
---
>    * @returns an Rect with the current drawing area.
1082c1121
<    * @sa Renderer.ViewportSet
---
>    * @sa Renderer.IsViewportSet
1118,1119c1157
<    * @param rect a pointer filled in with the area that is safe for interactive
<    *             content.
---
>    * @returns the rect filled the area that is safe for interactive content.
1142a1181
>    * @sa Renderer.ResetClipRect()
1146a1186,1200
>   /**
>    * Reset the clip rectangle for rendering to the entire render target
>    *
>    * This is equivalent to `SetClipRect(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetClipRect()
>    * @sa SetClipRect()
>    * @sa ClipEnabled()
>    */
1155,1156c1209,1210
<    * @param rect an Rect structure filled in with the current clipping area
<    *             or an empty rectangle if clipping is disabled.
---
>    * @returns a Rect structure filled in with the current clipping area or an
>    *          empty rectangle if clipping is disabled.
1200,1201c1254
<    * @param scaleX the horizontal scaling factor.
<    * @param scaleY the vertical scaling factor.
---
>    * @param scale the x, y scaling factors.
1236,1238c1289
<    * @param renderer the rendering context.
<    * @param scaleX a pointer filled in with the horizontal scaling factor.
<    * @param scaleY a pointer filled in with the vertical scaling factor.
---
>    * @returns the scaling factors on success.
1255,1260c1306
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target; usually
<    *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<    *          specify how the alpha channel is used.
---
>    * @param c the color value used to draw on the rendering target.
1278,1283c1324
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target. Use
<    *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<    *          used.
---
>    * @param c the RGBA values used to draw on the rendering target.
1320,1328c1361
<    * @param renderer the rendering context.
<    * @param r a pointer filled in with the red value used to draw on the
<    *          rendering target.
<    * @param g a pointer filled in with the green value used to draw on the
<    *          rendering target.
<    * @param b a pointer filled in with the blue value used to draw on the
<    *          rendering target.
<    * @param a a pointer filled in with the alpha value used to draw on the
<    *          rendering target; usually `ALPHA_OPAQUE` (255).
---
>    * @returns the color channel values used to draw on the rendering target.
1335,1336c1368,1369
<    * @sa Renderer.GetDrawColorFloat
<    * @sa Renderer.SetDrawColor
---
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
1365,1373c1398
<    * @param renderer the rendering context.
<    * @param r a pointer filled in with the red value used to draw on the
<    *          rendering target.
<    * @param g a pointer filled in with the green value used to draw on the
<    *          rendering target.
<    * @param b a pointer filled in with the blue value used to draw on the
<    *          rendering target.
<    * @param a a pointer filled in with the alpha value used to draw on the
<    *          rendering target.
---
>    * @returns the color on success.
1380,1381c1405,1406
<    * @sa Renderer.SetDrawColorFloat
<    * @sa Renderer.GetDrawColor
---
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
1410c1435
<    * @param scale a pointer filled in with the current color scale value.
---
>    * @returns a float representing the current color scale on success.
1440c1465
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode on success.
1472,1473c1497
<    * @param x the x coordinate of the point.
<    * @param y the y coordinate of the point.
---
>    * @param p the x, y coordinates of the point.
1488d1511
<    * @param count the number of points to draw.
1502,1505c1525,1526
<    * @param x1 the x coordinate of the start point.
<    * @param y1 the y coordinate of the start point.
<    * @param x2 the x coordinate of the end point.
<    * @param y2 the y coordinate of the end point.
---
>    * @param p1 the x,y coordinate of the start point.
>    * @param p2 the x,y coordinate of the end point.
1521d1541
<    * @param count the number of points, drawing count-1 lines.
1535,1536c1555,1556
<    * @param rect a pointer to the destination rectangle, or nullptr to outline
<    * the entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt to
>    *             outline the entire rendering target.
1552d1571
<    * @param count the number of rectangles.
1567,1568c1586,1587
<    * @param rect a pointer to the destination rectangle, or nullptr for the
<    * entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt for the
>    *             entire rendering target.
1584d1602
<    * @param count the number of rectangles.
1646c1664
<                             FlipMode flip);
---
>                             FlipMode flip = FlipMode::SDL_FLIP_NONE);
1752d1769
<    * @param num_vertices number of vertices.
1755,1756c1772
<    * sequential order.
<    * @param num_indices number of indices.
---
>    *                sequential order.
1767c1783
<                       std::span<const int> indices);
---
>                       std::span<const int> indices = {});
2007,2008c2023
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Renderer.SetVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval on success.
2044,2045c2059,2060
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
2061,2063c2076,2079
<    * This function will render a printf()-style format string to a renderer.
<    * Note that this is a convenience function for debugging, with severe
<    * limitations, and is not intended to be used for production apps and games.
---
>    * This function will render a std::format()-style format string to a
>    * renderer. Note that this is a convenience function for debugging, with
>    * severe limitations, and is not intended to be used for production apps and
>    * games.
2068,2069c2084,2085
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
2071,2072c2087,2088
<    * @param ... additional parameters matching % tokens in the `fmt` string, if
<    *            any.
---
>    * @param args additional parameters matching {} tokens in the `fmt` string,
>    *             if any.
2162,2165c2178,2179
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @param size the width and height of the texture in pixels.
>    * @throws Error on failure.
2181c2195,2196
<     : m_resource(SDL_CreateTexture(renderer, format, access, size))
---
>     : m_resource(
>         CheckError(SDL_CreateTexture(renderer, format, access, size.x, size.y)))
2200,2201c2215
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2208d2221
<    * @sa Texture.Texture
2212c2225
<     : m_resource(SDL_CreateTextureFromSurface(renderer, surface))
---
>     : m_resource(CheckError(SDL_CreateTextureFromSurface(renderer, surface)))
2312,2313c2325
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2327c2339
<     : m_resource(SDL_CreateTextureWithProperties(renderer, props))
---
>     : m_resource(CheckError(SDL_CreateTextureWithProperties(renderer, props)))
2352,2354d2363
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2396,2398d2404
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2411c2417
<   Texture(RendererParam renderer, IOStreamParam src, bool closeio);
---
>   Texture(RendererParam renderer, IOStreamParam src, bool closeio = false);
2598,2611c2604
<   /**
<    * Get the size of a texture, as floating point values.
<    *
<    * @param texture the texture to query.
<    * @param w a pointer filled in with the width of the texture in pixels. This
<    *          argument can be nullptr if you don't need this information.
<    * @param h a pointer filled in with the height of the texture in pixels. This
<    *          argument can be nullptr if you don't need this information.
<    * @throws Error on failure.
<    *
<    * @threadsafety This function should only be called on the main thread.
<    *
<    * @since This function is available since SDL 3.2.0.
<    */
---
>   /// Get the size of a texture.
2613a2607
>   /// Get the size of a texture, as floating point values.
2615a2610
>   /// Get the width in pixels.
2617a2613
>   /// Get the height in pixels.
2619a2616
>   /// Get the pixel format.
2763c2760
<    * @param alpha a pointer filled in with the current alpha value.
---
>    * @returns the current alpha value.
2779c2776
<    * @param alpha a pointer filled in with the current alpha value.
---
>    * @returns the current alpha value.
2791a2789,2810
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
2793a2813,2834
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
2795a2837,2849
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
2797a2852,2864
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
2820c2887
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current SDL_BlendMode on success.
2852c2919
<    * @param scaleMode a pointer filled in with the current scale mode.
---
>    * @returns the current scale mode on success.
2909,2913c2976,2979
<    * @param rect an Rect structure representing the area to update, or nullptr
<    *             to update the entire texture.
<    * @param pixels the raw pixel data in the format of the texture.
<    * @param pitch the number of bytes in a row of pixel data, including padding
<    *              between lines.
---
>    * @param surface the surface containing pixel data in the format of the
>    *                texture.
>    * @param rect an Rect structure representing the area to update, or
>    *             std::nullopt to update the entire texture.
3044,3045c3110,3111
<    * @param surface a pointer to an SDL surface of size **rect**. Don't assume
<    *                any specific pixel content.
---
>    * @returns a surface of size **rect**. Don't assume any specific pixel
>    *          content.
3129,3130c3195
<  * @param width the width of the window.
<  * @param height the height of the window.
---
>  * @param size the width and height of the window.
3133,3134c3198
<  * @param window a pointer filled with the window, or nullptr on error.
<  * @param renderer a pointer filled with the renderer, or nullptr on error.
---
>  * @returns a pair with window and renderer.
3149c3213,3217
<   return CheckError(SDL_CreateWindowAndRenderer(title, size, window_flags));
---
>   SDL_Window* window = nullptr;
>   SDL_Renderer* renderer = nullptr;
>   CheckError(SDL_CreateWindowAndRenderer(
>     title, size.x, size.y, window_flags, &window, &renderer));
>   return {Window{window}, Renderer(renderer)};
3367c3435
<   return CheckError(SDL_GetRenderer(m_resource));
---
>   return {CheckError(SDL_GetRenderer(m_resource))};
3383c3451
<   return CheckError(SDL_GetRenderWindow(renderer));
---
>   return {CheckError(SDL_GetRenderWindow(renderer))};
3501c3569
<   return CheckError(SDL_GetRendererProperties(renderer));
---
>   return {CheckError(SDL_GetRendererProperties(renderer))};
3544,3545c3612
<  * @param w a pointer filled in with the width in pixels.
<  * @param h a pointer filled in with the height in pixels.
---
>  * @returns the size on success.
3556c3623,3625
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetRenderOutputSize(renderer, &p.x, &p.y);
>   return p;
3604,3605c3673
<  * @param w a pointer filled in with the current width.
<  * @param h a pointer filled in with the current height.
---
>  * @returns the size on success.
3616c3684,3686
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetCurrentRenderOutputSize(renderer, &p.x, &p.y);
>   return p;
3637,3638c3707
<  * @param w the width of the texture in pixels.
<  * @param h the height of the texture in pixels.
---
>  * @param size the width and height of the texture in pixels.
4047c4116
<   return CheckError(SDL_GetTextureProperties(texture));
---
>   return {CheckError(SDL_GetTextureProperties(texture))};
4068c4137
<   return SDL_GetRendererFromTexture(texture);
---
>   return {SDL_GetRendererFromTexture(texture)};
4095,4108c4164
< /**
<  * Get the size of a texture, as floating point values.
<  *
<  * @param texture the texture to query.
<  * @param w a pointer filled in with the width of the texture in pixels. This
<  *          argument can be nullptr if you don't need this information.
<  * @param h a pointer filled in with the height of the texture in pixels. This
<  *          argument can be nullptr if you don't need this information.
<  * @throws Error on failure.
<  *
<  * @threadsafety This function should only be called on the main thread.
<  *
<  * @since This function is available since SDL 3.2.0.
<  */
---
> /// Get the size of a texture.
4111c4167
<   static_assert(false, "Not implemented");
---
>   return Point(texture->w, texture->h);
4123a4180
> /// Get the size of a texture, as floating point values.
4126c4183,4185
<   static_assert(false, "Not implemented");
---
>   FPoint p;
>   GetTextureSize(texture, &p.x, &p.y);
>   return p;
4134,4137c4193,4194
< inline int GetTextureWidth(TextureConstParam texture)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Get the width in pixels.
> inline int GetTextureWidth(TextureConstParam texture) { return texture->w; }
4144,4147c4201,4202
< inline int GetTextureHeight(TextureConstParam texture)
< {
<   static_assert(false, "Not implemented");
< }
---
> /// Get the height in pixels.
> inline int GetTextureHeight(TextureConstParam texture) { return texture->h; }
4153a4209
> /// Get the pixel format.
4156c4212
<   static_assert(false, "Not implemented");
---
>   return texture->format;
4369c4425
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
4382c4438,4440
<   return CheckError(SDL_GetTextureAlphaMod(texture));
---
>   Uint8 alpha;
>   CheckError(SDL_GetTextureAlphaMod(texture, &alpha));
>   return alpha;
4394c4452
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
4407c4465,4467
<   return CheckError(SDL_GetTextureAlphaModFloat(texture));
---
>   float alpha;
>   CheckError(SDL_GetTextureAlphaModFloat(texture, &alpha));
>   return alpha;
4414a4475,4497
> /**
>  * Set an additional color and alpha values multiplied into render copy
>  * operations.
>  *
>  * When this texture is rendered, during the copy operation each source color
>  * and alpha channels are modulated by the appropriate color value according
>  * to the following formula:
>  *
>  *      srcC = srcC * (color / 255)
>  *      srcA = srcA * (alpha / 255)
>  *
>  * Color and alpha modulation is not always supported by the renderer; it will
>  * return false if either modulation is not supported.
>  *
>  * @param texture the texture to update.
>  * @param c the color and alpha channel values multiplied into copy
>  *          operations.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
4417c4500,4501
<   static_assert(false, "Not implemented");
---
>   SetTextureColorMod(texture, c.r, c.g, c.b);
>   SetTextureAlphaMod(texture, c.a);
4421a4506,4528
> /**
>  * Set an additional color and alpha values multiplied into render copy
>  * operations.
>  *
>  * When this texture is rendered, during the copy operation each source color
>  * and alpha channels are modulated by the appropriate color value according
>  * to the following formula:
>  *
>  *      srcC = srcC * (color / 255)
>  *      srcA = srcA * (alpha / 255)
>  *
>  * Color and alpha modulation is not always supported by the renderer; it will
>  * return false if either modulation is not supported.
>  *
>  * @param texture the texture to update.
>  * @param c the color and alpha channel values multiplied into copy
>  *          operations.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  */
4424c4531,4532
<   static_assert(false, "Not implemented");
---
>   SetTextureColorModFloat(texture, c.r, c.g, c.b);
>   SetTextureAlphaModFloat(texture, c.a);
4431a4540,4553
> /**
>  * Get the additional color value multiplied into render copy operations.
>  *
>  * @param texture the texture to query.
>  * @returns the color channels (0-1) on success.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetAlphaMod()
>  * @sa SetColorMod()
>  */
4434c4556,4559
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextureColorMod(texture, &c.r, &c.g, &c.b);
>   c.a = GetTextureAlphaMod(texture);
>   return c;
4438a4564,4577
> /**
>  * Get the additional color value multiplied into render copy operations.
>  *
>  * @param texture the texture to query.
>  * @returns the color channels (0-1) on success.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetAlphaMod()
>  * @sa SetColorMod()
>  */
4441c4580,4583
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextureColorModFloat(texture, &c.r, &c.g, &c.b);
>   c.a = GetTextureAlphaModFloat(texture);
>   return c;
4479c4621
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
4490c4632,4634
<   return CheckError(SDL_GetTextureBlendMode(texture));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetTextureBlendMode(texture, &blendMode));
>   return blendMode;
4529c4673
<  * @param scaleMode a pointer filled in with the current scale mode.
---
>  * @return the current scale mode.
4540c4684,4686
<   return CheckError(SDL_GetTextureScaleMode(texture));
---
>   ScaleMode scaleMode;
>   CheckError(SDL_GetTextureScaleMode(texture, &scaleMode));
>   return scaleMode;
4602,4606c4748,4751
<  * @param rect an Rect structure representing the area to update, or nullptr
<  *             to update the entire texture.
<  * @param pixels the raw pixel data in the format of the texture.
<  * @param pitch the number of bytes in a row of pixel data, including padding
<  *              between lines.
---
>  * @param surface the surface containing pixel data in the format of the
>  *                texture.
>  * @param rect an Rect structure representing the area to update, or
>  *             std::nullopt to update the entire texture.
4622c4767
<   static_assert(false, "Not implemented");
---
>   UpdateTexture(texture, rect, surface->pixels, surface->pitch);
4802,4803c4947
<  * @param surface a pointer to an SDL surface of size **rect**. Don't assume
<  *                any specific pixel content.
---
>  * @returns a surface of size **rect**. Don't assume any specific pixel content.
4817c4961,4963
<   return CheckError(SDL_LockTextureToSurface(texture, rect));
---
>   SurfaceRaw surface = nullptr;
>   CheckError(SDL_LockTextureToSurface(texture, rect, &surface));
>   return Surface::Borrow(surface);
4881a5028,5042
> /**
>  * Set target texture back to window
>  *
>  * This is equivalent to SetTarget(nullptr)
>  *
>  * @param renderer the rendering context.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa SetTarget(nullptr)
>  * @sa GetTarget()
>  */
4884c5045
<   static_assert(false, "Not implemented");
---
>   SetRenderTarget(renderer, nullptr);
4906c5067,5069
<   return SDL_GetRenderTarget(renderer);
---
>   TextureRaw texture = SDL_GetRenderTarget(renderer);
>   if (texture) return Texture::Borrow(texture);
>   return {};
4953,4954c5116
<  * @param w the width of the logical resolution.
<  * @param h the height of the logical resolution.
---
>  * @param size the width and height of the logical resolution.
4970c5132
<   CheckError(SDL_SetRenderLogicalPresentation(renderer, size, mode));
---
>   CheckError(SDL_SetRenderLogicalPresentation(renderer, size.x, size.y, mode));
5018,5019c5180
<  * @param w an int to be filled with the width.
<  * @param h an int to be filled with the height.
---
>  * @param size a Point to be filled with the width and height.
5033c5194,5197
<   static_assert(false, "Not implemented");
---
>   if (size) {
>     return GetRenderLogicalPresentation(renderer, &size->x, &size->y, mode);
>   }
>   return GetRenderLogicalPresentation(renderer, nullptr, nullptr, mode);
5062,5063c5226
<  * @param rect a pointer filled in with the final presentation rectangle, may
<  *             be nullptr.
---
>  * @returns with the final presentation rectangle.
5074c5237,5239
<   return CheckError(SDL_GetRenderLogicalPresentationRect(renderer));
---
>   FRect rect;
>   CheckError(SDL_GetRenderLogicalPresentationRect(renderer, &rect));
>   return rect;
5093,5096c5258,5259
<  * @param window_x the x coordinate in window coordinates.
<  * @param window_y the y coordinate in window coordinates.
<  * @param x a pointer filled with the x coordinate in render coordinates.
<  * @param y a pointer filled with the y coordinate in render coordinates.
---
>  * @param window_coord the x, y coordinate in window coordinates.
>  * @returns the x, y coordinate in render coordinates.
5109c5272,5275
<   return CheckError(SDL_RenderCoordinatesFromWindow(renderer, window_coord));
---
>   FPoint p;
>   CheckError(SDL_RenderCoordinatesFromWindow(
>     renderer, window_coord.x, window_coord.y, &p.x, &p.y));
>   return p;
5129,5134c5295,5296
<  * @param x the x coordinate in render coordinates.
<  * @param y the y coordinate in render coordinates.
<  * @param window_x a pointer filled with the x coordinate in window
<  *                 coordinates.
<  * @param window_y a pointer filled with the y coordinate in window
<  *                 coordinates.
---
>  * @param coord the x, y coordinates in render coordinates.
>  * @returns x, y in window coordinates.
5148c5310,5313
<   return CheckError(SDL_RenderCoordinatesToWindow(renderer, coord));
---
>   FPoint p;
>   CheckError(
>     SDL_RenderCoordinatesToWindow(renderer, coord.x, coord.y, &p.x, &p.y));
>   return p;
5234a5400,5415
> /**
>  * Reset the drawing area for rendering to the entire target
>  *
>  * This is equivalent to `SetViewport(std::nullopt)`
>  *
>  * @param renderer the rendering context.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetViewport()
>  * @sa SetViewport()
>  * @sa ViewportSet()
>  */
5237c5418
<   static_assert(false, "Not implemented");
---
>   SetRenderViewport(renderer, std::nullopt);
5249c5430
<  * @param rect an Rect structure filled in with the current drawing area.
---
>  * @returns an Rect structure filled in with the current drawing area.
5256c5437
<  * @sa Renderer.ViewportSet
---
>  * @sa Renderer.IsViewportSet
5261c5442,5444
<   return CheckError(SDL_GetRenderViewport(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderViewport(renderer, &rect));
>   return rect;
5310,5311c5493
<  * @param rect a pointer filled in with the area that is safe for interactive
<  *             content.
---
>  * @returns the area that is safe for interactive content.
5320c5502,5504
<   return CheckError(SDL_GetRenderSafeArea(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderSafeArea(renderer, &rect));
>   return rect;
5356a5541,5556
> /**
>  * Reset the clip rectangle for rendering to the entire render target
>  *
>  * This is equivalent to `SetClipRect(std::nullopt)`
>  *
>  * @param renderer the rendering context.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetClipRect()
>  * @sa SetClipRect()
>  * @sa ClipEnabled()
>  */
5359c5559
<   static_assert(false, "Not implemented");
---
>   SetRenderClipRect(renderer, std::nullopt);
5371,5372c5571,5572
<  * @param rect an Rect structure filled in with the current clipping area
<  *             or an empty rectangle if clipping is disabled.
---
>  * @returns an Rect structure filled in with the current clipping area
>  *          or an empty rectangle if clipping is disabled.
5384c5584,5586
<   return CheckError(SDL_GetRenderClipRect(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderClipRect(renderer, &rect));
>   return rect;
5434,5435c5636
<  * @param scaleX the horizontal scaling factor.
<  * @param scaleY the vertical scaling factor.
---
>  * @param scale the horizontal and vertical scaling factors.
5446c5647
<   CheckError(SDL_SetRenderScale(renderer, scale));
---
>   CheckError(SDL_SetRenderScale(renderer, scale.x, scale.y));
5482,5484c5683
<  * @param renderer the rendering context.
<  * @param scaleX a pointer filled in with the horizontal scaling factor.
<  * @param scaleY a pointer filled in with the vertical scaling factor.
---
>  * @returns the scaling factors on success.
5495c5694,5696
<   static_assert(false, "Not implemented");
---
>   FPoint p;
>   GetRenderScale(renderer, &p.x, &p.y);
>   return p;
5515,5520c5716
<  * @param r the red value used to draw on the rendering target.
<  * @param g the green value used to draw on the rendering target.
<  * @param b the blue value used to draw on the rendering target.
<  * @param a the alpha value used to draw on the rendering target; usually
<  *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<  *          specify how the alpha channel is used.
---
>  * @param c the color used to draw on the rendering target.
5532c5728
<   CheckError(SDL_SetRenderDrawColor(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColor(renderer, c.r, c.g, c.b, c.a));
5547,5552c5743
<  * @param r the red value used to draw on the rendering target.
<  * @param g the green value used to draw on the rendering target.
<  * @param b the blue value used to draw on the rendering target.
<  * @param a the alpha value used to draw on the rendering target. Use
<  *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<  *          used.
---
>  * @param c the color used to draw on the rendering target.
5564c5755
<   CheckError(SDL_SetRenderDrawColorFloat(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColorFloat(renderer, c.r, c.g, c.b, c.a));
5606,5613c5797
<  * @param r a pointer filled in with the red value used to draw on the
<  *          rendering target.
<  * @param g a pointer filled in with the green value used to draw on the
<  *          rendering target.
<  * @param b a pointer filled in with the blue value used to draw on the
<  *          rendering target.
<  * @param a a pointer filled in with the alpha value used to draw on the
<  *          rendering target; usually `ALPHA_OPAQUE` (255).
---
>  * @returns the color channel values used to draw on the rendering target.
5625c5809,5811
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetRenderDrawColor(renderer, &c.r, &c.g, &c.b, &c.a);
>   return c;
5672,5679c5858
<  * @param r a pointer filled in with the red value used to draw on the
<  *          rendering target.
<  * @param g a pointer filled in with the green value used to draw on the
<  *          rendering target.
<  * @param b a pointer filled in with the blue value used to draw on the
<  *          rendering target.
<  * @param a a pointer filled in with the alpha value used to draw on the
<  *          rendering target.
---
>  * @returns the color on success.
5691c5870,5872
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetRenderDrawColorFloat(renderer, &c.r, &c.g, &c.b, &c.a);
>   return c;
5742c5923
<  * @param scale a pointer filled in with the current color scale value.
---
>  * @return the current color scale value.
5753c5934,5936
<   return CheckError(SDL_GetRenderColorScale(renderer));
---
>   float scale;
>   CheckError(SDL_GetRenderColorScale(renderer, &scale));
>   return scale;
5790c5973
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
5801c5984,5986
<   return CheckError(SDL_GetRenderDrawBlendMode(renderer));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetRenderDrawBlendMode(renderer, &blendMode));
>   return blendMode;
5837,5838c6022
<  * @param x the x coordinate of the point.
<  * @param y the y coordinate of the point.
---
>  * @param p the x, y coordinate of the point.
5849c6033
<   CheckError(SDL_RenderPoint(renderer, p));
---
>   CheckError(SDL_RenderPoint(renderer, p.x, p.y));
5862d6045
<  * @param count the number of points to draw.
5874c6057
<   CheckError(SDL_RenderPoints(renderer, points));
---
>   CheckError(SDL_RenderPoints(renderer, points.data(), points.size()));
5886,5889c6069,6070
<  * @param x1 the x coordinate of the start point.
<  * @param y1 the y coordinate of the start point.
<  * @param x2 the x coordinate of the end point.
<  * @param y2 the y coordinate of the end point.
---
>  * @param p1 the x,y coordinates of the start point.
>  * @param p2 the x,y coordinates of the end point.
5902c6083
<   CheckError(SDL_RenderLine(renderer, p1, p2));
---
>   CheckError(SDL_RenderLine(renderer, p1.x, p1.y, p2.x, p2.y));
5916d6096
<  * @param count the number of points, drawing count-1 lines.
5927c6107
<   CheckError(SDL_RenderLines(renderer, points));
---
>   CheckError(SDL_RenderLines(renderer, points.data(), points.size()));
5965d6144
<  * @param count the number of rectangles.
5976c6155
<   CheckError(SDL_RenderRects(renderer, rects));
---
>   CheckError(SDL_RenderRects(renderer, rects.data(), rects.size()));
6016d6194
<  * @param count the number of rectangles.
6028c6206
<   CheckError(SDL_RenderFillRects(renderer, rects));
---
>   CheckError(SDL_RenderFillRects(renderer, rects.data(), rects.size()));
6101c6279
<                                  FlipMode flip)
---
>                                  FlipMode flip = FlipMode::SDL_FLIP_NONE)
6285d6462
<  * @param num_vertices number of vertices.
6289d6465
<  * @param num_indices number of indices.
6301c6477
<                            std::span<const int> indices)
---
>                            std::span<const int> indices = {})
6303c6479,6484
<   CheckError(SDL_RenderGeometry(renderer, texture, vertices, indices));
---
>   CheckError(SDL_RenderGeometry(renderer,
>                                 texture,
>                                 vertices.data(),
>                                 vertices.size(),
>                                 indices.data(),
>                                 indices.size()));
6420c6601
<   return CheckError(SDL_RenderReadPixels(renderer, rect));
---
>   return Surface{CheckError(SDL_RenderReadPixels(renderer, rect))};
6691a6873
> /// Constant for disabling renderer vsync
6693a6876
> /// Constant for enabling asaptive renderer vsync
6700,6701c6883,6884
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Renderer.SetVSync() for the meaning of the value.
---
>  * @returns the current vertical refresh sync interval. See Renderer.SetVSync()
>  *          for the meaning of the value.
6712c6895,6897
<   return CheckError(SDL_GetRenderVSync(renderer));
---
>   int vsync;
>   CheckError(SDL_GetRenderVSync(renderer, &vsync));
>   return vsync;
6758,6759c6943
<  * @param x the x coordinate where the top-left corner of the text will draw.
<  * @param y the y coordinate where the top-left corner of the text will draw.
---
>  * @param p the x,y coordinates where the top-left corner of the text will draw.
6774c6958
<   CheckError(SDL_RenderDebugText(renderer, p, str));
---
>   CheckError(SDL_RenderDebugText(renderer, p.x, p.y, str));
6793,6794c6977
<  * @param x the x coordinate where the top-left corner of the text will draw.
<  * @param y the y coordinate where the top-left corner of the text will draw.
---
>  * @param p the x,y coordinate where the top-left corner of the text will draw.
6796c6979
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
---
>  * @param args additional parameters matching % tokens in the `fmt` string, if
6813c6996,6997
<   CheckError(SDL_RenderDebugTextFormat(renderer, p, fmt, args));
---
>   RenderDebugText(
>     renderer, p, std::vformat(fmt, std::make_format_args(args...)));
6821c7005
<   SDL::RenderDebugTextFormat(m_resource, p, fmt, args);
---
>   SDL::RenderDebugTextFormat(m_resource, p, fmt, args...);
