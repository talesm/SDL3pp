13c13
<  * @defgroup CategoryRender Category Render
---
>  * @defgroup CategoryRender 2D Accelerated Rendering
108a109,110
> #ifdef SDL3PP_DOC
> 
115a118,119
> #endif // SDL3PP_DOC
> 
214,215c218,252
<   /// Default ctor
<   Renderer(WindowParam window) {}
---
>   /**
>    * Create a 2D rendering context for a window.
>    *
>    * If you want a specific renderer, you can specify its name here. A list of
>    * available renderers can be obtained by calling GetRenderDriver()
>    * multiple times, with indices from 0 to GetNumRenderDrivers()-1. If you
>    * don't need a specific renderer, specify nullptr and SDL will attempt to
>    * choose the best option for you, based on what is available on the user's
>    * system.
>    *
>    * If `name` is a comma-separated list, SDL will try each name, in the order
>    * listed, until one succeeds or all of them fail.
>    *
>    * By default the rendering size matches the window size in pixels, but you
>    * can call Renderer.SetLogicalPresentation() to change the content size and
>    * scaling options.
>    *
>    * @param window the window where rendering is displayed.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.Renderer
>    * @sa Renderer.Renderer
>    * @sa Renderer.Destroy
>    * @sa GetNumRenderDrivers
>    * @sa GetRenderDriver
>    * @sa Renderer.GetName
>    */
>   Renderer(WindowParam window)
>     : m_resource(CheckError(SDL_CreateRenderer(window, nullptr)))
>   {
>   }
237,238c274
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
252c288
<     : m_resource(SDL_CreateRenderer(window, name))
---
>     : m_resource(CheckError(SDL_CreateRenderer(window, name)))
294,295c330
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
308c343
<     : m_resource(SDL_CreateRendererWithProperties(props))
---
>     : m_resource(CheckError(SDL_CreateRendererWithProperties(props)))
322,323c357
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
332c366
<     : m_resource(SDL_CreateSoftwareRenderer(surface))
---
>     : m_resource(CheckError(SDL_CreateSoftwareRenderer(surface)))
407d440
<    * @sa Renderer.Renderer
411c444,458
<   Point GetOutputSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the output size in pixels of a rendering context.
>    *
>    * This returns the true output size in pixels, ignoring any render targets or
>    * logical size and presentation.
>    *
>    * @returns Point on success.
>    * @throws Error on failure.
>    */
>   Point GetOutputSize() const
>   {
>     Point p;
>     GetOutputSize(&p.x, &p.y);
>     return p;
>   }
433a481,496
>   /**
>    * Get the current output size in pixels of a rendering context.
>    *
>    * If a rendering target is active, this will return the size of the rendering
>    * target in pixels, otherwise if a logical size is set, it will return the
>    * logical size, otherwise it will return the value of GetOutputSize().
>    *
>    * @returns the size on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    */
436c499,501
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetCurrentOutputSize(&p.x, &p.y);
>     return p;
545c610,624
<   void ResetTarget() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set target texture back to window
>    *
>    * This is equivalent to SetTarget(nullptr)
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetTarget(nullptr)
>    * @sa GetTarget()
>    */
>   void ResetTarget() { SetTarget(nullptr); }
627,628c706
<    * @param w the width of the logical resolution.
<    * @param h the height of the logical resolution.
---
>    * @param size the width and height of the logical resolution.
642a721,736
>   /**
>    * Get device independent resolution and presentation mode for rendering.
>    *
>    * This function gets the width and height of the logical rendering output, or
>    * the output size in pixels if a logical resolution is not enabled.
>    *
>    * @param size a Point to be filled with the width and height.
>    * @param mode the presentation mode used.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetLogicalPresentation
>    */
645c739,740
<     static_assert(false, "Not implemented");
---
>     if (!size) return GetLogicalPresentation(nullptr, nullptr, mode);
>     return GetLogicalPresentation(&size->x, &size->y, mode);
705,708c800,801
<    * @param window_x the x coordinate in window coordinates.
<    * @param window_y the y coordinate in window coordinates.
<    * @param x a pointer filled with the x coordinate in render coordinates.
<    * @param y a pointer filled with the y coordinate in render coordinates.
---
>    * @param window_coord the x, y coordinate in window coordinates.
>    * @returns a FPoint containing ther render coordinates on success.
726,728c819,821
<    * - The logical presentation settings (Renderer.SetLogicalPresentation)
<    * - The scale (Renderer.SetScale)
<    * - The viewport (Renderer.SetViewport)
---
>    * - The logical presentation settings (RendererRef.SetLogicalPresentation)
>    * - The scale (RendererRef.SetScale)
>    * - The viewport (RendererRef.SetViewport)
730,735c823,824
<    * @param x the x coordinate in render coordinates.
<    * @param y the y coordinate in render coordinates.
<    * @param window_x a pointer filled with the x coordinate in window
<    *                 coordinates.
<    * @param window_y a pointer filled with the y coordinate in window
<    *                 coordinates.
---
>    * @param coord the x, y coordinate in render coordinates.
>    * @returns a FPoint filled with window coordinates on success.
782c871,886
<   void ResetViewport() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the drawing area for rendering to the entire target
>    *
>    * This is equivalent to `SetViewport(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetViewport()
>    * @sa SetViewport()
>    * @sa ViewportSet()
>    */
>   void ResetViewport() { SetViewport(std::nullopt); }
815c919
<    * @param rect an Rect structure filled in with the current drawing area.
---
>    * @returns an Rect with the current drawing area.
858,859c962
<    * @param rect a pointer filled in with the area that is safe for interactive
<    *             content.
---
>    * @returns the rect filled the area that is safe for interactive content.
868c971,986
<   void ResetClipRect() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the clip rectangle for rendering to the entire render target
>    *
>    * This is equivalent to `SetClipRect(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetClipRect()
>    * @sa SetClipRect()
>    * @sa ClipEnabled()
>    */
>   void ResetClipRect() { SetClipRect({}); }
884a1003
>    * @sa Renderer.ResetClipRect()
895,896c1014,1015
<    * @param rect an Rect structure filled in with the current clipping area
<    *             or an empty rectangle if clipping is disabled.
---
>    * @returns a Rect structure filled in with the current clipping area or an
>    *          empty rectangle if clipping is disabled.
940,941c1059
<    * @param scaleX the horizontal scaling factor.
<    * @param scaleY the vertical scaling factor.
---
>    * @param scale the x, y scaling factors.
952c1070,1090
<   FPoint GetScale() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the drawing scale for the current target.
>    *
>    * Each render target has its own scale. This function gets the scale for the
>    * current render target.
>    *
>    * @returns the scaling factors on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetScale
>    */
>   FPoint GetScale() const
>   {
>     FPoint p;
>     GetScale(&p.x, &p.y);
>     return p;
>   }
978,983c1116
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target; usually
<    *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<    *          specify how the alpha channel is used.
---
>    * @param c the color value used to draw on the rendering target.
1001,1006c1134
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target. Use
<    *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<    *          used.
---
>    * @param c the RGBA values used to draw on the rendering target.
1018c1146,1165
<   Color GetDrawColor() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @param c a pointer filled in with the color channel values used to draw on
>    *          the rendering target. @b must @b not be nullptr.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   Color GetDrawColor() const
>   {
>     Color c;
>     GetDrawColor(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1042c1189,1207
<   FColor GetDrawColorFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @returns the color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   FColor GetDrawColorFloat() const
>   {
>     FColor c;
>     GetDrawColorFloat(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1091c1256
<    * @param scale a pointer filled in with the current color scale value.
---
>    * @returns a float representing the current color scale on success.
1121c1286
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode on success.
1153,1154c1318
<    * @param x the x coordinate of the point.
<    * @param y the y coordinate of the point.
---
>    * @param p the x, y coordinates of the point.
1168d1331
<    * @param renderer the renderer which should draw multiple points.
1170d1332
<    * @param count the number of points to draw.
1184,1188c1346,1347
<    * @param renderer the renderer which should draw a line.
<    * @param x1 the x coordinate of the start point.
<    * @param y1 the y coordinate of the start point.
<    * @param x2 the x coordinate of the end point.
<    * @param y2 the y coordinate of the end point.
---
>    * @param p1 the x,y coordinate of the start point.
>    * @param p2 the x,y coordinate of the end point.
1203d1361
<    * @param renderer the renderer which should draw multiple lines.
1205d1362
<    * @param count the number of points, drawing count-1 lines.
1219,1221c1376,1377
<    * @param renderer the renderer which should draw a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr to outline
<    * the entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt to
>    *             outline the entire rendering target.
1236d1391
<    * @param renderer the renderer which should draw multiple rectangles.
1238d1392
<    * @param count the number of rectangles.
1253,1255c1407,1408
<    * @param renderer the renderer which should fill a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr for the
<    * entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt for the
>    *             entire rendering target.
1270d1422
<    * @param renderer the renderer which should fill multiple rectangles.
1272d1423
<    * @param count the number of rectangles.
1287d1437
<    * @param renderer the renderer which should copy parts of a texture.
1310d1459
<    * @param renderer the renderer which should copy parts of a texture.
1336c1485
<                             FlipMode flip);
---
>                             FlipMode flip = FlipMode::SDL_FLIP_NONE);
1342d1490
<    * @param renderer the renderer which should copy parts of a texture.
1376d1523
<    * @param renderer the renderer which should copy parts of a texture.
1408d1554
<    * @param renderer the renderer which should copy parts of a texture.
1443d1588
<    * @param renderer the rendering context.
1446d1590
<    * @param num_vertices number of vertices.
1449,1450c1593
<    * sequential order.
<    * @param num_indices number of indices.
---
>    *                sequential order.
1461c1604
<                       std::span<const int> indices);
---
>                       std::span<const int> indices = {});
1515d1657
<    * @param renderer the rendering context.
1633,1635c1775
<    * @param renderer the renderer to toggle.
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Renderer.SetVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval on success.
1671,1672c1811,1812
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1685,1692d1824
<   template<class... ARGS>
<   void RenderDebugTextFormat(FPoint p, std::string_view fmt, ARGS... args)
<   {
<     static_assert(false, "Not implemented");
<   }
< 
<   auto RenderDebugTextFormat();
< 
1696,1698c1828,1831
<    * This function will render a printf()-style format string to a renderer.
<    * Note that this is a convenience function for debugging, with severe
<    * limitations, and is not intended to be used for production apps and games.
---
>    * This function will render a std::format()-style format string to a
>    * renderer. Note that this is a convenience function for debugging, with
>    * severe limitations, and is not intended to be used for production apps and
>    * games.
1703,1704c1836,1837
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1706,1707c1839,1840
<    * @param ... additional parameters matching % tokens in the `fmt` string, if
<    *            any.
---
>    * @param args additional parameters matching {} tokens in the `fmt` string,
>    *             if any.
1717,1720c1850,1854
<   void RenderDebugTextFormat(float x,
<                              float y,
<                              SDL_PRINTF_FORMAT_STRING const char* fmt,
<                              ...);
---
>   template<class... ARGS>
>   void RenderDebugTextFormat(FPoint p, std::string_view fmt, ARGS... args)
>   {
>     RenderDebugText(p, std::vformat(fmt, std::make_format_args(args...)));
>   }
1956,1969d2089
< inline auto Renderer::RenderDebugTextFormat()
<   : m_resource(SDL::RenderDebugTextFormat())
< {
< }
< 
< inline void Renderer::RenderDebugTextFormat(
<   float x,
<   float y,
<   SDL_PRINTF_FORMAT_STRING const char* fmt,
<   ...)
< {
<   SDL::RenderDebugTextFormat(m_resource, x, y, fmt, ...);
< }
< 
2044,2047c2164,2165
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @param size the width and height of the texture in pixels.
>    * @throws Error on failure.
2063c2181,2182
<     : m_resource(SDL_CreateTexture(renderer, format, access, size))
---
>     : m_resource(
>         CheckError(SDL_CreateTexture(renderer, format, access, size.x, size.y)))
2082,2083c2201
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2090d2207
<    * @sa Texture.Texture
2094c2211
<     : m_resource(SDL_CreateTextureFromSurface(renderer, surface))
---
>     : m_resource(CheckError(SDL_CreateTextureFromSurface(renderer, surface)))
2194,2195c2311
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2209c2325
<     : m_resource(SDL_CreateTextureWithProperties(renderer, props))
---
>     : m_resource(CheckError(SDL_CreateTextureWithProperties(renderer, props)))
2234,2236d2349
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2278,2280d2390
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2293c2403
<   Texture(RendererParam renderer, IOStreamParam src, bool closeio);
---
>   Texture(RendererParam renderer, IOStreamParam src, bool closeio = false);
2456c2566,2592
<   void SetMod(Color c) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   void SetMod(Color c)
>   {
>     SetColorMod(c.r, c.g, c.b);
>     SetAlphaMod(c.a);
>   }
2458c2594,2620
<   void SetModFloat(FColor c) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   void SetModFloat(FColor c)
>   {
>     SetColorMod(c.r, c.g, c.b);
>     SetAlphaMod(c.a);
>   }
2460c2622,2641
<   Color GetMod() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
>   Color GetMod() const
>   {
>     Color c;
>     GetColorMod(&c.r, &c.g, &c.b);
>     c.a = GetAlphaMod();
>     return c;
>   }
2462c2643,2662
<   FColor GetModFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
>   FColor GetModFloat() const
>   {
>     FColor c;
>     GetColorModFloat(&c.r, &c.g, &c.b);
>     c.a = GetAlphaModFloat();
>     return c;
>   }
2654c2854
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current SDL_BlendMode on success.
2686c2886
<    * @param scaleMode a pointer filled in with the current scale mode.
---
>    * @returns the current scale mode on success.
2878c3078,3081
<   int GetWidth() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the width in pixels.
>    */
>   int GetWidth() const { return m_resource->w; }
2880c3083,3086
<   int GetHeight() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the height in pixels.
>    */
>   int GetHeight() const { return m_resource->h; }
2882c3088,3091
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   Point GetSize() const { return Point(GetWidth(), GetHeight()); }
2899c3108,3116
<   FPoint GetSizeFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   FPoint GetSizeFloat() const
>   {
>     FPoint p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
2901c3118,3121
<   PixelFormat GetFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixel format.
>    */
>   PixelFormat GetFormat() const { return m_resource->format; }
2959,2960c3179
<  * @param window a pointer filled with the window, or nullptr on error.
<  * @param renderer a pointer filled with the renderer, or nullptr on error.
---
>  * @returns a pair with window and renderer.
2975c3194,3198
<   return CheckError(SDL_CreateWindowAndRenderer(title, size, window_flags));
---
>   SDL_Window* window = nullptr;
>   SDL_Renderer* renderer = nullptr;
>   CheckError(SDL_CreateWindowAndRenderer(
>     title, size.x, size.y, window_flags, &window, &renderer));
>   return {Window{window}, Renderer(renderer)};
3203c3426
<   return CheckError(SDL_GetRenderer(m_resource));
---
>   return {CheckError(SDL_GetRenderer(m_resource))};
3219c3442
<   return CheckError(SDL_GetRenderWindow(renderer));
---
>   return {CheckError(SDL_GetRenderWindow(renderer))};
3337c3560
<   return CheckError(SDL_GetRendererProperties(renderer));
---
>   return {CheckError(SDL_GetRendererProperties(renderer))};
3440c3663
<   return Texture(SDL_CreateTexture(renderer, format, access, size));
---
>   return Texture(renderer, format, access, size);
3823c4046
<   return CheckError(SDL_GetTextureProperties(texture));
---
>   return {CheckError(SDL_GetTextureProperties(texture))};
3844c4067
<   return SDL_GetRendererFromTexture(texture);
---
>   return {SDL_GetRendererFromTexture(texture)};
4094c4317,4319
<   return CheckError(SDL_GetTextureAlphaMod(texture));
---
>   Uint8 alpha;
>   CheckError(SDL_GetTextureAlphaMod(texture, &alpha));
>   return alpha;
4119c4344,4346
<   return CheckError(SDL_GetTextureAlphaModFloat(texture));
---
>   float alpha;
>   CheckError(SDL_GetTextureAlphaModFloat(texture, &alpha));
>   return alpha;
4157c4384
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
4168c4395,4397
<   return CheckError(SDL_GetTextureBlendMode(texture));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetTextureBlendMode(texture, &blendMode));
>   return blendMode;
4207c4436
<  * @param scaleMode a pointer filled in with the current scale mode.
---
>  * @return the current scale mode.
4218c4447,4449
<   return CheckError(SDL_GetTextureScaleMode(texture));
---
>   ScaleMode scaleMode;
>   CheckError(SDL_GetTextureScaleMode(texture, &scaleMode));
>   return scaleMode;
4451c4682,4684
<   return CheckError(SDL_LockTextureToSurface(texture, rect));
---
>   SurfaceRaw surface = nullptr;
>   CheckError(SDL_LockTextureToSurface(texture, rect, &surface));
>   return Surface::Borrow(surface);
4454,4455c4687
< inline Surface Texture::LockToSurface(
<   OptionalRef<const SDL_Rect> rect = std::nullopt)
---
> inline Surface Texture::LockToSurface(OptionalRef<const SDL_Rect> rect)
4534c4766,4768
<   return SDL_GetRenderTarget(renderer);
---
>   TextureRaw texture = SDL_GetRenderTarget(renderer);
>   if (texture) return Texture::Borrow(texture);
>   return {};
4598c4832
<   CheckError(SDL_SetRenderLogicalPresentation(renderer, size, mode));
---
>   CheckError(SDL_SetRenderLogicalPresentation(renderer, size.x, size.y, mode));
4668c4902,4904
<   return CheckError(SDL_GetRenderLogicalPresentationRect(renderer));
---
>   FRect rect;
>   CheckError(SDL_GetRenderLogicalPresentationRect(renderer, &rect));
>   return rect;
4703c4939,4942
<   return CheckError(SDL_RenderCoordinatesFromWindow(renderer, window_coord));
---
>   FPoint p;
>   CheckError(SDL_RenderCoordinatesFromWindow(
>     renderer, window_coord.x, window_coord.y, &p.x, &p.y));
>   return p;
4742c4981,4984
<   return CheckError(SDL_RenderCoordinatesToWindow(renderer, coord));
---
>   FPoint p;
>   CheckError(
>     SDL_RenderCoordinatesToWindow(renderer, coord.x, coord.y, &p.x, &p.y));
>   return p;
4848c5090,5092
<   return CheckError(SDL_GetRenderViewport(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderViewport(renderer, &rect));
>   return rect;
4907c5151,5153
<   return CheckError(SDL_GetRenderSafeArea(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderSafeArea(renderer, &rect));
>   return rect;
4964c5210,5212
<   return CheckError(SDL_GetRenderClipRect(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderClipRect(renderer, &rect));
>   return rect;
5026c5274
<   CheckError(SDL_SetRenderScale(renderer, scale));
---
>   CheckError(SDL_SetRenderScale(renderer, scale.x, scale.y));
5085c5333
<   CheckError(SDL_SetRenderDrawColor(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColor(renderer, c.r, c.g, c.b, c.a));
5117c5365
<   CheckError(SDL_SetRenderDrawColorFloat(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColorFloat(renderer, c.r, c.g, c.b, c.a));
5244c5492,5494
<   return CheckError(SDL_GetRenderColorScale(renderer));
---
>   float scale;
>   CheckError(SDL_GetRenderColorScale(renderer, &scale));
>   return scale;
5292c5542,5544
<   return CheckError(SDL_GetRenderDrawBlendMode(renderer));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetRenderDrawBlendMode(renderer, &blendMode));
>   return blendMode;
5340c5592
<   CheckError(SDL_RenderPoint(renderer, p));
---
>   CheckError(SDL_RenderPoint(renderer, p.x, p.y));
5365c5617
<   CheckError(SDL_RenderPoints(renderer, points));
---
>   CheckError(SDL_RenderPoints(renderer, points.data(), points.size()));
5393c5645
<   CheckError(SDL_RenderLine(renderer, p1, p2));
---
>   CheckError(SDL_RenderLine(renderer, p1.x, p1.y, p2.x, p2.y));
5418c5670
<   CheckError(SDL_RenderLines(renderer, points));
---
>   CheckError(SDL_RenderLines(renderer, points.data(), points.size()));
5467c5719
<   CheckError(SDL_RenderRects(renderer, rects));
---
>   CheckError(SDL_RenderRects(renderer, rects.data(), rects.size()));
5519c5771
<   CheckError(SDL_RenderFillRects(renderer, rects));
---
>   CheckError(SDL_RenderFillRects(renderer, rects.data(), rects.size()));
5592c5844
<                                  FlipMode flip)
---
>                                  FlipMode flip = FlipMode::SDL_FLIP_NONE)
5792c6044
<                            std::span<const int> indices)
---
>                            std::span<const int> indices = {})
5794c6046,6051
<   CheckError(SDL_RenderGeometry(renderer, texture, vertices, indices));
---
>   CheckError(SDL_RenderGeometry(renderer,
>                                 texture,
>                                 vertices.data(),
>                                 vertices.size(),
>                                 indices.data(),
>                                 indices.size()));
5911c6168
<   return CheckError(SDL_RenderReadPixels(renderer, rect));
---
>   return Surface{CheckError(SDL_RenderReadPixels(renderer, rect))};
5914c6171
< inline Surface Renderer::ReadPixels(OptionalRef<const RectRaw> rect = {}) const
---
> inline Surface Renderer::ReadPixels(OptionalRef<const RectRaw> rect) const
6211c6468,6470
<   return CheckError(SDL_GetRenderVSync(renderer));
---
>   int vsync;
>   CheckError(SDL_GetRenderVSync(renderer, &vsync));
>   return vsync;
6270c6529
<   CheckError(SDL_RenderDebugText(renderer, p, str));
---
>   CheckError(SDL_RenderDebugText(renderer, p.x, p.y, str));
6302a6562
> template<class... ARGS>
6304,6307c6564,6566
<                                   float x,
<                                   float y,
<                                   SDL_PRINTF_FORMAT_STRING const char* fmt,
<                                   ...)
---
>                                   FPoint p,
>                                   std::string_view fmt,
>                                   ARGS... args)
6309c6568,6569
<   CheckError(SDL_RenderDebugTextFormat(renderer, x, y, fmt, ...));
---
>   RenderDebugText(
>     renderer, p, std::vformat(fmt, std::make_format_args(args...)));
