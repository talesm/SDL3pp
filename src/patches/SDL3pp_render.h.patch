13c13
<  * @defgroup CategoryRender Category Render
---
>  * @defgroup CategoryRender 2D Accelerated Rendering
120a121
> 
149a151,152
> #ifdef SDL3PP_DOC
> 
156a160,161
> #endif // SDL3PP_DOC
> 
255,256c260,294
<   /// Default ctor
<   Renderer(WindowParam window) {}
---
>   /**
>    * Create a 2D rendering context for a window.
>    *
>    * If you want a specific renderer, you can specify its name here. A list of
>    * available renderers can be obtained by calling GetRenderDriver()
>    * multiple times, with indices from 0 to GetNumRenderDrivers()-1. If you
>    * don't need a specific renderer, specify nullptr and SDL will attempt to
>    * choose the best option for you, based on what is available on the user's
>    * system.
>    *
>    * If `name` is a comma-separated list, SDL will try each name, in the order
>    * listed, until one succeeds or all of them fail.
>    *
>    * By default the rendering size matches the window size in pixels, but you
>    * can call Renderer.SetLogicalPresentation() to change the content size and
>    * scaling options.
>    *
>    * @param window the window where rendering is displayed.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.Renderer
>    * @sa Renderer.Renderer
>    * @sa Renderer.Destroy
>    * @sa GetNumRenderDrivers
>    * @sa GetRenderDriver
>    * @sa Renderer.GetName
>    */
>   Renderer(WindowParam window)
>     : m_resource(CheckError(SDL_CreateRenderer(window, nullptr)))
>   {
>   }
278,279c316
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
293c330
<     : m_resource(SDL_CreateRenderer(window, name))
---
>     : m_resource(CheckError(SDL_CreateRenderer(window, name)))
335,336c372
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
349c385
<     : m_resource(SDL_CreateRendererWithProperties(props))
---
>     : m_resource(CheckError(SDL_CreateRendererWithProperties(props)))
363,364c399
<    * @post a valid rendering context or nullptr if there was an error; call
<    *          GetError() for more information.
---
>    * @throws Error on failure.
373c408
<     : m_resource(SDL_CreateSoftwareRenderer(surface))
---
>     : m_resource(CheckError(SDL_CreateSoftwareRenderer(surface)))
448d482
<    * @sa Renderer.Renderer
452c486,500
<   Point GetOutputSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the output size in pixels of a rendering context.
>    *
>    * This returns the true output size in pixels, ignoring any render targets or
>    * logical size and presentation.
>    *
>    * @returns Point on success.
>    * @throws Error on failure.
>    */
>   Point GetOutputSize() const
>   {
>     Point p;
>     GetOutputSize(&p.x, &p.y);
>     return p;
>   }
474a523,538
>   /**
>    * Get the current output size in pixels of a rendering context.
>    *
>    * If a rendering target is active, this will return the size of the rendering
>    * target in pixels, otherwise if a logical size is set, it will return the
>    * logical size, otherwise it will return the value of GetOutputSize().
>    *
>    * @returns the size on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.GetOutputSize()
>    */
477c541,543
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetCurrentOutputSize(&p.x, &p.y);
>     return p;
586c652,666
<   void ResetTarget() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set target texture back to window
>    *
>    * This is equivalent to SetTarget(nullptr)
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SetTarget(nullptr)
>    * @sa GetTarget()
>    */
>   void ResetTarget() { SetTarget(nullptr); }
668,669c748
<    * @param w the width of the logical resolution.
<    * @param h the height of the logical resolution.
---
>    * @param size the width and height of the logical resolution.
683a763,778
>   /**
>    * Get device independent resolution and presentation mode for rendering.
>    *
>    * This function gets the width and height of the logical rendering output, or
>    * the output size in pixels if a logical resolution is not enabled.
>    *
>    * @param size a Point to be filled with the width and height.
>    * @param mode the presentation mode used.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetLogicalPresentation
>    */
686c781,782
<     static_assert(false, "Not implemented");
---
>     if (!size) return GetLogicalPresentation(nullptr, nullptr, mode);
>     return GetLogicalPresentation(&size->x, &size->y, mode);
724,725c820
<    * @param rect a pointer filled in with the final presentation rectangle, may
<    *             be nullptr.
---
>    * @returns the final presentation rectangle.
746,749c841,842
<    * @param window_x the x coordinate in window coordinates.
<    * @param window_y the y coordinate in window coordinates.
<    * @param x a pointer filled with the x coordinate in render coordinates.
<    * @param y a pointer filled with the y coordinate in render coordinates.
---
>    * @param window_coord the x, y coordinate in window coordinates.
>    * @returns a FPoint containing ther render coordinates on success.
767,769c860,862
<    * - The logical presentation settings (Renderer.SetLogicalPresentation)
<    * - The scale (Renderer.SetScale)
<    * - The viewport (Renderer.SetViewport)
---
>    * - The logical presentation settings (RendererRef.SetLogicalPresentation)
>    * - The scale (RendererRef.SetScale)
>    * - The viewport (RendererRef.SetViewport)
771,776c864,865
<    * @param x the x coordinate in render coordinates.
<    * @param y the y coordinate in render coordinates.
<    * @param window_x a pointer filled with the x coordinate in window
<    *                 coordinates.
<    * @param window_y a pointer filled with the y coordinate in window
<    *                 coordinates.
---
>    * @param coord the x, y coordinate in render coordinates.
>    * @returns a FPoint filled with window coordinates on success.
823c912,927
<   void ResetViewport() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the drawing area for rendering to the entire target
>    *
>    * This is equivalent to `SetViewport(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetViewport()
>    * @sa SetViewport()
>    * @sa ViewportSet()
>    */
>   void ResetViewport() { SetViewport(std::nullopt); }
856c960
<    * @param rect an Rect structure filled in with the current drawing area.
---
>    * @returns an Rect with the current drawing area.
899,900c1003
<    * @param rect a pointer filled in with the area that is safe for interactive
<    *             content.
---
>    * @returns the rect filled the area that is safe for interactive content.
909c1012,1027
<   void ResetClipRect() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Reset the clip rectangle for rendering to the entire render target
>    *
>    * This is equivalent to `SetClipRect(std::nullopt)`
>    *
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetClipRect()
>    * @sa SetClipRect()
>    * @sa ClipEnabled()
>    */
>   void ResetClipRect() { SetClipRect({}); }
925a1044
>    * @sa Renderer.ResetClipRect()
936,937c1055,1056
<    * @param rect an Rect structure filled in with the current clipping area
<    *             or an empty rectangle if clipping is disabled.
---
>    * @returns a Rect structure filled in with the current clipping area or an
>    *          empty rectangle if clipping is disabled.
981,982c1100
<    * @param scaleX the horizontal scaling factor.
<    * @param scaleY the vertical scaling factor.
---
>    * @param scale the x, y scaling factors.
993c1111,1131
<   FPoint GetScale() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the drawing scale for the current target.
>    *
>    * Each render target has its own scale. This function gets the scale for the
>    * current render target.
>    *
>    * @returns the scaling factors on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Renderer.SetScale
>    */
>   FPoint GetScale() const
>   {
>     FPoint p;
>     GetScale(&p.x, &p.y);
>     return p;
>   }
1019,1024c1157
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target; usually
<    *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<    *          specify how the alpha channel is used.
---
>    * @param c the color value used to draw on the rendering target.
1042,1047c1175
<    * @param r the red value used to draw on the rendering target.
<    * @param g the green value used to draw on the rendering target.
<    * @param b the blue value used to draw on the rendering target.
<    * @param a the alpha value used to draw on the rendering target. Use
<    *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<    *          used.
---
>    * @param c the RGBA values used to draw on the rendering target.
1059c1187,1205
<   Color GetDrawColor() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @returns the color channel values used to draw on the rendering target.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   Color GetDrawColor() const
>   {
>     Color c;
>     GetDrawColor(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1083c1229,1247
<   FColor GetDrawColorFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the color used for drawing operations (Rect, Line and Clear).
>    *
>    * @returns the color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetDrawColor(SDL_FColor*)
>    * @sa SetDrawColor()
>    */
>   FColor GetDrawColorFloat() const
>   {
>     FColor c;
>     GetDrawColorFloat(&c.r, &c.g, &c.b, &c.a);
>     return c;
>   }
1132c1296
<    * @param scale a pointer filled in with the current color scale value.
---
>    * @returns a float representing the current color scale on success.
1162c1326
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode on success.
1194,1195c1358
<    * @param x the x coordinate of the point.
<    * @param y the y coordinate of the point.
---
>    * @param p the x, y coordinates of the point.
1209d1371
<    * @param renderer the renderer which should draw multiple points.
1211d1372
<    * @param count the number of points to draw.
1225,1229c1386,1387
<    * @param renderer the renderer which should draw a line.
<    * @param x1 the x coordinate of the start point.
<    * @param y1 the y coordinate of the start point.
<    * @param x2 the x coordinate of the end point.
<    * @param y2 the y coordinate of the end point.
---
>    * @param p1 the x,y coordinate of the start point.
>    * @param p2 the x,y coordinate of the end point.
1244d1401
<    * @param renderer the renderer which should draw multiple lines.
1246d1402
<    * @param count the number of points, drawing count-1 lines.
1260,1262c1416,1417
<    * @param renderer the renderer which should draw a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr to outline
<    * the entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt to
>    *             outline the entire rendering target.
1277d1431
<    * @param renderer the renderer which should draw multiple rectangles.
1279d1432
<    * @param count the number of rectangles.
1294,1296c1447,1448
<    * @param renderer the renderer which should fill a rectangle.
<    * @param rect a pointer to the destination rectangle, or nullptr for the
<    * entire rendering target.
---
>    * @param rect a pointer to the destination rectangle, or std::nullopt for the
>    *             entire rendering target.
1311d1462
<    * @param renderer the renderer which should fill multiple rectangles.
1313d1463
<    * @param count the number of rectangles.
1328d1477
<    * @param renderer the renderer which should copy parts of a texture.
1351d1499
<    * @param renderer the renderer which should copy parts of a texture.
1377c1525
<                             FlipMode flip);
---
>                             FlipMode flip = FlipMode::SDL_FLIP_NONE);
1383d1530
<    * @param renderer the renderer which should copy parts of a texture.
1417d1563
<    * @param renderer the renderer which should copy parts of a texture.
1449d1594
<    * @param renderer the renderer which should copy parts of a texture.
1484d1628
<    * @param renderer the rendering context.
1487d1630
<    * @param num_vertices number of vertices.
1490,1491c1633
<    * sequential order.
<    * @param num_indices number of indices.
---
>    *                sequential order.
1502c1644
<                       std::span<const int> indices);
---
>                       std::span<const int> indices = {});
1556d1697
<    * @param renderer the rendering context.
1674,1676c1815
<    * @param renderer the renderer to toggle.
<    * @param vsync an int filled with the current vertical refresh sync interval.
<    *              See Renderer.SetVSync() for the meaning of the value.
---
>    * @returns the current vertical refresh sync interval on success.
1712,1713c1851,1852
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1729,1731c1868,1871
<    * This function will render a printf()-style format string to a renderer.
<    * Note that this is a convenience function for debugging, with severe
<    * limitations, and is not intended to be used for production apps and games.
---
>    * This function will render a std::format()-style format string to a
>    * renderer. Note that this is a convenience function for debugging, with
>    * severe limitations, and is not intended to be used for production apps and
>    * games.
1736,1737c1876,1877
<    * @param x the x coordinate where the top-left corner of the text will draw.
<    * @param y the y coordinate where the top-left corner of the text will draw.
---
>    * @param p the x, y coordinates where the top-left corner of the text will
>    *          draw.
1739,1740c1879,1880
<    * @param ... additional parameters matching % tokens in the `fmt` string, if
<    *            any.
---
>    * @param args additional parameters matching {} tokens in the `fmt` string,
>    *             if any.
1762,1763c1902
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
---
>    * @param size the width and height of the texture in pixels.
2063,2066c2202,2203
<    * @param w the width of the texture in pixels.
<    * @param h the height of the texture in pixels.
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @param size the width and height of the texture in pixels.
>    * @throws Error on failure.
2082c2219,2220
<     : m_resource(SDL_CreateTexture(renderer, format, access, size))
---
>     : m_resource(
>         CheckError(SDL_CreateTexture(renderer, format, access, size.x, size.y)))
2101,2102c2239
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2109d2245
<    * @sa Texture.Texture
2113c2249
<     : m_resource(SDL_CreateTextureFromSurface(renderer, surface))
---
>     : m_resource(CheckError(SDL_CreateTextureFromSurface(renderer, surface)))
2213,2214c2349
<    * @post the created texture or nullptr on failure; call GetError() for
<    *          more information.
---
>    * @throws Error on failure.
2228c2363
<     : m_resource(SDL_CreateTextureWithProperties(renderer, props))
---
>     : m_resource(CheckError(SDL_CreateTextureWithProperties(renderer, props)))
2253,2255d2387
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2297,2299d2428
<    * When done with the returned texture, the app should dispose of it with a
<    * call to Texture.Destroy().
<    *
2312c2441
<   Texture(RendererParam renderer, IOStreamParam src, bool closeio);
---
>   Texture(RendererParam renderer, IOStreamParam src, bool closeio = false);
2484c2613,2639
<   void SetMod(Color c) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   void SetMod(Color c)
>   {
>     SetColorMod(c.r, c.g, c.b);
>     SetAlphaMod(c.a);
>   }
2486c2641,2667
<   void SetModFloat(FColor c) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha values multiplied into render copy
>    * operations.
>    *
>    * When this texture is rendered, during the copy operation each source color
>    * and alpha channels are modulated by the appropriate color value according
>    * to the following formula:
>    *
>    *      srcC = srcC * (color / 255)
>    *      srcA = srcA * (alpha / 255)
>    *
>    * Color and alpha modulation is not always supported by the renderer; it will
>    * return false if either modulation is not supported.
>    *
>    * @param c the color and alpha channel values multiplied into copy
>    *          operations.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   void SetModFloat(FColor c)
>   {
>     SetColorMod(c.r, c.g, c.b);
>     SetAlphaMod(c.a);
>   }
2488c2669,2688
<   Color GetMod() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
>   Color GetMod() const
>   {
>     Color c;
>     GetColorMod(&c.r, &c.g, &c.b);
>     c.a = GetAlphaMod();
>     return c;
>   }
2490c2690,2709
<   FColor GetModFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color value multiplied into render copy operations.
>    *
>    * @returns the color channels (0-1) on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should only be called on the main thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetAlphaMod()
>    * @sa SetColorMod()
>    */
>   FColor GetModFloat() const
>   {
>     FColor c;
>     GetColorModFloat(&c.r, &c.g, &c.b);
>     c.a = GetAlphaModFloat();
>     return c;
>   }
2633c2852
<    * @param alpha a pointer filled in with the current alpha value.
---
>    * @returns the current alpha value.
2649c2868
<    * @param alpha a pointer filled in with the current alpha value.
---
>    * @returns the current alpha value.
2682c2901
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current SDL_BlendMode on success.
2714c2933
<    * @param scaleMode a pointer filled in with the current scale mode.
---
>    * @returns the current scale mode on success.
2873,2874c3092,3093
<    * @param surface a pointer to an SDL surface of size **rect**. Don't assume
<    *                any specific pixel content.
---
>    * @returns a surface of size **rect**. Don't assume any specific pixel
>    *          content.
2906c3125,3128
<   int GetWidth() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the width in pixels.
>    */
>   int GetWidth() const { return m_resource->w; }
2908c3130,3133
<   int GetHeight() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the height in pixels.
>    */
>   int GetHeight() const { return m_resource->h; }
2910c3135,3138
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   Point GetSize() const { return Point(GetWidth(), GetHeight()); }
2927c3155,3163
<   FPoint GetSizeFloat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   FPoint GetSizeFloat() const
>   {
>     FPoint p;
>     GetSize(&p.x, &p.y);
>     return p;
>   }
2929c3165,3168
<   PixelFormat GetFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixel format.
>    */
>   PixelFormat GetFormat() const { return m_resource->format; }
2983,2984c3222
<  * @param width the width of the window.
<  * @param height the height of the window.
---
>  * @param size the width and height of the window.
2987,2988c3225
<  * @param window a pointer filled with the window, or nullptr on error.
<  * @param renderer a pointer filled with the renderer, or nullptr on error.
---
>  * @returns a pair with window and renderer.
3003c3240,3244
<   return CheckError(SDL_CreateWindowAndRenderer(title, size, window_flags));
---
>   SDL_Window* window = nullptr;
>   SDL_Renderer* renderer = nullptr;
>   CheckError(SDL_CreateWindowAndRenderer(
>     title, size.x, size.y, window_flags, &window, &renderer));
>   return {Window{window}, Renderer(renderer)};
3221c3462
<   return CheckError(SDL_GetRenderer(m_resource));
---
>   return {CheckError(SDL_GetRenderer(m_resource))};
3237c3478
<   return CheckError(SDL_GetRenderWindow(renderer));
---
>   return {CheckError(SDL_GetRenderWindow(renderer))};
3355c3596
<   return CheckError(SDL_GetRendererProperties(renderer));
---
>   return {CheckError(SDL_GetRendererProperties(renderer))};
3431,3432c3672
<  * @param w the width of the texture in pixels.
<  * @param h the height of the texture in pixels.
---
>  * @param size the width and height of the texture in pixels.
3841c4081
<   return CheckError(SDL_GetTextureProperties(texture));
---
>   return {CheckError(SDL_GetTextureProperties(texture))};
3862c4102
<   return SDL_GetRendererFromTexture(texture);
---
>   return {SDL_GetRendererFromTexture(texture)};
4099c4339
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
4112c4352,4354
<   return CheckError(SDL_GetTextureAlphaMod(texture));
---
>   Uint8 alpha;
>   CheckError(SDL_GetTextureAlphaMod(texture, &alpha));
>   return alpha;
4124c4366
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
4137c4379,4381
<   return CheckError(SDL_GetTextureAlphaModFloat(texture));
---
>   float alpha;
>   CheckError(SDL_GetTextureAlphaModFloat(texture, &alpha));
>   return alpha;
4175c4419
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
4186c4430,4432
<   return CheckError(SDL_GetTextureBlendMode(texture));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetTextureBlendMode(texture, &blendMode));
>   return blendMode;
4225c4471
<  * @param scaleMode a pointer filled in with the current scale mode.
---
>  * @return the current scale mode.
4236c4482,4484
<   return CheckError(SDL_GetTextureScaleMode(texture));
---
>   ScaleMode scaleMode;
>   CheckError(SDL_GetTextureScaleMode(texture, &scaleMode));
>   return scaleMode;
4454,4455c4702
<  * @param surface a pointer to an SDL surface of size **rect**. Don't assume
<  *                any specific pixel content.
---
>  * @returns a surface of size **rect**. Don't assume any specific pixel content.
4469c4716,4718
<   return CheckError(SDL_LockTextureToSurface(texture, rect));
---
>   SurfaceRaw surface = nullptr;
>   CheckError(SDL_LockTextureToSurface(texture, rect, &surface));
>   return Surface::Borrow(surface);
4551c4800,4802
<   return SDL_GetRenderTarget(renderer);
---
>   TextureRaw texture = SDL_GetRenderTarget(renderer);
>   if (texture) return Texture::Borrow(texture);
>   return {};
4598,4599c4849
<  * @param w the width of the logical resolution.
<  * @param h the height of the logical resolution.
---
>  * @param size the width and height of the logical resolution.
4615c4865
<   CheckError(SDL_SetRenderLogicalPresentation(renderer, size, mode));
---
>   CheckError(SDL_SetRenderLogicalPresentation(renderer, size.x, size.y, mode));
4673,4674c4923
<  * @param rect a pointer filled in with the final presentation rectangle, may
<  *             be nullptr.
---
>  * @returns with the final presentation rectangle.
4685c4934,4936
<   return CheckError(SDL_GetRenderLogicalPresentationRect(renderer));
---
>   FRect rect;
>   CheckError(SDL_GetRenderLogicalPresentationRect(renderer, &rect));
>   return rect;
4704,4707c4955,4956
<  * @param window_x the x coordinate in window coordinates.
<  * @param window_y the y coordinate in window coordinates.
<  * @param x a pointer filled with the x coordinate in render coordinates.
<  * @param y a pointer filled with the y coordinate in render coordinates.
---
>  * @param window_coord the x, y coordinate in window coordinates.
>  * @returns the x, y coordinate in render coordinates.
4720c4969,4972
<   return CheckError(SDL_RenderCoordinatesFromWindow(renderer, window_coord));
---
>   FPoint p;
>   CheckError(SDL_RenderCoordinatesFromWindow(
>     renderer, window_coord.x, window_coord.y, &p.x, &p.y));
>   return p;
4740,4745c4992,4993
<  * @param x the x coordinate in render coordinates.
<  * @param y the y coordinate in render coordinates.
<  * @param window_x a pointer filled with the x coordinate in window
<  *                 coordinates.
<  * @param window_y a pointer filled with the y coordinate in window
<  *                 coordinates.
---
>  * @param coord the x, y coordinates in render coordinates.
>  * @returns x, y in window coordinates.
4759c5007,5010
<   return CheckError(SDL_RenderCoordinatesToWindow(renderer, coord));
---
>   FPoint p;
>   CheckError(
>     SDL_RenderCoordinatesToWindow(renderer, coord.x, coord.y, &p.x, &p.y));
>   return p;
4853c5104
<  * @param rect an Rect structure filled in with the current drawing area.
---
>  * @returns an Rect structure filled in with the current drawing area.
4865c5116,5118
<   return CheckError(SDL_GetRenderViewport(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderViewport(renderer, &rect));
>   return rect;
4914,4915c5167
<  * @param rect a pointer filled in with the area that is safe for interactive
<  *             content.
---
>  * @returns the area that is safe for interactive content.
4924c5176,5178
<   return CheckError(SDL_GetRenderSafeArea(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderSafeArea(renderer, &rect));
>   return rect;
4968,4969c5222,5223
<  * @param rect an Rect structure filled in with the current clipping area
<  *             or an empty rectangle if clipping is disabled.
---
>  * @returns an Rect structure filled in with the current clipping area
>  *          or an empty rectangle if clipping is disabled.
4981c5235,5237
<   return CheckError(SDL_GetRenderClipRect(renderer));
---
>   Rect rect;
>   CheckError(SDL_GetRenderClipRect(renderer, &rect));
>   return rect;
5031,5032c5287
<  * @param scaleX the horizontal scaling factor.
<  * @param scaleY the vertical scaling factor.
---
>  * @param scale the horizontal and vertical scaling factors.
5043c5298
<   CheckError(SDL_SetRenderScale(renderer, scale));
---
>   CheckError(SDL_SetRenderScale(renderer, scale.x, scale.y));
5085,5090c5340
<  * @param r the red value used to draw on the rendering target.
<  * @param g the green value used to draw on the rendering target.
<  * @param b the blue value used to draw on the rendering target.
<  * @param a the alpha value used to draw on the rendering target; usually
<  *          `ALPHA_OPAQUE` (255). Use Renderer.SetDrawBlendMode to
<  *          specify how the alpha channel is used.
---
>  * @param c the color used to draw on the rendering target.
5102c5352
<   CheckError(SDL_SetRenderDrawColor(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColor(renderer, c.r, c.g, c.b, c.a));
5117,5122c5367
<  * @param r the red value used to draw on the rendering target.
<  * @param g the green value used to draw on the rendering target.
<  * @param b the blue value used to draw on the rendering target.
<  * @param a the alpha value used to draw on the rendering target. Use
<  *          Renderer.SetDrawBlendMode to specify how the alpha channel is
<  *          used.
---
>  * @param c the color used to draw on the rendering target.
5134c5379
<   CheckError(SDL_SetRenderDrawColorFloat(renderer, c));
---
>   CheckError(SDL_SetRenderDrawColorFloat(renderer, c.r, c.g, c.b, c.a));
5250c5495
<  * @param scale a pointer filled in with the current color scale value.
---
>  * @return the current color scale value.
5261c5506,5508
<   return CheckError(SDL_GetRenderColorScale(renderer));
---
>   float scale;
>   CheckError(SDL_GetRenderColorScale(renderer, &scale));
>   return scale;
5298c5545
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @return the current BlendMode.
5309c5556,5558
<   return CheckError(SDL_GetRenderDrawBlendMode(renderer));
---
>   BlendMode blendMode;
>   CheckError(SDL_GetRenderDrawBlendMode(renderer, &blendMode));
>   return blendMode;
5345,5346c5594
<  * @param x the x coordinate of the point.
<  * @param y the y coordinate of the point.
---
>  * @param p the x, y coordinate of the point.
5357c5605
<   CheckError(SDL_RenderPoint(renderer, p));
---
>   CheckError(SDL_RenderPoint(renderer, p.x, p.y));
5370d5617
<  * @param count the number of points to draw.
5382c5629
<   CheckError(SDL_RenderPoints(renderer, points));
---
>   CheckError(SDL_RenderPoints(renderer, points.data(), points.size()));
5394,5397c5641,5642
<  * @param x1 the x coordinate of the start point.
<  * @param y1 the y coordinate of the start point.
<  * @param x2 the x coordinate of the end point.
<  * @param y2 the y coordinate of the end point.
---
>  * @param p1 the x,y coordinates of the start point.
>  * @param p2 the x,y coordinates of the end point.
5410c5655
<   CheckError(SDL_RenderLine(renderer, p1, p2));
---
>   CheckError(SDL_RenderLine(renderer, p1.x, p1.y, p2.x, p2.y));
5424d5668
<  * @param count the number of points, drawing count-1 lines.
5435c5679
<   CheckError(SDL_RenderLines(renderer, points));
---
>   CheckError(SDL_RenderLines(renderer, points.data(), points.size()));
5473d5716
<  * @param count the number of rectangles.
5484c5727
<   CheckError(SDL_RenderRects(renderer, rects));
---
>   CheckError(SDL_RenderRects(renderer, rects.data(), rects.size()));
5524d5766
<  * @param count the number of rectangles.
5536c5778
<   CheckError(SDL_RenderFillRects(renderer, rects));
---
>   CheckError(SDL_RenderFillRects(renderer, rects.data(), rects.size()));
5609c5851
<                                  FlipMode flip)
---
>                                  FlipMode flip = FlipMode::SDL_FLIP_NONE)
5793d6034
<  * @param num_vertices number of vertices.
5797d6037
<  * @param num_indices number of indices.
5809c6049
<                            std::span<const int> indices)
---
>                            std::span<const int> indices = {})
5811c6051,6056
<   CheckError(SDL_RenderGeometry(renderer, texture, vertices, indices));
---
>   CheckError(SDL_RenderGeometry(renderer,
>                                 texture,
>                                 vertices.data(),
>                                 vertices.size(),
>                                 indices.data(),
>                                 indices.size()));
5928c6173
<   return CheckError(SDL_RenderReadPixels(renderer, rect));
---
>   return Surface{CheckError(SDL_RenderReadPixels(renderer, rect))};
6199a6445
> /// Constant for disabling renderer vsync
6201a6448
> /// Constant for enabling asaptive renderer vsync
6208,6209c6455,6456
<  * @param vsync an int filled with the current vertical refresh sync interval.
<  *              See Renderer.SetVSync() for the meaning of the value.
---
>  * @returns the current vertical refresh sync interval. See Renderer.SetVSync()
>  *          for the meaning of the value.
6220c6467,6469
<   return CheckError(SDL_GetRenderVSync(renderer));
---
>   int vsync;
>   CheckError(SDL_GetRenderVSync(renderer, &vsync));
>   return vsync;
6265,6266c6514
<  * @param x the x coordinate where the top-left corner of the text will draw.
<  * @param y the y coordinate where the top-left corner of the text will draw.
---
>  * @param p the x,y coordinates where the top-left corner of the text will draw.
6281c6529
<   CheckError(SDL_RenderDebugText(renderer, p, str));
---
>   CheckError(SDL_RenderDebugText(renderer, p.x, p.y, str));
6300,6301c6548
<  * @param x the x coordinate where the top-left corner of the text will draw.
<  * @param y the y coordinate where the top-left corner of the text will draw.
---
>  * @param p the x,y coordinate where the top-left corner of the text will draw.
6303c6550
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
---
>  * @param args additional parameters matching % tokens in the `fmt` string, if
6320c6567,6568
<   CheckError(SDL_RenderDebugTextFormat(renderer, p, fmt, args));
---
>   RenderDebugText(
>     renderer, p, std::vformat(fmt, std::make_format_args(args...)));
6328c6576
<   SDL::RenderDebugTextFormat(m_resource, p, fmt, args);
---
>   SDL::RenderDebugTextFormat(m_resource, p, fmt, args...);
