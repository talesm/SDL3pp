4d3
< #include <SDL3/SDL_ttf.h>
9a9,17
> #if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
>   __has_include(<SDL3_ttf/SDL_ttf.h>)
> #define SDL3PP_ENABLE_TTF
> #endif
> 
> #if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
> 
> #include <SDL3_ttf/SDL_ttf.h>
> 
13c21
<  * @defgroup CategorySDLTTF Category SDLTTF
---
>  * @defgroup CategorySDLTTF True type font support
125,126c133,142
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_TTF_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
> 
> /**
>  * @name TTF version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_TTF_MAJOR_VERSION
> 
> #define SDL_TTF_MINOR_VERSION
128c144
< #define SDL_TTF_MINOR_VERSION 2
---
> #define SDL_TTF_MICRO_VERSION
130c146
< #define SDL_TTF_MICRO_VERSION 3
---
> ///@}
132c148,150
< /// This is the version number macro for the current SDL_ttf version.
---
> /**
>  * This is the version number macro for the current SDL_ttf version.
>  */
137c155,157
< /// This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
---
> /**
>  * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
>  */
143a164,165
> #endif // SDL3PP_DOC
> 
429,430d450
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
457,458d476
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
459a478
>    * @param ptsize point size to use for the newly-opened font.
462d480
<    * @param ptsize point size to use for the newly-opened font.
473c491
<     : m_resource(CheckError(TTF_OpenFontIO(src, ptsize, closeio)))
---
>     : m_resource(CheckError(TTF_OpenFontIO(src, closeio, ptsize)))
577d594
<    * @sa Font.Font
587,588d603
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
1350,1351c1365
<    * @param kerning a pointer filled in with the kerning size between the two
<    *                glyphs, in pixels, may be nullptr.
---
>    * @returns the kerning size between the two glyphs, in pixels.
1360a1375,1389
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @returns return a Point with the width, height.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1363c1392,1394
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSize(text, &p.x, &p.y);
>     return p;
1372d1402
<    * @param font the font to query.
1374,1375d1403
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1386a1415,1435
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * Text is wrapped to multiple lines on line endings and on word boundaries if
>    * it extends beyond `wrap_width` in pixels.
>    *
>    * If wrap_width is 0, this function will only wrap on newline characters.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @param wrap_width the maximum width or 0 to wrap on newline characters.
>    * @returns return a Point with the width, height on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1389c1438,1440
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSizeWrapped(text, wrap_width, &p.x, &p.y);
>     return p;
1403d1453
<    * @param font the font to query.
1405,1406d1454
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1430d1477
<    * @param font the font to query.
1432,1433d1478
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1469d1513
<    * @param font the font to render with.
1471,1472d1514
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1504d1545
<    * @param font the font to render with.
1506,1507d1546
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1573d1611
<    * @param font the font to render with.
1575,1576d1612
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1611,1612d1646
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1683,1684d1716
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1717,1718d1748
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1785,1786d1814
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1821,1822d1848
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1977c2003
<   ~TextEngine() { Destroy(m_resource); }
---
>   virtual ~TextEngine() = default;
1980c2006
<   TextEngine& operator=(TextEngine other)
---
>   TextEngine& operator=(TextEngine&& other)
1985a2012,2014
>   /// Assignment operator.
>   TextEngine& operator=(const TextEngine& other) = delete;
> 
2009,2096c2038
<   void Destroy() { static_assert(false, "Not implemented"); }
< 
<   /**
<    * Destroy a text engine created for drawing text on SDL surfaces.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa SurfaceTextEngine.SurfaceTextEngine
<    */
<   void DestroySurface();
< 
<   /**
<    * Destroy a text engine created for drawing text on an SDL renderer.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa RendererTextEngine.RendererTextEngine
<    */
<   void DestroyRenderer();
< 
<   /**
<    * Destroy a text engine created for drawing text with the SDL GPU API.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GPUTextEngine
<    */
<   void DestroyGPU();
< 
<   /**
<    * Sets the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine.
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @param winding the new winding order option.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GetGPUWinding
<    */
<   void SetGPUWinding(GPUTextEngineWinding winding);
< 
<   /**
<    * Get the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @returns the winding order used by the GPU text engine or
<    *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.SetGPUWinding
<    */
<   GPUTextEngineWinding GetGPUWinding() const;
---
>   virtual void Destroy() = 0;
2104,2105d2045
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
2116c2056
<   TextRef CreateText(FontParam font, StringParam text, size_t length);
---
>   Text CreateText(FontParam font, std::string_view text);
2135c2075
<     : T(TTF_CreateSurfaceTextEngine())
---
>     : TextEngine(TTF_CreateSurfaceTextEngine())
2157c2097
<   void Destroy();
---
>   void Destroy() final;
2179c2119
<     : T(TTF_CreateRendererTextEngine(renderer))
---
>     : TextEngine(TTF_CreateRendererTextEngine(renderer))
2208c2148
<     : T(TTF_CreateRendererTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateRendererTextEngineWithProperties(props))
2249,2250c2189,2190
<    * @sa TextEngine.DestroyGPU
<    * @sa Text.GetGPUDrawData
---
>    * @sa GPUTextEngine.Destroy
>    * @sa GPUTextEngine.GetGPUDrawData
2253c2193
<     : T(TTF_CreateGPUTextEngine(device))
---
>     : TextEngine(TTF_CreateGPUTextEngine(device))
2282c2222
<     : T(TTF_CreateGPUTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateGPUTextEngineWithProperties(props))
2292,2293d2231
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2303,2304c2241
<   static void SetGPUWinding(TextEngineParam engine,
<                             GPUTextEngineWinding winding);
---
>   void SetGPUWinding(GPUTextEngineWinding winding);
2322c2259
<   GPUTextEngineWinding GetGPUWinding(TextEngineParam engine) const;
---
>   GPUTextEngineWinding GetGPUWinding() const;
2406a2344
>  * @param ptsize point size to use for the newly-opened font.
2409d2346
<  * @param ptsize point size to use for the newly-opened font.
2528c2465
<   return CheckError(TTF_CopyFont(existing_font));
---
>   return Font(CheckError(TTF_CopyFont(existing_font)));
2557c2494
<   return CheckError(TTF_GetFontProperties(font));
---
>   return {CheckError(TTF_GetFontProperties(font))};
3563c3500
<   return TTF_GetGlyphImage(font, ch, image_type);
---
>   return Surface{TTF_GetGlyphImage(font, ch, image_type)};
3593c3530
<   return TTF_GetGlyphImageForIndex(font, glyph_index, image_type);
---
>   return Surface(TTF_GetGlyphImageForIndex(font, glyph_index, image_type));
3668c3605,3606
<   return CheckError(TTF_GetGlyphKerning(font, previous_ch, ch));
---
>   if (int r; TTF_GetGlyphKerning(font, previous_ch, ch, &r)) return r;
>   throw Error();
3697c3635
<   CheckError(TTF_GetStringSize(font, text, w, h));
---
>   CheckError(TTF_GetStringSize(font, text.data(), text.size(), w, h));
3736c3674,3675
<   CheckError(TTF_GetStringSizeWrapped(font, text, wrap_width, w, h));
---
>   CheckError(
>     TTF_GetStringSizeWrapped(font, text.data(), text.size(), wrap_width, w, h));
3778,3779c3717,3722
<   CheckError(
<     TTF_MeasureString(font, text, max_width, measured_width, measured_length));
---
>   CheckError(TTF_MeasureString(font,
>                                text.data(),
>                                text.size(),
>                                max_width,
>                                measured_width,
>                                measured_length));
3828c3771
<   return TTF_RenderText_Solid(font, text, fg);
---
>   return Surface{TTF_RenderText_Solid(font, text.data(), text.size(), fg)};
3875c3818,3819
<   return TTF_RenderText_Solid_Wrapped(font, text, fg, wrapLength);
---
>   return Surface(TTF_RenderText_Solid_Wrapped(
>     font, text.data(), text.size(), fg, wrapLength));
3914c3858
<   return TTF_RenderGlyph_Solid(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Solid(font, ch, fg));
3963c3907
<   return TTF_RenderText_Shaded(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_Shaded(font, text.data(), text.size(), fg, bg));
4015c3959,3960
<   return TTF_RenderText_Shaded_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_Shaded_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4060c4005
<   return TTF_RenderGlyph_Shaded(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_Shaded(font, ch, fg, bg));
4108c4053
<   return TTF_RenderText_Blended(font, text, fg);
---
>   return Surface(TTF_RenderText_Blended(font, text.data(), text.size(), fg));
4155c4100,4101
<   return TTF_RenderText_Blended_Wrapped(font, text, fg, wrap_width);
---
>   return Surface(TTF_RenderText_Blended_Wrapped(
>     font, text.data(), text.size(), fg, wrap_width));
4194c4140
<   return TTF_RenderGlyph_Blended(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Blended(font, ch, fg));
4242c4188
<   return TTF_RenderText_LCD(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_LCD(font, text.data(), text.size(), fg, bg));
4294c4240,4241
<   return TTF_RenderText_LCD_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_LCD_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4339c4286
<   return TTF_RenderGlyph_LCD(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_LCD(font, ch, fg, bg));
4398,4399d4344
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4411c4356
<     : m_resource(TTF_CreateText(engine, font, text))
---
>     : m_resource(TTF_CreateText(engine, font, text.data(), text.size()))
4442c4387
<   /// Converts to bool
---
>   /// converts to bool
4467d4411
<    * @param text the text to draw.
4492d4435
<    * @param text the text to draw.
4693,4697c4636
<    * @param text the Text to modify.
<    * @param r the red color value in the range of 0-255.
<    * @param g the green color value in the range of 0-255.
<    * @param b the blue color value in the range of 0-255.
<    * @param a the alpha value in the range of 0-255.
---
>    * @param c the color values in the range of 0-255.
4715,4719c4654
<    * @param text the Text to modify.
<    * @param r the red color value, normally in the range of 0-1.
<    * @param g the green color value, normally in the range of 0-1.
<    * @param b the blue color value, normally in the range of 0-1.
<    * @param a the alpha value in the range of 0-1.
---
>    * @param c the color value, normally in the range of 0-1.
4758,4766c4693
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value in the range of
<    *          0-255, may be nullptr.
<    * @param g a pointer filled in with the green color value in the range of
<    *          0-255, may be nullptr.
<    * @param b a pointer filled in with the blue color value in the range of
<    *          0-255, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-255,
<    *          may be nullptr.
---
>    * @return The color in the range of 0-255 on success.
4777c4704
<   Color GetColor();
---
>   Color GetColor() const;
4805,4813c4732
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param g a pointer filled in with the green color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param b a pointer filled in with the blue color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-1, may
<    *          be nullptr.
---
>    * @return The color in the range of 0-1 on success.
4824c4743
<   FColor GetColorFloat();
---
>   FColor GetColorFloat() const;
4834,4836c4753
<    * @param text the Text to modify.
<    * @param x the x offset of the upper left corner of this text in pixels.
<    * @param y the y offset of the upper left corner of this text in pixels.
---
>    * @param p the x, y offset of the upper left corner of this text in pixels.
4867,4871c4784,4786
<    * @param text the Text to query.
<    * @param x a pointer filled in with the x offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
<    * @param y a pointer filled in with the y offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
---
>    * @returns a Point with the offset of the upper left corner of this text in
>    *          pixels on success.
>    * @throws Error on failure.
4880c4795
<   Point GetPosition();
---
>   Point GetPosition() const;
4903,4905c4818,4819
<    * @param text the Text to query.
<    * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<    *                   if the text is being wrapped on newline characters.
---
>    * @returns an int with the maximum width in pixels or 0 if the text is being
>    *          wrapped on newline characters on success.
4960,4963c4874
<    * @param text the Text to modify.
<    * @param string the UTF-8 text to use, may be nullptr.
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
---
>    * @param string the UTF-8 text to use.
4982d4892
<    * @param text the Text to modify.
4988,4989d4897
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5008d4915
<    * @param text the Text to modify.
5010,5011d4916
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5074,5078c4979
<    * @param text the Text to query.
<    * @param w a pointer filled in with the width of the text, in pixels, may be
<    *          nullptr.
<    * @param h a pointer filled in with the height of the text, in pixels, may be
<    *          nullptr.
---
>    * @returns Point containing the size on x and y axis on success.
5084a4986,4987
>    *
>    * @sa GetSize(int*,int*) if might want only one of the coordinates
5086c4989
<   Point GetSize();
---
>   Point GetSize() const;
5109c5012,5015
<   SubStringIterator begin() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to first substring
>    */
>   SubStringIterator begin() const;
5111c5017,5020
<   SubStringIterator end() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to one past last substring
>    */
>   SubStringIterator end() const;
5113,5116c5022,5037
<   SubStringIterator GetSubStringForLine(int line) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Get iterator to substring of a text object that contains the given line.
>    *
>    * If `line` is greater than or equal to `text->num_lines` this will return an
>    * iterator equal to end().
>    *
>    * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
>    * @returns iterator on success or false on failure; call GetError() for more
>    *          information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForLine(int line) const;
5141c5062
<     static_assert(false, "Not implemented");
---
>     return GetSubStringsForRange(0);
5161c5082
<   OwnArray<SubString*> GetSubStringsForRange(int offset, int length) const;
---
>   OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const;
5163,5166c5084
<   SubStringIterator GetSubStringForPoint(Point p) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   SubStringIterator GetSubStringForPoint(Point p) const;
5173,5176c5091
<    * @param text the Text to query.
<    * @param x the x coordinate relative to the left side of the text, may be
<    *          outside the bounds of the text area.
<    * @param y the y coordinate relative to the top side of the text, may be
---
>    * @param p the coordinates relative to the top-left side of the text, may be
5205c5120
<   void GetPreviousSubString(const SubString* substring,
---
>   void GetPreviousSubString(const SubString& substring,
5223c5138
<   void GetNextSubString(const SubString* substring, SubString* next) const;
---
>   void GetNextSubString(const SubString& substring, SubString* next) const;
5245c5160
<   const char* GetText() const { static_assert(false, "Not implemented"); }
---
>   const char* GetText() const { return m_resource->text; }
5248c5163
<   int GetNumLines() const { static_assert(false, "Not implemented"); }
---
>   int GetNumLines() const { return m_resource->num_lines; }
5261c5176
<   TextRef(TextParam resource)
---
>   TextRef(TextParam resource = nullptr)
5275a5191,5194
> /**
>  * Iterator for substrings
>  *
>  */
5282c5201,5205
<   constexpr SubStringIterator(TextRef text) {}
---
>   constexpr SubStringIterator(TextRef text)
>     : m_text(text)
>     , m_subString(0)
>   {
>   }
5285,5289c5208,5210
<   constexpr SubStringIterator() {}
< 
<   constexpr operator bool() const { static_assert(false, "Not implemented"); }
< 
<   constexpr const SubString& operator*() const
---
>   /// Default constructor.
>   constexpr SubStringIterator()
>     : SubStringIterator(TextRef{})
5291d5211
<     static_assert(false, "Not implemented");
5294c5214,5224
<   constexpr const SubString* operator->() const
---
>   /// True if pointing to valid SubString.
>   constexpr operator bool() const { return bool(m_text); }
> 
>   /// Retrieve SubString
>   constexpr const SubString& operator*() const { return m_subString; }
> 
>   /// Retrieve SubString.
>   constexpr const SubString* operator->() const { return &m_subString; }
> 
>   /// Comparison.
>   constexpr bool operator==(const SubStringIterator& other) const
5296c5226
<     static_assert(false, "Not implemented");
---
>     return m_subString.offset == other.m_subString.offset;
5299,5300c5229
<   constexpr bool operator==(const SubStringIterator& other) const = default;
< 
---
>   /// Increment operator.
5303c5232,5233
<     static_assert(false, "Not implemented");
---
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return *this;
5305a5236
>   /// Increment operator.
5308c5239,5241
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return curr;
5310a5244
>   /// Decrement operator.
5313c5247,5248
<     static_assert(false, "Not implemented");
---
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return *this;
5315a5251
>   /// Decrement operator.
5318c5254,5256
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return curr;
5319a5258,5259
> 
>   friend class Text;
5347,5350c5287,5288
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5364c5302
<   CheckError(TTF_DrawSurfaceText(text, p, surface));
---
>   CheckError(TTF_DrawSurfaceText(text, p.x, p.y, surface));
5372,5376d5309
< inline void SurfaceTextEngine::Destroy()
< {
<   DestroySurfaceTextEngine(release());
< }
< 
5398c5331
< inline void TextEngine::DestroySurface()
---
> inline void SurfaceTextEngine::Destroy()
5472,5475c5405,5406
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5484c5415
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5488c5419
<   CheckError(TTF_DrawRendererText(text, p));
---
>   CheckError(TTF_DrawRendererText(text, p.x, p.y));
5496,5500d5426
< inline void RendererTextEngine::Destroy()
< {
<   DestroyRendererTextEngine(release());
< }
< 
5522c5448
< inline void TextEngine::DestroyRenderer()
---
> inline void RendererTextEngine::Destroy()
5612c5538
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5624,5625d5549
< inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
< 
5647,5652c5571
< inline void TextEngine::DestroyGPU() { DestroyGPUTextEngine(release()); }
< 
< inline void TextEngine::SetGPUWinding(GPUTextEngineWinding winding)
< {
<   SDL::SetGPUTextEngineWinding(m_resource, winding);
< }
---
> inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
5675,5681c5594
< inline void GPUTextEngine::SetGPUWinding(TextEngineParam engine,
<                                          GPUTextEngineWinding winding)
< {
<   SDL::TextEngine::SetGPUWinding(engine, winding);
< }
< 
< inline GPUTextEngineWinding TextEngine::GetGPUWinding() const
---
> inline void GPUTextEngine::SetGPUWinding(GPUTextEngineWinding winding)
5683c5596
<   return SDL::GetGPUTextEngineWinding(m_resource);
---
>   SDL::SetGPUTextEngineWinding(get(), winding);
5707,5708c5620
< inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding(
<   TextEngineParam engine) const
---
> inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding() const
5710c5622
<   return SDL::TextEngine::GetGPUWinding(engine);
---
>   return SDL::GetGPUTextEngineWinding(get());
5713,5715c5625
< inline TextRef TextEngine::CreateText(FontParam font,
<                                       StringParam text,
<                                       size_t length)
---
> inline Text TextEngine::CreateText(FontParam font, std::string_view text)
5717c5627
<   return Text(m_resource, font, std::move(text), length);
---
>   return Text(m_resource, font, text);
5727,5728d5636
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
5741,5742c5649
<                        StringParam text,
<                        size_t length)
---
>                        std::string_view text)
5744c5651
<   return Text(TTF_CreateText(engine, font, text, length));
---
>   return Text(engine, font, text);
5761c5668
<   return CheckError(TTF_GetTextProperties(text));
---
>   return {CheckError(TTF_GetTextProperties(text))};
5866c5773
<   return CheckError(TTF_GetTextFont(text));
---
>   return {CheckError(TTF_GetTextFont(text))};
5992c5899
<   CheckError(TTF_SetTextColor(text, c));
---
>   CheckError(TTF_SetTextColor(text, c.r, c.g, c.b, c.a));
6019c5926
<   CheckError(TTF_SetTextColorFloat(text, c));
---
>   CheckError(TTF_SetTextColorFloat(text, c.r, c.g, c.b, c.a));
6058,6065c5965
<  * @param r a pointer filled in with the red color value in the range of
<  *          0-255, may be nullptr.
<  * @param g a pointer filled in with the green color value in the range of
<  *          0-255, may be nullptr.
<  * @param b a pointer filled in with the blue color value in the range of
<  *          0-255, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-255,
<  *          may be nullptr.
---
>  * @return The color in the range of 0-255 on success.
6078c5978,5980
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextColor(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6086c5988
< inline Color Text::GetColor() { return SDL::GetTextColor(m_resource); }
---
> inline Color Text::GetColor() const { return SDL::GetTextColor(m_resource); }
6123,6130c6025
<  * @param r a pointer filled in with the red color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param g a pointer filled in with the green color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param b a pointer filled in with the blue color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-1, may
<  *          be nullptr.
---
>  * @return The color in the range of 0-1 on success.
6143c6038,6040
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextColorFloat(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6151c6048
< inline FColor Text::GetColorFloat()
---
> inline FColor Text::GetColorFloat() const
6165,6166c6062
<  * @param x the x offset of the upper left corner of this text in pixels.
<  * @param y the y offset of the upper left corner of this text in pixels.
---
>  * @param p the x, y offset of the upper left corner of this text in pixels.
6177c6073
<   return TTF_SetTextPosition(text, p);
---
>   return TTF_SetTextPosition(text, p.x, p.y);
6210,6213c6106,6109
<  * @param x a pointer filled in with the x offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
<  * @param y a pointer filled in with the y offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
---
>  * @returns a Point with the offset of the upper left corner of this text in
>  *          pixels on success.
>  * @throws Error on failure.
>  *
6224c6120,6122
<   static_assert(false, "Not implemented");
---
>   Point p;
>   CheckError(GetTextPosition(text, &p.x, &p.y));
>   return p;
6232c6130,6133
< inline Point Text::GetPosition() { return SDL::GetTextPosition(m_resource); }
---
> inline Point Text::GetPosition() const
> {
>   return SDL::GetTextPosition(m_resource);
> }
6278c6179,6181
<   return CheckError(TTF_GetTextWrapWidth(text));
---
>   int w;
>   CheckError(TTF_GetTextWrapWidth(text, &w));
>   return w;
6364c6267
<   CheckError(TTF_SetTextString(text, string));
---
>   CheckError(TTF_SetTextString(text, string.data(), string.size()));
6400c6303
<   CheckError(TTF_InsertTextString(text, offset, string));
---
>   CheckError(TTF_InsertTextString(text, offset, string.data(), string.size()));
6430c6333
<   CheckError(TTF_AppendTextString(text, string));
---
>   CheckError(TTF_AppendTextString(text, string.data(), string.size()));
6501,6504c6404,6405
<  * @param w a pointer filled in with the width of the text, in pixels, may be
<  *          nullptr.
<  * @param h a pointer filled in with the height of the text, in pixels, may be
<  *          nullptr.
---
>  * @returns Point containing the size on x and y axis on success or
>  *          std::nullopt on failure; call GetError() for more information.
6514c6415,6417
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetTextSize(text, &p.x, &p.y);
>   return p;
6522c6425
< inline Point Text::GetSize() { return SDL::GetTextSize(m_resource); }
---
> inline Point Text::GetSize() const { return SDL::GetTextSize(m_resource); }
6593,6594d6495
<  * @param count a pointer filled in with the number of substrings returned,
<  *              may be nullptr.
6608c6509,6511
<   return TTF_GetTextSubStringsForRange(text, offset, length);
---
>   int count = 0;
>   auto data = TTF_GetTextSubStringsForRange(text, offset, length, &count);
>   return OwnArray<SubString*>{data, size_t(count)};
6623,6625c6526
<  * @param x the x coordinate relative to the left side of the text, may be
<  *          outside the bounds of the text area.
<  * @param y the y coordinate relative to the top side of the text, may be
---
>  * @param p the coordinates relative to the top-left side of the text, may be
6640c6541
<   CheckError(TTF_GetTextSubStringForPoint(text, p, substring));
---
>   CheckError(TTF_GetTextSubStringForPoint(text, p.x, p.y, substring));
6666c6567
<                                      const SubString* substring,
---
>                                      const SubString& substring,
6669c6570
<   CheckError(TTF_GetPreviousTextSubString(text, substring, previous));
---
>   CheckError(TTF_GetPreviousTextSubString(text, &substring, previous));
6672c6573
< inline void Text::GetPreviousSubString(const SubString* substring,
---
> inline void Text::GetPreviousSubString(const SubString& substring,
6695c6596
<                                  const SubString* substring,
---
>                                  const SubString& substring,
6698c6599
<   CheckError(TTF_GetNextTextSubString(text, substring, next));
---
>   CheckError(TTF_GetNextTextSubString(text, &substring, next));
6701c6602
< inline void Text::GetNextSubString(const SubString* substring,
---
> inline void Text::GetNextSubString(const SubString& substring,
6736c6637
<  * @sa Text.Text
---
>  * @sa RendererTextEngine.RendererTextEngine
6778a6680,6681
> 
> #endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
