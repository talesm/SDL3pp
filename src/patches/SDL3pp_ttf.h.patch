4d3
< #include <SDL3/SDL_ttf.h>
9a9,17
> #if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
>   __has_include(<SDL3_ttf/SDL_ttf.h>)
> #define SDL3PP_ENABLE_TTF
> #endif
> 
> #if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
> 
> #include <SDL3_ttf/SDL_ttf.h>
> 
13c21
<  * @defgroup CategorySDLTTF Category SDLTTF
---
>  * @defgroup CategorySDLTTF True type font support
107,108c115,124
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_TTF_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
> 
> /**
>  * @name TTF version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_TTF_MAJOR_VERSION
> 
> #define SDL_TTF_MINOR_VERSION
110c126
< #define SDL_TTF_MINOR_VERSION 2
---
> #define SDL_TTF_MICRO_VERSION
112c128
< #define SDL_TTF_MICRO_VERSION 3
---
> ///@}
114c130,132
< /// This is the version number macro for the current SDL_ttf version.
---
> /**
>  * This is the version number macro for the current SDL_ttf version.
>  */
119c137,139
< /// This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
---
> /**
>  * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
>  */
125a146,147
> #endif // SDL3PP_DOC
> 
411,412d432
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
439,440d458
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
441a460
>    * @param ptsize point size to use for the newly-opened font.
444d462
<    * @param ptsize point size to use for the newly-opened font.
455c473
<     : m_resource(CheckError(TTF_OpenFontIO(src, ptsize, closeio)))
---
>     : m_resource(CheckError(TTF_OpenFontIO(src, closeio, ptsize)))
553d570
<    * @sa Font.Font
563,564d579
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
1326,1327c1341
<    * @param kerning a pointer filled in with the kerning size between the two
<    *                glyphs, in pixels, may be nullptr.
---
>    * @returns the kerning size between the two glyphs, in pixels.
1336a1351,1365
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @returns return a Point with the width, height.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1339c1368,1370
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSize(text, &p.x, &p.y);
>     return p;
1348d1378
<    * @param font the font to query.
1350,1351d1379
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1362a1391,1411
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * Text is wrapped to multiple lines on line endings and on word boundaries if
>    * it extends beyond `wrap_width` in pixels.
>    *
>    * If wrap_width is 0, this function will only wrap on newline characters.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @param wrap_width the maximum width or 0 to wrap on newline characters.
>    * @returns return a Point with the width, height on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1365c1414,1416
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSizeWrapped(text, wrap_width, &p.x, &p.y);
>     return p;
1379d1429
<    * @param font the font to query.
1381,1382d1430
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1406d1453
<    * @param font the font to query.
1408,1409d1454
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1445d1489
<    * @param font the font to render with.
1447,1448d1490
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1480d1521
<    * @param font the font to render with.
1482,1483d1522
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1549d1587
<    * @param font the font to render with.
1551,1552d1588
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1587,1588d1622
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1659,1660d1692
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1693,1694d1724
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1761,1762d1790
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1797,1798d1824
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1947c1973
<   ~TextEngine() { Destroy(m_resource); }
---
>   virtual ~TextEngine() = default;
1950c1976
<   TextEngine& operator=(TextEngine other)
---
>   TextEngine& operator=(TextEngine&& other)
1955a1982,1984
>   /// Assignment operator.
>   TextEngine& operator=(const TextEngine& other) = delete;
> 
1973,2060c2002
<   void Destroy() { static_assert(false, "Not implemented"); }
< 
<   /**
<    * Destroy a text engine created for drawing text on SDL surfaces.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa SurfaceTextEngine.SurfaceTextEngine
<    */
<   void DestroySurface();
< 
<   /**
<    * Destroy a text engine created for drawing text on an SDL renderer.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa RendererTextEngine.RendererTextEngine
<    */
<   void DestroyRenderer();
< 
<   /**
<    * Destroy a text engine created for drawing text with the SDL GPU API.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GPUTextEngine
<    */
<   void DestroyGPU();
< 
<   /**
<    * Sets the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine.
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @param winding the new winding order option.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GetGPUWinding
<    */
<   void SetGPUWinding(GPUTextEngineWinding winding);
< 
<   /**
<    * Get the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @returns the winding order used by the GPU text engine or
<    *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.SetGPUWinding
<    */
<   GPUTextEngineWinding GetGPUWinding() const;
---
>   virtual void Destroy() = 0;
2068,2069d2009
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
2080c2020
<   TextRef CreateText(FontParam font, StringParam text, size_t length);
---
>   Text CreateText(FontParam font, std::string_view text);
2099c2039
<     : T(TTF_CreateSurfaceTextEngine())
---
>     : TextEngine(TTF_CreateSurfaceTextEngine())
2121c2061
<   void Destroy();
---
>   void Destroy() final;
2143c2083
<     : T(TTF_CreateRendererTextEngine(renderer))
---
>     : TextEngine(TTF_CreateRendererTextEngine(renderer))
2172c2112
<     : T(TTF_CreateRendererTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateRendererTextEngineWithProperties(props))
2213,2214c2153,2154
<    * @sa TextEngine.DestroyGPU
<    * @sa Text.GetGPUDrawData
---
>    * @sa GPUTextEngine.Destroy
>    * @sa GPUTextEngine.GetGPUDrawData
2217c2157
<     : T(TTF_CreateGPUTextEngine(device))
---
>     : TextEngine(TTF_CreateGPUTextEngine(device))
2246c2186
<     : T(TTF_CreateGPUTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateGPUTextEngineWithProperties(props))
2256,2257d2195
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2267,2268c2205
<   static void SetGPUWinding(TextEngineParam engine,
<                             GPUTextEngineWinding winding);
---
>   void SetGPUWinding(GPUTextEngineWinding winding);
2286c2223
<   GPUTextEngineWinding GetGPUWinding(TextEngineParam engine) const;
---
>   GPUTextEngineWinding GetGPUWinding() const;
2492c2429
<   return CheckError(TTF_CopyFont(existing_font));
---
>   return Font(CheckError(TTF_CopyFont(existing_font)));
2521c2458
<   return CheckError(TTF_GetFontProperties(font));
---
>   return {CheckError(TTF_GetFontProperties(font))};
3527c3464
<   return TTF_GetGlyphImage(font, ch, image_type);
---
>   return Surface{TTF_GetGlyphImage(font, ch, image_type)};
3557c3494
<   return TTF_GetGlyphImageForIndex(font, glyph_index, image_type);
---
>   return Surface(TTF_GetGlyphImageForIndex(font, glyph_index, image_type));
3632c3569,3570
<   return CheckError(TTF_GetGlyphKerning(font, previous_ch, ch));
---
>   if (int r; TTF_GetGlyphKerning(font, previous_ch, ch, &r)) return r;
>   throw Error();
3661c3599
<   CheckError(TTF_GetStringSize(font, text, w, h));
---
>   CheckError(TTF_GetStringSize(font, text.data(), text.size(), w, h));
3700c3638,3639
<   CheckError(TTF_GetStringSizeWrapped(font, text, wrap_width, w, h));
---
>   CheckError(
>     TTF_GetStringSizeWrapped(font, text.data(), text.size(), wrap_width, w, h));
3742,3743c3681,3686
<   CheckError(
<     TTF_MeasureString(font, text, max_width, measured_width, measured_length));
---
>   CheckError(TTF_MeasureString(font,
>                                text.data(),
>                                text.size(),
>                                max_width,
>                                measured_width,
>                                measured_length));
3792c3735
<   return TTF_RenderText_Solid(font, text, fg);
---
>   return Surface{TTF_RenderText_Solid(font, text.data(), text.size(), fg)};
3839c3782,3783
<   return TTF_RenderText_Solid_Wrapped(font, text, fg, wrapLength);
---
>   return Surface(TTF_RenderText_Solid_Wrapped(
>     font, text.data(), text.size(), fg, wrapLength));
3878c3822
<   return TTF_RenderGlyph_Solid(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Solid(font, ch, fg));
3927c3871
<   return TTF_RenderText_Shaded(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_Shaded(font, text.data(), text.size(), fg, bg));
3979c3923,3924
<   return TTF_RenderText_Shaded_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_Shaded_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4024c3969
<   return TTF_RenderGlyph_Shaded(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_Shaded(font, ch, fg, bg));
4072c4017
<   return TTF_RenderText_Blended(font, text, fg);
---
>   return Surface(TTF_RenderText_Blended(font, text.data(), text.size(), fg));
4119c4064,4065
<   return TTF_RenderText_Blended_Wrapped(font, text, fg, wrap_width);
---
>   return Surface(TTF_RenderText_Blended_Wrapped(
>     font, text.data(), text.size(), fg, wrap_width));
4158c4104
<   return TTF_RenderGlyph_Blended(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Blended(font, ch, fg));
4206c4152
<   return TTF_RenderText_LCD(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_LCD(font, text.data(), text.size(), fg, bg));
4258c4204,4205
<   return TTF_RenderText_LCD_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_LCD_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4303c4250
<   return TTF_RenderGlyph_LCD(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_LCD(font, ch, fg, bg));
4362,4363d4308
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4375c4320
<     : m_resource(TTF_CreateText(engine, font, text))
---
>     : m_resource(TTF_CreateText(engine, font, text.data(), text.size()))
4400c4345
<   /// Converts to bool
---
>   /// converts to bool
4425d4369
<    * @param text the text to draw.
4450d4393
<    * @param text the text to draw.
4651,4655c4594
<    * @param text the Text to modify.
<    * @param r the red color value in the range of 0-255.
<    * @param g the green color value in the range of 0-255.
<    * @param b the blue color value in the range of 0-255.
<    * @param a the alpha value in the range of 0-255.
---
>    * @param c the color values in the range of 0-255.
4673,4677c4612
<    * @param text the Text to modify.
<    * @param r the red color value, normally in the range of 0-1.
<    * @param g the green color value, normally in the range of 0-1.
<    * @param b the blue color value, normally in the range of 0-1.
<    * @param a the alpha value in the range of 0-1.
---
>    * @param c the color value, normally in the range of 0-1.
4716,4724c4651
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value in the range of
<    *          0-255, may be nullptr.
<    * @param g a pointer filled in with the green color value in the range of
<    *          0-255, may be nullptr.
<    * @param b a pointer filled in with the blue color value in the range of
<    *          0-255, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-255,
<    *          may be nullptr.
---
>    * @return The color in the range of 0-255 on success.
4735c4662
<   Color GetColor();
---
>   Color GetColor() const;
4763,4771c4690
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param g a pointer filled in with the green color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param b a pointer filled in with the blue color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-1, may
<    *          be nullptr.
---
>    * @return The color in the range of 0-1 on success.
4782c4701
<   FColor GetColorFloat();
---
>   FColor GetColorFloat() const;
4792,4794c4711
<    * @param text the Text to modify.
<    * @param x the x offset of the upper left corner of this text in pixels.
<    * @param y the y offset of the upper left corner of this text in pixels.
---
>    * @param p the x, y offset of the upper left corner of this text in pixels.
4825,4829c4742,4744
<    * @param text the Text to query.
<    * @param x a pointer filled in with the x offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
<    * @param y a pointer filled in with the y offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
---
>    * @returns a Point with the offset of the upper left corner of this text in
>    *          pixels on success.
>    * @throws Error on failure.
4838c4753
<   Point GetPosition();
---
>   Point GetPosition() const;
4861,4863c4776,4777
<    * @param text the Text to query.
<    * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<    *                   if the text is being wrapped on newline characters.
---
>    * @returns an int with the maximum width in pixels or 0 if the text is being
>    *          wrapped on newline characters on success.
4918,4921c4832
<    * @param text the Text to modify.
<    * @param string the UTF-8 text to use, may be nullptr.
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
---
>    * @param string the UTF-8 text to use.
4940d4850
<    * @param text the Text to modify.
4946,4947d4855
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4966d4873
<    * @param text the Text to modify.
4968,4969d4874
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5032,5036c4937
<    * @param text the Text to query.
<    * @param w a pointer filled in with the width of the text, in pixels, may be
<    *          nullptr.
<    * @param h a pointer filled in with the height of the text, in pixels, may be
<    *          nullptr.
---
>    * @returns Point containing the size on x and y axis on success.
5042a4944,4945
>    *
>    * @sa GetSize(int*,int*) if might want only one of the coordinates
5044c4947
<   Point GetSize();
---
>   Point GetSize() const;
5067c4970,4973
<   SubStringIterator begin() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to first substring
>    */
>   SubStringIterator begin() const;
5069c4975,4978
<   SubStringIterator end() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to one past last substring
>    */
>   SubStringIterator end() const;
5071,5074c4980,4995
<   SubStringIterator GetSubStringForLine(int line) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Get iterator to substring of a text object that contains the given line.
>    *
>    * If `line` is greater than or equal to `text->num_lines` this will return an
>    * iterator equal to end().
>    *
>    * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
>    * @returns iterator on success or false on failure; call GetError() for more
>    *          information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForLine(int line) const;
5099c5020
<     static_assert(false, "Not implemented");
---
>     return GetSubStringsForRange(0);
5119c5040
<   OwnArray<SubString*> GetSubStringsForRange(int offset, int length) const;
---
>   OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const;
5121,5124c5042
<   SubStringIterator GetSubStringForPoint(Point p) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   SubStringIterator GetSubStringForPoint(Point p) const;
5131,5134c5049
<    * @param text the Text to query.
<    * @param x the x coordinate relative to the left side of the text, may be
<    *          outside the bounds of the text area.
<    * @param y the y coordinate relative to the top side of the text, may be
---
>    * @param p the coordinates relative to the top-left side of the text, may be
5163c5078
<   void GetPreviousSubString(const SubString* substring,
---
>   void GetPreviousSubString(const SubString& substring,
5181c5096
<   void GetNextSubString(const SubString* substring, SubString* next) const;
---
>   void GetNextSubString(const SubString& substring, SubString* next) const;
5203c5118
<   const char* GetText() const { static_assert(false, "Not implemented"); }
---
>   const char* GetText() const { return m_resource->text; }
5206c5121
<   int GetNumLines() const { static_assert(false, "Not implemented"); }
---
>   int GetNumLines() const { return m_resource->num_lines; }
5219c5134
<   TextRef(TextParam resource)
---
>   TextRef(TextParam resource = nullptr)
5223a5139,5144
>   /// Copy constructor.
>   TextRef(const TextRef& other)
>     : Text(other.get())
>   {
>   }
> 
5227a5149,5152
> /**
>  * Iterator for substrings
>  *
>  */
5234c5159,5163
<   constexpr SubStringIterator(TextRef text) {}
---
>   constexpr SubStringIterator(TextRef text)
>     : m_text(text)
>     , m_subString(0)
>   {
>   }
5237,5241c5166,5168
<   constexpr SubStringIterator() {}
< 
<   constexpr operator bool() const { static_assert(false, "Not implemented"); }
< 
<   constexpr const SubString& operator*() const
---
>   /// Default constructor.
>   constexpr SubStringIterator()
>     : SubStringIterator(TextRef{})
5243d5169
<     static_assert(false, "Not implemented");
5246c5172,5182
<   constexpr const SubString* operator->() const
---
>   /// True if pointing to valid SubString.
>   constexpr operator bool() const { return bool(m_text); }
> 
>   /// Retrieve SubString
>   constexpr const SubString& operator*() const { return m_subString; }
> 
>   /// Retrieve SubString.
>   constexpr const SubString* operator->() const { return &m_subString; }
> 
>   /// Comparison.
>   constexpr bool operator==(const SubStringIterator& other) const
5248c5184
<     static_assert(false, "Not implemented");
---
>     return m_subString.offset == other.m_subString.offset;
5251,5252c5187
<   constexpr bool operator==(const SubStringIterator& other) const = default;
< 
---
>   /// Increment operator.
5255c5190,5191
<     static_assert(false, "Not implemented");
---
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return *this;
5257a5194
>   /// Increment operator.
5260c5197,5199
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return curr;
5262a5202
>   /// Decrement operator.
5265c5205,5206
<     static_assert(false, "Not implemented");
---
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return *this;
5267a5209
>   /// Decrement operator.
5270c5212,5214
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return curr;
5271a5216,5217
> 
>   friend class Text;
5299,5302c5245,5246
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5316c5260
<   CheckError(TTF_DrawSurfaceText(text, p, surface));
---
>   CheckError(TTF_DrawSurfaceText(text, p.x, p.y, surface));
5324,5328d5267
< inline void SurfaceTextEngine::Destroy()
< {
<   DestroySurfaceTextEngine(release());
< }
< 
5350c5289
< inline void TextEngine::DestroySurface()
---
> inline void SurfaceTextEngine::Destroy()
5424,5427c5363,5364
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5436c5373
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5440c5377
<   CheckError(TTF_DrawRendererText(text, p));
---
>   CheckError(TTF_DrawRendererText(text, p.x, p.y));
5448,5452d5384
< inline void RendererTextEngine::Destroy()
< {
<   DestroyRendererTextEngine(release());
< }
< 
5474c5406
< inline void TextEngine::DestroyRenderer()
---
> inline void RendererTextEngine::Destroy()
5564c5496
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5576,5577d5507
< inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
< 
5599,5604c5529
< inline void TextEngine::DestroyGPU() { DestroyGPUTextEngine(release()); }
< 
< inline void TextEngine::SetGPUWinding(GPUTextEngineWinding winding)
< {
<   SDL::SetGPUTextEngineWinding(m_resource, winding);
< }
---
> inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
5627,5633c5552
< inline void GPUTextEngine::SetGPUWinding(TextEngineParam engine,
<                                          GPUTextEngineWinding winding)
< {
<   SDL::TextEngine::SetGPUWinding(engine, winding);
< }
< 
< inline GPUTextEngineWinding TextEngine::GetGPUWinding() const
---
> inline void GPUTextEngine::SetGPUWinding(GPUTextEngineWinding winding)
5635c5554
<   return SDL::GetGPUTextEngineWinding(m_resource);
---
>   SDL::SetGPUTextEngineWinding(get(), winding);
5659,5660c5578
< inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding(
<   TextEngineParam engine) const
---
> inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding() const
5662c5580
<   return SDL::TextEngine::GetGPUWinding(engine);
---
>   return SDL::GetGPUTextEngineWinding(get());
5665,5667c5583
< inline TextRef TextEngine::CreateText(FontParam font,
<                                       StringParam text,
<                                       size_t length)
---
> inline Text TextEngine::CreateText(FontParam font, std::string_view text)
5669c5585
<   return Text(m_resource, font, std::move(text), length);
---
>   return Text(m_resource, font, text);
5679,5680d5594
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
5693,5694c5607
<                        StringParam text,
<                        size_t length)
---
>                        std::string_view text)
5696c5609
<   return Text(TTF_CreateText(engine, font, text, length));
---
>   return Text(engine, font, text);
5713c5626
<   return CheckError(TTF_GetTextProperties(text));
---
>   return {CheckError(TTF_GetTextProperties(text))};
5818c5731
<   return CheckError(TTF_GetTextFont(text));
---
>   return {CheckError(TTF_GetTextFont(text))};
5944c5857
<   CheckError(TTF_SetTextColor(text, c));
---
>   CheckError(TTF_SetTextColor(text, c.r, c.g, c.b, c.a));
5971c5884
<   CheckError(TTF_SetTextColorFloat(text, c));
---
>   CheckError(TTF_SetTextColorFloat(text, c.r, c.g, c.b, c.a));
6010,6017c5923
<  * @param r a pointer filled in with the red color value in the range of
<  *          0-255, may be nullptr.
<  * @param g a pointer filled in with the green color value in the range of
<  *          0-255, may be nullptr.
<  * @param b a pointer filled in with the blue color value in the range of
<  *          0-255, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-255,
<  *          may be nullptr.
---
>  * @return The color in the range of 0-255 on success.
6030c5936,5938
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextColor(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6038c5946
< inline Color Text::GetColor() { return SDL::GetTextColor(m_resource); }
---
> inline Color Text::GetColor() const { return SDL::GetTextColor(m_resource); }
6075,6082c5983
<  * @param r a pointer filled in with the red color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param g a pointer filled in with the green color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param b a pointer filled in with the blue color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-1, may
<  *          be nullptr.
---
>  * @return The color in the range of 0-1 on success.
6095c5996,5998
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextColorFloat(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6103c6006
< inline FColor Text::GetColorFloat()
---
> inline FColor Text::GetColorFloat() const
6117,6118c6020
<  * @param x the x offset of the upper left corner of this text in pixels.
<  * @param y the y offset of the upper left corner of this text in pixels.
---
>  * @param p the x, y offset of the upper left corner of this text in pixels.
6129c6031
<   return TTF_SetTextPosition(text, p);
---
>   return TTF_SetTextPosition(text, p.x, p.y);
6162,6165c6064,6067
<  * @param x a pointer filled in with the x offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
<  * @param y a pointer filled in with the y offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
---
>  * @returns a Point with the offset of the upper left corner of this text in
>  *          pixels on success.
>  * @throws Error on failure.
>  *
6176c6078,6080
<   static_assert(false, "Not implemented");
---
>   Point p;
>   CheckError(GetTextPosition(text, &p.x, &p.y));
>   return p;
6184c6088,6091
< inline Point Text::GetPosition() { return SDL::GetTextPosition(m_resource); }
---
> inline Point Text::GetPosition() const
> {
>   return SDL::GetTextPosition(m_resource);
> }
6230c6137,6139
<   return CheckError(TTF_GetTextWrapWidth(text));
---
>   int w;
>   CheckError(TTF_GetTextWrapWidth(text, &w));
>   return w;
6316c6225
<   CheckError(TTF_SetTextString(text, string));
---
>   CheckError(TTF_SetTextString(text, string.data(), string.size()));
6352c6261
<   CheckError(TTF_InsertTextString(text, offset, string));
---
>   CheckError(TTF_InsertTextString(text, offset, string.data(), string.size()));
6382c6291
<   CheckError(TTF_AppendTextString(text, string));
---
>   CheckError(TTF_AppendTextString(text, string.data(), string.size()));
6453,6456c6362,6363
<  * @param w a pointer filled in with the width of the text, in pixels, may be
<  *          nullptr.
<  * @param h a pointer filled in with the height of the text, in pixels, may be
<  *          nullptr.
---
>  * @returns Point containing the size on x and y axis on success or
>  *          std::nullopt on failure; call GetError() for more information.
6466c6373,6375
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetTextSize(text, &p.x, &p.y);
>   return p;
6474c6383
< inline Point Text::GetSize() { return SDL::GetTextSize(m_resource); }
---
> inline Point Text::GetSize() const { return SDL::GetTextSize(m_resource); }
6545,6546d6453
<  * @param count a pointer filled in with the number of substrings returned,
<  *              may be nullptr.
6560c6467,6469
<   return TTF_GetTextSubStringsForRange(text, offset, length);
---
>   int count = 0;
>   auto data = TTF_GetTextSubStringsForRange(text, offset, length, &count);
>   return OwnArray<SubString*>{data, size_t(count)};
6575,6577c6484
<  * @param x the x coordinate relative to the left side of the text, may be
<  *          outside the bounds of the text area.
<  * @param y the y coordinate relative to the top side of the text, may be
---
>  * @param p the coordinates relative to the top-left side of the text, may be
6592c6499
<   CheckError(TTF_GetTextSubStringForPoint(text, p, substring));
---
>   CheckError(TTF_GetTextSubStringForPoint(text, p.x, p.y, substring));
6618c6525
<                                      const SubString* substring,
---
>                                      const SubString& substring,
6621c6528
<   CheckError(TTF_GetPreviousTextSubString(text, substring, previous));
---
>   CheckError(TTF_GetPreviousTextSubString(text, &substring, previous));
6624c6531
< inline void Text::GetPreviousSubString(const SubString* substring,
---
> inline void Text::GetPreviousSubString(const SubString& substring,
6647c6554
<                                  const SubString* substring,
---
>                                  const SubString& substring,
6650c6557
<   CheckError(TTF_GetNextTextSubString(text, substring, next));
---
>   CheckError(TTF_GetNextTextSubString(text, &substring, next));
6653c6560
< inline void Text::GetNextSubString(const SubString* substring,
---
> inline void Text::GetNextSubString(const SubString& substring,
6688c6595
<  * @sa Text.Text
---
>  * @sa RendererTextEngine.RendererTextEngine
6730a6638,6639
> 
> #endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
