4d3
< #include <SDL3/SDL_ttf.h>
9a9,17
> #if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
>   __has_include(<SDL3_ttf/SDL_ttf.h>)
> #define SDL3PP_ENABLE_TTF
> #endif
> 
> #if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
> 
> #include <SDL3_ttf/SDL_ttf.h>
> 
13c21
<  * @defgroup CategorySDLTTF Category SDLTTF
---
>  * @defgroup CategorySDLTTF True type font support
125,126c133
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_TTF_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
128c135,140
< #define SDL_TTF_MINOR_VERSION 2
---
> /**
>  * @name TTF version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_TTF_MAJOR_VERSION
130c142
< #define SDL_TTF_MICRO_VERSION 3
---
> #define SDL_TTF_MINOR_VERSION
132c144,150
< /// This is the version number macro for the current SDL_ttf version.
---
> #define SDL_TTF_MICRO_VERSION
> 
> ///@}
> 
> /**
>  * This is the version number macro for the current SDL_ttf version.
>  */
137c155,157
< /// This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
---
> /**
>  * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
>  */
143a164,165
> #endif // SDL3PP_DOC
> 
346c368
<  * .
---
>  *
429,430d450
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
457,458d476
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
459a478
>    * @param ptsize point size to use for the newly-opened font.
462d480
<    * @param ptsize point size to use for the newly-opened font.
473c491
<     : m_resource(CheckError(TTF_OpenFontIO(src, ptsize, closeio)))
---
>     : m_resource(CheckError(TTF_OpenFontIO(src, closeio, ptsize)))
577d594
<    * @sa Font.Font
587,588d603
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
1195,1198c1210,1212
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
>    *
1350,1351c1364
<    * @param kerning a pointer filled in with the kerning size between the two
<    *                glyphs, in pixels, may be nullptr.
---
>    * @returns the kerning size between the two glyphs, in pixels.
1360a1374,1388
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @returns return a Point with the width, height.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1363c1391,1393
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSize(text, &p.x, &p.y);
>     return p;
1372d1401
<    * @param font the font to query.
1374,1375d1402
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1386a1414,1434
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * Text is wrapped to multiple lines on line endings and on word boundaries if
>    * it extends beyond `wrap_width` in pixels.
>    *
>    * If wrap_width is 0, this function will only wrap on newline characters.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @param wrap_width the maximum width or 0 to wrap on newline characters.
>    * @returns return a Point with the width, height on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1389c1437,1439
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSizeWrapped(text, wrap_width, &p.x, &p.y);
>     return p;
1403d1452
<    * @param font the font to query.
1405,1406d1453
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1430d1476
<    * @param font the font to query.
1432,1433d1477
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1469d1512
<    * @param font the font to render with.
1471,1472d1513
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1504d1544
<    * @param font the font to render with.
1506,1507d1545
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1573d1610
<    * @param font the font to render with.
1575,1576d1611
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1609d1643
<    * @param font the font to render with.
1611,1612d1644
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1681d1712
<    * @param font the font to render with.
1683,1684d1713
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1715d1743
<    * @param font the font to render with.
1717,1718d1744
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1783d1808
<    * @param font the font to render with.
1785,1786d1809
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1819d1841
<    * @param font the font to render with.
1821,1822d1842
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1943c1963
<  *
---
>  * A resource engine
1977c1997
<   ~TextEngine() { Destroy(m_resource); }
---
>   virtual ~TextEngine() = default;
1980c2000
<   TextEngine& operator=(TextEngine other)
---
>   TextEngine& operator=(TextEngine&& other)
1985a2006,2008
>   /// Assignment operator.
>   TextEngine& operator=(const TextEngine& other) = delete;
> 
2009,2096c2032,2033
<   void Destroy() { static_assert(false, "Not implemented"); }
< 
<   /**
<    * Destroy a text engine created for drawing text on SDL surfaces.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa SurfaceTextEngine.SurfaceTextEngine
<    */
<   void DestroySurface();
< 
<   /**
<    * Destroy a text engine created for drawing text on an SDL renderer.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa RendererTextEngine.RendererTextEngine
<    */
<   void DestroyRenderer();
< 
<   /**
<    * Destroy a text engine created for drawing text with the SDL GPU API.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GPUTextEngine
<    */
<   void DestroyGPU();
< 
<   /**
<    * Sets the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine.
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @param winding the new winding order option.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GetGPUWinding
<    */
<   void SetGPUWinding(GPUTextEngineWinding winding);
< 
<   /**
<    * Get the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @returns the winding order used by the GPU text engine or
<    *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.SetGPUWinding
<    */
<   GPUTextEngineWinding GetGPUWinding() const;
---
>   /// Destroy resource. Pure virtual
>   virtual void Destroy() = 0;
2104,2105d2040
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
2116c2051
<   TextRef CreateText(FontParam font, StringParam text, size_t length);
---
>   Text CreateText(FontParam font, std::string_view text);
2118a2054
> /// A surface based text engine
2135c2071
<     : T(TTF_CreateSurfaceTextEngine())
---
>     : TextEngine(TTF_CreateSurfaceTextEngine())
2147,2149d2082
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
2157c2090
<   void Destroy();
---
>   void Destroy() final;
2159a2093
> /// A renderer based text engine
2179c2113
<     : T(TTF_CreateRendererTextEngine(renderer))
---
>     : TextEngine(TTF_CreateRendererTextEngine(renderer))
2208c2142
<     : T(TTF_CreateRendererTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateRendererTextEngineWithProperties(props))
2220,2222d2153
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
2230c2161
<   void Destroy();
---
>   void Destroy() final;
2232a2164
> /// A GPU based text engine
2249,2250c2181,2182
<    * @sa TextEngine.DestroyGPU
<    * @sa Text.GetGPUDrawData
---
>    * @sa GPUTextEngine.Destroy
>    * @sa GPUTextEngine.GetGPUDrawData
2253c2185
<     : T(TTF_CreateGPUTextEngine(device))
---
>     : TextEngine(TTF_CreateGPUTextEngine(device))
2282c2214
<     : T(TTF_CreateGPUTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateGPUTextEngineWithProperties(props))
2292,2293d2223
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2303,2304c2233
<   static void SetGPUWinding(TextEngineParam engine,
<                             GPUTextEngineWinding winding);
---
>   void SetGPUWinding(GPUTextEngineWinding winding);
2310,2311d2238
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2322c2249
<   GPUTextEngineWinding GetGPUWinding(TextEngineParam engine) const;
---
>   GPUTextEngineWinding GetGPUWinding() const;
2330,2332d2256
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
2340c2264
<   void Destroy();
---
>   void Destroy() final;
2406a2331
>  * @param ptsize point size to use for the newly-opened font.
2409d2333
<  * @param ptsize point size to use for the newly-opened font.
2528c2452
<   return CheckError(TTF_CopyFont(existing_font));
---
>   return Font(CheckError(TTF_CopyFont(existing_font)));
2557c2481
<   return CheckError(TTF_GetFontProperties(font));
---
>   return {CheckError(TTF_GetFontProperties(font))};
3432,3435c3356,3357
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  * code](https://unicode.org/iso15924/iso15924-codes.html).
3459,3461c3381,3383
<  * @returns an
<  *          [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)
<  *          or 0 if a script hasn't been set.
---
>  * @returns an [ISO 15924
>  *          code](https://unicode.org/iso15924/iso15924-codes.html) or 0 if a
>  *          script hasn't been set.
3563c3485
<   return TTF_GetGlyphImage(font, ch, image_type);
---
>   return Surface{TTF_GetGlyphImage(font, ch, image_type)};
3593c3515
<   return TTF_GetGlyphImageForIndex(font, glyph_index, image_type);
---
>   return Surface(TTF_GetGlyphImageForIndex(font, glyph_index, image_type));
3657,3658c3579
<  * @param kerning a pointer filled in with the kerning size between the two
<  *                glyphs, in pixels, may be nullptr.
---
>  * @returns the kerning size between the two glyphs, in pixels.
3668c3589,3590
<   return CheckError(TTF_GetGlyphKerning(font, previous_ch, ch));
---
>   if (int r; TTF_GetGlyphKerning(font, previous_ch, ch, &r)) return r;
>   throw Error();
3684,3685d3605
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3697c3617
<   CheckError(TTF_GetStringSize(font, text, w, h));
---
>   CheckError(TTF_GetStringSize(font, text.data(), text.size(), w, h));
3718,3719d3637
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3736c3654,3655
<   CheckError(TTF_GetStringSizeWrapped(font, text, wrap_width, w, h));
---
>   CheckError(
>     TTF_GetStringSizeWrapped(font, text.data(), text.size(), wrap_width, w, h));
3757,3758d3675
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3778,3779c3695,3700
<   CheckError(
<     TTF_MeasureString(font, text, max_width, measured_width, measured_length));
---
>   CheckError(TTF_MeasureString(font,
>                                text.data(),
>                                text.size(),
>                                max_width,
>                                measured_width,
>                                measured_length));
3810,3811d3730
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3828c3747
<   return TTF_RenderText_Solid(font, text, fg);
---
>   return Surface{TTF_RenderText_Solid(font, text.data(), text.size(), fg)};
3853,3854d3771
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3875c3792,3793
<   return TTF_RenderText_Solid_Wrapped(font, text, fg, wrapLength);
---
>   return Surface(TTF_RenderText_Solid_Wrapped(
>     font, text.data(), text.size(), fg, wrapLength));
3914c3832
<   return TTF_RenderGlyph_Solid(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Solid(font, ch, fg));
3942,3943d3859
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3963c3879
<   return TTF_RenderText_Shaded(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_Shaded(font, text.data(), text.size(), fg, bg));
3991,3992d3906
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4015c3929,3930
<   return TTF_RenderText_Shaded_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_Shaded_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4060c3975
<   return TTF_RenderGlyph_Shaded(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_Shaded(font, ch, fg, bg));
4089,4090d4003
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4108c4021
<   return TTF_RenderText_Blended(font, text, fg);
---
>   return Surface(TTF_RenderText_Blended(font, text.data(), text.size(), fg));
4133,4134d4045
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4155c4066,4067
<   return TTF_RenderText_Blended_Wrapped(font, text, fg, wrap_width);
---
>   return Surface(TTF_RenderText_Blended_Wrapped(
>     font, text.data(), text.size(), fg, wrap_width));
4194c4106
<   return TTF_RenderGlyph_Blended(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Blended(font, ch, fg));
4221,4222d4132
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4242c4152
<   return TTF_RenderText_LCD(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_LCD(font, text.data(), text.size(), fg, bg));
4270,4271d4179
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4294c4202,4203
<   return TTF_RenderText_LCD_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_LCD_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4339c4248
<   return TTF_RenderGlyph_LCD(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_LCD(font, ch, fg, bg));
4398,4399d4306
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4411c4318
<     : m_resource(TTF_CreateText(engine, font, text))
---
>     : m_resource(TTF_CreateText(engine, font, text.data(), text.size()))
4442c4349
<   /// Converts to bool
---
>   /// converts to bool
4467,4471c4374,4375
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4492,4496c4396,4397
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4654,4657c4555,4556
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
4693,4697c4592
<    * @param text the Text to modify.
<    * @param r the red color value in the range of 0-255.
<    * @param g the green color value in the range of 0-255.
<    * @param b the blue color value in the range of 0-255.
<    * @param a the alpha value in the range of 0-255.
---
>    * @param c the color values in the range of 0-255.
4715,4719c4610
<    * @param text the Text to modify.
<    * @param r the red color value, normally in the range of 0-1.
<    * @param g the green color value, normally in the range of 0-1.
<    * @param b the blue color value, normally in the range of 0-1.
<    * @param a the alpha value in the range of 0-1.
---
>    * @param c the color value, normally in the range of 0-1.
4758,4766c4649
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value in the range of
<    *          0-255, may be nullptr.
<    * @param g a pointer filled in with the green color value in the range of
<    *          0-255, may be nullptr.
<    * @param b a pointer filled in with the blue color value in the range of
<    *          0-255, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-255,
<    *          may be nullptr.
---
>    * @return The color in the range of 0-255 on success.
4777c4660
<   Color GetColor();
---
>   Color GetColor() const;
4805,4813c4688
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param g a pointer filled in with the green color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param b a pointer filled in with the blue color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-1, may
<    *          be nullptr.
---
>    * @return The color in the range of 0-1 on success.
4824c4699
<   FColor GetColorFloat();
---
>   FColor GetColorFloat() const;
4834,4836c4709
<    * @param text the Text to modify.
<    * @param x the x offset of the upper left corner of this text in pixels.
<    * @param y the y offset of the upper left corner of this text in pixels.
---
>    * @param p the x, y offset of the upper left corner of this text in pixels.
4867,4871c4740,4742
<    * @param text the Text to query.
<    * @param x a pointer filled in with the x offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
<    * @param y a pointer filled in with the y offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
---
>    * @returns a Point with the offset of the upper left corner of this text in
>    *          pixels on success.
>    * @throws Error on failure.
4880c4751
<   Point GetPosition();
---
>   Point GetPosition() const;
4903,4905c4774,4775
<    * @param text the Text to query.
<    * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<    *                   if the text is being wrapped on newline characters.
---
>    * @returns an int with the maximum width in pixels or 0 if the text is being
>    *          wrapped on newline characters on success.
4960,4963c4830
<    * @param text the Text to modify.
<    * @param string the UTF-8 text to use, may be nullptr.
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
---
>    * @param string the UTF-8 text to use.
4982d4848
<    * @param text the Text to modify.
4988,4989d4853
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5008d4871
<    * @param text the Text to modify.
5010,5011d4872
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5074,5078c4935
<    * @param text the Text to query.
<    * @param w a pointer filled in with the width of the text, in pixels, may be
<    *          nullptr.
<    * @param h a pointer filled in with the height of the text, in pixels, may be
<    *          nullptr.
---
>    * @returns Point containing the size on x and y axis on success.
5084a4942,4943
>    *
>    * @sa GetSize(int*,int*) if might want only one of the coordinates
5086c4945
<   Point GetSize();
---
>   Point GetSize() const;
5109c4968,4971
<   SubStringIterator begin() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to first substring
>    */
>   SubStringIterator begin() const;
5111c4973,4976
<   SubStringIterator end() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to one past last substring
>    */
>   SubStringIterator end() const;
5113,5116c4978,4993
<   SubStringIterator GetSubStringForLine(int line) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Get iterator to substring of a text object that contains the given line.
>    *
>    * If `line` is greater than or equal to `text->num_lines` this will return an
>    * iterator equal to end().
>    *
>    * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
>    * @returns iterator on success or false on failure; call GetError() for more
>    *          information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForLine(int line) const;
5138a5016,5026
>   /**
>    * Get all substrings of a text object.
>    *
>    * @returns a nullptr terminated array of substring pointers or nullptr on
>    *          failure; call GetError() for more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
5141c5029
<     static_assert(false, "Not implemented");
---
>     return GetSubStringsForRange(0);
5150,5151d5037
<    * @param count a pointer filled in with the number of substrings returned,
<    *              may be nullptr.
5161,5166c5047
<   OwnArray<SubString*> GetSubStringsForRange(int offset, int length) const;
< 
<   SubStringIterator GetSubStringForPoint(Point p) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const;
5173,5174c5054
<    * @param text the Text to query.
<    * @param x the x coordinate relative to the left side of the text, may be
---
>    * @param p the coordinates relative to the top-left side of the text, may be
5176c5056,5071
<    * @param y the y coordinate relative to the top side of the text, may be
---
>    * @returns the iterator on success or false on failure; call GetError() for
>    *          more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForPoint(Point p) const;
> 
>   /**
>    * Get the portion of a text string that is closest to a point.
>    *
>    * This will return the closest substring of text to the given point.
>    *
>    * @param p the coordinates relative to the top-left side of the text, may be
5205c5100
<   void GetPreviousSubString(const SubString* substring,
---
>   void GetPreviousSubString(const SubString& substring,
5223c5118
<   void GetNextSubString(const SubString* substring, SubString* next) const;
---
>   void GetNextSubString(const SubString& substring, SubString* next) const;
5245c5140
<   const char* GetText() const { static_assert(false, "Not implemented"); }
---
>   const char* GetText() const { return m_resource->text; }
5248c5143
<   int GetNumLines() const { static_assert(false, "Not implemented"); }
---
>   int GetNumLines() const { return m_resource->num_lines; }
5261c5156
<   TextRef(TextParam resource)
---
>   TextRef(TextParam resource = nullptr)
5275a5171,5174
> /**
>  * Iterator for substrings
>  *
>  */
5282c5181,5185
<   constexpr SubStringIterator(TextRef text) {}
---
>   constexpr SubStringIterator(TextRef text)
>     : m_text(text)
>     , m_subString(0)
>   {
>   }
5285,5289c5188,5190
<   constexpr SubStringIterator() {}
< 
<   constexpr operator bool() const { static_assert(false, "Not implemented"); }
< 
<   constexpr const SubString& operator*() const
---
>   /// Default constructor.
>   constexpr SubStringIterator()
>     : SubStringIterator(TextRef{})
5291d5191
<     static_assert(false, "Not implemented");
5294c5194,5204
<   constexpr const SubString* operator->() const
---
>   /// True if pointing to valid SubString.
>   constexpr operator bool() const { return bool(m_text); }
> 
>   /// Retrieve SubString
>   constexpr const SubString& operator*() const { return m_subString; }
> 
>   /// Retrieve SubString.
>   constexpr const SubString* operator->() const { return &m_subString; }
> 
>   /// Comparison.
>   constexpr bool operator==(const SubStringIterator& other) const
5296c5206
<     static_assert(false, "Not implemented");
---
>     return m_subString.offset == other.m_subString.offset;
5299,5300c5209
<   constexpr bool operator==(const SubStringIterator& other) const = default;
< 
---
>   /// Increment operator.
5303c5212,5213
<     static_assert(false, "Not implemented");
---
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return *this;
5305a5216
>   /// Increment operator.
5308c5219,5221
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return curr;
5310a5224
>   /// Decrement operator.
5313c5227,5228
<     static_assert(false, "Not implemented");
---
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return *this;
5315a5231
>   /// Decrement operator.
5318c5234,5236
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return curr;
5319a5238,5239
> 
>   friend class Text;
5347,5350c5267,5268
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5364c5282
<   CheckError(TTF_DrawSurfaceText(text, p, surface));
---
>   CheckError(TTF_DrawSurfaceText(text, p.x, p.y, surface));
5372,5376d5289
< inline void SurfaceTextEngine::Destroy()
< {
<   DestroySurfaceTextEngine(release());
< }
< 
5398c5311
< inline void TextEngine::DestroySurface()
---
> inline void SurfaceTextEngine::Destroy()
5472,5475c5385,5386
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5484c5395
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5488c5399
<   CheckError(TTF_DrawRendererText(text, p));
---
>   CheckError(TTF_DrawRendererText(text, p.x, p.y));
5496,5500d5406
< inline void RendererTextEngine::Destroy()
< {
<   DestroyRendererTextEngine(release());
< }
< 
5522c5428
< inline void TextEngine::DestroyRenderer()
---
> inline void RendererTextEngine::Destroy()
5612c5518
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5624,5625d5529
< inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
< 
5647,5652c5551
< inline void TextEngine::DestroyGPU() { DestroyGPUTextEngine(release()); }
< 
< inline void TextEngine::SetGPUWinding(GPUTextEngineWinding winding)
< {
<   SDL::SetGPUTextEngineWinding(m_resource, winding);
< }
---
> inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
5675,5681c5574
< inline void GPUTextEngine::SetGPUWinding(TextEngineParam engine,
<                                          GPUTextEngineWinding winding)
< {
<   SDL::TextEngine::SetGPUWinding(engine, winding);
< }
< 
< inline GPUTextEngineWinding TextEngine::GetGPUWinding() const
---
> inline void GPUTextEngine::SetGPUWinding(GPUTextEngineWinding winding)
5683c5576
<   return SDL::GetGPUTextEngineWinding(m_resource);
---
>   SDL::SetGPUTextEngineWinding(get(), winding);
5707,5708c5600
< inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding(
<   TextEngineParam engine) const
---
> inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding() const
5710c5602
<   return SDL::TextEngine::GetGPUWinding(engine);
---
>   return SDL::GetGPUTextEngineWinding(get());
5713,5715c5605
< inline TextRef TextEngine::CreateText(FontParam font,
<                                       StringParam text,
<                                       size_t length)
---
> inline Text TextEngine::CreateText(FontParam font, std::string_view text)
5717c5607
<   return Text(m_resource, font, std::move(text), length);
---
>   return Text(m_resource, font, text);
5727,5728d5616
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
5741,5742c5629
<                        StringParam text,
<                        size_t length)
---
>                        std::string_view text)
5744c5631
<   return Text(TTF_CreateText(engine, font, text, length));
---
>   return Text(engine, font, text);
5761c5648
<   return CheckError(TTF_GetTextProperties(text));
---
>   return {CheckError(TTF_GetTextProperties(text))};
5866c5753
<   return CheckError(TTF_GetTextFont(text));
---
>   return {CheckError(TTF_GetTextFont(text))};
5925,5928c5812,5813
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  *               code](https://unicode.org/iso15924/iso15924-codes.html).
5976,5979c5861
<  * @param r the red color value in the range of 0-255.
<  * @param g the green color value in the range of 0-255.
<  * @param b the blue color value in the range of 0-255.
<  * @param a the alpha value in the range of 0-255.
---
>  * @param c the color value in the range of 0-255.
5992c5874
<   CheckError(TTF_SetTextColor(text, c));
---
>   CheckError(TTF_SetTextColor(text, c.r, c.g, c.b, c.a));
6003,6006c5885
<  * @param r the red color value, normally in the range of 0-1.
<  * @param g the green color value, normally in the range of 0-1.
<  * @param b the blue color value, normally in the range of 0-1.
<  * @param a the alpha value in the range of 0-1.
---
>  * @param c the color value, normally in the range of 0-1.
6019c5898
<   CheckError(TTF_SetTextColorFloat(text, c));
---
>   CheckError(TTF_SetTextColorFloat(text, c.r, c.g, c.b, c.a));
6058,6065c5937
<  * @param r a pointer filled in with the red color value in the range of
<  *          0-255, may be nullptr.
<  * @param g a pointer filled in with the green color value in the range of
<  *          0-255, may be nullptr.
<  * @param b a pointer filled in with the blue color value in the range of
<  *          0-255, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-255,
<  *          may be nullptr.
---
>  * @return The color in the range of 0-255 on success.
6078c5950,5952
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextColor(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6086c5960
< inline Color Text::GetColor() { return SDL::GetTextColor(m_resource); }
---
> inline Color Text::GetColor() const { return SDL::GetTextColor(m_resource); }
6123,6130c5997
<  * @param r a pointer filled in with the red color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param g a pointer filled in with the green color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param b a pointer filled in with the blue color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-1, may
<  *          be nullptr.
---
>  * @return The color in the range of 0-1 on success.
6143c6010,6012
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextColorFloat(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6151c6020
< inline FColor Text::GetColorFloat()
---
> inline FColor Text::GetColorFloat() const
6165,6166c6034
<  * @param x the x offset of the upper left corner of this text in pixels.
<  * @param y the y offset of the upper left corner of this text in pixels.
---
>  * @param p the x, y offset of the upper left corner of this text in pixels.
6177c6045
<   return TTF_SetTextPosition(text, p);
---
>   return TTF_SetTextPosition(text, p.x, p.y);
6210,6213c6078,6081
<  * @param x a pointer filled in with the x offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
<  * @param y a pointer filled in with the y offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
---
>  * @returns a Point with the offset of the upper left corner of this text in
>  *          pixels on success.
>  * @throws Error on failure.
>  *
6224c6092,6094
<   static_assert(false, "Not implemented");
---
>   Point p;
>   CheckError(GetTextPosition(text, &p.x, &p.y));
>   return p;
6232c6102,6105
< inline Point Text::GetPosition() { return SDL::GetTextPosition(m_resource); }
---
> inline Point Text::GetPosition() const
> {
>   return SDL::GetTextPosition(m_resource);
> }
6265,6266c6138,6139
<  * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<  *                   if the text is being wrapped on newline characters.
---
>  * @returns maximum width in pixels or 0 if the text is being wrapped on newline
>  *          characters.
6278c6151,6153
<   return CheckError(TTF_GetTextWrapWidth(text));
---
>   int w;
>   CheckError(TTF_GetTextWrapWidth(text, &w));
>   return w;
6349,6350d6223
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6364c6237
<   CheckError(TTF_SetTextString(text, string));
---
>   CheckError(TTF_SetTextString(text, string.data(), string.size()));
6383,6384d6255
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6400c6271
<   CheckError(TTF_InsertTextString(text, offset, string));
---
>   CheckError(TTF_InsertTextString(text, offset, string.data(), string.size()));
6415,6416d6285
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6430c6299
<   CheckError(TTF_AppendTextString(text, string));
---
>   CheckError(TTF_AppendTextString(text, string.data(), string.size()));
6501,6504c6370,6371
<  * @param w a pointer filled in with the width of the text, in pixels, may be
<  *          nullptr.
<  * @param h a pointer filled in with the height of the text, in pixels, may be
<  *          nullptr.
---
>  * @returns Point containing the size on x and y axis on success or
>  *          std::nullopt on failure; call GetError() for more information.
6514c6381,6383
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetTextSize(text, &p.x, &p.y);
>   return p;
6522c6391
< inline Point Text::GetSize() { return SDL::GetTextSize(m_resource); }
---
> inline Point Text::GetSize() const { return SDL::GetTextSize(m_resource); }
6593,6594d6461
<  * @param count a pointer filled in with the number of substrings returned,
<  *              may be nullptr.
6608c6475,6477
<   return TTF_GetTextSubStringsForRange(text, offset, length);
---
>   int count = 0;
>   auto data = TTF_GetTextSubStringsForRange(text, offset, length, &count);
>   return OwnArray<SubString*>{data, size_t(count)};
6623,6625c6492
<  * @param x the x coordinate relative to the left side of the text, may be
<  *          outside the bounds of the text area.
<  * @param y the y coordinate relative to the top side of the text, may be
---
>  * @param p the coordinates relative to the top-left side of the text, may be
6640c6507
<   CheckError(TTF_GetTextSubStringForPoint(text, p, substring));
---
>   CheckError(TTF_GetTextSubStringForPoint(text, p.x, p.y, substring));
6666c6533
<                                      const SubString* substring,
---
>                                      const SubString& substring,
6669c6536
<   CheckError(TTF_GetPreviousTextSubString(text, substring, previous));
---
>   CheckError(TTF_GetPreviousTextSubString(text, &substring, previous));
6672c6539
< inline void Text::GetPreviousSubString(const SubString* substring,
---
> inline void Text::GetPreviousSubString(const SubString& substring,
6695c6562
<                                  const SubString* substring,
---
>                                  const SubString& substring,
6698c6565
<   CheckError(TTF_GetNextTextSubString(text, substring, next));
---
>   CheckError(TTF_GetNextTextSubString(text, &substring, next));
6701c6568
< inline void Text::GetNextSubString(const SubString* substring,
---
> inline void Text::GetNextSubString(const SubString& substring,
6736c6603
<  * @sa Text.Text
---
>  * @sa RendererTextEngine.RendererTextEngine
6778a6646,6647
> 
> #endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
