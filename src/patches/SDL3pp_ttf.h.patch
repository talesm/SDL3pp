4d3
< #include <SDL3/SDL_ttf.h>
10a10,18
> #if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
>   __has_include(<SDL3_ttf/SDL_ttf.h>)
> #define SDL3PP_ENABLE_TTF
> #endif
> 
> #if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
> 
> #include <SDL3_ttf/SDL_ttf.h>
> 
14c22
<  * @defgroup CategorySDLTTF Category SDLTTF
---
>  * @defgroup CategorySDLTTF True type font support
168,169c176
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_TTF_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
171c178,185
< #define SDL_TTF_MINOR_VERSION 2
---
> /**
>  * @name TTF version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_TTF_MAJOR_VERSION
> 
> #define SDL_TTF_MINOR_VERSION
173c187
< #define SDL_TTF_MICRO_VERSION 3
---
> #define SDL_TTF_MICRO_VERSION
175c189,193
< /// This is the version number macro for the current SDL_ttf version.
---
> ///@}
> 
> /**
>  * This is the version number macro for the current SDL_ttf version.
>  */
180c198,200
< /// This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
---
> /**
>  * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
>  */
186a207,208
> #endif // SDL3PP_DOC
> 
302a325
> /// Internal data for Text
389c412
<  * .
---
>  *
472,473d494
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
500,501d520
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
502a522
>    * @param ptsize point size to use for the newly-opened font.
505d524
<    * @param ptsize point size to use for the newly-opened font.
516c535
<     : m_resource(CheckError(TTF_OpenFontIO(src, ptsize, closeio)))
---
>     : m_resource(CheckError(TTF_OpenFontIO(src, closeio, ptsize)))
620d638
<    * @sa Font.Font
630,631d647
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
1238,1241c1254,1256
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
>    *
1393,1394c1408
<    * @param kerning a pointer filled in with the kerning size between the two
<    *                glyphs, in pixels, may be nullptr.
---
>    * @returns the kerning size between the two glyphs, in pixels.
1403a1418,1432
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @returns return a Point with the width, height.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1406c1435,1437
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSize(text, &p.x, &p.y);
>     return p;
1415d1445
<    * @param font the font to query.
1417,1418d1446
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1429a1458,1478
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * Text is wrapped to multiple lines on line endings and on word boundaries if
>    * it extends beyond `wrap_width` in pixels.
>    *
>    * If wrap_width is 0, this function will only wrap on newline characters.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @param wrap_width the maximum width or 0 to wrap on newline characters.
>    * @returns return a Point with the width, height on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1432c1481,1483
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSizeWrapped(text, wrap_width, &p.x, &p.y);
>     return p;
1446d1496
<    * @param font the font to query.
1448,1449d1497
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1473d1520
<    * @param font the font to query.
1475,1476d1521
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1512d1556
<    * @param font the font to render with.
1514,1515d1557
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1547d1588
<    * @param font the font to render with.
1549,1550d1589
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1616d1654
<    * @param font the font to render with.
1618,1619d1655
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1652d1687
<    * @param font the font to render with.
1654,1655d1688
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1724d1756
<    * @param font the font to render with.
1726,1727d1757
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1758d1787
<    * @param font the font to render with.
1760,1761d1788
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1826d1852
<    * @param font the font to render with.
1828,1829d1853
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1862d1885
<    * @param font the font to render with.
1864,1865d1886
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1986c2007
<  *
---
>  * A resource engine
2020c2041
<   ~TextEngine() { Destroy(m_resource); }
---
>   virtual ~TextEngine() = default;
2023c2044
<   TextEngine& operator=(TextEngine other)
---
>   TextEngine& operator=(TextEngine&& other)
2028a2050,2052
>   /// Assignment operator.
>   TextEngine& operator=(const TextEngine& other) = delete;
> 
2052,2053c2076,2077
<   /// frees up textEngine.
<   void Destroy() { static_assert(false, "Not implemented"); }
---
>   /// frees up textEngine. Pure virtual
>   virtual void Destroy() = 0;
2061,2062d2084
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
2075a2098
> /// A surface based text engine
2092c2115
<     : T(TTF_CreateSurfaceTextEngine())
---
>     : TextEngine(TTF_CreateSurfaceTextEngine())
2104,2106d2126
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
2114c2134
<   void Destroy();
---
>   void Destroy() final;
2116a2137
> /// A renderer based text engine
2136c2157
<     : T(TTF_CreateRendererTextEngine(renderer))
---
>     : TextEngine(TTF_CreateRendererTextEngine(renderer))
2165c2186
<     : T(TTF_CreateRendererTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateRendererTextEngineWithProperties(props))
2177,2179d2197
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
2187c2205
<   void Destroy();
---
>   void Destroy() final;
2189a2208
> /// A GPU based text engine
2210c2229
<     : T(TTF_CreateGPUTextEngine(device))
---
>     : TextEngine(TTF_CreateGPUTextEngine(device))
2239c2258
<     : T(TTF_CreateGPUTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateGPUTextEngineWithProperties(props))
2249,2250d2267
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2260,2261c2277
<   static void SetGPUWinding(TextEngineParam engine,
<                             GPUTextEngineWinding winding);
---
>   void SetGPUWinding(GPUTextEngineWinding winding);
2267,2268d2282
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2279c2293
<   GPUTextEngineWinding GetGPUWinding(TextEngineParam engine) const;
---
>   GPUTextEngineWinding GetGPUWinding() const;
2287,2289d2300
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
2297c2308
<   void Destroy();
---
>   void Destroy() final;
2363a2375
>  * @param ptsize point size to use for the newly-opened font.
2366d2377
<  * @param ptsize point size to use for the newly-opened font.
2485c2496
<   return CheckError(TTF_CopyFont(existing_font));
---
>   return Font(CheckError(TTF_CopyFont(existing_font)));
2514c2525
<   return CheckError(TTF_GetFontProperties(font));
---
>   return {CheckError(TTF_GetFontProperties(font))};
2979,2982d2989
< #endif // SDL_TTF_VERSION_ATLEAST(3, 2, 2)
< 
< #if SDL_TTF_VERSION_ATLEAST(3, 2, 2)
< 
3393,3396c3400,3401
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  * code](https://unicode.org/iso15924/iso15924-codes.html).
3420,3422c3425,3427
<  * @returns an
<  *          [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)
<  *          or 0 if a script hasn't been set.
---
>  * @returns an [ISO 15924
>  *          code](https://unicode.org/iso15924/iso15924-codes.html) or 0 if a
>  *          script hasn't been set.
3524c3529
<   return TTF_GetGlyphImage(font, ch, image_type);
---
>   return Surface{TTF_GetGlyphImage(font, ch, image_type)};
3554c3559
<   return TTF_GetGlyphImageForIndex(font, glyph_index, image_type);
---
>   return Surface(TTF_GetGlyphImageForIndex(font, glyph_index, image_type));
3618,3619c3623
<  * @param kerning a pointer filled in with the kerning size between the two
<  *                glyphs, in pixels, may be nullptr.
---
>  * @returns the kerning size between the two glyphs, in pixels.
3629c3633,3634
<   return CheckError(TTF_GetGlyphKerning(font, previous_ch, ch));
---
>   if (int r; TTF_GetGlyphKerning(font, previous_ch, ch, &r)) return r;
>   throw Error();
3645,3646d3649
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3658c3661
<   CheckError(TTF_GetStringSize(font, text, w, h));
---
>   CheckError(TTF_GetStringSize(font, text.data(), text.size(), w, h));
3679,3680d3681
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3697c3698,3699
<   CheckError(TTF_GetStringSizeWrapped(font, text, wrap_width, w, h));
---
>   CheckError(
>     TTF_GetStringSizeWrapped(font, text.data(), text.size(), wrap_width, w, h));
3718,3719d3719
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3739,3740c3739,3744
<   CheckError(
<     TTF_MeasureString(font, text, max_width, measured_width, measured_length));
---
>   CheckError(TTF_MeasureString(font,
>                                text.data(),
>                                text.size(),
>                                max_width,
>                                measured_width,
>                                measured_length));
3771,3772d3774
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3789c3791
<   return TTF_RenderText_Solid(font, text, fg);
---
>   return Surface{TTF_RenderText_Solid(font, text.data(), text.size(), fg)};
3814,3815d3815
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3836c3836,3837
<   return TTF_RenderText_Solid_Wrapped(font, text, fg, wrapLength);
---
>   return Surface(TTF_RenderText_Solid_Wrapped(
>     font, text.data(), text.size(), fg, wrapLength));
3875c3876
<   return TTF_RenderGlyph_Solid(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Solid(font, ch, fg));
3903,3904d3903
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3924c3923
<   return TTF_RenderText_Shaded(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_Shaded(font, text.data(), text.size(), fg, bg));
3952,3953d3950
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3976c3973,3974
<   return TTF_RenderText_Shaded_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_Shaded_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4021c4019
<   return TTF_RenderGlyph_Shaded(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_Shaded(font, ch, fg, bg));
4050,4051d4047
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4069c4065
<   return TTF_RenderText_Blended(font, text, fg);
---
>   return Surface(TTF_RenderText_Blended(font, text.data(), text.size(), fg));
4094,4095d4089
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4116c4110,4111
<   return TTF_RenderText_Blended_Wrapped(font, text, fg, wrap_width);
---
>   return Surface(TTF_RenderText_Blended_Wrapped(
>     font, text.data(), text.size(), fg, wrap_width));
4155c4150
<   return TTF_RenderGlyph_Blended(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Blended(font, ch, fg));
4182,4183d4176
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4203c4196
<   return TTF_RenderText_LCD(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_LCD(font, text.data(), text.size(), fg, bg));
4231,4232d4223
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4255c4246,4247
<   return TTF_RenderText_LCD_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_LCD_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4300c4292
<   return TTF_RenderGlyph_LCD(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_LCD(font, ch, fg, bg));
4359,4360d4350
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4372c4362
<     : m_resource(TTF_CreateText(engine, font, text))
---
>     : m_resource(TTF_CreateText(engine, font, text.data(), text.size()))
4409c4399
<   /// Converts to bool
---
>   /// converts to bool
4434,4438c4424,4425
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4459,4463c4446,4447
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4621,4624c4605,4606
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
4660,4664c4642
<    * @param text the Text to modify.
<    * @param r the red color value in the range of 0-255.
<    * @param g the green color value in the range of 0-255.
<    * @param b the blue color value in the range of 0-255.
<    * @param a the alpha value in the range of 0-255.
---
>    * @param c the color values in the range of 0-255.
4682,4686c4660
<    * @param text the Text to modify.
<    * @param r the red color value, normally in the range of 0-1.
<    * @param g the green color value, normally in the range of 0-1.
<    * @param b the blue color value, normally in the range of 0-1.
<    * @param a the alpha value in the range of 0-1.
---
>    * @param c the color value, normally in the range of 0-1.
4725,4733c4699
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value in the range of
<    *          0-255, may be nullptr.
<    * @param g a pointer filled in with the green color value in the range of
<    *          0-255, may be nullptr.
<    * @param b a pointer filled in with the blue color value in the range of
<    *          0-255, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-255,
<    *          may be nullptr.
---
>    * @return The color in the range of 0-255 on success.
4744c4710
<   Color GetColor();
---
>   Color GetColor() const;
4772,4780c4738
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param g a pointer filled in with the green color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param b a pointer filled in with the blue color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-1, may
<    *          be nullptr.
---
>    * @return The color in the range of 0-1 on success.
4791c4749
<   FColor GetColorFloat();
---
>   FColor GetColorFloat() const;
4801,4803c4759
<    * @param text the Text to modify.
<    * @param x the x offset of the upper left corner of this text in pixels.
<    * @param y the y offset of the upper left corner of this text in pixels.
---
>    * @param p the x, y offset of the upper left corner of this text in pixels.
4834,4838c4790,4792
<    * @param text the Text to query.
<    * @param x a pointer filled in with the x offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
<    * @param y a pointer filled in with the y offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
---
>    * @returns a Point with the offset of the upper left corner of this text in
>    *          pixels on success.
>    * @throws Error on failure.
4847c4801
<   Point GetPosition();
---
>   Point GetPosition() const;
4870,4872c4824,4825
<    * @param text the Text to query.
<    * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<    *                   if the text is being wrapped on newline characters.
---
>    * @returns an int with the maximum width in pixels or 0 if the text is being
>    *          wrapped on newline characters on success.
4927,4930c4880
<    * @param text the Text to modify.
<    * @param string the UTF-8 text to use, may be nullptr.
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
---
>    * @param string the UTF-8 text to use.
4949d4898
<    * @param text the Text to modify.
4955,4956d4903
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4975d4921
<    * @param text the Text to modify.
4977,4978d4922
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5041,5045c4985
<    * @param text the Text to query.
<    * @param w a pointer filled in with the width of the text, in pixels, may be
<    *          nullptr.
<    * @param h a pointer filled in with the height of the text, in pixels, may be
<    *          nullptr.
---
>    * @returns Point containing the size on x and y axis on success.
5051a4992,4993
>    *
>    * @sa GetSize(int*,int*) if might want only one of the coordinates
5053c4995
<   Point GetSize();
---
>   Point GetSize() const;
5076c5018,5021
<   SubStringIterator begin() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to first substring
>    */
>   SubStringIterator begin() const;
5078c5023,5026
<   SubStringIterator end() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to one past last substring
>    */
>   SubStringIterator end() const;
5080,5083c5028,5043
<   SubStringIterator GetSubStringForLine(int line) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Get iterator to substring of a text object that contains the given line.
>    *
>    * If `line` is greater than or equal to `text->num_lines` this will return an
>    * iterator equal to end().
>    *
>    * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
>    * @returns iterator on success or false on failure; call GetError() for more
>    *          information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForLine(int line) const;
5105a5066,5076
>   /**
>    * Get all substrings of a text object.
>    *
>    * @returns a nullptr terminated array of substring pointers or nullptr on
>    *          failure; call GetError() for more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
5108c5079
<     static_assert(false, "Not implemented");
---
>     return GetSubStringsForRange(0);
5117,5118d5087
<    * @param count a pointer filled in with the number of substrings returned,
<    *              may be nullptr.
5128,5133c5097
<   OwnArray<SubString*> GetSubStringsForRange(int offset, int length) const;
< 
<   SubStringIterator GetSubStringForPoint(Point p) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const;
5140,5141c5104
<    * @param text the Text to query.
<    * @param x the x coordinate relative to the left side of the text, may be
---
>    * @param p the coordinates relative to the top-left side of the text, may be
5143c5106,5121
<    * @param y the y coordinate relative to the top side of the text, may be
---
>    * @returns the iterator on success or false on failure; call GetError() for
>    *          more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForPoint(Point p) const;
> 
>   /**
>    * Get the portion of a text string that is closest to a point.
>    *
>    * This will return the closest substring of text to the given point.
>    *
>    * @param p the coordinates relative to the top-left side of the text, may be
5212c5190
<   const char* GetText() const { static_assert(false, "Not implemented"); }
---
>   const char* GetText() const { return m_resource->text; }
5215c5193
<   int GetNumLines() const { static_assert(false, "Not implemented"); }
---
>   int GetNumLines() const { return m_resource->num_lines; }
5228c5206
<   TextRef(TextParam resource)
---
>   TextRef(TextParam resource = nullptr)
5242a5221,5224
> /**
>  * Iterator for substrings
>  *
>  */
5249,5256c5231,5233
<   constexpr SubStringIterator(TextRef text) {}
< 
< public:
<   constexpr SubStringIterator() {}
< 
<   constexpr operator bool() const { static_assert(false, "Not implemented"); }
< 
<   constexpr const SubString& operator*() const
---
>   constexpr SubStringIterator(TextRef text)
>     : m_text(text)
>     , m_subString(0)
5258d5234
<     static_assert(false, "Not implemented");
5261c5237,5240
<   constexpr const SubString* operator->() const
---
> public:
>   /// Default constructor.
>   constexpr SubStringIterator()
>     : SubStringIterator(TextRef{})
5263d5241
<     static_assert(false, "Not implemented");
5265a5244,5253
>   /// True if pointing to valid SubString.
>   constexpr operator bool() const { return bool(m_text); }
> 
>   /// Retrieve SubString
>   constexpr const SubString& operator*() const { return m_subString; }
> 
>   /// Retrieve SubString.
>   constexpr const SubString* operator->() const { return &m_subString; }
> 
>   /// Comparison.
5268c5256
<     static_assert(false, "Not implemented");
---
>     return m_subString.offset == other.m_subString.offset;
5270a5259
>   /// Increment operator.
5273c5262,5263
<     static_assert(false, "Not implemented");
---
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return *this;
5275a5266
>   /// Increment operator.
5278c5269,5271
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return curr;
5280a5274
>   /// Decrement operator.
5283c5277,5278
<     static_assert(false, "Not implemented");
---
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return *this;
5285a5281
>   /// Decrement operator.
5288c5284,5286
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return curr;
5289a5288,5289
> 
>   friend class Text;
5317,5320c5317,5318
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5334c5332
<   CheckError(TTF_DrawSurfaceText(text, p, surface));
---
>   CheckError(TTF_DrawSurfaceText(text, p.x, p.y, surface));
5437,5440c5435,5436
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5449c5445
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5453c5449
<   CheckError(TTF_DrawRendererText(text, p));
---
>   CheckError(TTF_DrawRendererText(text, p.x, p.y));
5572c5568
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5607,5608c5603,5619
< inline void GPUTextEngine::SetGPUWinding(TextEngineParam engine,
<                                          GPUTextEngineWinding winding)
---
> /**
>  * Sets the winding order of the vertices returned by Text.GetGPUDrawData
>  * for a particular GPU text engine.
>  *
>  * @param engine a TextEngine object created with
>  *               GPUTextEngine.GPUTextEngine().
>  * @param winding the new winding order option.
>  *
>  * @threadsafety This function should be called on the thread that created the
>  *               engine.
>  *
>  * @since This function is available since SDL_ttf 3.0.0.
>  *
>  * @sa GPUTextEngine.GetGPUWinding
>  */
> inline void SetGPUTextEngineWinding(TextEngineParam engine,
>                                     GPUTextEngineWinding winding)
5610c5621
<   SDL::SetGPUTextEngineWinding(engine, winding);
---
>   TTF_SetGPUTextEngineWinding(engine, winding);
5613,5614c5624
< inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding(
<   TextEngineParam engine) const
---
> inline void GPUTextEngine::SetGPUWinding(GPUTextEngineWinding winding)
5616c5626,5652
<   return SDL::GetGPUTextEngineWinding(engine);
---
>   SDL::SetGPUTextEngineWinding(get(), winding);
> }
> 
> /**
>  * Get the winding order of the vertices returned by Text.GetGPUDrawData
>  * for a particular GPU text engine
>  *
>  * @param engine a TextEngine object created with
>  *               GPUTextEngine.GPUTextEngine().
>  * @returns the winding order used by the GPU text engine or
>  *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
>  *
>  * @threadsafety This function should be called on the thread that created the
>  *               engine.
>  *
>  * @since This function is available since SDL_ttf 3.0.0.
>  *
>  * @sa GPUTextEngine.SetGPUWinding
>  */
> inline GPUTextEngineWinding GetGPUTextEngineWinding(TextEngineParam engine)
> {
>   return TTF_GetGPUTextEngineWinding(engine);
> }
> 
> inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding() const
> {
>   return SDL::GetGPUTextEngineWinding(get());
5626,5627d5661
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
5664c5698
<   return CheckError(TTF_GetTextProperties(text));
---
>   return {CheckError(TTF_GetTextProperties(text))};
5769c5803
<   return CheckError(TTF_GetTextFont(text));
---
>   return {CheckError(TTF_GetTextFont(text))};
5828,5831c5862,5863
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  *               code](https://unicode.org/iso15924/iso15924-codes.html).
5882,5885c5914
<  * @param r the red color value in the range of 0-255.
<  * @param g the green color value in the range of 0-255.
<  * @param b the blue color value in the range of 0-255.
<  * @param a the alpha value in the range of 0-255.
---
>  * @param c the color value in the range of 0-255.
5898c5927
<   CheckError(TTF_SetTextColor(text, c));
---
>   CheckError(TTF_SetTextColor(text, c.r, c.g, c.b, c.a));
5909,5912c5938
<  * @param r the red color value, normally in the range of 0-1.
<  * @param g the green color value, normally in the range of 0-1.
<  * @param b the blue color value, normally in the range of 0-1.
<  * @param a the alpha value in the range of 0-1.
---
>  * @param c the color value, normally in the range of 0-1.
5925c5951
<   CheckError(TTF_SetTextColorFloat(text, c));
---
>   CheckError(TTF_SetTextColorFloat(text, c.r, c.g, c.b, c.a));
5968,5975c5994
<  * @param r a pointer filled in with the red color value in the range of
<  *          0-255, may be nullptr.
<  * @param g a pointer filled in with the green color value in the range of
<  *          0-255, may be nullptr.
<  * @param b a pointer filled in with the blue color value in the range of
<  *          0-255, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-255,
<  *          may be nullptr.
---
>  * @return The color in the range of 0-255 on success.
5988c6007,6009
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextColor(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
5996c6017
< inline Color Text::GetColor() { return SDL::GetTextColor(m_resource); }
---
> inline Color Text::GetColor() const { return SDL::GetTextColor(m_resource); }
6033,6040c6054
<  * @param r a pointer filled in with the red color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param g a pointer filled in with the green color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param b a pointer filled in with the blue color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-1, may
<  *          be nullptr.
---
>  * @return The color in the range of 0-1 on success.
6053c6067,6069
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextColorFloat(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6061c6077
< inline FColor Text::GetColorFloat()
---
> inline FColor Text::GetColorFloat() const
6075,6076c6091
<  * @param x the x offset of the upper left corner of this text in pixels.
<  * @param y the y offset of the upper left corner of this text in pixels.
---
>  * @param p the x, y offset of the upper left corner of this text in pixels.
6087c6102
<   return TTF_SetTextPosition(text, p);
---
>   return TTF_SetTextPosition(text, p.x, p.y);
6120,6123c6135,6138
<  * @param x a pointer filled in with the x offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
<  * @param y a pointer filled in with the y offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
---
>  * @returns a Point with the offset of the upper left corner of this text in
>  *          pixels on success.
>  * @throws Error on failure.
>  *
6134c6149,6151
<   static_assert(false, "Not implemented");
---
>   Point p;
>   CheckError(GetTextPosition(text, &p.x, &p.y));
>   return p;
6142c6159,6162
< inline Point Text::GetPosition() { return SDL::GetTextPosition(m_resource); }
---
> inline Point Text::GetPosition() const
> {
>   return SDL::GetTextPosition(m_resource);
> }
6175,6176c6195,6196
<  * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<  *                   if the text is being wrapped on newline characters.
---
>  * @returns maximum width in pixels or 0 if the text is being wrapped on newline
>  *          characters.
6188c6208,6210
<   return CheckError(TTF_GetTextWrapWidth(text));
---
>   int w;
>   CheckError(TTF_GetTextWrapWidth(text, &w));
>   return w;
6259,6260d6280
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6274c6294
<   CheckError(TTF_SetTextString(text, string));
---
>   CheckError(TTF_SetTextString(text, string.data(), string.size()));
6293,6294d6312
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6310c6328
<   CheckError(TTF_InsertTextString(text, offset, string));
---
>   CheckError(TTF_InsertTextString(text, offset, string.data(), string.size()));
6325,6326d6342
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6340c6356
<   CheckError(TTF_AppendTextString(text, string));
---
>   CheckError(TTF_AppendTextString(text, string.data(), string.size()));
6411,6414c6427,6428
<  * @param w a pointer filled in with the width of the text, in pixels, may be
<  *          nullptr.
<  * @param h a pointer filled in with the height of the text, in pixels, may be
<  *          nullptr.
---
>  * @returns Point containing the size on x and y axis on success or
>  *          std::nullopt on failure; call GetError() for more information.
6424c6438,6440
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetTextSize(text, &p.x, &p.y);
>   return p;
6432c6448
< inline Point Text::GetSize() { return SDL::GetTextSize(m_resource); }
---
> inline Point Text::GetSize() const { return SDL::GetTextSize(m_resource); }
6505,6506d6520
<  * @param count a pointer filled in with the number of substrings returned,
<  *              may be nullptr.
6520c6534,6536
<   return TTF_GetTextSubStringsForRange(text, offset, length);
---
>   int count = 0;
>   auto data = TTF_GetTextSubStringsForRange(text, offset, length, &count);
>   return OwnArray<SubString*>{data, size_t(count)};
6535,6537c6551
<  * @param x the x coordinate relative to the left side of the text, may be
<  *          outside the bounds of the text area.
<  * @param y the y coordinate relative to the top side of the text, may be
---
>  * @param p the coordinates relative to the top-left side of the text, may be
6552c6566
<   CheckError(TTF_GetTextSubStringForPoint(text, p, substring));
---
>   CheckError(TTF_GetTextSubStringForPoint(text, p.x, p.y, substring));
6648c6662
<  * @sa Text.Text
---
>  * @sa RendererTextEngine.RendererTextEngine
6682a6697,6698
> 
> #endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
