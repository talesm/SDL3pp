4d3
< #include <SDL3/SDL_ttf.h>
10a10,18
> #if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
>   __has_include(<SDL3_ttf/SDL_ttf.h>)
> #define SDL3PP_ENABLE_TTF
> #endif
> 
> #if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
> 
> #include <SDL3_ttf/SDL_ttf.h>
> 
14c22
<  * @defgroup CategorySDLTTF Category SDLTTF
---
>  * @defgroup CategorySDLTTF True type font support
129,130c137
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_TTF_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
132c139,146
< #define SDL_TTF_MINOR_VERSION 2
---
> /**
>  * @name TTF version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_TTF_MAJOR_VERSION
> 
> #define SDL_TTF_MINOR_VERSION
134c148
< #define SDL_TTF_MICRO_VERSION 3
---
> #define SDL_TTF_MICRO_VERSION
136c150,154
< /// This is the version number macro for the current SDL_ttf version.
---
> ///@}
> 
> /**
>  * This is the version number macro for the current SDL_ttf version.
>  */
141c159,161
< /// This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
---
> /**
>  * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
>  */
147a168,169
> #endif // SDL3PP_DOC
> 
263a286
> /// Internal data for Text
350c373
<  * .
---
>  *
433,434d455
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
461,462d481
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
463a483
>    * @param ptsize point size to use for the newly-opened font.
466d485
<    * @param ptsize point size to use for the newly-opened font.
477c496
<     : m_resource(CheckError(TTF_OpenFontIO(src, ptsize, closeio)))
---
>     : m_resource(CheckError(TTF_OpenFontIO(src, closeio, ptsize)))
581d599
<    * @sa Font.Font
591,592d608
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
1199,1202c1215,1217
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
>    *
1354,1355c1369
<    * @param kerning a pointer filled in with the kerning size between the two
<    *                glyphs, in pixels, may be nullptr.
---
>    * @returns the kerning size between the two glyphs, in pixels.
1364a1379,1393
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @returns return a Point with the width, height.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1367c1396,1398
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSize(text, &p.x, &p.y);
>     return p;
1376d1406
<    * @param font the font to query.
1378,1379d1407
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1390a1419,1439
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * Text is wrapped to multiple lines on line endings and on word boundaries if
>    * it extends beyond `wrap_width` in pixels.
>    *
>    * If wrap_width is 0, this function will only wrap on newline characters.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @param wrap_width the maximum width or 0 to wrap on newline characters.
>    * @returns return a Point with the width, height on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1393c1442,1444
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSizeWrapped(text, wrap_width, &p.x, &p.y);
>     return p;
1407d1457
<    * @param font the font to query.
1409,1410d1458
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1434d1481
<    * @param font the font to query.
1436,1437d1482
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1473d1517
<    * @param font the font to render with.
1475,1476d1518
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1508d1549
<    * @param font the font to render with.
1510,1511d1550
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1577d1615
<    * @param font the font to render with.
1579,1580d1616
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1613d1648
<    * @param font the font to render with.
1615,1616d1649
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1685d1717
<    * @param font the font to render with.
1687,1688d1718
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1719d1748
<    * @param font the font to render with.
1721,1722d1749
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1787d1813
<    * @param font the font to render with.
1789,1790d1814
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1823d1846
<    * @param font the font to render with.
1825,1826d1847
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1947c1968
<  *
---
>  * A resource engine
1981c2002
<   ~TextEngine() { Destroy(m_resource); }
---
>   virtual ~TextEngine() = default;
1984c2005
<   TextEngine& operator=(TextEngine other)
---
>   TextEngine& operator=(TextEngine&& other)
1989a2011,2013
>   /// Assignment operator.
>   TextEngine& operator=(const TextEngine& other) = delete;
> 
2013,2014c2037,2038
<   /// frees up textEngine.
<   void Destroy() { static_assert(false, "Not implemented"); }
---
>   /// frees up textEngine. Pure virtual
>   virtual void Destroy() = 0;
2022,2023d2045
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
2036a2059
> /// A surface based text engine
2053c2076
<     : T(TTF_CreateSurfaceTextEngine())
---
>     : TextEngine(TTF_CreateSurfaceTextEngine())
2065,2067d2087
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
2075c2095
<   void Destroy();
---
>   void Destroy() final;
2077a2098
> /// A renderer based text engine
2097c2118
<     : T(TTF_CreateRendererTextEngine(renderer))
---
>     : TextEngine(TTF_CreateRendererTextEngine(renderer))
2126c2147
<     : T(TTF_CreateRendererTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateRendererTextEngineWithProperties(props))
2138,2140d2158
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
2148c2166
<   void Destroy();
---
>   void Destroy() final;
2150a2169
> /// A GPU based text engine
2171c2190
<     : T(TTF_CreateGPUTextEngine(device))
---
>     : TextEngine(TTF_CreateGPUTextEngine(device))
2200c2219
<     : T(TTF_CreateGPUTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateGPUTextEngineWithProperties(props))
2210,2211d2228
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2221,2222c2238
<   static void SetGPUWinding(TextEngineParam engine,
<                             GPUTextEngineWinding winding);
---
>   void SetGPUWinding(GPUTextEngineWinding winding);
2228,2229d2243
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2240c2254
<   GPUTextEngineWinding GetGPUWinding(TextEngineParam engine) const;
---
>   GPUTextEngineWinding GetGPUWinding() const;
2248,2250d2261
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
2258c2269
<   void Destroy();
---
>   void Destroy() final;
2324a2336
>  * @param ptsize point size to use for the newly-opened font.
2327d2338
<  * @param ptsize point size to use for the newly-opened font.
2446c2457
<   return CheckError(TTF_CopyFont(existing_font));
---
>   return Font(CheckError(TTF_CopyFont(existing_font)));
2475c2486
<   return CheckError(TTF_GetFontProperties(font));
---
>   return {CheckError(TTF_GetFontProperties(font))};
2940,2943d2950
< #endif // SDL_TTF_VERSION_ATLEAST(3, 2, 2)
< 
< #if SDL_TTF_VERSION_ATLEAST(3, 2, 2)
< 
3354,3357c3361,3362
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  * code](https://unicode.org/iso15924/iso15924-codes.html).
3381,3383c3386,3388
<  * @returns an
<  *          [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)
<  *          or 0 if a script hasn't been set.
---
>  * @returns an [ISO 15924
>  *          code](https://unicode.org/iso15924/iso15924-codes.html) or 0 if a
>  *          script hasn't been set.
3485c3490
<   return TTF_GetGlyphImage(font, ch, image_type);
---
>   return Surface{TTF_GetGlyphImage(font, ch, image_type)};
3515c3520
<   return TTF_GetGlyphImageForIndex(font, glyph_index, image_type);
---
>   return Surface(TTF_GetGlyphImageForIndex(font, glyph_index, image_type));
3579,3580c3584
<  * @param kerning a pointer filled in with the kerning size between the two
<  *                glyphs, in pixels, may be nullptr.
---
>  * @returns the kerning size between the two glyphs, in pixels.
3590c3594,3595
<   return CheckError(TTF_GetGlyphKerning(font, previous_ch, ch));
---
>   if (int r; TTF_GetGlyphKerning(font, previous_ch, ch, &r)) return r;
>   throw Error();
3606,3607d3610
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3619c3622
<   CheckError(TTF_GetStringSize(font, text, w, h));
---
>   CheckError(TTF_GetStringSize(font, text.data(), text.size(), w, h));
3640,3641d3642
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3658c3659,3660
<   CheckError(TTF_GetStringSizeWrapped(font, text, wrap_width, w, h));
---
>   CheckError(
>     TTF_GetStringSizeWrapped(font, text.data(), text.size(), wrap_width, w, h));
3679,3680d3680
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3700,3701c3700,3705
<   CheckError(
<     TTF_MeasureString(font, text, max_width, measured_width, measured_length));
---
>   CheckError(TTF_MeasureString(font,
>                                text.data(),
>                                text.size(),
>                                max_width,
>                                measured_width,
>                                measured_length));
3732,3733d3735
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3750c3752
<   return TTF_RenderText_Solid(font, text, fg);
---
>   return Surface{TTF_RenderText_Solid(font, text.data(), text.size(), fg)};
3775,3776d3776
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3797c3797,3798
<   return TTF_RenderText_Solid_Wrapped(font, text, fg, wrapLength);
---
>   return Surface(TTF_RenderText_Solid_Wrapped(
>     font, text.data(), text.size(), fg, wrapLength));
3836c3837
<   return TTF_RenderGlyph_Solid(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Solid(font, ch, fg));
3864,3865d3864
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3885c3884
<   return TTF_RenderText_Shaded(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_Shaded(font, text.data(), text.size(), fg, bg));
3913,3914d3911
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3937c3934,3935
<   return TTF_RenderText_Shaded_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_Shaded_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
3982c3980
<   return TTF_RenderGlyph_Shaded(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_Shaded(font, ch, fg, bg));
4011,4012d4008
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4030c4026
<   return TTF_RenderText_Blended(font, text, fg);
---
>   return Surface(TTF_RenderText_Blended(font, text.data(), text.size(), fg));
4055,4056d4050
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4077c4071,4072
<   return TTF_RenderText_Blended_Wrapped(font, text, fg, wrap_width);
---
>   return Surface(TTF_RenderText_Blended_Wrapped(
>     font, text.data(), text.size(), fg, wrap_width));
4116c4111
<   return TTF_RenderGlyph_Blended(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Blended(font, ch, fg));
4143,4144d4137
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4164c4157
<   return TTF_RenderText_LCD(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_LCD(font, text.data(), text.size(), fg, bg));
4192,4193d4184
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4216c4207,4208
<   return TTF_RenderText_LCD_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_LCD_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4261c4253
<   return TTF_RenderGlyph_LCD(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_LCD(font, ch, fg, bg));
4320,4321d4311
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4333c4323
<     : m_resource(TTF_CreateText(engine, font, text))
---
>     : m_resource(TTF_CreateText(engine, font, text.data(), text.size()))
4364c4354
<   /// Converts to bool
---
>   /// converts to bool
4389,4393c4379,4380
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4414,4418c4401,4402
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4576,4579c4560,4561
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
4615,4619c4597
<    * @param text the Text to modify.
<    * @param r the red color value in the range of 0-255.
<    * @param g the green color value in the range of 0-255.
<    * @param b the blue color value in the range of 0-255.
<    * @param a the alpha value in the range of 0-255.
---
>    * @param c the color values in the range of 0-255.
4637,4641c4615
<    * @param text the Text to modify.
<    * @param r the red color value, normally in the range of 0-1.
<    * @param g the green color value, normally in the range of 0-1.
<    * @param b the blue color value, normally in the range of 0-1.
<    * @param a the alpha value in the range of 0-1.
---
>    * @param c the color value, normally in the range of 0-1.
4680,4688c4654
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value in the range of
<    *          0-255, may be nullptr.
<    * @param g a pointer filled in with the green color value in the range of
<    *          0-255, may be nullptr.
<    * @param b a pointer filled in with the blue color value in the range of
<    *          0-255, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-255,
<    *          may be nullptr.
---
>    * @return The color in the range of 0-255 on success.
4699c4665
<   Color GetColor();
---
>   Color GetColor() const;
4727,4735c4693
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param g a pointer filled in with the green color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param b a pointer filled in with the blue color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-1, may
<    *          be nullptr.
---
>    * @return The color in the range of 0-1 on success.
4746c4704
<   FColor GetColorFloat();
---
>   FColor GetColorFloat() const;
4756,4758c4714
<    * @param text the Text to modify.
<    * @param x the x offset of the upper left corner of this text in pixels.
<    * @param y the y offset of the upper left corner of this text in pixels.
---
>    * @param p the x, y offset of the upper left corner of this text in pixels.
4789,4793c4745,4747
<    * @param text the Text to query.
<    * @param x a pointer filled in with the x offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
<    * @param y a pointer filled in with the y offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
---
>    * @returns a Point with the offset of the upper left corner of this text in
>    *          pixels on success.
>    * @throws Error on failure.
4802c4756
<   Point GetPosition();
---
>   Point GetPosition() const;
4825,4827c4779,4780
<    * @param text the Text to query.
<    * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<    *                   if the text is being wrapped on newline characters.
---
>    * @returns an int with the maximum width in pixels or 0 if the text is being
>    *          wrapped on newline characters on success.
4882,4885c4835
<    * @param text the Text to modify.
<    * @param string the UTF-8 text to use, may be nullptr.
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
---
>    * @param string the UTF-8 text to use.
4904d4853
<    * @param text the Text to modify.
4910,4911d4858
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4930d4876
<    * @param text the Text to modify.
4932,4933d4877
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4996,5000c4940
<    * @param text the Text to query.
<    * @param w a pointer filled in with the width of the text, in pixels, may be
<    *          nullptr.
<    * @param h a pointer filled in with the height of the text, in pixels, may be
<    *          nullptr.
---
>    * @returns Point containing the size on x and y axis on success.
5006a4947,4948
>    *
>    * @sa GetSize(int*,int*) if might want only one of the coordinates
5008c4950
<   Point GetSize();
---
>   Point GetSize() const;
5031c4973,4976
<   SubStringIterator begin() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to first substring
>    */
>   SubStringIterator begin() const;
5033c4978,4981
<   SubStringIterator end() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to one past last substring
>    */
>   SubStringIterator end() const;
5035,5038c4983,4998
<   SubStringIterator GetSubStringForLine(int line) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Get iterator to substring of a text object that contains the given line.
>    *
>    * If `line` is greater than or equal to `text->num_lines` this will return an
>    * iterator equal to end().
>    *
>    * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
>    * @returns iterator on success or false on failure; call GetError() for more
>    *          information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForLine(int line) const;
5060a5021,5031
>   /**
>    * Get all substrings of a text object.
>    *
>    * @returns a nullptr terminated array of substring pointers or nullptr on
>    *          failure; call GetError() for more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
5063c5034
<     static_assert(false, "Not implemented");
---
>     return GetSubStringsForRange(0);
5072,5073d5042
<    * @param count a pointer filled in with the number of substrings returned,
<    *              may be nullptr.
5083,5088c5052
<   OwnArray<SubString*> GetSubStringsForRange(int offset, int length) const;
< 
<   SubStringIterator GetSubStringForPoint(Point p) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const;
5095,5096c5059
<    * @param text the Text to query.
<    * @param x the x coordinate relative to the left side of the text, may be
---
>    * @param p the coordinates relative to the top-left side of the text, may be
5098c5061,5076
<    * @param y the y coordinate relative to the top side of the text, may be
---
>    * @returns the iterator on success or false on failure; call GetError() for
>    *          more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForPoint(Point p) const;
> 
>   /**
>    * Get the portion of a text string that is closest to a point.
>    *
>    * This will return the closest substring of text to the given point.
>    *
>    * @param p the coordinates relative to the top-left side of the text, may be
5167c5145
<   const char* GetText() const { static_assert(false, "Not implemented"); }
---
>   const char* GetText() const { return m_resource->text; }
5170c5148
<   int GetNumLines() const { static_assert(false, "Not implemented"); }
---
>   int GetNumLines() const { return m_resource->num_lines; }
5183c5161
<   TextRef(TextParam resource)
---
>   TextRef(TextParam resource = nullptr)
5197a5176,5179
> /**
>  * Iterator for substrings
>  *
>  */
5204,5211c5186,5188
<   constexpr SubStringIterator(TextRef text) {}
< 
< public:
<   constexpr SubStringIterator() {}
< 
<   constexpr operator bool() const { static_assert(false, "Not implemented"); }
< 
<   constexpr const SubString& operator*() const
---
>   constexpr SubStringIterator(TextRef text)
>     : m_text(text)
>     , m_subString(0)
5213d5189
<     static_assert(false, "Not implemented");
5216c5192,5195
<   constexpr const SubString* operator->() const
---
> public:
>   /// Default constructor.
>   constexpr SubStringIterator()
>     : SubStringIterator(TextRef{})
5218d5196
<     static_assert(false, "Not implemented");
5220a5199,5208
>   /// True if pointing to valid SubString.
>   constexpr operator bool() const { return bool(m_text); }
> 
>   /// Retrieve SubString
>   constexpr const SubString& operator*() const { return m_subString; }
> 
>   /// Retrieve SubString.
>   constexpr const SubString* operator->() const { return &m_subString; }
> 
>   /// Comparison.
5223c5211
<     static_assert(false, "Not implemented");
---
>     return m_subString.offset == other.m_subString.offset;
5225a5214
>   /// Increment operator.
5228c5217,5218
<     static_assert(false, "Not implemented");
---
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return *this;
5230a5221
>   /// Increment operator.
5233c5224,5226
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return curr;
5235a5229
>   /// Decrement operator.
5238c5232,5233
<     static_assert(false, "Not implemented");
---
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return *this;
5240a5236
>   /// Decrement operator.
5243c5239,5241
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return curr;
5244a5243,5244
> 
>   friend class Text;
5272,5275c5272,5273
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5289c5287
<   CheckError(TTF_DrawSurfaceText(text, p, surface));
---
>   CheckError(TTF_DrawSurfaceText(text, p.x, p.y, surface));
5392,5395c5390,5391
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5404c5400
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5408c5404
<   CheckError(TTF_DrawRendererText(text, p));
---
>   CheckError(TTF_DrawRendererText(text, p.x, p.y));
5527c5523
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5562,5563c5558,5574
< inline void GPUTextEngine::SetGPUWinding(TextEngineParam engine,
<                                          GPUTextEngineWinding winding)
---
> /**
>  * Sets the winding order of the vertices returned by Text.GetGPUDrawData
>  * for a particular GPU text engine.
>  *
>  * @param engine a TextEngine object created with
>  *               GPUTextEngine.GPUTextEngine().
>  * @param winding the new winding order option.
>  *
>  * @threadsafety This function should be called on the thread that created the
>  *               engine.
>  *
>  * @since This function is available since SDL_ttf 3.0.0.
>  *
>  * @sa GPUTextEngine.GetGPUWinding
>  */
> inline void SetGPUTextEngineWinding(TextEngineParam engine,
>                                     GPUTextEngineWinding winding)
5565c5576
<   SDL::SetGPUTextEngineWinding(engine, winding);
---
>   TTF_SetGPUTextEngineWinding(engine, winding);
5568,5569c5579
< inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding(
<   TextEngineParam engine) const
---
> inline void GPUTextEngine::SetGPUWinding(GPUTextEngineWinding winding)
5571c5581,5607
<   return SDL::GetGPUTextEngineWinding(engine);
---
>   SDL::SetGPUTextEngineWinding(get(), winding);
> }
> 
> /**
>  * Get the winding order of the vertices returned by Text.GetGPUDrawData
>  * for a particular GPU text engine
>  *
>  * @param engine a TextEngine object created with
>  *               GPUTextEngine.GPUTextEngine().
>  * @returns the winding order used by the GPU text engine or
>  *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
>  *
>  * @threadsafety This function should be called on the thread that created the
>  *               engine.
>  *
>  * @since This function is available since SDL_ttf 3.0.0.
>  *
>  * @sa GPUTextEngine.SetGPUWinding
>  */
> inline GPUTextEngineWinding GetGPUTextEngineWinding(TextEngineParam engine)
> {
>   return TTF_GetGPUTextEngineWinding(engine);
> }
> 
> inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding() const
> {
>   return SDL::GetGPUTextEngineWinding(get());
5581,5582d5616
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
5619c5653
<   return CheckError(TTF_GetTextProperties(text));
---
>   return {CheckError(TTF_GetTextProperties(text))};
5724c5758
<   return CheckError(TTF_GetTextFont(text));
---
>   return {CheckError(TTF_GetTextFont(text))};
5783,5786c5817,5818
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  *               code](https://unicode.org/iso15924/iso15924-codes.html).
5834,5837c5866
<  * @param r the red color value in the range of 0-255.
<  * @param g the green color value in the range of 0-255.
<  * @param b the blue color value in the range of 0-255.
<  * @param a the alpha value in the range of 0-255.
---
>  * @param c the color value in the range of 0-255.
5850c5879
<   CheckError(TTF_SetTextColor(text, c));
---
>   CheckError(TTF_SetTextColor(text, c.r, c.g, c.b, c.a));
5861,5864c5890
<  * @param r the red color value, normally in the range of 0-1.
<  * @param g the green color value, normally in the range of 0-1.
<  * @param b the blue color value, normally in the range of 0-1.
<  * @param a the alpha value in the range of 0-1.
---
>  * @param c the color value, normally in the range of 0-1.
5877c5903
<   CheckError(TTF_SetTextColorFloat(text, c));
---
>   CheckError(TTF_SetTextColorFloat(text, c.r, c.g, c.b, c.a));
5916,5923c5942
<  * @param r a pointer filled in with the red color value in the range of
<  *          0-255, may be nullptr.
<  * @param g a pointer filled in with the green color value in the range of
<  *          0-255, may be nullptr.
<  * @param b a pointer filled in with the blue color value in the range of
<  *          0-255, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-255,
<  *          may be nullptr.
---
>  * @return The color in the range of 0-255 on success.
5936c5955,5957
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextColor(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
5944c5965
< inline Color Text::GetColor() { return SDL::GetTextColor(m_resource); }
---
> inline Color Text::GetColor() const { return SDL::GetTextColor(m_resource); }
5981,5988c6002
<  * @param r a pointer filled in with the red color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param g a pointer filled in with the green color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param b a pointer filled in with the blue color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-1, may
<  *          be nullptr.
---
>  * @return The color in the range of 0-1 on success.
6001c6015,6017
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextColorFloat(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6009c6025
< inline FColor Text::GetColorFloat()
---
> inline FColor Text::GetColorFloat() const
6023,6024c6039
<  * @param x the x offset of the upper left corner of this text in pixels.
<  * @param y the y offset of the upper left corner of this text in pixels.
---
>  * @param p the x, y offset of the upper left corner of this text in pixels.
6035c6050
<   return TTF_SetTextPosition(text, p);
---
>   return TTF_SetTextPosition(text, p.x, p.y);
6068,6071c6083,6086
<  * @param x a pointer filled in with the x offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
<  * @param y a pointer filled in with the y offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
---
>  * @returns a Point with the offset of the upper left corner of this text in
>  *          pixels on success.
>  * @throws Error on failure.
>  *
6082c6097,6099
<   static_assert(false, "Not implemented");
---
>   Point p;
>   CheckError(GetTextPosition(text, &p.x, &p.y));
>   return p;
6090c6107,6110
< inline Point Text::GetPosition() { return SDL::GetTextPosition(m_resource); }
---
> inline Point Text::GetPosition() const
> {
>   return SDL::GetTextPosition(m_resource);
> }
6123,6124c6143,6144
<  * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<  *                   if the text is being wrapped on newline characters.
---
>  * @returns maximum width in pixels or 0 if the text is being wrapped on newline
>  *          characters.
6136c6156,6158
<   return CheckError(TTF_GetTextWrapWidth(text));
---
>   int w;
>   CheckError(TTF_GetTextWrapWidth(text, &w));
>   return w;
6207,6208d6228
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6222c6242
<   CheckError(TTF_SetTextString(text, string));
---
>   CheckError(TTF_SetTextString(text, string.data(), string.size()));
6241,6242d6260
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6258c6276
<   CheckError(TTF_InsertTextString(text, offset, string));
---
>   CheckError(TTF_InsertTextString(text, offset, string.data(), string.size()));
6273,6274d6290
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6288c6304
<   CheckError(TTF_AppendTextString(text, string));
---
>   CheckError(TTF_AppendTextString(text, string.data(), string.size()));
6359,6362c6375,6376
<  * @param w a pointer filled in with the width of the text, in pixels, may be
<  *          nullptr.
<  * @param h a pointer filled in with the height of the text, in pixels, may be
<  *          nullptr.
---
>  * @returns Point containing the size on x and y axis on success or
>  *          std::nullopt on failure; call GetError() for more information.
6372c6386,6388
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetTextSize(text, &p.x, &p.y);
>   return p;
6380c6396
< inline Point Text::GetSize() { return SDL::GetTextSize(m_resource); }
---
> inline Point Text::GetSize() const { return SDL::GetTextSize(m_resource); }
6451,6452d6466
<  * @param count a pointer filled in with the number of substrings returned,
<  *              may be nullptr.
6466c6480,6482
<   return TTF_GetTextSubStringsForRange(text, offset, length);
---
>   int count = 0;
>   auto data = TTF_GetTextSubStringsForRange(text, offset, length, &count);
>   return OwnArray<SubString*>{data, size_t(count)};
6481,6483c6497
<  * @param x the x coordinate relative to the left side of the text, may be
<  *          outside the bounds of the text area.
<  * @param y the y coordinate relative to the top side of the text, may be
---
>  * @param p the coordinates relative to the top-left side of the text, may be
6498c6512
<   CheckError(TTF_GetTextSubStringForPoint(text, p, substring));
---
>   CheckError(TTF_GetTextSubStringForPoint(text, p.x, p.y, substring));
6594c6608
<  * @sa Text.Text
---
>  * @sa RendererTextEngine.RendererTextEngine
6628a6643,6644
> 
> #endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
