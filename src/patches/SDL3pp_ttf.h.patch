4d3
< #include <SDL3/SDL_ttf.h>
9a9,17
> #if !defined(SDL3PP_DISABLE_TTF) && !defined(SDL3PP_ENABLE_TTF) &&             \
>   __has_include(<SDL3_ttf/SDL_ttf.h>)
> #define SDL3PP_ENABLE_TTF
> #endif
> 
> #if defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
> 
> #include <SDL3_ttf/SDL_ttf.h>
> 
13c21
<  * @defgroup CategorySDLTTF Category SDLTTF
---
>  * @defgroup CategorySDLTTF True type font support
128,129c136
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_TTF_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
131c138,143
< #define SDL_TTF_MINOR_VERSION 2
---
> /**
>  * @name TTF version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_TTF_MAJOR_VERSION
133c145
< #define SDL_TTF_MICRO_VERSION 3
---
> #define SDL_TTF_MINOR_VERSION
135c147,153
< /// This is the version number macro for the current SDL_ttf version.
---
> #define SDL_TTF_MICRO_VERSION
> 
> ///@}
> 
> /**
>  * This is the version number macro for the current SDL_ttf version.
>  */
140c158,160
< /// This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
---
> /**
>  * This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.
>  */
146a167,168
> #endif // SDL3PP_DOC
> 
262a285
> /// Internal data for Text
349c372
<  * .
---
>  *
432,433d454
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
460,461d480
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
462a482
>    * @param ptsize point size to use for the newly-opened font.
465d484
<    * @param ptsize point size to use for the newly-opened font.
476c495
<     : m_resource(CheckError(TTF_OpenFontIO(src, ptsize, closeio)))
---
>     : m_resource(CheckError(TTF_OpenFontIO(src, closeio, ptsize)))
580d598
<    * @sa Font.Font
590,591d607
<    * When done with the returned Font, use Font.Close() to dispose of it.
<    *
1198,1201c1214,1216
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
>    *
1353,1354c1368
<    * @param kerning a pointer filled in with the kerning size between the two
<    *                glyphs, in pixels, may be nullptr.
---
>    * @returns the kerning size between the two glyphs, in pixels.
1363a1378,1392
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @returns return a Point with the width, height.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1366c1395,1397
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSize(text, &p.x, &p.y);
>     return p;
1375d1405
<    * @param font the font to query.
1377,1378d1406
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1389a1418,1438
>   /**
>    * Calculate the dimensions of a rendered string of UTF-8 text.
>    *
>    * This will report the width and height, in pixels, of the space that the
>    * specified string will take to fully render.
>    *
>    * Text is wrapped to multiple lines on line endings and on word boundaries if
>    * it extends beyond `wrap_width` in pixels.
>    *
>    * If wrap_width is 0, this function will only wrap on newline characters.
>    *
>    * @param text text to calculate, in UTF-8 encoding.
>    * @param wrap_width the maximum width or 0 to wrap on newline characters.
>    * @returns return a Point with the width, height on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               font.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
1392c1441,1443
<     static_assert(false, "Not implemented");
---
>     Point p;
>     GetStringSizeWrapped(text, wrap_width, &p.x, &p.y);
>     return p;
1406d1456
<    * @param font the font to query.
1408,1409d1457
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1433d1480
<    * @param font the font to query.
1435,1436d1481
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1472d1516
<    * @param font the font to render with.
1474,1475d1517
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1507d1548
<    * @param font the font to render with.
1509,1510d1549
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1576d1614
<    * @param font the font to render with.
1578,1579d1615
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1612d1647
<    * @param font the font to render with.
1614,1615d1648
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1684d1716
<    * @param font the font to render with.
1686,1687d1717
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1718d1747
<    * @param font the font to render with.
1720,1721d1748
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1786d1812
<    * @param font the font to render with.
1788,1789d1813
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1822d1845
<    * @param font the font to render with.
1824,1825d1846
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
1946c1967
<  *
---
>  * A resource engine
1980c2001
<   ~TextEngine() { Destroy(m_resource); }
---
>   virtual ~TextEngine() = default;
1983c2004
<   TextEngine& operator=(TextEngine other)
---
>   TextEngine& operator=(TextEngine&& other)
1988a2010,2012
>   /// Assignment operator.
>   TextEngine& operator=(const TextEngine& other) = delete;
> 
2012,2099c2036,2037
<   void Destroy() { static_assert(false, "Not implemented"); }
< 
<   /**
<    * Destroy a text engine created for drawing text on SDL surfaces.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa SurfaceTextEngine.SurfaceTextEngine
<    */
<   void DestroySurface();
< 
<   /**
<    * Destroy a text engine created for drawing text on an SDL renderer.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa RendererTextEngine.RendererTextEngine
<    */
<   void DestroyRenderer();
< 
<   /**
<    * Destroy a text engine created for drawing text with the SDL GPU API.
<    *
<    * All text created by this engine should be destroyed before calling this
<    * function.
<    *
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GPUTextEngine
<    */
<   void DestroyGPU();
< 
<   /**
<    * Sets the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine.
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @param winding the new winding order option.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.GetGPUWinding
<    */
<   void SetGPUWinding(GPUTextEngineWinding winding);
< 
<   /**
<    * Get the winding order of the vertices returned by Text.GetGPUDrawData
<    * for a particular GPU text engine
<    *
<    *               GPUTextEngine.GPUTextEngine().
<    * @returns the winding order used by the GPU text engine or
<    *          GPU_TEXTENGINE_WINDING_INVALID in case of error.
<    *
<    * @threadsafety This function should be called on the thread that created the
<    *               engine.
<    *
<    * @since This function is available since SDL_ttf 3.0.0.
<    *
<    * @sa GPUTextEngine.SetGPUWinding
<    */
<   GPUTextEngineWinding GetGPUWinding() const;
---
>   /// Destroy resource. Pure virtual
>   virtual void Destroy() = 0;
2107,2108d2044
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
2119c2055
<   TextRef CreateText(FontParam font, StringParam text, size_t length);
---
>   Text CreateText(FontParam font, std::string_view text);
2121a2058
> /// A surface based text engine
2138c2075
<     : T(TTF_CreateSurfaceTextEngine())
---
>     : TextEngine(TTF_CreateSurfaceTextEngine())
2150,2152d2086
<    * @param engine a TextEngine object created with
<    *               SurfaceTextEngine.SurfaceTextEngine().
<    *
2160c2094
<   void Destroy();
---
>   void Destroy() final;
2162a2097
> /// A renderer based text engine
2182c2117
<     : T(TTF_CreateRendererTextEngine(renderer))
---
>     : TextEngine(TTF_CreateRendererTextEngine(renderer))
2211c2146
<     : T(TTF_CreateRendererTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateRendererTextEngineWithProperties(props))
2223,2225d2157
<    * @param engine a TextEngine object created with
<    *               RendererTextEngine.RendererTextEngine().
<    *
2233c2165
<   void Destroy();
---
>   void Destroy() final;
2235a2168
> /// A GPU based text engine
2252,2253c2185,2186
<    * @sa TextEngine.DestroyGPU
<    * @sa Text.GetGPUDrawData
---
>    * @sa GPUTextEngine.Destroy
>    * @sa GPUTextEngine.GetGPUDrawData
2256c2189
<     : T(TTF_CreateGPUTextEngine(device))
---
>     : TextEngine(TTF_CreateGPUTextEngine(device))
2285c2218
<     : T(TTF_CreateGPUTextEngineWithProperties(props))
---
>     : TextEngine(TTF_CreateGPUTextEngineWithProperties(props))
2295,2296d2227
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2306,2307c2237
<   static void SetGPUWinding(TextEngineParam engine,
<                             GPUTextEngineWinding winding);
---
>   void SetGPUWinding(GPUTextEngineWinding winding);
2313,2314d2242
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
2325c2253
<   GPUTextEngineWinding GetGPUWinding(TextEngineParam engine) const;
---
>   GPUTextEngineWinding GetGPUWinding() const;
2333,2335d2260
<    * @param engine a TextEngine object created with
<    *               GPUTextEngine.GPUTextEngine().
<    *
2343c2268
<   void Destroy();
---
>   void Destroy() final;
2409a2335
>  * @param ptsize point size to use for the newly-opened font.
2412d2337
<  * @param ptsize point size to use for the newly-opened font.
2531c2456
<   return CheckError(TTF_CopyFont(existing_font));
---
>   return Font(CheckError(TTF_CopyFont(existing_font)));
2560c2485
<   return CheckError(TTF_GetFontProperties(font));
---
>   return {CheckError(TTF_GetFontProperties(font))};
3025,3028d2949
< #endif // SDL_TTF_VERSION_ATLEAST(3, 2, 2)
< 
< #if SDL_TTF_VERSION_ATLEAST(3, 2, 2)
< 
3439,3442c3360,3361
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  * code](https://unicode.org/iso15924/iso15924-codes.html).
3466,3468c3385,3387
<  * @returns an
<  *          [ISO 15924 code](https://unicode.org/iso15924/iso15924-codes.html)
<  *          or 0 if a script hasn't been set.
---
>  * @returns an [ISO 15924
>  *          code](https://unicode.org/iso15924/iso15924-codes.html) or 0 if a
>  *          script hasn't been set.
3570c3489
<   return TTF_GetGlyphImage(font, ch, image_type);
---
>   return Surface{TTF_GetGlyphImage(font, ch, image_type)};
3600c3519
<   return TTF_GetGlyphImageForIndex(font, glyph_index, image_type);
---
>   return Surface(TTF_GetGlyphImageForIndex(font, glyph_index, image_type));
3664,3665c3583
<  * @param kerning a pointer filled in with the kerning size between the two
<  *                glyphs, in pixels, may be nullptr.
---
>  * @returns the kerning size between the two glyphs, in pixels.
3675c3593,3594
<   return CheckError(TTF_GetGlyphKerning(font, previous_ch, ch));
---
>   if (int r; TTF_GetGlyphKerning(font, previous_ch, ch, &r)) return r;
>   throw Error();
3691,3692d3609
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3704c3621
<   CheckError(TTF_GetStringSize(font, text, w, h));
---
>   CheckError(TTF_GetStringSize(font, text.data(), text.size(), w, h));
3725,3726d3641
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3743c3658,3659
<   CheckError(TTF_GetStringSizeWrapped(font, text, wrap_width, w, h));
---
>   CheckError(
>     TTF_GetStringSizeWrapped(font, text.data(), text.size(), wrap_width, w, h));
3764,3765d3679
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3785,3786c3699,3704
<   CheckError(
<     TTF_MeasureString(font, text, max_width, measured_width, measured_length));
---
>   CheckError(TTF_MeasureString(font,
>                                text.data(),
>                                text.size(),
>                                max_width,
>                                measured_width,
>                                measured_length));
3817,3818d3734
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3835c3751
<   return TTF_RenderText_Solid(font, text, fg);
---
>   return Surface{TTF_RenderText_Solid(font, text.data(), text.size(), fg)};
3860,3861d3775
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3882c3796,3797
<   return TTF_RenderText_Solid_Wrapped(font, text, fg, wrapLength);
---
>   return Surface(TTF_RenderText_Solid_Wrapped(
>     font, text.data(), text.size(), fg, wrapLength));
3921c3836
<   return TTF_RenderGlyph_Solid(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Solid(font, ch, fg));
3949,3950d3863
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
3970c3883
<   return TTF_RenderText_Shaded(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_Shaded(font, text.data(), text.size(), fg, bg));
3998,3999d3910
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4022c3933,3934
<   return TTF_RenderText_Shaded_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_Shaded_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4067c3979
<   return TTF_RenderGlyph_Shaded(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_Shaded(font, ch, fg, bg));
4096,4097d4007
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4115c4025
<   return TTF_RenderText_Blended(font, text, fg);
---
>   return Surface(TTF_RenderText_Blended(font, text.data(), text.size(), fg));
4140,4141d4049
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4162c4070,4071
<   return TTF_RenderText_Blended_Wrapped(font, text, fg, wrap_width);
---
>   return Surface(TTF_RenderText_Blended_Wrapped(
>     font, text.data(), text.size(), fg, wrap_width));
4201c4110
<   return TTF_RenderGlyph_Blended(font, ch, fg);
---
>   return Surface(TTF_RenderGlyph_Blended(font, ch, fg));
4228,4229d4136
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4249c4156
<   return TTF_RenderText_LCD(font, text, fg, bg);
---
>   return Surface(TTF_RenderText_LCD(font, text.data(), text.size(), fg, bg));
4277,4278d4183
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
4301c4206,4207
<   return TTF_RenderText_LCD_Wrapped(font, text, fg, bg, wrap_width);
---
>   return Surface(TTF_RenderText_LCD_Wrapped(
>     font, text.data(), text.size(), fg, bg, wrap_width));
4346c4252
<   return TTF_RenderGlyph_LCD(font, ch, fg, bg);
---
>   return Surface(TTF_RenderGlyph_LCD(font, ch, fg, bg));
4405,4406d4310
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
4418c4322
<     : m_resource(TTF_CreateText(engine, font, text))
---
>     : m_resource(TTF_CreateText(engine, font, text.data(), text.size()))
4449c4353
<   /// Converts to bool
---
>   /// converts to bool
4474,4478c4378,4379
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4499,4503c4400,4401
<    * @param text the text to draw.
<    * @param x the x coordinate in pixels, positive from the left edge towards
<    *          the right.
<    * @param y the y coordinate in pixels, positive from the top edge towards the
<    *          bottom.
---
>    * @param p the x,y coordinates in pixels, positive from the top-left edge
>    *          towards the bottom-right.
4661,4664c4559,4560
<    * @param script an
<    *               [ISO 15924
<    * code](https://unicode.org/iso15924/iso15924-codes.html)
<    *               .
---
>    * @param script an [ISO 15924
>    *               code](https://unicode.org/iso15924/iso15924-codes.html).
4700,4704c4596
<    * @param text the Text to modify.
<    * @param r the red color value in the range of 0-255.
<    * @param g the green color value in the range of 0-255.
<    * @param b the blue color value in the range of 0-255.
<    * @param a the alpha value in the range of 0-255.
---
>    * @param c the color values in the range of 0-255.
4722,4726c4614
<    * @param text the Text to modify.
<    * @param r the red color value, normally in the range of 0-1.
<    * @param g the green color value, normally in the range of 0-1.
<    * @param b the blue color value, normally in the range of 0-1.
<    * @param a the alpha value in the range of 0-1.
---
>    * @param c the color value, normally in the range of 0-1.
4765,4773c4653
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value in the range of
<    *          0-255, may be nullptr.
<    * @param g a pointer filled in with the green color value in the range of
<    *          0-255, may be nullptr.
<    * @param b a pointer filled in with the blue color value in the range of
<    *          0-255, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-255,
<    *          may be nullptr.
---
>    * @return The color in the range of 0-255 on success.
4784c4664
<   Color GetColor();
---
>   Color GetColor() const;
4812,4820c4692
<    * @param text the Text to query.
<    * @param r a pointer filled in with the red color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param g a pointer filled in with the green color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param b a pointer filled in with the blue color value, normally in the
<    *          range of 0-1, may be nullptr.
<    * @param a a pointer filled in with the alpha value in the range of 0-1, may
<    *          be nullptr.
---
>    * @return The color in the range of 0-1 on success.
4831c4703
<   FColor GetColorFloat();
---
>   FColor GetColorFloat() const;
4841,4843c4713
<    * @param text the Text to modify.
<    * @param x the x offset of the upper left corner of this text in pixels.
<    * @param y the y offset of the upper left corner of this text in pixels.
---
>    * @param p the x, y offset of the upper left corner of this text in pixels.
4874,4878c4744,4746
<    * @param text the Text to query.
<    * @param x a pointer filled in with the x offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
<    * @param y a pointer filled in with the y offset of the upper left corner of
<    *          this text in pixels, may be nullptr.
---
>    * @returns a Point with the offset of the upper left corner of this text in
>    *          pixels on success.
>    * @throws Error on failure.
4887c4755
<   Point GetPosition();
---
>   Point GetPosition() const;
4910,4912c4778,4779
<    * @param text the Text to query.
<    * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<    *                   if the text is being wrapped on newline characters.
---
>    * @returns an int with the maximum width in pixels or 0 if the text is being
>    *          wrapped on newline characters on success.
4967,4970c4834
<    * @param text the Text to modify.
<    * @param string the UTF-8 text to use, may be nullptr.
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
---
>    * @param string the UTF-8 text to use.
4989d4852
<    * @param text the Text to modify.
4995,4996d4857
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5015d4875
<    * @param text the Text to modify.
5017,5018d4876
<    * @param length the length of the text, in bytes, or 0 for null terminated
<    *               text.
5081,5085c4939
<    * @param text the Text to query.
<    * @param w a pointer filled in with the width of the text, in pixels, may be
<    *          nullptr.
<    * @param h a pointer filled in with the height of the text, in pixels, may be
<    *          nullptr.
---
>    * @returns Point containing the size on x and y axis on success.
5091a4946,4947
>    *
>    * @sa GetSize(int*,int*) if might want only one of the coordinates
5093c4949
<   Point GetSize();
---
>   Point GetSize() const;
5116c4972,4975
<   SubStringIterator begin() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to first substring
>    */
>   SubStringIterator begin() const;
5118c4977,4980
<   SubStringIterator end() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get iterator to one past last substring
>    */
>   SubStringIterator end() const;
5120,5123c4982,4997
<   SubStringIterator GetSubStringForLine(int line) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Get iterator to substring of a text object that contains the given line.
>    *
>    * If `line` is greater than or equal to `text->num_lines` this will return an
>    * iterator equal to end().
>    *
>    * @param line a zero-based line index, in the range [0 .. text->num_lines-1].
>    * @returns iterator on success or false on failure; call GetError() for more
>    *          information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForLine(int line) const;
5145a5020,5030
>   /**
>    * Get all substrings of a text object.
>    *
>    * @returns a nullptr terminated array of substring pointers or nullptr on
>    *          failure; call GetError() for more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
5148c5033
<     static_assert(false, "Not implemented");
---
>     return GetSubStringsForRange(0);
5157,5158d5041
<    * @param count a pointer filled in with the number of substrings returned,
<    *              may be nullptr.
5168,5173c5051
<   OwnArray<SubString*> GetSubStringsForRange(int offset, int length) const;
< 
<   SubStringIterator GetSubStringForPoint(Point p) const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   OwnArray<SubString*> GetSubStringsForRange(int offset, int length = -1) const;
5180,5181c5058
<    * @param text the Text to query.
<    * @param x the x coordinate relative to the left side of the text, may be
---
>    * @param p the coordinates relative to the top-left side of the text, may be
5183c5060,5075
<    * @param y the y coordinate relative to the top side of the text, may be
---
>    * @returns the iterator on success or false on failure; call GetError() for
>    *          more information.
>    *
>    * @threadsafety This function should be called on the thread that created the
>    *               text.
>    *
>    * @since This function is available since SDL_ttf 3.0.0.
>    */
>   SubStringIterator GetSubStringForPoint(Point p) const;
> 
>   /**
>    * Get the portion of a text string that is closest to a point.
>    *
>    * This will return the closest substring of text to the given point.
>    *
>    * @param p the coordinates relative to the top-left side of the text, may be
5212c5104
<   void GetPreviousSubString(const SubString* substring,
---
>   void GetPreviousSubString(const SubString& substring,
5230c5122
<   void GetNextSubString(const SubString* substring, SubString* next) const;
---
>   void GetNextSubString(const SubString& substring, SubString* next) const;
5252c5144
<   const char* GetText() const { static_assert(false, "Not implemented"); }
---
>   const char* GetText() const { return m_resource->text; }
5255c5147
<   int GetNumLines() const { static_assert(false, "Not implemented"); }
---
>   int GetNumLines() const { return m_resource->num_lines; }
5268c5160
<   TextRef(TextParam resource)
---
>   TextRef(TextParam resource = nullptr)
5282a5175,5178
> /**
>  * Iterator for substrings
>  *
>  */
5289c5185,5189
<   constexpr SubStringIterator(TextRef text) {}
---
>   constexpr SubStringIterator(TextRef text)
>     : m_text(text)
>     , m_subString(0)
>   {
>   }
5292,5296c5192,5194
<   constexpr SubStringIterator() {}
< 
<   constexpr operator bool() const { static_assert(false, "Not implemented"); }
< 
<   constexpr const SubString& operator*() const
---
>   /// Default constructor.
>   constexpr SubStringIterator()
>     : SubStringIterator(TextRef{})
5298d5195
<     static_assert(false, "Not implemented");
5301c5198,5208
<   constexpr const SubString* operator->() const
---
>   /// True if pointing to valid SubString.
>   constexpr operator bool() const { return bool(m_text); }
> 
>   /// Retrieve SubString
>   constexpr const SubString& operator*() const { return m_subString; }
> 
>   /// Retrieve SubString.
>   constexpr const SubString* operator->() const { return &m_subString; }
> 
>   /// Comparison.
>   constexpr bool operator==(const SubStringIterator& other) const
5303c5210
<     static_assert(false, "Not implemented");
---
>     return m_subString.offset == other.m_subString.offset;
5306,5307c5213
<   constexpr bool operator==(const SubStringIterator& other) const = default;
< 
---
>   /// Increment operator.
5310c5216,5217
<     static_assert(false, "Not implemented");
---
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return *this;
5312a5220
>   /// Increment operator.
5315c5223,5225
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetNextSubString(m_subString, &m_subString);
>     return curr;
5317a5228
>   /// Decrement operator.
5320c5231,5232
<     static_assert(false, "Not implemented");
---
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return *this;
5322a5235
>   /// Decrement operator.
5325c5238,5240
<     static_assert(false, "Not implemented");
---
>     auto curr = *this;
>     m_text.GetPreviousSubString(m_subString, &m_subString);
>     return curr;
5326a5242,5243
> 
>   friend class Text;
5354,5357c5271,5272
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5371c5286
<   CheckError(TTF_DrawSurfaceText(text, p, surface));
---
>   CheckError(TTF_DrawSurfaceText(text, p.x, p.y, surface));
5379,5383d5293
< inline void SurfaceTextEngine::Destroy()
< {
<   DestroySurfaceTextEngine(release());
< }
< 
5405c5315
< inline void TextEngine::DestroySurface()
---
> inline void SurfaceTextEngine::Destroy()
5479,5482c5389,5390
<  * @param x the x coordinate in pixels, positive from the left edge towards
<  *          the right.
<  * @param y the y coordinate in pixels, positive from the top edge towards the
<  *          bottom.
---
>  * @param p the (x, y) coordinate in pixels, positive from the left edge
>  *          towards the right and from the top edge towards the bottom.
5491c5399
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5495c5403
<   CheckError(TTF_DrawRendererText(text, p));
---
>   CheckError(TTF_DrawRendererText(text, p.x, p.y));
5503,5507d5410
< inline void RendererTextEngine::Destroy()
< {
<   DestroyRendererTextEngine(release());
< }
< 
5529c5432
< inline void TextEngine::DestroyRenderer()
---
> inline void RendererTextEngine::Destroy()
5619c5522
<  * @sa Text.Text
---
>  * @sa GPUTextEngine.GPUTextEngine
5631,5632d5533
< inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
< 
5654,5659c5555
< inline void TextEngine::DestroyGPU() { DestroyGPUTextEngine(release()); }
< 
< inline void TextEngine::SetGPUWinding(GPUTextEngineWinding winding)
< {
<   SDL::SetGPUTextEngineWinding(m_resource, winding);
< }
---
> inline void GPUTextEngine::Destroy() { DestroyGPUTextEngine(release()); }
5682,5688c5578
< inline void GPUTextEngine::SetGPUWinding(TextEngineParam engine,
<                                          GPUTextEngineWinding winding)
< {
<   SDL::TextEngine::SetGPUWinding(engine, winding);
< }
< 
< inline GPUTextEngineWinding TextEngine::GetGPUWinding() const
---
> inline void GPUTextEngine::SetGPUWinding(GPUTextEngineWinding winding)
5690c5580
<   return SDL::GetGPUTextEngineWinding(m_resource);
---
>   SDL::SetGPUTextEngineWinding(get(), winding);
5714,5715c5604
< inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding(
<   TextEngineParam engine) const
---
> inline GPUTextEngineWinding GPUTextEngine::GetGPUWinding() const
5717c5606
<   return SDL::TextEngine::GetGPUWinding(engine);
---
>   return SDL::GetGPUTextEngineWinding(get());
5720,5722c5609
< inline TextRef TextEngine::CreateText(FontParam font,
<                                       StringParam text,
<                                       size_t length)
---
> inline Text TextEngine::CreateText(FontParam font, std::string_view text)
5724c5611
<   return Text(m_resource, font, std::move(text), length);
---
>   return Text(m_resource, font, text);
5734,5735d5620
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
5748,5749c5633
<                        StringParam text,
<                        size_t length)
---
>                        std::string_view text)
5751c5635
<   return Text(TTF_CreateText(engine, font, text, length));
---
>   return Text(engine, font, text);
5768c5652
<   return CheckError(TTF_GetTextProperties(text));
---
>   return {CheckError(TTF_GetTextProperties(text))};
5873c5757
<   return CheckError(TTF_GetTextFont(text));
---
>   return {CheckError(TTF_GetTextFont(text))};
5932,5935c5816,5817
<  * @param script an
<  *               [ISO 15924
<  * code](https://unicode.org/iso15924/iso15924-codes.html)
<  *               .
---
>  * @param script an [ISO 15924
>  *               code](https://unicode.org/iso15924/iso15924-codes.html).
5983,5986c5865
<  * @param r the red color value in the range of 0-255.
<  * @param g the green color value in the range of 0-255.
<  * @param b the blue color value in the range of 0-255.
<  * @param a the alpha value in the range of 0-255.
---
>  * @param c the color value in the range of 0-255.
5999c5878
<   CheckError(TTF_SetTextColor(text, c));
---
>   CheckError(TTF_SetTextColor(text, c.r, c.g, c.b, c.a));
6010,6013c5889
<  * @param r the red color value, normally in the range of 0-1.
<  * @param g the green color value, normally in the range of 0-1.
<  * @param b the blue color value, normally in the range of 0-1.
<  * @param a the alpha value in the range of 0-1.
---
>  * @param c the color value, normally in the range of 0-1.
6026c5902
<   CheckError(TTF_SetTextColorFloat(text, c));
---
>   CheckError(TTF_SetTextColorFloat(text, c.r, c.g, c.b, c.a));
6065,6072c5941
<  * @param r a pointer filled in with the red color value in the range of
<  *          0-255, may be nullptr.
<  * @param g a pointer filled in with the green color value in the range of
<  *          0-255, may be nullptr.
<  * @param b a pointer filled in with the blue color value in the range of
<  *          0-255, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-255,
<  *          may be nullptr.
---
>  * @return The color in the range of 0-255 on success.
6085c5954,5956
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetTextColor(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6093c5964
< inline Color Text::GetColor() { return SDL::GetTextColor(m_resource); }
---
> inline Color Text::GetColor() const { return SDL::GetTextColor(m_resource); }
6130,6137c6001
<  * @param r a pointer filled in with the red color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param g a pointer filled in with the green color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param b a pointer filled in with the blue color value, normally in the
<  *          range of 0-1, may be nullptr.
<  * @param a a pointer filled in with the alpha value in the range of 0-1, may
<  *          be nullptr.
---
>  * @return The color in the range of 0-1 on success.
6150c6014,6016
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   GetTextColorFloat(text, &c.r, &c.g, &c.b, &c.a);
>   return c;
6158c6024
< inline FColor Text::GetColorFloat()
---
> inline FColor Text::GetColorFloat() const
6172,6173c6038
<  * @param x the x offset of the upper left corner of this text in pixels.
<  * @param y the y offset of the upper left corner of this text in pixels.
---
>  * @param p the x, y offset of the upper left corner of this text in pixels.
6184c6049
<   return TTF_SetTextPosition(text, p);
---
>   return TTF_SetTextPosition(text, p.x, p.y);
6217,6220c6082,6085
<  * @param x a pointer filled in with the x offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
<  * @param y a pointer filled in with the y offset of the upper left corner of
<  *          this text in pixels, may be nullptr.
---
>  * @returns a Point with the offset of the upper left corner of this text in
>  *          pixels on success.
>  * @throws Error on failure.
>  *
6231c6096,6098
<   static_assert(false, "Not implemented");
---
>   Point p;
>   CheckError(GetTextPosition(text, &p.x, &p.y));
>   return p;
6239c6106,6109
< inline Point Text::GetPosition() { return SDL::GetTextPosition(m_resource); }
---
> inline Point Text::GetPosition() const
> {
>   return SDL::GetTextPosition(m_resource);
> }
6272,6273c6142,6143
<  * @param wrap_width a pointer filled in with the maximum width in pixels or 0
<  *                   if the text is being wrapped on newline characters.
---
>  * @returns maximum width in pixels or 0 if the text is being wrapped on newline
>  *          characters.
6285c6155,6157
<   return CheckError(TTF_GetTextWrapWidth(text));
---
>   int w;
>   CheckError(TTF_GetTextWrapWidth(text, &w));
>   return w;
6356,6357d6227
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6371c6241
<   CheckError(TTF_SetTextString(text, string));
---
>   CheckError(TTF_SetTextString(text, string.data(), string.size()));
6390,6391d6259
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6407c6275
<   CheckError(TTF_InsertTextString(text, offset, string));
---
>   CheckError(TTF_InsertTextString(text, offset, string.data(), string.size()));
6422,6423d6289
<  * @param length the length of the text, in bytes, or 0 for null terminated
<  *               text.
6437c6303
<   CheckError(TTF_AppendTextString(text, string));
---
>   CheckError(TTF_AppendTextString(text, string.data(), string.size()));
6508,6511c6374,6375
<  * @param w a pointer filled in with the width of the text, in pixels, may be
<  *          nullptr.
<  * @param h a pointer filled in with the height of the text, in pixels, may be
<  *          nullptr.
---
>  * @returns Point containing the size on x and y axis on success or
>  *          std::nullopt on failure; call GetError() for more information.
6521c6385,6387
<   static_assert(false, "Not implemented");
---
>   Point p;
>   GetTextSize(text, &p.x, &p.y);
>   return p;
6529c6395
< inline Point Text::GetSize() { return SDL::GetTextSize(m_resource); }
---
> inline Point Text::GetSize() const { return SDL::GetTextSize(m_resource); }
6600,6601d6465
<  * @param count a pointer filled in with the number of substrings returned,
<  *              may be nullptr.
6615c6479,6481
<   return TTF_GetTextSubStringsForRange(text, offset, length);
---
>   int count = 0;
>   auto data = TTF_GetTextSubStringsForRange(text, offset, length, &count);
>   return OwnArray<SubString*>{data, size_t(count)};
6630,6632c6496
<  * @param x the x coordinate relative to the left side of the text, may be
<  *          outside the bounds of the text area.
<  * @param y the y coordinate relative to the top side of the text, may be
---
>  * @param p the coordinates relative to the top-left side of the text, may be
6647c6511
<   CheckError(TTF_GetTextSubStringForPoint(text, p, substring));
---
>   CheckError(TTF_GetTextSubStringForPoint(text, p.x, p.y, substring));
6673c6537
<                                      const SubString* substring,
---
>                                      const SubString& substring,
6676c6540
<   CheckError(TTF_GetPreviousTextSubString(text, substring, previous));
---
>   CheckError(TTF_GetPreviousTextSubString(text, &substring, previous));
6679c6543
< inline void Text::GetPreviousSubString(const SubString* substring,
---
> inline void Text::GetPreviousSubString(const SubString& substring,
6702c6566
<                                  const SubString* substring,
---
>                                  const SubString& substring,
6705c6569
<   CheckError(TTF_GetNextTextSubString(text, substring, next));
---
>   CheckError(TTF_GetNextTextSubString(text, &substring, next));
6708c6572
< inline void Text::GetNextSubString(const SubString* substring,
---
> inline void Text::GetNextSubString(const SubString& substring,
6743c6607
<  * @sa Text.Text
---
>  * @sa RendererTextEngine.RendererTextEngine
6777a6642,6643
> 
> #endif // defined(SDL3PP_ENABLE_TTF) || defined(SDL3PP_DOC)
