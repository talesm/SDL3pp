11c11
<  * @defgroup CategoryMouse Category Mouse
---
>  * @defgroup CategoryMouse Mouse Support
241,246c241,243
<    * @param w the width of the cursor.
<    * @param h the height of the cursor.
<    * @param hot_x the x-axis offset from the left of the cursor image to the
<    *              mouse x position, in the range of 0 to `w` - 1.
<    * @param hot_y the y-axis offset from the top of the cursor image to the
<    *              mouse y position, in the range of 0 to `h` - 1.
---
>    * @param size the width and height of the cursor.
>    * @param hot the x position of the cursor hot spot, from the top-left, in the
>    *            range of 0 to `size.x` - 1 and 0 to `size.y` - 1.
263c260,261
<     : m_resource(CheckError(SDL_CreateCursor(data, mask, size, hot)))
---
>     : m_resource(
>         CheckError(SDL_CreateCursor(data, mask, size.x, size.y, hot.x, hot.y)))
281,282c279
<    * @param hot_x the x position of the cursor hot spot.
<    * @param hot_y the y position of the cursor hot spot.
---
>    * @param hot the x, y position of the cursor hot spot.
296c293
<     : m_resource(CheckError(SDL_CreateColorCursor(surface, hot)))
---
>     : m_resource(CheckError(SDL_CreateColorCursor(surface, hot.x, hot.y)))
424a422,425
> /**
>  * Represents a button index.
>  *
>  */
427c428
< constexpr MouseButton BUTTON_LEFT = SDL_BUTTON_LEFT; ///< LEFT
---
> constexpr MouseButton BUTTON_LEFT = SDL_BUTTON_LEFT; ///< Left button
429c430
< constexpr MouseButton BUTTON_MIDDLE = SDL_BUTTON_MIDDLE; ///< MIDDLE
---
> constexpr MouseButton BUTTON_MIDDLE = SDL_BUTTON_MIDDLE; ///< Middle button
431c432
< constexpr MouseButton BUTTON_RIGHT = SDL_BUTTON_RIGHT; ///< RIGHT
---
> constexpr MouseButton BUTTON_RIGHT = SDL_BUTTON_RIGHT; ///< Right button
433c434
< constexpr MouseButton BUTTON_X1 = SDL_BUTTON_X1; ///< X1
---
> constexpr MouseButton BUTTON_X1 = SDL_BUTTON_X1; ///< X1 button
435c436
< constexpr MouseButton BUTTON_X2 = SDL_BUTTON_X2; ///< X2
---
> constexpr MouseButton BUTTON_X2 = SDL_BUTTON_X2; ///< X2 button
463a465
> /** Returns mask for button */
490,494c492,493
<  * @param count a pointer filled in with the number of mice returned, may be
<  *              nullptr.
<  * @returns a 0 terminated array of mouse instance IDs or nullptr on failure;
<  *          call GetError() for more information. This should be freed
<  *          with free() when it is no longer needed.
---
>  * @returns a 0 terminated array of mouse instance IDs.
>  * @throws Error on failure.
503c502,507
< inline OwnArray<MouseID> GetMice() { return SDL_GetMice(); }
---
> inline OwnArray<MouseID> GetMice()
> {
>   int count;
>   auto data = CheckError(SDL_GetMice(&count));
>   return OwnArray<MouseID>{data, size_t(count)};
> }
534c538
< inline WindowRef GetMouseFocus() { return SDL_GetMouseFocus(); }
---
> inline WindowRef GetMouseFocus() { return {SDL_GetMouseFocus()}; }
652c656
<   SDL_WarpMouseInWindow(m_resource, p);
---
>   SDL_WarpMouseInWindow(m_resource, p.x, p.y);
666,667c670
<  * @param x the x coordinate.
<  * @param y the y coordinate.
---
>  * @param p the x, y coordinates;
678c681
<   CheckError(SDL_WarpMouseGlobal(p));
---
>   CheckError(SDL_WarpMouseGlobal(p.x, p.y));
680a684,707
> /**
>  * Set relative mouse mode for a window.
>  *
>  * While the window has focus and relative mouse mode is enabled, the cursor
>  * is hidden, the mouse position is constrained to the window, and SDL will
>  * report continuous relative mouse motion even if the mouse is at the edge of
>  * the window.
>  *
>  * If you'd like to keep the mouse position fixed while in relative mode you
>  * can use Window.SetMouseRect(). If you'd like the cursor to be at a
>  * specific location when relative mode ends, you should use
>  * Window.WarpMouse() before disabling relative mode.
>  *
>  * This function will flush any pending mouse motion for this window.
>  *
>  * @param enabled true to enable relative mode, false to disable.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Window.GetRelativeMouseMode
>  */
685a713,723
> /**
>  * Query whether relative mouse mode is enabled for a window.
>  *
>  * @returns true if relative mode is enabled for a window or false otherwise.
>  *
>  * @threadsafety This function should only be called on the main thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Window.SetRelativeMouseMode
>  */
767,772c805,807
<  * @param w the width of the cursor.
<  * @param h the height of the cursor.
<  * @param hot_x the x-axis offset from the left of the cursor image to the
<  *              mouse x position, in the range of 0 to `w` - 1.
<  * @param hot_y the y-axis offset from the top of the cursor image to the
<  *              mouse y position, in the range of 0 to `h` - 1.
---
>  * @param size the width and height of the cursor.
>  * @param hot the x position of the cursor hot spot, from the top-left, in the
>  *            range of 0 to `size.x` - 1 and 0 to `size.y` - 1.
788,789c823
<                            int hot_x,
<                            int hot_y)
---
>                            const PointRaw& hot)
791c825
<   return Cursor(data, mask, size, hot_x, hot_y);
---
>   return Cursor(data, mask, size, hot);
808,809c842
<  * @param hot_x the x position of the cursor hot spot.
<  * @param hot_y the y position of the cursor hot spot.
---
>  * @param hot the position of the cursor hot spot.
822c855
< inline Cursor CreateColorCursor(SurfaceParam surface, int hot_x, int hot_y)
---
> inline Cursor CreateColorCursor(SurfaceParam surface, const PointRaw& hot)
824c857
<   return Cursor(surface, hot_x, hot_y);
---
>   return Cursor(surface, hot);
877c910
< inline CursorRef GetCursor() { return SDL_GetCursor(); }
---
> inline CursorRef GetCursor() { return {SDL_GetCursor()}; }
894c927
<   return CheckError(SDL_GetDefaultCursor());
---
>   return {CheckError(SDL_GetDefaultCursor())};
