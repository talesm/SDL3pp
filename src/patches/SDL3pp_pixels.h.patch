12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
92d91
< 
113d111
< 
180a179,183
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
212a216,222
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
225a236,242
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
250a268,274
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
271a296,302
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
298a330,331
> /// @}
> 
304c337
<  * ```c
---
>  * ```cpp
323a357,361
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
358a397,401
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
362d404
< 
377c419
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
382c424
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
404c446,447
<     : T(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
436c479
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
438c481
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
444c487
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
446c489
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
451c494
<    * A macro to retrieve the type of an PixelFormat.
---
>    * Retrieve the type.
453c496
<    * This is usually a value from the PixelType enumeration.
---
>    * @returns the type as PixelType.
455,458c498
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
<    *
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
460c500
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
462c502,505
<   constexpr PixelType GetType() const { return SDL_PIXELTYPE(m_format); }
---
>   constexpr PixelType GetType() const
>   {
>     return PixelType(SDL_PIXELTYPE(m_format));
>   }
465c508
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
470,471c513
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
473c515
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
475c517
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
480c522
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
485,486c527
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
488c529
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
490c531
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
492c533,536
<   constexpr PackedLayout GetLayout() const { return SDL_PIXELLAYOUT(m_format); }
---
>   constexpr PackedLayout GetLayout() const
>   {
>     return PackedLayout(SDL_PIXELLAYOUT(m_format));
>   }
495,498c539
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
503,504c544
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
506c546
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
508c548
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
510c550
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
515c555
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
523,524c563
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
526c565
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
528c567
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
530c569
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
535,538c574
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
540d575
<    * @param format an PixelFormat to check.
543c578
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
545c580
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
553c588
<    * A macro to determine if an PixelFormat is a packed format.
---
>    * Determine if this is a packed format.
555,558d589
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
561c592
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
563c594
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
568c599
<    * A macro to determine if an PixelFormat is an array format.
---
>    * Determine if this is an array format.
570,573d600
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
576c603
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
578c605
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
583,586c610
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
588d611
<    * @param format an PixelFormat to check.
591c614
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
593c616
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
598,601c621
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
603d622
<    * @param format an PixelFormat to check.
606c625
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
608c627
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
613c632
<    * A macro to determine if an PixelFormat has an alpha channel.
---
>    * Determine if this has an alpha channel.
615,618d633
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
621c636
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
623c638
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
628c643
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
632,635d646
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
638c649
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
640c651
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
729a741,772
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
731a775,798
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
936a1004,1005
> /// @}
> 
966c1035,1036
<   return SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes);
---
>   return PixelFormatRaw(
>     SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes));
970c1040
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
972c1042
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
978c1048
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
980c1050
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1001c1071
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1037c1107
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1214a1285,1289
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1228a1304,1310
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1241,1242c1323
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1247c1328
<  * Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
>  * Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1250a1332,1338
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1305a1394,1400
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1381a1477,1483
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1440a1543,1549
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1453c1562
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1460c1569
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1471a1581,1587
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1480a1597,1599
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1489,1490c1608
< 
<   ColorspaceRaw m_cspace;
---
>   SDL_Colorspace m_cspace;
1498c1616
<   constexpr Colorspace(ColorspaceRaw cspace = {})
---
>   constexpr Colorspace(SDL_Colorspace cspace = {})
1504c1622
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1508,1509c1626,1627
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1539c1657,1662
<     : T(SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
>                                                     range,
>                                                     primaries,
>                                                     transfer,
>                                                     matrix,
>                                                     chroma)))
1551c1674
<   constexpr bool operator==(ColorspaceRaw cspace) const
---
>   constexpr bool operator==(SDL_Colorspace colorspace) const
1553c1676
<     return operator==(Colorspace(cspace));
---
>     return operator==(Colorspace(colorspace));
1555a1679
>   /// True if a valid colorspace
1571c1695
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1573d1696
<    * @param cspace an Colorspace to check.
1576c1699
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1578c1701
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1583c1706
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1585d1707
<    * @param cspace an Colorspace to check.
1588c1710
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1590c1712
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1598c1720
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1600d1721
<    * @param cspace an Colorspace to check.
1603c1724
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1605c1726
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1613c1734
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1615d1735
<    * @param cspace an Colorspace to check.
1618c1738
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1620c1740
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1628c1748
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1630d1749
<    * @param cspace an Colorspace to check.
1633c1752
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1635c1754
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1643c1762
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1645d1763
<    * @param cspace an Colorspace to check.
1648c1766
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1650c1768
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1658,1659c1776
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1661,1664d1777
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param cspace an Colorspace to check.
1667c1780
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1669c1782
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1677c1790
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1679d1791
<    * @param cspace an Colorspace to check.
1682c1794
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1684c1796
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1692,1693c1804
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1695d1805
<    * @param cspace an Colorspace to check.
1698c1808
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1700c1810
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1708c1818
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1710d1819
<    * @param cspace an Colorspace to check.
1713c1822
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1715c1824
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1723c1832
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1725d1833
<    * @param cspace an Colorspace to check.
1728c1836
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1730c1838
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1795a1904,1905
> /// @}
> 
1833,1834c1943
<   return SDL_DEFINE_COLORSPACE(
<     type, range, primaries, transfer, matrix, chroma);
---
>   return Colorspace(type, range, primaries, transfer, matrix, chroma);
2015a2125,2127
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2032,2035c2144,2147
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2037c2149
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2045c2157,2166
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2056c2177
<    * Get the r.
---
>    * Get the red component from the color.
2058c2179
<    * @returns current r value.
---
>    * @returns The red component from the color.
2063c2184
<    * Set the r.
---
>    * Set the red component from the color.
2065c2186
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2075c2196,2198
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2077d2199
<    * @returns current g value.
2082c2204
<    * Set the g.
---
>    * Set the green component from the color.
2084c2206
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2094c2216,2218
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2096d2219
<    * @returns current b value.
2101c2224
<    * Set the b.
---
>    * Set the blue component from the color.
2103c2226
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2113c2236,2238
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2115d2239
<    * @returns current a value.
2120c2244
<    * Set the a.
---
>    * Set the alpha component from the color.
2122c2246
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2129a2254,2311
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2136a2319,2322
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2141c2327
<    * Wraps FColor.
---
>    * Wraps SDL_FColor.
2158c2344
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2166c2352,2361
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
2177c2372
<    * Get the r.
---
>    * Get the red component from the color.
2179c2374
<    * @returns current r value.
---
>    * @returns The red component from the color.
2184c2379
<    * Set the r.
---
>    * Set the red component from the color.
2186c2381
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2196c2391,2393
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2198d2394
<    * @returns current g value.
2203c2399
<    * Set the g.
---
>    * Set the green component from the color.
2205c2401
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2215c2411,2413
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2217d2414
<    * @returns current b value.
2222c2419
<    * Set the b.
---
>    * Set the blue component from the color.
2224c2421
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2234c2431,2433
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2236d2434
<    * @returns current a value.
2241c2439
<    * Set the a.
---
>    * Set the alpha component from the color.
2243c2441
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2329c2527
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2333c2531
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2358d2555
<    * @param ncolors the number of entries to modify.
2364a2562,2563
>    *
>    * @sa Palette.Palette
2368c2567,2568
<     CheckError(SDL_SetPaletteColors(m_resource, colors, firstcolor));
---
>     CheckError(SDL_SetPaletteColors(
>       m_resource, colors.data(), firstcolor, colors.size()));
2505c2705,2706
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2691a2893,2919
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, r, g, b, a);
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
