12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
81d80
< 
102d100
< 
138a137,138
> #ifdef SDL3PP_DOC
> 
174a175,181
> #endif // SDL3PP_DOC
> 
> /**
>  * @name PixelTypes
>  * @{
>  */
> 
207a215,221
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
220a235,241
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
245a267,273
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
266a295,301
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
293a329,332
> /// @}
> 
> #ifdef SDL3PP_DOC
> 
314a354,360
> #endif // SDL3PP_DOC
> 
> /**
>  * @name PixelFormats
>  * @{
>  */
> 
350a397,401
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
354d404
< 
369c419
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
374c424
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
396c446,447
<     : T(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
428,430c479
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
432,433c481
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
435c483
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
437c485
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
439c487,490
<   constexpr PixelType GetType() const { return SDL_PIXELTYPE(m_format); }
---
>   constexpr PixelType GetType() const
>   {
>     return PixelType(SDL_PIXELTYPE(m_format));
>   }
442c493
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
447,448c498
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
450c500
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
452c502
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
457c507
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
462,463c512
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
465c514
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
467c516
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
469c518,521
<   constexpr PackedLayout GetLayout() const { return SDL_PIXELLAYOUT(m_format); }
---
>   constexpr PackedLayout GetLayout() const
>   {
>     return PackedLayout(SDL_PIXELLAYOUT(m_format));
>   }
472,475c524
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
480,481c529
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
483c531
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
485c533
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
487c535
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
492c540
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
500,501c548
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
503c550
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
505c552
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
507c554
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
512,515c559
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
517d560
<    * @param format an PixelFormat to check.
520c563
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
522c565
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
530,533c573
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
535d574
<    * @param format an PixelFormat to check.
538c577
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
540c579
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
545c584
<    * A macro to determine if an PixelFormat is an array format.
---
>    * Determine if this is an array format.
547,550d585
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
553c588
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
555c590
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
560c595
<    * A macro to determine if an PixelFormat is a 10-bit format.
---
>    * Determine if this is a 10-bit format.
562,565d596
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
568c599
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
570c601
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
575,578c606
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
580d607
<    * @param format an PixelFormat to check.
583c610
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
585c612
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
590,593c617
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
595d618
<    * @param format an PixelFormat to check.
598c621
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
600c623
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
605c628
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
609,612d631
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
615c634
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
617c636
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
706a726,757
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
708a760,783
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
930a1006,1007
> /// @}
> 
960c1037,1038
<   return SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes);
---
>   return PixelFormatRaw(
>     SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes));
992c1070
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1028c1106
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1205a1284,1288
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1219a1303,1309
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1232,1233c1322
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1238c1327
<  * Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
>  * Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1241a1331,1337
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1296a1393,1399
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1372a1476,1482
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1431a1542,1548
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1444c1561
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1451c1568
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1462a1580,1583
> /// @}
> 
> #ifdef SDL3PP_DOC
> 
1644a1766,1771
> #endif // SDL3PP_DOC
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1653a1781,1783
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1660c1790
< struct Colorspace
---
> class Colorspace
1661a1792,1861
>   SDL_Colorspace m_colorspace;
> 
> public:
>   /**
>    * Wraps Colorspace.
>    *
>    * @param colorspace the value to be wrapped
>    */
>   constexpr Colorspace(SDL_Colorspace colorspace = {})
>     : m_colorspace(colorspace)
>   {
>   }
> 
>   /**
>    * Define custom Colorspace formats.
>    *
>    * For example, defining COLORSPACE_SRGB looks like this:
>    *
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
>    *                       COLOR_RANGE_FULL,
>    *                       COLOR_PRIMARIES_BT709,
>    *                       TRANSFER_CHARACTERISTICS_SRGB,
>    *                       MATRIX_COEFFICIENTS_IDENTITY,
>    *                       CHROMA_LOCATION_NONE)
>    * ```
>    *
>    * @param type the type of the new format, probably an ColorType value.
>    * @param range the range of the new format, probably a ColorRange value.
>    * @param primaries the primaries of the new format, probably an
>    *                  ColorPrimaries value.
>    * @param transfer the transfer characteristics of the new format, probably an
>    *                 TransferCharacteristics value.
>    * @param matrix the matrix coefficients of the new format, probably an
>    *               MatrixCoefficients value.
>    * @param chroma the chroma sample location of the new format, probably an
>    *               ChromaLocation value.
>    * @post a format value in the style of Colorspace.
>    *
>    * @threadsafety It is safe to call this macro from any thread.
>    *
>    * @since This macro is available since SDL 3.2.0.
>    */
>   constexpr Colorspace(ColorType type,
>                        ColorRange range,
>                        ColorPrimaries primaries,
>                        TransferCharacteristics transfer,
>                        MatrixCoefficients matrix,
>                        ChromaLocation chroma)
>     : m_colorspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
>                                                         range,
>                                                         primaries,
>                                                         transfer,
>                                                         matrix,
>                                                         chroma)))
>   {
>   }
> 
>   /**
>    * Default comparison operator
>    */
>   constexpr bool operator==(const Colorspace& other) const = default;
> 
>   /**
>    * Compares with the underlying type
>    */
>   constexpr bool operator==(SDL_Colorspace colorspace) const
>   {
>     return operator==(Colorspace(colorspace));
>   }
1663c1863,1869
< #define Colorspace
---
>   /// True if a valid colorspace
>   /**
>    * Unwraps to the underlying Colorspace.
>    *
>    * @returns the underlying Colorspace.
>    */
>   constexpr operator SDL_Colorspace() const { return m_colorspace; }
1665c1871,1876
< #define GetType
---
>   /**
>    * Check if valid.
>    *
>    * @returns True if valid state, false otherwise.
>    */
>   constexpr explicit operator bool() const { return m_colorspace != 0; }
1667c1878,1904
< #define GetRange
---
>   /**
>    * Retrieve the type of a Colorspace.
>    *
>    * @returns the ColorType for `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ColorType GetType() const
>   {
>     return SDL_COLORSPACETYPE(m_colorspace);
>   }
> 
>   /**
>    * Retrieve the range of a Colorspace.
>    *
>    * @returns the ColorRange of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ColorRange GetRange() const
>   {
>     return SDL_COLORSPACERANGE(m_colorspace);
>   }
1669c1906,1918
< #define GetChroma
---
>   /**
>    * Retrieve the chroma sample location of an Colorspace.
>    *
>    * @returns the ChromaLocation of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ChromaLocation GetChroma() const
>   {
>     return SDL_COLORSPACECHROMA(m_colorspace);
>   }
1671c1920,1932
< #define GetPrimaries
---
>   /**
>    * Retrieve the primaries of an Colorspace.
>    *
>    * @returns the ColorPrimaries of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ColorPrimaries GetPrimaries() const
>   {
>     return SDL_COLORSPACEPRIMARIES(m_colorspace);
>   }
1673c1934,1946
< #define GetTransfer
---
>   /**
>    * Retrieve the transfer characteristics of an Colorspace.
>    *
>    * @returns the TransferCharacteristics of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr TransferCharacteristics GetTransfer() const
>   {
>     return SDL_COLORSPACETRANSFER(m_colorspace);
>   }
1675c1948,1960
< #define GetMatrix
---
>   /**
>    * Retrieve the matrix coefficients of an Colorspace.
>    *
>    * @returns the MatrixCoefficients of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr MatrixCoefficients GetMatrix() const
>   {
>     return SDL_COLORSPACEMATRIX(m_colorspace);
>   }
1677c1962,1974
< #define IsMatrixBT601
---
>   /**
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
>    *
>    * @returns true if BT601 or BT470BG, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsMatrixBT601() const
>   {
>     return SDL_ISCOLORSPACE_MATRIX_BT601(m_colorspace);
>   }
1679c1976,1988
< #define IsMatrixBT709
---
>   /**
>    * Determine if an Colorspace uses BT709 matrix coefficients.
>    *
>    * @returns true if BT709, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsMatrixBT709() const
>   {
>     return SDL_ISCOLORSPACE_MATRIX_BT709(m_colorspace);
>   }
1681c1990,2002
< #define IsMatrixBT2020_NCL
---
>   /**
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
>    *
>    * @returns true if BT2020_NCL, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsMatrixBT2020_NCL() const
>   {
>     return SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(m_colorspace);
>   }
1683c2004,2016
< #define IsLimitedRange
---
>   /**
>    * A function to determine if an Colorspace has a limited range.
>    *
>    * @returns true if limited range, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsLimitedRange() const
>   {
>     return SDL_ISCOLORSPACE_LIMITED_RANGE(m_colorspace);
>   }
1685c2018,2030
< #define IsFullRange
---
>   /**
>    * A function to determine if an Colorspace has a full range.
>    *
>    * @returns true if full range, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsFullRange() const
>   {
>     return SDL_ISCOLORSPACE_FULL_RANGE(m_colorspace);
>   }
1749a2095,2096
> /// @}
> 
1758a2106,2108
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
1775,1778c2125,2128
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
1780c2130
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
1788c2138,2147
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
1799c2158
<    * Get the r.
---
>    * Get the red component from the color.
1801c2160
<    * @returns current r value.
---
>    * @returns The red component from the color.
1806c2165
<    * Set the r.
---
>    * Set the red component from the color.
1808c2167
<    * @param newR the new r value.
---
>    * @param newR New red component value.
1818c2177,2179
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
1820d2180
<    * @returns current g value.
1825c2185
<    * Set the g.
---
>    * Set the green component from the color.
1827c2187
<    * @param newG the new g value.
---
>    * @param newG New green component value.
1837c2197,2199
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
1839d2200
<    * @returns current b value.
1844c2205
<    * Set the b.
---
>    * Set the blue component from the color.
1846c2207
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
1856c2217,2219
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
1858d2220
<    * @returns current a value.
1863c2225
<    * Set the a.
---
>    * Set the alpha component from the color.
1865c2227
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
1872a2235,2292
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
1879a2300,2303
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
1884c2308
<    * Wraps FColor.
---
>    * Wraps SDL_FColor.
1901c2325
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
1909c2333,2342
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
1920c2353
<    * Get the r.
---
>    * Get the red component from the color.
1922c2355
<    * @returns current r value.
---
>    * @returns The red component from the color.
1927c2360
<    * Set the r.
---
>    * Set the red component from the color.
1929c2362
<    * @param newR the new r value.
---
>    * @param newR New red component value.
1939c2372,2374
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
1941d2375
<    * @returns current g value.
1946c2380
<    * Set the g.
---
>    * Set the green component from the color.
1948c2382
<    * @param newG the new g value.
---
>    * @param newG New green component value.
1958c2392,2394
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
1960d2395
<    * @returns current b value.
1965c2400
<    * Set the b.
---
>    * Set the blue component from the color.
1967c2402
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
1977c2412,2414
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
1979d2415
<    * @returns current a value.
1984c2420
<    * Set the a.
---
>    * Set the alpha component from the color.
1986c2422
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2063c2499
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2067c2503
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2092d2527
<    * @param ncolors the number of entries to modify.
2098a2534,2535
>    *
>    * @sa Palette.Palette
2102c2539,2540
<     CheckError(SDL_SetPaletteColors(m_resource, colors, firstcolor));
---
>     CheckError(SDL_SetPaletteColors(
>       m_resource, colors.data(), firstcolor, colors.size()));
2239c2677,2678
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2425a2865,2891
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, r, g, b, a);
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
