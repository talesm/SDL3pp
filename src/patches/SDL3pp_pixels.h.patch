12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
212a213,219
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
242a250,256
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
255a270,276
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
280a302,308
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
301a330,336
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
328a364,370
> /// @}
> 
> /**
>  * @name PixelFormats
>  * @{
>  */
> 
364a407,411
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
382c429
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
386,387c433,434
<    * ```c
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * ```cpp
>    * PixelFormat format(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
409c456,457
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
447c495
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
449c497
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
461,463c509
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
465c511
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
474c520
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
479c525
<    * @returns the order of `format`.
---
>    * @returns the order.
488c534
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
493c539
<    * @returns the layout of `format`.
---
>    * @returns the layout
502,505c548
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
510c553
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
516c559
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
521c564
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
529c572
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
535c578
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
540,543c583
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
554,557c594
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
568,571c605
<    * A macro to determine if an PixelFormat is an array format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an array format.
582,585c616
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
596,599c627
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
610,613c638
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
624c649
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
628,630d652
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
680,681c702,703
<    * @returns a pointer to a PixelFormatDetails structure or nullptr on
<    *          failure; call GetError() for more information.
---
>    * @returns a PixelFormatDetails structure on success
>    * @throws Error on failure.
691a714,745
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param c the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
693a748,771
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
898a977,978
> /// @}
> 
900c980
<  * A macro for defining custom FourCC pixel formats.
---
>  * A function for defining custom FourCC pixel formats.
904c984
<  * ```c
---
>  * ```cpp
956c1036
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
958c1038
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
992c1072
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1038c1118
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1217a1298,1302
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1279a1365,1371
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1292,1293c1384
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1297c1388
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1299a1391,1397
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1352a1451,1457
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1424a1530,1536
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1483a1596,1602
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1496c1615
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1503c1622
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1514a1634,1640
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1523a1650,1652
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1546c1675
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1550,1551c1679,1680
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1581,1582c1710,1715
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(ColorspaceRaw(SDL_DEFINE_COLORSPACE(type,
>                                                    range,
>                                                    primaries,
>                                                    transfer,
>                                                    matrix,
>                                                    chroma)))
1594c1727
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1605c1738
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1616c1749
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1627c1760
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1638c1771
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1649c1782
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1660,1664c1793
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1675c1804
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1686,1687c1815
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1698c1826
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1709c1837
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1757a1886,1887
> /// @}
> 
2061a2192,2194
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2078,2081c2211,2214
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2083c2216
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2089c2222
<    * Get the r.
---
>    * Get the red component from the color.
2091c2224
<    * @returns current r value.
---
>    * @returns The red component from the color.
2096c2229
<    * Set the r.
---
>    * Set the red component from the color.
2098c2231
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2108c2241,2243
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2110d2244
<    * @returns current g value.
2115c2249
<    * Set the g.
---
>    * Set the green component from the color.
2117c2251
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2127c2261,2263
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2129d2264
<    * @returns current b value.
2134c2269
<    * Set the b.
---
>    * Set the blue component from the color.
2136c2271
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2146c2281,2283
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2148d2284
<    * @returns current a value.
2153c2289
<    * Set the a.
---
>    * Set the alpha component from the color.
2155c2291
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2164,2165c2300,2326
<   Uint32 Map(const PixelFormatDetails& format,
<              PaletteConstParam palette = {}) const;
---
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
2166a2328,2353
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
2169c2356
<                    PaletteConstParam palette = {});
---
>                    PaletteConstParam palette);
2176a2364,2367
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2198c2389
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2204c2395
<    * Get the r.
---
>    * Get the red component from the color.
2206c2397
<    * @returns current r value.
---
>    * @returns The red component from the color.
2211c2402
<    * Set the r.
---
>    * Set the red component from the color.
2213c2404
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2223c2414,2416
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2225d2417
<    * @returns current g value.
2230c2422
<    * Set the g.
---
>    * Set the green component from the color.
2232c2424
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2242c2434,2436
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2244d2437
<    * @returns current b value.
2249c2442
<    * Set the b.
---
>    * Set the blue component from the color.
2251c2444
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2261c2454,2456
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2263d2457
<    * @returns current a value.
2268c2462
<    * Set the a.
---
>    * Set the alpha component from the color.
2270c2464
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2408,2411c2602,2603
<   constexpr const ColorRaw* data() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /// Access specific pallete colors
>   constexpr const ColorRaw* data() const { return m_resource->colors; }
2413c2605,2606
<   constexpr int size() const { static_assert(false, "Not implemented"); }
---
>   /// Returns number of colors in the palette.
>   constexpr int size() const { return m_resource->ncolors; }
2414a2608
>   /// Access specific pallete index
2417c2611
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2425d2618
<    * @param ncolors the number of entries to modify.
2431a2625,2626
>    *
>    * @sa Palette.Palette
2540,2541c2735,2736
<  * @returns a pointer to a PixelFormatDetails structure or nullptr on
<  *          failure; call GetError() for more information.
---
>  * @returns a PixelFormatDetails structure on success
>  * @throws Error on failure.
2549c2744
<   return CheckError(SDL_GetPixelFormatDetails(format));
---
>   return *CheckError(SDL_GetPixelFormatDetails(format));
2587d2781
<  * @param ncolors the number of entries to modify.
2599c2793,2794
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2667a2863,2899
> /**
>  * Map an RGBA quadruple to a pixel value for a given pixel format.
>  *
>  * This function maps the RGBA color value to the specified pixel format and
>  * returns the pixel value best approximating the given RGBA color value for
>  * the given pixel format.
>  *
>  * If the specified pixel format has no alpha component the alpha value will
>  * be ignored (as it will be in formats with a palette).
>  *
>  * If the format has a palette (8-bit) the index of the closest matching color
>  * in the palette will be returned.
>  *
>  * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>  * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>  * format the return value can be assigned to a Uint16, and similarly a Uint8
>  * for an 8-bpp format).
>  *
>  * @param format a pointer to PixelFormatDetails describing the pixel
>  *               format.
>  * @param r the red component of the pixel in the range 0-255.
>  * @param g the green component of the pixel in the range 0-255.
>  * @param b the blue component of the pixel in the range 0-255.
>  * @param a the alpha component of the pixel in the range 0-255.
>  * @param palette an optional palette for indexed formats, may be nullptr.
>  * @returns a pixel value.
>  *
>  * @threadsafety It is safe to call this function from any thread, as long as
>  *               the palette is not modified.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa PixelFormat.GetDetails
>  * @sa GetRGBA
>  * @sa MapRGB
>  * @sa Surface.MapRGBA
>  */
2675c2907
<   static_assert(false, "Not implemented");
---
>   return SDL_MapRGBA(&format, palette, r, g, b, a);
2697a2930
>  * @param c the color components of the pixel in the range 0-255.
2699,2702d2931
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
2719c2948
<   return SDL_MapRGBA(&format, c, palette);
---
>   return SDL_MapRGBA(&format, palette, c.r, c.g, c.b, c.a);
2725c2954
<   static_assert(false, "Not implemented");
---
>   return MapColor(format, *this, palette);
2730c2959
<   static_assert(false, "Not implemented");
---
>   return MapColor(GetDetails(), c, palette);
2809a3039,3065
> /**
>  * Get RGBA values from a pixel in the specified format.
>  *
>  * This function uses the entire 8-bit [0..255] range when converting color
>  * components from pixel formats with less than 8-bits per RGB component
>  * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>  * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>  *
>  * If the surface has no alpha component, the alpha will be returned as 0xff
>  * (100% opaque).
>  *
>  * @param pixel a pixel value.
>  * @param format a pointer to PixelFormatDetails describing the pixel
>  *               format.
>  * @param palette an optional palette for indexed formats, may be nullptr.
>  * @returns a color value.
>  *
>  * @threadsafety It is safe to call this function from any thread, as long as
>  *               the palette is not modified.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa PixelFormat.GetDetails
>  * @sa GetRGB
>  * @sa MapRGB
>  * @sa MapRGBA
>  */
2814c3070,3072
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetRGBA(pixel, format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
2821c3079
<   static_assert(false, "Not implemented");
---
>   return GetColor(pixel, format, palette);
2826c3084
<   static_assert(false, "Not implemented");
---
>   return GetColor(pixel, GetDetails(), palette);
