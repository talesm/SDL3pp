12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
192a193,199
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
222a230,236
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
235a250,256
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
260a282,288
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
281a310,316
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
308a344,345
> /// @}
> 
314c351
<  * ```c
---
>  * ```cpp
333a371,375
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
368a411,415
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
386c433
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
390,391c437,438
<    * ```c
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * ```cpp
>    * PixelFormat format(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
413c460,461
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
441c489
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
443c491
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
449c497
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
451c499
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
456c504
<    * A macro to retrieve the type of an PixelFormat.
---
>    * Retrieve the type.
458,461c506
<    * This is usually a value from the PixelType enumeration.
<    *
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
463c508
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
465c510
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
470c515
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
475,476c520
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
478c522
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
480c524
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
485c529
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
490,491c534
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
493c536
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
495c538
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
500,503c543
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
508,509c548
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
511c550
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
513c552
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
515c554
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
520c559
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
528,529c567
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
531c569
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
533c571
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
535c573
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
540c578
<    * A macro to determine if an PixelFormat is an indexed format.
---
>    * Determine if this is an indexed format.
542,545d579
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
548c582
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
550c584
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
555,558c589
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
560d590
<    * @param format an PixelFormat to check.
563c593
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
565c595
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
570,573c600
<    * A macro to determine if an PixelFormat is an array format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an array format.
575d601
<    * @param format an PixelFormat to check.
578c604
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
580c606
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
585,588c611
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
590d612
<    * @param format an PixelFormat to check.
593c615
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
595c617
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
600c622
<    * A macro to determine if an PixelFormat is a floating point format.
---
>    * Determine if this is a floating point format.
602,605d623
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
608c626
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
610c628
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
615c633
<    * A macro to determine if an PixelFormat has an alpha channel.
---
>    * Determine if this has an alpha channel.
617,620d634
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
623c637
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
625c639
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
630c644
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
634,637d647
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
640c650
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
642c652
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
721a732,763
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
723a766,789
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
928a995,996
> /// @}
> 
962c1030
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
964c1032
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
970c1038
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
972c1040
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
998c1066
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1044c1112
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1223a1292,1296
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1285a1359,1365
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1298,1299c1378
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1303c1382
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1305a1385,1391
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1358a1445,1451
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1430a1524,1530
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1489a1590,1596
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1502c1609
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1509c1616
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1520a1628,1634
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1529a1644,1646
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1552c1669
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1556,1557c1673,1674
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1587,1588c1704,1709
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(ColorspaceRaw(SDL_DEFINE_COLORSPACE(type,
>                                                    range,
>                                                    primaries,
>                                                    transfer,
>                                                    matrix,
>                                                    chroma)))
1616c1737
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1618d1738
<    * @param cspace an Colorspace to check.
1621c1741
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1623c1743
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1628c1748
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1630d1749
<    * @param cspace an Colorspace to check.
1633c1752
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1635c1754
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1640c1759
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1642d1760
<    * @param cspace an Colorspace to check.
1645c1763
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1647c1765
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1652c1770
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1654d1771
<    * @param cspace an Colorspace to check.
1657c1774
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1659c1776
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1664c1781
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1666d1782
<    * @param cspace an Colorspace to check.
1669c1785
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1671c1787
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1676c1792
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1678d1793
<    * @param cspace an Colorspace to check.
1681c1796
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1683c1798
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1688,1692c1803
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1694d1804
<    * @param cspace an Colorspace to check.
1697c1807
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1699c1809
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1704c1814
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1706d1815
<    * @param cspace an Colorspace to check.
1709c1818
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1711c1820
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1716,1717c1825
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1719d1826
<    * @param cspace an Colorspace to check.
1722c1829
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1724c1831
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1729c1836
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1731d1837
<    * @param cspace an Colorspace to check.
1734c1840
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1736c1842
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1741c1847
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1743d1848
<    * @param cspace an Colorspace to check.
1746c1851
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1748c1853
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1790a1896,1897
> /// @}
> 
2064a2172,2174
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2081,2084c2191,2194
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2086c2196
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2092c2202,2211
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2101c2220
<    * Get the r.
---
>    * Get the red component from the color.
2103c2222
<    * @returns current r value.
---
>    * @returns The red component from the color.
2108c2227
<    * Set the r.
---
>    * Set the red component from the color.
2110c2229
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2120c2239,2241
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2122d2242
<    * @returns current g value.
2127c2247
<    * Set the g.
---
>    * Set the green component from the color.
2129c2249
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2139c2259,2261
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2141d2262
<    * @returns current b value.
2146c2267
<    * Set the b.
---
>    * Set the blue component from the color.
2148c2269
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2158c2279,2281
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2160d2282
<    * @returns current a value.
2165c2287
<    * Set the a.
---
>    * Set the alpha component from the color.
2167c2289
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2174a2297,2354
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2181a2362,2365
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2203c2387
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2209c2393,2402
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
2218c2411
<    * Get the r.
---
>    * Get the red component from the color.
2220c2413
<    * @returns current r value.
---
>    * @returns The red component from the color.
2225c2418
<    * Set the r.
---
>    * Set the red component from the color.
2227c2420
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2237c2430,2432
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2239d2433
<    * @returns current g value.
2244c2438
<    * Set the g.
---
>    * Set the green component from the color.
2246c2440
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2256c2450,2452
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2258d2453
<    * @returns current b value.
2263c2458
<    * Set the b.
---
>    * Set the blue component from the color.
2265c2460
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2275c2470,2472
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2277d2473
<    * @returns current a value.
2282c2478
<    * Set the a.
---
>    * Set the alpha component from the color.
2284c2480
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2413c2609
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2417c2613
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2425d2620
<    * @param ncolors the number of entries to modify.
2431a2627,2628
>    *
>    * @sa Palette.Palette
2582d2778
<  * @param ncolors the number of entries to modify.
2594c2790,2791
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2597,2598c2794
< inline void Palette::SetColors(SpanRef<const ColorRaw> colors,
<                                int firstcolor = 0)
---
> inline void Palette::SetColors(SpanRef<const ColorRaw> colors, int firstcolor)
2709c2905
<   return SDL_MapRGBA(format, palette, c);
---
>   return SDL_MapRGBA(format, palette, c.r, c.g, c.b, c.a);
2789a2986,3012
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, {r, g, b, a});
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
