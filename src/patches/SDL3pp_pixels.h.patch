12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
192a193,199
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
222a230,236
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
235a250,256
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
260a282,288
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
281a310,316
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
308a344,345
> /// @}
> 
314c351
<  * ```c
---
>  * ```cpp
333a371,375
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
368a411,415
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
386c433
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
390,391c437,438
<    * ```c
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * ```cpp
>    * PixelFormat format(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
413c460,461
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
434c482
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
436c484
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
442c490
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
444c492
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
449,451c497
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
453,454c499
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
456c501
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
458c503
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
463c508
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
468,469c513
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
471c515
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
473c517
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
478c522
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
483,484c527
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
486c529
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
488c531
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
493,496c536
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
501,502c541
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
504c543
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
506c545
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
508c547
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
513c552
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
521,522c560
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
524c562
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
526c564
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
528c566
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
533c571
<    * A macro to determine if an PixelFormat is an indexed format.
---
>    * Determine if this is an indexed format.
535,538d572
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
541c575
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
543c577
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
548,551c582
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
553d583
<    * @param format an PixelFormat to check.
556c586
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
558c588
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
563,566c593
<    * A macro to determine if an PixelFormat is an array format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an array format.
568d594
<    * @param format an PixelFormat to check.
571c597
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
573c599
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
578c604
<    * A macro to determine if an PixelFormat is a 10-bit format.
---
>    * Determine if this is a 10-bit format.
580,583d605
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
586c608
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
588c610
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
593c615
<    * A macro to determine if an PixelFormat is a floating point format.
---
>    * Determine if this is a floating point format.
595,598d616
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
601c619
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
603c621
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
608c626
<    * A macro to determine if an PixelFormat has an alpha channel.
---
>    * Determine if this has an alpha channel.
610,613d627
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
616c630
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
618c632
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
623c637
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
627,630d640
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
633c643
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
635c645
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
714a725,756
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
716a759,782
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
921a988,989
> /// @}
> 
955c1023
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
957c1025
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
963c1031
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
965c1033
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
991c1059
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1037c1105
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1216a1285,1289
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1278a1352,1358
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1291,1292c1371
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1296c1375
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1298a1378,1384
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1351a1438,1444
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1423a1517,1523
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1482a1583,1589
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1495c1602
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1502c1609
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1513a1621,1627
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1522a1637,1639
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1545c1662
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1549,1550c1666,1667
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1580,1581c1697,1702
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(ColorspaceRaw(SDL_DEFINE_COLORSPACE(type,
>                                                    range,
>                                                    primaries,
>                                                    transfer,
>                                                    matrix,
>                                                    chroma)))
1602c1723
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1604d1724
<    * @param cspace an Colorspace to check.
1607c1727
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1609c1729
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1614c1734
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1616d1735
<    * @param cspace an Colorspace to check.
1619c1738
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1621c1740
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1626c1745
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1628d1746
<    * @param cspace an Colorspace to check.
1631c1749
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1633c1751
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1638c1756
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1640d1757
<    * @param cspace an Colorspace to check.
1643c1760
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1645c1762
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1650c1767
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1652d1768
<    * @param cspace an Colorspace to check.
1655c1771
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1657c1773
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1662c1778
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1664d1779
<    * @param cspace an Colorspace to check.
1667c1782
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1669c1784
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1674,1678c1789
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1680d1790
<    * @param cspace an Colorspace to check.
1683c1793
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1685c1795
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1690c1800
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1692d1801
<    * @param cspace an Colorspace to check.
1695c1804
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1697c1806
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1702,1703c1811
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1705d1812
<    * @param cspace an Colorspace to check.
1708c1815
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1710c1817
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1715c1822
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1717d1823
<    * @param cspace an Colorspace to check.
1720c1826
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1722c1828
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1727c1833
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1729d1834
<    * @param cspace an Colorspace to check.
1732c1837
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1734c1839
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1776a1882,1883
> /// @}
> 
2050a2158,2160
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2067,2070c2177,2180
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2072c2182
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2078c2188,2191
<   constexpr bool operator==(ColorRaw color) const { return m_color == color; }
---
>   constexpr bool operator==(ColorRaw other) const
>   {
>     return r == other.r && g == other.g && b == other.b && a == other.a;
>   }
2081c2194,2203
<   constexpr auto operator<=>(ColorRaw color) const { return m_color <=> color; }
---
>   constexpr auto operator<=>(ColorRaw other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2084c2206
<    * Get the r.
---
>    * Get the red component from the color.
2086c2208
<    * @returns current r value.
---
>    * @returns The red component from the color.
2091c2213
<    * Set the r.
---
>    * Set the red component from the color.
2093c2215
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2103c2225,2227
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2105d2228
<    * @returns current g value.
2110c2233
<    * Set the g.
---
>    * Set the green component from the color.
2112c2235
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2122c2245,2247
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2124d2248
<    * @returns current b value.
2129c2253
<    * Set the b.
---
>    * Set the blue component from the color.
2131c2255
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2141c2265,2267
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2143d2268
<    * @returns current a value.
2148c2273
<    * Set the a.
---
>    * Set the alpha component from the color.
2150c2275
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2157a2283,2340
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2164a2348,2351
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2186c2373
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2191,2192c2378
<   /// Default comparison operator
<   constexpr bool operator==(const FColorRaw& color) const
---
>   constexpr bool operator==(FColorRaw other) const
2194c2380
<     return m_color == color;
---
>     return r == other.r && g == other.g && b == other.b && a == other.a;
2198c2384
<   constexpr auto operator<=>(const FColorRaw& color) const
---
>   constexpr auto operator<=>(FColorRaw other) const
2200c2386,2392
<     return m_color <=> color;
---
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equivalent) return c;
>     return a <=> other.a;
2204c2396
<    * Get the r.
---
>    * Get the red component from the color.
2206c2398
<    * @returns current r value.
---
>    * @returns The red component from the color.
2211c2403
<    * Set the r.
---
>    * Set the red component from the color.
2213c2405
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2223c2415,2417
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2225d2418
<    * @returns current g value.
2230c2423
<    * Set the g.
---
>    * Set the green component from the color.
2232c2425
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2242c2435,2437
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2244d2438
<    * @returns current b value.
2249c2443
<    * Set the b.
---
>    * Set the blue component from the color.
2251c2445
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2261c2455,2457
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2263d2458
<    * @returns current a value.
2268c2463
<    * Set the a.
---
>    * Set the alpha component from the color.
2270c2465
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2399c2594
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2403c2598
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2411d2605
<    * @param ncolors the number of entries to modify.
2417a2612,2613
>    *
>    * @sa Palette.Palette
2568d2763
<  * @param ncolors the number of entries to modify.
2580c2775,2776
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2583,2584c2779
< inline void Palette::SetColors(SpanRef<const ColorRaw> colors,
<                                int firstcolor = 0)
---
> inline void Palette::SetColors(SpanRef<const ColorRaw> colors, int firstcolor)
2695c2890
<   return SDL_MapRGBA(format, palette, c);
---
>   return SDL_MapRGBA(format, palette, c.r, c.g, c.b, c.a);
2775a2971,2997
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, {r, g, b, a});
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
