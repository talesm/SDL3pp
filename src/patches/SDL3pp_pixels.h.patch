12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
173a174,180
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
203a211,217
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
216a231,237
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
241a263,269
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
262a291,297
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
289a325,326
> /// @}
> 
295c332
<  * ```c
---
>  * ```cpp
314a352,356
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
349a392,396
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
367c414
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
372c419
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
394c441,442
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
422c470
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
424c472
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
430c478
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
432c480
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
437,439c485
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
441,442c487
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
444c489
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
446c491
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
448c493,496
<   constexpr PixelType GetType() const { return SDL_PIXELTYPE(m_format); }
---
>   constexpr PixelType GetType() const
>   {
>     return PixelType(SDL_PIXELTYPE(m_format));
>   }
451c499
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
456,457c504
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
459c506
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
461c508
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
466c513
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
471,472c518
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
474c520
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
476c522
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
478c524,527
<   constexpr PackedLayout GetLayout() const { return SDL_PIXELLAYOUT(m_format); }
---
>   constexpr PackedLayout GetLayout() const
>   {
>     return PackedLayout(SDL_PIXELLAYOUT(m_format));
>   }
481,484c530
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
489,490c535
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
492c537
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
494c539
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
496c541
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
501c546
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
509,510c554
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
512c556
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
514c558
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
516c560
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
521,524c565
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
526d566
<    * @param format an PixelFormat to check.
529c569
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
531c571
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
539c579
<    * A macro to determine if an PixelFormat is a packed format.
---
>    * Determine if this is a packed format.
541,544d580
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
547c583
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
549c585
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
554c590
<    * A macro to determine if an PixelFormat is an array format.
---
>    * Determine if this is an array format.
556,559d591
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
562c594
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
564c596
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
569,572c601
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
574d602
<    * @param format an PixelFormat to check.
577c605
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
579c607
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
584,587c612
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
589d613
<    * @param format an PixelFormat to check.
592c616
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
594c618
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
599c623
<    * A macro to determine if an PixelFormat has an alpha channel.
---
>    * Determine if this has an alpha channel.
601,604d624
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
607c627
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
609c629
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
614c634
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
618,621d637
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
624c640
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
626c642
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
715a732,763
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
717a766,789
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
922a995,996
> /// @}
> 
952c1026,1027
<   return SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes);
---
>   return PixelFormatRaw(
>     SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes));
956c1031
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
958c1033
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
964c1039
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
966c1041
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
987c1062
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1023c1098
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1200a1276,1280
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1214a1295,1301
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1227,1228c1314
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1232c1318
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1234a1321,1327
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1287a1381,1387
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1359a1460,1466
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1418a1526,1532
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1431c1545
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1438c1552
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1449a1564,1570
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1458a1580,1582
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1481c1605
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1485,1486c1609,1610
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1516,1517c1640,1645
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
>                                                     range,
>                                                     primaries,
>                                                     transfer,
>                                                     matrix,
>                                                     chroma)))
1545c1673
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1547d1674
<    * @param cspace an Colorspace to check.
1550c1677
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1552c1679
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1557c1684
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1559d1685
<    * @param cspace an Colorspace to check.
1562c1688
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1564c1690
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1572c1698
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1574d1699
<    * @param cspace an Colorspace to check.
1577c1702
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1579c1704
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1587c1712
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1589d1713
<    * @param cspace an Colorspace to check.
1592c1716
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1594c1718
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1602c1726
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1604d1727
<    * @param cspace an Colorspace to check.
1607c1730
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1609c1732
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1617c1740
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1619d1741
<    * @param cspace an Colorspace to check.
1622c1744
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1624c1746
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1632,1633c1754
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1635,1638d1755
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param cspace an Colorspace to check.
1641c1758
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1643c1760
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1651c1768
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1653d1769
<    * @param cspace an Colorspace to check.
1656c1772
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1658c1774
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1666,1667c1782
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1669d1783
<    * @param cspace an Colorspace to check.
1672c1786
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1674c1788
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1682c1796
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1684d1797
<    * @param cspace an Colorspace to check.
1687c1800
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1689c1802
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1697c1810
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1699d1811
<    * @param cspace an Colorspace to check.
1702c1814
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1704c1816
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1749a1862,1863
> /// @}
> 
1787,1788c1901
<   return SDL_DEFINE_COLORSPACE(
<     type, range, primaries, transfer, matrix, chroma);
---
>   return Colorspace(type, range, primaries, transfer, matrix, chroma);
1969a2083,2085
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
1986,1989c2102,2105
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
1991c2107
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
1997c2113,2122
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2006c2131
<    * Get the r.
---
>    * Get the red component from the color.
2008c2133
<    * @returns current r value.
---
>    * @returns The red component from the color.
2013c2138
<    * Set the r.
---
>    * Set the red component from the color.
2015c2140
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2025c2150,2152
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2027d2153
<    * @returns current g value.
2032c2158
<    * Set the g.
---
>    * Set the green component from the color.
2034c2160
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2044c2170,2172
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2046d2173
<    * @returns current b value.
2051c2178
<    * Set the b.
---
>    * Set the blue component from the color.
2053c2180
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2063c2190,2192
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2065d2193
<    * @returns current a value.
2070c2198
<    * Set the a.
---
>    * Set the alpha component from the color.
2072c2200
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2079a2208,2265
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2086a2273,2276
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2108c2298
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2114c2304,2313
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
2123c2322
<    * Get the r.
---
>    * Get the red component from the color.
2125c2324
<    * @returns current r value.
---
>    * @returns The red component from the color.
2130c2329
<    * Set the r.
---
>    * Set the red component from the color.
2132c2331
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2142c2341,2343
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2144d2344
<    * @returns current g value.
2149c2349
<    * Set the g.
---
>    * Set the green component from the color.
2151c2351
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2161c2361,2363
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2163d2364
<    * @returns current b value.
2168c2369
<    * Set the b.
---
>    * Set the blue component from the color.
2170c2371
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2180c2381,2383
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2182d2384
<    * @returns current a value.
2187c2389
<    * Set the a.
---
>    * Set the alpha component from the color.
2189c2391
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2292c2494
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2296c2498
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2321d2522
<    * @param ncolors the number of entries to modify.
2327a2529,2530
>    *
>    * @sa Palette.Palette
2331c2534,2535
<     CheckError(SDL_SetPaletteColors(m_resource, colors, firstcolor));
---
>     CheckError(SDL_SetPaletteColors(
>       m_resource, colors.data(), firstcolor, colors.size()));
2468c2672,2673
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2571c2776
<   return SDL_MapRGBA(format, palette, c);
---
>   return SDL_MapRGBA(format, palette, c.r, c.g, c.b, c.a);
2651a2857,2883
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, {r, g, b, a});
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
