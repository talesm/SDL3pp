12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
197a198,204
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
227a235,241
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
240a255,261
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
265a287,293
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
286a315,321
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
313a349,355
> /// @}
> 
> /**
>  * @name PixelFormats
>  * @{
>  */
> 
349a392,396
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
367c414
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
371,372c418,419
<    * ```c
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * ```cpp
>    * PixelFormat format(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
394c441,442
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
406c454
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
408c456
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
411d458
<    * @param format an PixelFormat to check.
414c461
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
416c463
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
421,423c468
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
425,426c470
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
428c472
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
430c474
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
435c479
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
440,441c484
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
443c486
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
445c488
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
450c493
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
455,456c498
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
458c500
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
460c502
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
465,468c507
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
473,474c512
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
476c514
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
478c516
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
480c518
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
485c523
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
493,494c531
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
496c533
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
498c535
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
500c537
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
505,508c542
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
510d543
<    * @param format an PixelFormat to check.
513c546
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
515c548
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
520,523c553
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
525d554
<    * @param format an PixelFormat to check.
528c557
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
530c559
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
535c564
<    * A macro to determine if an PixelFormat is an array format.
---
>    * Determine if this is an array format.
537,540d565
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
543c568
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
545c570
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
550c575
<    * A macro to determine if an PixelFormat is a 10-bit format.
---
>    * Determine if this is a 10-bit format.
552,555d576
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
558c579
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
560c581
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
565c586
<    * A macro to determine if an PixelFormat is a floating point format.
---
>    * Determine if this is a floating point format.
567,570d587
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
573c590
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
575c592
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
580,583c597
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
585d598
<    * @param format an PixelFormat to check.
588c601
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
590c603
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
595c608
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
599,602d611
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
605c614
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
607c616
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
678c687
<    * @returns a pointer to a PixelFormatDetails structure or nullptr on
---
>    * @returns a PixelFormatDetails structure or nullptr on
686a696,727
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
688a730,753
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
893a959,960
> /// @}
> 
895c962
<  * A macro for defining custom FourCC pixel formats.
---
>  * A function for defining custom FourCC pixel formats.
899c966
<  * ```c
---
>  * ```cpp
909c976
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
911c978
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
951c1018
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
953c1020
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
959c1026
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
961c1028
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
987c1054
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1033c1100
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1212a1280,1284
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1274a1347,1353
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1287,1288c1366
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1292c1370
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1294a1373,1379
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1347a1433,1439
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1419a1512,1518
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1478a1578,1584
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1491c1597
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1498c1604
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1509a1616,1622
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1518a1632,1634
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1541c1657
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1545,1546c1661,1662
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1576,1577c1692,1697
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(ColorspaceRaw(SDL_DEFINE_COLORSPACE(type,
>                                                    range,
>                                                    primaries,
>                                                    transfer,
>                                                    matrix,
>                                                    chroma)))
1589c1709
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1591d1710
<    * @param cspace an Colorspace to check.
1594c1713
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1596c1715
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1601c1720
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1603d1721
<    * @param cspace an Colorspace to check.
1606c1724
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1608c1726
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1613c1731
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1615d1732
<    * @param cspace an Colorspace to check.
1618c1735
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1620c1737
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1625c1742
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1627d1743
<    * @param cspace an Colorspace to check.
1630c1746
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1632c1748
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1637c1753
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1639d1754
<    * @param cspace an Colorspace to check.
1642c1757
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1644c1759
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1649c1764
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1651d1765
<    * @param cspace an Colorspace to check.
1654c1768
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1656c1770
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1661,1662c1775
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1664,1667d1776
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param cspace an Colorspace to check.
1670c1779
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1672c1781
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1677c1786
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1679d1787
<    * @param cspace an Colorspace to check.
1682c1790
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1684c1792
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1689,1690c1797
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1692d1798
<    * @param cspace an Colorspace to check.
1695c1801
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1697c1803
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1702c1808
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1704d1809
<    * @param cspace an Colorspace to check.
1707c1812
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1709c1814
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1714c1819
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1716d1820
<    * @param cspace an Colorspace to check.
1719c1823
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1721c1825
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1763a1868,1869
> /// @}
> 
2067a2174,2176
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2084,2087c2193,2196
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2089c2198
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2095c2204
<    * Get the r.
---
>    * Get the red component from the color.
2097c2206
<    * @returns current r value.
---
>    * @returns The red component from the color.
2102c2211
<    * Set the r.
---
>    * Set the red component from the color.
2104c2213
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2114c2223,2225
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2116d2226
<    * @returns current g value.
2121c2231
<    * Set the g.
---
>    * Set the green component from the color.
2123c2233
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2133c2243,2245
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2135d2246
<    * @returns current b value.
2140c2251
<    * Set the b.
---
>    * Set the blue component from the color.
2142c2253
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2152c2263,2265
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2154d2266
<    * @returns current a value.
2159c2271
<    * Set the a.
---
>    * Set the alpha component from the color.
2161c2273
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2168a2281,2338
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2175a2346,2349
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2197c2371
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2203c2377
<    * Get the r.
---
>    * Get the red component from the color.
2205c2379
<    * @returns current r value.
---
>    * @returns The red component from the color.
2210c2384
<    * Set the r.
---
>    * Set the red component from the color.
2212c2386
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2222c2396,2398
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2224d2399
<    * @returns current g value.
2229c2404
<    * Set the g.
---
>    * Set the green component from the color.
2231c2406
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2241c2416,2418
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2243d2419
<    * @returns current b value.
2248c2424
<    * Set the b.
---
>    * Set the blue component from the color.
2250c2426
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2260c2436,2438
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2262d2439
<    * @returns current a value.
2267c2444
<    * Set the a.
---
>    * Set the alpha component from the color.
2269c2446
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2401c2578,2579
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   /// Returns number of colors in the palette.
>   constexpr int GetSize() const { return m_resource->ncolors; }
2402a2581
>   /// Access specific pallete index
2405c2584
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2413d2591
<    * @param ncolors the number of entries to modify.
2419a2598,2599
>    *
>    * @sa Palette.Palette
2528c2708
<  * @returns a pointer to a PixelFormatDetails structure or nullptr on
---
>  * @returns a PixelFormatDetails structure or nullptr on
2537c2717
<   return SDL_GetPixelFormatDetails(format);
---
>   return *SDL_GetPixelFormatDetails(format);
2570d2749
<  * @param ncolors the number of entries to modify.
2582c2761,2762
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2672,2675c2852
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
---
>  * @param c the color components of the pixel in the range 0-255.
2692c2869
<   return SDL_MapRGBA(&format, palette, c);
---
>   return SDL_MapRGBA(&format, palette, c.r, c.g, c.b, c.a);
2772a2950,2976
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(format, palette, {r, g, b, a});
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, GetDetails(), palette);
> }
