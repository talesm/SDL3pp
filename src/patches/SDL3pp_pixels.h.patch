12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
197a198,204
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
227a235,241
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
240a255,261
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
265a287,293
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
286a315,321
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
313a349,350
> /// @}
> 
319c356
<  * ```c
---
>  * ```cpp
338a376,380
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
373a416,420
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
391c438
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
395,396c442,443
<    * ```c
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * ```cpp
>    * PixelFormat format(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
418c465,466
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
439c487
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
441c489
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
444d491
<    * @param format an PixelFormat to check.
447c494
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
449c496
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
454,456c501
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
458,459c503
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
461c505
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
463c507
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
468c512
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
473,474c517
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
476c519
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
478c521
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
483c526
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
488,489c531
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
491c533
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
493c535
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
498,501c540
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
506,507c545
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
509c547
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
511c549
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
513c551
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
518c556
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
526,527c564
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
529c566
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
531c568
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
533c570
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
538,541c575
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
543d576
<    * @param format an PixelFormat to check.
546c579
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
548c581
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
553c586
<    * A macro to determine if an PixelFormat is a packed format.
---
>    * Determine if this is a packed format.
555,558d587
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
561c590
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
563c592
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
568,571c597
<    * A macro to determine if an PixelFormat is an array format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an array format.
573d598
<    * @param format an PixelFormat to check.
576c601
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
578c603
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
583c608
<    * A macro to determine if an PixelFormat is a 10-bit format.
---
>    * Determine if this is a 10-bit format.
585,588d609
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
591c612
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
593c614
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
598c619
<    * A macro to determine if an PixelFormat is a floating point format.
---
>    * Determine if this is a floating point format.
600,603d620
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
606c623
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
608c625
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
613,616c630
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
618d631
<    * @param format an PixelFormat to check.
621c634
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
623c636
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
628c641
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
632,635d644
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
638c647
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
640c649
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
719a729,760
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
721a763,786
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
926a992,993
> /// @}
> 
960c1027
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
962c1029
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
968c1035
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
970c1037
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
996c1063
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1042c1109
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1221a1289,1293
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1283a1356,1362
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1296,1297c1375
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1301c1379
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1303a1382,1388
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1356a1442,1448
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1428a1521,1527
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1487a1587,1593
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1500c1606
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1507c1613
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1518a1625,1631
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1527a1641,1643
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1550c1666
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1554,1555c1670,1671
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1585,1586c1701,1706
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(ColorspaceRaw(SDL_DEFINE_COLORSPACE(type,
>                                                    range,
>                                                    primaries,
>                                                    transfer,
>                                                    matrix,
>                                                    chroma)))
1607c1727
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1609d1728
<    * @param cspace an Colorspace to check.
1612c1731
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1614c1733
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1619c1738
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1621d1739
<    * @param cspace an Colorspace to check.
1624c1742
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1626c1744
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1631c1749
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1633d1750
<    * @param cspace an Colorspace to check.
1636c1753
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1638c1755
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1643c1760
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1645d1761
<    * @param cspace an Colorspace to check.
1648c1764
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1650c1766
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1655c1771
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1657d1772
<    * @param cspace an Colorspace to check.
1660c1775
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1662c1777
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1667c1782
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1669d1783
<    * @param cspace an Colorspace to check.
1672c1786
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1674c1788
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1679,1683c1793
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1685d1794
<    * @param cspace an Colorspace to check.
1688c1797
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1690c1799
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1695c1804
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1697d1805
<    * @param cspace an Colorspace to check.
1700c1808
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1702c1810
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1707,1708c1815
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1710d1816
<    * @param cspace an Colorspace to check.
1713c1819
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1715c1821
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1720c1826
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1722d1827
<    * @param cspace an Colorspace to check.
1725c1830
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1727c1832
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1732c1837
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1734d1838
<    * @param cspace an Colorspace to check.
1737c1841
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1739c1843
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1781a1886,1887
> /// @}
> 
2055a2162,2164
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2072,2075c2181,2184
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2077c2186
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2083c2192,2195
<   constexpr bool operator==(ColorRaw color) const { return m_color == color; }
---
>   constexpr bool operator==(ColorRaw other) const
>   {
>     return r == other.r && g == other.g && b == other.b && a == other.a;
>   }
2086c2198,2207
<   constexpr auto operator<=>(ColorRaw color) const { return m_color <=> color; }
---
>   constexpr auto operator<=>(ColorRaw other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2089c2210
<    * Get the r.
---
>    * Get the red component from the color.
2091c2212
<    * @returns current r value.
---
>    * @returns The red component from the color.
2096c2217
<    * Set the r.
---
>    * Set the red component from the color.
2098c2219
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2108c2229,2231
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2110d2232
<    * @returns current g value.
2115c2237
<    * Set the g.
---
>    * Set the green component from the color.
2117c2239
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2127c2249,2251
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2129d2252
<    * @returns current b value.
2134c2257
<    * Set the b.
---
>    * Set the blue component from the color.
2136c2259
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2146c2269,2271
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2148d2272
<    * @returns current a value.
2153c2277
<    * Set the a.
---
>    * Set the alpha component from the color.
2155c2279
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2162a2287,2344
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2169a2352,2355
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2191c2377
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2197c2383
<   constexpr bool operator==(const FColorRaw& color) const
---
>   constexpr bool operator==(FColorRaw other) const
2199c2385
<     return m_color == color;
---
>     return r == other.r && g == other.g && b == other.b && a == other.a;
2203c2389
<   constexpr auto operator<=>(const FColorRaw& color) const
---
>   constexpr auto operator<=>(FColorRaw other) const
2205c2391,2397
<     return m_color <=> color;
---
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equivalent) return c;
>     return a <=> other.a;
2209c2401
<    * Get the r.
---
>    * Get the red component from the color.
2211c2403
<    * @returns current r value.
---
>    * @returns The red component from the color.
2216c2408
<    * Set the r.
---
>    * Set the red component from the color.
2218c2410
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2228c2420,2422
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2230d2423
<    * @returns current g value.
2235c2428
<    * Set the g.
---
>    * Set the green component from the color.
2237c2430
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2247c2440,2442
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2249d2443
<    * @returns current b value.
2254c2448
<    * Set the b.
---
>    * Set the blue component from the color.
2256c2450
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2266c2460,2462
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2268d2463
<    * @returns current a value.
2273c2468
<    * Set the a.
---
>    * Set the alpha component from the color.
2275c2470
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2407c2602,2603
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   /// Returns number of colors in the palette.
>   constexpr int GetSize() const { return m_resource->ncolors; }
2408a2605
>   /// Access specific pallete index
2411c2608
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2419d2615
<    * @param ncolors the number of entries to modify.
2425a2622,2623
>    *
>    * @sa Palette.Palette
2576d2773
<  * @param ncolors the number of entries to modify.
2588c2785,2786
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2591,2592c2789
< inline void Palette::SetColors(SpanRef<const ColorRaw> colors,
<                                int firstcolor = 0)
---
> inline void Palette::SetColors(SpanRef<const ColorRaw> colors, int firstcolor)
2683,2686c2880
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
---
>  * @param c the color components of the pixel in the range 0-255.
2703c2897
<   return SDL_MapRGBA(format, palette, c);
---
>   return SDL_MapRGBA(format, palette, c.r, c.g, c.b, c.a);
2783a2978,3004
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, {r, g, b, a});
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
