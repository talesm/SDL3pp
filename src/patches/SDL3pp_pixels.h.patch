12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
81d80
< 
102d100
< 
175a174,178
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
207a211,217
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
220a231,237
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
245a263,269
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
266a291,297
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
293a325,326
> /// @}
> 
299c332
<  * ```c
---
>  * ```cpp
318a352,356
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
353a392,396
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
357d399
< 
372c414
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
377c419
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
399c441,442
<     : T(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
431c474
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
433c476
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
439c482
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
441c484
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
446,448c489
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
450,451c491
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
453c493
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
455c495
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
457c497,500
<   constexpr PixelType GetType() const { return SDL_PIXELTYPE(m_format); }
---
>   constexpr PixelType GetType() const
>   {
>     return PixelType(SDL_PIXELTYPE(m_format));
>   }
460c503
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
465,466c508
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
468c510
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
470c512
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
475c517
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
480,481c522
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
483c524
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
485c526
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
487c528,531
<   constexpr PackedLayout GetLayout() const { return SDL_PIXELLAYOUT(m_format); }
---
>   constexpr PackedLayout GetLayout() const
>   {
>     return PackedLayout(SDL_PIXELLAYOUT(m_format));
>   }
490,493c534
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
498,499c539
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
501c541
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
503c543
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
505c545
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
510c550
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
518,519c558
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
521c560
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
523c562
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
525c564
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
530,533c569
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
535d570
<    * @param format an PixelFormat to check.
538c573
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
540c575
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
548c583
<    * A macro to determine if an PixelFormat is a packed format.
---
>    * Determine if this is a packed format.
550,553d584
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
556c587
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
558c589
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
563,566c594
<    * A macro to determine if an PixelFormat is an array format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an array format.
568d595
<    * @param format an PixelFormat to check.
571c598
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
573c600
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
578,581c605
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
583d606
<    * @param format an PixelFormat to check.
586c609
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
588c611
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
593c616
<    * A macro to determine if an PixelFormat is a floating point format.
---
>    * Determine if this is a floating point format.
595,598d617
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
601c620
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
603c622
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
608,611c627
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
613d628
<    * @param format an PixelFormat to check.
616c631
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
618c633
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
623c638
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
627,630d641
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
633c644
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
635c646
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
724a736,767
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
726a770,793
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
948a1016,1017
> /// @}
> 
978c1047,1048
<   return SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes);
---
>   return PixelFormatRaw(
>     SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes));
982c1052
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
984c1054
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
990c1060
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
992c1062
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1013c1083
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1049c1119
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1226a1297,1301
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1240a1316,1322
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1253,1254c1335
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1259c1340
<  * Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
>  * Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1262a1344,1350
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1317a1406,1412
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1393a1489,1495
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1452a1555,1561
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1465c1574
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1472c1581
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1483a1593,1596
> /// @}
> 
> #ifdef SDL3PP_DOC
> 
1665a1779,1784
> #endif // SDL3PP_DOC
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1674a1794,1796
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1681c1803
< struct Colorspace
---
> class Colorspace
1682a1805,1861
>   SDL_Colorspace m_colorspace;
> 
> public:
>   /**
>    * Wraps Colorspace.
>    *
>    * @param colorspace the value to be wrapped
>    */
>   constexpr Colorspace(SDL_Colorspace colorspace = {})
>     : m_colorspace(colorspace)
>   {
>   }
> 
>   /**
>    * Define custom Colorspace formats.
>    *
>    * For example, defining COLORSPACE_SRGB looks like this:
>    *
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
>    *                       COLOR_RANGE_FULL,
>    *                       COLOR_PRIMARIES_BT709,
>    *                       TRANSFER_CHARACTERISTICS_SRGB,
>    *                       MATRIX_COEFFICIENTS_IDENTITY,
>    *                       CHROMA_LOCATION_NONE)
>    * ```
>    *
>    * @param type the type of the new format, probably an ColorType value.
>    * @param range the range of the new format, probably a ColorRange value.
>    * @param primaries the primaries of the new format, probably an
>    *                  ColorPrimaries value.
>    * @param transfer the transfer characteristics of the new format, probably an
>    *                 TransferCharacteristics value.
>    * @param matrix the matrix coefficients of the new format, probably an
>    *               MatrixCoefficients value.
>    * @param chroma the chroma sample location of the new format, probably an
>    *               ChromaLocation value.
>    * @post a format value in the style of Colorspace.
>    *
>    * @threadsafety It is safe to call this macro from any thread.
>    *
>    * @since This macro is available since SDL 3.2.0.
>    */
>   constexpr Colorspace(ColorType type,
>                        ColorRange range,
>                        ColorPrimaries primaries,
>                        TransferCharacteristics transfer,
>                        MatrixCoefficients matrix,
>                        ChromaLocation chroma)
>     : m_colorspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
>                                                         range,
>                                                         primaries,
>                                                         transfer,
>                                                         matrix,
>                                                         chroma)))
>   {
>   }
1684c1863,1889
< #define Colorspace
---
>   /**
>    * Default comparison operator
>    */
>   constexpr bool operator==(const Colorspace& other) const = default;
> 
>   /**
>    * Compares with the underlying type
>    */
>   constexpr bool operator==(SDL_Colorspace colorspace) const
>   {
>     return operator==(Colorspace(colorspace));
>   }
> 
>   /// True if a valid colorspace
>   /**
>    * Unwraps to the underlying Colorspace.
>    *
>    * @returns the underlying Colorspace.
>    */
>   constexpr operator SDL_Colorspace() const { return m_colorspace; }
> 
>   /**
>    * Check if valid.
>    *
>    * @returns True if valid state, false otherwise.
>    */
>   constexpr explicit operator bool() const { return m_colorspace != 0; }
1686c1891,1903
< #define GetType
---
>   /**
>    * Retrieve the type of a Colorspace.
>    *
>    * @returns the ColorType for `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ColorType GetType() const
>   {
>     return SDL_COLORSPACETYPE(m_colorspace);
>   }
1688c1905,1917
< #define GetRange
---
>   /**
>    * Retrieve the range of a Colorspace.
>    *
>    * @returns the ColorRange of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ColorRange GetRange() const
>   {
>     return SDL_COLORSPACERANGE(m_colorspace);
>   }
1690c1919,1931
< #define GetChroma
---
>   /**
>    * Retrieve the chroma sample location of an Colorspace.
>    *
>    * @returns the ChromaLocation of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ChromaLocation GetChroma() const
>   {
>     return SDL_COLORSPACECHROMA(m_colorspace);
>   }
1692c1933,1945
< #define GetPrimaries
---
>   /**
>    * Retrieve the primaries of an Colorspace.
>    *
>    * @returns the ColorPrimaries of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr ColorPrimaries GetPrimaries() const
>   {
>     return SDL_COLORSPACEPRIMARIES(m_colorspace);
>   }
1694c1947,1959
< #define GetTransfer
---
>   /**
>    * Retrieve the transfer characteristics of an Colorspace.
>    *
>    * @returns the TransferCharacteristics of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr TransferCharacteristics GetTransfer() const
>   {
>     return SDL_COLORSPACETRANSFER(m_colorspace);
>   }
1696c1961,1973
< #define GetMatrix
---
>   /**
>    * Retrieve the matrix coefficients of an Colorspace.
>    *
>    * @returns the MatrixCoefficients of `cspace`.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr MatrixCoefficients GetMatrix() const
>   {
>     return SDL_COLORSPACEMATRIX(m_colorspace);
>   }
1698c1975,1987
< #define IsMatrixBT601
---
>   /**
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
>    *
>    * @returns true if BT601 or BT470BG, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsMatrixBT601() const
>   {
>     return SDL_ISCOLORSPACE_MATRIX_BT601(m_colorspace);
>   }
1700c1989,2001
< #define IsMatrixBT709
---
>   /**
>    * Determine if an Colorspace uses BT709 matrix coefficients.
>    *
>    * @returns true if BT709, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsMatrixBT709() const
>   {
>     return SDL_ISCOLORSPACE_MATRIX_BT709(m_colorspace);
>   }
1702c2003,2015
< #define IsMatrixBT2020_NCL
---
>   /**
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
>    *
>    * @returns true if BT2020_NCL, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsMatrixBT2020_NCL() const
>   {
>     return SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(m_colorspace);
>   }
1704c2017,2029
< #define IsLimitedRange
---
>   /**
>    * A function to determine if an Colorspace has a limited range.
>    *
>    * @returns true if limited range, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsLimitedRange() const
>   {
>     return SDL_ISCOLORSPACE_LIMITED_RANGE(m_colorspace);
>   }
1706c2031,2043
< #define IsFullRange
---
>   /**
>    * A function to determine if an Colorspace has a full range.
>    *
>    * @returns true if full range, false otherwise.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   constexpr bool IsFullRange() const
>   {
>     return SDL_ISCOLORSPACE_FULL_RANGE(m_colorspace);
>   }
1770a2108,2109
> /// @}
> 
1779a2119,2121
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
1796,1799c2138,2141
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
1801c2143
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
1809c2151,2160
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
1820c2171
<    * Get the r.
---
>    * Get the red component from the color.
1822c2173
<    * @returns current r value.
---
>    * @returns The red component from the color.
1827c2178
<    * Set the r.
---
>    * Set the red component from the color.
1829c2180
<    * @param newR the new r value.
---
>    * @param newR New red component value.
1839c2190,2192
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
1841d2193
<    * @returns current g value.
1846c2198
<    * Set the g.
---
>    * Set the green component from the color.
1848c2200
<    * @param newG the new g value.
---
>    * @param newG New green component value.
1858c2210,2212
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
1860d2213
<    * @returns current b value.
1865c2218
<    * Set the b.
---
>    * Set the blue component from the color.
1867c2220
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
1877c2230,2232
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
1879d2233
<    * @returns current a value.
1884c2238
<    * Set the a.
---
>    * Set the alpha component from the color.
1886c2240
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
1893a2248,2305
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
1900a2313,2316
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
1905c2321
<    * Wraps FColor.
---
>    * Wraps SDL_FColor.
1922c2338
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
1930c2346,2355
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
1941c2366
<    * Get the r.
---
>    * Get the red component from the color.
1943c2368
<    * @returns current r value.
---
>    * @returns The red component from the color.
1948c2373
<    * Set the r.
---
>    * Set the red component from the color.
1950c2375
<    * @param newR the new r value.
---
>    * @param newR New red component value.
1960c2385,2387
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
1962d2388
<    * @returns current g value.
1967c2393
<    * Set the g.
---
>    * Set the green component from the color.
1969c2395
<    * @param newG the new g value.
---
>    * @param newG New green component value.
1979c2405,2407
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
1981d2408
<    * @returns current b value.
1986c2413
<    * Set the b.
---
>    * Set the blue component from the color.
1988c2415
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
1998c2425,2427
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2000d2428
<    * @returns current a value.
2005c2433
<    * Set the a.
---
>    * Set the alpha component from the color.
2007c2435
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2084c2512
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2088c2516
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2113d2540
<    * @param ncolors the number of entries to modify.
2119a2547,2548
>    *
>    * @sa Palette.Palette
2123c2552,2553
<     CheckError(SDL_SetPaletteColors(m_resource, colors, firstcolor));
---
>     CheckError(SDL_SetPaletteColors(
>       m_resource, colors.data(), firstcolor, colors.size()));
2260c2690,2691
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2446a2878,2904
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, r, g, b, a);
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
