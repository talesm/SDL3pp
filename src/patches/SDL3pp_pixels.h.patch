12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
81d80
< 
102d100
< 
177a176,180
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
209a213,219
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
222a233,239
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
247a265,271
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
268a293,299
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
295a327,328
> /// @}
> 
301c334
<  * ```c
---
>  * ```cpp
320a354,358
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
355a394,398
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
359d401
< 
374c416
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
379c421
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
401c443,444
<     : T(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
433c476
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
435c478
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
441c484
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
443c486
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
448,450c491
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
452,453c493
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
455c495
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
457c497
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
459c499,502
<   constexpr PixelType GetType() const { return SDL_PIXELTYPE(m_format); }
---
>   constexpr PixelType GetType() const
>   {
>     return PixelType(SDL_PIXELTYPE(m_format));
>   }
462c505
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
467,468c510
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
470c512
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
472c514
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
477c519
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
482,483c524
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
485c526
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
487c528
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
489c530,533
<   constexpr PackedLayout GetLayout() const { return SDL_PIXELLAYOUT(m_format); }
---
>   constexpr PackedLayout GetLayout() const
>   {
>     return PackedLayout(SDL_PIXELLAYOUT(m_format));
>   }
492,495c536
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
500,501c541
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
503c543
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
505c545
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
507c547
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
512c552
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
520,521c560
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
523c562
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
525c564
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
527c566
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
532,535c571
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
537d572
<    * @param format an PixelFormat to check.
540c575
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
542c577
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
550c585
<    * A macro to determine if an PixelFormat is a packed format.
---
>    * Determine if this is a packed format.
552,555d586
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
558c589
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
560c591
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
565c596
<    * A macro to determine if an PixelFormat is an array format.
---
>    * Determine if this is an array format.
567,570d597
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
573c600
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
575c602
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
580,583c607
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
585d608
<    * @param format an PixelFormat to check.
588c611
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
590c613
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
595,598c618
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
600d619
<    * @param format an PixelFormat to check.
603c622
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
605c624
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
610c629
<    * A macro to determine if an PixelFormat has an alpha channel.
---
>    * Determine if this has an alpha channel.
612,615d630
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
618c633
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
620c635
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
625c640
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
629,632d643
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
635c646
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
637c648
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
726a738,769
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
728a772,795
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
950a1018,1019
> /// @}
> 
980c1049,1050
<   return SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes);
---
>   return PixelFormatRaw(
>     SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes));
984c1054
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
986c1056
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
992c1062
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
994c1064
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
1015c1085
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1051c1121
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1228a1299,1303
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1242a1318,1324
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1255,1256c1337
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1261c1342
<  * Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
>  * Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1264a1346,1352
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1319a1408,1414
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1395a1491,1497
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1454a1557,1563
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1467c1576
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1474c1583
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1485a1595,1601
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1494a1611,1613
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1503,1504c1622
< 
<   ColorspaceRaw m_cspace;
---
>   SDL_Colorspace m_colorspace;
1510c1628
<    * @param cspace the value to be wrapped
---
>    * @param colorspace the value to be wrapped
1512,1513c1630,1631
<   constexpr Colorspace(ColorspaceRaw cspace = {})
<     : m_cspace(cspace)
---
>   constexpr Colorspace(SDL_Colorspace colorspace = {})
>     : m_colorspace(colorspace)
1518c1636
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1522,1523c1640,1641
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1553c1671,1676
<     : T(SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_colorspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
>                                                         range,
>                                                         primaries,
>                                                         transfer,
>                                                         matrix,
>                                                         chroma)))
1565c1688
<   constexpr bool operator==(ColorspaceRaw cspace) const
---
>   constexpr bool operator==(SDL_Colorspace colorspace) const
1567c1690
<     return operator==(Colorspace(cspace));
---
>     return operator==(Colorspace(colorspace));
1569a1693
>   /// True if a valid colorspace
1575c1699
<   constexpr operator SDL_Colorspace() const { return m_cspace; }
---
>   constexpr operator SDL_Colorspace() const { return m_colorspace; }
1582c1706
<   constexpr explicit operator bool() const { return m_cspace != 0; }
---
>   constexpr explicit operator bool() const { return m_colorspace != 0; }
1585c1709
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1587d1710
<    * @param cspace an Colorspace to check.
1590c1713
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1592c1715
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1594c1717,1720
<   constexpr ColorType GetType() const { return SDL_COLORSPACETYPE(m_cspace); }
---
>   constexpr ColorType GetType() const
>   {
>     return SDL_COLORSPACETYPE(m_colorspace);
>   }
1597c1723
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1599d1724
<    * @param cspace an Colorspace to check.
1602c1727
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1604c1729
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1608c1733
<     return SDL_COLORSPACERANGE(m_cspace);
---
>     return SDL_COLORSPACERANGE(m_colorspace);
1612c1737
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1614d1738
<    * @param cspace an Colorspace to check.
1617c1741
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1619c1743
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1623c1747
<     return SDL_COLORSPACECHROMA(m_cspace);
---
>     return SDL_COLORSPACECHROMA(m_colorspace);
1627c1751
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1629d1752
<    * @param cspace an Colorspace to check.
1632c1755
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1634c1757
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1638c1761
<     return SDL_COLORSPACEPRIMARIES(m_cspace);
---
>     return SDL_COLORSPACEPRIMARIES(m_colorspace);
1642c1765
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1644d1766
<    * @param cspace an Colorspace to check.
1647c1769
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1649c1771
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1653c1775
<     return SDL_COLORSPACETRANSFER(m_cspace);
---
>     return SDL_COLORSPACETRANSFER(m_colorspace);
1657c1779
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1659d1780
<    * @param cspace an Colorspace to check.
1662c1783
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1664c1785
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1668c1789
<     return SDL_COLORSPACEMATRIX(m_cspace);
---
>     return SDL_COLORSPACEMATRIX(m_colorspace);
1672,1673c1793
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1675,1678d1794
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param cspace an Colorspace to check.
1681c1797
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1683c1799
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1687c1803
<     return SDL_ISCOLORSPACE_MATRIX_BT601(m_cspace);
---
>     return SDL_ISCOLORSPACE_MATRIX_BT601(m_colorspace);
1691c1807
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1693d1808
<    * @param cspace an Colorspace to check.
1696c1811
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1698c1813
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1702c1817
<     return SDL_ISCOLORSPACE_MATRIX_BT709(m_cspace);
---
>     return SDL_ISCOLORSPACE_MATRIX_BT709(m_colorspace);
1706,1707c1821
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1709d1822
<    * @param cspace an Colorspace to check.
1712c1825
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1714c1827
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1718c1831
<     return SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(m_cspace);
---
>     return SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(m_colorspace);
1722c1835
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1724d1836
<    * @param cspace an Colorspace to check.
1727c1839
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1729c1841
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1733c1845
<     return SDL_ISCOLORSPACE_LIMITED_RANGE(m_cspace);
---
>     return SDL_ISCOLORSPACE_LIMITED_RANGE(m_colorspace);
1737c1849
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1739d1850
<    * @param cspace an Colorspace to check.
1742c1853
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1744c1855
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1748c1859
<     return SDL_ISCOLORSPACE_FULL_RANGE(m_cspace);
---
>     return SDL_ISCOLORSPACE_FULL_RANGE(m_colorspace);
1813a1925,1926
> /// @}
> 
1851,1852c1964
<   return SDL_DEFINE_COLORSPACE(
<     type, range, primaries, transfer, matrix, chroma);
---
>   return Colorspace(type, range, primaries, transfer, matrix, chroma);
2033a2146,2148
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2050,2053c2165,2168
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2055c2170
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2063c2178,2187
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2074c2198
<    * Get the r.
---
>    * Get the red component from the color.
2076c2200
<    * @returns current r value.
---
>    * @returns The red component from the color.
2081c2205
<    * Set the r.
---
>    * Set the red component from the color.
2083c2207
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2093c2217,2219
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2095d2220
<    * @returns current g value.
2100c2225
<    * Set the g.
---
>    * Set the green component from the color.
2102c2227
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2112c2237,2239
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2114d2240
<    * @returns current b value.
2119c2245
<    * Set the b.
---
>    * Set the blue component from the color.
2121c2247
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2131c2257,2259
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2133d2260
<    * @returns current a value.
2138c2265
<    * Set the a.
---
>    * Set the alpha component from the color.
2140c2267
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2147a2275,2332
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2154a2340,2343
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2159c2348
<    * Wraps FColor.
---
>    * Wraps SDL_FColor.
2176c2365
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2184c2373,2382
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
2195c2393
<    * Get the r.
---
>    * Get the red component from the color.
2197c2395
<    * @returns current r value.
---
>    * @returns The red component from the color.
2202c2400
<    * Set the r.
---
>    * Set the red component from the color.
2204c2402
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2214c2412,2414
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2216d2415
<    * @returns current g value.
2221c2420
<    * Set the g.
---
>    * Set the green component from the color.
2223c2422
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2233c2432,2434
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2235d2435
<    * @returns current b value.
2240c2440
<    * Set the b.
---
>    * Set the blue component from the color.
2242c2442
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2252c2452,2454
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2254d2455
<    * @returns current a value.
2259c2460
<    * Set the a.
---
>    * Set the alpha component from the color.
2261c2462
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2338c2539
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2342c2543
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2367d2567
<    * @param ncolors the number of entries to modify.
2373a2574,2575
>    *
>    * @sa Palette.Palette
2377c2579,2580
<     CheckError(SDL_SetPaletteColors(m_resource, colors, firstcolor));
---
>     CheckError(SDL_SetPaletteColors(
>       m_resource, colors.data(), firstcolor, colors.size()));
2514c2717,2718
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2700a2905,2931
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, r, g, b, a);
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
