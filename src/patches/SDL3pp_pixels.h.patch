12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
206a207,213
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
236a244,250
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
249a264,270
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
274a296,302
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
295a324,330
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
322a358,364
> /// @}
> 
> /**
>  * @name PixelFormats
>  * @{
>  */
> 
358a401,405
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
376c423
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
380,381c427,428
<    * ```c
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * ```cpp
>    * PixelFormat format(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
403c450,451
<     : m_format(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
441c489
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
443c491
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
448c496
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
450c498
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
455,457c503
<    * A macro to retrieve the type of an PixelFormat.
<    *
<    * This is usually a value from the PixelType enumeration.
---
>    * Retrieve the type.
459c505
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
461c507
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
463c509
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
468c514
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
473c519
<    * @returns the order of `format`.
---
>    * @returns the order.
475c521
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
477c523
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
482c528
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
487c533
<    * @returns the layout of `format`.
---
>    * @returns the layout
489c535
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
491c537
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
496,499c542
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
504c547
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
506c549
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
508c551
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
510c553
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
515c558
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
523c566
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
525c568
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
527c570
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
529c572
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
534,537c577
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
541c581
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
543c583
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
548,551c588
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
555c592
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
557c594
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
562,565c599
<    * A macro to determine if an PixelFormat is an array format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an array format.
569c603
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
571c605
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
576,579c610
<    * A macro to determine if an PixelFormat is a 10-bit format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a 10-bit format.
583c614
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
585c616
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
590,593c621
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
597c625
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
599c627
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
604,607c632
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
611c636
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
613c638
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
618c643
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
622,624d646
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
627c649
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
629c651
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
674,675c696,697
<    * @returns a pointer to a PixelFormatDetails structure or nullptr on
<    *          failure; call GetError() for more information.
---
>    * @returns a PixelFormatDetails structure on success
>    * @throws Error on failure.
685a708,739
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param c the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
687a742,765
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
892a971,972
> /// @}
> 
894c974
<  * A macro for defining custom FourCC pixel formats.
---
>  * A function for defining custom FourCC pixel formats.
898c978
<  * ```c
---
>  * ```cpp
908c988
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
910c990
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
950c1030
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
952c1032
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
958c1038
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
960c1040
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
986c1066
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1032c1112
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1211a1292,1296
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1273a1359,1365
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1286,1287c1378
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1291c1382
< /// Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
> /// Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1293a1385,1391
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1346a1445,1451
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1418a1524,1530
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1477a1590,1596
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1490c1609
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1497c1616
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1508a1628,1634
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1517a1644,1646
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1540c1669
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1544,1545c1673,1674
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1575,1576c1704,1709
<     : m_cspace(
<         SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(ColorspaceRaw(SDL_DEFINE_COLORSPACE(type,
>                                                    range,
>                                                    primaries,
>                                                    transfer,
>                                                    matrix,
>                                                    chroma)))
1588c1721
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1592c1725
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1594c1727
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1599c1732
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1603c1736
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1605c1738
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1610c1743
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1614c1747
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1616c1749
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1621c1754
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1625c1758
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1627c1760
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1632c1765
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1636c1769
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1638c1771
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1643c1776
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1647c1780
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1649c1782
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1654,1658c1787
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1662c1791
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1664c1793
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1669c1798
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1673c1802
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1675c1804
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1680,1681c1809
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1685c1813
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1687c1815
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1692c1820
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1696c1824
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1698c1826
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1703c1831
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1707c1835
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1709c1837
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1751a1880,1881
> /// @}
> 
2055a2186,2188
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2072,2075c2205,2208
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2077c2210
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2083c2216
<    * Get the r.
---
>    * Get the red component from the color.
2085c2218
<    * @returns current r value.
---
>    * @returns The red component from the color.
2090c2223
<    * Set the r.
---
>    * Set the red component from the color.
2092c2225
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2102c2235,2237
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2104d2238
<    * @returns current g value.
2109c2243
<    * Set the g.
---
>    * Set the green component from the color.
2111c2245
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2121c2255,2257
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2123d2258
<    * @returns current b value.
2128c2263
<    * Set the b.
---
>    * Set the blue component from the color.
2130c2265
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2140c2275,2277
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2142d2278
<    * @returns current a value.
2147c2283
<    * Set the a.
---
>    * Set the alpha component from the color.
2149c2285
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2158,2159c2294,2320
<   Uint32 Map(const PixelFormatDetails& format,
<              PaletteConstParam palette = {}) const;
---
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
2160a2322,2347
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
2163c2350
<                    PaletteConstParam palette = {});
---
>                    PaletteConstParam palette);
2170a2358,2361
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2192c2383
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2198c2389
<    * Get the r.
---
>    * Get the red component from the color.
2200c2391
<    * @returns current r value.
---
>    * @returns The red component from the color.
2205c2396
<    * Set the r.
---
>    * Set the red component from the color.
2207c2398
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2217c2408,2410
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2219d2411
<    * @returns current g value.
2224c2416
<    * Set the g.
---
>    * Set the green component from the color.
2226c2418
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2236c2428,2430
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2238d2431
<    * @returns current b value.
2243c2436
<    * Set the b.
---
>    * Set the blue component from the color.
2245c2438
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2255c2448,2450
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2257d2451
<    * @returns current a value.
2262c2456
<    * Set the a.
---
>    * Set the alpha component from the color.
2264c2458
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2396,2399c2590,2591
<   constexpr const ColorRaw* data() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /// Access specific pallete colors
>   constexpr const ColorRaw* data() const { return m_resource->colors; }
2401c2593,2594
<   constexpr int size() const { static_assert(false, "Not implemented"); }
---
>   /// Returns number of colors in the palette.
>   constexpr int size() const { return m_resource->ncolors; }
2402a2596
>   /// Access specific pallete index
2405c2599
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2413d2606
<    * @param ncolors the number of entries to modify.
2419a2613,2614
>    *
>    * @sa Palette.Palette
2528,2529c2723,2724
<  * @returns a pointer to a PixelFormatDetails structure or nullptr on
<  *          failure; call GetError() for more information.
---
>  * @returns a PixelFormatDetails structure on success
>  * @throws Error on failure.
2537c2732
<   return CheckError(SDL_GetPixelFormatDetails(format));
---
>   return *CheckError(SDL_GetPixelFormatDetails(format));
2570d2764
<  * @param ncolors the number of entries to modify.
2582c2776,2777
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2650a2846,2882
> /**
>  * Map an RGBA quadruple to a pixel value for a given pixel format.
>  *
>  * This function maps the RGBA color value to the specified pixel format and
>  * returns the pixel value best approximating the given RGBA color value for
>  * the given pixel format.
>  *
>  * If the specified pixel format has no alpha component the alpha value will
>  * be ignored (as it will be in formats with a palette).
>  *
>  * If the format has a palette (8-bit) the index of the closest matching color
>  * in the palette will be returned.
>  *
>  * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>  * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>  * format the return value can be assigned to a Uint16, and similarly a Uint8
>  * for an 8-bpp format).
>  *
>  * @param format a pointer to PixelFormatDetails describing the pixel
>  *               format.
>  * @param r the red component of the pixel in the range 0-255.
>  * @param g the green component of the pixel in the range 0-255.
>  * @param b the blue component of the pixel in the range 0-255.
>  * @param a the alpha component of the pixel in the range 0-255.
>  * @param palette an optional palette for indexed formats, may be nullptr.
>  * @returns a pixel value.
>  *
>  * @threadsafety It is safe to call this function from any thread, as long as
>  *               the palette is not modified.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa PixelFormat.GetDetails
>  * @sa GetRGBA
>  * @sa MapRGB
>  * @sa Surface.MapRGBA
>  */
2658c2890
<   static_assert(false, "Not implemented");
---
>   return SDL_MapRGBA(&format, palette, r, g, b, a);
2680a2913
>  * @param c the color components of the pixel in the range 0-255.
2682,2685d2914
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
2702c2931
<   return SDL_MapRGBA(&format, c, palette);
---
>   return SDL_MapRGBA(&format, palette, c.r, c.g, c.b, c.a);
2708c2937
<   static_assert(false, "Not implemented");
---
>   return MapColor(format, *this, palette);
2713c2942
<   static_assert(false, "Not implemented");
---
>   return MapColor(GetDetails(), c, palette);
2792a3022,3048
> /**
>  * Get RGBA values from a pixel in the specified format.
>  *
>  * This function uses the entire 8-bit [0..255] range when converting color
>  * components from pixel formats with less than 8-bits per RGB component
>  * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>  * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>  *
>  * If the surface has no alpha component, the alpha will be returned as 0xff
>  * (100% opaque).
>  *
>  * @param pixel a pixel value.
>  * @param format a pointer to PixelFormatDetails describing the pixel
>  *               format.
>  * @param palette an optional palette for indexed formats, may be nullptr.
>  * @returns a color value.
>  *
>  * @threadsafety It is safe to call this function from any thread, as long as
>  *               the palette is not modified.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa PixelFormat.GetDetails
>  * @sa GetRGB
>  * @sa MapRGB
>  * @sa MapRGBA
>  */
2797c3053,3055
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetRGBA(pixel, format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
2804c3062
<   static_assert(false, "Not implemented");
---
>   return GetColor(pixel, format, palette);
2809c3067
<   static_assert(false, "Not implemented");
---
>   return GetColor(pixel, GetDetails(), palette);
