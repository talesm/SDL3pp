12c12
<  * @defgroup CategoryPixels Category Pixels
---
>  * @defgroup CategoryPixels Pixel Formats and Conversion Routines
89d88
< 
110d108
< 
179a178,184
>  * @name PixelTypes
>  * @{
>  */
> 
> /**
>  * Pixel type.
>  *
209a215,221
> /// @}
> 
> /**
>  * @name BitmapOrders
>  * @{
>  */
> 
222a235,241
> /// @}
> 
> /**
>  * @name PackedOrders
>  * @{
>  */
> 
247a267,273
> /// @}
> 
> /**
>  * @name ArrayOrders
>  * @{
>  */
> 
268a295,301
> /// @}
> 
> /**
>  * @name PackedLayouts
>  * @{
>  */
> 
295a329,330
> /// @}
> 
301c336
<  * ```c
---
>  * ```cpp
320a356,360
>  * @name PixelFormats
>  * @{
>  */
> 
> /**
355a396,400
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
>  * @sa PixelFormats
359d403
< 
374c418
<    * A macro for defining custom non-FourCC pixel formats.
---
>    * Defining custom non-FourCC pixel formats.
379c423
<    * PixelFormat.PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
---
>    * PixelFormat(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
401c445,446
<     : T(SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes))
---
>     : m_format(PixelFormatRaw(
>         SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes)))
433c478
<    * A macro to retrieve the flags of an PixelFormat.
---
>    * Retrieve the flags of an PixelFormat.
435c480
<    * This macro is generally not needed directly by an app, which should use
---
>    * This function is generally not needed directly by an app, which should use
441c486
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
443c488
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
448c493
<    * A macro to retrieve the type of an PixelFormat.
---
>    * Retrieve the type.
450,453c495
<    * This is usually a value from the PixelType enumeration.
<    *
<    * @param format an PixelFormat to check.
<    * @returns the type of `format`.
---
>    * @returns the type as PixelType.
455c497
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
457c499
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
459c501,504
<   constexpr PixelType GetType() const { return SDL_PIXELTYPE(m_format); }
---
>   constexpr PixelType GetType() const
>   {
>     return PixelType(SDL_PIXELTYPE(m_format));
>   }
462c507
<    * A macro to retrieve the order of an PixelFormat.
---
>    * Retrieve the order.
467,468c512
<    * @param format an PixelFormat to check.
<    * @returns the order of `format`.
---
>    * @returns the order.
470c514
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
472c516
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
477c521
<    * A macro to retrieve the layout of an PixelFormat.
---
>    * Retrieve the layout.
482,483c526
<    * @param format an PixelFormat to check.
<    * @returns the layout of `format`.
---
>    * @returns the layout
485c528
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
487c530
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
489c532,535
<   constexpr PackedLayout GetLayout() const { return SDL_PIXELLAYOUT(m_format); }
---
>   constexpr PackedLayout GetLayout() const
>   {
>     return PackedLayout(SDL_PIXELLAYOUT(m_format));
>   }
492,495c538
<    * A macro to determine an PixelFormat's bits per pixel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine this's bits per pixel.
500,501c543
<    * @param format an PixelFormat to check.
<    * @returns the bits-per-pixel of `format`.
---
>    * @returns the bits-per-pixel.
503c545
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
505c547
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
507c549
<    * @sa PixelFormat.GetBytesPerPixel
---
>    * @sa GetBytesPerPixel
512c554
<    * A macro to determine an PixelFormat's bytes per pixel.
---
>    * Determine this's bytes per pixel.
520,521c562
<    * @param format an PixelFormat to check.
<    * @returns the bytes-per-pixel of `format`.
---
>    * @return the bytes-per-pixel.
523c564
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
525c566
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
527c568
<    * @sa PixelFormat.GetBitsPerPixel
---
>    * @sa GetBitsPerPixel
532,535c573
<    * A macro to determine if an PixelFormat is an indexed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is an indexed format.
537d574
<    * @param format an PixelFormat to check.
540c577
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
542c579
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
550,553c587
<    * A macro to determine if an PixelFormat is a packed format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a packed format.
555d588
<    * @param format an PixelFormat to check.
558c591
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
560c593
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
565c598
<    * A macro to determine if an PixelFormat is an array format.
---
>    * Determine if this is an array format.
567,570d599
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
573c602
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
575c604
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
580c609
<    * A macro to determine if an PixelFormat is a 10-bit format.
---
>    * Determine if this is a 10-bit format.
582,585d610
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
588c613
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
590c615
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
595,598c620
<    * A macro to determine if an PixelFormat is a floating point format.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this is a floating point format.
600d621
<    * @param format an PixelFormat to check.
603c624
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
605c626
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
610,613c631
<    * A macro to determine if an PixelFormat has an alpha channel.
<    *
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
---
>    * Determine if this has an alpha channel.
615d632
<    * @param format an PixelFormat to check.
618c635
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
620c637
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
625c642
<    * A macro to determine if an PixelFormat is a "FourCC" format.
---
>    * Determine if this is a "FourCC" format.
629,632d645
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param format an PixelFormat to check.
635c648
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
637c650
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
726a740,771
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components of the pixel in the range 0-255.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa Get()
>    * @sa MapRGBA()
>    * @sa Surface.MapColor()
>    */
728a774,797
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa GetPixelFormatDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
933a1003,1004
> /// @}
> 
963c1034,1035
<   return SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes);
---
>   return PixelFormatRaw(
>     SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes));
967c1039
<  * A macro to retrieve the flags of an PixelFormat.
---
>  * Retrieve the flags of an PixelFormat.
969c1041
<  * This macro is generally not needed directly by an app, which should use
---
>  * This function is generally not needed directly by an app, which should use
975c1047
<  * @threadsafety It is safe to call this macro from any thread.
---
>  * @threadsafety It is safe to call this function from any thread.
977c1049
<  * @since This macro is available since SDL 3.2.0.
---
>  * @since This function is available since SDL 3.2.0.
998c1070
<   return SDL_PIXELTYPE(format);
---
>   return PixelType(SDL_PIXELTYPE(format));
1034c1106
<   return SDL_PIXELLAYOUT(format);
---
>   return PackedLayout(SDL_PIXELLAYOUT(format));
1211a1284,1288
>  * @name ColorTypes
>  * @{
>  */
> 
> /**
1225a1303,1309
> /// @}
> 
> /**
>  * @name ColorRanges
>  * @{
>  */
> 
1238,1239c1322
<  * Narrow range, e.g.  16-235 for 8-bit RGB and luma, and 16-240 for 8-bit
<  * chroma
---
>  * Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma
1244c1327
<  * Full range, e.g.  0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
---
>  * Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma
1247a1331,1337
> /// @}
> 
> /**
>  * @name ColorPrimaries
>  * @{
>  */
> 
1302a1393,1399
> /// @}
> 
> /**
>  * @name TransferCharacteristics
>  * @{
>  */
> 
1378a1476,1482
> /// @}
> 
> /**
>  * @name MatrixCoefficients
>  * @{
>  */
> 
1437a1542,1548
> /// @}
> 
> /**
>  * @name ChromaLocations
>  * @{
>  */
> 
1450c1561
<  * of the 2x2 square.  In other words, they have the same horizontal location as
---
>  * of the 2x2 square. In other words, they have the same horizontal location as
1457c1568
<  * square.  In other words, they are offset one-half pixel to the right and
---
>  * square. In other words, they are offset one-half pixel to the right and
1468a1580,1586
> /// @}
> 
> /**
>  * @name Colorspaces
>  * @{
>  */
> 
1477a1596,1598
>  * @cat wrap-state
>  *
>  * @sa Colorspaces
1486d1606
< 
1501c1621
<    * A macro for defining custom Colorspace formats.
---
>    * Define custom Colorspace formats.
1505,1506c1625,1626
<    * ```c
<    * Colorspace.Colorspace(COLOR_TYPE_RGB,
---
>    * ```cpp
>    * Colorspace colorspace(COLOR_TYPE_RGB,
1536c1656,1661
<     : T(SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma))
---
>     : m_cspace(SDL_Colorspace(SDL_DEFINE_COLORSPACE(type,
>                                                     range,
>                                                     primaries,
>                                                     transfer,
>                                                     matrix,
>                                                     chroma)))
1568c1693
<    * A macro to retrieve the type of an Colorspace.
---
>    * Retrieve the type of a Colorspace.
1570d1694
<    * @param cspace an Colorspace to check.
1573c1697
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1575c1699
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1580c1704
<    * A macro to retrieve the range of an Colorspace.
---
>    * Retrieve the range of a Colorspace.
1582d1705
<    * @param cspace an Colorspace to check.
1585c1708
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1587c1710
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1595c1718
<    * A macro to retrieve the chroma sample location of an Colorspace.
---
>    * Retrieve the chroma sample location of an Colorspace.
1597d1719
<    * @param cspace an Colorspace to check.
1600c1722
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1602c1724
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1610c1732
<    * A macro to retrieve the primaries of an Colorspace.
---
>    * Retrieve the primaries of an Colorspace.
1612d1733
<    * @param cspace an Colorspace to check.
1615c1736
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1617c1738
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1625c1746
<    * A macro to retrieve the transfer characteristics of an Colorspace.
---
>    * Retrieve the transfer characteristics of an Colorspace.
1627d1747
<    * @param cspace an Colorspace to check.
1630c1750
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1632c1752
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1640c1760
<    * A macro to retrieve the matrix coefficients of an Colorspace.
---
>    * Retrieve the matrix coefficients of an Colorspace.
1642d1761
<    * @param cspace an Colorspace to check.
1645c1764
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1647c1766
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1655,1656c1774
<    * A macro to determine if an Colorspace uses BT601 (or BT470BG) matrix
<    * coefficients.
---
>    * Determine if a Colorspace uses BT601 (or BT470BG) matrix coefficients.
1658,1661d1775
<    * Note that this macro double-evaluates its parameter, so do not use
<    * expressions with side-effects here.
<    *
<    * @param cspace an Colorspace to check.
1664c1778
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1666c1780
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1674c1788
<    * A macro to determine if an Colorspace uses BT709 matrix coefficients.
---
>    * Determine if an Colorspace uses BT709 matrix coefficients.
1676d1789
<    * @param cspace an Colorspace to check.
1679c1792
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1681c1794
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1689,1690c1802
<    * A macro to determine if an Colorspace uses BT2020_NCL matrix
<    * coefficients.
---
>    * Determine if an Colorspace uses BT2020_NCL matrix coefficients.
1692d1803
<    * @param cspace an Colorspace to check.
1695c1806
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1697c1808
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1705c1816
<    * A macro to determine if an Colorspace has a limited range.
---
>    * A function to determine if an Colorspace has a limited range.
1707d1817
<    * @param cspace an Colorspace to check.
1710c1820
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1712c1822
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1720c1830
<    * A macro to determine if an Colorspace has a full range.
---
>    * A function to determine if an Colorspace has a full range.
1722d1831
<    * @param cspace an Colorspace to check.
1725c1834
<    * @threadsafety It is safe to call this macro from any thread.
---
>    * @threadsafety It is safe to call this function from any thread.
1727c1836
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
1792a1902,1903
> /// @}
> 
1830,1831c1941
<   return SDL_DEFINE_COLORSPACE(
<     type, range, primaries, transfer, matrix, chroma);
---
>   return Colorspace(type, range, primaries, transfer, matrix, chroma);
2012a2123,2125
>  *
>  * @cat wrap-extending-struct
>  * @sa FColor
2029,2032c2142,2145
<    * @param r the value for r.
<    * @param g the value for g.
<    * @param b the value for b.
<    * @param a the value for a.
---
>    * @param r the value for channel r.
>    * @param g the value for channel g.
>    * @param b the value for channel b.
>    * @param a the value for channel a.
2034c2147
<   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a)
---
>   constexpr Color(Uint8 r, Uint8 g, Uint8 b, Uint8 a = 255)
2042c2155,2164
<   constexpr auto operator<=>(const Color& other) const = default;
---
>   constexpr auto operator<=>(const Color& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::strong_ordering::equal) return c;
>     c = g <=> other.g;
>     if (c != std::strong_ordering::equal) return c;
>     c = b <=> other.b;
>     if (c != std::strong_ordering::equal) return c;
>     return a <=> other.a;
>   }
2053c2175
<    * Get the r.
---
>    * Get the red component from the color.
2055c2177
<    * @returns current r value.
---
>    * @returns The red component from the color.
2060c2182
<    * Set the r.
---
>    * Set the red component from the color.
2062c2184
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2072c2194,2196
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2074d2197
<    * @returns current g value.
2079c2202
<    * Set the g.
---
>    * Set the green component from the color.
2081c2204
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2091c2214,2216
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2093d2217
<    * @returns current b value.
2098c2222
<    * Set the b.
---
>    * Set the blue component from the color.
2100c2224
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2110c2234,2236
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2112d2237
<    * @returns current a value.
2117c2242
<    * Set the a.
---
>    * Set the alpha component from the color.
2119c2244
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2126a2252,2309
> 
>   /**
>    * Map an RGBA quadruple to a pixel value for a given pixel format.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the specified pixel format has no alpha component the alpha value will
>    * be ignored (as it will be in formats with a palette).
>    *
>    * If the format has a palette (8-bit) the index of the closest matching color
>    * in the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param format a pointer to PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a pixel value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    */
>   Uint32 Map(const PixelFormatDetails& format, PaletteConstParam palette) const;
> 
>   /**
>    * Get RGBA values from a pixel in the specified format.
>    *
>    * This function uses the entire 8-bit [0..255] range when converting color
>    * components from pixel formats with less than 8-bits per RGB component
>    * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
>    * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
>    *
>    * If the surface has no alpha component, the alpha will be returned as 0xff
>    * (100% opaque).
>    *
>    * @param pixel a pixel value.
>    * @param format a pointer to SDL_PixelFormatDetails describing the pixel
>    *               format.
>    * @param palette an optional palette for indexed formats, may be NULL.
>    * @returns a color value.
>    *
>    * @threadsafety It is safe to call this function from any thread, as long as
>    *               the palette is not modified.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa PixelFormat.GetDetails()
>    * @sa GetRGBA()
>    * @sa Map()
>    */
>   static Color Get(Uint32 pixel,
>                    const PixelFormatDetails& format,
>                    PaletteConstParam palette);
2133a2317,2320
>  *
>  * @cat wrap-extending-struct
>  *
>  * @sa Color
2155c2342
<   constexpr FColor(float r, float g, float b, float a)
---
>   constexpr FColor(float r, float g, float b, float a = 1)
2163c2350,2359
<   constexpr auto operator<=>(const FColor& other) const = default;
---
>   constexpr auto operator<=>(const FColor& other) const
>   {
>     auto c = r <=> other.r;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = g <=> other.g;
>     if (c != std::partial_ordering::equivalent) return c;
>     c = b <=> other.b;
>     if (c != std::partial_ordering::equivalent) return c;
>     return a <=> other.a;
>   }
2174c2370
<    * Get the r.
---
>    * Get the red component from the color.
2176c2372
<    * @returns current r value.
---
>    * @returns The red component from the color.
2181c2377
<    * Set the r.
---
>    * Set the red component from the color.
2183c2379
<    * @param newR the new r value.
---
>    * @param newR New red component value.
2193c2389,2391
<    * Get the g.
---
>    * Get the green component from the color.
>    *
>    * @returns The green component from the color.
2195d2392
<    * @returns current g value.
2200c2397
<    * Set the g.
---
>    * Set the green component from the color.
2202c2399
<    * @param newG the new g value.
---
>    * @param newG New green component value.
2212c2409,2411
<    * Get the b.
---
>    * Get the blue component from the color.
>    *
>    * @returns The blue component from the color.
2214d2412
<    * @returns current b value.
2219c2417
<    * Set the b.
---
>    * Set the blue component from the color.
2221c2419
<    * @param newB the new b value.
---
>    * @param newB New blue component value.
2231c2429,2431
<    * Get the a.
---
>    * Get the alpha component from the color.
>    *
>    * @returns The alpha component from the color.
2233d2432
<    * @returns current a value.
2238c2437
<    * Set the a.
---
>    * Set the alpha component from the color.
2240c2439
<    * @param newA the new a value.
---
>    * @param newA New alpha component value.
2329c2528
<   constexpr int GetSize() const { static_assert(false, "Not implemented"); }
---
>   constexpr int GetSize() const { return m_resource->ncolors; }
2333c2532
<     static_assert(false, "Not implemented");
---
>     return m_resource->colors[index];
2358d2556
<    * @param ncolors the number of entries to modify.
2364a2563,2564
>    *
>    * @sa Palette.Palette
2368c2568,2569
<     CheckError(SDL_SetPaletteColors(m_resource, colors, firstcolor));
---
>     CheckError(SDL_SetPaletteColors(
>       m_resource, colors.data(), firstcolor, colors.size()));
2505c2706,2707
<   CheckError(SDL_SetPaletteColors(palette, colors, firstcolor));
---
>   CheckError(
>     SDL_SetPaletteColors(palette, colors.data(), firstcolor, colors.size()));
2691a2894,2920
> 
> inline Uint32 Color::Map(const PixelFormatDetails& format,
>                          PaletteConstParam palette = nullptr) const
> {
>   return MapRGBA(&format, palette, r, g, b, a);
> }
> 
> inline Color Color::Get(Uint32 pixel,
>                         const PixelFormatDetails& format,
>                         PaletteConstParam palette = nullptr)
> {
>   Color c;
>   GetRGBA(pixel, &format, palette, &c.r, &c.g, &c.b, &c.a);
>   return c;
> }
> 
> inline Uint32 PixelFormat::Map(Color color,
>                                PaletteConstParam palette = nullptr) const
> {
>   return color.Map(*GetDetails(), palette);
> }
> 
> inline Color PixelFormat::Get(Uint32 pixel,
>                               PaletteConstParam palette = nullptr) const
> {
>   return Color::Get(pixel, *GetDetails(), palette);
> }
