--- src/generated/SDL3pp_log.h	2025-09-10 17:41:48.259937153 -0300
+++ include/SDL3pp/SDL3pp_log.h	2025-09-10 17:41:10.822945156 -0300
@@ -10,7 +10,7 @@
 namespace SDL {
 
 /**
- * @defgroup CategoryLog Category Log
+ * @defgroup CategoryLog Log Handling
  *
  * Simple log messages with priorities and categories. A message's
  * LogPriority signifies how important the message is. A message's
@@ -62,12 +62,51 @@
 using LogCategoryRaw = SDL_LogCategory;
 
 /**
+ * @name LogPriorities
+ *
+ * The priorities assignable for a LogCategory.
+ *
+ * @{
+ */
+
+/**
  * The predefined log priorities
  *
  * @since This enum is available since SDL 3.2.0.
  */
 using LogPriority = SDL_LogPriority;
 
+constexpr LogPriority LOG_PRIORITY_INVALID =
+  SDL_LOG_PRIORITY_INVALID; ///< INVALID
+
+constexpr LogPriority LOG_PRIORITY_TRACE = SDL_LOG_PRIORITY_TRACE; ///< TRACE
+
+constexpr LogPriority LOG_PRIORITY_VERBOSE =
+  SDL_LOG_PRIORITY_VERBOSE; ///< VERBOSE
+
+constexpr LogPriority LOG_PRIORITY_DEBUG = SDL_LOG_PRIORITY_DEBUG; ///< DEBUG
+
+constexpr LogPriority LOG_PRIORITY_INFO = SDL_LOG_PRIORITY_INFO; ///< INFO
+
+constexpr LogPriority LOG_PRIORITY_WARN = SDL_LOG_PRIORITY_WARN; ///< WARN
+
+constexpr LogPriority LOG_PRIORITY_ERROR = SDL_LOG_PRIORITY_ERROR; ///< ERROR
+
+constexpr LogPriority LOG_PRIORITY_CRITICAL =
+  SDL_LOG_PRIORITY_CRITICAL; ///< CRITICAL
+
+constexpr LogPriority LOG_PRIORITY_COUNT = SDL_LOG_PRIORITY_COUNT; ///< COUNT
+
+/// @}
+
+/**
+ * @name LogCategories
+ *
+ * The logging categories. see LogCategory for more info
+ *
+ * @{
+ */
+
 /**
  * The predefined log categories
  *
@@ -76,10 +115,13 @@
  * the VERBOSE level and all other categories are enabled at the ERROR level.
  *
  * @since This enum is available since SDL 3.2.0.
+ *
+ * @cat wrap-state
+ *
+ * @sa wrap-state
  */
 class LogCategory
 {
-
   SDL_LogCategory m_category;
 
 public:
@@ -88,7 +130,7 @@
    *
    * @param category the value to be wrapped
    */
-  constexpr LogCategory(SDL_LogCategory category = {})
+  constexpr LogCategory(SDL_LogCategory category = SDL_LOG_CATEGORY_APPLICATION)
     : m_category(category)
   {
   }
@@ -98,7 +140,10 @@
    *
    * @param category the value to be wrapped
    */
-  constexpr explicit LogCategory(int category) {}
+  constexpr explicit LogCategory(int category)
+    : m_category(SDL_LogCategory(category))
+  {
+  }
 
   /**
    * Default comparison operator
@@ -130,7 +175,6 @@
   /**
    * Set the priority of a particular log category.
    *
-   * @param category the category to assign a priority to.
    * @param priority the LogPriority to assign.
    *
    * @threadsafety It is safe to call this function from any thread.
@@ -160,25 +204,47 @@
    */
   LogPriority GetLogPriority() const { return SDL_GetLogPriority(m_category); }
 
+  /**
+   * Log an unformatted message with the specified priority.
+   *
+   * @param priority the priority of the message.
+   * @param message string to output.
+   *
+   * @threadsafety It is safe to call this function from any thread.
+   *
+   * @since This function is available since SDL 3.2.0.
+   *
+   * @sa SDL::Log()
+   * @sa Log()
+   * @sa LogCritical()
+   * @sa LogDebug()
+   * @sa LogError()
+   * @sa LogInfo()
+   * @sa LogTrace()
+   * @sa LogVerbose()
+   * @sa LogWarn()
+   */
   void LogUnformatted(LogPriority priority, StringParam message) const
   {
-    static_assert(false, "Not implemented");
+    SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
   }
 
   /**
-   * Log a message with the specified category and priority.
+   * Log a message with the specified priority.
    *
-   * @param category the category of the message.
    * @param priority the priority of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogDebug
    * @sa LogCategory.LogError
@@ -193,22 +259,23 @@
                   std::string_view fmt,
                   ARGS... args) const
   {
-    SDL_LogMessage(m_category, priority, fmt, args);
+    LogUnformatted(priority, std::vformat(fmt, std::make_format_args(args...)));
   }
 
   /**
    * Log a message with LOG_PRIORITY_TRACE.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
-   *
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogDebug
    * @sa LogCategory.LogError
@@ -222,22 +289,24 @@
   template<class... ARGS>
   void LogTrace(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogTrace(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_TRACE, fmt, std::forward<ARGS>(args)...);
   }
 
   /**
    * Log a message with LOG_PRIORITY_VERBOSE.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogDebug
    * @sa LogCategory.LogError
@@ -249,22 +318,24 @@
   template<class... ARGS>
   void LogVerbose(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogVerbose(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_VERBOSE, fmt, std::forward<ARGS>(args)...);
   }
 
   /**
    * Log a message with LOG_PRIORITY_DEBUG.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogError
    * @sa LogCategory.LogInfo
@@ -277,22 +348,24 @@
   template<class... ARGS>
   void LogDebug(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogDebug(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_DEBUG, fmt, std::forward<ARGS>(args)...);
   }
 
   /**
    * Log a message with LOG_PRIORITY_INFO.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogDebug
    * @sa LogCategory.LogError
@@ -305,22 +378,24 @@
   template<class... ARGS>
   void LogInfo(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogInfo(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_INFO, fmt, std::forward<ARGS>(args)...);
   }
 
   /**
    * Log a message with LOG_PRIORITY_WARN.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogDebug
    * @sa LogCategory.LogError
@@ -333,22 +408,24 @@
   template<class... ARGS>
   void LogWarn(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogWarn(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_WARN, fmt, std::forward<ARGS>(args)...);
   }
 
   /**
    * Log a message with LOG_PRIORITY_ERROR.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
+   * @cat formatted-string
+   *
    * @sa LogCategory.LogCritical
    * @sa LogCategory.LogDebug
    * @sa LogCategory.LogInfo
@@ -361,35 +438,38 @@
   template<class... ARGS>
   void LogError(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogError(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_ERROR, fmt, std::forward<ARGS>(args)...);
   }
 
   /**
    * Log a message with LOG_PRIORITY_CRITICAL.
    *
-   * @param category the category of the message.
-   * @param fmt a printf() style message format string.
-   * @param ... additional parameters matching % tokens in the **fmt** string,
-   *            if any.
+   * @param fmt a
+   * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+   * style message format string.
+   * @param args additional parameters matching the `{}` tokens in the format
+   * string, if any.
    *
    * @threadsafety It is safe to call this function from any thread.
    *
    * @since This function is available since SDL 3.2.0.
    *
-   * @sa Log
-   * @sa LogCategory.LogDebug
-   * @sa LogCategory.LogError
-   * @sa LogCategory.LogInfo
-   * @sa LogCategory.LogMessage
-   * @sa LogUnformatted
-   * @sa LogCategory.LogTrace
-   * @sa LogCategory.LogVerbose
+   * @cat formatted-string
+   *
+   * @sa formatted-string
+   * @sa LogCategory.LogDebug()
+   * @sa LogCategory.LogError()
+   * @sa LogCategory.LogInfo()
+   * @sa LogUnformatted()
+   * @sa LogCategory.LogUnformatted()
+   * @sa LogCategory.LogTrace()
+   * @sa LogCategory.LogVerbose()
    * @sa LogCategory.LogWarn
    */
   template<class... ARGS>
   void LogCritical(std::string_view fmt, ARGS&&... args) const
   {
-    SDL_LogCritical(m_category, fmt, args);
+    LogMessage(SDL_LOG_PRIORITY_CRITICAL, fmt, std::forward<ARGS>(args)...);
   }
 };
 
@@ -443,27 +523,6 @@
 
 constexpr LogCategory LOG_CATEGORY_CUSTOM = SDL_LOG_CATEGORY_CUSTOM; ///< CUSTOM
 
-constexpr LogPriority LOG_PRIORITY_INVALID =
-  SDL_LOG_PRIORITY_INVALID; ///< INVALID
-
-constexpr LogPriority LOG_PRIORITY_TRACE = SDL_LOG_PRIORITY_TRACE; ///< TRACE
-
-constexpr LogPriority LOG_PRIORITY_VERBOSE =
-  SDL_LOG_PRIORITY_VERBOSE; ///< VERBOSE
-
-constexpr LogPriority LOG_PRIORITY_DEBUG = SDL_LOG_PRIORITY_DEBUG; ///< DEBUG
-
-constexpr LogPriority LOG_PRIORITY_INFO = SDL_LOG_PRIORITY_INFO; ///< INFO
-
-constexpr LogPriority LOG_PRIORITY_WARN = SDL_LOG_PRIORITY_WARN; ///< WARN
-
-constexpr LogPriority LOG_PRIORITY_ERROR = SDL_LOG_PRIORITY_ERROR; ///< ERROR
-
-constexpr LogPriority LOG_PRIORITY_CRITICAL =
-  SDL_LOG_PRIORITY_CRITICAL; ///< CRITICAL
-
-constexpr LogPriority LOG_PRIORITY_COUNT = SDL_LOG_PRIORITY_COUNT; ///< COUNT
-
 /**
  * Set the priority of all log categories.
  *
@@ -547,7 +606,7 @@
  *
  * @since This function is available since SDL 3.2.0.
  *
- * @sa SetLogPriorities
+ * @sa LogCategory.SetLogPriorities
  * @sa LogCategory.SetLogPriority
  */
 inline void SetLogPriorityPrefix(LogPriority priority, StringParam prefix)
@@ -558,14 +617,20 @@
 /**
  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
  *
- * @param fmt a printf() style message format string.
- * @param ... additional parameters matching % tokens in the `fmt` string, if
- *            any.
+ * @param fmt a
+ *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
+ *            style message format string.
+ * @param args additional parameters matching the `{}` tokens in the format
+ *             string, if any.
  *
  * @threadsafety It is safe to call this function from any thread.
  *
  * @since This function is available since SDL 3.2.0.
  *
+ * @cat formatted-string
+ *
+ * @sa formatted-string
+ * @sa LogUnformatted()
  * @sa LogCategory.LogCritical
  * @sa LogCategory.LogDebug
  * @sa LogCategory.LogError
@@ -579,7 +644,8 @@
 template<class... ARGS>
 inline void Log(std::string_view fmt, ARGS&&... args)
 {
-  SDL_Log(fmt, args);
+  LOG_CATEGORY_APPLICATION.Log(
+    LOG_PRIORITY_INFO, fmt, std::forward<ARGS>(args)...);
 }
 
 /**
@@ -608,7 +674,7 @@
 template<class... ARGS>
 inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
 {
-  SDL_LogTrace(category, fmt, args);
+  category.LogTrace(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -637,7 +703,7 @@
                        std::string_view fmt,
                        ARGS&&... args)
 {
-  SDL_LogVerbose(category, fmt, args);
+  category.LogVerbose(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -665,7 +731,7 @@
 template<class... ARGS>
 inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
 {
-  SDL_LogDebug(category, fmt, args);
+  category.LogDebug(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -693,7 +759,7 @@
 template<class... ARGS>
 inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
 {
-  SDL_LogInfo(category, fmt, args);
+  category.LogInfo(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -721,7 +787,7 @@
 template<class... ARGS>
 inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
 {
-  SDL_LogWarn(category, fmt, args);
+  category.LogWarn(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -749,7 +815,7 @@
 template<class... ARGS>
 inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
 {
-  SDL_LogError(category, fmt, args);
+  category.LogError(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -779,7 +845,7 @@
                         std::string_view fmt,
                         ARGS&&... args)
 {
-  SDL_LogCritical(category, fmt, args);
+  category.LogCritical(fmt, std::forward<ARGS...>(args));
 }
 
 /**
@@ -811,16 +877,14 @@
                        std::string_view fmt,
                        ARGS... args)
 {
-  SDL_LogMessage(category, priority, fmt, args);
+  category.LogMessage(priority, fmt, std::forward<ARGS...>(args));
 }
 
 /**
- * Log a message with the specified category and priority.
+ * Log an unformatted message with LOG_CATEGORY_APPLICATION and
+ * LOG_PRIORITY_INFO.
  *
- * @param category the category of the message.
- * @param priority the priority of the message.
- * @param fmt a printf() style message format string.
- * @param ap a variable argument list.
+ * @param message string to output.
  *
  * @threadsafety It is safe to call this function from any thread.
  *
@@ -836,7 +900,10 @@
  * @sa LogCategory.LogVerbose
  * @sa LogCategory.LogWarn
  */
-inline void LogUnformatted(StringParam message) { SDL_LogMessageV(message); }
+inline void LogUnformatted(StringParam message)
+{
+  SDL_Log("%s", static_cast<const char*>(message));
+}
 
 /**
  * The prototype for the log output callback function.
@@ -862,13 +929,14 @@
  * is held so that this function is never called by more than one thread at
  * once.
  *
- * @param userdata what was passed as `userdata` to
- *                 SetLogOutputFunction().
  * @param category the category of the message.
  * @param priority the priority of the message.
  * @param message the message being output.
  *
  * @since This datatype is available since SDL 3.2.0.
+ *
+ * @cat listener-callback
+ *
  * @sa LogOutputFunction
  */
 using LogOutputCB = std::function<void(LogCategory, LogPriority, const char*)>;
@@ -882,8 +950,8 @@
  *
  * @since This function is available since SDL 3.2.0.
  *
- * @sa SetLogOutputFunction
- * @sa GetLogOutputFunction
+ * @sa SetLogOutputFunction()
+ * @sa GetLogOutputFunction()
  */
 inline LogOutputFunction GetDefaultLogOutputFunction()
 {
@@ -893,8 +961,7 @@
 /**
  * Get the current log output function.
  *
- * @param callback an LogOutputFunction filled in with the current log
- *                 callback.
+ * @param callback an LogOutputFunction filled in with the current log callback.
  * @param userdata a pointer filled in with the pointer that is passed to
  *                 `callback`.
  *
@@ -902,8 +969,8 @@
  *
  * @since This function is available since SDL 3.2.0.
  *
- * @sa GetDefaultLogOutputFunction
- * @sa SetLogOutputFunction
+ * @sa GetDefaultLogOutputFunction()
+ * @sa SetLogOutputFunction()
  */
 inline void GetLogOutputFunction(LogOutputFunction* callback, void** userdata)
 {
@@ -913,21 +980,33 @@
 /**
  * Get the current log output function.
  *
- * @param callback an LogOutputFunction filled in with the current log
- *                 callback.
- * @param userdata a pointer filled in with the pointer that is passed to
- *                 `callback`.
+ * @returns the LogOutputCB currently set
  *
  * @threadsafety It is safe to call this function from any thread.
  *
  * @since This function is available since SDL 3.2.0.
  *
+ * @cat listener-callback
+ *
+ * @sa listener-callback
  * @sa GetDefaultLogOutputFunction
  * @sa SetLogOutputFunction
  */
 inline LogOutputCB GetLogOutputFunction()
 {
-  static_assert(false, "Not implemented");
+  using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
+  LogOutputFunction cb;
+  void* userdata;
+  GetLogOutputFunction(&cb, &userdata);
+  if (userdata == nullptr) {
+    return [cb](LogCategory c, LogPriority p, StringParam m) {
+      cb(nullptr, c, p, m);
+    };
+  }
+  if (auto cb = Wrapper::at(userdata)) return cb;
+  return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
+    cb(userdata, c, p, m);
+  };
 }
 
 /**
@@ -942,33 +1021,54 @@
  *
  * @sa GetDefaultLogOutputFunction
  * @sa GetLogOutputFunction
+ * @sa ResetLogOutputFunction
  */
 inline void SetLogOutputFunction(LogOutputFunction callback, void* userdata)
 {
-  SDL_SetLogOutputFunction(callback, userdata);
+  UniqueCallbackWrapper<LogOutputCB>::erase();
+  return SDL_SetLogOutputFunction(callback, userdata);
 }
 
 /**
  * Replace the default log output function with one of your own.
  *
  * @param callback an LogOutputFunction to call instead of the default.
- * @param userdata a pointer that is passed to `callback`.
  *
  * @threadsafety It is safe to call this function from any thread.
  *
  * @since This function is available since SDL 3.2.0.
  *
+ * @cat listener-callback
+ *
+ * @sa listener-callback
  * @sa GetDefaultLogOutputFunction
  * @sa GetLogOutputFunction
+ * @sa ResetLogOutputFunction
  */
 inline void SetLogOutputFunction(LogOutputCB callback)
 {
-  static_assert(false, "Not implemented");
+  using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
+  SDL_SetLogOutputFunction(
+    [](
+      void* userdata, int category, LogPriority priority, const char* message) {
+      return Wrapper::Call(userdata, LogCategory{category}, priority, message);
+    },
+    Wrapper::Wrap(std::move(callback)));
 }
 
+/**
+ * Replace the current log output function with the default one
+ *
+ * @threadsafety It is safe to call this function from any thread.
+ *
+ * @since This function is available since SDL 3.2.0.
+ *
+ * @sa GetDefaultLogOutputFunction
+ * @sa GetLogOutputFunction
+ */
 inline void ResetLogOutputFunction()
 {
-  static_assert(false, "Not implemented");
+  return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
 }
 
 /// @}
