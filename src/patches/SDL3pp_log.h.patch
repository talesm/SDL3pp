13c13
<  * @defgroup CategoryLog Category Log
---
>  * @defgroup CategoryLog Log Handling
64a65,72
>  * @name LogPriorities
>  *
>  * The priorities assignable for a LogCategory.
>  *
>  * @{
>  */
> 
> /**
91a100,109
> /// @}
> 
> /**
>  * @name LogCategories
>  *
>  * The logging categories. see LogCategory for more info
>  *
>  * @{
>  */
> 
99a118,121
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
111c133
<   constexpr LogCategory(LogCategoryRaw category = {})
---
>   constexpr LogCategory(LogCategoryRaw category = SDL_LOG_CATEGORY_APPLICATION)
121c143,146
<   constexpr explicit LogCategory(int category) {}
---
>   constexpr explicit LogCategory(int category)
>     : m_category(SDL_LogCategory(category))
>   {
>   }
149d173
<    * @param category the category to assign a priority to.
178a203,222
>   /**
>    * Log an unformatted message with the specified priority.
>    *
>    * @param priority the priority of the message.
>    * @param message string to output.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SDL::Log()
>    * @sa Log()
>    * @sa LogCritical()
>    * @sa LogDebug()
>    * @sa LogError()
>    * @sa LogInfo()
>    * @sa LogTrace()
>    * @sa LogVerbose()
>    * @sa LogWarn()
>    */
181c225
<     static_assert(false, "Not implemented");
---
>     SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
185c229
<    * Log a message with the specified category and priority.
---
>    * Log a message with the specified priority.
187d230
<    * @param category the category of the message.
189,191c232,236
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
197c242,243
<    * @sa Log
---
>    * @cat formatted-string
>    *
212c258
<     SDL_LogMessage(m_category, priority, fmt, args);
---
>     LogUnformatted(priority, std::vformat(fmt, std::make_format_args(args))...);
218,222c264,268
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
<    *
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
227c273,274
<    * @sa Log
---
>    * @cat formatted-string
>    *
241c288
<     SDL_LogTrace(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_TRACE, fmt, std::forward<ARGS>(args)...);
247,250c294,298
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
256c304,305
<    * @sa Log
---
>    * @cat formatted-string
>    *
268c317
<     SDL_LogVerbose(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_VERBOSE, fmt, std::forward<ARGS>(args)...);
274,277c323,327
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
283c333,334
<    * @sa Log
---
>    * @cat formatted-string
>    *
296c347
<     SDL_LogDebug(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_DEBUG, fmt, std::forward<ARGS>(args)...);
302,305c353,357
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
311c363,364
<    * @sa Log
---
>    * @cat formatted-string
>    *
324c377
<     SDL_LogInfo(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_INFO, fmt, std::forward<ARGS>(args)...);
330,333c383,387
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
339c393,394
<    * @sa Log
---
>    * @cat formatted-string
>    *
352c407
<     SDL_LogWarn(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_WARN, fmt, std::forward<ARGS>(args)...);
358,361c413,417
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
367c423,424
<    * @sa Log
---
>    * @cat formatted-string
>    *
380c437
<     SDL_LogError(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_ERROR, fmt, std::forward<ARGS>(args)...);
386,389c443,447
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
395,402c453,462
<    * @sa Log
<    * @sa LogCategory.LogDebug
<    * @sa LogCategory.LogError
<    * @sa LogCategory.LogInfo
<    * @sa LogCategory.LogMessage
<    * @sa LogUnformatted
<    * @sa LogCategory.LogTrace
<    * @sa LogCategory.LogVerbose
---
>    * @cat formatted-string
>    *
>    * @sa formatted-string
>    * @sa LogCategory.LogDebug()
>    * @sa LogCategory.LogError()
>    * @sa LogCategory.LogInfo()
>    * @sa LogUnformatted()
>    * @sa LogCategory.LogUnformatted()
>    * @sa LogCategory.LogTrace()
>    * @sa LogCategory.LogVerbose()
408c468
<     SDL_LogCritical(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_CRITICAL, fmt, std::forward<ARGS>(args)...);
545c605
<  * @sa SetLogPriorities
---
>  * @sa LogCategory.SetLogPriorities
556,558c616,620
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
<  *            any.
---
>  * @param fmt a
>  *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>  *            style message format string.
>  * @param args additional parameters matching the `{}` tokens in the format
>  *             string, if any.
563a626,629
>  * @cat formatted-string
>  *
>  * @sa formatted-string
>  * @sa LogUnformatted()
577c643
<   SDL_Log(fmt, args);
---
>   LOG_CATEGORY_APPLICATION.LogInfo(fmt, std::forward<ARGS>(args)...);
606c672
<   SDL_LogTrace(category, fmt, args);
---
>   category.LogTrace(fmt, std::forward<ARGS>(args)...);
635c701
<   SDL_LogVerbose(category, fmt, args);
---
>   category.LogVerbose(fmt, std::forward<ARGS>(args)...);
663c729
<   SDL_LogDebug(category, fmt, args);
---
>   category.LogDebug(fmt, std::forward<ARGS>(args)...);
691c757
<   SDL_LogInfo(category, fmt, args);
---
>   category.LogInfo(fmt, std::forward<ARGS>(args)...);
719c785
<   SDL_LogWarn(category, fmt, args);
---
>   category.LogWarn(fmt, std::forward<ARGS>(args)...);
747c813
<   SDL_LogError(category, fmt, args);
---
>   category.LogError(fmt, std::forward<ARGS>(args)...);
777c843
<   SDL_LogCritical(category, fmt, args);
---
>   category.LogCritical(fmt, std::forward<ARGS>(args)...);
809c875
<   SDL_LogMessage(category, priority, fmt, args);
---
>   category.LogMessage(priority, fmt, std::forward<ARGS>(args)...);
813c879,880
<  * Log a message with the specified category and priority.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
815,818c882
<  * @param category the category of the message.
<  * @param priority the priority of the message.
<  * @param fmt a printf() style message format string.
<  * @param ap a variable argument list.
---
>  * @param message string to output.
834c898,901
< inline void LogUnformatted(StringParam message) { SDL_LogMessageV(message); }
---
> inline void LogUnformatted(StringParam message)
> {
>   SDL_Log("%s", static_cast<const char*>(message));
> }
860,861d926
<  * @param userdata what was passed as `userdata` to
<  *                 SetLogOutputFunction().
866a932,934
>  *
>  * @cat listener-callback
>  *
880,881c948,949
<  * @sa SetLogOutputFunction
<  * @sa GetLogOutputFunction
---
>  * @sa SetLogOutputFunction()
>  * @sa GetLogOutputFunction()
891,892c959
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
---
>  * @param callback an LogOutputFunction filled in with the current log callback.
900,901c967,968
<  * @sa GetDefaultLogOutputFunction
<  * @sa SetLogOutputFunction
---
>  * @sa GetDefaultLogOutputFunction()
>  * @sa SetLogOutputFunction()
911,914c978
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
<  * @param userdata a pointer filled in with the pointer that is passed to
<  *                 `callback`.
---
>  * @returns the LogOutputCB currently set
919a984,986
>  * @cat listener-callback
>  *
>  * @sa listener-callback
925c992,1004
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   LogOutputFunction cb;
>   void* userdata;
>   GetLogOutputFunction(&cb, &userdata);
>   if (userdata == nullptr) {
>     return [cb](LogCategory c, LogPriority p, StringParam m) {
>       cb(nullptr, c, p, m);
>     };
>   }
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
>     cb(userdata, c, p, m);
>   };
939a1019
>  * @sa ResetLogOutputFunction
943c1023,1024
<   SDL_SetLogOutputFunction(callback, userdata);
---
>   UniqueCallbackWrapper<LogOutputCB>::erase();
>   return SDL_SetLogOutputFunction(callback, userdata);
950d1030
<  * @param userdata a pointer that is passed to `callback`.
955a1036,1038
>  * @cat listener-callback
>  *
>  * @sa listener-callback
957a1041
>  * @sa ResetLogOutputFunction
961c1045,1051
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   SDL_SetLogOutputFunction(
>     [](
>       void* userdata, int category, LogPriority priority, const char* message) {
>       return Wrapper::Call(userdata, LogCategory{category}, priority, message);
>     },
>     Wrapper::Wrap(std::move(callback)));
963a1054,1063
> /**
>  * Replace the current log output function with the default one
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetDefaultLogOutputFunction
>  * @sa GetLogOutputFunction
>  */
966c1066
<   static_assert(false, "Not implemented");
---
>   return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
