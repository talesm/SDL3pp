13c13
<  * @defgroup CategoryLog Category Log
---
>  * @defgroup CategoryLog Log Handling
65a66,73
>  * @name LogPriorities
>  *
>  * The priorities assignable for a LogCategory.
>  *
>  * @{
>  */
> 
> /**
92a101,110
> /// @}
> 
> /**
>  * @name LogCategories
>  *
>  * The logging categories. see LogCategory for more info
>  *
>  * @{
>  */
> 
100a119,122
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
112c134
<   constexpr LogCategory(LogCategoryRaw category = {})
---
>   constexpr LogCategory(LogCategoryRaw category = SDL_LOG_CATEGORY_APPLICATION)
122c144,147
<   constexpr explicit LogCategory(int category) {}
---
>   constexpr explicit LogCategory(int category)
>     : m_category(SDL_LogCategory(category))
>   {
>   }
125c150
<   constexpr bool operator==(LogCategoryRaw category) const
---
>   constexpr bool operator==(LogCategory category) const
127c152
<     return m_category == category;
---
>     return m_category == category.m_category;
131c156
<   constexpr auto operator<=>(LogCategoryRaw category) const
---
>   constexpr auto operator<=>(LogCategory category) const
133c158
<     return m_category <=> category;
---
>     return m_category <=> category.m_category;
146d170
<    * @param category the category to assign a priority to.
162d185
<    * @param category the category to query.
172a196,215
>   /**
>    * Log an unformatted message with the specified priority.
>    *
>    * @param priority the priority of the message.
>    * @param message string to output.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SDL::Log()
>    * @sa Log()
>    * @sa LogCritical()
>    * @sa LogDebug()
>    * @sa LogError()
>    * @sa LogInfo()
>    * @sa LogTrace()
>    * @sa LogVerbose()
>    * @sa LogWarn()
>    */
175c218
<     static_assert(false, "Not implemented");
---
>     SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
179c222
<    * Log a message with the specified category and priority.
---
>    * Log a message with the specified priority.
181d223
<    * @param category the category of the message.
183,185c225,229
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
191c235,236
<    * @sa Log
---
>    * @cat formatted-string
>    *
209,213c254,258
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
<    *
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
218c263,264
<    * @sa Log
---
>    * @cat formatted-string
>    *
235,238c281,285
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
244c291,292
<    * @sa Log
---
>    * @cat formatted-string
>    *
259,262c307,311
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
268c317,318
<    * @sa Log
---
>    * @cat formatted-string
>    *
284,287c334,338
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
293c344,345
<    * @sa Log
---
>    * @cat formatted-string
>    *
309,312c361,365
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
318c371,372
<    * @sa Log
---
>    * @cat formatted-string
>    *
334,337c388,392
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
343c398,399
<    * @sa Log
---
>    * @cat formatted-string
>    *
359,362c415,419
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
368,375c425,434
<    * @sa Log
<    * @sa LogCategory.LogDebug
<    * @sa LogCategory.LogError
<    * @sa LogCategory.LogInfo
<    * @sa LogCategory.LogMessage
<    * @sa LogUnformatted
<    * @sa LogCategory.LogTrace
<    * @sa LogCategory.LogVerbose
---
>    * @cat formatted-string
>    *
>    * @sa formatted-string
>    * @sa LogCategory.LogDebug()
>    * @sa LogCategory.LogError()
>    * @sa LogCategory.LogInfo()
>    * @sa LogUnformatted()
>    * @sa LogCategory.LogUnformatted()
>    * @sa LogCategory.LogTrace()
>    * @sa LogCategory.LogVerbose()
534c593,594
<  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
536,538c596,598
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
<  *            any.
---
>  * @param category the category of the message.
>  * @param priority the priority of the message.
>  * @param message string to output.
543a604
>  * @sa Log
549d609
<  * @sa LogUnformatted
554,555c614,616
< template<class... ARGS>
< inline void Log(std::string_view fmt, ARGS&&... args)
---
> inline void LogUnformatted(LogCategory category,
>                            LogPriority priority,
>                            StringParam message)
557c618
<   SDL_Log(fmt, args);
---
>   SDL_LogMessage(category, priority, "%s", static_cast<const char*>(message));
561c622,623
<  * Log a message with LOG_PRIORITY_TRACE.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
563,566c625
<  * @param category the category of the message.
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the **fmt** string,
<  *            if any.
---
>  * @param message string to output.
578d636
<  * @sa LogUnformatted
583,584c641
< template<class... ARGS>
< inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogUnformatted(StringParam message)
586c643
<   SDL_LogTrace(category, fmt, args);
---
>   SDL_Log("%s", static_cast<const char*>(message));
588a646,672
> /**
>  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
>  *
>  * @param fmt a
>  *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>  *            style message format string.
>  * @param args additional parameters matching the `{}` tokens in the format
>  *             string, if any.
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @cat formatted-string
>  *
>  * @sa formatted-string
>  * @sa LogUnformatted()
>  * @sa LogCategory.LogCritical
>  * @sa LogCategory.LogDebug
>  * @sa LogCategory.LogError
>  * @sa LogCategory.LogInfo
>  * @sa LogCategory.LogMessage
>  * @sa LogUnformatted
>  * @sa LogCategory.LogTrace
>  * @sa LogCategory.LogVerbose
>  * @sa LogCategory.LogWarn
>  */
590c674
< inline void LogCategory::LogTrace(std::string_view fmt, ARGS&&... args) const
---
> inline void Log(std::string_view fmt, ARGS&&... args)
592c676
<   SDL::LogTrace(m_category, fmt, args);
---
>   LOG_CATEGORY_APPLICATION.LogInfo(fmt, std::forward<ARGS>(args)...);
596c680
<  * Log a message with LOG_PRIORITY_VERBOSE.
---
>  * Log a message with the specified category and priority.
598a683
>  * @param priority the priority of the message.
600c685
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
612d696
<  * @sa LogCategory.LogMessage
613a698,699
>  * @sa LogCategory.LogTrace
>  * @sa LogCategory.LogVerbose
617c703,704
< inline void LogVerbose(LogCategory category,
---
> inline void LogMessage(LogCategory category,
>                        LogPriority priority,
619c706
<                        ARGS&&... args)
---
>                        ARGS... args)
621c708,709
<   SDL_LogVerbose(category, fmt, args);
---
>   LogUnformatted(
>     category, priority, std::vformat(fmt, std::make_format_args(args...)));
625c713,715
< inline void LogCategory::LogVerbose(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogMessage(LogPriority priority,
>                                     std::string_view fmt,
>                                     ARGS... args) const
627c717
<   SDL::LogVerbose(m_category, fmt, args);
---
>   SDL::LogMessage(m_category, priority, fmt, args...);
631c721
<  * Log a message with LOG_PRIORITY_DEBUG.
---
>  * Log a message with LOG_PRIORITY_TRACE.
635c725
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
643a734
>  * @sa LogCategory.LogDebug
653c744
< inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
655c746
<   SDL_LogDebug(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_TRACE, fmt, args...);
659c750
< inline void LogCategory::LogDebug(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogTrace(std::string_view fmt, ARGS&&... args) const
661c752
<   SDL::LogDebug(m_category, fmt, args);
---
>   SDL::LogTrace(m_category, fmt, args...);
665c756
<  * Log a message with LOG_PRIORITY_INFO.
---
>  * Log a message with LOG_PRIORITY_VERBOSE.
669c760
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
679a771
>  * @sa LogCategory.LogInfo
682,683d773
<  * @sa LogCategory.LogTrace
<  * @sa LogCategory.LogVerbose
687c777,779
< inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogVerbose(LogCategory category,
>                        std::string_view fmt,
>                        ARGS&&... args)
689c781
<   SDL_LogInfo(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_VERBOSE, fmt, args...);
693c785
< inline void LogCategory::LogInfo(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogVerbose(std::string_view fmt, ARGS&&... args) const
695c787
<   SDL::LogInfo(m_category, fmt, args);
---
>   SDL::LogVerbose(m_category, fmt, args...);
699c791
<  * Log a message with LOG_PRIORITY_WARN.
---
>  * Log a message with LOG_PRIORITY_DEBUG.
703c795
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
712d803
<  * @sa LogCategory.LogDebug
718a810
>  * @sa LogCategory.LogWarn
721c813
< inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
723c815
<   SDL_LogWarn(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_DEBUG, fmt, args...);
727c819
< inline void LogCategory::LogWarn(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogDebug(std::string_view fmt, ARGS&&... args) const
729c821
<   SDL::LogWarn(m_category, fmt, args);
---
>   SDL::LogDebug(m_category, fmt, args...);
733c825
<  * Log a message with LOG_PRIORITY_ERROR.
---
>  * Log a message with LOG_PRIORITY_INFO.
737c829
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
747c839
<  * @sa LogCategory.LogInfo
---
>  * @sa LogCategory.LogError
755c847
< inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
757c849
<   SDL_LogError(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_INFO, fmt, args...);
761c853
< inline void LogCategory::LogError(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogInfo(std::string_view fmt, ARGS&&... args) const
763c855
<   SDL::LogError(m_category, fmt, args);
---
>   SDL::LogInfo(m_category, fmt, args...);
767c859
<  * Log a message with LOG_PRIORITY_CRITICAL.
---
>  * Log a message with LOG_PRIORITY_WARN.
771c863
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
778a871
>  * @sa LogCategory.LogCritical
786d878
<  * @sa LogCategory.LogWarn
789,791c881
< inline void LogCritical(LogCategory category,
<                         std::string_view fmt,
<                         ARGS&&... args)
---
> inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
793c883
<   SDL_LogCritical(category, fmt, args);
---
>   LogMessage(category, SDL_LOG_PRIORITY_WARN, fmt, args...);
797c887
< inline void LogCategory::LogCritical(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogWarn(std::string_view fmt, ARGS&&... args) const
799c889
<   SDL::LogCritical(m_category, fmt, args);
---
>   SDL::LogWarn(m_category, fmt, args...);
803c893
<  * Log a message with the specified category and priority.
---
>  * Log a message with LOG_PRIORITY_ERROR.
806d895
<  * @param priority the priority of the message.
808c897
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
818d906
<  * @sa LogCategory.LogError
819a908
>  * @sa LogCategory.LogMessage
826,829c915
< inline void LogMessage(LogCategory category,
<                        LogPriority priority,
<                        std::string_view fmt,
<                        ARGS... args)
---
> inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
831c917
<   SDL_LogMessage(category, priority, fmt, args);
---
>   LogMessage(category, SDL_LOG_PRIORITY_ERROR, fmt, args...);
835,837c921
< inline void LogCategory::LogMessage(LogPriority priority,
<                                     std::string_view fmt,
<                                     ARGS... args) const
---
> inline void LogCategory::LogError(std::string_view fmt, ARGS&&... args) const
839c923
<   SDL::LogMessage(m_category, priority, fmt, args);
---
>   SDL::LogError(m_category, fmt, args...);
843c927
<  * Log a message with the specified category and priority.
---
>  * Log a message with LOG_PRIORITY_CRITICAL.
846d929
<  * @param priority the priority of the message.
848c931,932
<  * @param ap a variable argument list.
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
>  *            if any.
855d938
<  * @sa LogCategory.LogCritical
859a943
>  * @sa LogUnformatted
864c948,960
< inline void LogUnformatted(StringParam message) { SDL_LogMessageV(message); }
---
> template<class... ARGS>
> inline void LogCritical(LogCategory category,
>                         std::string_view fmt,
>                         ARGS&&... args)
> {
>   LogMessage(category, SDL_LOG_PRIORITY_CRITICAL, fmt, args...);
> }
> 
> template<class... ARGS>
> inline void LogCategory::LogCritical(std::string_view fmt, ARGS&&... args) const
> {
>   SDL::LogCritical(m_category, fmt, args...);
> }
890,891d985
<  * @param userdata what was passed as `userdata` to
<  *                 SetLogOutputFunction().
896a991,993
>  *
>  * @cat listener-callback
>  *
921,922c1018
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
---
>  * @param callback an LogOutputFunction filled in with the current log callback.
941,944c1037
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
<  * @param userdata a pointer filled in with the pointer that is passed to
<  *                 `callback`.
---
>  * @returns the LogOutputCB currently set
949a1043,1045
>  * @cat listener-callback
>  *
>  * @sa listener-callback
955c1051,1063
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   LogOutputFunction cb;
>   void* userdata;
>   GetLogOutputFunction(&cb, &userdata);
>   if (userdata == nullptr) {
>     return [cb](LogCategory c, LogPriority p, StringParam m) {
>       cb(nullptr, c, p, m);
>     };
>   }
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
>     cb(userdata, c, p, m);
>   };
969a1078
>  * @sa ResetLogOutputFunction
973c1082,1083
<   SDL_SetLogOutputFunction(callback, userdata);
---
>   UniqueCallbackWrapper<LogOutputCB>::erase();
>   return SDL_SetLogOutputFunction(callback, userdata);
980d1089
<  * @param userdata a pointer that is passed to `callback`.
985a1095,1097
>  * @cat listener-callback
>  *
>  * @sa listener-callback
987a1100
>  * @sa ResetLogOutputFunction
991c1104,1110
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   SDL_SetLogOutputFunction(
>     [](
>       void* userdata, int category, LogPriority priority, const char* message) {
>       return Wrapper::Call(userdata, LogCategory{category}, priority, message);
>     },
>     Wrapper::Wrap(std::move(callback)));
993a1113,1122
> /**
>  * Replace the current log output function with the default one
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetDefaultLogOutputFunction
>  * @sa GetLogOutputFunction
>  */
996c1125
<   static_assert(false, "Not implemented");
---
>   return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
