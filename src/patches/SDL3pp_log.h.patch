13c13
<  * @defgroup CategoryLog Category Log
---
>  * @defgroup CategoryLog Log Handling
65a66,73
>  * @name LogPriorities
>  *
>  * The priorities assignable for a LogCategory.
>  *
>  * @{
>  */
> 
> /**
92a101,110
> /// @}
> 
> /**
>  * @name LogCategories
>  *
>  * The logging categories. see LogCategory for more info
>  *
>  * @{
>  */
> 
100a119,122
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
112c134
<   constexpr LogCategory(LogCategoryRaw category = {})
---
>   constexpr LogCategory(LogCategoryRaw category = SDL_LOG_CATEGORY_APPLICATION)
122c144,147
<   constexpr explicit LogCategory(int category) {}
---
>   constexpr explicit LogCategory(int category)
>     : m_category(SDL_LogCategory(category))
>   {
>   }
134d158
<    * @param category the category to assign a priority to.
150d173
<    * @param category the category to query.
160a184,203
>   /**
>    * Log an unformatted message with the specified priority.
>    *
>    * @param priority the priority of the message.
>    * @param message string to output.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SDL::Log()
>    * @sa Log()
>    * @sa LogCritical()
>    * @sa LogDebug()
>    * @sa LogError()
>    * @sa LogInfo()
>    * @sa LogTrace()
>    * @sa LogVerbose()
>    * @sa LogWarn()
>    */
163c206
<     static_assert(false, "Not implemented");
---
>     SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
167c210
<    * Log a message with the specified category and priority.
---
>    * Log a message with the specified priority.
169d211
<    * @param category the category of the message.
171,173c213,217
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
179c223,224
<    * @sa Log
---
>    * @cat formatted-string
>    *
197,201c242,246
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
<    *
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
206c251,252
<    * @sa Log
---
>    * @cat formatted-string
>    *
223,226c269,273
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
232c279,280
<    * @sa Log
---
>    * @cat formatted-string
>    *
247,250c295,299
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
256c305,306
<    * @sa Log
---
>    * @cat formatted-string
>    *
272,275c322,326
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
281c332,333
<    * @sa Log
---
>    * @cat formatted-string
>    *
297,300c349,353
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
306c359,360
<    * @sa Log
---
>    * @cat formatted-string
>    *
322,325c376,380
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
331c386,387
<    * @sa Log
---
>    * @cat formatted-string
>    *
347,350c403,407
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
356,363c413,422
<    * @sa Log
<    * @sa LogCategory.LogDebug
<    * @sa LogCategory.LogError
<    * @sa LogCategory.LogInfo
<    * @sa LogCategory.LogMessage
<    * @sa LogUnformatted
<    * @sa LogCategory.LogTrace
<    * @sa LogCategory.LogVerbose
---
>    * @cat formatted-string
>    *
>    * @sa formatted-string
>    * @sa LogCategory.LogDebug()
>    * @sa LogCategory.LogError()
>    * @sa LogCategory.LogInfo()
>    * @sa LogUnformatted()
>    * @sa LogCategory.LogUnformatted()
>    * @sa LogCategory.LogTrace()
>    * @sa LogCategory.LogVerbose()
522c581,582
<  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
524,526c584,586
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
<  *            any.
---
>  * @param category the category of the message.
>  * @param priority the priority of the message.
>  * @param message string to output.
531a592
>  * @sa Log
537d597
<  * @sa LogUnformatted
542,543c602,604
< template<class... ARGS>
< inline void Log(std::string_view fmt, ARGS&&... args)
---
> inline void LogUnformatted(LogCategory category,
>                            LogPriority priority,
>                            StringParam message)
545c606
<   SDL_Log(fmt, args);
---
>   SDL_LogMessage(category, priority, "%s", static_cast<const char*>(message));
549c610,611
<  * Log a message with LOG_PRIORITY_TRACE.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
551,554c613
<  * @param category the category of the message.
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the **fmt** string,
<  *            if any.
---
>  * @param message string to output.
566d624
<  * @sa LogUnformatted
571,572c629
< template<class... ARGS>
< inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogUnformatted(StringParam message)
574c631
<   SDL_LogTrace(category, fmt, args);
---
>   SDL_Log("%s", static_cast<const char*>(message));
576a634,660
> /**
>  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
>  *
>  * @param fmt a
>  *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>  *            style message format string.
>  * @param args additional parameters matching the `{}` tokens in the format
>  *             string, if any.
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @cat formatted-string
>  *
>  * @sa formatted-string
>  * @sa LogUnformatted()
>  * @sa LogCategory.LogCritical
>  * @sa LogCategory.LogDebug
>  * @sa LogCategory.LogError
>  * @sa LogCategory.LogInfo
>  * @sa LogCategory.LogMessage
>  * @sa LogUnformatted
>  * @sa LogCategory.LogTrace
>  * @sa LogCategory.LogVerbose
>  * @sa LogCategory.LogWarn
>  */
578c662
< inline void LogCategory::LogTrace(std::string_view fmt, ARGS&&... args) const
---
> inline void Log(std::string_view fmt, ARGS&&... args)
580c664
<   SDL::LogTrace(m_category, fmt, args);
---
>   LOG_CATEGORY_APPLICATION.LogInfo(fmt, std::forward<ARGS>(args)...);
584c668
<  * Log a message with LOG_PRIORITY_VERBOSE.
---
>  * Log a message with the specified category and priority.
586a671
>  * @param priority the priority of the message.
588c673
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
600d684
<  * @sa LogCategory.LogMessage
601a686,687
>  * @sa LogCategory.LogTrace
>  * @sa LogCategory.LogVerbose
605c691,692
< inline void LogVerbose(LogCategory category,
---
> inline void LogMessage(LogCategory category,
>                        LogPriority priority,
607c694
<                        ARGS&&... args)
---
>                        ARGS... args)
609c696,697
<   SDL_LogVerbose(category, fmt, args);
---
>   LogUnformatted(
>     category, priority, std::vformat(fmt, std::make_format_args(args...)));
613c701,703
< inline void LogCategory::LogVerbose(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogMessage(LogPriority priority,
>                                     std::string_view fmt,
>                                     ARGS... args) const
615c705
<   SDL::LogVerbose(m_category, fmt, args);
---
>   SDL::LogMessage(m_category, priority, fmt, args...);
619c709
<  * Log a message with LOG_PRIORITY_DEBUG.
---
>  * Log a message with LOG_PRIORITY_TRACE.
623c713
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
631a722
>  * @sa LogCategory.LogDebug
641c732
< inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
643c734
<   SDL_LogDebug(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_TRACE, fmt, args...);
647c738
< inline void LogCategory::LogDebug(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogTrace(std::string_view fmt, ARGS&&... args) const
649c740
<   SDL::LogDebug(m_category, fmt, args);
---
>   SDL::LogTrace(m_category, fmt, args...);
653c744
<  * Log a message with LOG_PRIORITY_INFO.
---
>  * Log a message with LOG_PRIORITY_VERBOSE.
657c748
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
667a759
>  * @sa LogCategory.LogInfo
670,671d761
<  * @sa LogCategory.LogTrace
<  * @sa LogCategory.LogVerbose
675c765,767
< inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogVerbose(LogCategory category,
>                        std::string_view fmt,
>                        ARGS&&... args)
677c769
<   SDL_LogInfo(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_VERBOSE, fmt, args...);
681c773
< inline void LogCategory::LogInfo(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogVerbose(std::string_view fmt, ARGS&&... args) const
683c775
<   SDL::LogInfo(m_category, fmt, args);
---
>   SDL::LogVerbose(m_category, fmt, args...);
687c779
<  * Log a message with LOG_PRIORITY_WARN.
---
>  * Log a message with LOG_PRIORITY_DEBUG.
691c783
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
700d791
<  * @sa LogCategory.LogDebug
706a798
>  * @sa LogCategory.LogWarn
709c801
< inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
711c803
<   SDL_LogWarn(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_DEBUG, fmt, args...);
715c807
< inline void LogCategory::LogWarn(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogDebug(std::string_view fmt, ARGS&&... args) const
717c809
<   SDL::LogWarn(m_category, fmt, args);
---
>   SDL::LogDebug(m_category, fmt, args...);
721c813
<  * Log a message with LOG_PRIORITY_ERROR.
---
>  * Log a message with LOG_PRIORITY_INFO.
725c817
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
735c827
<  * @sa LogCategory.LogInfo
---
>  * @sa LogCategory.LogError
743c835
< inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
745c837
<   SDL_LogError(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_INFO, fmt, args...);
749c841
< inline void LogCategory::LogError(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogInfo(std::string_view fmt, ARGS&&... args) const
751c843
<   SDL::LogError(m_category, fmt, args);
---
>   SDL::LogInfo(m_category, fmt, args...);
755c847
<  * Log a message with LOG_PRIORITY_CRITICAL.
---
>  * Log a message with LOG_PRIORITY_WARN.
759c851
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
766a859
>  * @sa LogCategory.LogCritical
774d866
<  * @sa LogCategory.LogWarn
777,779c869
< inline void LogCritical(LogCategory category,
<                         std::string_view fmt,
<                         ARGS&&... args)
---
> inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
781c871
<   SDL_LogCritical(category, fmt, args);
---
>   LogMessage(category, SDL_LOG_PRIORITY_WARN, fmt, args...);
785c875
< inline void LogCategory::LogCritical(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogWarn(std::string_view fmt, ARGS&&... args) const
787c877
<   SDL::LogCritical(m_category, fmt, args);
---
>   SDL::LogWarn(m_category, fmt, args...);
791c881
<  * Log a message with the specified category and priority.
---
>  * Log a message with LOG_PRIORITY_ERROR.
794d883
<  * @param priority the priority of the message.
796c885
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
806d894
<  * @sa LogCategory.LogError
807a896
>  * @sa LogCategory.LogMessage
814,817c903
< inline void LogMessage(LogCategory category,
<                        LogPriority priority,
<                        std::string_view fmt,
<                        ARGS... args)
---
> inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
819c905
<   SDL_LogMessage(category, priority, fmt, args);
---
>   LogMessage(category, SDL_LOG_PRIORITY_ERROR, fmt, args...);
823,825c909
< inline void LogCategory::LogMessage(LogPriority priority,
<                                     std::string_view fmt,
<                                     ARGS... args) const
---
> inline void LogCategory::LogError(std::string_view fmt, ARGS&&... args) const
827c911
<   SDL::LogMessage(m_category, priority, fmt, args);
---
>   SDL::LogError(m_category, fmt, args...);
831c915
<  * Log a message with the specified category and priority.
---
>  * Log a message with LOG_PRIORITY_CRITICAL.
834d917
<  * @param priority the priority of the message.
836c919,920
<  * @param ap a variable argument list.
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
>  *            if any.
843d926
<  * @sa LogCategory.LogCritical
847a931
>  * @sa LogUnformatted
852c936,948
< inline void LogUnformatted(StringParam message) { SDL_LogMessageV(message); }
---
> template<class... ARGS>
> inline void LogCritical(LogCategory category,
>                         std::string_view fmt,
>                         ARGS&&... args)
> {
>   LogMessage(category, SDL_LOG_PRIORITY_CRITICAL, fmt, args...);
> }
> 
> template<class... ARGS>
> inline void LogCategory::LogCritical(std::string_view fmt, ARGS&&... args) const
> {
>   SDL::LogCritical(m_category, fmt, args...);
> }
878,879d973
<  * @param userdata what was passed as `userdata` to
<  *                 SetLogOutputFunction().
884a979,981
>  *
>  * @cat listener-callback
>  *
909,910c1006
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
---
>  * @param callback an LogOutputFunction filled in with the current log callback.
929,932c1025
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
<  * @param userdata a pointer filled in with the pointer that is passed to
<  *                 `callback`.
---
>  * @returns the LogOutputCB currently set
937a1031,1033
>  * @cat listener-callback
>  *
>  * @sa listener-callback
943c1039,1051
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   LogOutputFunction cb;
>   void* userdata;
>   GetLogOutputFunction(&cb, &userdata);
>   if (userdata == nullptr) {
>     return [cb](LogCategory c, LogPriority p, StringParam m) {
>       cb(nullptr, c, p, m);
>     };
>   }
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
>     cb(userdata, c, p, m);
>   };
957a1066
>  * @sa ResetLogOutputFunction
961c1070,1071
<   SDL_SetLogOutputFunction(callback, userdata);
---
>   UniqueCallbackWrapper<LogOutputCB>::erase();
>   return SDL_SetLogOutputFunction(callback, userdata);
968d1077
<  * @param userdata a pointer that is passed to `callback`.
973a1083,1085
>  * @cat listener-callback
>  *
>  * @sa listener-callback
975a1088
>  * @sa ResetLogOutputFunction
979c1092,1098
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   SDL_SetLogOutputFunction(
>     [](
>       void* userdata, int category, LogPriority priority, const char* message) {
>       return Wrapper::Call(userdata, LogCategory{category}, priority, message);
>     },
>     Wrapper::Wrap(std::move(callback)));
981a1101,1110
> /**
>  * Replace the current log output function with the default one
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetDefaultLogOutputFunction
>  * @sa GetLogOutputFunction
>  */
984c1113
<   static_assert(false, "Not implemented");
---
>   return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
