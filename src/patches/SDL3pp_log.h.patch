13c13
<  * @defgroup CategoryLog Category Log
---
>  * @defgroup CategoryLog Log Handling
64a65,72
>  * @name LogPriorities
>  *
>  * The priorities assignable for a LogCategory.
>  *
>  * @{
>  */
> 
> /**
91a100,109
> /// @}
> 
> /**
>  * @name LogCategories
>  *
>  * The logging categories. see LogCategory for more info
>  *
>  * @{
>  */
> 
99a118,121
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
111c133
<   constexpr LogCategory(LogCategoryRaw category = {})
---
>   constexpr LogCategory(LogCategoryRaw category = SDL_LOG_CATEGORY_APPLICATION)
121c143,146
<   constexpr explicit LogCategory(int category) {}
---
>   constexpr explicit LogCategory(int category)
>     : m_category(SDL_LogCategory(category))
>   {
>   }
153d177
<    * @param category the category to assign a priority to.
182a207,226
>   /**
>    * Log an unformatted message with the specified priority.
>    *
>    * @param priority the priority of the message.
>    * @param message string to output.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SDL::Log()
>    * @sa Log()
>    * @sa LogCritical()
>    * @sa LogDebug()
>    * @sa LogError()
>    * @sa LogInfo()
>    * @sa LogTrace()
>    * @sa LogVerbose()
>    * @sa LogWarn()
>    */
185c229
<     static_assert(false, "Not implemented");
---
>     SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
189c233
<    * Log a message with the specified category and priority.
---
>    * Log a message with the specified priority.
191d234
<    * @param category the category of the message.
193,195c236,240
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
201c246,247
<    * @sa Log
---
>    * @cat formatted-string
>    *
216c262
<     SDL_LogMessage(m_category, priority, fmt, args);
---
>     LogUnformatted(priority, std::vformat(fmt, std::make_format_args(args))...);
222,226c268,272
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
<    *
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
231c277,278
<    * @sa Log
---
>    * @cat formatted-string
>    *
245c292
<     SDL_LogTrace(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_TRACE, fmt, std::forward<ARGS>(args)...);
251,254c298,302
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
260c308,309
<    * @sa Log
---
>    * @cat formatted-string
>    *
272c321
<     SDL_LogVerbose(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_VERBOSE, fmt, std::forward<ARGS>(args)...);
278,281c327,331
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
287c337,338
<    * @sa Log
---
>    * @cat formatted-string
>    *
300c351
<     SDL_LogDebug(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_DEBUG, fmt, std::forward<ARGS>(args)...);
306,309c357,361
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
315c367,368
<    * @sa Log
---
>    * @cat formatted-string
>    *
328c381
<     SDL_LogInfo(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_INFO, fmt, std::forward<ARGS>(args)...);
334,337c387,391
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
343c397,398
<    * @sa Log
---
>    * @cat formatted-string
>    *
356c411
<     SDL_LogWarn(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_WARN, fmt, std::forward<ARGS>(args)...);
362,365c417,421
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
371c427,428
<    * @sa Log
---
>    * @cat formatted-string
>    *
384c441
<     SDL_LogError(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_ERROR, fmt, std::forward<ARGS>(args)...);
390,393c447,451
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
399,406c457,466
<    * @sa Log
<    * @sa LogCategory.LogDebug
<    * @sa LogCategory.LogError
<    * @sa LogCategory.LogInfo
<    * @sa LogCategory.LogMessage
<    * @sa LogUnformatted
<    * @sa LogCategory.LogTrace
<    * @sa LogCategory.LogVerbose
---
>    * @cat formatted-string
>    *
>    * @sa formatted-string
>    * @sa LogCategory.LogDebug()
>    * @sa LogCategory.LogError()
>    * @sa LogCategory.LogInfo()
>    * @sa LogUnformatted()
>    * @sa LogCategory.LogUnformatted()
>    * @sa LogCategory.LogTrace()
>    * @sa LogCategory.LogVerbose()
412c472
<     SDL_LogCritical(m_category, fmt, args);
---
>     LogMessage(SDL_LOG_PRIORITY_CRITICAL, fmt, std::forward<ARGS>(args)...);
549c609
<  * @sa SetLogPriorities
---
>  * @sa LogCategory.SetLogPriorities
560,562c620,624
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
<  *            any.
---
>  * @param fmt a
>  *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>  *            style message format string.
>  * @param args additional parameters matching the `{}` tokens in the format
>  *             string, if any.
567a630,633
>  * @cat formatted-string
>  *
>  * @sa formatted-string
>  * @sa LogUnformatted()
581c647
<   SDL_Log(fmt, args);
---
>   LOG_CATEGORY_APPLICATION.LogInfo(fmt, std::forward<ARGS>(args)...);
610c676
<   SDL_LogTrace(category, fmt, args);
---
>   category.LogTrace(fmt, std::forward<ARGS>(args)...);
639c705
<   SDL_LogVerbose(category, fmt, args);
---
>   category.LogVerbose(fmt, std::forward<ARGS>(args)...);
667c733
<   SDL_LogDebug(category, fmt, args);
---
>   category.LogDebug(fmt, std::forward<ARGS>(args)...);
695c761
<   SDL_LogInfo(category, fmt, args);
---
>   category.LogInfo(fmt, std::forward<ARGS>(args)...);
723c789
<   SDL_LogWarn(category, fmt, args);
---
>   category.LogWarn(fmt, std::forward<ARGS>(args)...);
751c817
<   SDL_LogError(category, fmt, args);
---
>   category.LogError(fmt, std::forward<ARGS>(args)...);
781c847
<   SDL_LogCritical(category, fmt, args);
---
>   category.LogCritical(fmt, std::forward<ARGS>(args)...);
813c879
<   SDL_LogMessage(category, priority, fmt, args);
---
>   category.LogMessage(priority, fmt, std::forward<ARGS>(args)...);
817c883,884
<  * Log a message with the specified category and priority.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
819,822c886
<  * @param category the category of the message.
<  * @param priority the priority of the message.
<  * @param fmt a printf() style message format string.
<  * @param ap a variable argument list.
---
>  * @param message string to output.
838c902,905
< inline void LogUnformatted(StringParam message) { SDL_LogMessageV(message); }
---
> inline void LogUnformatted(StringParam message)
> {
>   SDL_Log("%s", static_cast<const char*>(message));
> }
864,865d930
<  * @param userdata what was passed as `userdata` to
<  *                 SetLogOutputFunction().
870a936,938
>  *
>  * @cat listener-callback
>  *
884,885c952,953
<  * @sa SetLogOutputFunction
<  * @sa GetLogOutputFunction
---
>  * @sa SetLogOutputFunction()
>  * @sa GetLogOutputFunction()
895,896c963
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
---
>  * @param callback an LogOutputFunction filled in with the current log callback.
904,905c971,972
<  * @sa GetDefaultLogOutputFunction
<  * @sa SetLogOutputFunction
---
>  * @sa GetDefaultLogOutputFunction()
>  * @sa SetLogOutputFunction()
915,918c982
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
<  * @param userdata a pointer filled in with the pointer that is passed to
<  *                 `callback`.
---
>  * @returns the LogOutputCB currently set
923a988,990
>  * @cat listener-callback
>  *
>  * @sa listener-callback
929c996,1008
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   LogOutputFunction cb;
>   void* userdata;
>   GetLogOutputFunction(&cb, &userdata);
>   if (userdata == nullptr) {
>     return [cb](LogCategory c, LogPriority p, StringParam m) {
>       cb(nullptr, c, p, m);
>     };
>   }
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
>     cb(userdata, c, p, m);
>   };
943a1023
>  * @sa ResetLogOutputFunction
947c1027,1028
<   SDL_SetLogOutputFunction(callback, userdata);
---
>   UniqueCallbackWrapper<LogOutputCB>::erase();
>   return SDL_SetLogOutputFunction(callback, userdata);
954d1034
<  * @param userdata a pointer that is passed to `callback`.
959a1040,1042
>  * @cat listener-callback
>  *
>  * @sa listener-callback
961a1045
>  * @sa ResetLogOutputFunction
965c1049,1055
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   SDL_SetLogOutputFunction(
>     [](
>       void* userdata, int category, LogPriority priority, const char* message) {
>       return Wrapper::Call(userdata, LogCategory{category}, priority, message);
>     },
>     Wrapper::Wrap(std::move(callback)));
967a1058,1067
> /**
>  * Replace the current log output function with the default one
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetDefaultLogOutputFunction
>  * @sa GetLogOutputFunction
>  */
970c1070
<   static_assert(false, "Not implemented");
---
>   return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
