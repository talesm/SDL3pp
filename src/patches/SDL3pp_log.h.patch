13c13
<  * @defgroup CategoryLog Category Log
---
>  * @defgroup CategoryLog Log Handling
68a69,76
>  * @name LogPriorities
>  *
>  * The priorities assignable for a LogCategory.
>  *
>  * @{
>  */
> 
> /**
95a104,113
> /// @}
> 
> /**
>  * @name LogCategories
>  *
>  * The logging categories. see LogCategory for more info
>  *
>  * @{
>  */
> 
103a122,125
>  *
>  * @cat wrap-state
>  *
>  * @sa wrap-state
115c137
<   constexpr LogCategory(LogCategoryRaw category = {})
---
>   constexpr LogCategory(LogCategoryRaw category = SDL_LOG_CATEGORY_APPLICATION)
125c147,150
<   constexpr explicit LogCategory(int category) {}
---
>   constexpr explicit LogCategory(int category)
>     : m_category(SDL_LogCategory(category))
>   {
>   }
137d161
<    * @param category the category to assign a priority to.
153d176
<    * @param category the category to query.
163a187,206
>   /**
>    * Log an unformatted message with the specified priority.
>    *
>    * @param priority the priority of the message.
>    * @param message string to output.
>    *
>    * @threadsafety It is safe to call this function from any thread.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa SDL::Log()
>    * @sa Log()
>    * @sa LogCritical()
>    * @sa LogDebug()
>    * @sa LogError()
>    * @sa LogInfo()
>    * @sa LogTrace()
>    * @sa LogVerbose()
>    * @sa LogWarn()
>    */
166c209
<     static_assert(false, "Not implemented");
---
>     SDL_LogMessage(m_category, priority, "%s", (const char*)(message));
170c213
<    * Log a message with the specified category and priority.
---
>    * Log a message with the specified priority.
172d214
<    * @param category the category of the message.
174,176c216,220
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
182c226,227
<    * @sa Log
---
>    * @cat formatted-string
>    *
200,204c245,249
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
<    *
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
209c254,255
<    * @sa Log
---
>    * @cat formatted-string
>    *
225,228c271,275
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
234c281,282
<    * @sa Log
---
>    * @cat formatted-string
>    *
249,252c297,301
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
258c307,308
<    * @sa Log
---
>    * @cat formatted-string
>    *
274,277c324,328
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
283c334,335
<    * @sa Log
---
>    * @cat formatted-string
>    *
299,302c351,355
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
308c361,362
<    * @sa Log
---
>    * @cat formatted-string
>    *
324,327c378,382
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
333c388,389
<    * @sa Log
---
>    * @cat formatted-string
>    *
349,352c405,409
<    * @param category the category of the message.
<    * @param fmt a printf() style message format string.
<    * @param ... additional parameters matching % tokens in the **fmt** string,
<    *            if any.
---
>    * @param fmt a
>    * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>    * style message format string.
>    * @param args additional parameters matching the `{}` tokens in the format
>    * string, if any.
358,365c415,424
<    * @sa Log
<    * @sa LogCategory.LogDebug
<    * @sa LogCategory.LogError
<    * @sa LogCategory.LogInfo
<    * @sa LogCategory.LogMessage
<    * @sa LogUnformatted
<    * @sa LogCategory.LogTrace
<    * @sa LogCategory.LogVerbose
---
>    * @cat formatted-string
>    *
>    * @sa formatted-string
>    * @sa LogCategory.LogDebug()
>    * @sa LogCategory.LogError()
>    * @sa LogCategory.LogInfo()
>    * @sa LogUnformatted()
>    * @sa LogCategory.LogUnformatted()
>    * @sa LogCategory.LogTrace()
>    * @sa LogCategory.LogVerbose()
527c586,587
<  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
529,531c589,591
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
<  *            any.
---
>  * @param category the category of the message.
>  * @param priority the priority of the message.
>  * @param message string to output.
536a597
>  * @sa Log
542d602
<  * @sa LogUnformatted
547,548c607,609
< template<class... ARGS>
< inline void Log(std::string_view fmt, ARGS&&... args)
---
> inline void LogUnformatted(LogCategory category,
>                            LogPriority priority,
>                            StringParam message)
550c611
<   SDL_Log(fmt, args);
---
>   SDL_LogMessage(category, priority, "%s", static_cast<const char*>(message));
554c615,616
<  * Log a message with LOG_PRIORITY_TRACE.
---
>  * Log an unformatted message with LOG_CATEGORY_APPLICATION and
>  * LOG_PRIORITY_INFO.
556,559c618
<  * @param category the category of the message.
<  * @param fmt a printf() style message format string.
<  * @param ... additional parameters matching % tokens in the **fmt** string,
<  *            if any.
---
>  * @param message string to output.
571d629
<  * @sa LogUnformatted
575,576c633
< template<class... ARGS>
< inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogUnformatted(StringParam message)
578c635
<   SDL_LogTrace(category, fmt, args);
---
>   SDL_Log("%s", static_cast<const char*>(message));
580a638,664
> /**
>  * Log a message with LOG_CATEGORY_APPLICATION and LOG_PRIORITY_INFO.
>  *
>  * @param fmt a
>  *            [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>  *            style message format string.
>  * @param args additional parameters matching the `{}` tokens in the format
>  *             string, if any.
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @cat formatted-string
>  *
>  * @sa formatted-string
>  * @sa LogUnformatted()
>  * @sa LogCategory.LogCritical
>  * @sa LogCategory.LogDebug
>  * @sa LogCategory.LogError
>  * @sa LogCategory.LogInfo
>  * @sa LogCategory.LogMessage
>  * @sa LogUnformatted
>  * @sa LogCategory.LogTrace
>  * @sa LogCategory.LogVerbose
>  * @sa LogCategory.LogWarn
>  */
582c666
< inline void LogCategory::LogTrace(std::string_view fmt, ARGS&&... args) const
---
> inline void Log(std::string_view fmt, ARGS&&... args)
584c668
<   SDL::LogTrace(m_category, fmt, args);
---
>   LOG_CATEGORY_APPLICATION.LogInfo(fmt, std::forward<ARGS>(args)...);
588c672
<  * Log a message with LOG_PRIORITY_VERBOSE.
---
>  * Log a message with the specified category and priority.
590a675
>  * @param priority the priority of the message.
592c677
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
604d688
<  * @sa LogCategory.LogMessage
605a690,691
>  * @sa LogCategory.LogTrace
>  * @sa LogCategory.LogVerbose
609c695,696
< inline void LogVerbose(LogCategory category,
---
> inline void LogMessage(LogCategory category,
>                        LogPriority priority,
611c698
<                        ARGS&&... args)
---
>                        ARGS... args)
613c700,701
<   SDL_LogVerbose(category, fmt, args);
---
>   LogUnformatted(
>     category, priority, std::vformat(fmt, std::make_format_args(args...)));
617c705,707
< inline void LogCategory::LogVerbose(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogMessage(LogPriority priority,
>                                     std::string_view fmt,
>                                     ARGS... args) const
619c709
<   SDL::LogVerbose(m_category, fmt, args);
---
>   SDL::LogMessage(m_category, priority, fmt, args...);
623c713
<  * Log a message with LOG_PRIORITY_DEBUG.
---
>  * Log a message with LOG_PRIORITY_TRACE.
627c717
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
635a726
>  * @sa LogCategory.LogDebug
645c736
< inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogTrace(LogCategory category, std::string_view fmt, ARGS&&... args)
647c738
<   SDL_LogDebug(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_TRACE, fmt, args...);
651c742
< inline void LogCategory::LogDebug(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogTrace(std::string_view fmt, ARGS&&... args) const
653c744
<   SDL::LogDebug(m_category, fmt, args);
---
>   SDL::LogTrace(m_category, fmt, args...);
657c748
<  * Log a message with LOG_PRIORITY_INFO.
---
>  * Log a message with LOG_PRIORITY_VERBOSE.
661c752
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
671a763
>  * @sa LogCategory.LogInfo
674,675d765
<  * @sa LogCategory.LogTrace
<  * @sa LogCategory.LogVerbose
679c769,771
< inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogVerbose(LogCategory category,
>                        std::string_view fmt,
>                        ARGS&&... args)
681c773
<   SDL_LogInfo(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_VERBOSE, fmt, args...);
685c777
< inline void LogCategory::LogInfo(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogVerbose(std::string_view fmt, ARGS&&... args) const
687c779
<   SDL::LogInfo(m_category, fmt, args);
---
>   SDL::LogVerbose(m_category, fmt, args...);
691c783
<  * Log a message with LOG_PRIORITY_WARN.
---
>  * Log a message with LOG_PRIORITY_DEBUG.
695c787
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
704d795
<  * @sa LogCategory.LogDebug
710a802
>  * @sa LogCategory.LogWarn
713c805
< inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogDebug(LogCategory category, std::string_view fmt, ARGS&&... args)
715c807
<   SDL_LogWarn(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_DEBUG, fmt, args...);
719c811
< inline void LogCategory::LogWarn(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogDebug(std::string_view fmt, ARGS&&... args) const
721c813
<   SDL::LogWarn(m_category, fmt, args);
---
>   SDL::LogDebug(m_category, fmt, args...);
725c817
<  * Log a message with LOG_PRIORITY_ERROR.
---
>  * Log a message with LOG_PRIORITY_INFO.
729c821
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
739c831
<  * @sa LogCategory.LogInfo
---
>  * @sa LogCategory.LogError
747c839
< inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
---
> inline void LogInfo(LogCategory category, std::string_view fmt, ARGS&&... args)
749c841
<   SDL_LogError(category, fmt, args);
---
>   LogMessage(category, LOG_PRIORITY_INFO, fmt, args...);
753c845
< inline void LogCategory::LogError(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogInfo(std::string_view fmt, ARGS&&... args) const
755c847
<   SDL::LogError(m_category, fmt, args);
---
>   SDL::LogInfo(m_category, fmt, args...);
759c851
<  * Log a message with LOG_PRIORITY_CRITICAL.
---
>  * Log a message with LOG_PRIORITY_WARN.
763c855
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
770a863
>  * @sa LogCategory.LogCritical
778d870
<  * @sa LogCategory.LogWarn
781,783c873
< inline void LogCritical(LogCategory category,
<                         std::string_view fmt,
<                         ARGS&&... args)
---
> inline void LogWarn(LogCategory category, std::string_view fmt, ARGS&&... args)
785c875
<   SDL_LogCritical(category, fmt, args);
---
>   LogMessage(category, SDL_LOG_PRIORITY_WARN, fmt, args...);
789c879
< inline void LogCategory::LogCritical(std::string_view fmt, ARGS&&... args) const
---
> inline void LogCategory::LogWarn(std::string_view fmt, ARGS&&... args) const
791c881
<   SDL::LogCritical(m_category, fmt, args);
---
>   SDL::LogWarn(m_category, fmt, args...);
795c885
<  * Log a message with the specified category and priority.
---
>  * Log a message with LOG_PRIORITY_ERROR.
798d887
<  * @param priority the priority of the message.
800c889
<  * @param ... additional parameters matching % tokens in the **fmt** string,
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
810d898
<  * @sa LogCategory.LogError
811a900
>  * @sa LogCategory.LogMessage
818,821c907
< inline void LogMessage(LogCategory category,
<                        LogPriority priority,
<                        std::string_view fmt,
<                        ARGS... args)
---
> inline void LogError(LogCategory category, std::string_view fmt, ARGS&&... args)
823c909
<   SDL_LogMessage(category, priority, fmt, args);
---
>   LogMessage(category, SDL_LOG_PRIORITY_ERROR, fmt, args...);
827,829c913
< inline void LogCategory::LogMessage(LogPriority priority,
<                                     std::string_view fmt,
<                                     ARGS... args) const
---
> inline void LogCategory::LogError(std::string_view fmt, ARGS&&... args) const
831c915
<   SDL::LogMessage(m_category, priority, fmt, args);
---
>   SDL::LogError(m_category, fmt, args...);
835c919
<  * Log a message with the specified category and priority.
---
>  * Log a message with LOG_PRIORITY_CRITICAL.
838d921
<  * @param priority the priority of the message.
840c923,924
<  * @param ap a variable argument list.
---
>  * @param args additional parameters matching % tokens in the **fmt** string,
>  *            if any.
847d930
<  * @sa LogCategory.LogCritical
851a935
>  * @sa LogUnformatted
856c940,952
< inline void LogUnformatted(StringParam message) { SDL_LogMessageV(message); }
---
> template<class... ARGS>
> inline void LogCritical(LogCategory category,
>                         std::string_view fmt,
>                         ARGS&&... args)
> {
>   LogMessage(category, SDL_LOG_PRIORITY_CRITICAL, fmt, args...);
> }
> 
> template<class... ARGS>
> inline void LogCategory::LogCritical(std::string_view fmt, ARGS&&... args) const
> {
>   SDL::LogCritical(m_category, fmt, args...);
> }
882,883d977
<  * @param userdata what was passed as `userdata` to
<  *                 SetLogOutputFunction().
888a983,985
>  *
>  * @cat listener-callback
>  *
913,914c1010
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
---
>  * @param callback an LogOutputFunction filled in with the current log callback.
933,936c1029
<  * @param callback an LogOutputFunction filled in with the current log
<  *                 callback.
<  * @param userdata a pointer filled in with the pointer that is passed to
<  *                 `callback`.
---
>  * @returns the LogOutputCB currently set
941a1035,1037
>  * @cat listener-callback
>  *
>  * @sa listener-callback
947c1043,1055
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   LogOutputFunction cb;
>   void* userdata;
>   GetLogOutputFunction(&cb, &userdata);
>   if (userdata == nullptr) {
>     return [cb](LogCategory c, LogPriority p, StringParam m) {
>       cb(nullptr, c, p, m);
>     };
>   }
>   if (auto cb = Wrapper::at(userdata)) return cb;
>   return [cb, userdata](LogCategory c, LogPriority p, StringParam m) {
>     cb(userdata, c, p, m);
>   };
961a1070
>  * @sa ResetLogOutputFunction
965c1074,1075
<   SDL_SetLogOutputFunction(callback, userdata);
---
>   UniqueCallbackWrapper<LogOutputCB>::erase();
>   return SDL_SetLogOutputFunction(callback, userdata);
972d1081
<  * @param userdata a pointer that is passed to `callback`.
977a1087,1089
>  * @cat listener-callback
>  *
>  * @sa listener-callback
979a1092
>  * @sa ResetLogOutputFunction
983c1096,1102
<   static_assert(false, "Not implemented");
---
>   using Wrapper = UniqueCallbackWrapper<LogOutputCB>;
>   SDL_SetLogOutputFunction(
>     [](
>       void* userdata, int category, LogPriority priority, const char* message) {
>       return Wrapper::Call(userdata, LogCategory{category}, priority, message);
>     },
>     Wrapper::Wrap(std::move(callback)));
985a1105,1114
> /**
>  * Replace the current log output function with the default one
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa GetDefaultLogOutputFunction
>  * @sa GetLogOutputFunction
>  */
988c1117
<   static_assert(false, "Not implemented");
---
>   return SetLogOutputFunction(GetDefaultLogOutputFunction(), nullptr);
