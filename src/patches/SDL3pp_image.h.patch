4d3
< #include <SDL3/SDL_image.h>
10a10,18
> #if !defined(SDL3PP_DISABLE_IMAGE) && !defined(SDL3PP_ENABLE_IMAGE) &&         \
>   __has_include(<SDL3_image/SDL_image.h>)
> #define SDL3PP_ENABLE_IMAGE
> #endif
> 
> #if defined(SDL3PP_ENABLE_IMAGE) || defined(SDL3PP_DOC)
> 
> #include <SDL3_image/SDL_image.h>
> 
14c22
<  * @defgroup CategorySDLImage Category SDLImage
---
>  * @defgroup CategorySDLImage Load images from several formats
59,60c67,76
< /// Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
< #define SDL_IMAGE_MAJOR_VERSION 3
---
> #ifdef SDL3PP_DOC
> 
> /**
>  * @name Image version
>  * @{
>  * Printable format: "%d.%d.%d", MAJOR, MINOR, MICRO
>  */
> #define SDL_IMAGE_MAJOR_VERSION
> 
> #define SDL_IMAGE_MINOR_VERSION
62c78
< #define SDL_IMAGE_MINOR_VERSION 2
---
> #define SDL_IMAGE_MICRO_VERSION
64c80
< #define SDL_IMAGE_MICRO_VERSION 5
---
> /// @}
66c82,84
< /// This is the version number macro for the current SDL_image version.
---
> /**
>  * This is the version number macro for the current SDL_image version.
>  */
79a98,99
> #endif // SDL3PP_DOC
> 
89c109
< inline int Version();
---
> inline int Version() { return IMG_Version(); }
93,94d112
< inline int IMG::Version() { return SDL::Version(); }
< 
139,141d156
<  * When done with the returned surface, the app should dispose of it with a
<  * call to Surface.Destroy().
<  *
143,144d157
<  * @param closeio true to close/free the IOStream before returning, false
<  *                to leave it open.
146a160,161
>  * @param closeio true to close/free the IOStream before returning, false
>  *                to leave it open.
159c174
<   return IMG_LoadTyped_IO(src, type, closeio);
---
>   return Surface(IMG_LoadTyped_IO(src, closeio, type));
191,195d205
<  * When done with the returned surface, the app should dispose of it with a
<  * call to
<  * [Surface.Destroy](https://wiki.libsdl.org/SDL3/Surface.Destroy)
<  * ().
<  *
205c215
< inline Surface LoadSurface(StringParam file) { return IMG_Load(file); }
---
> inline Surface LoadSurface(StringParam file) { return Surface(IMG_Load(file)); }
245,247d254
<  * When done with the returned surface, the app should dispose of it with a
<  * call to Surface.Destroy().
<  *
259c266
< inline Surface LoadSurface(IOStreamParam src, bool closeio)
---
> inline Surface LoadSurface(IOStreamParam src, bool closeio = false)
261c268
<   return IMG_Load_IO(src, closeio);
---
>   return Surface(IMG_Load_IO(src, closeio));
295,297d301
<  * When done with the returned texture, the app should dispose of it with a
<  * call to Texture.Destroy().
<  *
309c313
<   return IMG_LoadTexture(renderer, file);
---
>   return Texture(IMG_LoadTexture(renderer, file));
342,344d345
<  * When done with the returned texture, the app should dispose of it with a
<  * call to Texture.Destroy().
<  *
359c360
<                            bool closeio)
---
>                            bool closeio = false)
361c362
<   return IMG_LoadTexture_IO(renderer, src, closeio);
---
>   return Texture(IMG_LoadTexture_IO(renderer, src, closeio));
410,412d410
<  * When done with the returned texture, the app should dispose of it with a
<  * call to Texture.Destroy().
<  *
415,416d412
<  * @param closeio true to close/free the IOStream before returning, false
<  *                to leave it open.
418a415,416
>  * @param closeio true to close/free the IOStream before returning, false
>  *                to leave it open.
424d421
<  * @sa Texture.Texture
432c429
<   return IMG_LoadTextureTyped_IO(renderer, src, type, closeio);
---
>   return Texture(IMG_LoadTextureTyped_IO(renderer, src, closeio, type));
1242c1239,1242
< inline Surface LoadAVIF(IOStreamParam src) { return IMG_LoadAVIF_IO(src); }
---
> inline Surface LoadAVIF(IOStreamParam src)
> {
>   return Surface(IMG_LoadAVIF_IO(src));
> }
1276c1276,1279
< inline Surface LoadICO(IOStreamParam src) { return IMG_LoadICO_IO(src); }
---
> inline Surface LoadICO(IOStreamParam src)
> {
>   return Surface{IMG_LoadICO_IO(src)};
> }
1310c1313,1316
< inline Surface LoadCUR(IOStreamParam src) { return IMG_LoadCUR_IO(src); }
---
> inline Surface LoadCUR(IOStreamParam src)
> {
>   return Surface{IMG_LoadCUR_IO(src)};
> }
1344c1350,1353
< inline Surface LoadBMP(IOStreamParam src) { return IMG_LoadBMP_IO(src); }
---
> inline Surface LoadBMP(IOStreamParam src)
> {
>   return Surface{IMG_LoadBMP_IO(src)};
> }
1378c1387,1390
< inline Surface LoadGIF(IOStreamParam src) { return IMG_LoadGIF_IO(src); }
---
> inline Surface LoadGIF(IOStreamParam src)
> {
>   return Surface{IMG_LoadGIF_IO(src)};
> }
1412c1424,1427
< inline Surface LoadJPG(IOStreamParam src) { return IMG_LoadJPG_IO(src); }
---
> inline Surface LoadJPG(IOStreamParam src)
> {
>   return Surface{IMG_LoadJPG_IO(src)};
> }
1446c1461,1464
< inline Surface LoadJXL(IOStreamParam src) { return IMG_LoadJXL_IO(src); }
---
> inline Surface LoadJXL(IOStreamParam src)
> {
>   return Surface{IMG_LoadJXL_IO(src)};
> }
1480c1498,1501
< inline Surface LoadLBM(IOStreamParam src) { return IMG_LoadLBM_IO(src); }
---
> inline Surface LoadLBM(IOStreamParam src)
> {
>   return Surface{IMG_LoadLBM_IO(src)};
> }
1514c1535,1538
< inline Surface LoadPCX(IOStreamParam src) { return IMG_LoadPCX_IO(src); }
---
> inline Surface LoadPCX(IOStreamParam src)
> {
>   return Surface{IMG_LoadPCX_IO(src)};
> }
1548c1572,1575
< inline Surface LoadPNG(IOStreamParam src) { return IMG_LoadPNG_IO(src); }
---
> inline Surface LoadPNG(IOStreamParam src)
> {
>   return Surface{IMG_LoadPNG_IO(src)};
> }
1582c1609,1612
< inline Surface LoadPNM(IOStreamParam src) { return IMG_LoadPNM_IO(src); }
---
> inline Surface LoadPNM(IOStreamParam src)
> {
>   return Surface{IMG_LoadPNM_IO(src)};
> }
1616c1646,1649
< inline Surface LoadSVG(IOStreamParam src) { return IMG_LoadSVG_IO(src); }
---
> inline Surface LoadSVG(IOStreamParam src)
> {
>   return Surface{IMG_LoadSVG_IO(src)};
> }
1650c1683,1686
< inline Surface LoadQOI(IOStreamParam src) { return IMG_LoadQOI_IO(src); }
---
> inline Surface LoadQOI(IOStreamParam src)
> {
>   return Surface{IMG_LoadQOI_IO(src)};
> }
1684c1720,1723
< inline Surface LoadTGA(IOStreamParam src) { return IMG_LoadTGA_IO(src); }
---
> inline Surface LoadTGA(IOStreamParam src)
> {
>   return Surface{IMG_LoadTGA_IO(src)};
> }
1718c1757,1760
< inline Surface LoadTIF(IOStreamParam src) { return IMG_LoadTIF_IO(src); }
---
> inline Surface LoadTIF(IOStreamParam src)
> {
>   return Surface{IMG_LoadTIF_IO(src)};
> }
1752c1794,1797
< inline Surface LoadXCF(IOStreamParam src) { return IMG_LoadXCF_IO(src); }
---
> inline Surface LoadXCF(IOStreamParam src)
> {
>   return Surface{IMG_LoadXCF_IO(src)};
> }
1786c1831,1834
< inline Surface LoadXPM(IOStreamParam src) { return IMG_LoadXPM_IO(src); }
---
> inline Surface LoadXPM(IOStreamParam src)
> {
>   return Surface{IMG_LoadXPM_IO(src)};
> }
1820c1868
< inline Surface LoadXV(IOStreamParam src) { return IMG_LoadXV_IO(src); }
---
> inline Surface LoadXV(IOStreamParam src) { return Surface{IMG_LoadXV_IO(src)}; }
1854c1902,1905
< inline Surface LoadWEBP(IOStreamParam src) { return IMG_LoadWEBP_IO(src); }
---
> inline Surface LoadWEBP(IOStreamParam src)
> {
>   return Surface{IMG_LoadWEBP_IO(src)};
> }
1865,1867d1915
<  * When done with the returned surface, the app should dispose of it with a
<  * call to Surface.Destroy().
<  *
1869,1870c1917
<  * @param width desired width of the generated surface, in pixels.
<  * @param height desired height of the generated surface, in pixels.
---
>  * @param size desired width and height of the generated surface, in pixels.
1877c1924
<   return IMG_LoadSizedSVG_IO(src, size);
---
>   return Surface(IMG_LoadSizedSVG_IO(src, size.x, size.y));
1887,1889d1933
<  * When done with the returned surface, the app should dispose of it with a
<  * call to Surface.Destroy().
<  *
1899c1943
<   return IMG_ReadXPMFromArray(xpm);
---
>   return Surface{IMG_ReadXPMFromArray(xpm)};
1921c1965
<   return IMG_ReadXPMFromArrayToRGB888(xpm);
---
>   return Surface{IMG_ReadXPMFromArrayToRGB888(xpm)};
1936,1937d1979
<  *
<  * @sa SaveAVIF
1954,1955d1995
<  * @param closeio true to close/free the IOStream before returning, false
<  *                to leave it open.
1957a1998,1999
>  * @param closeio true to close/free the IOStream before returning, false
>  *                to leave it open.
1961,1962d2002
<  *
<  * @sa SaveAVIF
1969c2009
<   CheckError(IMG_SaveAVIF_IO(surface, dst, quality, closeio));
---
>   CheckError(IMG_SaveAVIF_IO(surface, dst, closeio, quality));
2005,2006d2044
<  *
<  * @sa SavePNG
2027,2028d2064
<  *
<  * @sa SaveJPG
2045,2046d2080
<  * @param closeio true to close/free the IOStream before returning, false
<  *                to leave it open.
2048a2083,2084
>  * @param closeio true to close/free the IOStream before returning, false
>  *                to leave it open.
2052,2053d2087
<  *
<  * @sa SaveJPG
2060c2094
<   CheckError(IMG_SaveJPG_IO(surface, dst, quality, closeio));
---
>   CheckError(IMG_SaveJPG_IO(surface, dst, closeio, quality));
2140c2174
<   Animation(IOStreamParam src, bool closeio)
---
>   Animation(IOStreamParam src, bool closeio = false)
2187d2220
<    * @sa Animation.Animation
2192c2225,2228
<   int GetWidth() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the width in pixels.
>    */
>   int GetWidth() const { return get()->w; }
2194c2230,2233
<   int GetHeight() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the height in pixels.
>    */
>   int GetHeight() const { return get()->h; }
2196c2235,2238
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   Point GetSize() const { return Point(GetWidth(), GetHeight()); }
2198c2240,2243
<   int GetCount() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Return the number of frames.
>    */
>   int GetCount() const { return m_resource->count; }
2200c2245,2250
<   Surface GetFrame(int index) const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Return the frame image under given index.
>    *
>    * @param index the index to get frame, within [0, GetCount() - 1]
>    */
>   SurfaceRaw GetFrame(int index) const { return m_resource->frames[index]; }
2202c2252,2257
<   int GetDelay(int index) const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Return the frame delay under given index.
>    *
>    * @param index the index to get frame, within [0, GetCount() - 1]
>    */
>   int GetDelay(int index) const { return m_resource->delays[index]; }
2267c2322
< inline Animation LoadAnimation(IOStreamParam src, bool closeio)
---
> inline Animation LoadAnimation(IOStreamParam src, bool closeio = false)
2288a2344
>  * @param type a filename extension that represent this data ("GIF", etc).
2291d2346
<  * @param type a filename extension that represent this data ("GIF", etc).
2297d2351
<  * @sa Animation.Animation
2304c2358
<   return IMG_LoadAnimationTyped_IO(src, type, closeio);
---
>   return Animation(IMG_LoadAnimationTyped_IO(src, closeio, type));
2317d2370
<  * @sa Animation.Animation
2338d2390
<  * @sa Animation.Animation
2342c2394
< inline AnimationRef LoadGIFAnimation(IOStreamParam src)
---
> inline Animation LoadGIFAnimation(IOStreamParam src)
2344c2396
<   return IMG_LoadGIFAnimation_IO(src);
---
>   return Animation(IMG_LoadGIFAnimation_IO(src));
2361d2412
<  * @sa Animation.Animation
2365c2416
< inline AnimationRef LoadWEBPAnimation(IOStreamParam src)
---
> inline Animation LoadWEBPAnimation(IOStreamParam src)
2367c2418
<   return IMG_LoadWEBPAnimation_IO(src);
---
>   return Animation{IMG_LoadWEBPAnimation_IO(src)};
2372a2424,2425
> 
> #endif // defined(SDL3PP_ENABLE_IMAGE) || defined(SDL3PP_DOC)
