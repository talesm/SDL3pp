19c19
<  * @defgroup CategorySurface Category Surface
---
>  * @defgroup CategorySurface Surface Creation and Simple Drawing
79c79
<   /// Constructs from const SurfaceRaw
---
>   /// Constructs from SurfaceRaw
136c136
< constexpr bool MustLock(SurfaceConstParam S) const { return SDL_MUSTLOCK(S); }
---
> constexpr bool MustLock(SurfaceConstParam S) { return SDL_MUSTLOCK((S.value)); }
194a195,196
>  * @cat resource
>  *
197,198d198
<  *
<  * @cat resource
234,235c234
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
237,238c236
<    * @post the new Surface structure that is created or nullptr on failure;
<    *          call GetError() for more information.
---
>    * @throws Error on failure.
248c246
<     : m_resource(SDL_CreateSurface(size, format))
---
>     : m_resource(CheckError(SDL_CreateSurface(size.x, size.y, format)))
265,266c263
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
270,271c267
<    * @post the new Surface structure that is created or nullptr on failure;
<    *          call GetError() for more information.
---
>    * @throws Error on failure.
281c277,278
<     : m_resource(SDL_CreateSurfaceFrom(size, format, pixels, pitch))
---
>     : m_resource(CheckError(
>         SDL_CreateSurfaceFrom(size.x, size.y, format, pixels, pitch)))
314,318d310
<    * When done with the returned surface, the app should dispose of it with a
<    * call to
<    * [Surface.Destroy](https://wiki.libsdl.org/SDL3/Surface.Destroy)
<    * ().
<    *
368,370d359
<    * When done with the returned surface, the app should dispose of it with a
<    * call to Surface.Destroy().
<    *
382c371
<   Surface(IOStreamParam src, bool closeio);
---
>   Surface(IOStreamParam src, bool closeio = false);
542,543c531
<    * @param colorspace an Colorspace value describing the surface
<    *                   colorspace.
---
>    * @param colorspace a Colorspace value describing the surface colorspace.
642,643c630
<    * @param image a pointer to an alternate Surface to associate with this
<    *              surface.
---
>    * @param image an alternate Surface to associate with this surface.
677,682d663
<    * Freeing the array of surfaces does not affect the surfaces in the array.
<    * They are still referenced by the surface being queried and will be cleaned
<    * up normally.
<    *
<    * @param count a pointer filled in with the number of surface pointers
<    *              returned, may be nullptr.
684,685c665
<    *          failure; call GetError() for more information. This should be
<    *          freed with free() when it is no longer needed.
---
>    *          failure; call GetError() for more information.
722,724c702,704
<    * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates
<    * to 0, then you can read and write to the surface at any time, and the pixel
<    * format of the surface will not change.
---
>    * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
>    * false, then you can read and write to the surface at any time, and the
>    * pixel format of the surface will not change.
841,842c821
<    * @param enabled true to enable color key, false to disable color key.
<    * @param key the transparent pixel.
---
>    * @param key the transparent pixel or std::nullopt to disable it.
854a834,842
>   /**
>    * Unset the color key (transparent pixel) in a surface.
>    *
>    * The color key defines a pixel value that will be treated as transparent in
>    * a blit. For example, one can use this to specify that cyan pixels should be
>    * considered transparent, and therefore not rendered.
>    *
>    * @throws Error on failure.
>    */
860,861d847
<    * It is safe to pass a nullptr `surface` here; it will return false.
<    *
881c867
<    * @param key a pointer filled in with the transparent pixel.
---
>    * @returns the transparent pixel or nullopt if none.
956d941
<    * @param alpha a pointer filled in with the current alpha value.
967a953,966
>   /**
>    * Set an additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * When this surface is blitted, during the blit operation each source color
>    * channel is modulated by the appropriate color value according to the
>    * following formula:
>    *
>    * `srcC = srcC * (color / 255)`
>    * `srcA = srcA * (alpha / 255)`
>    *
>    * @param color the color to be multiplied in blit operations
>    * @throws Error on failure.
>    */
969a969,975
>   /**
>    * Get the additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * @returns a Color containing RGBA value on success or std::nullopt on
>    * failure; call GetError() for more information.
>    */
993c999
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode.
1021a1028
>    * @sa Surface.ResetClipRect()
1025a1033,1037
>   /**
>    * Disable the clipping rectangle for a surface.
>    *
>    * @sa SetClipRect()
>    */
1034,1036c1046,1047
<    *                clipped.
<    * @param rect an Rect structure filled in with the clipping rectangle for
<    *             the surface.
---
>    * @returns the Rect structure filled in with the clipping rectangle for the
>    *          surface on success.
1065,1066d1075
<    * The returned surface should be freed with Surface.Destroy().
<    *
1082,1085c1091
<    * The returned surface should be freed with Surface.Destroy().
<    *
<    * @param width the width of the new surface.
<    * @param height the height of the new surface.
---
>    * @param size the width and height of the new surface.
1177c1183
<    * otherwise the color is assumed to be in the colorspace of the suface.
---
>    * otherwise the color is assumed to be in the colorspace of the surface.
1179,1182c1185
<    * @param r the red component of the pixel, normally in the range 0-1.
<    * @param g the green component of the pixel, normally in the range 0-1.
<    * @param b the blue component of the pixel, normally in the range 0-1.
<    * @param a the alpha component of the pixel, normally in the range 0-1.
---
>    * @param c the color components of the pixel, normally in the range 0-1.
1195c1198
<    * generated by MapRGB() or MapColor(). If the color value contains an
---
>    * generated by MapColor(). If the color value contains an
1215a1219,1228
>   /**
>    * Perform a fast fill of a rectangle with a specific color.
>    *
>    * If there is a clip rectangle set on the destination (set via
>    * Surface.SetClipRect()), then this function will fill based on the
>    * intersection of the clip rectangle and `rect`.
>    *
>    * @param color the color to fill with.
>    * @throws Error on failure.
>    */
1222c1235
<    * generated by MapRGB() or MapColor(). If the color value contains an
---
>    * generated by MapColor(). If the color value contains an
1231d1243
<    * @param count the number of rectangles in the array.
1294a1307
>    * @param src the SurfaceRaw structure to be copied from.
1297d1309
<    * @param dst the Surface structure that is the blit target.
1315a1328,1397
>   /**
>    * Performs a fast blit from the source surface to the destination surface
>    * with clipping.
>    *
>    * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>    * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>    *
>    * The blit function should not be called on a locked surface.
>    *
>    * The blit semantics for surfaces with and without blending and colorkey are
>    * defined as follows:
>    *
>    * ```
>    *    RGBA->RGB:
>    *      Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB, set destination alpha to source per-surface alpha value.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    *
>    *   RGBA->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy all of RGBA to the destination.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGB:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    * ```
>    *
>    * @param src the SurfaceRaw structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be
>    *                copied, or nullptr to copy the entire surface.
>    * @param dstpos the Point structure representing the x and y position in
>    *                the destination surface, or nullptr for (0,0). The width and
>    *                height are ignored, and are copied from `srcrect`. If you
>    *                want a specific width and height, you should use
>    *                Surface.BlitScaled().
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    * @sa Surface.BlitScaled
>    */
1325a1408
>    * @param src the Surface structure to be copied from.
1328d1410
<    * @param dst the Surface structure that is the blit target.
1347a1430
>    * @param src the Surface structure to be copied from.
1350d1432
<    * @param dst the Surface structure that is the blit target.
1374a1457
>    * @param src the Surface structure to be copied from.
1377d1459
<    * @param dst the Surface structure that is the blit target.
1399a1482
>    * @param src the Surface structure to be copied from.
1402d1484
<    * @param dst the Surface structure that is the blit target.
1429a1512
>    * @param src the SDL_Surface structure to be copied from.
1432d1514
<    * @param dst the Surface structure that is the blit target.
1455a1538
>    * @param src the SDL_Surface structure to be copied from.
1462d1544
<    * @param dst the Surface structure that is the blit target.
1490a1573
>    * @param src the SDL_Surface structure to be copied from.
1497a1581,1583
>    * @param dstrect the Rect structure representing the target rectangle in
>    *                the destination surface, or nullptr to fill the entire
>    *                surface.
1501,1504d1586
<    * @param dst the Surface structure that is the blit target.
<    * @param dstrect the Rect structure representing the target rectangle in
<    *                the destination surface, or nullptr to fill the entire
<    * surface.
1573,1576c1655
<    * @param r the red component of the pixel in the range 0-255.
<    * @param g the green component of the pixel in the range 0-255.
<    * @param b the blue component of the pixel in the range 0-255.
<    * @param a the alpha component of the pixel in the range 0-255.
---
>    * @param c the color components of the pixel in the range 0-255.
1596,1597c1675
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1624,1636c1702,1703
<    * Like GetRGBA, this uses the entire 0..255 range when converting color
<    * components from pixel formats with less than 8 bits per RGB component.
<    *
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r a pointer filled in with the red channel, 0-255, or nullptr to
<    * ignore this channel.
<    * @param g a pointer filled in with the green channel, 0-255, or nullptr to
<    *          ignore this channel.
<    * @param b a pointer filled in with the blue channel, 0-255, or nullptr to
<    *          ignore this channel.
<    * @param a a pointer filled in with the alpha channel, 0-255, or nullptr to
<    *          ignore this channel.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
1651,1652c1718
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1679,1688c1745,1746
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r a pointer filled in with the red channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param g a pointer filled in with the green channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param b a pointer filled in with the blue channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param a a pointer filled in with the alpha channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
1706,1711c1764,1765
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, 0-255.
<    * @param g the green channel value, 0-255.
<    * @param b the blue channel value, 0-255.
<    * @param a the alpha channel value, 0-255.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, 0-255.
1726,1731c1780,1781
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, normally in the range 0-1.
<    * @param g the green channel value, normally in the range 0-1.
<    * @param b the blue channel value, normally in the range 0-1.
<    * @param a the alpha channel value, normally in the range 0-1.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, normally in the range 0-1.
1739a1790,1792
>   /**
>    * Get the width in pixels.
>    */
1741a1795,1797
>   /**
>    * Get the height in pixels.
>    */
1743a1800,1802
>   /**
>    * Get the size in pixels.
>    */
1745a1805,1807
>   /**
>    * Get pitch in bytes.
>    */
1747a1810,1812
>   /**
>    * Get the pixel format.
>    */
1749a1815,1817
>   /**
>    * Get the pixels.
>    */
1758,1759c1826
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1789,1790c1856
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1864c1930
<   return CheckError(SDL_GetSurfaceProperties(surface));
---
>   return {CheckError(SDL_GetSurfaceProperties(surface))};
1885,1888d1950
< #endif // SDL_VERSION_ATLEAST(3, 2, 6)
< 
< #if SDL_VERSION_ATLEAST(3, 2, 6)
< 
1978c2040
<   return CheckError(SDL_CreateSurfacePalette(surface));
---
>   return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(surface)));
2027c2089
<   return SDL_GetSurfacePalette(surface);
---
>   return Palette::Borrow(SDL_GetSurfacePalette(surface));
2104,2105d2165
<  * @param count a pointer filled in with the number of surface pointers
<  *              returned, may be nullptr.
2107,2108c2167
<  *          failure; call GetError() for more information. This should be
<  *          freed with free() when it is no longer needed.
---
>  *          failure; call GetError() for more information.
2120c2179,2181
<   return SDL_GetSurfaceImages(surface);
---
>   int count = 0;
>   auto data = SDL_GetSurfaceImages(surface, &count);
>   return OwnArray<SurfaceRaw>(CheckError(data), count);
2162c2223
<  * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates to
---
>  * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
2381,2382c2442
<  * @param enabled true to enable color key, false to disable color key.
<  * @param key the transparent pixel.
---
>  * @param key the transparent pixel or std::nullopt to disable it.
2395c2455
<   CheckError(SDL_SetSurfaceColorKey(surface, key));
---
>   CheckError(SDL_SetSurfaceColorKey(surface, key.has_value(), key.value_or(0)));
2402a2463,2472
> /**
>  * Unset the color key (transparent pixel) in a surface.
>  *
>  * The color key defines a pixel value that will be treated as transparent in
>  * a blit. For example, one can use this to specify that cyan pixels should be
>  * considered transparent, and therefore not rendered.
>  *
>  * @param surface the Surface structure to update.
>  * @throws Error on failure.
>  */
2405c2475
<   static_assert(false, "Not implemented");
---
>   SetSurfaceColorKey(surface, std::nullopt);
2444c2514
<  * @param key a pointer filled in with the transparent pixel.
---
>  * @returns the transparent pixel or nullopt if none.
2456c2526,2527
<   return CheckError(SDL_GetSurfaceColorKey(surface));
---
>   if (Uint32 key; SDL_GetSurfaceColorKey(surface, &key)) return key;
>   return std::nullopt;
2558c2629
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
2570c2641,2643
<   return CheckError(SDL_GetSurfaceAlphaMod(surface));
---
>   Uint8 alpha;
>   CheckError(SDL_GetSurfaceAlphaMod(surface, &alpha));
>   return alpha;
2577a2651,2665
> /**
>  * Set an additional color and alpha value multiplied into blit
>  * operations.
>  *
>  * When this surface is blitted, during the blit operation each source color
>  * channel is modulated by the appropriate color value according to the
>  * following formula:
>  *
>  * `srcC = srcC * (color / 255)`
>  * `srcA = srcA * (alpha / 255)`
>  *
>  * @param surface the Surface structure to query.
>  * @param color the color to be multiplied in blit operations
>  * @throws Error on failure.
>  */
2580c2668,2669
<   static_assert(false, "Not implemented");
---
>   SetSurfaceColorMod(surface, color.r, color.g, color.b);
>   SetSurfaceAlphaMod(surface, color.a);
2583,2586c2672
< inline void Surface::SetMod(Color color)
< {
<   SDL::SetSurfaceMod(m_resource, color);
< }
---
> inline void Surface::SetMod(Color color) { SetSurfaceMod(m_resource, color); }
2587a2674,2681
> /**
>  * Get the additional color and alpha value multiplied into blit
>  * operations.
>  *
>  * @param surface the Surface structure to query.
>  * @returns a Color containing RGBA value on success or std::nullopt on
>  * failure; call GetError() for more information.
>  */
2590c2684,2687
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetSurfaceColorMod(surface, &c.r, &c.g, &c.b);
>   c.a = GetSurfaceAlphaMod(surface);
>   return c;
2626c2723
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @returns the current BlendMode.
2637c2734,2736
<   return CheckError(SDL_GetSurfaceBlendMode(surface));
---
>   BlendMode blendmode;
>   CheckError(SDL_GetSurfaceBlendMode(surface, &blendmode));
>   return blendmode;
2676a2776,2780
> /**
>  * Disable the clipping rectangle for a surface.
>  *
>  * @sa SetSurfaceClipRect()
>  */
2679c2783
<   static_assert(false, "Not implemented");
---
>   SetSurfaceClipRect(surface, std::nullopt);
2692,2693c2796,2797
<  * @param rect an Rect structure filled in with the clipping rectangle for
<  *             the surface.
---
>  * @returns the Rect structure filled in with the clipping rectangle for the
>  *          surface.
2704c2808,2810
<   return CheckError(SDL_GetSurfaceClipRect(surface));
---
>   Rect r;
>   CheckError(SDL_GetSurfaceClipRect(surface, &r));
>   return r;
2750c2856
<   return SDL_DuplicateSurface(surface);
---
>   return Surface(SDL_DuplicateSurface(surface));
2765,2766c2871
<  * @param width the width of the new surface.
<  * @param height the height of the new surface.
---
>  * @param size the width and height of the surface.
2781c2886
<   return SDL_ScaleSurface(surface, size, scaleMode);
---
>   return Surface(SDL_ScaleSurface(surface, size.x, size.y, scaleMode));
2817c2922
<   return SDL_ConvertSurface(surface, format);
---
>   return Surface(SDL_ConvertSurface(surface, format));
2825,2833d2929
< inline Surface Surface::Convert(PixelFormat format,
<                                 PaletteParam palette,
<                                 Colorspace colorspace,
<                                 PropertiesParam props) const
< {
<   return SDL::ConvertSurfaceAndColorspace(
<     m_resource, format, palette, colorspace, props);
< }
< 
2867,2868c2963,2973
<   return SDL_ConvertSurfaceAndColorspace(
<     surface, format, palette, colorspace, props);
---
>   return Surface{SDL_ConvertSurfaceAndColorspace(
>     surface, format, palette, colorspace, props)};
> }
> 
> inline Surface Surface::Convert(PixelFormat format,
>                                 PaletteParam palette,
>                                 Colorspace colorspace,
>                                 PropertiesParam props) const
> {
>   return SDL::ConvertSurfaceAndColorspace(
>     m_resource, format, palette, colorspace, props);
2874,2875c2979
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height of the surface.
2901c3005
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch));
---
>     size.x, size.y, src_format, src, src_pitch, dst_format, dst, dst_pitch));
2908,2909c3012
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height  of the block to copy, in pixels.
2946c3049,3050
<   CheckError(SDL_ConvertPixelsAndColorspace(size,
---
>   CheckError(SDL_ConvertPixelsAndColorspace(size.x,
>                                             size.y,
2964,2965c3068
<  * @param width the width of the block to convert, in pixels.
<  * @param height the height of the block to convert, in pixels.
---
>  * @param size the width and height of the surface.
2991,2992c3094,3102
<   CheckError(SDL_PremultiplyAlpha(
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch, linear));
---
>   CheckError(SDL_PremultiplyAlpha(size.x,
>                                   size.y,
>                                   src_format,
>                                   src,
>                                   src_pitch,
>                                   dst_format,
>                                   dst,
>                                   dst_pitch,
>                                   linear));
3028,3031c3138
<  * @param r the red component of the pixel, normally in the range 0-1.
<  * @param g the green component of the pixel, normally in the range 0-1.
<  * @param b the blue component of the pixel, normally in the range 0-1.
<  * @param a the alpha component of the pixel, normally in the range 0-1.
---
>  * @param c the color components of the pixel, normally in the range 0-1.
3040c3147
<   CheckError(SDL_ClearSurface(surface, c));
---
>   CheckError(SDL_ClearSurface(surface, c.r, c.g, c.b, c.a));
3052c3159
<  * generated by MapRGB() or MapColor(). If the color value contains an
---
>  * generated by MapColor(). If the color value contains an
3083a3191,3201
> /**
>  * Perform a fast fill of a rectangle with a specific color.
>  *
>  * If there is a clip rectangle set on the destination (set via
>  * Surface.SetClipRect()), then this function will fill based on the
>  * intersection of the clip rectangle and `rect`.
>  *
>  * @param dst the Surface structure that is the drawing target.
>  * @param color the color to fill with.
>  * @throws Error on failure.
>  */
3086c3204
<   static_assert(false, "Not implemented");
---
>   FillSurfaceRect(dst, std::nullopt, color);
3095c3213
<  * generated by MapRGB() or MapColor(). If the color value contains an
---
>  * generated by MapColor(). If the color value contains an
3105d3222
<  * @param count the number of rectangles in the array.
3119c3236
<   CheckError(SDL_FillSurfaceRects(dst, rects, color));
---
>   CheckError(SDL_FillSurfaceRects(dst, rects.data(), rects.size(), color));
3209c3326
<   SDL::BlitSurface(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurface(src, srcrect, m_resource, dstrect);
3216c3333
<   static_assert(false, "Not implemented");
---
>   Blit(src, srcrect, Rect{dstpos, {}});
3218a3336,3402
> /**
>  * Performs a fast blit from the source surface to the destination surface
>  * with clipping.
>  *
>  * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>  * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>  *
>  * The blit function should not be called on a locked surface.
>  *
>  * The blit semantics for surfaces with and without blending and colorkey are
>  * defined as follows:
>  *
>  * ```
>  *    RGBA->RGB:
>  *      Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB, set destination alpha to source per-surface alpha value.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  *
>  *   RGBA->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy all of RGBA to the destination.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGB:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  * ```
>  *
>  * @param src the Surface structure to be copied from.
>  * @param srcrect the Rect structure representing the rectangle to be
>  *                copied, or nullptr to copy the entire surface.
>  * @param dst the Surface structure that is the blit target.
>  * @param dstpos the Point structure representing the x and y position in
>  *                the destination surface.
>  * @throws Error on failure.
>  *
>  * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>  *               at any given time.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Surface.BlitSurface
>  */
3224c3408
<   static_assert(false, "Not implemented");
---
>   BlitSurface(src, srcrect, dst, SDL_Rect{dstpos.x, dstpos.y});
3253c3437
<   CheckError(SDL_BlitSurfaceUnchecked(src, srcrect, dst, dstrect));
---
>   CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, dst, &dstrect));
3260c3444
<   SDL::BlitSurfaceUnchecked(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurfaceUnchecked(src, srcrect, m_resource, dstrect);
3298c3482
<   SDL::BlitSurfaceScaled(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::BlitSurfaceScaled(src, srcrect, m_resource, dstrect, scaleMode);
3330c3514
<     SDL_BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode));
---
>     SDL_BlitSurfaceUncheckedScaled(src, &srcrect, dst, &dstrect, scaleMode));
3338c3522
<   SDL::BlitSurfaceUncheckedScaled(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::BlitSurfaceUncheckedScaled(src, srcrect, m_resource, dstrect, scaleMode);
3372,3375d3555
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
3381c3561
<   SDL::StretchSurface(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::StretchSurface(src, srcrect, m_resource, dstrect, scaleMode);
3421c3601
<   SDL::BlitSurfaceTiled(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurfaceTiled(src, srcrect, m_resource, dstrect);
3469c3649
<     m_resource, src, srcrect, scale, scaleMode, dstrect);
---
>     src, srcrect, scale, scaleMode, m_resource, dstrect);
3490,3492d3669
<  * @param scale the scale used to transform the corner of `srcrect` into the
<  *              corner of `dstrect`, or 0.0f for an unscaled blit.
<  * @param scaleMode scale algorithm to be used.
3496c3673,3676
<  * surface.
---
>  *                surface.
>  * @param scale the scale used to transform the corner of `srcrect` into the
>  *              corner of `dstrect`, or 0.0f for an unscaled blit.
>  * @param scaleMode scale algorithm to be used.
3523,3524d3702
<                                   dst,
<                                   dstrect,
3526c3704,3706
<                                   scaleMode));
---
>                                   scaleMode,
>                                   dst,
>                                   dstrect));
3539,3540c3719
<   SDL::BlitSurface9Grid(m_resource,
<                         src,
---
>   SDL::BlitSurface9Grid(src,
3545a3725
>                         m_resource,
3613,3616c3793
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
---
>  * @param c the color components of the pixel in the range 0-255.
3627c3804
<   return SDL_MapSurfaceRGBA(surface, c);
---
>   return SDL_MapSurfaceRGBA(surface, c.r, c.g, c.b, c.a);
3645,3646c3822
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
3668c3844
<   CheckError(SDL_ReadSurfacePixel(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixel(surface, p.x, p.y, r, g, b, a));
3681,3690c3857,3858
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r a pointer filled in with the red channel, 0-255, or nullptr to
<  * ignore this channel.
<  * @param g a pointer filled in with the green channel, 0-255, or nullptr to
<  *          ignore this channel.
<  * @param b a pointer filled in with the blue channel, 0-255, or nullptr to
<  *          ignore this channel.
<  * @param a a pointer filled in with the alpha channel, 0-255, or nullptr to
<  *          ignore this channel.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>  * @returns color on success.
3699c3867,3869
<   static_assert(false, "Not implemented");
---
>   Color c;
>   ReadSurfacePixel(surface, p, &c.r, &c.g, &c.b, &c.a);
>   return c;
3723,3724c3893
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
3746c3915
<   CheckError(SDL_ReadSurfacePixelFloat(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixelFloat(surface, p.x, p.y, r, g, b, a));
3756,3765c3925,3926
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r a pointer filled in with the red channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param g a pointer filled in with the green channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param b a pointer filled in with the blue channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param a a pointer filled in with the alpha channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>  * @returns color on success.
3775c3936,3938
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   ReadSurfacePixelFloat(surface, p, &c.r, &c.g, &c.b, &c.a);
>   return c;
3802,3807c3965,3966
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, 0-255.
<  * @param g the green channel value, 0-255.
<  * @param b the blue channel value, 0-255.
<  * @param a the alpha channel value, 0-255.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels value, 0-255.
3818c3977
<   CheckError(SDL_WriteSurfacePixel(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixel(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3833,3838c3992,3993
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, normally in the range 0-1.
<  * @param g the green channel value, normally in the range 0-1.
<  * @param b the blue channel value, normally in the range 0-1.
<  * @param a the alpha channel value, normally in the range 0-1.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels values, normally in the range 0-1.
3849c4004
<   CheckError(SDL_WriteSurfacePixelFloat(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixelFloat(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3857,3860c4012,4015
< constexpr int GetSurfaceWidth(SurfaceConstParam surface)
< {
<   static_assert(false, "Not implemented");
< }
---
> /**
>  * Get the width in pixels.
>  */
> constexpr int GetSurfaceWidth(SurfaceConstParam surface) { return surface->w; }
3867,3870c4022,4025
< constexpr int GetSurfaceHeight(SurfaceConstParam surface)
< {
<   static_assert(false, "Not implemented");
< }
---
> /**
>  * Get the height in pixels.
>  */
> constexpr int GetSurfaceHeight(SurfaceConstParam surface) { return surface->h; }
3876a4032,4034
> /**
>  * Get the size in pixels.
>  */
3879c4037
<   static_assert(false, "Not implemented");
---
>   return Point(surface->w, surface->h);
3886a4045,4047
> /**
>  * Get pitch in bytes.
>  */
3889c4050
<   static_assert(false, "Not implemented");
---
>   return surface->pitch;
3896a4058,4060
> /**
>  * Get the pixel format.
>  */
3899c4063
<   static_assert(false, "Not implemented");
---
>   return surface->format;
3906a4071,4073
> /**
>  * Get the pixels.
>  */
3909c4076
<   static_assert(false, "Not implemented");
---
>   return surface->pixels;
