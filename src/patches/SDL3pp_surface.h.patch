19c19
<  * @defgroup CategorySurface Category Surface
---
>  * @defgroup CategorySurface Surface Creation and Simple Drawing
76c76
<   /// Constructs from const SurfaceRaw
---
>   /// Constructs from SurfaceRaw
130c130
< constexpr bool MustLock(SurfaceConstParam S) const { return SDL_MUSTLOCK(S); }
---
> constexpr bool MustLock(SurfaceConstParam S) { return SDL_MUSTLOCK((S.value)); }
188a189,190
>  * @cat resource
>  *
191,192d192
<  *
<  * @cat resource
228,229c228
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
231,232c230
<    * @post the new Surface structure that is created or nullptr on failure;
<    *          call GetError() for more information.
---
>    * @throws Error on failure.
242c240
<     : m_resource(SDL_CreateSurface(size, format))
---
>     : m_resource(CheckError(SDL_CreateSurface(size.x, size.y, format)))
259,260c257
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
264,265c261
<    * @post the new Surface structure that is created or nullptr on failure;
<    *          call GetError() for more information.
---
>    * @throws Error on failure.
275c271,272
<     : m_resource(SDL_CreateSurfaceFrom(size, format, pixels, pitch))
---
>     : m_resource(CheckError(
>         SDL_CreateSurfaceFrom(size.x, size.y, format, pixels, pitch)))
308,312d304
<    * When done with the returned surface, the app should dispose of it with a
<    * call to
<    * [Surface.Destroy](https://wiki.libsdl.org/SDL3/Surface.Destroy)
<    * ().
<    *
362,364d353
<    * When done with the returned surface, the app should dispose of it with a
<    * call to Surface.Destroy().
<    *
376c365
<   Surface(IOStreamParam src, bool closeio);
---
>   Surface(IOStreamParam src, bool closeio = false);
523,524c512
<    * @param colorspace an Colorspace value describing the surface
<    *                   colorspace.
---
>    * @param colorspace a Colorspace value describing the surface colorspace.
623,624c611
<    * @param image a pointer to an alternate Surface to associate with this
<    *              surface.
---
>    * @param image an alternate Surface to associate with this surface.
658,664d644
<    * Freeing the array of surfaces does not affect the surfaces in the array.
<    * They are still referenced by the surface being queried and will be cleaned
<    * up normally.
<    *
<    * @param surface the Surface structure to query.
<    * @param count a pointer filled in with the number of surface pointers
<    *              returned, may be nullptr.
666,667c646
<    *          failure; call GetError() for more information. This should be
<    *          freed with free() when it is no longer needed.
---
>    *          failure; call GetError() for more information.
699c678
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
711,713c690,692
<    * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates
<    * to 0, then you can read and write to the surface at any time, and the pixel
<    * format of the surface will not change.
---
>    * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
>    * false, then you can read and write to the surface at any time, and the
>    * pixel format of the surface will not change.
830,831c809
<    * @param enabled true to enable color key, false to disable color key.
<    * @param key the transparent pixel.
---
>    * @param key the transparent pixel or std::nullopt to disable it.
843a822,830
>   /**
>    * Unset the color key (transparent pixel) in a surface.
>    *
>    * The color key defines a pixel value that will be treated as transparent in
>    * a blit. For example, one can use this to specify that cyan pixels should be
>    * considered transparent, and therefore not rendered.
>    *
>    * @throws Error on failure.
>    */
849,850d835
<    * It is safe to pass a nullptr `surface` here; it will return false.
<    *
870c855
<    * @param key a pointer filled in with the transparent pixel.
---
>    * @returns the transparent pixel or nullopt if none.
945d929
<    * @param alpha a pointer filled in with the current alpha value.
956a941,954
>   /**
>    * Set an additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * When this surface is blitted, during the blit operation each source color
>    * channel is modulated by the appropriate color value according to the
>    * following formula:
>    *
>    * `srcC = srcC * (color / 255)`
>    * `srcA = srcA * (alpha / 255)`
>    *
>    * @param color the color to be multiplied in blit operations
>    * @throws Error on failure.
>    */
958a957,963
>   /**
>    * Get the additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * @returns a Color containing RGBA value on success or std::nullopt on
>    * failure; call GetError() for more information.
>    */
982c987
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode.
1010a1016
>    * @sa Surface.ResetClipRect()
1014a1021,1025
>   /**
>    * Disable the clipping rectangle for a surface.
>    *
>    * @sa SetClipRect()
>    */
1023,1025c1034,1035
<    *                clipped.
<    * @param rect an Rect structure filled in with the clipping rectangle for
<    *             the surface.
---
>    * @returns the Rect structure filled in with the clipping rectangle for the
>    *          surface on success.
1054,1055d1063
<    * The returned surface should be freed with Surface.Destroy().
<    *
1071,1074c1079
<    * The returned surface should be freed with Surface.Destroy().
<    *
<    * @param width the width of the new surface.
<    * @param height the height of the new surface.
---
>    * @param size the width and height of the new surface.
1166c1171
<    * otherwise the color is assumed to be in the colorspace of the suface.
---
>    * otherwise the color is assumed to be in the colorspace of the surface.
1168,1171c1173
<    * @param r the red component of the pixel, normally in the range 0-1.
<    * @param g the green component of the pixel, normally in the range 0-1.
<    * @param b the blue component of the pixel, normally in the range 0-1.
<    * @param a the alpha component of the pixel, normally in the range 0-1.
---
>    * @param c the color components of the pixel, normally in the range 0-1.
1179a1182,1191
>   /**
>    * Perform a fast fill of a rectangle with a specific color.
>    *
>    * If there is a clip rectangle set on the destination (set via
>    * Surface.SetClipRect()), then this function will fill based on the
>    * intersection of the clip rectangle and `rect`.
>    *
>    * @param color the color to fill with.
>    * @throws Error on failure.
>    */
1186c1198
<    * generated by MapRGB() or MapColor(). If the color value contains an
---
>    * generated by MapColor(). If the color value contains an
1211c1223
<    * generated by MapRGB() or MapColor(). If the color value contains an
---
>    * generated by MapColor(). If the color value contains an
1220d1231
<    * @param count the number of rectangles in the array.
1283a1295
>    * @param src the SurfaceRaw structure to be copied from.
1286d1297
<    * @param dst the Surface structure that is the blit target.
1304a1316,1385
>   /**
>    * Performs a fast blit from the source surface to the destination surface
>    * with clipping.
>    *
>    * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>    * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>    *
>    * The blit function should not be called on a locked surface.
>    *
>    * The blit semantics for surfaces with and without blending and colorkey are
>    * defined as follows:
>    *
>    * ```
>    *    RGBA->RGB:
>    *      Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB, set destination alpha to source per-surface alpha value.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    *
>    *   RGBA->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy all of RGBA to the destination.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGB:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    * ```
>    *
>    * @param src the SurfaceRaw structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be
>    *                copied, or nullptr to copy the entire surface.
>    * @param dstpos the Point structure representing the x and y position in
>    *                the destination surface, or nullptr for (0,0). The width and
>    *                height are ignored, and are copied from `srcrect`. If you
>    *                want a specific width and height, you should use
>    *                Surface.BlitScaled().
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    * @sa Surface.BlitScaled
>    */
1309c1390
<     static_assert(false, "Not implemented");
---
>     Blit(src, srcrect, Rect{dstpos, {}});
1317a1399
>    * @param src the Surface structure to be copied from.
1320d1401
<    * @param dst the Surface structure that is the blit target.
1339a1421
>    * @param src the Surface structure to be copied from.
1342d1423
<    * @param dst the Surface structure that is the blit target.
1366a1448
>    * @param src the Surface structure to be copied from.
1369d1450
<    * @param dst the Surface structure that is the blit target.
1391a1473
>    * @param src the Surface structure to be copied from.
1394d1475
<    * @param dst the Surface structure that is the blit target.
1421a1503
>    * @param src the SDL_Surface structure to be copied from.
1424d1505
<    * @param dst the Surface structure that is the blit target.
1447a1529
>    * @param src the SDL_Surface structure to be copied from.
1454d1535
<    * @param dst the Surface structure that is the blit target.
1482a1564
>    * @param src the SDL_Surface structure to be copied from.
1489a1572,1574
>    * @param dstrect the Rect structure representing the target rectangle in
>    *                the destination surface, or nullptr to fill the entire
>    *                surface.
1493,1496d1577
<    * @param dst the Surface structure that is the blit target.
<    * @param dstrect the Rect structure representing the target rectangle in
<    *                the destination surface, or nullptr to fill the entire
<    * surface.
1565,1568c1646
<    * @param r the red component of the pixel in the range 0-255.
<    * @param g the green component of the pixel in the range 0-255.
<    * @param b the blue component of the pixel in the range 0-255.
<    * @param a the alpha component of the pixel in the range 0-255.
---
>    * @param c the color components of the pixel in the range 0-255.
1588,1589c1666
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1616,1628c1693,1694
<    * Like GetRGBA, this uses the entire 0..255 range when converting color
<    * components from pixel formats with less than 8 bits per RGB component.
<    *
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r a pointer filled in with the red channel, 0-255, or nullptr to
<    * ignore this channel.
<    * @param g a pointer filled in with the green channel, 0-255, or nullptr to
<    *          ignore this channel.
<    * @param b a pointer filled in with the blue channel, 0-255, or nullptr to
<    *          ignore this channel.
<    * @param a a pointer filled in with the alpha channel, 0-255, or nullptr to
<    *          ignore this channel.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
1643,1644c1709
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1671,1680c1736,1737
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r a pointer filled in with the red channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param g a pointer filled in with the green channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param b a pointer filled in with the blue channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param a a pointer filled in with the alpha channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
1698,1703c1755,1756
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, 0-255.
<    * @param g the green channel value, 0-255.
<    * @param b the blue channel value, 0-255.
<    * @param a the alpha channel value, 0-255.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, 0-255.
1718,1723c1771,1772
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, normally in the range 0-1.
<    * @param g the green channel value, normally in the range 0-1.
<    * @param b the blue channel value, normally in the range 0-1.
<    * @param a the alpha channel value, normally in the range 0-1.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, normally in the range 0-1.
1731a1781,1783
>   /**
>    * Get the width in pixels.
>    */
1733a1786,1788
>   /**
>    * Get the height in pixels.
>    */
1735a1791,1793
>   /**
>    * Get the size in pixels.
>    */
1737a1796,1798
>   /**
>    * Get pitch in bytes.
>    */
1739a1801,1803
>   /**
>    * Get the pixel format.
>    */
1741a1806,1808
>   /**
>    * Get the pixels.
>    */
1750,1751c1817
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1781,1782c1847
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1856c1921
<   return CheckError(SDL_GetSurfaceProperties(surface));
---
>   return {CheckError(SDL_GetSurfaceProperties(surface))};
1877,1880d1941
< #endif // SDL_VERSION_ATLEAST(3, 2, 6)
< 
< #if SDL_VERSION_ATLEAST(3, 2, 6)
< 
1970c2031
<   return CheckError(SDL_CreateSurfacePalette(surface));
---
>   return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(surface)));
2019c2080
<   return SDL_GetSurfacePalette(surface);
---
>   return Palette::Borrow(SDL_GetSurfacePalette(surface));
2096,2097d2156
<  * @param count a pointer filled in with the number of surface pointers
<  *              returned, may be nullptr.
2099,2100c2158
<  *          failure; call GetError() for more information. This should be
<  *          freed with free() when it is no longer needed.
---
>  *          failure; call GetError() for more information.
2112c2170,2172
<   return SDL_GetSurfaceImages(surface);
---
>   int count = 0;
>   auto data = SDL_GetSurfaceImages(surface, &count);
>   return OwnArray<SurfaceRaw>(CheckError(data), count);
2154c2214
<  * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates to
---
>  * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
2373,2374c2433
<  * @param enabled true to enable color key, false to disable color key.
<  * @param key the transparent pixel.
---
>  * @param key the transparent pixel or std::nullopt to disable it.
2387c2446
<   CheckError(SDL_SetSurfaceColorKey(surface, key));
---
>   CheckError(SDL_SetSurfaceColorKey(surface, key.has_value(), key.value_or(0)));
2394a2454,2463
> /**
>  * Unset the color key (transparent pixel) in a surface.
>  *
>  * The color key defines a pixel value that will be treated as transparent in
>  * a blit. For example, one can use this to specify that cyan pixels should be
>  * considered transparent, and therefore not rendered.
>  *
>  * @param surface the Surface structure to update.
>  * @throws Error on failure.
>  */
2397c2466
<   static_assert(false, "Not implemented");
---
>   SetSurfaceColorKey(surface, std::nullopt);
2436c2505
<  * @param key a pointer filled in with the transparent pixel.
---
>  * @returns the transparent pixel or nullopt if none.
2448c2517,2518
<   return CheckError(SDL_GetSurfaceColorKey(surface));
---
>   if (Uint32 key; SDL_GetSurfaceColorKey(surface, &key)) return key;
>   return std::nullopt;
2550c2620
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
2562c2632,2634
<   return CheckError(SDL_GetSurfaceAlphaMod(surface));
---
>   Uint8 alpha;
>   CheckError(SDL_GetSurfaceAlphaMod(surface, &alpha));
>   return alpha;
2569a2642,2656
> /**
>  * Set an additional color and alpha value multiplied into blit
>  * operations.
>  *
>  * When this surface is blitted, during the blit operation each source color
>  * channel is modulated by the appropriate color value according to the
>  * following formula:
>  *
>  * `srcC = srcC * (color / 255)`
>  * `srcA = srcA * (alpha / 255)`
>  *
>  * @param surface the Surface structure to query.
>  * @param color the color to be multiplied in blit operations
>  * @throws Error on failure.
>  */
2572c2659,2660
<   static_assert(false, "Not implemented");
---
>   SetSurfaceColorMod(surface, color.r, color.g, color.b);
>   SetSurfaceAlphaMod(surface, color.a);
2575,2578c2663
< inline void Surface::SetMod(Color color)
< {
<   SDL::SetSurfaceMod(m_resource, color);
< }
---
> inline void Surface::SetMod(Color color) { SetSurfaceMod(m_resource, color); }
2579a2665,2672
> /**
>  * Get the additional color and alpha value multiplied into blit
>  * operations.
>  *
>  * @param surface the Surface structure to query.
>  * @returns a Color containing RGBA value on success or std::nullopt on
>  * failure; call GetError() for more information.
>  */
2582c2675,2678
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetSurfaceColorMod(surface, &c.r, &c.g, &c.b);
>   c.a = GetSurfaceAlphaMod(surface);
>   return c;
2618c2714
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @returns the current BlendMode.
2629c2725,2727
<   return CheckError(SDL_GetSurfaceBlendMode(surface));
---
>   BlendMode blendmode;
>   CheckError(SDL_GetSurfaceBlendMode(surface, &blendmode));
>   return blendmode;
2668a2767,2771
> /**
>  * Disable the clipping rectangle for a surface.
>  *
>  * @sa SetSurfaceClipRect()
>  */
2671c2774
<   static_assert(false, "Not implemented");
---
>   SetSurfaceClipRect(surface, std::nullopt);
2684,2685c2787,2788
<  * @param rect an Rect structure filled in with the clipping rectangle for
<  *             the surface.
---
>  * @returns the Rect structure filled in with the clipping rectangle for the
>  *          surface.
2696c2799,2801
<   return CheckError(SDL_GetSurfaceClipRect(surface));
---
>   Rect r;
>   CheckError(SDL_GetSurfaceClipRect(surface, &r));
>   return r;
2742c2847
<   return SDL_DuplicateSurface(surface);
---
>   return Surface(SDL_DuplicateSurface(surface));
2757,2758c2862
<  * @param width the width of the new surface.
<  * @param height the height of the new surface.
---
>  * @param size the width and height of the surface.
2773c2877
<   return SDL_ScaleSurface(surface, size, scaleMode);
---
>   return Surface(SDL_ScaleSurface(surface, size.x, size.y, scaleMode));
2809c2913
<   return SDL_ConvertSurface(surface, format);
---
>   return Surface(SDL_ConvertSurface(surface, format));
2817,2825d2920
< inline Surface Surface::Convert(PixelFormat format,
<                                 PaletteParam palette,
<                                 Colorspace colorspace,
<                                 PropertiesParam props) const
< {
<   return SDL::ConvertSurfaceAndColorspace(
<     m_resource, format, palette, colorspace, props);
< }
< 
2859,2860c2954,2964
<   return SDL_ConvertSurfaceAndColorspace(
<     surface, format, palette, colorspace, props);
---
>   return Surface{SDL_ConvertSurfaceAndColorspace(
>     surface, format, palette, colorspace, props)};
> }
> 
> inline Surface Surface::Convert(PixelFormat format,
>                                 PaletteParam palette,
>                                 Colorspace colorspace,
>                                 PropertiesParam props) const
> {
>   return SDL::ConvertSurfaceAndColorspace(
>     m_resource, format, palette, colorspace, props);
2866,2867c2970
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height of the surface.
2893c2996
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch));
---
>     size.x, size.y, src_format, src, src_pitch, dst_format, dst, dst_pitch));
2900,2901c3003
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height  of the block to copy, in pixels.
2938c3040,3041
<   CheckError(SDL_ConvertPixelsAndColorspace(size,
---
>   CheckError(SDL_ConvertPixelsAndColorspace(size.x,
>                                             size.y,
2956,2957c3059
<  * @param width the width of the block to convert, in pixels.
<  * @param height the height of the block to convert, in pixels.
---
>  * @param size the width and height of the surface.
2983,2984c3085,3093
<   CheckError(SDL_PremultiplyAlpha(
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch, linear));
---
>   CheckError(SDL_PremultiplyAlpha(size.x,
>                                   size.y,
>                                   src_format,
>                                   src,
>                                   src_pitch,
>                                   dst_format,
>                                   dst,
>                                   dst_pitch,
>                                   linear));
3020,3023c3129
<  * @param r the red component of the pixel, normally in the range 0-1.
<  * @param g the green component of the pixel, normally in the range 0-1.
<  * @param b the blue component of the pixel, normally in the range 0-1.
<  * @param a the alpha component of the pixel, normally in the range 0-1.
---
>  * @param c the color components of the pixel, normally in the range 0-1.
3032c3138
<   CheckError(SDL_ClearSurface(surface, c));
---
>   CheckError(SDL_ClearSurface(surface, c.r, c.g, c.b, c.a));
3044c3150
<  * generated by MapRGB() or MapColor(). If the color value contains an
---
>  * generated by MapColor(). If the color value contains an
3075a3182,3192
> /**
>  * Perform a fast fill of a rectangle with a specific color.
>  *
>  * If there is a clip rectangle set on the destination (set via
>  * Surface.SetClipRect()), then this function will fill based on the
>  * intersection of the clip rectangle and `rect`.
>  *
>  * @param dst the Surface structure that is the drawing target.
>  * @param color the color to fill with.
>  * @throws Error on failure.
>  */
3078c3195
<   static_assert(false, "Not implemented");
---
>   FillSurfaceRect(dst, std::nullopt, color);
3087c3204
<  * generated by MapRGB() or MapColor(). If the color value contains an
---
>  * generated by MapColor(). If the color value contains an
3097d3213
<  * @param count the number of rectangles in the array.
3111c3227
<   CheckError(SDL_FillSurfaceRects(dst, rects, color));
---
>   CheckError(SDL_FillSurfaceRects(dst, rects.data(), rects.size(), color));
3201c3317
<   SDL::BlitSurface(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurface(src, srcrect, m_resource, dstrect);
3203a3320,3386
> /**
>  * Performs a fast blit from the source surface to the destination surface
>  * with clipping.
>  *
>  * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>  * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>  *
>  * The blit function should not be called on a locked surface.
>  *
>  * The blit semantics for surfaces with and without blending and colorkey are
>  * defined as follows:
>  *
>  * ```
>  *    RGBA->RGB:
>  *      Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB, set destination alpha to source per-surface alpha value.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  *
>  *   RGBA->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy all of RGBA to the destination.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGB:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  * ```
>  *
>  * @param src the Surface structure to be copied from.
>  * @param srcrect the Rect structure representing the rectangle to be
>  *                copied, or nullptr to copy the entire surface.
>  * @param dst the Surface structure that is the blit target.
>  * @param dstpos the Point structure representing the x and y position in
>  *                the destination surface.
>  * @throws Error on failure.
>  *
>  * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>  *               at any given time.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Surface.BlitSurface
>  */
3209c3392
<   static_assert(false, "Not implemented");
---
>   BlitSurface(src, srcrect, dst, SDL_Rect{dstpos.x, dstpos.y});
3238c3421
<   CheckError(SDL_BlitSurfaceUnchecked(src, srcrect, dst, dstrect));
---
>   CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, dst, &dstrect));
3245c3428
<   SDL::BlitSurfaceUnchecked(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurfaceUnchecked(src, srcrect, m_resource, dstrect);
3283c3466
<   SDL::BlitSurfaceScaled(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::BlitSurfaceScaled(src, srcrect, m_resource, dstrect, scaleMode);
3315c3498
<     SDL_BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode));
---
>     SDL_BlitSurfaceUncheckedScaled(src, &srcrect, dst, &dstrect, scaleMode));
3323c3506
<   SDL::BlitSurfaceUncheckedScaled(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::BlitSurfaceUncheckedScaled(src, srcrect, m_resource, dstrect, scaleMode);
3357,3360d3539
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
3366c3545
<   SDL::StretchSurface(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::StretchSurface(src, srcrect, m_resource, dstrect, scaleMode);
3406c3585
<   SDL::BlitSurfaceTiled(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurfaceTiled(src, srcrect, m_resource, dstrect);
3454c3633
<     m_resource, src, srcrect, scale, scaleMode, dstrect);
---
>     src, srcrect, scale, scaleMode, m_resource, dstrect);
3475,3477d3653
<  * @param scale the scale used to transform the corner of `srcrect` into the
<  *              corner of `dstrect`, or 0.0f for an unscaled blit.
<  * @param scaleMode scale algorithm to be used.
3481c3657,3660
<  * surface.
---
>  *                surface.
>  * @param scale the scale used to transform the corner of `srcrect` into the
>  *              corner of `dstrect`, or 0.0f for an unscaled blit.
>  * @param scaleMode scale algorithm to be used.
3508,3509d3686
<                                   dst,
<                                   dstrect,
3511c3688,3690
<                                   scaleMode));
---
>                                   scaleMode,
>                                   dst,
>                                   dstrect));
3524,3525c3703
<   SDL::BlitSurface9Grid(m_resource,
<                         src,
---
>   SDL::BlitSurface9Grid(src,
3530a3709
>                         m_resource,
3598,3601c3777
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
---
>  * @param c the color components of the pixel in the range 0-255.
3612c3788
<   return SDL_MapSurfaceRGBA(surface, c);
---
>   return SDL_MapSurfaceRGBA(surface, c.r, c.g, c.b, c.a);
3630,3631c3806
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
3653c3828
<   CheckError(SDL_ReadSurfacePixel(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixel(surface, p.x, p.y, r, g, b, a));
3666,3675c3841,3842
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r a pointer filled in with the red channel, 0-255, or nullptr to
<  * ignore this channel.
<  * @param g a pointer filled in with the green channel, 0-255, or nullptr to
<  *          ignore this channel.
<  * @param b a pointer filled in with the blue channel, 0-255, or nullptr to
<  *          ignore this channel.
<  * @param a a pointer filled in with the alpha channel, 0-255, or nullptr to
<  *          ignore this channel.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>  * @returns color on success.
3684c3851,3853
<   static_assert(false, "Not implemented");
---
>   Color c;
>   ReadSurfacePixel(surface, p, &c.r, &c.g, &c.b, &c.a);
>   return c;
3708,3709c3877
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
3731c3899
<   CheckError(SDL_ReadSurfacePixelFloat(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixelFloat(surface, p.x, p.y, r, g, b, a));
3741,3750c3909,3910
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r a pointer filled in with the red channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param g a pointer filled in with the green channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param b a pointer filled in with the blue channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param a a pointer filled in with the alpha channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>  * @returns color on success.
3760c3920,3922
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   ReadSurfacePixelFloat(surface, p, &c.r, &c.g, &c.b, &c.a);
>   return c;
3787,3792c3949,3950
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, 0-255.
<  * @param g the green channel value, 0-255.
<  * @param b the blue channel value, 0-255.
<  * @param a the alpha channel value, 0-255.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels value, 0-255.
3803c3961
<   CheckError(SDL_WriteSurfacePixel(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixel(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3818,3823c3976,3977
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, normally in the range 0-1.
<  * @param g the green channel value, normally in the range 0-1.
<  * @param b the blue channel value, normally in the range 0-1.
<  * @param a the alpha channel value, normally in the range 0-1.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels values, normally in the range 0-1.
3834c3988
<   CheckError(SDL_WriteSurfacePixelFloat(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixelFloat(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3841a3996,3998
> /**
>  * Get the width in pixels.
>  */
3844c4001
<   static_assert(false, "Not implemented");
---
>   return surface.value->w;
3851a4009,4011
> /**
>  * Get the height in pixels.
>  */
3854c4014
<   static_assert(false, "Not implemented");
---
>   return surface.value->h;
3861a4022,4024
> /**
>  * Get the size in pixels.
>  */
3864c4027
<   static_assert(false, "Not implemented");
---
>   return Point(surface.value->w, surface.value->h);
3871a4035,4037
> /**
>  * Get pitch in bytes.
>  */
3874c4040
<   static_assert(false, "Not implemented");
---
>   return surface.value->pitch;
3881a4048,4050
> /**
>  * Get the pixel format.
>  */
3884c4053
<   static_assert(false, "Not implemented");
---
>   return surface.value->format;
3891a4061,4063
> /**
>  * Get the pixels.
>  */
3894c4066
<   static_assert(false, "Not implemented");
---
>   return surface.value->pixels;
