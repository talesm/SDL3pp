19c19
<  * @defgroup CategorySurface Category Surface
---
>  * @defgroup CategorySurface Surface Creation and Simple Drawing
76c76
<   /// Constructs from const SurfaceRaw
---
>   /// Constructs from SurfaceRaw
130c130
< constexpr bool MustLock(SurfaceConstParam S) const { return SDL_MUSTLOCK(S); }
---
> constexpr bool MustLock(SurfaceConstParam S) { return SDL_MUSTLOCK((S.value)); }
188a189,190
>  * @cat resource
>  *
191,192d192
<  *
<  * @cat resource
228,229c228
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
231,232c230
<    * @post the new Surface structure that is created or nullptr on failure;
<    *          call GetError() for more information.
---
>    * @throws Error on failure.
242c240
<     : m_resource(SDL_CreateSurface(size, format))
---
>     : m_resource(CheckError(SDL_CreateSurface(size.x, size.y, format)))
259,260c257
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
264,265c261
<    * @post the new Surface structure that is created or nullptr on failure;
<    *          call GetError() for more information.
---
>    * @throws Error on failure.
275c271,272
<     : m_resource(SDL_CreateSurfaceFrom(size, format, pixels, pitch))
---
>     : m_resource(CheckError(
>         SDL_CreateSurfaceFrom(size.x, size.y, format, pixels, pitch)))
308,312d304
<    * When done with the returned surface, the app should dispose of it with a
<    * call to
<    * [Surface.Destroy](https://wiki.libsdl.org/SDL3/Surface.Destroy)
<    * ().
<    *
362,364d353
<    * When done with the returned surface, the app should dispose of it with a
<    * call to Surface.Destroy().
<    *
376c365
<   Surface(IOStreamParam src, bool closeio);
---
>   Surface(IOStreamParam src, bool closeio = false);
487c476
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
530,531c519
<    * @param colorspace an Colorspace value describing the surface
<    *                   colorspace.
---
>    * @param colorspace a Colorspace value describing the surface colorspace.
630,631c618
<    * @param image a pointer to an alternate Surface to associate with this
<    *              surface.
---
>    * @param image an alternate Surface to associate with this surface.
665,670d651
<    * Freeing the array of surfaces does not affect the surfaces in the array.
<    * They are still referenced by the surface being queried and will be cleaned
<    * up normally.
<    *
<    * @param count a pointer filled in with the number of surface pointers
<    *              returned, may be nullptr.
672,673c653
<    *          failure; call GetError() for more information. This should be
<    *          freed with free() when it is no longer needed.
---
>    *          failure; call GetError() for more information.
710,712c690,692
<    * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates
<    * to 0, then you can read and write to the surface at any time, and the pixel
<    * format of the surface will not change.
---
>    * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
>    * false, then you can read and write to the surface at any time, and the
>    * pixel format of the surface will not change.
829,830c809
<    * @param enabled true to enable color key, false to disable color key.
<    * @param key the transparent pixel.
---
>    * @param key the transparent pixel or std::nullopt to disable it.
842a822,830
>   /**
>    * Unset the color key (transparent pixel) in a surface.
>    *
>    * The color key defines a pixel value that will be treated as transparent in
>    * a blit. For example, one can use this to specify that cyan pixels should be
>    * considered transparent, and therefore not rendered.
>    *
>    * @throws Error on failure.
>    */
848,849d835
<    * It is safe to pass a nullptr `surface` here; it will return false.
<    *
869c855
<    * @param key a pointer filled in with the transparent pixel.
---
>    * @returns the transparent pixel or nullopt if none.
944d929
<    * @param alpha a pointer filled in with the current alpha value.
955a941,954
>   /**
>    * Set an additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * When this surface is blitted, during the blit operation each source color
>    * channel is modulated by the appropriate color value according to the
>    * following formula:
>    *
>    * `srcC = srcC * (color / 255)`
>    * `srcA = srcA * (alpha / 255)`
>    *
>    * @param color the color to be multiplied in blit operations
>    * @throws Error on failure.
>    */
957a957,963
>   /**
>    * Get the additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * @returns a Color containing RGBA value on success or std::nullopt on
>    * failure; call GetError() for more information.
>    */
981c987
<    * @param blendMode a pointer filled in with the current BlendMode.
---
>    * @returns the current BlendMode.
1009a1016
>    * @sa Surface.ResetClipRect()
1013a1021,1025
>   /**
>    * Disable the clipping rectangle for a surface.
>    *
>    * @sa SetClipRect()
>    */
1022,1024c1034,1035
<    *                clipped.
<    * @param rect an Rect structure filled in with the clipping rectangle for
<    *             the surface.
---
>    * @returns the Rect structure filled in with the clipping rectangle for the
>    *          surface on success.
1053,1054d1063
<    * The returned surface should be freed with Surface.Destroy().
<    *
1070,1073c1079
<    * The returned surface should be freed with Surface.Destroy().
<    *
<    * @param width the width of the new surface.
<    * @param height the height of the new surface.
---
>    * @param size the width and height of the new surface.
1165c1171
<    * otherwise the color is assumed to be in the colorspace of the suface.
---
>    * otherwise the color is assumed to be in the colorspace of the surface.
1167,1170c1173
<    * @param r the red component of the pixel, normally in the range 0-1.
<    * @param g the green component of the pixel, normally in the range 0-1.
<    * @param b the blue component of the pixel, normally in the range 0-1.
<    * @param a the alpha component of the pixel, normally in the range 0-1.
---
>    * @param c the color components of the pixel, normally in the range 0-1.
1183c1186
<    * generated by MapRGB() or MapColor(). If the color value contains an
---
>    * generated by MapColor(). If the color value contains an
1203a1207,1216
>   /**
>    * Perform a fast fill of a rectangle with a specific color.
>    *
>    * If there is a clip rectangle set on the destination (set via
>    * Surface.SetClipRect()), then this function will fill based on the
>    * intersection of the clip rectangle and `rect`.
>    *
>    * @param color the color to fill with.
>    * @throws Error on failure.
>    */
1210c1223
<    * generated by MapRGB() or MapColor(). If the color value contains an
---
>    * generated by MapColor(). If the color value contains an
1219d1231
<    * @param count the number of rectangles in the array.
1282a1295
>    * @param src the SurfaceRaw structure to be copied from.
1285d1297
<    * @param dst the Surface structure that is the blit target.
1303a1316,1385
>   /**
>    * Performs a fast blit from the source surface to the destination surface
>    * with clipping.
>    *
>    * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>    * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>    *
>    * The blit function should not be called on a locked surface.
>    *
>    * The blit semantics for surfaces with and without blending and colorkey are
>    * defined as follows:
>    *
>    * ```
>    *    RGBA->RGB:
>    *      Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB, set destination alpha to source per-surface alpha value.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    *
>    *   RGBA->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy all of RGBA to the destination.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGB:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    * ```
>    *
>    * @param src the SurfaceRaw structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be
>    *                copied, or nullptr to copy the entire surface.
>    * @param dstpos the Point structure representing the x and y position in
>    *                the destination surface, or nullptr for (0,0). The width and
>    *                height are ignored, and are copied from `srcrect`. If you
>    *                want a specific width and height, you should use
>    *                Surface.BlitScaled().
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    * @sa Surface.BlitScaled
>    */
1313a1396
>    * @param src the Surface structure to be copied from.
1316d1398
<    * @param dst the Surface structure that is the blit target.
1335a1418
>    * @param src the Surface structure to be copied from.
1338d1420
<    * @param dst the Surface structure that is the blit target.
1362a1445
>    * @param src the Surface structure to be copied from.
1365d1447
<    * @param dst the Surface structure that is the blit target.
1387a1470
>    * @param src the Surface structure to be copied from.
1390d1472
<    * @param dst the Surface structure that is the blit target.
1417a1500
>    * @param src the SDL_Surface structure to be copied from.
1420d1502
<    * @param dst the Surface structure that is the blit target.
1443a1526
>    * @param src the SDL_Surface structure to be copied from.
1450d1532
<    * @param dst the Surface structure that is the blit target.
1478a1561
>    * @param src the SDL_Surface structure to be copied from.
1485a1569,1571
>    * @param dstrect the Rect structure representing the target rectangle in
>    *                the destination surface, or nullptr to fill the entire
>    *                surface.
1489,1492d1574
<    * @param dst the Surface structure that is the blit target.
<    * @param dstrect the Rect structure representing the target rectangle in
<    *                the destination surface, or nullptr to fill the entire
<    * surface.
1561,1564c1643
<    * @param r the red component of the pixel in the range 0-255.
<    * @param g the green component of the pixel in the range 0-255.
<    * @param b the blue component of the pixel in the range 0-255.
<    * @param a the alpha component of the pixel in the range 0-255.
---
>    * @param c the color components of the pixel in the range 0-255.
1584,1585c1663
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1612,1624c1690,1691
<    * Like GetRGBA, this uses the entire 0..255 range when converting color
<    * components from pixel formats with less than 8 bits per RGB component.
<    *
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r a pointer filled in with the red channel, 0-255, or nullptr to
<    * ignore this channel.
<    * @param g a pointer filled in with the green channel, 0-255, or nullptr to
<    *          ignore this channel.
<    * @param b a pointer filled in with the blue channel, 0-255, or nullptr to
<    *          ignore this channel.
<    * @param a a pointer filled in with the alpha channel, 0-255, or nullptr to
<    *          ignore this channel.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
1639,1640c1706
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1667,1676c1733,1734
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r a pointer filled in with the red channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param g a pointer filled in with the green channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param b a pointer filled in with the blue channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
<    * @param a a pointer filled in with the alpha channel, normally in the range
<    *          0-1, or nullptr to ignore this channel.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
1694,1699c1752,1753
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, 0-255.
<    * @param g the green channel value, 0-255.
<    * @param b the blue channel value, 0-255.
<    * @param a the alpha channel value, 0-255.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, 0-255.
1714,1719c1768,1769
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, normally in the range 0-1.
<    * @param g the green channel value, normally in the range 0-1.
<    * @param b the blue channel value, normally in the range 0-1.
<    * @param a the alpha channel value, normally in the range 0-1.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, normally in the range 0-1.
1727a1778,1780
>   /**
>    * Get the width in pixels.
>    */
1729a1783,1785
>   /**
>    * Get the height in pixels.
>    */
1731a1788,1790
>   /**
>    * Get the size in pixels.
>    */
1733a1793,1795
>   /**
>    * Get pitch in bytes.
>    */
1735a1798,1800
>   /**
>    * Get the pixel format.
>    */
1737a1803,1805
>   /**
>    * Get the pixels.
>    */
1746,1747c1814
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1777,1778c1844
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1852c1918
<   return CheckError(SDL_GetSurfaceProperties(surface));
---
>   return {CheckError(SDL_GetSurfaceProperties(surface))};
1873,1876d1938
< #endif // SDL_VERSION_ATLEAST(3, 2, 6)
< 
< #if SDL_VERSION_ATLEAST(3, 2, 6)
< 
1966c2028
<   return CheckError(SDL_CreateSurfacePalette(surface));
---
>   return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(surface)));
2015c2077
<   return SDL_GetSurfacePalette(surface);
---
>   return Palette::Borrow(SDL_GetSurfacePalette(surface));
2092,2093d2153
<  * @param count a pointer filled in with the number of surface pointers
<  *              returned, may be nullptr.
2095,2096c2155
<  *          failure; call GetError() for more information. This should be
<  *          freed with free() when it is no longer needed.
---
>  *          failure; call GetError() for more information.
2108c2167,2169
<   return SDL_GetSurfaceImages(surface);
---
>   int count = 0;
>   auto data = SDL_GetSurfaceImages(surface, &count);
>   return OwnArray<SurfaceRaw>(CheckError(data), count);
2150c2211
<  * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates to
---
>  * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
2369,2370c2430
<  * @param enabled true to enable color key, false to disable color key.
<  * @param key the transparent pixel.
---
>  * @param key the transparent pixel or std::nullopt to disable it.
2383c2443
<   CheckError(SDL_SetSurfaceColorKey(surface, key));
---
>   CheckError(SDL_SetSurfaceColorKey(surface, key.has_value(), key.value_or(0)));
2390a2451,2460
> /**
>  * Unset the color key (transparent pixel) in a surface.
>  *
>  * The color key defines a pixel value that will be treated as transparent in
>  * a blit. For example, one can use this to specify that cyan pixels should be
>  * considered transparent, and therefore not rendered.
>  *
>  * @param surface the Surface structure to update.
>  * @throws Error on failure.
>  */
2393c2463
<   static_assert(false, "Not implemented");
---
>   SetSurfaceColorKey(surface, std::nullopt);
2432c2502
<  * @param key a pointer filled in with the transparent pixel.
---
>  * @returns the transparent pixel or nullopt if none.
2444c2514,2515
<   return CheckError(SDL_GetSurfaceColorKey(surface));
---
>   if (Uint32 key; SDL_GetSurfaceColorKey(surface, &key)) return key;
>   return std::nullopt;
2546c2617
<  * @param alpha a pointer filled in with the current alpha value.
---
>  * @returns the current alpha value.
2558c2629,2631
<   return CheckError(SDL_GetSurfaceAlphaMod(surface));
---
>   Uint8 alpha;
>   CheckError(SDL_GetSurfaceAlphaMod(surface, &alpha));
>   return alpha;
2565a2639,2653
> /**
>  * Set an additional color and alpha value multiplied into blit
>  * operations.
>  *
>  * When this surface is blitted, during the blit operation each source color
>  * channel is modulated by the appropriate color value according to the
>  * following formula:
>  *
>  * `srcC = srcC * (color / 255)`
>  * `srcA = srcA * (alpha / 255)`
>  *
>  * @param surface the Surface structure to query.
>  * @param color the color to be multiplied in blit operations
>  * @throws Error on failure.
>  */
2568c2656,2657
<   static_assert(false, "Not implemented");
---
>   SetSurfaceColorMod(surface, color.r, color.g, color.b);
>   SetSurfaceAlphaMod(surface, color.a);
2571,2574c2660
< inline void Surface::SetMod(Color color)
< {
<   SDL::SetSurfaceMod(m_resource, color);
< }
---
> inline void Surface::SetMod(Color color) { SetSurfaceMod(m_resource, color); }
2575a2662,2669
> /**
>  * Get the additional color and alpha value multiplied into blit
>  * operations.
>  *
>  * @param surface the Surface structure to query.
>  * @returns a Color containing RGBA value on success or std::nullopt on
>  * failure; call GetError() for more information.
>  */
2578c2672,2675
<   static_assert(false, "Not implemented");
---
>   Color c;
>   GetSurfaceColorMod(surface, &c.r, &c.g, &c.b);
>   c.a = GetSurfaceAlphaMod(surface);
>   return c;
2614c2711
<  * @param blendMode a pointer filled in with the current BlendMode.
---
>  * @returns the current BlendMode.
2625c2722,2724
<   return CheckError(SDL_GetSurfaceBlendMode(surface));
---
>   BlendMode blendmode;
>   CheckError(SDL_GetSurfaceBlendMode(surface, &blendmode));
>   return blendmode;
2664a2764,2768
> /**
>  * Disable the clipping rectangle for a surface.
>  *
>  * @sa SetSurfaceClipRect()
>  */
2667c2771
<   static_assert(false, "Not implemented");
---
>   SetSurfaceClipRect(surface, std::nullopt);
2680,2681c2784,2785
<  * @param rect an Rect structure filled in with the clipping rectangle for
<  *             the surface.
---
>  * @returns the Rect structure filled in with the clipping rectangle for the
>  *          surface.
2692c2796,2798
<   return CheckError(SDL_GetSurfaceClipRect(surface));
---
>   Rect r;
>   CheckError(SDL_GetSurfaceClipRect(surface, &r));
>   return r;
2738c2844
<   return SDL_DuplicateSurface(surface);
---
>   return Surface(SDL_DuplicateSurface(surface));
2753,2754c2859
<  * @param width the width of the new surface.
<  * @param height the height of the new surface.
---
>  * @param size the width and height of the surface.
2769c2874
<   return SDL_ScaleSurface(surface, size, scaleMode);
---
>   return Surface(SDL_ScaleSurface(surface, size.x, size.y, scaleMode));
2805c2910
<   return SDL_ConvertSurface(surface, format);
---
>   return Surface(SDL_ConvertSurface(surface, format));
2813,2821d2917
< inline Surface Surface::Convert(PixelFormat format,
<                                 PaletteParam palette,
<                                 Colorspace colorspace,
<                                 PropertiesParam props) const
< {
<   return SDL::ConvertSurfaceAndColorspace(
<     m_resource, format, palette, colorspace, props);
< }
< 
2855,2856c2951,2961
<   return SDL_ConvertSurfaceAndColorspace(
<     surface, format, palette, colorspace, props);
---
>   return Surface{SDL_ConvertSurfaceAndColorspace(
>     surface, format, palette, colorspace, props)};
> }
> 
> inline Surface Surface::Convert(PixelFormat format,
>                                 PaletteParam palette,
>                                 Colorspace colorspace,
>                                 PropertiesParam props) const
> {
>   return SDL::ConvertSurfaceAndColorspace(
>     m_resource, format, palette, colorspace, props);
2862,2863c2967
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height of the surface.
2889c2993
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch));
---
>     size.x, size.y, src_format, src, src_pitch, dst_format, dst, dst_pitch));
2896,2897c3000
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height  of the block to copy, in pixels.
2934c3037,3038
<   CheckError(SDL_ConvertPixelsAndColorspace(size,
---
>   CheckError(SDL_ConvertPixelsAndColorspace(size.x,
>                                             size.y,
2952,2953c3056
<  * @param width the width of the block to convert, in pixels.
<  * @param height the height of the block to convert, in pixels.
---
>  * @param size the width and height of the surface.
2979,2980c3082,3090
<   CheckError(SDL_PremultiplyAlpha(
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch, linear));
---
>   CheckError(SDL_PremultiplyAlpha(size.x,
>                                   size.y,
>                                   src_format,
>                                   src,
>                                   src_pitch,
>                                   dst_format,
>                                   dst,
>                                   dst_pitch,
>                                   linear));
3016,3019c3126
<  * @param r the red component of the pixel, normally in the range 0-1.
<  * @param g the green component of the pixel, normally in the range 0-1.
<  * @param b the blue component of the pixel, normally in the range 0-1.
<  * @param a the alpha component of the pixel, normally in the range 0-1.
---
>  * @param c the color components of the pixel, normally in the range 0-1.
3028c3135
<   CheckError(SDL_ClearSurface(surface, c));
---
>   CheckError(SDL_ClearSurface(surface, c.r, c.g, c.b, c.a));
3040c3147
<  * generated by MapRGB() or MapColor(). If the color value contains an
---
>  * generated by MapColor(). If the color value contains an
3071a3179,3189
> /**
>  * Perform a fast fill of a rectangle with a specific color.
>  *
>  * If there is a clip rectangle set on the destination (set via
>  * Surface.SetClipRect()), then this function will fill based on the
>  * intersection of the clip rectangle and `rect`.
>  *
>  * @param dst the Surface structure that is the drawing target.
>  * @param color the color to fill with.
>  * @throws Error on failure.
>  */
3074c3192
<   static_assert(false, "Not implemented");
---
>   FillSurfaceRect(dst, std::nullopt, color);
3083c3201
<  * generated by MapRGB() or MapColor(). If the color value contains an
---
>  * generated by MapColor(). If the color value contains an
3093d3210
<  * @param count the number of rectangles in the array.
3107c3224
<   CheckError(SDL_FillSurfaceRects(dst, rects, color));
---
>   CheckError(SDL_FillSurfaceRects(dst, rects.data(), rects.size(), color));
3197c3314
<   SDL::BlitSurface(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurface(src, srcrect, m_resource, dstrect);
3204c3321
<   static_assert(false, "Not implemented");
---
>   Blit(src, srcrect, Rect{dstpos, {}});
3206a3324,3390
> /**
>  * Performs a fast blit from the source surface to the destination surface
>  * with clipping.
>  *
>  * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>  * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>  *
>  * The blit function should not be called on a locked surface.
>  *
>  * The blit semantics for surfaces with and without blending and colorkey are
>  * defined as follows:
>  *
>  * ```
>  *    RGBA->RGB:
>  *      Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB, set destination alpha to source per-surface alpha value.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  *
>  *   RGBA->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy all of RGBA to the destination.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGB:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  * ```
>  *
>  * @param src the Surface structure to be copied from.
>  * @param srcrect the Rect structure representing the rectangle to be
>  *                copied, or nullptr to copy the entire surface.
>  * @param dst the Surface structure that is the blit target.
>  * @param dstpos the Point structure representing the x and y position in
>  *                the destination surface.
>  * @throws Error on failure.
>  *
>  * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>  *               at any given time.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Surface.BlitSurface
>  */
3212c3396
<   static_assert(false, "Not implemented");
---
>   BlitSurface(src, srcrect, dst, SDL_Rect{dstpos.x, dstpos.y});
3241c3425
<   CheckError(SDL_BlitSurfaceUnchecked(src, srcrect, dst, dstrect));
---
>   CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, dst, &dstrect));
3248c3432
<   SDL::BlitSurfaceUnchecked(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurfaceUnchecked(src, srcrect, m_resource, dstrect);
3286c3470
<   SDL::BlitSurfaceScaled(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::BlitSurfaceScaled(src, srcrect, m_resource, dstrect, scaleMode);
3318c3502
<     SDL_BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode));
---
>     SDL_BlitSurfaceUncheckedScaled(src, &srcrect, dst, &dstrect, scaleMode));
3326c3510
<   SDL::BlitSurfaceUncheckedScaled(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::BlitSurfaceUncheckedScaled(src, srcrect, m_resource, dstrect, scaleMode);
3360,3363d3543
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
< 
3369c3549
<   SDL::StretchSurface(m_resource, src, srcrect, dstrect, scaleMode);
---
>   SDL::StretchSurface(src, srcrect, m_resource, dstrect, scaleMode);
3409c3589
<   SDL::BlitSurfaceTiled(m_resource, src, srcrect, dstrect);
---
>   SDL::BlitSurfaceTiled(src, srcrect, m_resource, dstrect);
3457c3637
<     m_resource, src, srcrect, scale, scaleMode, dstrect);
---
>     src, srcrect, scale, scaleMode, m_resource, dstrect);
3478,3480d3657
<  * @param scale the scale used to transform the corner of `srcrect` into the
<  *              corner of `dstrect`, or 0.0f for an unscaled blit.
<  * @param scaleMode scale algorithm to be used.
3484c3661,3664
<  * surface.
---
>  *                surface.
>  * @param scale the scale used to transform the corner of `srcrect` into the
>  *              corner of `dstrect`, or 0.0f for an unscaled blit.
>  * @param scaleMode scale algorithm to be used.
3511,3512d3690
<                                   dst,
<                                   dstrect,
3514c3692,3694
<                                   scaleMode));
---
>                                   scaleMode,
>                                   dst,
>                                   dstrect));
3527,3528c3707
<   SDL::BlitSurface9Grid(m_resource,
<                         src,
---
>   SDL::BlitSurface9Grid(src,
3533a3713
>                         m_resource,
3601,3604c3781
<  * @param r the red component of the pixel in the range 0-255.
<  * @param g the green component of the pixel in the range 0-255.
<  * @param b the blue component of the pixel in the range 0-255.
<  * @param a the alpha component of the pixel in the range 0-255.
---
>  * @param c the color components of the pixel in the range 0-255.
3615c3792
<   return SDL_MapSurfaceRGBA(surface, c);
---
>   return SDL_MapSurfaceRGBA(surface, c.r, c.g, c.b, c.a);
3633,3634c3810
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
3656c3832
<   CheckError(SDL_ReadSurfacePixel(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixel(surface, p.x, p.y, r, g, b, a));
3669,3678c3845,3846
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r a pointer filled in with the red channel, 0-255, or nullptr to
<  * ignore this channel.
<  * @param g a pointer filled in with the green channel, 0-255, or nullptr to
<  *          ignore this channel.
<  * @param b a pointer filled in with the blue channel, 0-255, or nullptr to
<  *          ignore this channel.
<  * @param a a pointer filled in with the alpha channel, 0-255, or nullptr to
<  *          ignore this channel.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>  * @returns color on success.
3687c3855,3857
<   static_assert(false, "Not implemented");
---
>   Color c;
>   ReadSurfacePixel(surface, p, &c.r, &c.g, &c.b, &c.a);
>   return c;
3711,3712c3881
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
3734c3903
<   CheckError(SDL_ReadSurfacePixelFloat(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixelFloat(surface, p.x, p.y, r, g, b, a));
3744,3753c3913,3914
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r a pointer filled in with the red channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param g a pointer filled in with the green channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param b a pointer filled in with the blue channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
<  * @param a a pointer filled in with the alpha channel, normally in the range
<  *          0-1, or nullptr to ignore this channel.
---
>  * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>  * @returns color on success.
3763c3924,3926
<   static_assert(false, "Not implemented");
---
>   FColor c;
>   ReadSurfacePixelFloat(surface, p, &c.r, &c.g, &c.b, &c.a);
>   return c;
3790,3795c3953,3954
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, 0-255.
<  * @param g the green channel value, 0-255.
<  * @param b the blue channel value, 0-255.
<  * @param a the alpha channel value, 0-255.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels value, 0-255.
3806c3965
<   CheckError(SDL_WriteSurfacePixel(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixel(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3821,3826c3980,3981
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, normally in the range 0-1.
<  * @param g the green channel value, normally in the range 0-1.
<  * @param b the blue channel value, normally in the range 0-1.
<  * @param a the alpha channel value, normally in the range 0-1.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels values, normally in the range 0-1.
3837c3992
<   CheckError(SDL_WriteSurfacePixelFloat(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixelFloat(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3844a4000,4002
> /**
>  * Get the width in pixels.
>  */
3847c4005
<   static_assert(false, "Not implemented");
---
>   return surface.value->w;
3854a4013,4015
> /**
>  * Get the height in pixels.
>  */
3857c4018
<   static_assert(false, "Not implemented");
---
>   return surface.value->h;
3864a4026,4028
> /**
>  * Get the size in pixels.
>  */
3867c4031
<   static_assert(false, "Not implemented");
---
>   return Point(surface.value->w, surface.value->h);
3874a4039,4041
> /**
>  * Get pitch in bytes.
>  */
3877c4044
<   static_assert(false, "Not implemented");
---
>   return surface.value->pitch;
3884a4052,4054
> /**
>  * Get the pixel format.
>  */
3887c4057
<   static_assert(false, "Not implemented");
---
>   return surface.value->format;
3894a4065,4067
> /**
>  * Get the pixels.
>  */
3897c4070
<   static_assert(false, "Not implemented");
---
>   return surface.value->pixels;
