19c19
<  * @defgroup CategorySurface Category Surface
---
>  * @defgroup CategorySurface Surface Creation and Simple Drawing
110c110
< constexpr bool MUSTLOCK(SurfaceConstParam S) { return SDL_MUSTLOCK(S); }
---
> constexpr bool MUSTLOCK(SurfaceConstParam S) { return SDL_MUSTLOCK((S.value)); }
168a169,170
>  * @cat resource
>  *
171,172d172
<  *
<  * @cat resource
205,206c205
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
219c218
<     : m_resource(SDL_CreateSurface(size, format))
---
>     : m_resource(SDL_CreateSurface(size.x, size.y, format))
236,237c235
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
252c250
<     : m_resource(SDL_CreateSurfaceFrom(size, format, pixels, pitch))
---
>     : m_resource(SDL_CreateSurfaceFrom(size.x, size.y, format, pixels, pitch))
373c371
<     return CheckError(SDL_GetSurfaceProperties(m_resource));
---
>     return {CheckError(SDL_GetSurfaceProperties(m_resource))};
382,383c380
<    * @param colorspace an Colorspace value describing the surface
<    *                   colorspace.
---
>    * @param colorspace a Colorspace value describing the surface colorspace.
446c443
<     return CheckError(SDL_CreateSurfacePalette(m_resource));
---
>     return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(m_resource)));
481c478,483
<   Palette GetPalette() const { return SDL_GetSurfacePalette(m_resource); }
---
>   Palette GetPalette() const
>   {
>     auto p = SDL_GetSurfacePalette(m_resource);
>     if (!p) return {};
>     return Palette::Borrow(p);
>   }
494,495c496
<    * @param image a pointer to an alternate Surface to associate with this
<    *              surface.
---
>    * @param image an alternate Surface to associate with this surface.
535,541d535
<    * Freeing the array of surfaces does not affect the surfaces in the array.
<    * They are still referenced by the surface being queried and will be cleaned
<    * up normally.
<    *
<    * @param surface the Surface structure to query.
<    * @param count a pointer filled in with the number of surface pointers
<    *              returned, may be nullptr.
543,544c537
<    *          failure; call GetError() for more information. This should be
<    *          freed with free() when it is no longer needed.
---
>    *          failure; call GetError() for more information.
556c549,551
<     return SDL_GetSurfaceImages(m_resource);
---
>     int count = 0;
>     auto data = SDL_GetSurfaceImages(m_resource, &count);
>     return OwnArray<SurfaceRaw>(CheckError(data), count);
579c574
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
591,593c586,588
<    * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates
<    * to 0, then you can read and write to the surface at any time, and the pixel
<    * format of the surface will not change.
---
>    * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
>    * false, then you can read and write to the surface at any time, and the
>    * pixel format of the surface will not change.
719,720c714
<    * @param enabled true to enable color key, false to disable color key.
<    * @param key the transparent pixel.
---
>    * @param key the transparent pixel or std::nullopt to disable it.
733c727,728
<     CheckError(SDL_SetSurfaceColorKey(m_resource, key));
---
>     CheckError(
>       SDL_SetSurfaceColorKey(m_resource, key.has_value(), key.value_or(0)));
736c731,740
<   void ClearColorKey() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Unset the color key (transparent pixel) in a surface.
>    *
>    * The color key defines a pixel value that will be treated as transparent in
>    * a blit. For example, one can use this to specify that cyan pixels should be
>    * considered transparent, and therefore not rendered.
>    *
>    * @throws Error on failure.
>    */
>   void ClearColorKey() { SetColorKey(std::nullopt); }
741,742d744
<    * It is safe to pass a nullptr `surface` here; it will return false.
<    *
774c776,777
<     return CheckError(SDL_GetSurfaceColorKey(m_resource));
---
>     if (Uint32 key; SDL_GetSurfaceColorKey(m_resource, &key)) return key;
>     return std::nullopt;
849d851
<    * @param alpha a pointer filled in with the current alpha value.
861c863,865
<     return CheckError(SDL_GetSurfaceAlphaMod(m_resource));
---
>     Uint8 alpha;
>     CheckError(SDL_GetSurfaceAlphaMod(m_resource, &alpha));
>     return alpha;
864c868,886
<   void SetMod(Color color) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * When this surface is blitted, during the blit operation each source color
>    * channel is modulated by the appropriate color value according to the
>    * following formula:
>    *
>    * `srcC = srcC * (color / 255)`
>    * `srcA = srcA * (alpha / 255)`
>    *
>    * @param color the color to be multiplied in blit operations
>    * @throws Error on failure.
>    */
>   void SetMod(Color color)
>   {
>     SetColorMod(color.r, color.g, color.b);
>     SetAlphaMod(color.a);
>   }
866c888,901
<   Color GetMod() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * @returns a Color containing RGBA value on success or std::nullopt on
>    * failure; call GetError() for more information.
>    */
>   Color GetMod() const
>   {
>     Color c;
>     GetColorMod(&c.r, &c.g, &c.b);
>     c.a = GetAlphaMod();
>     return c;
>   }
903c938,940
<     return CheckError(SDL_GetSurfaceBlendMode(m_resource));
---
>     BlendMode blendmode;
>     CheckError(SDL_GetSurfaceBlendMode(m_resource, &blendmode));
>     return blendmode;
923a961
>    * @sa Surface.ResetClipRect()
931c969,974
<   void ResetClipRect() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Disable the clipping rectangle for a surface.
>    *
>    * @sa SetClipRect()
>    */
>   void ResetClipRect() { SDL_SetSurfaceClipRect(m_resource, nullptr); }
939,941c982,983
<    *                clipped.
<    * @param rect an Rect structure filled in with the clipping rectangle for
<    *             the surface.
---
>    * @returns the Rect structure filled in with the clipping rectangle for the
>    *          surface on success.
952c994,996
<     return CheckError(SDL_GetSurfaceClipRect(m_resource));
---
>     Rect r;
>     CheckError(SDL_GetSurfaceClipRect(m_resource, &r));
>     return r;
973,974d1016
<    * The returned surface should be freed with Surface.Destroy().
<    *
984c1026,1029
<   Surface Duplicate() const { return SDL_DuplicateSurface(m_resource); }
---
>   Surface Duplicate() const
>   {
>     return Surface{SDL_DuplicateSurface(m_resource)};
>   }
990,993c1035
<    * The returned surface should be freed with Surface.Destroy().
<    *
<    * @param width the width of the new surface.
<    * @param height the height of the new surface.
---
>    * @param size the width and height of the new surface.
1006c1048
<     return SDL_ScaleSurface(m_resource, size, scaleMode);
---
>     return Surface{SDL_ScaleSurface(m_resource, size.x, size.y, scaleMode)};
1036c1078
<     return SDL_ConvertSurface(m_resource, format);
---
>     return Surface(SDL_ConvertSurface(m_resource, format));
1070,1071c1112,1113
<     return SDL_ConvertSurfaceAndColorspace(
<       m_resource, format, palette, colorspace, props);
---
>     return Surface(SDL_ConvertSurfaceAndColorspace(
>       m_resource, format, palette, colorspace, props));
1098c1140
<    * otherwise the color is assumed to be in the colorspace of the suface.
---
>    * otherwise the color is assumed to be in the colorspace of the surface.
1100,1103c1142
<    * @param r the red component of the pixel, normally in the range 0-1.
<    * @param g the green component of the pixel, normally in the range 0-1.
<    * @param b the blue component of the pixel, normally in the range 0-1.
<    * @param a the alpha component of the pixel, normally in the range 0-1.
---
>    * @param c the color components of the pixel, normally in the range 0-1.
1112c1151,1152
<     CheckError(SDL_ClearSurface(m_resource, color));
---
>     CheckError(
>       SDL_ClearSurface(m_resource, color.r, color.g, color.b, color.a));
1115c1155,1165
<   void Fill(Uint32 color) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Perform a fast fill of a rectangle with a specific color.
>    *
>    * If there is a clip rectangle set on the destination (set via
>    * Surface.SetClipRect()), then this function will fill based on the
>    * intersection of the clip rectangle and `rect`.
>    *
>    * @param color the color to fill with.
>    * @throws Error on failure.
>    */
>   void Fill(Uint32 color) { FillRect({}, color); }
1158d1207
<    * @param count the number of rectangles in the array.
1170c1219,1220
<     CheckError(SDL_FillSurfaceRects(m_resource, rects, color));
---
>     CheckError(
>       SDL_FillSurfaceRects(m_resource, rects.data(), rects.size(), color));
1224a1275
>    * @param src the SurfaceRaw structure to be copied from.
1227d1277
<    * @param dst the Surface structure that is the blit target.
1246c1296
<     CheckError(SDL_BlitSurface(m_resource, src, srcrect, dstrect));
---
>     CheckError(SDL_BlitSurface(src, srcrect, m_resource, dstrect));
1248a1299,1368
>   /**
>    * Performs a fast blit from the source surface to the destination surface
>    * with clipping.
>    *
>    * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>    * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>    *
>    * The blit function should not be called on a locked surface.
>    *
>    * The blit semantics for surfaces with and without blending and colorkey are
>    * defined as follows:
>    *
>    * ```
>    *    RGBA->RGB:
>    *      Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB, set destination alpha to source per-surface alpha value.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    *
>    *   RGBA->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy all of RGBA to the destination.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGB:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    * ```
>    *
>    * @param src the SurfaceRaw structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be
>    *                copied, or nullptr to copy the entire surface.
>    * @param dstpos the Point structure representing the x and y position in
>    *                the destination surface, or nullptr for (0,0). The width and
>    *                height are ignored, and are copied from `srcrect`. If you
>    *                want a specific width and height, you should use
>    *                Surface.BlitScaled().
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    * @sa Surface.BlitScaled
>    */
1253c1373
<     static_assert(false, "Not implemented");
---
>     Blit(src, srcrect, Rect{dstpos, {}});
1261a1382
>    * @param src the Surface structure to be copied from.
1264d1384
<    * @param dst the Surface structure that is the blit target.
1280c1400
<     CheckError(SDL_BlitSurfaceUnchecked(m_resource, src, srcrect, dstrect));
---
>     CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, m_resource, &dstrect));
1286a1407
>    * @param src the Surface structure to be copied from.
1289d1409
<    * @param dst the Surface structure that is the blit target.
1309c1429
<       SDL_BlitSurfaceScaled(m_resource, src, srcrect, dstrect, scaleMode));
---
>       SDL_BlitSurfaceScaled(src, srcrect, m_resource, dstrect, scaleMode));
1317a1438
>    * @param src the Surface structure to be copied from.
1320d1440
<    * @param dst the Surface structure that is the blit target.
1338,1339c1458,1459
<     CheckError(SDL_BlitSurfaceUncheckedScaled(
<       m_resource, src, srcrect, dstrect, scaleMode));
---
>     CheckError(
>       SDL_BlitSurfaceScaled(src, &srcrect, m_resource, &dstrect, scaleMode));
1346a1467
>    * @param src the Surface structure to be copied from.
1349d1469
<    * @param dst the Surface structure that is the blit target.
1359c1479
<    * @since This function is available since SDL 3.4.0.
---
>    * @since This function is available since SDL 3.2.4.
1369c1489
<       SDL_StretchSurface(m_resource, src, srcrect, dstrect, scaleMode));
---
>       SDL_StretchSurface(src, srcrect, m_resource, dstrect, scaleMode));
1380a1501
>    * @param src the SDL_Surface structure to be copied from.
1383d1503
<    * @param dst the Surface structure that is the blit target.
1400c1520
<     CheckError(SDL_BlitSurfaceTiled(m_resource, src, srcrect, dstrect));
---
>     CheckError(SDL_BlitSurfaceTiled(src, srcrect, m_resource, dstrect));
1409a1530
>    * @param src the SDL_Surface structure to be copied from.
1416d1536
<    * @param dst the Surface structure that is the blit target.
1436c1556
<       m_resource, src, srcrect, scale, scaleMode, dstrect));
---
>       src, srcrect, scale, scaleMode, m_resource, dstrect));
1438a1559,1588
>   /**
>    * Perform a scaled blit using the 9-grid algorithm to a destination surface,
>    * which may be of a different format.
>    *
>    * The pixels in the source surface are split into a 3x3 grid, using the
>    * different corner sizes for each corner, and the sides and center making up
>    * the remaining pixels. The corners are then scaled using `scale` and fit
>    * into the corners of the destination rectangle. The sides and center are
>    * then stretched into place to cover the remaining destination rectangle.
>    *
>    * @param src the SDL_Surface structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be used
>    *                for the 9-grid, or nullptr to use the entire surface.
>    * @param left_width the width, in pixels, of the left corners in `srcrect`.
>    * @param right_width the width, in pixels, of the right corners in `srcrect`.
>    * @param top_height the height, in pixels, of the top corners in `srcrect`.
>    * @param bottom_height the height, in pixels, of the bottom corners in
>    *                      `srcrect`.
>    * @param dstrect the Rect structure representing the target rectangle in
>    *                the destination surface, or nullptr to fill the entire
>    * surface.
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    */
1447c1597,1605
<     static_assert(false, "Not implemented");
---
>     Blit9GridWithScale(src,
>                        srcrect,
>                        left_width,
>                        right_width,
>                        top_height,
>                        bottom_height,
>                        0.0,
>                        SDL_SCALEMODE_NEAREST,
>                        dstrect);
1459a1618
>    * @param src the SDL_Surface structure to be copied from.
1470d1628
<    * @param dst the Surface structure that is the blit target.
1493,1494c1651
<     CheckError(SDL_BlitSurface9Grid(m_resource,
<                                     src,
---
>     CheckError(SDL_BlitSurface9Grid(src,
1501a1659
>                                     m_resource,
1557,1560c1715
<    * @param r the red component of the pixel in the range 0-255.
<    * @param g the green component of the pixel in the range 0-255.
<    * @param b the blue component of the pixel in the range 0-255.
<    * @param a the alpha component of the pixel in the range 0-255.
---
>    * @param c the color components of the pixel in the range 0-255.
1569c1724,1727
<   Uint32 MapRGBA(ColorRaw c) const { return SDL_MapSurfaceRGBA(m_resource, c); }
---
>   Uint32 MapRGBA(ColorRaw c) const
>   {
>     return SDL_MapSurfaceRGBA(m_resource, c.r, c.g, c.b, c.a);
>   }
1570a1729,1741
>   /**
>    * This function prioritizes correctness over speed: it is suitable for
>    * unit tests, but is not intended for use in a game engine.
>    *
>    * Like SDL_GetRGBA, this uses the entire 0..255 range when converting color
>    * components from pixel formats with less than 8 bits per RGB component.
>    *
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    */
1573c1744,1746
<     static_assert(false, "Not implemented");
---
>     Color c;
>     ReadPixel(p, &c.r, &c.g, &c.b, &c.a);
>     return c;
1585,1586c1758
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1607c1779
<     CheckError(SDL_ReadSurfacePixel(m_resource, p, r, g, b, a));
---
>     CheckError(SDL_ReadSurfacePixel(m_resource, p.x, p.y, r, g, b, a));
1609a1782,1793
>   /**
>    * Retrieves a single pixel from a surface.
>    *
>    * This function prioritizes correctness over speed: it is suitable for unit
>    * tests, but is not intended for use in a game engine.
>    *
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    */
1612c1796,1798
<     static_assert(false, "Not implemented");
---
>     FColor c;
>     ReadPixelFloat(p, &c.r, &c.g, &c.b, &c.a);
>     return c;
1621,1622c1807
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1643c1828
<     CheckError(SDL_ReadSurfacePixelFloat(m_resource, p, r, g, b, a));
---
>     CheckError(SDL_ReadSurfacePixelFloat(m_resource, p.x, p.y, r, g, b, a));
1655,1660c1840,1841
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, 0-255.
<    * @param g the green channel value, 0-255.
<    * @param b the blue channel value, 0-255.
<    * @param a the alpha channel value, 0-255.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, 0-255.
1669c1850
<     CheckError(SDL_WriteSurfacePixel(m_resource, p, c));
---
>     CheckError(SDL_WriteSurfacePixel(m_resource, p.x, p.y, c.r, c.g, c.b, c.a));
1678,1683c1859,1860
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, normally in the range 0-1.
<    * @param g the green channel value, normally in the range 0-1.
<    * @param b the blue channel value, normally in the range 0-1.
<    * @param a the alpha channel value, normally in the range 0-1.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, normally in the range 0-1.
1692c1869,1870
<     CheckError(SDL_WriteSurfacePixelFloat(m_resource, p, c));
---
>     CheckError(
>       SDL_WriteSurfacePixelFloat(m_resource, p.x, p.y, c.r, c.g, c.b, c.a));
1695c1873,1876
<   int GetWidth() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the width in pixels.
>    */
>   constexpr int GetWidth() const { return m_resource->w; }
1697c1878,1881
<   int GetHeight() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the height in pixels.
>    */
>   constexpr int GetHeight() const { return m_resource->h; }
1699c1883,1886
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   constexpr Point GetSize() const { return Point(GetWidth(), GetHeight()); }
1701c1888,1891
<   int GetPitch() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get pitch in bytes.
>    */
>   constexpr int GetPitch() const { return m_resource->pitch; }
1703c1893,1896
<   PixelFormat GetFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixel format.
>    */
>   constexpr PixelFormat GetFormat() const { return m_resource->format; }
1705c1898,1901
<   void* GetPixels() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixels.
>    */
>   constexpr void* GetPixels() const { return m_resource->pixels; }
1732,1733c1928
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1747c1942
<   return Surface(SDL_CreateSurface(size, format));
---
>   return Surface(SDL_CreateSurface(size.x, size.y, format));
1763,1764c1958
<  * @param width the width of the surface.
<  * @param height the height of the surface.
---
>  * @param size the width and height of the surface.
1783c1977
<   return Surface(SDL_CreateSurfaceFrom(size, format, pixels, pitch));
---
>   return Surface(SDL_CreateSurfaceFrom(size.x, size.y, format, pixels, pitch));
1836c2030
<   return CheckError(SDL_GetSurfaceProperties(surface));
---
>   return {CheckError(SDL_GetSurfaceProperties(surface))};
1852,1855d2045
< #endif // SDL_VERSION_ATLEAST(3, 2, 6)
< 
< #if SDL_VERSION_ATLEAST(3, 2, 6)
< 
1935c2125
<   return CheckError(SDL_CreateSurfacePalette(surface));
---
>   return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(surface)));
1974c2164
<   return SDL_GetSurfacePalette(surface);
---
>   return Palette::Borrow(SDL_GetSurfacePalette(surface));
2052c2242,2244
<   return SDL_GetSurfaceImages(surface);
---
>   int count = 0;
>   auto data = SDL_GetSurfaceImages(surface, &count);
>   return OwnArray<SurfaceRaw>(CheckError(data), count);
2084c2276
<  * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates to
---
>  * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
2286c2478
<   CheckError(SDL_SetSurfaceColorKey(surface, key));
---
>   CheckError(SDL_SetSurfaceColorKey(surface, key.has_value(), key.value_or(0)));
2330c2522,2523
<   return CheckError(SDL_GetSurfaceColorKey(surface));
---
>   if (Uint32 key; SDL_GetSurfaceColorKey(surface, &key)) return key;
>   return std::nullopt;
2424c2617,2619
<   return CheckError(SDL_GetSurfaceAlphaMod(surface));
---
>   Uint8 alpha;
>   CheckError(SDL_GetSurfaceAlphaMod(surface, &alpha));
>   return alpha;
2464c2659,2661
<   return CheckError(SDL_GetSurfaceBlendMode(surface));
---
>   BlendMode blendmode;
>   CheckError(SDL_GetSurfaceBlendMode(surface, &blendmode));
>   return blendmode;
2514c2711,2713
<   return CheckError(SDL_GetSurfaceClipRect(surface));
---
>   Rect r;
>   CheckError(SDL_GetSurfaceClipRect(surface, &r));
>   return r;
2553c2752
<   return SDL_DuplicateSurface(surface);
---
>   return Surface(SDL_DuplicateSurface(surface));
2563,2564c2762
<  * @param width the width of the new surface.
<  * @param height the height of the new surface.
---
>  * @param size the width and height of the surface.
2579c2777
<   return SDL_ScaleSurface(surface, size, scaleMode);
---
>   return Surface(SDL_ScaleSurface(surface, size.x, size.y, scaleMode));
2610c2808
<   return SDL_ConvertSurface(surface, format);
---
>   return Surface(SDL_ConvertSurface(surface, format));
2646,2647c2844,2845
<   return SDL_ConvertSurfaceAndColorspace(
<     surface, format, palette, colorspace, props);
---
>   return Surface{SDL_ConvertSurfaceAndColorspace(
>     surface, format, palette, colorspace, props)};
2653,2654c2851
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height of the surface.
2680c2877
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch));
---
>     size.x, size.y, src_format, src, src_pitch, dst_format, dst, dst_pitch));
2687,2688c2884
<  * @param width the width of the block to copy, in pixels.
<  * @param height the height of the block to copy, in pixels.
---
>  * @param size the width and height  of the block to copy, in pixels.
2725c2921,2922
<   CheckError(SDL_ConvertPixelsAndColorspace(size,
---
>   CheckError(SDL_ConvertPixelsAndColorspace(size.x,
>                                             size.y,
2743,2744c2940
<  * @param width the width of the block to convert, in pixels.
<  * @param height the height of the block to convert, in pixels.
---
>  * @param size the width and height of the surface.
2770,2771c2966,2974
<   CheckError(SDL_PremultiplyAlpha(
<     size, src_format, src, src_pitch, dst_format, dst, dst_pitch, linear));
---
>   CheckError(SDL_PremultiplyAlpha(size.x,
>                                   size.y,
>                                   src_format,
>                                   src,
>                                   src_pitch,
>                                   dst_format,
>                                   dst,
>                                   dst_pitch,
>                                   linear));
2802,2805c3005
<  * @param r the red component of the pixel, normally in the range 0-1.
<  * @param g the green component of the pixel, normally in the range 0-1.
<  * @param b the blue component of the pixel, normally in the range 0-1.
<  * @param a the alpha component of the pixel, normally in the range 0-1.
---
>  * @param c the color components of the pixel, normally in the range 0-1.
2814c3014
<   CheckError(SDL_ClearSurface(surface, color));
---
>   CheckError(SDL_ClearSurface(surface, color.r, color.g, color.b, color.a));
2876c3076
<   CheckError(SDL_FillSurfaceRects(dst, rects, color));
---
>   CheckError(SDL_FillSurfaceRects(dst, rects.data(), rects.size(), color));
2956a3157,3223
> /**
>  * Performs a fast blit from the source surface to the destination surface
>  * with clipping.
>  *
>  * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>  * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>  *
>  * The blit function should not be called on a locked surface.
>  *
>  * The blit semantics for surfaces with and without blending and colorkey are
>  * defined as follows:
>  *
>  * ```
>  *    RGBA->RGB:
>  *      Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB, set destination alpha to source per-surface alpha value.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  *
>  *   RGBA->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy all of RGBA to the destination.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGB:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  * ```
>  *
>  * @param src the Surface structure to be copied from.
>  * @param srcrect the Rect structure representing the rectangle to be
>  *                copied, or nullptr to copy the entire surface.
>  * @param dst the Surface structure that is the blit target.
>  * @param dstpos the Point structure representing the x and y position in
>  *                the destination surface.
>  * @throws Error on failure.
>  *
>  * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>  *               at any given time.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Surface.BlitSurface
>  */
2962c3229
<   static_assert(false, "Not implemented");
---
>   BlitSurface(src, srcrect, dst, SDL_Rect{dstpos.x, dstpos.y});
2991c3258
<   CheckError(SDL_BlitSurfaceUnchecked(src, srcrect, dst, dstrect));
---
>   CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, dst, &dstrect));
3053c3320
<     SDL_BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode));
---
>     SDL_BlitSurfaceUncheckedScaled(src, &srcrect, dst, &dstrect, scaleMode));
3258c3525,3534
<   static_assert(false, "Not implemented");
---
>   BlitSurface9Grid(src,
>                    srcrect,
>                    left_width,
>                    right_width,
>                    top_height,
>                    bottom_height,
>                    0.0,
>                    SDL_SCALEMODE_NEAREST,
>                    dst,
>                    dstrect);
3332c3608
<   return SDL_MapSurfaceRGBA(surface, c);
---
>   return SDL_MapSurfaceRGBA(surface, c.r, c.g, c.b, c.a);
3368c3644
<   CheckError(SDL_ReadSurfacePixel(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixel(surface, p.x, p.y, r, g, b, a));
3401c3677
<   CheckError(SDL_ReadSurfacePixelFloat(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixelFloat(surface, p.x, p.y, r, g, b, a));
3414,3419c3690,3691
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, 0-255.
<  * @param g the green channel value, 0-255.
<  * @param b the blue channel value, 0-255.
<  * @param a the alpha channel value, 0-255.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels value, 0-255.
3430c3702
<   CheckError(SDL_WriteSurfacePixel(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixel(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3440,3445c3712,3713
<  * @param x the horizontal coordinate, 0 <= x < width.
<  * @param y the vertical coordinate, 0 <= y < height.
<  * @param r the red channel value, normally in the range 0-1.
<  * @param g the green channel value, normally in the range 0-1.
<  * @param b the blue channel value, normally in the range 0-1.
<  * @param a the alpha channel value, normally in the range 0-1.
---
>  * @param p the coordinates, 0 <= x < width, 0 <= y < height.
>  * @param c the color channels values, normally in the range 0-1.
3456c3724
<   CheckError(SDL_WriteSurfacePixelFloat(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixelFloat(surface, p.x, p.y, c.r, c.g, c.b, c.a));
