19c19
<  * @defgroup CategorySurface Category Surface
---
>  * @defgroup CategorySurface Surface Creation and Simple Drawing
121c121
< constexpr bool MUSTLOCK(SurfaceConstParam S) { return SDL_MUSTLOCK(S); }
---
> constexpr bool MUSTLOCK(SurfaceConstParam S) { return SDL_MUSTLOCK((S.value)); }
179a180,181
>  * @cat resource
>  *
182,183d183
<  *
<  * @cat resource
207,208c207
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
221c220
<     : m_resource(SDL_CreateSurface(size, format))
---
>     : m_resource(SDL_CreateSurface(size.x, size.y, format))
238,239c237
<    * @param width the width of the surface.
<    * @param height the height of the surface.
---
>    * @param size the width and height of the surface.
254c252
<     : m_resource(SDL_CreateSurfaceFrom(size, format, pixels, pitch))
---
>     : m_resource(SDL_CreateSurfaceFrom(size.x, size.y, format, pixels, pitch))
376,377c374
<    * @param colorspace an Colorspace value describing the surface
<    *                   colorspace.
---
>    * @param colorspace a Colorspace value describing the surface colorspace.
440c437
<     return CheckError(SDL_CreateSurfacePalette(m_resource));
---
>     return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(m_resource)));
475c472,477
<   Palette GetPalette() const { return SDL_GetSurfacePalette(m_resource); }
---
>   Palette GetPalette() const
>   {
>     auto p = SDL_GetSurfacePalette(m_resource);
>     if (!p) return {};
>     return Palette::Borrow(p);
>   }
488,489c490
<    * @param image a pointer to an alternate Surface to associate with this
<    *              surface.
---
>    * @param image an alternate Surface to associate with this surface.
529,535d529
<    * Freeing the array of surfaces does not affect the surfaces in the array.
<    * They are still referenced by the surface being queried and will be cleaned
<    * up normally.
<    *
<    * @param surface the Surface structure to query.
<    * @param count a pointer filled in with the number of surface pointers
<    *              returned, may be nullptr.
537,538c531
<    *          failure; call GetError() for more information. This should be
<    *          freed with free() when it is no longer needed.
---
>    *          failure; call GetError() for more information.
550c543,545
<     return SDL_GetSurfaceImages(m_resource);
---
>     int count = 0;
>     auto data = SDL_GetSurfaceImages(m_resource, &count);
>     return OwnArray<SurfaceRaw>(CheckError(data), count);
573c568
<    * @since This macro is available since SDL 3.2.0.
---
>    * @since This function is available since SDL 3.2.0.
585,587c580,582
<    * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates
<    * to 0, then you can read and write to the surface at any time, and the pixel
<    * format of the surface will not change.
---
>    * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
>    * false, then you can read and write to the surface at any time, and the
>    * pixel format of the surface will not change.
713,714c708
<    * @param enabled true to enable color key, false to disable color key.
<    * @param key the transparent pixel.
---
>    * @param key the transparent pixel or std::nullopt to disable it.
727c721,722
<     CheckError(SDL_SetSurfaceColorKey(m_resource, key));
---
>     CheckError(
>       SDL_SetSurfaceColorKey(m_resource, key.has_value(), key.value_or(0)));
730c725,734
<   void ClearColorKey() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Unset the color key (transparent pixel) in a surface.
>    *
>    * The color key defines a pixel value that will be treated as transparent in
>    * a blit. For example, one can use this to specify that cyan pixels should be
>    * considered transparent, and therefore not rendered.
>    *
>    * @throws Error on failure.
>    */
>   void ClearColorKey() { SetColorKey(std::nullopt); }
735,736d738
<    * It is safe to pass a nullptr `surface` here; it will return false.
<    *
768c770,771
<     return CheckError(SDL_GetSurfaceColorKey(m_resource));
---
>     if (Uint32 key; SDL_GetSurfaceColorKey(m_resource, &key)) return key;
>     return std::nullopt;
843d845
<    * @param alpha a pointer filled in with the current alpha value.
855c857,859
<     return CheckError(SDL_GetSurfaceAlphaMod(m_resource));
---
>     Uint8 alpha;
>     CheckError(SDL_GetSurfaceAlphaMod(m_resource, &alpha));
>     return alpha;
858c862,880
<   void SetMod(Color color) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set an additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * When this surface is blitted, during the blit operation each source color
>    * channel is modulated by the appropriate color value according to the
>    * following formula:
>    *
>    * `srcC = srcC * (color / 255)`
>    * `srcA = srcA * (alpha / 255)`
>    *
>    * @param color the color to be multiplied in blit operations
>    * @throws Error on failure.
>    */
>   void SetMod(Color color)
>   {
>     SetColorMod(color.r, color.g, color.b);
>     SetAlphaMod(color.a);
>   }
860c882,895
<   Color GetMod() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the additional color and alpha value multiplied into blit
>    * operations.
>    *
>    * @returns a Color containing RGBA value on success or std::nullopt on
>    * failure; call GetError() for more information.
>    */
>   Color GetMod() const
>   {
>     Color c;
>     GetColorMod(&c.r, &c.g, &c.b);
>     c.a = GetAlphaMod();
>     return c;
>   }
897c932,934
<     return CheckError(SDL_GetSurfaceBlendMode(m_resource));
---
>     BlendMode blendmode;
>     CheckError(SDL_GetSurfaceBlendMode(m_resource, &blendmode));
>     return blendmode;
917a955
>    * @sa Surface.ResetClipRect()
925c963,968
<   void ResetClipRect() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Disable the clipping rectangle for a surface.
>    *
>    * @sa SetClipRect()
>    */
>   void ResetClipRect() { SDL_SetSurfaceClipRect(m_resource, nullptr); }
933,935c976,977
<    *                clipped.
<    * @param rect an Rect structure filled in with the clipping rectangle for
<    *             the surface.
---
>    * @returns the Rect structure filled in with the clipping rectangle for the
>    *          surface on success.
946c988,990
<     return CheckError(SDL_GetSurfaceClipRect(m_resource));
---
>     Rect r;
>     CheckError(SDL_GetSurfaceClipRect(m_resource, &r));
>     return r;
967,968d1010
<    * The returned surface should be freed with Surface.Destroy().
<    *
978c1020,1023
<   Surface Duplicate() const { return SDL_DuplicateSurface(m_resource); }
---
>   Surface Duplicate() const
>   {
>     return Surface{SDL_DuplicateSurface(m_resource)};
>   }
984,985d1028
<    * The returned surface should be freed with Surface.Destroy().
<    *
1000c1043
<     return SDL_ScaleSurface(m_resource, width, height, scaleMode);
---
>     return Surface{SDL_ScaleSurface(m_resource, width, height, scaleMode)};
1030c1073
<     return SDL_ConvertSurface(m_resource, format);
---
>     return Surface(SDL_ConvertSurface(m_resource, format));
1064,1065c1107,1108
<     return SDL_ConvertSurfaceAndColorspace(
<       m_resource, format, palette, colorspace, props);
---
>     return Surface(SDL_ConvertSurfaceAndColorspace(
>       m_resource, format, palette, colorspace, props));
1092c1135
<    * otherwise the color is assumed to be in the colorspace of the suface.
---
>    * otherwise the color is assumed to be in the colorspace of the surface.
1106c1149,1150
<     CheckError(SDL_ClearSurface(m_resource, color));
---
>     CheckError(
>       SDL_ClearSurface(m_resource, color.r, color.g, color.b, color.a));
1109c1153,1163
<   void Fill(Uint32 color) { static_assert(false, "Not implemented"); }
---
>   /**
>    * Perform a fast fill of a rectangle with a specific color.
>    *
>    * If there is a clip rectangle set on the destination (set via
>    * SurfaceRef.SetClipRect()), then this function will fill based on the
>    * intersection of the clip rectangle and `rect`.
>    *
>    * @param color the color to fill with.
>    * @throws Error on failure.
>    */
>   void Fill(Uint32 color) { FillRect({}, color); }
1152d1205
<    * @param count the number of rectangles in the array.
1164c1217,1218
<     CheckError(SDL_FillSurfaceRects(m_resource, rects, color));
---
>     CheckError(
>       SDL_FillSurfaceRects(m_resource, rects.data(), rects.size(), color));
1218a1273
>    * @param src the SurfaceRaw structure to be copied from.
1221d1275
<    * @param dst the Surface structure that is the blit target.
1240c1294
<     CheckError(SDL_BlitSurface(m_resource, src, srcrect, dstrect));
---
>     CheckError(SDL_BlitSurface(src, srcrect, m_resource, dstrect));
1242a1297,1366
>   /**
>    * Performs a fast blit from the source surface to the destination surface
>    * with clipping.
>    *
>    * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>    * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>    *
>    * The blit function should not be called on a locked surface.
>    *
>    * The blit semantics for surfaces with and without blending and colorkey are
>    * defined as follows:
>    *
>    * ```
>    *    RGBA->RGB:
>    *      Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB, set destination alpha to source per-surface alpha value.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    *
>    *   RGBA->RGBA:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source alpha-channel and per-surface alpha)
>    *       SDL_SRCCOLORKEY ignored.
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy all of RGBA to the destination.
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       RGB values of the source color key, ignoring alpha in the
>    *       comparison.
>    *
>    *   RGB->RGB:
>    *     Source surface blend mode set to BLENDMODE_BLEND:
>    *       alpha-blend (using the source per-surface alpha)
>    *     Source surface blend mode set to BLENDMODE_NONE:
>    *       copy RGB.
>    *     both:
>    *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>    *       source color key.
>    * ```
>    *
>    * @param src the SurfaceRaw structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be
>    *                copied, or nullptr to copy the entire surface.
>    * @param dstpos the Point structure representing the x and y position in
>    *                the destination surface, or nullptr for (0,0). The width and
>    *                height are ignored, and are copied from `srcrect`. If you
>    *                want a specific width and height, you should use
>    *                Surface.BlitScaled().
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    * @sa Surface.BlitScaled
>    */
1247c1371
<     static_assert(false, "Not implemented");
---
>     Blit(src, srcrect, Rect{dstpos, {}});
1255a1380
>    * @param src the Surface structure to be copied from.
1258d1382
<    * @param dst the Surface structure that is the blit target.
1274c1398
<     CheckError(SDL_BlitSurfaceUnchecked(m_resource, src, srcrect, dstrect));
---
>     CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, m_resource, &dstrect));
1280a1405
>    * @param src the Surface structure to be copied from.
1283d1407
<    * @param dst the Surface structure that is the blit target.
1303c1427
<       SDL_BlitSurfaceScaled(m_resource, src, srcrect, dstrect, scaleMode));
---
>       SDL_BlitSurfaceScaled(src, srcrect, m_resource, dstrect, scaleMode));
1311a1436
>    * @param src the Surface structure to be copied from.
1314d1438
<    * @param dst the Surface structure that is the blit target.
1332,1333c1456,1457
<     CheckError(SDL_BlitSurfaceUncheckedScaled(
<       m_resource, src, srcrect, dstrect, scaleMode));
---
>     CheckError(
>       SDL_BlitSurfaceScaled(src, &srcrect, m_resource, &dstrect, scaleMode));
1340a1465
>    * @param src the Surface structure to be copied from.
1343d1467
<    * @param dst the Surface structure that is the blit target.
1353c1477
<    * @since This function is available since SDL 3.4.0.
---
>    * @since This function is available since SDL 3.2.4.
1363c1487
<       SDL_StretchSurface(m_resource, src, srcrect, dstrect, scaleMode));
---
>       SDL_StretchSurface(src, srcrect, m_resource, dstrect, scaleMode));
1374a1499
>    * @param src the SDL_Surface structure to be copied from.
1377d1501
<    * @param dst the Surface structure that is the blit target.
1394c1518
<     CheckError(SDL_BlitSurfaceTiled(m_resource, src, srcrect, dstrect));
---
>     CheckError(SDL_BlitSurfaceTiled(src, srcrect, m_resource, dstrect));
1403a1528
>    * @param src the SDL_Surface structure to be copied from.
1410d1534
<    * @param dst the Surface structure that is the blit target.
1430c1554
<       m_resource, src, srcrect, scale, scaleMode, dstrect));
---
>       src, srcrect, scale, scaleMode, m_resource, dstrect));
1432a1557,1586
>   /**
>    * Perform a scaled blit using the 9-grid algorithm to a destination surface,
>    * which may be of a different format.
>    *
>    * The pixels in the source surface are split into a 3x3 grid, using the
>    * different corner sizes for each corner, and the sides and center making up
>    * the remaining pixels. The corners are then scaled using `scale` and fit
>    * into the corners of the destination rectangle. The sides and center are
>    * then stretched into place to cover the remaining destination rectangle.
>    *
>    * @param src the SDL_Surface structure to be copied from.
>    * @param srcrect the Rect structure representing the rectangle to be used
>    *                for the 9-grid, or nullptr to use the entire surface.
>    * @param left_width the width, in pixels, of the left corners in `srcrect`.
>    * @param right_width the width, in pixels, of the right corners in `srcrect`.
>    * @param top_height the height, in pixels, of the top corners in `srcrect`.
>    * @param bottom_height the height, in pixels, of the bottom corners in
>    *                      `srcrect`.
>    * @param dstrect the Rect structure representing the target rectangle in
>    *                the destination surface, or nullptr to fill the entire
>    * surface.
>    * @throws Error on failure.
>    *
>    * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>    *               at any given time.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa Surface.Blit
>    */
1441c1595,1603
<     static_assert(false, "Not implemented");
---
>     Blit9GridWithScale(src,
>                        srcrect,
>                        left_width,
>                        right_width,
>                        top_height,
>                        bottom_height,
>                        0.0,
>                        SDL_SCALEMODE_NEAREST,
>                        dstrect);
1453a1616
>    * @param src the SDL_Surface structure to be copied from.
1464d1626
<    * @param dst the Surface structure that is the blit target.
1487,1488c1649
<     CheckError(SDL_BlitSurface9Grid(m_resource,
<                                     src,
---
>     CheckError(SDL_BlitSurface9Grid(src,
1495a1657
>                                     m_resource,
1498a1661,1681
>   /**
>    * Map an RGBA quadruple to a pixel value for a surface.
>    *
>    * This function maps the RGBA color value to the specified pixel format and
>    * returns the pixel value best approximating the given RGBA color value for
>    * the given pixel format.
>    *
>    * If the surface pixel format has no alpha component the alpha value will be
>    * ignored (as it will be in formats with a palette).
>    *
>    * If the surface has a palette, the index of the closest matching color in
>    * the palette will be returned.
>    *
>    * If the pixel format bpp (color depth) is less than 32-bpp then the unused
>    * upper bits of the return value can safely be ignored (e.g., with a 16-bpp
>    * format the return value can be assigned to a Uint16, and similarly a Uint8
>    * for an 8-bpp format).
>    *
>    * @param color the color components
>    * @return a pixel value.
>    */
1501c1684
<     static_assert(false, "Not implemented");
---
>     return MapColor(color.r, color.g, color.b, color.a);
1572a1756,1768
>   /**
>    * This function prioritizes correctness over speed: it is suitable for
>    * unit tests, but is not intended for use in a game engine.
>    *
>    * Like SDL_GetRGBA, this uses the entire 0..255 range when converting color
>    * components from pixel formats with less than 8 bits per RGB component.
>    *
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    */
1575c1771,1773
<     static_assert(false, "Not implemented");
---
>     Color c;
>     ReadPixel(p, &c.r, &c.g, &c.b, &c.a);
>     return c;
1587,1588c1785
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1609c1806
<     CheckError(SDL_ReadSurfacePixel(m_resource, p, r, g, b, a));
---
>     CheckError(SDL_ReadSurfacePixel(m_resource, p.x, p.y, r, g, b, a));
1611a1809,1820
>   /**
>    * Retrieves a single pixel from a surface.
>    *
>    * This function prioritizes correctness over speed: it is suitable for unit
>    * tests, but is not intended for use in a game engine.
>    *
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @returns color on success.
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    */
1614c1823,1825
<     static_assert(false, "Not implemented");
---
>     FColor c;
>     ReadPixelFloat(p, &c.r, &c.g, &c.b, &c.a);
>     return c;
1623,1624c1834
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
1645c1855
<     CheckError(SDL_ReadSurfacePixelFloat(m_resource, p, r, g, b, a));
---
>     CheckError(SDL_ReadSurfacePixelFloat(m_resource, p.x, p.y, r, g, b, a));
1657,1662c1867,1868
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, 0-255.
<    * @param g the green channel value, 0-255.
<    * @param b the blue channel value, 0-255.
<    * @param a the alpha channel value, 0-255.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, 0-255.
1671c1877
<     CheckError(SDL_WriteSurfacePixel(m_resource, p, c));
---
>     CheckError(SDL_WriteSurfacePixel(m_resource, p.x, p.y, c.r, c.g, c.b, c.a));
1680,1685c1886,1887
<    * @param x the horizontal coordinate, 0 <= x < width.
<    * @param y the vertical coordinate, 0 <= y < height.
<    * @param r the red channel value, normally in the range 0-1.
<    * @param g the green channel value, normally in the range 0-1.
<    * @param b the blue channel value, normally in the range 0-1.
<    * @param a the alpha channel value, normally in the range 0-1.
---
>    * @param p the coordinates, 0 <= x < width and 0 <= y < height.
>    * @param c the color values, normally in the range 0-1.
1694c1896,1897
<     CheckError(SDL_WriteSurfacePixelFloat(m_resource, p, c));
---
>     CheckError(
>       SDL_WriteSurfacePixelFloat(m_resource, p.x, p.y, c.r, c.g, c.b, c.a));
1697c1900,1903
<   int GetWidth() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the width in pixels.
>    */
>   constexpr int GetWidth() const { return m_resource->w; }
1699c1905,1908
<   int GetHeight() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the height in pixels.
>    */
>   constexpr int GetHeight() const { return m_resource->h; }
1701c1910,1913
<   Point GetSize() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the size in pixels.
>    */
>   constexpr Point GetSize() const { return Point(GetWidth(), GetHeight()); }
1703c1915,1918
<   int GetPitch() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get pitch in bytes.
>    */
>   constexpr int GetPitch() const { return m_resource->pitch; }
1705c1920,1923
<   PixelFormat GetFormat() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixel format.
>    */
>   constexpr PixelFormat GetFormat() const { return m_resource->format; }
1707c1925,1928
<   void* GetPixels() const { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get the pixels.
>    */
>   constexpr void* GetPixels() const { return m_resource->pixels; }
1855,1858d2075
< #endif // SDL_VERSION_ATLEAST(3, 2, 6)
< 
< #if SDL_VERSION_ATLEAST(3, 2, 6)
< 
1938c2155
<   return CheckError(SDL_CreateSurfacePalette(surface));
---
>   return Palette::Borrow(CheckError(SDL_CreateSurfacePalette(surface)));
1977c2194
<   return SDL_GetSurfacePalette(surface);
---
>   return Palette::Borrow(SDL_GetSurfacePalette(surface));
2055c2272,2274
<   return SDL_GetSurfaceImages(surface);
---
>   int count = 0;
>   auto data = SDL_GetSurfaceImages(surface, &count);
>   return OwnArray<SurfaceRaw>(CheckError(data), count);
2087c2306
<  * Not all surfaces require locking. If `Surface.MustLock(surface)` evaluates to
---
>  * Not all surfaces require locking. If `Surface.MustLock()` evaluates to
2289c2508
<   CheckError(SDL_SetSurfaceColorKey(surface, key));
---
>   CheckError(SDL_SetSurfaceColorKey(surface, key.has_value(), key.value_or(0)));
2333c2552,2553
<   return CheckError(SDL_GetSurfaceColorKey(surface));
---
>   if (Uint32 key; SDL_GetSurfaceColorKey(surface, &key)) return key;
>   return std::nullopt;
2427c2647,2649
<   return CheckError(SDL_GetSurfaceAlphaMod(surface));
---
>   Uint8 alpha;
>   CheckError(SDL_GetSurfaceAlphaMod(surface, &alpha));
>   return alpha;
2467c2689,2691
<   return CheckError(SDL_GetSurfaceBlendMode(surface));
---
>   BlendMode blendmode;
>   CheckError(SDL_GetSurfaceBlendMode(surface, &blendmode));
>   return blendmode;
2517c2741,2743
<   return CheckError(SDL_GetSurfaceClipRect(surface));
---
>   Rect r;
>   CheckError(SDL_GetSurfaceClipRect(surface, &r));
>   return r;
2556c2782
<   return SDL_DuplicateSurface(surface);
---
>   return Surface(SDL_DuplicateSurface(surface));
2583c2809
<   return SDL_ScaleSurface(surface, width, height, scaleMode);
---
>   return Surface(SDL_ScaleSurface(surface, width, height, scaleMode));
2614c2840
<   return SDL_ConvertSurface(surface, format);
---
>   return Surface(SDL_ConvertSurface(surface, format));
2829c3055
<   CheckError(SDL_ClearSurface(surface, color));
---
>   CheckError(SDL_ClearSurface(surface, color.r, color.g, color.b, color.a));
2891c3117
<   CheckError(SDL_FillSurfaceRects(dst, rects, color));
---
>   CheckError(SDL_FillSurfaceRects(dst, rects.data(), rects.size(), color));
2971a3198,3264
> /**
>  * Performs a fast blit from the source surface to the destination surface
>  * with clipping.
>  *
>  * If either `srcrect` or `dstrect` are nullptr, the entire surface (`src` or
>  * `dst`) is copied while ensuring clipping to `dst->clip_rect`.
>  *
>  * The blit function should not be called on a locked surface.
>  *
>  * The blit semantics for surfaces with and without blending and colorkey are
>  * defined as follows:
>  *
>  * ```
>  *    RGBA->RGB:
>  *      Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB, set destination alpha to source per-surface alpha value.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  *
>  *   RGBA->RGBA:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source alpha-channel and per-surface alpha)
>  *       SDL_SRCCOLORKEY ignored.
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy all of RGBA to the destination.
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       RGB values of the source color key, ignoring alpha in the
>  *       comparison.
>  *
>  *   RGB->RGB:
>  *     Source surface blend mode set to BLENDMODE_BLEND:
>  *       alpha-blend (using the source per-surface alpha)
>  *     Source surface blend mode set to BLENDMODE_NONE:
>  *       copy RGB.
>  *     both:
>  *       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
>  *       source color key.
>  * ```
>  *
>  * @param src the Surface structure to be copied from.
>  * @param srcrect the Rect structure representing the rectangle to be
>  *                copied, or nullptr to copy the entire surface.
>  * @param dst the Surface structure that is the blit target.
>  * @param dstpos the Point structure representing the x and y position in
>  *                the destination surface.
>  * @throws Error on failure.
>  *
>  * @threadsafety Only one thread should be using the `src` and `dst` surfaces
>  *               at any given time.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa Surface.BlitSurface
>  */
2977c3270
<   static_assert(false, "Not implemented");
---
>   BlitSurface(src, srcrect, dst, SDL_Rect{dstpos.x, dstpos.y});
3006c3299
<   CheckError(SDL_BlitSurfaceUnchecked(src, srcrect, dst, dstrect));
---
>   CheckError(SDL_BlitSurfaceUnchecked(src, &srcrect, dst, &dstrect));
3068c3361
<     SDL_BlitSurfaceUncheckedScaled(src, srcrect, dst, dstrect, scaleMode));
---
>     SDL_BlitSurfaceUncheckedScaled(src, &srcrect, dst, &dstrect, scaleMode));
3273c3566,3575
<   static_assert(false, "Not implemented");
---
>   BlitSurface9Grid(src,
>                    srcrect,
>                    left_width,
>                    right_width,
>                    top_height,
>                    bottom_height,
>                    0.0,
>                    SDL_SCALEMODE_NEAREST,
>                    dst,
>                    dstrect);
3384c3686
<   CheckError(SDL_ReadSurfacePixel(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixel(surface, p.x, p.y, r, g, b, a));
3417c3719
<   CheckError(SDL_ReadSurfacePixelFloat(surface, p, r, g, b, a));
---
>   CheckError(SDL_ReadSurfacePixelFloat(surface, p.x, p.y, r, g, b, a));
3446c3748
<   CheckError(SDL_WriteSurfacePixel(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixel(surface, p.x, p.y, c.r, c.g, c.b, c.a));
3472c3774
<   CheckError(SDL_WriteSurfacePixelFloat(surface, p, c));
---
>   CheckError(SDL_WriteSurfacePixelFloat(surface, p.x, p.y, c.r, c.g, c.b, c.a));
