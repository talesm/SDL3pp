13c13
<  * @defgroup CategoryRect Category Rect
---
>  * @defgroup CategoryRect Rectangle Functions
40a41,43
>  * Inspired by
>  * https://github.com/libSDL2pp/libSDL2pp/blob/master/SDL2pp/Point.hh
>  *
42a46,47
>  * @cat wrap-extending-struct
>  *
74c79,82
<   constexpr explicit Point(const FPointRaw& p) {}
---
>   constexpr explicit Point(const FPointRaw& p)
>     : SDL_Point{int(p.x), int(p.y)}
>   {
>   }
96c104
<    * Get the x.
---
>    * Get x coordinate
98c106
<    * @returns current x value.
---
>    * @returns x coordinate
103c111
<    * Set the x.
---
>    * Set the x coordinate.
105c113
<    * @param newX the new x value.
---
>    * @param newX the new x coordinate.
115c123
<    * Get the y.
---
>    * Get y coordinate
117c125
<    * @returns current y value.
---
>    * @returns y coordinate
122c130
<    * Set the y.
---
>    * Set the y coordinate.
124c132
<    * @param newY the new y value.
---
>    * @param newY the new y coordinate.
147c155
<    * @returns true if `p` is contained by `r`, false otherwise.
---
>    * @returns true if this is contained by `r`, false otherwise.
155c163,308
<     return SDL_PointInRect(this, r);
---
>     return SDL_PointInRect(this, &r);
>   }
> 
>   /**
>    * Get point's memberwise negation
>    *
>    * @returns New Point representing memberwise negation
>    *
>    */
>   constexpr Point operator-() const { return Point(-x, -y); }
> 
>   /**
>    * Get point's memberwise addition with another point
>    *
>    * @param[in] other Point to add
>    *
>    * @returns New Point representing memberwise addition with another point
>    *
>    */
>   constexpr Point operator+(const Point& other) const
>   {
>     return Point(x + other.x, y + other.y);
>   }
> 
>   /**
>    * Get point's memberwise subtraction with another point
>    *
>    * @param[in] other Point to subtract
>    *
>    * @returns New Point representing memberwise subtraction of another point
>    *
>    */
>   constexpr Point operator-(const Point& other) const
>   {
>     return Point(x - other.x, y - other.y);
>   }
> 
>   /**
>    * Get point's memberwise division by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by an integer
>    *
>    */
>   constexpr Point operator/(int value) const
>   {
>     return Point(x / value, y / value);
>   }
> 
>   /**
>    * Get point's memberwise division by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by an integer
>    *
>    */
>   constexpr FPoint operator/(float value) const;
> 
>   /**
>    * Get point's memberwise division by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by another point
>    *
>    */
>   constexpr Point operator/(const Point& other) const
>   {
>     return Point(x / other.x, y / other.y);
>   }
> 
>   /**
>    * Get point's memberwise remainder from division
>    *        by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise remainder
>    *          from division by an integer
>    *
>    */
>   constexpr Point operator%(int value) const
>   {
>     return Point(x % value, y % value);
>   }
> 
>   /**
>    * Get point's memberwise remainder from division
>    *        by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns New Point representing memberwise remainder
>    *          from division by another point
>    *
>    */
>   constexpr Point operator%(const Point& other) const
>   {
>     return Point(x % other.x, y % other.y);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by an
>    *        integer
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by an integer
>    *
>    */
>   constexpr Point operator*(int value) const
>   {
>     return Point(x * value, y * value);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by an
>    *        integer
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by an integer
>    *
>    */
>   constexpr FPoint operator*(float value) const;
> 
>   /**
>    * Get point's memberwise multiplication by another
>    *        point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by another point
>    *
>    */
>   constexpr Point operator*(const Point& other) const
>   {
>     return Point(x * other.x, y * other.y);
156a310,479
> 
>   /**
>    * Memberwise add another point
>    *
>    * @param[in] other Point to add to the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator+=(const Point& other)
>   {
>     x += other.x;
>     y += other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise subtract another point
>    *
>    * @param[in] other Point to subtract from the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator-=(const Point& other)
>   {
>     x -= other.x;
>     y -= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator/=(int value)
>   {
>     x /= value;
>     y /= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator/=(const Point& other)
>   {
>     x /= other.x;
>     y /= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise remainder from division by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator%=(int value)
>   {
>     x %= value;
>     y %= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise remainder from division by another
>    *        point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator%=(const Point& other)
>   {
>     x %= other.x;
>     y %= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by an integer
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator*=(int value)
>   {
>     x *= value;
>     y *= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by another point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator*=(const Point& other)
>   {
>     x *= other.x;
>     y *= other.y;
>     return *this;
>   }
> 
>   /**
>    * Get a point with coordinates modified so it fits
>    *        into a given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Clamped point
>    *
>    */
>   constexpr Point GetClamped(const Rect& rect) const;
> 
>   /**
>    * Clamp point coordinates to make it fit into a
>    *        given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& Clamp(const Rect& rect);
> 
>   /**
>    * Get a point wrapped within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Wrapped point
>    *
>    */
>   constexpr Point GetWrapped(const Rect& rect) const;
> 
>   /**
>    * Wrap point coordinates within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& Wrap(const Rect& rect);
> 
>   /**
>    * Converts to FPoint
>    *
>    * @return FPoint
>    */
>   constexpr operator FPoint() const;
163a487,488
>  * @cat wrap-extending-struct
>  *
210c535
<    * Get the x.
---
>    * Get the x coordinate.
217c542
<    * Set the x.
---
>    * Set the x coordinate.
219c544
<    * @param newX the new x value.
---
>    * @param newX the new x coordinate.
229c554
<    * Get the y.
---
>    * Get the y coordinate.
231c556
<    * @returns current y value.
---
>    * @returns current y coordinate.
236c561
<    * Set the y.
---
>    * Set the y coordinate.
238c563
<    * @param newY the new y value.
---
>    * @param newY the new y coordinate.
261c586
<    * @returns true if `p` is contained by `r`, false otherwise.
---
>    * @returns true if this is contained by `r`, false otherwise.
267c592,637
<   constexpr bool InRect(const FRectRaw& r) const
---
>   constexpr bool InRect(const FRectRaw& r) const;
> 
>   /**
>    * Get point's memberwise negation
>    *
>    * @returns New Point representing memberwise negation
>    *
>    */
>   constexpr FPoint operator-() const { return FPoint(-x, -y); }
> 
>   /**
>    * Get point's memberwise addition with another point
>    *
>    * @param[in] other Point to add
>    *
>    * @returns New Point representing memberwise addition with another point
>    *
>    */
>   constexpr FPoint operator+(const FPoint& other) const
>   {
>     return FPoint(x + other.x, y + other.y);
>   }
> 
>   /**
>    * Get point's memberwise subtraction with another point
>    *
>    * @param[in] other Point to subtract
>    *
>    * @returns New Point representing memberwise subtraction of another point
>    *
>    */
>   constexpr FPoint operator-(const FPoint& other) const
>   {
>     return FPoint(x - other.x, y - other.y);
>   }
> 
>   /**
>    * Get point's memberwise division by an float
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by an float
>    *
>    */
>   constexpr FPoint operator/(float value) const
269c639
<     return SDL_PointInRectFloat(this, r);
---
>     return FPoint(x / value, y / value);
270a641,816
> 
>   /**
>    * Get point's memberwise division by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by another point
>    *
>    */
>   constexpr FPoint operator/(const FPoint& other) const
>   {
>     return FPoint(x / other.x, y / other.y);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by an
>    *        float
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by an float
>    *
>    */
>   constexpr FPoint operator*(float value) const
>   {
>     return FPoint(x * value, y * value);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by another
>    *        point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by another point
>    *
>    */
>   constexpr FPoint operator*(const FPoint& other) const
>   {
>     return FPoint(x * other.x, y * other.y);
>   }
> 
>   /**
>    * Memberwise add another point
>    *
>    * @param[in] other Point to add to the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator+=(const FPoint& other)
>   {
>     x += other.x;
>     y += other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise subtract another point
>    *
>    * @param[in] other Point to subtract from the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator-=(const FPoint& other)
>   {
>     x -= other.x;
>     y -= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by an float
>    *
>    * @param[in] value Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator/=(float value)
>   {
>     x /= value;
>     y /= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator/=(const FPoint& other)
>   {
>     x /= other.x;
>     y /= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by an float
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator*=(float value)
>   {
>     x *= value;
>     y *= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by another point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator*=(const FPoint& other)
>   {
>     x *= other.x;
>     y *= other.y;
>     return *this;
>   }
> 
>   /**
>    * Get a point with coordinates modified so it fits
>    *        into a given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Clamped point
>    *
>    */
>   constexpr FPoint GetClamped(const FRect& rect) const;
> 
>   /**
>    * Clamp point coordinates to make it fit into a
>    *        given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& Clamp(const FRect& rect);
> 
>   /**
>    * Get a point wrapped within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Wrapped point
>    *
>    */
>   constexpr FPoint GetWrapped(const FRect& rect) const;
> 
>   /**
>    * Wrap point coordinates within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& Wrap(const FRect& rect);
277a824,825
>  * @cat wrap-extending-struct
>  *
301,304c849,852
<    * @param x the value for x.
<    * @param y the value for y.
<    * @param w the value for w.
<    * @param h the value for h.
---
>    * @param x the left x.
>    * @param y the top y.
>    * @param w the width.
>    * @param h the height.
312c860
<    * Wraps Rect.
---
>    * Construct from offset and size
314c862,863
<    * @param r the value to be wrapped
---
>    * @param corner the top-left corner
>    * @param size the size
316,319c865,866
<   Rect(const PointRaw& corner, const PointRaw& size) {}
< 
<   /// Compares with the underlying type
<   constexpr bool operator==(const RectRaw& other) const
---
>   constexpr Rect(const PointRaw& corner, const PointRaw& size)
>     : Rect{corner.x, corner.y, size.x, size.y}
321d867
<     return x == other.x && y == other.y && w == other.w && h == other.h;
324a871,873
>   constexpr bool operator==(const RectRaw& other) const { return Equal(other); }
> 
>   /// Compares with the underlying type
330,334c879,880
<   ///@sa Empty()
<   constexpr explicit operator bool() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /// @sa Empty()
>   constexpr explicit operator bool() const { return !Empty(); }
337c883
<    * Get the x.
---
>    * Get left x coordinate.
339c885
<    * @returns current x value.
---
>    * @returns coordinate of the left x
344c890
<    * Set the x.
---
>    * Set the left x coordinate.
346c892
<    * @param newX the new x value.
---
>    * @param newX the new left x.
356c902
<    * Get the y.
---
>    * Get top y coordinate.
358c904
<    * @returns current y value.
---
>    * @returns coordinate of the top y.
363c909
<    * Set the y.
---
>    * Set the top y coordinate.
365c911
<    * @param newY the new y value.
---
>    * @param newY the new top y.
375c921
<    * Get the w.
---
>    * Get width of the rect
377c923
<    * @returns current w value.
---
>    * @returns Width of the rect
382c928
<    * Set the w.
---
>    * Set the width of the rect.
384c930
<    * @param newW the new w value.
---
>    * @param newW the new width.
394c940
<    * Get the h.
---
>    * Get height of the rect
396c942
<    * @returns current h value.
---
>    * @returns Height of the rect
401c947
<    * Set the h.
---
>    * Set the height of the rect.
403c949
<    * @param newH the new h value.
---
>    * @param newH the new height.
418c964
<    * @param points an array of Point structures representing points to be
---
>    * @param points a span of SDL_Point structures representing points to be
420,425c966,970
<    * @param count the number of structures in the `points` array.
<    * @param clip an Rect used for clipping or nullptr to enclose all points.
<    * @param result an Rect structure filled in with the minimal enclosing
<    *               rectangle.
<    * @returns true if any points were enclosed or false if all the points were
<    *          outside of the clipping rectangle.
---
>    * @param clip an SDL_Rect used for clipping or std::nullopt to enclose all
>    *             points.
>    * @returns a SDL_Rect structure filled in with the minimal enclosing
>    *          rectangle or an empty rect if all the points were outside of the
>    *          clipping rectangle.
432c977,982
<     return SDL_GetRectEnclosingPoints(points, clip);
---
>     Rect result;
>     if (SDL_GetRectEnclosingPoints(
>           points.data(), points.size(), clip, &result)) {
>       return result;
>     }
>     return {};
434a985,993
>   /**
>    * Construct the rect from given center coordinates, width and height
>    *
>    * @param[in] cx X coordinate of the rectangle center
>    * @param[in] cy Y coordinate of the rectangle center
>    * @param[in] w Width of the rectangle
>    * @param[in] h Height of the rectangle
>    *
>    */
437c996
<     static_assert(false, "Not implemented");
---
>     return Rect(cx - w / 2, cy - h / 2, w, h);
440c999,1006
<   static constexpr Rect FromCenter(const Point& center, const Point& size)
---
>   /**
>    * Construct the rect from given center coordinates and size
>    *
>    * @param[in] center Coordinates of the rectangle center
>    * @param[in] size Dimensions of the rectangle
>    *
>    */
>   static constexpr Rect FromCenter(Point center, Point size)
442c1008
<     static_assert(false, "Not implemented");
---
>     return Rect(center - size / 2, size);
444a1011,1019
>   /**
>    * Construct the rect from given corners coordinates
>    *
>    * @param[in] x1 X coordinate of the top left rectangle corner
>    * @param[in] y1 Y coordinate of the top left rectangle corner
>    * @param[in] x2 X coordinate of the bottom right rectangle corner
>    * @param[in] y2 Y coordinate of the bottom right rectangle corner
>    *
>    */
447c1022
<     static_assert(false, "Not implemented");
---
>     return Rect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
450c1025,1032
<   static constexpr Rect FromCorners(const PointRaw& p1, const PointRaw& p2)
---
>   /**
>    * Construct the rect from given centers coordinates
>    *
>    * @param[in] p1 Coordinates of the top left rectangle corner
>    * @param[in] p2 Coordinates of the bottom right rectangle corner
>    *
>    */
>   static constexpr Rect FromCorners(Point p1, Point p2)
452c1034
<     static_assert(false, "Not implemented");
---
>     return Rect(p1, p2 - p1 + Point(1, 1));
455c1037,1043
<   auto GetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get X coordinate of the rect second corner
>    *
>    * @returns X coordinate of the rect second corner
>    *
>    */
>   constexpr int GetX2() const { return x + w - 1; }
457c1045,1059
<   auto SetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set X coordinate of the rect second corner
>    *
>    * @param[in] x2 New X coordinate value
>    *
>    * This modifies rectangle width internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& SetX2(int x2)
>   {
>     w = x2 - x + 1;
>     return *this;
>   }
459c1061,1067
<   auto GetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get Y coordinate of the rect second corner
>    *
>    * @returns Y coordinate of the rect second corner
>    *
>    */
>   constexpr int GetY2() const { return y + h - 1; }
461c1069,1083
<   auto SetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set Y coordinate of the rect second corner
>    *
>    * @param[in] y2 New Y coordinate value
>    *
>    * This modifies rectangle height internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& SetY2(int y2)
>   {
>     h = y2 - y + 1;
>     return *this;
>   }
463c1085,1091
<   auto GetTopLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top left corner of the rect
>    *
>    * @returns Top left corner of the rect
>    *
>    */
>   constexpr Point GetTopLeft() const { return Point(x, y); }
465c1093,1099
<   auto GetTopRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top right corner of the rect
>    *
>    * @returns Top right corner of the rect
>    *
>    */
>   constexpr Point GetTopRight() const { return Point(GetX2(), y); }
467c1101,1107
<   auto GetBottomLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom left corner of the rect
>    *
>    * @returns bottom left corner of the rect
>    *
>    */
>   constexpr Point GetBottomLeft() const { return Point(x, GetY2()); }
469c1109,1115
<   auto GetBottomRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom right corner of the rect
>    *
>    * @returns Bottom right corner of the rect
>    *
>    */
>   constexpr Point GetBottomRight() const { return Point(GetX2(), GetY2()); }
471c1117,1123
<   auto GetSize() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get size of the rect
>    *
>    * @returns Size of the rect
>    *
>    */
>   constexpr Point GetSize() const { return Point(w, h); }
473c1125,1131
<   auto GetCentroid() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get centroid of the rect
>    *
>    * @returns Centroid of the rect
>    *
>    */
>   constexpr Point GetCentroid() const { return Point(x + w / 2, y + h / 2); }
475c1133,1149
<   bool GetLineIntersection(PointRaw* p1, PointRaw* p2)
---
>   /**
>    * Calculate the intersection of a rectangle and line segment
>    *
>    * @param[in,out] p1 Starting coordinates of the line
>    * @param[in,out] p2 Ending coordinates of the line
>    *
>    * @returns True if there is an intersection, false otherwise
>    *
>    * This function is used to clip a line segment to a
>    * rectangle. A line segment contained entirely within the
>    * rectangle or that does not intersect will remain unchanged.
>    * A line segment that crosses the rectangle at either or both
>    * ends will be clipped to the boundary of the rectangle and
>    * the new coordinates saved in p1 and/or p2 as necessary.
>    *
>    */
>   bool GetLineIntersection(PointRaw* p1, PointRaw* p2) const
477c1151,1154
<     static_assert(false, "Not implemented");
---
>     return GetLineIntersection(p1 ? &p1->x : nullptr,
>                                p1 ? &p1->y : nullptr,
>                                p2 ? &p2->x : nullptr,
>                                p2 ? &p2->y : nullptr);
503c1180
<    * Convert an Rect to FRect
---
>    * Convert an SDL_Rect to SDL_FRect
505,506c1182
<    * @param rect a pointer to an Rect.
<    * @param frect a pointer filled in with the floating point representation of
---
>    * @return A FRect filled in with the floating point representation of
513c1189,1194
<   constexpr operator SDL_FRect() const : RectRaw(SDL_RectToFRect()) {}
---
>   constexpr operator SDL_FRect() const
>   {
>     FRectRaw r;
>     SDL_RectToFRect(this, &r);
>     return r;
>   }
516c1197
<   constexpr operator FRect() const { static_assert(false, "Not implemented"); }
---
>   constexpr operator FRect() const;
548c1229
<    * @param b the second rectangle to test.
---
>    * @param other the second rectangle to test.
557c1238
<     return SDL_RectsEqual(this, other);
---
>     return SDL_RectsEqual(this, &other);
559a1241,1248
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param p Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
562c1251
<     static_assert(false, "Not implemented");
---
>     return SDL_PointInRect(&p, this);
564a1254,1261
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param other Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
567c1264
<     static_assert(false, "Not implemented");
---
>     return GetUnion(other) == *this;
573,575c1270
<    * If either pointer is nullptr the function will return false.
<    *
<    * @param B an Rect structure representing the second rectangle.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
586c1281
<     return SDL_HasRectIntersection(this, other);
---
>     return SDL_HasRectIntersection(this, &other);
594,597c1289,1291
<    * @param B an Rect structure representing the second rectangle.
<    * @param result an Rect structure filled in with the intersection of
<    *               rectangles `A` and `B`.
<    * @returns true if there is an intersection, false otherwise.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns an SDL_Rect structure filled in with the intersection of
>    *               if there is intersection, std::nullopt otherwise.
603c1297
<   constexpr std::optional<Rect> GetIntersection(const RectRaw& other) const
---
>   constexpr Rect GetIntersection(const RectRaw& other) const
605c1299,1302
<     return SDL_GetRectIntersection(this, other);
---
>     if (Rect result; SDL_GetRectIntersection(this, &other, &result)) {
>       return result;
>     }
>     return {};
611,613c1308,1309
<    * @param B an Rect structure representing the second rectangle.
<    * @param result an Rect structure filled in with the union of rectangles
<    *               `A` and `B`.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns Rect representing union of two rectangles
620c1316,1437
<     return CheckError(SDL_GetRectUnion(this, other));
---
>     Rect result;
>     CheckError(SDL_GetRectUnion(this, &other, &result));
>     return result;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr Rect GetExtension(unsigned int amount) const
>   {
>     Rect r = *this;
>     r.Extend(amount);
>     return r;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr Rect GetExtension(unsigned int hAmount, unsigned int vAmount) const
>   {
>     Rect r = *this;
>     r.Extend(hAmount, vAmount);
>     return r;
>   }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& Extend(unsigned int amount) { return Extend(amount, amount); }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& Extend(unsigned int hAmount, unsigned int vAmount)
>   {
>     x -= hAmount;
>     y -= vAmount;
>     w += hAmount * 2;
>     h += vAmount * 2;
>     return *this;
>   }
> 
>   /**
>    * Get rectangle moved by a given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr Rect operator+(const Point& offset) const
>   {
>     return Rect(x + offset.x, y + offset.y, w, h);
>   }
> 
>   /**
>    * Get rectangle moved by an opposite of given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr Rect operator-(const Point& offset) const
>   {
>     return Rect(x - offset.x, y - offset.y, w, h);
>   }
> 
>   /**
>    * Move by then given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& operator+=(const Point& offset)
>   {
>     x += offset.x;
>     y += offset.y;
>     return *this;
>   }
> 
>   /**
>    * Move by an opposite of the given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& operator-=(const Point& offset)
>   {
>     x -= offset.x;
>     y -= offset.y;
>     return *this;
629a1447,1448
>  * @cat wrap-extending-struct
>  *
655,658c1474,1477
<    * @param x the value for x.
<    * @param y the value for y.
<    * @param w the value for w.
<    * @param h the value for h.
---
>    * @param x the left x.
>    * @param y the top y.
>    * @param w the width.
>    * @param h the height.
666,668c1485
<    * Wraps FRect.
<    *
<    * @param r the value to be wrapped
---
>    * Constructs from top-left corner plus size
670c1487,1490
<   constexpr FRect(const FPointRaw& corner, const FPointRaw& size) {}
---
>   constexpr FRect(FPoint corner, FPoint size)
>     : FRect{corner.x, corner.y, size.x, size.y}
>   {
>   }
675c1495
<     return x == other.x && y == other.y && w == other.w && h == other.h;
---
>     return Equal(other);
684,688c1504,1505
<   ///@sa Empty()
<   constexpr explicit operator bool() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /// @sa Empty()
>   constexpr operator bool() const { return !Empty(); }
691c1508
<    * Get the x.
---
>    * Get left x coordinate.
693c1510
<    * @returns current x value.
---
>    * @returns coordinate of the left x
698c1515
<    * Set the x.
---
>    * Set the left x coordinate.
700c1517
<    * @param newX the new x value.
---
>    * @param newX the new left x.
710c1527
<    * Get the y.
---
>    * Get top y coordinate.
712c1529
<    * @returns current y value.
---
>    * @returns coordinate of the top y.
717c1534
<    * Set the y.
---
>    * Set the top y coordinate.
719c1536
<    * @param newY the new y value.
---
>    * @param newY the new top y.
729c1546
<    * Get the w.
---
>    * Get width of the rect
731c1548
<    * @returns current w value.
---
>    * @returns Width of the rect
736c1553
<    * Set the w.
---
>    * Set the width of the rect.
738c1555
<    * @param newW the new w value.
---
>    * @param newW the new width.
748c1565
<    * Get the h.
---
>    * Get height of the rect
750c1567
<    * @returns current h value.
---
>    * @returns Height of the rect
755c1572
<    * Set the h.
---
>    * Set the height of the rect.
757c1574
<    * @param newH the new h value.
---
>    * @param newH the new height.
773c1590
<    * @param points an array of FPoint structures representing points to be
---
>    * @param points a span of SDL_Point structures representing points to be
775,780c1592,1596
<    * @param count the number of structures in the `points` array.
<    * @param clip an FRect used for clipping or nullptr to enclose all points.
<    * @param result an FRect structure filled in with the minimal enclosing
<    *               rectangle.
<    * @returns true if any points were enclosed or false if all the points were
<    *          outside of the clipping rectangle.
---
>    * @param clip an SDL_Rect used for clipping or std::nullopt to enclose all
>    *             points.
>    * @returns a FRect structure filled in with the minimal enclosing
>    *          rectangle or an empty FRect if all the points were outside of
>    *          the clipping rectangle.
788c1604,1608
<     return SDL_GetRectEnclosingPointsFloat(points, clip);
---
>     if (FRect result; SDL_GetRectEnclosingPointsFloat(
>           points.data(), points.size(), clip, &result)) {
>       return result;
>     }
>     return {};
790a1611,1619
>   /**
>    * Construct the rect from given center coordinates, width and height
>    *
>    * @param[in] cx X coordinate of the rectangle center
>    * @param[in] cy Y coordinate of the rectangle center
>    * @param[in] w Width of the rectangle
>    * @param[in] h Height of the rectangle
>    *
>    */
793c1622
<     static_assert(false, "Not implemented");
---
>     return FRect(cx - w / 2, cy - h / 2, w, h);
796,797c1625,1632
<   static constexpr FRect FromCenter(const FPointRaw& center,
<                                     const FPointRaw& size)
---
>   /**
>    * Construct the rect from given center coordinates and size
>    *
>    * @param[in] center Coordinates of the rectangle center
>    * @param[in] size Dimensions of the rectangle
>    *
>    */
>   static constexpr FRect FromCenter(FPoint center, FPoint size)
799c1634
<     static_assert(false, "Not implemented");
---
>     return FRect(center - size / 2, size);
801a1637,1645
>   /**
>    * Construct the rect from given corners coordinates
>    *
>    * @param[in] x1 X coordinate of the top left rectangle corner
>    * @param[in] y1 Y coordinate of the top left rectangle corner
>    * @param[in] x2 X coordinate of the bottom right rectangle corner
>    * @param[in] y2 Y coordinate of the bottom right rectangle corner
>    *
>    */
804c1648
<     static_assert(false, "Not implemented");
---
>     return FRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
807c1651,1658
<   static constexpr FRect FromCorners(const FPointRaw& p1, const FPointRaw& p2)
---
>   /**
>    * Construct the rect from given centers coordinates
>    *
>    * @param[in] p1 Coordinates of the top left rectangle corner
>    * @param[in] p2 Coordinates of the bottom right rectangle corner
>    *
>    */
>   static constexpr FRect FromCorners(FPoint p1, FPoint p2)
809c1660
<     static_assert(false, "Not implemented");
---
>     return FRect(p1, p2 - p1 + FPoint(1, 1));
812c1663,1669
<   auto GetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get X coordinate of the rect second corner
>    *
>    * @returns X coordinate of the rect second corner
>    *
>    */
>   constexpr float GetX2() const { return x + w - 1; }
814c1671,1685
<   auto SetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set X coordinate of the rect second corner
>    *
>    * @param[in] x2 New X coordinate value
>    *
>    * This modifies rectangle width internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& SetX2(float x2)
>   {
>     w = x2 - x + 1;
>     return *this;
>   }
816c1687,1693
<   auto GetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get Y coordinate of the rect second corner
>    *
>    * @returns Y coordinate of the rect second corner
>    *
>    */
>   constexpr float GetY2() const { return y + h - 1; }
818c1695,1709
<   auto SetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set Y coordinate of the rect second corner
>    *
>    * @param[in] y2 New Y coordinate value
>    *
>    * This modifies rectangle height internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& SetY2(float y2)
>   {
>     h = y2 - y + 1;
>     return *this;
>   }
820c1711,1717
<   auto GetTopLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top left corner of the rect
>    *
>    * @returns Top left corner of the rect
>    *
>    */
>   constexpr FPoint GetTopLeft() const { return FPoint(x, y); }
822c1719,1725
<   auto GetTopRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top right corner of the rect
>    *
>    * @returns Top right corner of the rect
>    *
>    */
>   constexpr FPoint GetTopRight() const { return FPoint(GetX2(), y); }
824c1727,1733
<   auto GetBottomLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom left corner of the rect
>    *
>    * @returns bottom left corner of the rect
>    *
>    */
>   constexpr FPoint GetBottomLeft() const { return FPoint(x, GetY2()); }
826c1735,1741
<   auto GetBottomRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom right corner of the rect
>    *
>    * @returns Bottom right corner of the rect
>    *
>    */
>   constexpr FPoint GetBottomRight() const { return FPoint(GetX2(), GetY2()); }
828c1743,1749
<   auto GetSize() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get size of the rect
>    *
>    * @returns Size of the rect
>    *
>    */
>   constexpr FPoint GetSize() const { return FPoint(w, h); }
830c1751,1757
<   auto GetCentroid() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get centroid of the rect
>    *
>    * @returns Centroid of the rect
>    *
>    */
>   constexpr FPoint GetCentroid() const { return FPoint(x + w / 2, y + h / 2); }
856c1783
<    * Determine whether a floating point rectangle can contain any point.
---
>    * Calculate the intersection of a rectangle and line segment
858,859c1785,1810
<    * A rectangle is considered "empty" for this function if `r` is nullptr, or
<    * if `r`'s width and/or height are < 0.0f.
---
>    * @param[in,out] p1 Starting coordinates of the line
>    * @param[in,out] p2 Ending coordinates of the line
>    *
>    * @returns True if there is an intersection, false otherwise
>    *
>    * This function is used to clip a line segment to a
>    * rectangle. A line segment contained entirely within the
>    * rectangle or that does not intersect will remain unchanged.
>    * A line segment that crosses the rectangle at either or both
>    * ends will be clipped to the boundary of the rectangle and
>    * the new coordinates saved in p1 and/or p2 as necessary.
>    *
>    */
>   bool GetLineIntersection(FPoint* p1, FPoint* p2) const
>   {
>     return GetLineIntersection(p1 ? &p1->x : nullptr,
>                                p1 ? &p1->y : nullptr,
>                                p2 ? &p2->x : nullptr,
>                                p2 ? &p2->y : nullptr);
>   }
> 
>   /**
>    * Determine whether a rectangle has no area.
>    *
>    * A rectangle is considered "empty" for this function if `r` is NULL, or if
>    * `r`'s width and/or height are <= 0.
888c1839
<    * @param b the second rectangle to test.
---
>    * @param other the second rectangle to test.
900c1851
<     return SDL_RectsEqualEpsilon(this, other, epsilon);
---
>     return SDL_RectsEqualEpsilon(this, &other, epsilon);
904,905c1855
<    * Determine whether two floating point rectangles are equal, within a default
<    * epsilon.
---
>    * Determine whether two rectangles are equal.
918c1868
<    * @param b the second rectangle to test.
---
>    * @param other the second rectangle to test.
929c1879
<     return SDL_RectsEqualFloat(this, other);
---
>     return SDL_RectsEqualFloat(this, &other);
931a1882,1889
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param p Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
934c1892
<     static_assert(false, "Not implemented");
---
>     return SDL_PointInRectFloat(&p, this);
936a1895,1902
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param other Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
939c1905
<     static_assert(false, "Not implemented");
---
>     return GetUnion(other) == *this;
943,945c1909
<    * Determine whether two rectangles intersect with float precision.
<    *
<    * If either pointer is nullptr the function will return false.
---
>    * Determine whether two rectangles intersect.
947c1911
<    * @param B an FRect structure representing the second rectangle.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
949a1914,1915
>    * @threadsafety It is safe to call this function from any thread.
>    *
956c1922
<     return SDL_HasRectIntersectionFloat(this, other);
---
>     return SDL_HasRectIntersectionFloat(this, &other);
964,967c1930,1932
<    * @param B an FRect structure representing the second rectangle.
<    * @param result an FRect structure filled in with the intersection of
<    *               rectangles `A` and `B`.
<    * @returns true if there is an intersection, false otherwise.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns an SDL_Rect structure filled in with the intersection of
>    *          if there is intersection, an empty FRect otherwise.
975c1940,1943
<     return SDL_GetRectIntersectionFloat(this, other);
---
>     if (FRect result; SDL_GetRectIntersectionFloat(this, &other, &result)) {
>       return result;
>     }
>     return {};
981,983c1949,1950
<    * @param B an FRect structure representing the second rectangle.
<    * @param result an FRect structure filled in with the union of rectangles
<    *               `A` and `B`.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns Rect representing union of two rectangles
990c1957,2078
<     return CheckError(SDL_GetRectUnionFloat(this, other));
---
>     FRect result;
>     CheckError(SDL_GetRectUnionFloat(this, &other, &result));
>     return result;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr FRect GetExtension(unsigned int amount) const
>   {
>     FRect r = *this;
>     r.Extend(amount);
>     return r;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr FRect GetExtension(float hAmount, float vAmount) const
>   {
>     FRect r = *this;
>     r.Extend(hAmount, vAmount);
>     return r;
>   }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& Extend(float amount) { return Extend(amount, amount); }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& Extend(float hAmount, float vAmount)
>   {
>     x -= hAmount;
>     y -= vAmount;
>     w += hAmount * 2;
>     h += vAmount * 2;
>     return *this;
>   }
> 
>   /**
>    * Get rectangle moved by a given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr FRect operator+(const FPoint& offset) const
>   {
>     return FRect(x + offset.x, y + offset.y, w, h);
>   }
> 
>   /**
>    * Get rectangle moved by an opposite of given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr FRect operator-(const FPoint& offset) const
>   {
>     return FRect(x - offset.x, y - offset.y, w, h);
>   }
> 
>   /**
>    * Move by then given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& operator+=(const FPoint& offset)
>   {
>     x += offset.x;
>     y += offset.y;
>     return *this;
>   }
> 
>   /**
>    * Move by an opposite of the given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& operator-=(const FPoint& offset)
>   {
>     x -= offset.x;
>     y -= offset.y;
>     return *this;
1005c2093
< constexpr Rect RectToFRect(const RectRaw& rect)
---
> constexpr FRect RectToFRect(const RectRaw& rect)
1007c2095,2097
<   return SDL_RectToFRect(rect);
---
>   FRect frect;
>   SDL_RectToFRect(&rect, &frect);
>   return frect;
1031c2121
< constexpr bool PointInRect(const PointRaw& self, const RectRaw& r)
---
> constexpr bool PointInRect(const PointRaw& p, const RectRaw& r)
1033c2123
<   return SDL_PointInRect(self, r);
---
>   return SDL_PointInRect(&p, &r);
1054c2144
< constexpr bool RectEmpty(const RectRaw& r) { return SDL_RectEmpty(r); }
---
> constexpr bool RectEmpty(const RectRaw& r) { return SDL_RectEmpty(&r); }
1075c2165
< constexpr bool RectsEqual(const RectRaw& self, const RectRaw& other)
---
> constexpr bool RectsEqual(const RectRaw& a, const RectRaw& b)
1077c2167
<   return SDL_RectsEqual(self, other);
---
>   return SDL_RectsEqual(&a, &b);
1097c2187
<   return SDL_HasRectIntersection(self, other);
---
>   return SDL_HasRectIntersection(&self, &other);
1115,1116c2205
< constexpr std::optional<Rect> GetRectIntersection(const RectRaw& self,
<                                                   const RectRaw& other)
---
> constexpr Rect GetRectIntersection(const RectRaw& self, const RectRaw& other)
1118c2207,2210
<   return SDL_GetRectIntersection(self, other);
---
>   if (Rect result; SDL_GetRectIntersection(&self, &other, &result)) {
>     return result;
>   }
>   return {};
1134c2226,2228
<   return CheckError(SDL_GetRectUnion(self, other));
---
>   Rect r;
>   CheckError(SDL_GetRectUnion(&self, &other, &r));
>   return r;
1158c2252
<   return SDL_GetRectEnclosingPoints(points, clip, result);
---
>   return SDL_GetRectEnclosingPoints(points.data(), points.size(), clip, result);
1185c2279
<   return SDL_GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);
---
>   return SDL_GetRectAndLineIntersection(&rect, X1, Y1, X2, Y2);
1209c2303
< constexpr bool PointInRectFloat(const FPointRaw& self, const FRectRaw& r)
---
> constexpr bool PointInRectFloat(const FPointRaw& p, const FRectRaw& r)
1211c2305
<   return SDL_PointInRectFloat(self, r);
---
>   return SDL_PointInRectFloat(&p, &r);
1234c2328
<   return SDL_RectEmptyFloat(r);
---
>   return SDL_RectEmptyFloat(&r);
1262,1263c2356,2357
< constexpr bool RectsEqualEpsilon(const FRectRaw& self,
<                                  const FRectRaw& other,
---
> constexpr bool RectsEqualEpsilon(const FRectRaw& a,
>                                  const FRectRaw& b,
1266c2360
<   return SDL_RectsEqualEpsilon(self, other, epsilon);
---
>   return SDL_RectsEqualEpsilon(&a, &b, epsilon);
1294c2388
< constexpr bool RectsEqualFloat(const FRectRaw& self, const FRectRaw& other)
---
> constexpr bool RectsEqualFloat(const FRectRaw& a, const FRectRaw& b)
1296c2390
<   return SDL_RectsEqualFloat(self, other);
---
>   return SDL_RectsEqualFloat(&a, &b);
1315c2409
<   return SDL_HasRectIntersectionFloat(self, other);
---
>   return SDL_HasRectIntersectionFloat(&self, &other);
1336c2430,2431
<   return SDL_GetRectIntersectionFloat(self, other);
---
>   if (FRect r; SDL_GetRectIntersectionFloat(&self, &other, &r)) return r;
>   return {};
1352c2447,2449
<   return CheckError(SDL_GetRectUnionFloat(self, other));
---
>   FRect r;
>   CheckError(SDL_GetRectUnionFloat(&self, &other, &r));
>   return r;
1377c2474,2475
<   return SDL_GetRectEnclosingPointsFloat(points, clip, result);
---
>   return SDL_GetRectEnclosingPointsFloat(
>     points.data(), points.size(), clip, result);
1405c2503
<   return SDL_GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);
---
>   return SDL_GetRectAndLineIntersectionFloat(&rect, X1, Y1, X2, Y2);
1408a2507,2598
> 
> constexpr Point::operator FPoint() const { return {float(x), float(y)}; }
> 
> constexpr FPoint Point::operator/(float value) const
> {
>   return FPoint(*this) / value;
> }
> constexpr FPoint Point::operator*(float value) const
> {
>   return FPoint(*this) * value;
> }
> 
> constexpr Point Point::GetClamped(const Rect& rect) const
> {
>   Point p = *this;
>   p.Clamp(rect);
>   return p;
> }
> 
> constexpr Point& Point::Clamp(const Rect& rect)
> {
>   if (x < rect.x) x = rect.x;
>   if (x > rect.GetX2()) x = rect.GetX2();
>   if (y < rect.y) y = rect.y;
>   if (y > rect.GetY2()) y = rect.GetY2();
>   return *this;
> }
> 
> constexpr Point Point::GetWrapped(const Rect& rect) const
> {
>   Point p = *this;
>   p.Wrap(rect);
>   return p;
> }
> 
> constexpr Point& Point::Wrap(const Rect& rect)
> {
>   if (x < rect.x)
>     x = rect.x + rect.w - 1 - (rect.x - x + rect.w - 1) % rect.w;
>   else if (x >= rect.x + rect.w)
>     x = rect.x + (x - rect.x - rect.w) % rect.w;
> 
>   if (y < rect.y)
>     y = rect.y + rect.h - 1 - (rect.y - y + rect.h - 1) % rect.h;
>   else if (y >= rect.y + rect.h)
>     y = rect.y + (y - rect.y - rect.h) % rect.h;
> 
>   return *this;
> }
> 
> constexpr FPoint FPoint::GetClamped(const FRect& rect) const
> {
>   FPoint p = *this;
>   p.Clamp(rect);
>   return p;
> }
> 
> constexpr FPoint& FPoint::Clamp(const FRect& rect)
> {
>   if (x < rect.x) x = rect.x;
>   if (x > rect.GetX2()) x = rect.GetX2();
>   if (y < rect.y) y = rect.y;
>   if (y > rect.GetY2()) y = rect.GetY2();
>   return *this;
> }
> 
> constexpr FPoint FPoint::GetWrapped(const FRect& rect) const
> {
>   FPoint p = *this;
>   p.Wrap(rect);
>   return p;
> }
> 
> constexpr FPoint& FPoint::Wrap(const FRect& rect)
> {
>   if (x < rect.x)
>     x = rect.x + rect.w - 1 - SDL_fmod(rect.x - x + rect.w - 1, rect.w);
>   else if (x >= rect.x + rect.w)
>     x = rect.x + SDL_fmod(x - rect.x - rect.w, rect.w);
> 
>   if (y < rect.y)
>     y = rect.y + rect.h - 1 - SDL_fmod(rect.y - y + rect.h - 1, rect.h);
>   else if (y >= rect.y + rect.h)
>     y = rect.y + SDL_fmod(y - rect.y - rect.h, rect.h);
> 
>   return *this;
> }
> 
> constexpr Rect::operator FRect() const
> {
>   return {float(x), float(y), float(w), float(h)};
> }
