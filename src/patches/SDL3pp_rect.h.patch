13c13
<  * @defgroup CategoryRect Category Rect
---
>  * @defgroup CategoryRect Rectangle Functions
40a41,43
>  * Inspired by
>  * https://github.com/libSDL2pp/libSDL2pp/blob/master/SDL2pp/Point.hh
>  *
42a46,47
>  * @cat wrap-extending-struct
>  *
74c79,82
<   constexpr explicit Point(const FPointRaw& p) {}
---
>   constexpr explicit Point(const FPointRaw& p)
>     : SDL_Point{int(p.x), int(p.y)}
>   {
>   }
100c108
<    * Get the x.
---
>    * Get x coordinate
102c110
<    * @returns current x value.
---
>    * @returns x coordinate
107c115
<    * Set the x.
---
>    * Set the x coordinate.
109c117
<    * @param newX the new x value.
---
>    * @param newX the new x coordinate.
119c127
<    * Get the y.
---
>    * Get y coordinate
121c129
<    * @returns current y value.
---
>    * @returns y coordinate
126c134
<    * Set the y.
---
>    * Set the y coordinate.
128c136
<    * @param newY the new y value.
---
>    * @param newY the new y coordinate.
151c159
<    * @returns true if `p` is contained by `r`, false otherwise.
---
>    * @returns true if this is contained by `r`, false otherwise.
159c167,312
<     return SDL_PointInRect(this, r);
---
>     return SDL_PointInRect(this, &r);
>   }
> 
>   /**
>    * Get point's memberwise negation
>    *
>    * @returns New Point representing memberwise negation
>    *
>    */
>   constexpr Point operator-() const { return Point(-x, -y); }
> 
>   /**
>    * Get point's memberwise addition with another point
>    *
>    * @param[in] other Point to add
>    *
>    * @returns New Point representing memberwise addition with another point
>    *
>    */
>   constexpr Point operator+(const Point& other) const
>   {
>     return Point(x + other.x, y + other.y);
>   }
> 
>   /**
>    * Get point's memberwise subtraction with another point
>    *
>    * @param[in] other Point to subtract
>    *
>    * @returns New Point representing memberwise subtraction of another point
>    *
>    */
>   constexpr Point operator-(const Point& other) const
>   {
>     return Point(x - other.x, y - other.y);
>   }
> 
>   /**
>    * Get point's memberwise division by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by an integer
>    *
>    */
>   constexpr Point operator/(int value) const
>   {
>     return Point(x / value, y / value);
>   }
> 
>   /**
>    * Get point's memberwise division by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by an integer
>    *
>    */
>   constexpr FPoint operator/(float value) const;
> 
>   /**
>    * Get point's memberwise division by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by another point
>    *
>    */
>   constexpr Point operator/(const Point& other) const
>   {
>     return Point(x / other.x, y / other.y);
>   }
> 
>   /**
>    * Get point's memberwise remainder from division
>    *        by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise remainder
>    *          from division by an integer
>    *
>    */
>   constexpr Point operator%(int value) const
>   {
>     return Point(x % value, y % value);
>   }
> 
>   /**
>    * Get point's memberwise remainder from division
>    *        by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns New Point representing memberwise remainder
>    *          from division by another point
>    *
>    */
>   constexpr Point operator%(const Point& other) const
>   {
>     return Point(x % other.x, y % other.y);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by an
>    *        integer
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by an integer
>    *
>    */
>   constexpr Point operator*(int value) const
>   {
>     return Point(x * value, y * value);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by an
>    *        integer
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by an integer
>    *
>    */
>   constexpr FPoint operator*(float value) const;
> 
>   /**
>    * Get point's memberwise multiplication by another
>    *        point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by another point
>    *
>    */
>   constexpr Point operator*(const Point& other) const
>   {
>     return Point(x * other.x, y * other.y);
160a314,483
> 
>   /**
>    * Memberwise add another point
>    *
>    * @param[in] other Point to add to the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator+=(const Point& other)
>   {
>     x += other.x;
>     y += other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise subtract another point
>    *
>    * @param[in] other Point to subtract from the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator-=(const Point& other)
>   {
>     x -= other.x;
>     y -= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator/=(int value)
>   {
>     x /= value;
>     y /= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator/=(const Point& other)
>   {
>     x /= other.x;
>     y /= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise remainder from division by an integer
>    *
>    * @param[in] value Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator%=(int value)
>   {
>     x %= value;
>     y %= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise remainder from division by another
>    *        point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator%=(const Point& other)
>   {
>     x %= other.x;
>     y %= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by an integer
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator*=(int value)
>   {
>     x *= value;
>     y *= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by another point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& operator*=(const Point& other)
>   {
>     x *= other.x;
>     y *= other.y;
>     return *this;
>   }
> 
>   /**
>    * Get a point with coordinates modified so it fits
>    *        into a given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Clamped point
>    *
>    */
>   constexpr Point GetClamped(const Rect& rect) const;
> 
>   /**
>    * Clamp point coordinates to make it fit into a
>    *        given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& Clamp(const Rect& rect);
> 
>   /**
>    * Get a point wrapped within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Wrapped point
>    *
>    */
>   constexpr Point GetWrapped(const Rect& rect) const;
> 
>   /**
>    * Wrap point coordinates within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Point& Wrap(const Rect& rect);
> 
>   /**
>    * Converts to FPoint
>    *
>    * @return FPoint
>    */
>   constexpr operator FPoint() const;
167a491,492
>  * @cat wrap-extending-struct
>  *
218c543
<    * Get the x.
---
>    * Get the x coordinate.
225c550
<    * Set the x.
---
>    * Set the x coordinate.
227c552
<    * @param newX the new x value.
---
>    * @param newX the new x coordinate.
237c562
<    * Get the y.
---
>    * Get the y coordinate.
239c564
<    * @returns current y value.
---
>    * @returns current y coordinate.
244c569
<    * Set the y.
---
>    * Set the y coordinate.
246c571
<    * @param newY the new y value.
---
>    * @param newY the new y coordinate.
269c594
<    * @returns true if `p` is contained by `r`, false otherwise.
---
>    * @returns true if this is contained by `r`, false otherwise.
275c600,645
<   constexpr bool InRect(const FRectRaw& r) const
---
>   constexpr bool InRect(const FRectRaw& r) const;
> 
>   /**
>    * Get point's memberwise negation
>    *
>    * @returns New Point representing memberwise negation
>    *
>    */
>   constexpr FPoint operator-() const { return FPoint(-x, -y); }
> 
>   /**
>    * Get point's memberwise addition with another point
>    *
>    * @param[in] other Point to add
>    *
>    * @returns New Point representing memberwise addition with another point
>    *
>    */
>   constexpr FPoint operator+(const FPoint& other) const
>   {
>     return FPoint(x + other.x, y + other.y);
>   }
> 
>   /**
>    * Get point's memberwise subtraction with another point
>    *
>    * @param[in] other Point to subtract
>    *
>    * @returns New Point representing memberwise subtraction of another point
>    *
>    */
>   constexpr FPoint operator-(const FPoint& other) const
>   {
>     return FPoint(x - other.x, y - other.y);
>   }
> 
>   /**
>    * Get point's memberwise division by an float
>    *
>    * @param[in] value Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by an float
>    *
>    */
>   constexpr FPoint operator/(float value) const
277c647
<     return SDL_PointInRectFloat(this, r);
---
>     return FPoint(x / value, y / value);
278a649,824
> 
>   /**
>    * Get point's memberwise division by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns New Point representing memberwise division of
>    *          point by another point
>    *
>    */
>   constexpr FPoint operator/(const FPoint& other) const
>   {
>     return FPoint(x / other.x, y / other.y);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by an
>    *        float
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by an float
>    *
>    */
>   constexpr FPoint operator*(float value) const
>   {
>     return FPoint(x * value, y * value);
>   }
> 
>   /**
>    * Get point's memberwise multiplication by another
>    *        point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns New Point representing memberwise multiplication
>    *          of point by another point
>    *
>    */
>   constexpr FPoint operator*(const FPoint& other) const
>   {
>     return FPoint(x * other.x, y * other.y);
>   }
> 
>   /**
>    * Memberwise add another point
>    *
>    * @param[in] other Point to add to the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator+=(const FPoint& other)
>   {
>     x += other.x;
>     y += other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise subtract another point
>    *
>    * @param[in] other Point to subtract from the current one
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator-=(const FPoint& other)
>   {
>     x -= other.x;
>     y -= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by an float
>    *
>    * @param[in] value Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator/=(float value)
>   {
>     x /= value;
>     y /= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise divide by another point
>    *
>    * @param[in] other Divisor
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator/=(const FPoint& other)
>   {
>     x /= other.x;
>     y /= other.y;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by an float
>    *
>    * @param[in] value Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator*=(float value)
>   {
>     x *= value;
>     y *= value;
>     return *this;
>   }
> 
>   /**
>    * Memberwise multiply by another point
>    *
>    * @param[in] other Multiplier
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& operator*=(const FPoint& other)
>   {
>     x *= other.x;
>     y *= other.y;
>     return *this;
>   }
> 
>   /**
>    * Get a point with coordinates modified so it fits
>    *        into a given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Clamped point
>    *
>    */
>   constexpr FPoint GetClamped(const FRect& rect) const;
> 
>   /**
>    * Clamp point coordinates to make it fit into a
>    *        given rect
>    *
>    * @param[in] rect Rectangle to clamp with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& Clamp(const FRect& rect);
> 
>   /**
>    * Get a point wrapped within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Wrapped point
>    *
>    */
>   constexpr FPoint GetWrapped(const FRect& rect) const;
> 
>   /**
>    * Wrap point coordinates within a specified rect
>    *
>    * @param[in] rect Rectangle to wrap with
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FPoint& Wrap(const FRect& rect);
285a832,833
>  * @cat wrap-extending-struct
>  *
309,312c857,860
<    * @param x the value for x.
<    * @param y the value for y.
<    * @param w the value for w.
<    * @param h the value for h.
---
>    * @param x the left x.
>    * @param y the top y.
>    * @param w the width.
>    * @param h the height.
320c868
<    * Wraps Rect.
---
>    * Construct from offset and size
322c870,871
<    * @param r the value to be wrapped
---
>    * @param corner the top-left corner
>    * @param size the size
324c873,876
<   Rect(const PointRaw& corner, const PointRaw& size) {}
---
>   constexpr Rect(const PointRaw& corner, const PointRaw& size)
>     : Rect{corner.x, corner.y, size.x, size.y}
>   {
>   }
329,332c881
<   constexpr bool operator==(const RectRaw& other) const
<   {
<     return x == other.x && y == other.y && w == other.w && h == other.h;
<   }
---
>   constexpr bool operator==(const RectRaw& other) const { return Equal(other); }
345,348c894
<   constexpr explicit operator bool() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   constexpr explicit operator bool() const { return !Empty(); }
351c897
<    * Get the x.
---
>    * Get left x coordinate.
353c899
<    * @returns current x value.
---
>    * @returns coordinate of the left x
358c904
<    * Set the x.
---
>    * Set the left x coordinate.
360c906
<    * @param newX the new x value.
---
>    * @param newX the new left x.
370c916
<    * Get the y.
---
>    * Get top y coordinate.
372c918
<    * @returns current y value.
---
>    * @returns coordinate of the top y.
377c923
<    * Set the y.
---
>    * Set the top y coordinate.
379c925
<    * @param newY the new y value.
---
>    * @param newY the new top y.
389c935
<    * Get the w.
---
>    * Get width of the rect
391c937
<    * @returns current w value.
---
>    * @returns Width of the rect
396c942
<    * Set the w.
---
>    * Set the width of the rect.
398c944
<    * @param newW the new w value.
---
>    * @param newW the new width.
408c954
<    * Get the h.
---
>    * Get height of the rect
410c956
<    * @returns current h value.
---
>    * @returns Height of the rect
415c961
<    * Set the h.
---
>    * Set the height of the rect.
417c963
<    * @param newH the new h value.
---
>    * @param newH the new height.
432c978
<    * @param points an array of Point structures representing points to be
---
>    * @param points a span of SDL_Point structures representing points to be
434,439c980,984
<    * @param count the number of structures in the `points` array.
<    * @param clip an Rect used for clipping or nullptr to enclose all points.
<    * @param result an Rect structure filled in with the minimal enclosing
<    *               rectangle.
<    * @returns true if any points were enclosed or false if all the points were
<    *          outside of the clipping rectangle.
---
>    * @param clip an SDL_Rect used for clipping or std::nullopt to enclose all
>    *             points.
>    * @returns a SDL_Rect structure filled in with the minimal enclosing
>    *          rectangle or an empty rect if all the points were outside of the
>    *          clipping rectangle.
447c992,997
<     return SDL_GetRectEnclosingPoints(points, clip);
---
>     Rect result;
>     if (SDL_GetRectEnclosingPoints(
>           points.data(), points.size(), clip, &result)) {
>       return result;
>     }
>     return {};
449a1000,1008
>   /**
>    * Construct the rect from given center coordinates, width and height
>    *
>    * @param[in] cx X coordinate of the rectangle center
>    * @param[in] cy Y coordinate of the rectangle center
>    * @param[in] w Width of the rectangle
>    * @param[in] h Height of the rectangle
>    *
>    */
452c1011
<     static_assert(false, "Not implemented");
---
>     return Rect(cx - w / 2, cy - h / 2, w, h);
455c1014,1021
<   static constexpr Rect FromCenter(const Point& center, const Point& size)
---
>   /**
>    * Construct the rect from given center coordinates and size
>    *
>    * @param[in] center Coordinates of the rectangle center
>    * @param[in] size Dimensions of the rectangle
>    *
>    */
>   static constexpr Rect FromCenter(Point center, Point size)
457c1023
<     static_assert(false, "Not implemented");
---
>     return Rect(center - size / 2, size);
459a1026,1034
>   /**
>    * Construct the rect from given corners coordinates
>    *
>    * @param[in] x1 X coordinate of the top left rectangle corner
>    * @param[in] y1 Y coordinate of the top left rectangle corner
>    * @param[in] x2 X coordinate of the bottom right rectangle corner
>    * @param[in] y2 Y coordinate of the bottom right rectangle corner
>    *
>    */
462c1037
<     static_assert(false, "Not implemented");
---
>     return Rect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
465c1040,1047
<   static constexpr Rect FromCorners(const PointRaw& p1, const PointRaw& p2)
---
>   /**
>    * Construct the rect from given centers coordinates
>    *
>    * @param[in] p1 Coordinates of the top left rectangle corner
>    * @param[in] p2 Coordinates of the bottom right rectangle corner
>    *
>    */
>   static constexpr Rect FromCorners(Point p1, Point p2)
467c1049
<     static_assert(false, "Not implemented");
---
>     return Rect(p1, p2 - p1 + Point(1, 1));
470c1052,1058
<   auto GetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get X coordinate of the rect second corner
>    *
>    * @returns X coordinate of the rect second corner
>    *
>    */
>   constexpr int GetX2() const { return x + w - 1; }
472c1060,1074
<   auto SetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set X coordinate of the rect second corner
>    *
>    * @param[in] x2 New X coordinate value
>    *
>    * This modifies rectangle width internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& SetX2(int x2)
>   {
>     w = x2 - x + 1;
>     return *this;
>   }
474c1076,1082
<   auto GetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get Y coordinate of the rect second corner
>    *
>    * @returns Y coordinate of the rect second corner
>    *
>    */
>   constexpr int GetY2() const { return y + h - 1; }
476c1084,1098
<   auto SetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set Y coordinate of the rect second corner
>    *
>    * @param[in] y2 New Y coordinate value
>    *
>    * This modifies rectangle height internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& SetY2(int y2)
>   {
>     h = y2 - y + 1;
>     return *this;
>   }
478c1100,1106
<   auto GetTopLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top left corner of the rect
>    *
>    * @returns Top left corner of the rect
>    *
>    */
>   constexpr Point GetTopLeft() const { return Point(x, y); }
480c1108,1114
<   auto GetTopRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top right corner of the rect
>    *
>    * @returns Top right corner of the rect
>    *
>    */
>   constexpr Point GetTopRight() const { return Point(GetX2(), y); }
482c1116,1122
<   auto GetBottomLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom left corner of the rect
>    *
>    * @returns bottom left corner of the rect
>    *
>    */
>   constexpr Point GetBottomLeft() const { return Point(x, GetY2()); }
484c1124,1130
<   auto GetBottomRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom right corner of the rect
>    *
>    * @returns Bottom right corner of the rect
>    *
>    */
>   constexpr Point GetBottomRight() const { return Point(GetX2(), GetY2()); }
486c1132,1138
<   auto GetSize() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get size of the rect
>    *
>    * @returns Size of the rect
>    *
>    */
>   constexpr Point GetSize() const { return Point(w, h); }
488c1140,1146
<   auto GetCentroid() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get centroid of the rect
>    *
>    * @returns Centroid of the rect
>    *
>    */
>   constexpr Point GetCentroid() const { return Point(x + w / 2, y + h / 2); }
490c1148,1164
<   bool GetLineIntersection(PointRaw* p1, PointRaw* p2)
---
>   /**
>    * Calculate the intersection of a rectangle and line segment
>    *
>    * @param[in,out] p1 Starting coordinates of the line
>    * @param[in,out] p2 Ending coordinates of the line
>    *
>    * @returns True if there is an intersection, false otherwise
>    *
>    * This function is used to clip a line segment to a
>    * rectangle. A line segment contained entirely within the
>    * rectangle or that does not intersect will remain unchanged.
>    * A line segment that crosses the rectangle at either or both
>    * ends will be clipped to the boundary of the rectangle and
>    * the new coordinates saved in p1 and/or p2 as necessary.
>    *
>    */
>   bool GetLineIntersection(PointRaw* p1, PointRaw* p2) const
492c1166,1169
<     static_assert(false, "Not implemented");
---
>     return GetLineIntersection(p1 ? &p1->x : nullptr,
>                                p1 ? &p1->y : nullptr,
>                                p2 ? &p2->x : nullptr,
>                                p2 ? &p2->y : nullptr);
518c1195
<    * Convert an Rect to FRect
---
>    * Convert an SDL_Rect to SDL_FRect
520,521c1197
<    * @param rect a pointer to an Rect.
<    * @param frect a pointer filled in with the floating point representation of
---
>    * @return A FRect filled in with the floating point representation of
528c1204,1209
<   constexpr operator SDL_FRect() const : SDL_Rect(SDL_RectToFRect()) {}
---
>   constexpr operator SDL_FRect() const
>   {
>     SDL_FRect r;
>     SDL_RectToFRect(this, &r);
>     return r;
>   }
533c1214
< #error "operator FRect (undefined)"
---
>   constexpr operator FRect() const;
565c1246
<    * @param b the second rectangle to test.
---
>    * @param other the second rectangle to test.
574c1255
<     return SDL_RectsEqual(this, other);
---
>     return SDL_RectsEqual(this, &other);
576a1258,1265
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param p Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
579c1268
<     static_assert(false, "Not implemented");
---
>     return SDL_PointInRect(&p, this);
581a1271,1278
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param other Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
584c1281
<     static_assert(false, "Not implemented");
---
>     return GetUnion(other) == *this;
590,592c1287
<    * If either pointer is nullptr the function will return false.
<    *
<    * @param B an Rect structure representing the second rectangle.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
603c1298
<     return SDL_HasRectIntersection(this, other);
---
>     return SDL_HasRectIntersection(this, &other);
611,614c1306,1308
<    * @param B an Rect structure representing the second rectangle.
<    * @param result an Rect structure filled in with the intersection of
<    *               rectangles `A` and `B`.
<    * @returns true if there is an intersection, false otherwise.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns an SDL_Rect structure filled in with the intersection of
>    *               if there is intersection, std::nullopt otherwise.
622c1316,1319
<     return SDL_GetRectIntersection(this, other);
---
>     if (Rect result; SDL_GetRectIntersection(this, &other, &result)) {
>       return result;
>     }
>     return std::nullopt;
628,630c1325,1326
<    * @param B an Rect structure representing the second rectangle.
<    * @param result an Rect structure filled in with the union of rectangles
<    *               `A` and `B`.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns Rect representing union of two rectangles
637c1333,1454
<     return CheckError(SDL_GetRectUnion(this, other));
---
>     Rect result;
>     CheckError(SDL_GetRectUnion(this, &other, &result));
>     return result;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr Rect GetExtension(unsigned int amount) const
>   {
>     Rect r = *this;
>     r.Extend(amount);
>     return r;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr Rect GetExtension(unsigned int hAmount, unsigned int vAmount) const
>   {
>     Rect r = *this;
>     r.Extend(hAmount, vAmount);
>     return r;
>   }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& Extend(unsigned int amount) { return Extend(amount, amount); }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& Extend(unsigned int hAmount, unsigned int vAmount)
>   {
>     x -= hAmount;
>     y -= vAmount;
>     w += hAmount * 2;
>     h += vAmount * 2;
>     return *this;
>   }
> 
>   /**
>    * Get rectangle moved by a given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr Rect operator+(const Point& offset) const
>   {
>     return Rect(x + offset.x, y + offset.y, w, h);
>   }
> 
>   /**
>    * Get rectangle moved by an opposite of given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr Rect operator-(const Point& offset) const
>   {
>     return Rect(x - offset.x, y - offset.y, w, h);
>   }
> 
>   /**
>    * Move by then given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& operator+=(const Point& offset)
>   {
>     x += offset.x;
>     y += offset.y;
>     return *this;
>   }
> 
>   /**
>    * Move by an opposite of the given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr Rect& operator-=(const Point& offset)
>   {
>     x -= offset.x;
>     y -= offset.y;
>     return *this;
646a1464,1465
>  * @cat wrap-extending-struct
>  *
672,675c1491,1494
<    * @param x the value for x.
<    * @param y the value for y.
<    * @param w the value for w.
<    * @param h the value for h.
---
>    * @param x the left x.
>    * @param y the top y.
>    * @param w the width.
>    * @param h the height.
683,685c1502
<    * Wraps FRect.
<    *
<    * @param r the value to be wrapped
---
>    * Constructs from top-left corner plus size
687c1504,1507
<   constexpr FRect(const FPointRaw& corner, const FPointRaw& size) {}
---
>   constexpr FRect(FPoint corner, FPoint size)
>     : FRect{corner.x, corner.y, size.x, size.y}
>   {
>   }
694c1514
<     return x == other.x && y == other.y && w == other.w && h == other.h;
---
>     return Equal(other);
708,711c1528
<   constexpr explicit operator bool() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   constexpr operator bool() const { return !Empty(); }
714c1531
<    * Get the x.
---
>    * Get left x coordinate.
716c1533
<    * @returns current x value.
---
>    * @returns coordinate of the left x
721c1538
<    * Set the x.
---
>    * Set the left x coordinate.
723c1540
<    * @param newX the new x value.
---
>    * @param newX the new left x.
733c1550
<    * Get the y.
---
>    * Get top y coordinate.
735c1552
<    * @returns current y value.
---
>    * @returns coordinate of the top y.
740c1557
<    * Set the y.
---
>    * Set the top y coordinate.
742c1559
<    * @param newY the new y value.
---
>    * @param newY the new top y.
752c1569
<    * Get the w.
---
>    * Get width of the rect
754c1571
<    * @returns current w value.
---
>    * @returns Width of the rect
759c1576
<    * Set the w.
---
>    * Set the width of the rect.
761c1578
<    * @param newW the new w value.
---
>    * @param newW the new width.
771c1588
<    * Get the h.
---
>    * Get height of the rect
773c1590
<    * @returns current h value.
---
>    * @returns Height of the rect
778c1595
<    * Set the h.
---
>    * Set the height of the rect.
780c1597
<    * @param newH the new h value.
---
>    * @param newH the new height.
796c1613
<    * @param points an array of FPoint structures representing points to be
---
>    * @param points a span of SDL_Point structures representing points to be
798,803c1615,1619
<    * @param count the number of structures in the `points` array.
<    * @param clip an FRect used for clipping or nullptr to enclose all points.
<    * @param result an FRect structure filled in with the minimal enclosing
<    *               rectangle.
<    * @returns true if any points were enclosed or false if all the points were
<    *          outside of the clipping rectangle.
---
>    * @param clip an SDL_Rect used for clipping or std::nullopt to enclose all
>    *             points.
>    * @returns a FRect structure filled in with the minimal enclosing
>    *          rectangle or an empty FRect if all the points were outside of
>    *          the clipping rectangle.
811c1627,1631
<     return SDL_GetRectEnclosingPointsFloat(points, clip);
---
>     if (FRect result; SDL_GetRectEnclosingPointsFloat(
>           points.data(), points.size(), clip, &result)) {
>       return result;
>     }
>     return {};
813a1634,1642
>   /**
>    * Construct the rect from given center coordinates, width and height
>    *
>    * @param[in] cx X coordinate of the rectangle center
>    * @param[in] cy Y coordinate of the rectangle center
>    * @param[in] w Width of the rectangle
>    * @param[in] h Height of the rectangle
>    *
>    */
816c1645
<     static_assert(false, "Not implemented");
---
>     return FRect(cx - w / 2, cy - h / 2, w, h);
819,820c1648,1655
<   static constexpr FRect FromCenter(const FPointRaw& center,
<                                     const FPointRaw& size)
---
>   /**
>    * Construct the rect from given center coordinates and size
>    *
>    * @param[in] center Coordinates of the rectangle center
>    * @param[in] size Dimensions of the rectangle
>    *
>    */
>   static constexpr FRect FromCenter(FPoint center, FPoint size)
822c1657
<     static_assert(false, "Not implemented");
---
>     return FRect(center - size / 2, size);
824a1660,1668
>   /**
>    * Construct the rect from given corners coordinates
>    *
>    * @param[in] x1 X coordinate of the top left rectangle corner
>    * @param[in] y1 Y coordinate of the top left rectangle corner
>    * @param[in] x2 X coordinate of the bottom right rectangle corner
>    * @param[in] y2 Y coordinate of the bottom right rectangle corner
>    *
>    */
827c1671
<     static_assert(false, "Not implemented");
---
>     return FRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
830c1674,1681
<   static constexpr FRect FromCorners(const FPointRaw& p1, const FPointRaw& p2)
---
>   /**
>    * Construct the rect from given centers coordinates
>    *
>    * @param[in] p1 Coordinates of the top left rectangle corner
>    * @param[in] p2 Coordinates of the bottom right rectangle corner
>    *
>    */
>   static constexpr FRect FromCorners(FPoint p1, FPoint p2)
832c1683
<     static_assert(false, "Not implemented");
---
>     return FRect(p1, p2 - p1 + FPoint(1, 1));
835c1686,1692
<   auto GetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get X coordinate of the rect second corner
>    *
>    * @returns X coordinate of the rect second corner
>    *
>    */
>   constexpr float GetX2() const { return x + w - 1; }
837c1694,1708
<   auto SetX2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set X coordinate of the rect second corner
>    *
>    * @param[in] x2 New X coordinate value
>    *
>    * This modifies rectangle width internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& SetX2(float x2)
>   {
>     w = x2 - x + 1;
>     return *this;
>   }
839c1710,1716
<   auto GetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get Y coordinate of the rect second corner
>    *
>    * @returns Y coordinate of the rect second corner
>    *
>    */
>   constexpr float GetY2() const { return y + h - 1; }
841c1718,1732
<   auto SetY2() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Set Y coordinate of the rect second corner
>    *
>    * @param[in] y2 New Y coordinate value
>    *
>    * This modifies rectangle height internally
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& SetY2(float y2)
>   {
>     h = y2 - y + 1;
>     return *this;
>   }
843c1734,1740
<   auto GetTopLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top left corner of the rect
>    *
>    * @returns Top left corner of the rect
>    *
>    */
>   constexpr FPoint GetTopLeft() const { return FPoint(x, y); }
845c1742,1748
<   auto GetTopRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get top right corner of the rect
>    *
>    * @returns Top right corner of the rect
>    *
>    */
>   constexpr FPoint GetTopRight() const { return FPoint(GetX2(), y); }
847c1750,1756
<   auto GetBottomLeft() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom left corner of the rect
>    *
>    * @returns bottom left corner of the rect
>    *
>    */
>   constexpr FPoint GetBottomLeft() const { return FPoint(x, GetY2()); }
849c1758,1764
<   auto GetBottomRight() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get bottom right corner of the rect
>    *
>    * @returns Bottom right corner of the rect
>    *
>    */
>   constexpr FPoint GetBottomRight() const { return FPoint(GetX2(), GetY2()); }
851c1766,1772
<   auto GetSize() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get size of the rect
>    *
>    * @returns Size of the rect
>    *
>    */
>   constexpr FPoint GetSize() const { return FPoint(w, h); }
853c1774,1780
<   auto GetCentroid() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Get centroid of the rect
>    *
>    * @returns Centroid of the rect
>    *
>    */
>   constexpr FPoint GetCentroid() const { return FPoint(x + w / 2, y + h / 2); }
879c1806
<    * Determine whether a floating point rectangle can contain any point.
---
>    * Calculate the intersection of a rectangle and line segment
881,882c1808,1833
<    * A rectangle is considered "empty" for this function if `r` is nullptr, or
<    * if `r`'s width and/or height are < 0.0f.
---
>    * @param[in,out] p1 Starting coordinates of the line
>    * @param[in,out] p2 Ending coordinates of the line
>    *
>    * @returns True if there is an intersection, false otherwise
>    *
>    * This function is used to clip a line segment to a
>    * rectangle. A line segment contained entirely within the
>    * rectangle or that does not intersect will remain unchanged.
>    * A line segment that crosses the rectangle at either or both
>    * ends will be clipped to the boundary of the rectangle and
>    * the new coordinates saved in p1 and/or p2 as necessary.
>    *
>    */
>   bool GetLineIntersection(FPoint* p1, FPoint* p2) const
>   {
>     return GetLineIntersection(p1 ? &p1->x : nullptr,
>                                p1 ? &p1->y : nullptr,
>                                p2 ? &p2->x : nullptr,
>                                p2 ? &p2->y : nullptr);
>   }
> 
>   /**
>    * Determine whether a rectangle has no area.
>    *
>    * A rectangle is considered "empty" for this function if `r` is NULL, or if
>    * `r`'s width and/or height are <= 0.
911c1862
<    * @param b the second rectangle to test.
---
>    * @param other the second rectangle to test.
923c1874
<     return SDL_RectsEqualEpsilon(this, other, epsilon);
---
>     return SDL_RectsEqualEpsilon(this, &other, epsilon);
927,928c1878
<    * Determine whether two floating point rectangles are equal, within a default
<    * epsilon.
---
>    * Determine whether two rectangles are equal.
941c1891
<    * @param b the second rectangle to test.
---
>    * @param other the second rectangle to test.
952c1902
<     return SDL_RectsEqualFloat(this, other);
---
>     return SDL_RectsEqualFloat(this, &other);
954a1905,1912
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param p Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
957c1915
<     static_assert(false, "Not implemented");
---
>     return SDL_PointInRectFloat(&p, this);
959a1918,1925
>   /**
>    * Check whether the rect contains given point
>    *
>    * @param other Point to check
>    *
>    * @returns True if the point is contained in the rect
>    *
>    */
962c1928
<     static_assert(false, "Not implemented");
---
>     return GetUnion(other) == *this;
966,968c1932
<    * Determine whether two rectangles intersect with float precision.
<    *
<    * If either pointer is nullptr the function will return false.
---
>    * Determine whether two rectangles intersect.
970c1934
<    * @param B an FRect structure representing the second rectangle.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
972a1937,1938
>    * @threadsafety It is safe to call this function from any thread.
>    *
979c1945
<     return SDL_HasRectIntersectionFloat(this, other);
---
>     return SDL_HasRectIntersectionFloat(this, &other);
987,990c1953,1955
<    * @param B an FRect structure representing the second rectangle.
<    * @param result an FRect structure filled in with the intersection of
<    *               rectangles `A` and `B`.
<    * @returns true if there is an intersection, false otherwise.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns an SDL_Rect structure filled in with the intersection of
>    *          if there is intersection, an empty FRect otherwise.
998c1963,1966
<     return SDL_GetRectIntersectionFloat(this, other);
---
>     if (FRect result; SDL_GetRectIntersectionFloat(this, &other, &result)) {
>       return result;
>     }
>     return {};
1004,1006c1972,1973
<    * @param B an FRect structure representing the second rectangle.
<    * @param result an FRect structure filled in with the union of rectangles
<    *               `A` and `B`.
---
>    * @param other an SDL_Rect structure representing the second rectangle.
>    * @returns Rect representing union of two rectangles
1013c1980,2101
<     return CheckError(SDL_GetRectUnionFloat(this, other));
---
>     FRect result;
>     CheckError(SDL_GetRectUnionFloat(this, &other, &result));
>     return result;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr FRect GetExtension(unsigned int amount) const
>   {
>     FRect r = *this;
>     r.Extend(amount);
>     return r;
>   }
> 
>   /**
>    * Get a rect extended by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Extended rect
>    *
>    */
>   constexpr FRect GetExtension(float hAmount, float vAmount) const
>   {
>     FRect r = *this;
>     r.Extend(hAmount, vAmount);
>     return r;
>   }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] amount Number of pixels to extend by
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& Extend(float amount) { return Extend(amount, amount); }
> 
>   /**
>    * Extend a rect by specified amount of pixels
>    *
>    * @param[in] hAmount Number of pixels to extend by
>    *                    in horizontal direction
>    * @param[in] vAmount Number of pixels to extend by
>    *                    in vertical direction
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& Extend(float hAmount, float vAmount)
>   {
>     x -= hAmount;
>     y -= vAmount;
>     w += hAmount * 2;
>     h += vAmount * 2;
>     return *this;
>   }
> 
>   /**
>    * Get rectangle moved by a given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr FRect operator+(const FPoint& offset) const
>   {
>     return FRect(x + offset.x, y + offset.y, w, h);
>   }
> 
>   /**
>    * Get rectangle moved by an opposite of given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Moved rectangle
>    *
>    */
>   constexpr FRect operator-(const FPoint& offset) const
>   {
>     return FRect(x - offset.x, y - offset.y, w, h);
>   }
> 
>   /**
>    * Move by then given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& operator+=(const FPoint& offset)
>   {
>     x += offset.x;
>     y += offset.y;
>     return *this;
>   }
> 
>   /**
>    * Move by an opposite of the given offset
>    *
>    * @param[in] offset Point specifying an offset
>    *
>    * @returns Reference to self
>    *
>    */
>   constexpr FRect& operator-=(const FPoint& offset)
>   {
>     x -= offset.x;
>     y -= offset.y;
>     return *this;
1030c2118
<   SDL_RectToFRect(rect, frect);
---
>   SDL_RectToFRect(&rect, frect);
1056c2144
<   return SDL_PointInRect(p, r);
---
>   return SDL_PointInRect(&p, &r);
1077c2165
< inline bool RectEmpty(const RectRaw& r) { return SDL_RectEmpty(r); }
---
> inline bool RectEmpty(const RectRaw& r) { return SDL_RectEmpty(&r); }
1100c2188
<   return SDL_RectsEqual(a, b);
---
>   return SDL_RectsEqual(&a, &b);
1120c2208
<   return SDL_HasRectIntersection(A, B);
---
>   return SDL_HasRectIntersection(&A, &B);
1142c2230
<   return SDL_GetRectIntersection(A, B, result);
---
>   return SDL_GetRectIntersection(&A, &B, result);
1158c2246
<   CheckError(SDL_GetRectUnion(A, B, result));
---
>   CheckError(SDL_GetRectUnion(&A, &B, result));
1182c2270
<   return SDL_GetRectEnclosingPoints(points, clip, result);
---
>   return SDL_GetRectEnclosingPoints(points.data(), points.size(), clip, result);
1209c2297
<   return SDL_GetRectAndLineIntersection(rect, X1, Y1, X2, Y2);
---
>   return SDL_GetRectAndLineIntersection(&rect, X1, Y1, X2, Y2);
1235c2323
<   return SDL_PointInRectFloat(p, r);
---
>   return SDL_PointInRectFloat(&p, &r);
1256c2344
< inline bool RectEmptyFloat(const FRectRaw& r) { return SDL_RectEmptyFloat(r); }
---
> inline bool RectEmptyFloat(const FRectRaw& r) { return SDL_RectEmptyFloat(&r); }
1287c2375
<   return SDL_RectsEqualEpsilon(a, b, epsilon);
---
>   return SDL_RectsEqualEpsilon(&a, &b, epsilon);
1317c2405
<   return SDL_RectsEqualFloat(a, b);
---
>   return SDL_RectsEqualFloat(&a, &b);
1335c2423
<   return SDL_HasRectIntersectionFloat(A, B);
---
>   return SDL_HasRectIntersectionFloat(&A, &B);
1357c2445
<   return SDL_GetRectIntersectionFloat(A, B, result);
---
>   return SDL_GetRectIntersectionFloat(&A, &B, result);
1375c2463
<   CheckError(SDL_GetRectUnionFloat(A, B, result));
---
>   CheckError(SDL_GetRectUnionFloat(&A, &B, result));
1401c2489,2490
<   return SDL_GetRectEnclosingPointsFloat(points, clip, result);
---
>   return SDL_GetRectEnclosingPointsFloat(
>     points.data(), points.size(), clip, result);
1429c2518
<   return SDL_GetRectAndLineIntersectionFloat(rect, X1, Y1, X2, Y2);
---
>   return SDL_GetRectAndLineIntersectionFloat(&rect, X1, Y1, X2, Y2);
1432a2522,2613
> 
> constexpr Point::operator FPoint() const { return {float(x), float(y)}; }
> 
> constexpr FPoint Point::operator/(float value) const
> {
>   return FPoint(*this) / value;
> }
> constexpr FPoint Point::operator*(float value) const
> {
>   return FPoint(*this) * value;
> }
> 
> constexpr Point Point::GetClamped(const Rect& rect) const
> {
>   Point p = *this;
>   p.Clamp(rect);
>   return p;
> }
> 
> constexpr Point& Point::Clamp(const Rect& rect)
> {
>   if (x < rect.x) x = rect.x;
>   if (x > rect.GetX2()) x = rect.GetX2();
>   if (y < rect.y) y = rect.y;
>   if (y > rect.GetY2()) y = rect.GetY2();
>   return *this;
> }
> 
> constexpr Point Point::GetWrapped(const Rect& rect) const
> {
>   Point p = *this;
>   p.Wrap(rect);
>   return p;
> }
> 
> constexpr Point& Point::Wrap(const Rect& rect)
> {
>   if (x < rect.x)
>     x = rect.x + rect.w - 1 - (rect.x - x + rect.w - 1) % rect.w;
>   else if (x >= rect.x + rect.w)
>     x = rect.x + (x - rect.x - rect.w) % rect.w;
> 
>   if (y < rect.y)
>     y = rect.y + rect.h - 1 - (rect.y - y + rect.h - 1) % rect.h;
>   else if (y >= rect.y + rect.h)
>     y = rect.y + (y - rect.y - rect.h) % rect.h;
> 
>   return *this;
> }
> 
> constexpr FPoint FPoint::GetClamped(const FRect& rect) const
> {
>   FPoint p = *this;
>   p.Clamp(rect);
>   return p;
> }
> 
> constexpr FPoint& FPoint::Clamp(const FRect& rect)
> {
>   if (x < rect.x) x = rect.x;
>   if (x > rect.GetX2()) x = rect.GetX2();
>   if (y < rect.y) y = rect.y;
>   if (y > rect.GetY2()) y = rect.GetY2();
>   return *this;
> }
> 
> constexpr FPoint FPoint::GetWrapped(const FRect& rect) const
> {
>   FPoint p = *this;
>   p.Wrap(rect);
>   return p;
> }
> 
> constexpr FPoint& FPoint::Wrap(const FRect& rect)
> {
>   if (x < rect.x)
>     x = rect.x + rect.w - 1 - SDL_fmod(rect.x - x + rect.w - 1, rect.w);
>   else if (x >= rect.x + rect.w)
>     x = rect.x + SDL_fmod(x - rect.x - rect.w, rect.w);
> 
>   if (y < rect.y)
>     y = rect.y + rect.h - 1 - SDL_fmod(rect.y - y + rect.h - 1, rect.h);
>   else if (y >= rect.y + rect.h)
>     y = rect.y + SDL_fmod(y - rect.y - rect.h, rect.h);
> 
>   return *this;
> }
> 
> constexpr Rect::operator FRect() const
> {
>   return {float(x), float(y), float(w), float(h)};
> }
