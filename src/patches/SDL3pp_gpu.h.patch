15c15
<  * @defgroup CategoryGPU Category GPU
---
>  * @defgroup CategoryGPU 3D Rendering and GPU Compute
142,143c142
<  * [here](https://github.com/TheSpydog/SDL_gpu_examples)
<  * .
---
>  * [here](https://github.com/TheSpydog/SDL_gpu_examples).
551,552c550
<    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<    * .
---
>    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
1311d1308
<    * @param num_bindings the number of bindings in the bindings array.
1342,1343d1338
<    * @param num_bindings the number of texture-sampler pairs to bind from the
<    *                     array.
1364d1358
<    * @param num_bindings the number of storage texture to bind from the array.
1384d1377
<    * @param num_bindings the number of buffers to bind from the array.
1404,1405d1396
<    * @param num_bindings the number of texture-sampler pairs to bind from the
<    *                     array.
1426d1416
<    * @param num_bindings the number of storage textures to bind from the array.
1447d1436
<    * @param num_bindings the number of storage buffers to bind from the array.
1611,1612d1599
<    * @param num_bindings the number of texture-sampler bindings to bind from the
<    *                     array.
1633d1619
<    * @param num_bindings the number of storage textures to bind from the array.
1653d1638
<    * @param num_bindings the number of storage buffers to bind from the array.
2175d2159
<    * @param length the length of the data to write.
2192d2175
<    * @param length the length of the data to write.
2209d2191
<    * @param length the length of the data to write.
2236,2237d2217
<    * @param num_color_targets the number of color targets in the
<    *                          color_target_infos array.
2275,2276d2254
<    * @param num_storage_texture_bindings the number of storage textures to bind
<    *                                     from the array.
2279,2280d2256
<    * @param num_storage_buffer_bindings the number of storage buffers to bind
<    *                                    from the array.
2352,2353d2327
<    * @param swapchain_texture a pointer filled in with a swapchain texture
<    *                          handle.
2357a2332
>    * @returns a swapchain texture handle.
2402,2403d2376
<    * @param swapchain_texture a pointer filled in with a swapchain texture
<    *                          handle.
2407a2381
>    * @returns a swapchain texture handle.
3664,3665c3638
<    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<    * .
---
>    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
4057d4029
<    * @param num_fences the number of fences in the fences array.
5094,5097d5065
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5101,5104d5068
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5108,5111d5071
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5149,5152d5108
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5155,5158d5110
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5162,5165d5113
< #endif // SDL_VERSION_ATLEAST(3, 3, 2)
< 
< #if SDL_VERSION_ATLEAST(3, 3, 2)
< 
5719,5720c5667
<  * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<  * .
---
>  * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
6136d6082
<  * @param length the length of the data to write.
6167d6112
<  * @param length the length of the data to write.
6198d6142
<  * @param length the length of the data to write.
6239,6240d6182
<  * @param num_color_targets the number of color targets in the
<  *                          color_target_infos array.
6255,6256c6197,6200
<   return SDL_BeginGPURenderPass(
<     command_buffer, color_target_infos, depth_stencil_target_info);
---
>   return SDL_BeginGPURenderPass(command_buffer,
>                                 color_target_infos.data(),
>                                 color_target_infos.size(),
>                                 depth_stencil_target_info);
6317c6261
<   SDL_SetGPUScissor(render_pass, scissor);
---
>   SDL_SetGPUScissor(render_pass, &scissor);
6373d6316
<  * @param num_bindings the number of bindings in the bindings array.
6381c6324,6325
<   SDL_BindGPUVertexBuffers(render_pass, first_slot, bindings);
---
>   SDL_BindGPUVertexBuffers(
>     render_pass, first_slot, bindings.data(), bindings.size());
6428,6429d6371
<  * @param num_bindings the number of texture-sampler pairs to bind from the
<  *                     array.
6440c6382,6385
<   SDL_BindGPUVertexSamplers(render_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUVertexSamplers(render_pass,
>                             first_slot,
>                             texture_sampler_bindings.data(),
>                             texture_sampler_bindings.size());
6463d6407
<  * @param num_bindings the number of storage texture to bind from the array.
6474c6418,6419
<   SDL_BindGPUVertexStorageTextures(render_pass, first_slot, storage_textures);
---
>   SDL_BindGPUVertexStorageTextures(
>     render_pass, first_slot, storage_textures.data(), storage_textures.size());
6497d6441
<  * @param num_bindings the number of buffers to bind from the array.
6508c6452,6453
<   SDL_BindGPUVertexStorageBuffers(render_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUVertexStorageBuffers(
>     render_pass, first_slot, storage_buffers.data(), storage_buffers.size());
6531,6532d6475
<  * @param num_bindings the number of texture-sampler pairs to bind from the
<  *                     array.
6543,6544c6486,6489
<   SDL_BindGPUFragmentSamplers(
<     render_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUFragmentSamplers(render_pass,
>                               first_slot,
>                               texture_sampler_bindings.data(),
>                               texture_sampler_bindings.size());
6567d6511
<  * @param num_bindings the number of storage textures to bind from the array.
6578c6522,6523
<   SDL_BindGPUFragmentStorageTextures(render_pass, first_slot, storage_textures);
---
>   SDL_BindGPUFragmentStorageTextures(
>     render_pass, first_slot, storage_textures.data(), storage_textures.size());
6601d6545
<  * @param num_bindings the number of storage buffers to bind from the array.
6612c6556,6557
<   SDL_BindGPUFragmentStorageBuffers(render_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUFragmentStorageBuffers(
>     render_pass, first_slot, storage_buffers.data(), storage_buffers.size());
6819,6820d6763
<  * @param num_storage_texture_bindings the number of storage textures to bind
<  *                                     from the array.
6823,6824d6765
<  * @param num_storage_buffer_bindings the number of storage buffers to bind
<  *                                    from the array.
6836,6837c6777,6781
<   return SDL_BeginGPUComputePass(
<     command_buffer, storage_texture_bindings, storage_buffer_bindings);
---
>   return SDL_BeginGPUComputePass(command_buffer,
>                                  storage_texture_bindings.data(),
>                                  storage_texture_bindings.size(),
>                                  storage_buffer_bindings.data(),
>                                  storage_buffer_bindings.size());
6879,6880d6822
<  * @param num_bindings the number of texture-sampler bindings to bind from the
<  *                     array.
6891,6892c6833,6836
<   SDL_BindGPUComputeSamplers(
<     compute_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUComputeSamplers(compute_pass,
>                              first_slot,
>                              texture_sampler_bindings.data(),
>                              texture_sampler_bindings.size());
6915d6858
<  * @param num_bindings the number of storage textures to bind from the array.
6926c6869,6870
<   SDL_BindGPUComputeStorageTextures(compute_pass, first_slot, storage_textures);
---
>   SDL_BindGPUComputeStorageTextures(
>     compute_pass, first_slot, storage_textures.data(), storage_textures.size());
6949d6892
<  * @param num_bindings the number of storage buffers to bind from the array.
6960c6903,6904
<   SDL_BindGPUComputeStorageBuffers(compute_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUComputeStorageBuffers(
>     compute_pass, first_slot, storage_buffers.data(), storage_buffers.size());
7609,7610d7552
<  * @param swapchain_texture a pointer filled in with a swapchain texture
<  *                          handle.
7614a7557
>  * @returns a swapchain texture handle.
7637,7638c7580,7586
<   return CheckError(SDL_AcquireGPUSwapchainTexture(
<     command_buffer, window, swapchain_texture_width, swapchain_texture_height));
---
>   GPUTextureRaw texture;
>   CheckError(SDL_AcquireGPUSwapchainTexture(command_buffer,
>                                             window,
>                                             &texture,
>                                             swapchain_texture_width,
>                                             swapchain_texture_height));
>   return texture;
7702,7703d7649
<  * @param swapchain_texture a pointer filled in with a swapchain texture
<  *                          handle.
7707a7654
>  * @returns a swapchain texture handle.
7725,7726c7672,7678
<   return CheckError(SDL_WaitAndAcquireGPUSwapchainTexture(
<     command_buffer, window, swapchain_texture_width, swapchain_texture_height));
---
>   GPUTextureRaw texture;
>   CheckError(SDL_WaitAndAcquireGPUSwapchainTexture(command_buffer,
>                                                    window,
>                                                    &texture,
>                                                    swapchain_texture_width,
>                                                    swapchain_texture_height));
>   return texture;
7860d7811
<  * @param num_fences the number of fences in the fences array.
7872c7823,7824
<   CheckError(SDL_WaitForGPUFences(device, wait_all, fences));
---
>   CheckError(
>     SDL_WaitForGPUFences(device, wait_all, fences.data(), fences.size()));
8024,8027d7975
< 
< #endif // SDL_VERSION_ATLEAST(3, 4, 0)
< 
< #if SDL_VERSION_ATLEAST(3, 4, 0)
