15c15
<  * @defgroup CategoryGPU Category GPU
---
>  * @defgroup CategoryGPU 3D Rendering and GPU Compute
142,143c142
<  * [here](https://github.com/TheSpydog/SDL_gpu_examples)
<  * .
---
>  * [here](https://github.com/TheSpydog/SDL_gpu_examples).
468,469c467
<    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<    * .
---
>    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
1221d1218
<    * @param num_bindings the number of bindings in the bindings array.
1252,1253d1248
<    * @param num_bindings the number of texture-sampler pairs to bind from the
<    *                     array.
1274d1268
<    * @param num_bindings the number of storage texture to bind from the array.
1294d1287
<    * @param num_bindings the number of buffers to bind from the array.
1314,1315d1306
<    * @param num_bindings the number of texture-sampler pairs to bind from the
<    *                     array.
1336d1326
<    * @param num_bindings the number of storage textures to bind from the array.
1357d1346
<    * @param num_bindings the number of storage buffers to bind from the array.
1521,1522d1509
<    * @param num_bindings the number of texture-sampler bindings to bind from the
<    *                     array.
1543d1529
<    * @param num_bindings the number of storage textures to bind from the array.
1563d1548
<    * @param num_bindings the number of storage buffers to bind from the array.
2067d2051
<    * @param length the length of the data to write.
2084d2067
<    * @param length the length of the data to write.
2101d2083
<    * @param length the length of the data to write.
2120,2121d2101
<    * @param num_color_targets the number of color targets in the
<    *                          color_target_infos array.
2159,2160d2138
<    * @param num_storage_texture_bindings the number of storage textures to bind
<    *                                     from the array.
2163,2164d2140
<    * @param num_storage_buffer_bindings the number of storage buffers to bind
<    *                                    from the array.
2232,2233d2207
<    * @param swapchain_texture a pointer filled in with a swapchain texture
<    *                          handle.
2237a2212
>    * @returns a swapchain texture handle.
2282,2283d2256
<    * @param swapchain_texture a pointer filled in with a swapchain texture
<    *                          handle.
2287a2261
>    * @returns a swapchain texture handle.
3395,3396c3369
<    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<    * .
---
>    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
3788d3760
<    * @param num_fences the number of fences in the fences array.
5222,5223c5194
<  * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<  * .
---
>  * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
5636d5606
<  * @param length the length of the data to write.
5667d5636
<  * @param length the length of the data to write.
5698d5666
<  * @param length the length of the data to write.
5731,5732d5698
<  * @param num_color_targets the number of color targets in the
<  *                          color_target_infos array.
5747,5748c5713,5716
<   return SDL_BeginGPURenderPass(
<     command_buffer, color_target_infos, depth_stencil_target_info);
---
>   return SDL_BeginGPURenderPass(command_buffer,
>                                 color_target_infos.data(),
>                                 color_target_infos.size(),
>                                 depth_stencil_target_info);
5809c5777
<   SDL_SetGPUScissor(render_pass, scissor);
---
>   SDL_SetGPUScissor(render_pass, &scissor);
5865d5832
<  * @param num_bindings the number of bindings in the bindings array.
5873c5840,5841
<   SDL_BindGPUVertexBuffers(render_pass, first_slot, bindings);
---
>   SDL_BindGPUVertexBuffers(
>     render_pass, first_slot, bindings.data(), bindings.size());
5920,5921d5887
<  * @param num_bindings the number of texture-sampler pairs to bind from the
<  *                     array.
5932c5898,5901
<   SDL_BindGPUVertexSamplers(render_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUVertexSamplers(render_pass,
>                             first_slot,
>                             texture_sampler_bindings.data(),
>                             texture_sampler_bindings.size());
5955d5923
<  * @param num_bindings the number of storage texture to bind from the array.
5966c5934,5935
<   SDL_BindGPUVertexStorageTextures(render_pass, first_slot, storage_textures);
---
>   SDL_BindGPUVertexStorageTextures(
>     render_pass, first_slot, storage_textures.data(), storage_textures.size());
5989d5957
<  * @param num_bindings the number of buffers to bind from the array.
6000c5968,5969
<   SDL_BindGPUVertexStorageBuffers(render_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUVertexStorageBuffers(
>     render_pass, first_slot, storage_buffers.data(), storage_buffers.size());
6023,6024d5991
<  * @param num_bindings the number of texture-sampler pairs to bind from the
<  *                     array.
6035,6036c6002,6005
<   SDL_BindGPUFragmentSamplers(
<     render_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUFragmentSamplers(render_pass,
>                               first_slot,
>                               texture_sampler_bindings.data(),
>                               texture_sampler_bindings.size());
6059d6027
<  * @param num_bindings the number of storage textures to bind from the array.
6070c6038,6039
<   SDL_BindGPUFragmentStorageTextures(render_pass, first_slot, storage_textures);
---
>   SDL_BindGPUFragmentStorageTextures(
>     render_pass, first_slot, storage_textures.data(), storage_textures.size());
6093d6061
<  * @param num_bindings the number of storage buffers to bind from the array.
6104c6072,6073
<   SDL_BindGPUFragmentStorageBuffers(render_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUFragmentStorageBuffers(
>     render_pass, first_slot, storage_buffers.data(), storage_buffers.size());
6311,6312d6279
<  * @param num_storage_texture_bindings the number of storage textures to bind
<  *                                     from the array.
6315,6316d6281
<  * @param num_storage_buffer_bindings the number of storage buffers to bind
<  *                                    from the array.
6328,6329c6293,6297
<   return SDL_BeginGPUComputePass(
<     command_buffer, storage_texture_bindings, storage_buffer_bindings);
---
>   return SDL_BeginGPUComputePass(command_buffer,
>                                  storage_texture_bindings.data(),
>                                  storage_texture_bindings.size(),
>                                  storage_buffer_bindings.data(),
>                                  storage_buffer_bindings.size());
6371,6372d6338
<  * @param num_bindings the number of texture-sampler bindings to bind from the
<  *                     array.
6383,6384c6349,6352
<   SDL_BindGPUComputeSamplers(
<     compute_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUComputeSamplers(compute_pass,
>                              first_slot,
>                              texture_sampler_bindings.data(),
>                              texture_sampler_bindings.size());
6407d6374
<  * @param num_bindings the number of storage textures to bind from the array.
6418c6385,6386
<   SDL_BindGPUComputeStorageTextures(compute_pass, first_slot, storage_textures);
---
>   SDL_BindGPUComputeStorageTextures(
>     compute_pass, first_slot, storage_textures.data(), storage_textures.size());
6441d6408
<  * @param num_bindings the number of storage buffers to bind from the array.
6452c6419,6420
<   SDL_BindGPUComputeStorageBuffers(compute_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUComputeStorageBuffers(
>     compute_pass, first_slot, storage_buffers.data(), storage_buffers.size());
7097,7098d7064
<  * @param swapchain_texture a pointer filled in with a swapchain texture
<  *                          handle.
7102a7069
>  * @returns a swapchain texture handle.
7125,7126c7092,7098
<   return CheckError(SDL_AcquireGPUSwapchainTexture(
<     command_buffer, window, swapchain_texture_width, swapchain_texture_height));
---
>   GPUTextureRaw texture;
>   CheckError(SDL_AcquireGPUSwapchainTexture(command_buffer,
>                                             window,
>                                             &texture,
>                                             swapchain_texture_width,
>                                             swapchain_texture_height));
>   return texture;
7190,7191d7161
<  * @param swapchain_texture a pointer filled in with a swapchain texture
<  *                          handle.
7195a7166
>  * @returns a swapchain texture handle.
7213,7214c7184,7190
<   return CheckError(SDL_WaitAndAcquireGPUSwapchainTexture(
<     command_buffer, window, swapchain_texture_width, swapchain_texture_height));
---
>   GPUTextureRaw texture;
>   CheckError(SDL_WaitAndAcquireGPUSwapchainTexture(command_buffer,
>                                                    window,
>                                                    &texture,
>                                                    swapchain_texture_width,
>                                                    swapchain_texture_height));
>   return texture;
7348d7323
<  * @param num_fences the number of fences in the fences array.
7360c7335,7336
<   CheckError(SDL_WaitForGPUFences(device, wait_all, fences));
---
>   CheckError(
>     SDL_WaitForGPUFences(device, wait_all, fences.data(), fences.size()));
