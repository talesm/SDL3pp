15c15
<  * @defgroup CategoryGPU Category GPU
---
>  * @defgroup CategoryGPU 3D Rendering and GPU Compute
142,143c142
<  * [here](https://github.com/TheSpydog/SDL_gpu_examples)
<  * .
---
>  * [here](https://github.com/TheSpydog/SDL_gpu_examples).
435,436c434
<    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<    * .
---
>    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
1188d1185
<    * @param num_bindings the number of bindings in the bindings array.
1219,1220d1215
<    * @param num_bindings the number of texture-sampler pairs to bind from the
<    *                     array.
1241d1235
<    * @param num_bindings the number of storage texture to bind from the array.
1261d1254
<    * @param num_bindings the number of buffers to bind from the array.
1281,1282d1273
<    * @param num_bindings the number of texture-sampler pairs to bind from the
<    *                     array.
1303d1293
<    * @param num_bindings the number of storage textures to bind from the array.
1324d1313
<    * @param num_bindings the number of storage buffers to bind from the array.
1488,1489d1476
<    * @param num_bindings the number of texture-sampler bindings to bind from the
<    *                     array.
1510d1496
<    * @param num_bindings the number of storage textures to bind from the array.
1530d1515
<    * @param num_bindings the number of storage buffers to bind from the array.
2034d2018
<    * @param length the length of the data to write.
2051d2034
<    * @param length the length of the data to write.
2068d2050
<    * @param length the length of the data to write.
2087,2088d2068
<    * @param num_color_targets the number of color targets in the
<    *                          color_target_infos array.
2126,2127d2105
<    * @param num_storage_texture_bindings the number of storage textures to bind
<    *                                     from the array.
2130,2131d2107
<    * @param num_storage_buffer_bindings the number of storage buffers to bind
<    *                                    from the array.
2199,2200d2174
<    * @param swapchain_texture a pointer filled in with a swapchain texture
<    *                          handle.
2204a2179
>    * @returns a swapchain texture handle.
2249,2250d2223
<    * @param swapchain_texture a pointer filled in with a swapchain texture
<    *                          handle.
2254a2228
>    * @returns a swapchain texture handle.
3362,3363c3336
<    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<    * .
---
>    * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
3755d3727
<    * @param num_fences the number of fences in the fences array.
5185,5186c5157
<  * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
<  * .
---
>  * [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/).
5599d5569
<  * @param length the length of the data to write.
5630d5599
<  * @param length the length of the data to write.
5661d5629
<  * @param length the length of the data to write.
5694,5695d5661
<  * @param num_color_targets the number of color targets in the
<  *                          color_target_infos array.
5710,5711c5676,5679
<   return SDL_BeginGPURenderPass(
<     command_buffer, color_target_infos, depth_stencil_target_info);
---
>   return SDL_BeginGPURenderPass(command_buffer,
>                                 color_target_infos.data(),
>                                 color_target_infos.size(),
>                                 depth_stencil_target_info);
5772c5740
<   SDL_SetGPUScissor(render_pass, scissor);
---
>   SDL_SetGPUScissor(render_pass, &scissor);
5828d5795
<  * @param num_bindings the number of bindings in the bindings array.
5836c5803,5804
<   SDL_BindGPUVertexBuffers(render_pass, first_slot, bindings);
---
>   SDL_BindGPUVertexBuffers(
>     render_pass, first_slot, bindings.data(), bindings.size());
5883,5884d5850
<  * @param num_bindings the number of texture-sampler pairs to bind from the
<  *                     array.
5895c5861,5864
<   SDL_BindGPUVertexSamplers(render_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUVertexSamplers(render_pass,
>                             first_slot,
>                             texture_sampler_bindings.data(),
>                             texture_sampler_bindings.size());
5918d5886
<  * @param num_bindings the number of storage texture to bind from the array.
5929c5897,5898
<   SDL_BindGPUVertexStorageTextures(render_pass, first_slot, storage_textures);
---
>   SDL_BindGPUVertexStorageTextures(
>     render_pass, first_slot, storage_textures.data(), storage_textures.size());
5952d5920
<  * @param num_bindings the number of buffers to bind from the array.
5963c5931,5932
<   SDL_BindGPUVertexStorageBuffers(render_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUVertexStorageBuffers(
>     render_pass, first_slot, storage_buffers.data(), storage_buffers.size());
5986,5987d5954
<  * @param num_bindings the number of texture-sampler pairs to bind from the
<  *                     array.
5998,5999c5965,5968
<   SDL_BindGPUFragmentSamplers(
<     render_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUFragmentSamplers(render_pass,
>                               first_slot,
>                               texture_sampler_bindings.data(),
>                               texture_sampler_bindings.size());
6022d5990
<  * @param num_bindings the number of storage textures to bind from the array.
6033c6001,6002
<   SDL_BindGPUFragmentStorageTextures(render_pass, first_slot, storage_textures);
---
>   SDL_BindGPUFragmentStorageTextures(
>     render_pass, first_slot, storage_textures.data(), storage_textures.size());
6056d6024
<  * @param num_bindings the number of storage buffers to bind from the array.
6067c6035,6036
<   SDL_BindGPUFragmentStorageBuffers(render_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUFragmentStorageBuffers(
>     render_pass, first_slot, storage_buffers.data(), storage_buffers.size());
6274,6275d6242
<  * @param num_storage_texture_bindings the number of storage textures to bind
<  *                                     from the array.
6278,6279d6244
<  * @param num_storage_buffer_bindings the number of storage buffers to bind
<  *                                    from the array.
6291,6292c6256,6260
<   return SDL_BeginGPUComputePass(
<     command_buffer, storage_texture_bindings, storage_buffer_bindings);
---
>   return SDL_BeginGPUComputePass(command_buffer,
>                                  storage_texture_bindings.data(),
>                                  storage_texture_bindings.size(),
>                                  storage_buffer_bindings.data(),
>                                  storage_buffer_bindings.size());
6334,6335d6301
<  * @param num_bindings the number of texture-sampler bindings to bind from the
<  *                     array.
6346,6347c6312,6315
<   SDL_BindGPUComputeSamplers(
<     compute_pass, first_slot, texture_sampler_bindings);
---
>   SDL_BindGPUComputeSamplers(compute_pass,
>                              first_slot,
>                              texture_sampler_bindings.data(),
>                              texture_sampler_bindings.size());
6370d6337
<  * @param num_bindings the number of storage textures to bind from the array.
6381c6348,6349
<   SDL_BindGPUComputeStorageTextures(compute_pass, first_slot, storage_textures);
---
>   SDL_BindGPUComputeStorageTextures(
>     compute_pass, first_slot, storage_textures.data(), storage_textures.size());
6404d6371
<  * @param num_bindings the number of storage buffers to bind from the array.
6415c6382,6383
<   SDL_BindGPUComputeStorageBuffers(compute_pass, first_slot, storage_buffers);
---
>   SDL_BindGPUComputeStorageBuffers(
>     compute_pass, first_slot, storage_buffers.data(), storage_buffers.size());
7060,7061d7027
<  * @param swapchain_texture a pointer filled in with a swapchain texture
<  *                          handle.
7065a7032
>  * @returns a swapchain texture handle.
7088,7089c7055,7061
<   return CheckError(SDL_AcquireGPUSwapchainTexture(
<     command_buffer, window, swapchain_texture_width, swapchain_texture_height));
---
>   GPUTextureRaw texture;
>   CheckError(SDL_AcquireGPUSwapchainTexture(command_buffer,
>                                             window,
>                                             &texture,
>                                             swapchain_texture_width,
>                                             swapchain_texture_height));
>   return texture;
7153,7154d7124
<  * @param swapchain_texture a pointer filled in with a swapchain texture
<  *                          handle.
7158a7129
>  * @returns a swapchain texture handle.
7176,7177c7147,7153
<   return CheckError(SDL_WaitAndAcquireGPUSwapchainTexture(
<     command_buffer, window, swapchain_texture_width, swapchain_texture_height));
---
>   GPUTextureRaw texture;
>   CheckError(SDL_WaitAndAcquireGPUSwapchainTexture(command_buffer,
>                                                    window,
>                                                    &texture,
>                                                    swapchain_texture_width,
>                                                    swapchain_texture_height));
>   return texture;
7311d7286
<  * @param num_fences the number of fences in the fences array.
7323c7298,7299
<   CheckError(SDL_WaitForGPUFences(device, wait_all, fences));
---
>   CheckError(
>     SDL_WaitForGPUFences(device, wait_all, fences.data(), fences.size()));
