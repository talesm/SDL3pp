11c11
<  * @defgroup CategoryIOStream Category IOStream
---
>  * @defgroup CategoryIOStream I/O Streams
178c178
<    *   already exists, the call fails.
---
>    *   already exists, the call fails. (Supported since SDL 3.4.0)
187c187
<    *   the same name already exists, the call fails.
---
>    *   the same name already exists, the call fails. (Supported since SDL 3.4.0)
279,282c279,281
<    * @param mem a pointer to a buffer to feed an IOStream stream.
<    * @param size the buffer size, in bytes.
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @param mem a buffer to feed an IOStream stream.
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
328,331c327,329
<    * @param mem a pointer to a read-only buffer to feed an IOStream stream.
<    * @param size the buffer size, in bytes.
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @param mem a read-only buffer to feed an IOStreamRef stream.
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
360,361c358,359
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
390c388
<    * @returns a pointer to the allocated memory on success.
---
>    * @returns a valid stream on success.
459,460c457
<    * @returns true on success or false on failure; call GetError() for more
<    *          information.
---
>    * @throws Error on failure.
548d544
<    *                current offset.
559a556,577
>   /**
>    * Read from a data source.
>    *
>    * This function reads up `size` bytes from the data source to the area
>    * pointed at by `ptr`. This function may read less bytes than requested.
>    *
>    * This function will return zero when the data stream is completely read, and
>    * IOStreamRef.GetStatus() will return IO_STATUS_EOF. If zero is returned and
>    * the stream is not at EOF, IOStreamRef.GetStatus() will return a different
>    * error value and GetError() will offer a human-readable message.
>    *
>    * @param size the number of bytes to read from the data source.
>    * @returns the bytes, or empty string on end of file or other failure;
>    *          call GetError() for more information.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa IOStream.Write
>    * @sa IOStream.GetStatus
>    */
562c580,592
<     static_assert(false, "Not implemented");
---
>     Sint64 pos = Tell();
>     auto curSize = SDL_GetIOSize(get());
>     if ((curSize < 0 || pos < 0)) {
>       if (size == size_t(-1)) return {};
>     } else if (curSize - pos <= 0) {
>       return {};
>     } else if (curSize - pos < size) {
>       size = curSize - pos;
>     }
>     std::string result(size, 0);
>     auto actualSize = Read(result);
>     if (actualSize < size) result.resize(actualSize);
>     return result;
580,581c610
<    * @param ptr a pointer to a buffer to read data into.
<    * @param size the number of bytes to read from the data source.
---
>    * @param buf a pointer to a buffer to read data into.
612,613c641
<    * @param ptr a pointer to a buffer containing data to write.
<    * @param size the number of bytes to write.
---
>    * @param buf the bytes to write to
629c657,663
<   ///@cat formatted-string
---
>   /**
>    * Prints formatted string.
>    *
>    * @param fmt a std::format like format string
>    * @param args the arguments to be formatted
>    * @cat formatted-string
>    */
632c666
<     static_assert(false, "Not implemented");
---
>     return Write(std::vformat(fmt, std::make_format_args(args...)));
635c669,675
<   ///@cat formatted-string
---
>   /**
>    * Prints formatted string.
>    *
>    * @param fmt a std::format like format string
>    * @param args the arguments to be formatted
>    * @cat formatted-string
>    */
638c678,680
<     static_assert(false, "Not implemented");
---
>     std::string result =
>       std::vformat(fmt, std::make_format_args(args...)) + "\n";
>     return Write(result);
643a686,687
>    * @warning this is not typesafe! Prefer using print() and println()
>    *
661c705,712
<     return SDL_IOprintf(m_resource, fmt, ...);
---
>     va_list ap;
>     size_t result;
> 
>     va_start(ap, fmt);
>     result = vprintf(fmt, ap);
>     va_end(ap);
> 
>     return result;
666a718,719
>    * @warning this is not typesafe! Prefer using print() and println()
>    *
705,708c758,759
<    * convenience. This extra byte is not included in the value reported via
<    * `datasize`.
<    *
<    * The data should be freed with free().
---
>    * convenience. This extra byte is not included in the value reported on
>    * the returned string.
710,715c761,762
<    * @param datasize a pointer filled in with the number of bytes read, may be
<    *                 nullptr.
<    * @param closeio if true, calls IOStream.Close() on `src` before returning,
<    * even in the case of an error.
<    * @returns the data or nullptr on failure; call GetError() for more
<    *          information.
---
>    * @returns the data in bytes
>    * @throws Error on failure.
725a773,789
>   /**
>    * Load all the data from an SDL data stream.
>    *
>    * The data is allocated with a zero byte at the end (null terminated) for
>    * convenience. This extra byte is not included in the value reported on
>    * the returned string.
>    *
>    * @returns the data in bytes
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa LoadFile
>    * @sa IOStream.SaveFile
>    */
729c793,795
<     static_assert(false, "Not implemented");
---
>     size_t datasize = 0;
>     auto data = static_cast<T*>(SDL_LoadFile_IO(get(), &datasize, false));
>     return OwnArray<T>{CheckError(data), datasize / sizeof(T)};
737,739d802
<    * @param datasize the number of bytes to be written.
<    * @param closeio if true, calls IOStream.Close() on `src` before returning,
<    * even in the case of an error.
759,760c822
<    * @param src the IOStream to read from.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
777,778c839
<    * @param src the IOStream to read from.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
799,800c860
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
821,822c881
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
843,844c902
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
865,866c923
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
887,888c944
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
909,910c965
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
931,932c986
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
953,954c1007
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
975,976c1028
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
997,998c1049
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1019,1020c1070
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1041,1042c1091
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1051c1100,1118
<   std::optional<Uint8> TryReadU8() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Use this function to read a byte from an IOStreamRef.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   std::optional<Uint8> TryReadU8()
>   {
>     if (Uint8 value; SDL_ReadU8(get(), &value)) return value;
>     return {};
>   }
1053c1120,1138
<   std::optional<Sint8> TryReadS8() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Use this function to read a byte from an IOStreamRef.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   std::optional<Sint8> TryReadS8()
>   {
>     if (Sint8 value; SDL_ReadS8(get(), &value)) return value;
>     return {};
>   }
1054a1140,1157
>   /**
>    * Use this function to read 16 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1057c1160,1161
<     static_assert(false, "Not implemented");
---
>     if (Uint16 value; SDL_ReadU16LE(get(), &value)) return value;
>     return {};
1059a1164,1181
>   /**
>    * Use this function to read 16 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1062c1184,1185
<     static_assert(false, "Not implemented");
---
>     if (Sint16 value; SDL_ReadS16LE(get(), &value)) return value;
>     return {};
1064a1188,1205
>   /**
>    * Use this function to read 16 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1067c1208,1209
<     static_assert(false, "Not implemented");
---
>     if (Uint16 value; SDL_ReadU16BE(get(), &value)) return value;
>     return {};
1069a1212,1229
>   /**
>    * Use this function to read 16 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1072c1232,1233
<     static_assert(false, "Not implemented");
---
>     if (Sint16 value; SDL_ReadS16BE(get(), &value)) return value;
>     return {};
1074a1236,1253
>   /**
>    * Use this function to read 32 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1077c1256,1257
<     static_assert(false, "Not implemented");
---
>     if (Uint32 value; SDL_ReadU32LE(get(), &value)) return value;
>     return {};
1079a1260,1277
>   /**
>    * Use this function to read 32 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1082c1280,1281
<     static_assert(false, "Not implemented");
---
>     if (Sint32 value; SDL_ReadS32LE(get(), &value)) return value;
>     return {};
1084a1284,1301
>   /**
>    * Use this function to read 32 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1087c1304,1305
<     static_assert(false, "Not implemented");
---
>     if (Uint32 value; SDL_ReadU32BE(get(), &value)) return value;
>     return {};
1089a1308,1325
>   /**
>    * Use this function to read 32 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1092c1328,1329
<     static_assert(false, "Not implemented");
---
>     if (Sint32 value; SDL_ReadS32BE(get(), &value)) return value;
>     return {};
1094a1332,1349
>   /**
>    * Use this function to read 64 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1097c1352,1353
<     static_assert(false, "Not implemented");
---
>     if (Uint64 value; SDL_ReadU64LE(get(), &value)) return value;
>     return {};
1099a1356,1373
>   /**
>    * Use this function to read 64 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1102c1376,1377
<     static_assert(false, "Not implemented");
---
>     if (Sint64 value; SDL_ReadS64LE(get(), &value)) return value;
>     return {};
1104a1380,1397
>   /**
>    * Use this function to read 64 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1107c1400,1401
<     static_assert(false, "Not implemented");
---
>     if (Uint64 value; SDL_ReadU64BE(get(), &value)) return value;
>     return {};
1109a1404,1421
>   /**
>    * Use this function to read 64 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1112c1424,1425
<     static_assert(false, "Not implemented");
---
>     if (Sint64 value; SDL_ReadS64BE(get(), &value)) return value;
>     return {};
1378c1691
<  *   already exists, the call fails.
---
>  *   already exists, the call fails. (Supported since SDL 3.4.0)
1387c1700
<  *   the same name already exists, the call fails.
---
>  *   the same name already exists, the call fails. (Supported since SDL 3.4.0)
1519,1522c1832,1834
<  * @param mem a pointer to a buffer to feed an IOStream stream.
<  * @param size the buffer size, in bytes.
<  * @returns a pointer to a new IOStream structure or nullptr on failure; call
<  *          GetError() for more information.
---
>  * @param mem a buffer to feed an IOStream stream.
>  * @returns a valid IOStream on success.
>  * @throws Error on failure.
1536c1848
< inline IOStream IOFromMem(void* mem, size_t size)
---
> inline IOStream IOFromMem(TargetBytes mem)
1538c1850
<   return IOStream(SDL_IOFromMem(mem, size));
---
>   return IOStream(CheckError(SDL_IOFromMem(mem.data(), mem.size_bytes())));
1576,1579c1888,1890
<  * @param mem a pointer to a read-only buffer to feed an IOStream stream.
<  * @param size the buffer size, in bytes.
<  * @returns a pointer to a new IOStream structure or nullptr on failure; call
<  *          GetError() for more information.
---
>  * @param mem a read-only buffer to feed an IOStreamRef stream.
>  * @returns a valid IOStream on success.
>  * @throws Error on failure.
1591c1902
< inline IOStream IOFromConstMem(const void* mem, size_t size)
---
> inline IOStream IOFromConstMem(SourceBytes mem)
1593c1904
<   return IOStream(SDL_IOFromConstMem(mem, size));
---
>   return IOStream(CheckError(SDL_IOFromConstMem(mem.data(), mem.size_bytes())));
1717c2028
<   return CheckError(SDL_GetIOProperties(context));
---
>   return {CheckError(SDL_GetIOProperties(context))};
1846,1847c2157
<  * @param ptr a pointer to a buffer to read data into.
<  * @param size the number of bytes to read from the data source.
---
>  * @param buf a pointer to a buffer to read data into.
1887,1888c2197
<  * @param ptr a pointer to a buffer containing data to write.
<  * @param size the number of bytes to write.
---
>  * @param buf a pointer to a buffer containing data to write.
1914a2224,2225
>  * @warning this is not typesafe! Prefer using print() and println()
>  *
1932c2243,2244
<                        SDL_PRINTF_FORMAT_STRING const char* fmt)
---
>                        SDL_PRINTF_FORMAT_STRING const char* fmt,
>                        ...)
1934c2246,2253
<   return SDL_IOprintf(context, fmt);
---
>   va_list ap;
>   size_t result;
> 
>   va_start(ap, fmt);
>   result = SDL_IOvprintf(context, fmt, ap);
>   va_end(ap);
> 
>   return result;
1993,1994c2312,2313
<  * convenience. This extra byte is not included in the value reported via
<  * `datasize`.
---
>  * convenience. This extra byte is not included in the value reported on
>  * the returned string.
1999,2000d2317
<  * @param datasize a pointer filled in with the number of bytes read, may be
<  *                 nullptr.
2015c2332,2334
<   return SDL_LoadFile_IO(src, closeio);
---
>   size_t datasize = 0;
>   auto data = static_cast<char*>(SDL_LoadFile_IO(src, &datasize, closeio));
>   return StringResult{CheckError(data), datasize};
2022,2025c2341,2342
<  * convenience. This extra byte is not included in the value reported via
<  * `datasize`.
<  *
<  * The data should be freed with free().
---
>  * convenience. This extra byte is not included in the value reported on
>  * the returned string.
2028,2030c2345,2346
<  * @param datasize if not nullptr, will store the number of bytes read.
<  * @returns the data or nullptr on failure; call GetError() for more
<  *          information.
---
>  * @returns the data.
>  * @throws Error on failure.
2039c2355,2360
< inline StringResult LoadFile(StringParam file) { return SDL_LoadFile(file); }
---
> inline StringResult LoadFile(StringParam file)
> {
>   size_t datasize = 0;
>   auto data = static_cast<char*>(SDL_LoadFile(file, &datasize));
>   return StringResult{CheckError(data), datasize};
> }
2041c2362,2365
< inline StringResult IOStream::LoadFile() { return SDL::LoadFile(m_resource); }
---
> inline StringResult IOStream::LoadFile()
> {
>   return SDL::LoadFile(m_resource, false);
> }
2042a2367,2384
> /**
>  * Load all the data from a file path.
>  *
>  * The data is allocated with a zero byte at the end (null terminated) for
>  * convenience. This extra byte is not included in the value reported on
>  * the returned string.
>  *
>  * @param file the path to read all available data from.
>  * @returns the data.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function is not thread safe.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa IOStream.LoadFile
>  * @sa SaveFile
>  */
2046c2388,2390
<   static_assert(false, "Not implemented");
---
>   size_t datasize = 0;
>   auto data = static_cast<T*>(SDL_LoadFile(file, &datasize));
>   return OwnArray<T>{CheckError(data), datasize / sizeof(T)};
2053,2055c2397
<  * @param data the data to be written. If datasize is 0, may be nullptr or a
<  *             invalid pointer.
<  * @param datasize the number of bytes to be written.
---
>  * @param data the data to be written.
2067c2409
< inline void SaveFile(IOStreamParam src, SourceBytes data, bool closeio = true)
---
> inline void SaveFile(IOStreamParam src, SourceBytes data, bool closeio = false)
2076,2078c2418
<  * @param data the data to be written. If datasize is 0, may be nullptr or a
<  *             invalid pointer.
<  * @param datasize the number of bytes to be written.
---
>  * @param data the data to be written.
2107c2447
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2114,2116c2454,2459
< inline Uint8 ReadU8(IOStreamParam src) { return CheckError(SDL_ReadU8(src)); }
< 
< inline Uint8 IOStream::ReadU8() { return SDL::ReadU8(m_resource); }
---
> inline Uint8 ReadU8(IOStreamParam src)
> {
>   Uint8 value;
>   CheckError(SDL_ReadU8(src, &value));
>   return value;
> }
2127c2470
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2134,2136c2477,2482
< inline Sint8 ReadS8(IOStreamParam src) { return CheckError(SDL_ReadS8(src)); }
< 
< inline Sint8 IOStream::ReadS8() { return SDL::ReadS8(m_resource); }
---
> inline Sint8 ReadS8(IOStreamParam src)
> {
>   Sint8 value;
>   CheckError(SDL_ReadS8(src, &value));
>   return value;
> }
2151c2497
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2160c2506,2508
<   return CheckError(SDL_ReadU16LE(src));
---
>   Uint16 value;
>   CheckError(SDL_ReadU16LE(src, &value));
>   return value;
2178c2526
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2187c2535,2537
<   return CheckError(SDL_ReadS16LE(src));
---
>   Sint16 value;
>   CheckError(SDL_ReadS16LE(src, &value));
>   return value;
2205c2555
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2214c2564,2566
<   return CheckError(SDL_ReadU16BE(src));
---
>   Uint16 value;
>   CheckError(SDL_ReadU16BE(src, &value));
>   return value;
2232c2584
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2241c2593,2595
<   return CheckError(SDL_ReadS16BE(src));
---
>   Sint16 value;
>   CheckError(SDL_ReadS16BE(src, &value));
>   return value;
2259c2613
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2268c2622,2624
<   return CheckError(SDL_ReadU32LE(src));
---
>   Uint32 value;
>   CheckError(SDL_ReadU32LE(src, &value));
>   return value;
2286c2642
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2295c2651,2653
<   return CheckError(SDL_ReadS32LE(src));
---
>   Sint32 value;
>   CheckError(SDL_ReadS32LE(src, &value));
>   return value;
2313c2671
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2322c2680,2682
<   return CheckError(SDL_ReadU32BE(src));
---
>   Uint32 value;
>   CheckError(SDL_ReadU32BE(src, &value));
>   return value;
2340c2700
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2349c2709,2711
<   return CheckError(SDL_ReadS32BE(src));
---
>   Sint32 value;
>   CheckError(SDL_ReadS32BE(src, &value));
>   return value;
2367c2729
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2376c2738,2740
<   return CheckError(SDL_ReadU64LE(src));
---
>   Uint64 value;
>   CheckError(SDL_ReadU64LE(src, &value));
>   return value;
2394c2758
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2403c2767,2769
<   return CheckError(SDL_ReadS64LE(src));
---
>   Sint64 value;
>   CheckError(SDL_ReadS64LE(src, &value));
>   return value;
2421c2787
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2430c2796,2798
<   return CheckError(SDL_ReadU64BE(src));
---
>   Uint64 value;
>   CheckError(SDL_ReadU64BE(src, &value));
>   return value;
2448c2816
<  * @param value a pointer filled in with the data read.
---
>  * @return the  data read.
2457c2825,2827
<   return CheckError(SDL_ReadS64BE(src));
---
>   Sint64 value;
>   CheckError(SDL_ReadS64BE(src, &value));
>   return value;
