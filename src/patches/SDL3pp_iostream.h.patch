11c11
<  * @defgroup CategoryIOStream Category IOStream
---
>  * @defgroup CategoryIOStream I/O Streams
262,265c262,264
<    * @param mem a pointer to a buffer to feed an IOStream stream.
<    * @param size the buffer size, in bytes.
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @param mem a buffer to feed an IOStream stream.
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
305,308c304,306
<    * @param mem a pointer to a read-only buffer to feed an IOStream stream.
<    * @param size the buffer size, in bytes.
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @param mem a read-only buffer to feed an IOStreamRef stream.
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
337,338c335,336
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
367c365
<    * @returns a pointer to the allocated memory on success.
---
>    * @returns a valid stream on success.
430,431c428
<    * @returns true on success or false on failure; call GetError() for more
<    *          information.
---
>    * @throws Error on failure.
519d515
<    *                current offset.
530a527,548
>   /**
>    * Read from a data source.
>    *
>    * This function reads up `size` bytes from the data source to the area
>    * pointed at by `ptr`. This function may read less bytes than requested.
>    *
>    * This function will return zero when the data stream is completely read, and
>    * IOStreamRef.GetStatus() will return IO_STATUS_EOF. If zero is returned and
>    * the stream is not at EOF, IOStreamRef.GetStatus() will return a different
>    * error value and GetError() will offer a human-readable message.
>    *
>    * @param size the number of bytes to read from the data source.
>    * @returns the bytes, or empty string on end of file or other failure;
>    *          call GetError() for more information.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa IOStream.Write
>    * @sa IOStream.GetStatus
>    */
533c551,563
<     static_assert(false, "Not implemented");
---
>     Sint64 pos = Tell();
>     auto curSize = SDL_GetIOSize(get());
>     if ((curSize < 0 || pos < 0)) {
>       if (size == size_t(-1)) return {};
>     } else if (curSize - pos <= 0) {
>       return {};
>     } else if (curSize - pos < size) {
>       size = curSize - pos;
>     }
>     std::string result(size, 0);
>     auto actualSize = Read(result);
>     if (actualSize < size) result.resize(actualSize);
>     return result;
575,576c605
<    * @param ptr a pointer to a buffer containing data to write.
<    * @param size the number of bytes to write.
---
>    * @param buf the bytes to write to
592c621,627
<   ///@cat formatted-string
---
>   /**
>    * Prints formatted string.
>    *
>    * @param fmt a std::format like format string
>    * @param args... the arguments to be formatted
>    * @cat formatted-string
>    */
595c630
<     static_assert(false, "Not implemented");
---
>     return Write(std::vformat(fmt, std::make_format_args(args...)));
598c633,639
<   ///@cat formatted-string
---
>   /**
>    * Prints formatted string.
>    *
>    * @param fmt a std::format like format string
>    * @param args... the arguments to be formatted
>    * @cat formatted-string
>    */
601c642,644
<     static_assert(false, "Not implemented");
---
>     std::string result =
>       std::vformat(fmt, std::make_format_args(args...)) + "\n";
>     return Write(result);
606a650,651
>    * @warning this is not typesafe! Prefer using print() and println()
>    *
624c669,676
<     return SDL_IOprintf(m_resource, fmt, ...);
---
>     va_list ap;
>     size_t result;
> 
>     va_start(ap, fmt);
>     result = vprintf(fmt, ap);
>     va_end(ap);
> 
>     return result;
629a682,683
>    * @warning this is not typesafe! Prefer using print() and println()
>    *
671,678c725,726
<    * The data should be freed with free().
<    *
<    * @param datasize a pointer filled in with the number of bytes read, may be
<    *                 nullptr.
<    * @param closeio if true, calls IOStream.Close() on `src` before returning,
<    * even in the case of an error.
<    * @returns the data or nullptr on failure; call GetError() for more
<    *          information.
---
>    * @returns the data in bytes
>    * @throws Error on failure.
688a737,753
>   /**
>    * Load all the data from an SDL data stream.
>    *
>    * The data is allocated with a zero byte at the end (null terminated) for
>    * convenience. This extra byte is not included in the value reported via
>    * `datasize`.
>    *
>    * @returns the data in bytes
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa LoadFile
>    * @sa IOStream.SaveFile
>    */
692c757,759
<     static_assert(false, "Not implemented");
---
>     size_t datasize = 0;
>     auto data = static_cast<T*>(SDL_LoadFile_IO(get(), &datasize, false));
>     return OwnArray<T>{CheckError(data), datasize / sizeof(T)};
700,702d766
<    * @param datasize the number of bytes to be written.
<    * @param closeio if true, calls IOStream.Close() on `src` before returning,
<    * even in the case of an error.
722,723c786
<    * @param src the IOStream to read from.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
740,741c803
<    * @param src the IOStream to read from.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
762,763c824
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
784,785c845
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
806,807c866
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
828,829c887
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
850,851c908
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
872,873c929
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
894,895c950
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
916,917c971
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
938,939c992
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
960,961c1013
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
982,983c1034
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1004,1005c1055
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1014c1064,1082
<   std::optional<Uint8> TryReadU8() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Use this function to read a byte from an IOStreamRef.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   std::optional<Uint8> TryReadU8()
>   {
>     if (Uint8 value; SDL_ReadU8(get(), &value)) return value;
>     return {};
>   }
1016c1084,1102
<   std::optional<Sint8> TryReadS8() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Use this function to read a byte from an IOStreamRef.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   std::optional<Sint8> TryReadS8()
>   {
>     if (Sint8 value; SDL_ReadS8(get(), &value)) return value;
>     return {};
>   }
1017a1104,1121
>   /**
>    * Use this function to read 16 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1020c1124,1125
<     static_assert(false, "Not implemented");
---
>     if (Uint16 value; SDL_ReadU16LE(get(), &value)) return value;
>     return {};
1022a1128,1145
>   /**
>    * Use this function to read 16 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1025c1148,1149
<     static_assert(false, "Not implemented");
---
>     if (Sint16 value; SDL_ReadS16LE(get(), &value)) return value;
>     return {};
1027a1152,1169
>   /**
>    * Use this function to read 16 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1030c1172,1173
<     static_assert(false, "Not implemented");
---
>     if (Uint16 value; SDL_ReadU16BE(get(), &value)) return value;
>     return {};
1032a1176,1193
>   /**
>    * Use this function to read 16 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1035c1196,1197
<     static_assert(false, "Not implemented");
---
>     if (Sint16 value; SDL_ReadS16BE(get(), &value)) return value;
>     return {};
1037a1200,1217
>   /**
>    * Use this function to read 32 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1040c1220,1221
<     static_assert(false, "Not implemented");
---
>     if (Uint32 value; SDL_ReadU32LE(get(), &value)) return value;
>     return {};
1042a1224,1241
>   /**
>    * Use this function to read 32 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1045c1244,1245
<     static_assert(false, "Not implemented");
---
>     if (Sint32 value; SDL_ReadS32LE(get(), &value)) return value;
>     return {};
1047a1248,1265
>   /**
>    * Use this function to read 32 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1050c1268,1269
<     static_assert(false, "Not implemented");
---
>     if (Uint32 value; SDL_ReadU32BE(get(), &value)) return value;
>     return {};
1052a1272,1289
>   /**
>    * Use this function to read 32 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1055c1292,1293
<     static_assert(false, "Not implemented");
---
>     if (Sint32 value; SDL_ReadS32BE(get(), &value)) return value;
>     return {};
1057a1296,1313
>   /**
>    * Use this function to read 64 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1060c1316,1317
<     static_assert(false, "Not implemented");
---
>     if (Uint64 value; SDL_ReadU64LE(get(), &value)) return value;
>     return {};
1062a1320,1337
>   /**
>    * Use this function to read 64 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1065c1340,1341
<     static_assert(false, "Not implemented");
---
>     if (Sint64 value; SDL_ReadS64LE(get(), &value)) return value;
>     return {};
1067a1344,1361
>   /**
>    * Use this function to read 64 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1070c1364,1365
<     static_assert(false, "Not implemented");
---
>     if (Uint64 value; SDL_ReadU64BE(get(), &value)) return value;
>     return {};
1072a1368,1385
>   /**
>    * Use this function to read 64 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1075c1388,1389
<     static_assert(false, "Not implemented");
---
>     if (Sint64 value; SDL_ReadS64BE(get(), &value)) return value;
>     return {};
1483c1797
<   return SDL::IOFromMem(mem);
---
>   return SDL::IOFromMem(mem.data, mem.size_bytes);
1532c1846
<   return SDL::IOFromConstMem(mem);
---
>   return SDL::IOFromConstMem(mem.data, mem.size_bytes);
1655c1969
<   return CheckError(SDL_GetIOProperties(context));
---
>   return {CheckError(SDL_GetIOProperties(context))};
1794c2108
<   return SDL_ReadIO(context, buf);
---
>   return SDL_ReadIO(context, buf.data, buf.size_bytes);
1799c2113
<   return SDL::ReadIO(m_resource, buf);
---
>   return SDL::ReadIO(m_resource, std::move(buf));
1834c2148
<   return SDL_WriteIO(context, buf);
---
>   return SDL_WriteIO(context, buf.data, buf.size_bytes);
1844a2159,2160
>  * @warning this is not typesafe! Prefer using print() and println()
>  *
1865c2181,2188
<   return SDL_IOprintf(context, fmt, ...);
---
>   va_list ap;
>   size_t result;
> 
>   va_start(ap, fmt);
>   result = SDL_IOvprintf(context, fmt, ap);
>   va_end(ap);
> 
>   return result;
1946c2269,2271
<   return SDL_LoadFile_IO(src);
---
>   size_t datasize = 0;
>   auto data = static_cast<char*>(SDL_LoadFile_IO(src, &datasize, false));
>   return StringResult{CheckError(data), datasize};
1961,1962d2285
<  * The data should be freed with free().
<  *
1964,1966c2287,2288
<  * @param datasize if not nullptr, will store the number of bytes read.
<  * @returns the data or nullptr on failure; call GetError() for more
<  *          information.
---
>  * @returns the data.
>  * @throws Error on failure.
1975c2297,2302
< inline StringResult LoadFile(StringParam file) { return SDL_LoadFile(file); }
---
> inline StringResult LoadFile(StringParam file)
> {
>   size_t datasize = 0;
>   auto data = static_cast<char*>(SDL_LoadFile(file, &datasize));
>   return StringResult{CheckError(data), datasize};
> }
1976a2304,2321
> /**
>  * Load all the data from a file path.
>  *
>  * The data is allocated with a zero byte at the end (null terminated) for
>  * convenience. This extra byte is not included in the value reported via
>  * `datasize`.
>  *
>  * @param file the path to read all available data from.
>  * @returns the data.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function is not thread safe.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa IOStream.LoadFile
>  * @sa SaveFile
>  */
1980c2325,2327
<   static_assert(false, "Not implemented");
---
>   size_t datasize = 0;
>   auto data = static_cast<T*>(SDL_LoadFile(file, &datasize));
>   return OwnArray<T>{CheckError(data), datasize / sizeof(T)};
2003c2350
<   CheckError(SDL_SaveFile_IO(src, data));
---
>   CheckError(SDL_SaveFile_IO(src, data.data, data.size_bytes, false));
2017d2363
<  * @param datasize the number of bytes to be written.
2029c2375
<   CheckError(SDL_SaveFile(file, data));
---
>   CheckError(SDL_SaveFile(file, data.data, data.size_bytes));
2048,2050c2394,2399
< inline Uint8 ReadU8(IOStreamParam src) { return CheckError(SDL_ReadU8(src)); }
< 
< inline Uint8 IOStream::ReadU8() { return SDL::ReadU8(m_resource); }
---
> inline Uint8 ReadU8(IOStreamParam src)
> {
>   Uint8 value;
>   CheckError(SDL_ReadU8(src, &value));
>   return value;
> }
2068,2070c2417,2422
< inline Sint8 ReadS8(IOStreamParam src) { return CheckError(SDL_ReadS8(src)); }
< 
< inline Sint8 IOStream::ReadS8() { return SDL::ReadS8(m_resource); }
---
> inline Sint8 ReadS8(IOStreamParam src)
> {
>   Sint8 value;
>   CheckError(SDL_ReadS8(src, &value));
>   return value;
> }
2094c2446,2448
<   return CheckError(SDL_ReadU16LE(src));
---
>   Uint16 value;
>   CheckError(SDL_ReadU16LE(src, &value));
>   return value;
2121c2475,2477
<   return CheckError(SDL_ReadS16LE(src));
---
>   Sint16 value;
>   CheckError(SDL_ReadS16LE(src, &value));
>   return value;
2148c2504,2506
<   return CheckError(SDL_ReadU16BE(src));
---
>   Uint16 value;
>   CheckError(SDL_ReadU16BE(src, &value));
>   return value;
2175c2533,2535
<   return CheckError(SDL_ReadS16BE(src));
---
>   Sint16 value;
>   CheckError(SDL_ReadS16BE(src, &value));
>   return value;
2202c2562,2564
<   return CheckError(SDL_ReadU32LE(src));
---
>   Uint32 value;
>   CheckError(SDL_ReadU32LE(src, &value));
>   return value;
2229c2591,2593
<   return CheckError(SDL_ReadS32LE(src));
---
>   Sint32 value;
>   CheckError(SDL_ReadS32LE(src, &value));
>   return value;
2256c2620,2622
<   return CheckError(SDL_ReadU32BE(src));
---
>   Uint32 value;
>   CheckError(SDL_ReadU32BE(src, &value));
>   return value;
2283c2649,2651
<   return CheckError(SDL_ReadS32BE(src));
---
>   Sint32 value;
>   CheckError(SDL_ReadS32BE(src, &value));
>   return value;
2310c2678,2680
<   return CheckError(SDL_ReadU64LE(src));
---
>   Uint64 value;
>   CheckError(SDL_ReadU64LE(src, &value));
>   return value;
2337c2707,2709
<   return CheckError(SDL_ReadS64LE(src));
---
>   Sint64 value;
>   CheckError(SDL_ReadS64LE(src, &value));
>   return value;
2364c2736,2738
<   return CheckError(SDL_ReadU64BE(src));
---
>   Uint64 value;
>   CheckError(SDL_ReadU64BE(src, &value));
>   return value;
2391c2765,2767
<   return CheckError(SDL_ReadS64BE(src));
---
>   Sint64 value;
>   CheckError(SDL_ReadS64BE(src, &value));
>   return value;
