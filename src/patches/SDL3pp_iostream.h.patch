11c11
<  * @defgroup CategoryIOStream Category IOStream
---
>  * @defgroup CategoryIOStream I/O Streams
253,256c253,255
<    * @param mem a pointer to a buffer to feed an IOStream stream.
<    * @param size the buffer size, in bytes.
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @param mem a buffer to feed an IOStream stream.
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
272c271
<     return IOStream(SDL_IOFromMem(mem));
---
>     return IOStream{CheckError(SDL_IOFromMem(mem.data, mem.size_bytes))};
299,302c298,300
<    * @param mem a pointer to a read-only buffer to feed an IOStream stream.
<    * @param size the buffer size, in bytes.
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @param mem a read-only buffer to feed an IOStreamRef stream.
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
316c314
<     return IOStream(SDL_IOFromConstMem(mem));
---
>     return IOStream{CheckError(SDL_IOFromConstMem(mem.data, mem.size_bytes))};
334,335c332,333
<    * @returns a pointer to a new IOStream structure or nullptr on failure; call
<    *          GetError() for more information.
---
>    * @returns a valid IOStream on success.
>    * @throws Error on failure.
347c345,348
<   static IOStream FromDynamicMem() { return IOStream(SDL_IOFromDynamicMem()); }
---
>   static IOStream FromDynamicMem()
>   {
>     return IOStream{CheckError(SDL_IOFromDynamicMem())};
>   }
364c365
<    * @returns a pointer to the allocated memory on success.
---
>    * @returns a valid stream on success.
377c378
<   static IOStream Open(const IOStreamInterface* iface, void* userdata)
---
>   static IOStream Open(const IOStreamInterface& iface, void* userdata)
379c380
<     return IOStream(CheckError(SDL_OpenIO(iface, userdata)));
---
>     return IOStream(CheckError(SDL_OpenIO(&iface, userdata)));
422,423c423
<    * @returns true on success or false on failure; call GetError() for more
<    *          information.
---
>    * @throws Error on failure.
481c481,486
<   Sint64 GetSize() const { return CheckError(SDL_GetIOSize(m_resource)); }
---
>   Sint64 GetSize() const
>   {
>     auto size = SDL_GetIOSize(get());
>     if (size < 0) throw Error{};
>     return size;
>   }
521d525
<    *                current offset.
532a537,558
>   /**
>    * Read from a data source.
>    *
>    * This function reads up `size` bytes from the data source to the area
>    * pointed at by `ptr`. This function may read less bytes than requested.
>    *
>    * This function will return zero when the data stream is completely read, and
>    * IOStreamRef.GetStatus() will return IO_STATUS_EOF. If zero is returned and
>    * the stream is not at EOF, IOStreamRef.GetStatus() will return a different
>    * error value and GetError() will offer a human-readable message.
>    *
>    * @param size the number of bytes to read from the data source.
>    * @returns the bytes, or empty string on end of file or other failure;
>    *          call GetError() for more information.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa IOStream.Write
>    * @sa IOStream.GetStatus
>    */
535c561,573
<     static_assert(false, "Not implemented");
---
>     Sint64 pos = Tell();
>     auto curSize = SDL_GetIOSize(get());
>     if ((curSize < 0 || pos < 0)) {
>       if (size == size_t(-1)) return {};
>     } else if (curSize - pos <= 0) {
>       return {};
>     } else if (curSize - pos < size) {
>       size = curSize - pos;
>     }
>     std::string result(size, 0);
>     auto actualSize = Read(result);
>     if (actualSize < size) result.resize(actualSize);
>     return result;
549,550c587
<    * @param ptr a pointer to a buffer to read data into.
<    * @param size the number of bytes to read from the data source.
---
>    * @param buf the buffer to read data into.
561c598,601
<   size_t Read(TargetBytes buf) { return SDL_ReadIO(m_resource, buf); }
---
>   size_t Read(TargetBytes buf)
>   {
>     return SDL_ReadIO(m_resource, buf.data, buf.size_bytes);
>   }
577,578c617
<    * @param ptr a pointer to a buffer containing data to write.
<    * @param size the number of bytes to write.
---
>    * @param buf the bytes to write to
592c631,634
<   size_t Write(SourceBytes buf) { return SDL_WriteIO(m_resource, buf); }
---
>   size_t Write(SourceBytes buf)
>   {
>     return SDL_WriteIO(m_resource, buf.data, buf.size_bytes);
>   }
599c641
<     static_assert(false, "Not implemented");
---
>     return Write(std::vformat(fmt, std::make_format_args(args...)));
607c649,651
<     static_assert(false, "Not implemented");
---
>     std::string result =
>       std::vformat(fmt, std::make_format_args(args...)) + "\n";
>     return Write(result);
612a657,658
>    * @warning this is not typesafe! Prefer using print() and println()
>    *
630c676,683
<     return SDL_IOprintf(m_resource, fmt, ...);
---
>     va_list ap;
>     size_t result;
> 
>     va_start(ap, fmt);
>     result = vprintf(fmt, ap);
>     va_end(ap);
> 
>     return result;
635a689,690
>    * @warning this is not typesafe! Prefer using print() and println()
>    *
680,687c735,736
<    * The data should be freed with free().
<    *
<    * @param datasize a pointer filled in with the number of bytes read, may be
<    *                 nullptr.
<    * @param closeio if true, calls IOStream.Close() on `src` before returning,
<    * even in the case of an error.
<    * @returns the data or nullptr on failure; call GetError() for more
<    *          information.
---
>    * @returns the data in bytes
>    * @throws Error on failure.
696c745,750
<   StringResult LoadFile() { return SDL_LoadFile_IO(m_resource); }
---
>   StringResult LoadFile()
>   {
>     size_t datasize = 0;
>     auto data = static_cast<char*>(SDL_LoadFile_IO(get(), &datasize, false));
>     return StringResult{CheckError(data), datasize};
>   }
697a752,768
>   /**
>    * Load all the data from an SDL data stream.
>    *
>    * The data is allocated with a zero byte at the end (null terminated) for
>    * convenience. This extra byte is not included in the value reported via
>    * `datasize`.
>    *
>    * @returns the data in bytes
>    * @throws Error on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    *
>    * @sa LoadFile
>    * @sa IOStream.SaveFile
>    */
701c772,774
<     static_assert(false, "Not implemented");
---
>     size_t datasize = 0;
>     auto data = static_cast<T*>(SDL_LoadFile_IO(get(), &datasize, false));
>     return OwnArray<T>{CheckError(data), datasize / sizeof(T)};
709,711d781
<    * @param datasize the number of bytes to be written.
<    * @param closeio if true, calls IOStream.Close() on `src` before returning,
<    * even in the case of an error.
723c793
<     CheckError(SDL_SaveFile_IO(m_resource, data));
---
>     CheckError(SDL_SaveFile_IO(m_resource, data.data, data.size_bytes, false));
734,735c804
<    * @param src the IOStream to read from.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
742c811,816
<   Uint8 ReadU8() { return CheckError(SDL_ReadU8(m_resource)); }
---
>   Uint8 ReadU8()
>   {
>     Uint8 value;
>     CheckError(SDL_ReadU8(get(), &value));
>     return value;
>   }
752,753c826
<    * @param src the IOStream to read from.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
760c833,838
<   Sint8 ReadS8() { return CheckError(SDL_ReadS8(m_resource)); }
---
>   Sint8 ReadS8()
>   {
>     Sint8 value;
>     CheckError(SDL_ReadS8(get(), &value));
>     return value;
>   }
774,775c852
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
782c859,864
<   Uint16 ReadU16LE() { return CheckError(SDL_ReadU16LE(m_resource)); }
---
>   Uint16 ReadU16LE()
>   {
>     Uint16 value;
>     CheckError(SDL_ReadU16LE(get(), &value));
>     return value;
>   }
796,797c878
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
804c885,890
<   Sint16 ReadS16LE() { return CheckError(SDL_ReadS16LE(m_resource)); }
---
>   Sint16 ReadS16LE()
>   {
>     Sint16 value;
>     CheckError(SDL_ReadS16LE(get(), &value));
>     return value;
>   }
818,819c904
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
826c911,916
<   Uint16 ReadU16BE() { return CheckError(SDL_ReadU16BE(m_resource)); }
---
>   Uint16 ReadU16BE()
>   {
>     Uint16 value;
>     CheckError(SDL_ReadU16BE(get(), &value));
>     return value;
>   }
840,841c930
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
848c937,942
<   Sint16 ReadS16BE() { return CheckError(SDL_ReadS16BE(m_resource)); }
---
>   Sint16 ReadS16BE()
>   {
>     Sint16 value;
>     CheckError(SDL_ReadS16BE(get(), &value));
>     return value;
>   }
862,863c956
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
870c963,968
<   Uint32 ReadU32LE() { return CheckError(SDL_ReadU32LE(m_resource)); }
---
>   Uint32 ReadU32LE()
>   {
>     Uint32 value;
>     CheckError(SDL_ReadU32LE(get(), &value));
>     return value;
>   }
884,885c982
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
892c989,994
<   Sint32 ReadS32LE() { return CheckError(SDL_ReadS32LE(m_resource)); }
---
>   Sint32 ReadS32LE()
>   {
>     Sint32 value;
>     CheckError(SDL_ReadS32LE(get(), &value));
>     return value;
>   }
906,907c1008
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
914c1015,1020
<   Uint32 ReadU32BE() { return CheckError(SDL_ReadU32BE(m_resource)); }
---
>   Uint32 ReadU32BE()
>   {
>     Uint32 value;
>     CheckError(SDL_ReadU32BE(get(), &value));
>     return value;
>   }
928,929c1034
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
936c1041,1046
<   Sint32 ReadS32BE() { return CheckError(SDL_ReadS32BE(m_resource)); }
---
>   Sint32 ReadS32BE()
>   {
>     Sint32 value;
>     CheckError(SDL_ReadS32BE(get(), &value));
>     return value;
>   }
950,951c1060
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
958c1067,1072
<   Uint64 ReadU64LE() { return CheckError(SDL_ReadU64LE(m_resource)); }
---
>   Uint64 ReadU64LE()
>   {
>     Uint64 value;
>     CheckError(SDL_ReadU64LE(get(), &value));
>     return value;
>   }
972,973c1086
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
980c1093,1098
<   Sint64 ReadS64LE() { return CheckError(SDL_ReadS64LE(m_resource)); }
---
>   Sint64 ReadS64LE()
>   {
>     Sint64 value;
>     CheckError(SDL_ReadS64LE(get(), &value));
>     return value;
>   }
994,995c1112
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1002c1119,1124
<   Uint64 ReadU64BE() { return CheckError(SDL_ReadU64BE(m_resource)); }
---
>   Uint64 ReadU64BE()
>   {
>     Uint64 value;
>     CheckError(SDL_ReadU64BE(get(), &value));
>     return value;
>   }
1016,1017c1138
<    * @param src the stream from which to read data.
<    * @param value a pointer filled in with the data read.
---
>    * @returns the data read on success.
1024c1145,1150
<   Sint64 ReadS64BE() { return CheckError(SDL_ReadS64BE(m_resource)); }
---
>   Sint64 ReadS64BE()
>   {
>     Sint64 value;
>     CheckError(SDL_ReadS64BE(get(), &value));
>     return value;
>   }
1026c1152,1170
<   std::optional<Uint8> TryReadU8() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Use this function to read a byte from an IOStreamRef.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   std::optional<Uint8> TryReadU8()
>   {
>     if (Uint8 value; SDL_ReadU8(get(), &value)) return value;
>     return {};
>   }
1028c1172,1190
<   std::optional<Sint8> TryReadS8() { static_assert(false, "Not implemented"); }
---
>   /**
>    * Use this function to read a byte from an IOStreamRef.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
>   std::optional<Sint8> TryReadS8()
>   {
>     if (Sint8 value; SDL_ReadS8(get(), &value)) return value;
>     return {};
>   }
1029a1192,1209
>   /**
>    * Use this function to read 16 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1032c1212,1213
<     static_assert(false, "Not implemented");
---
>     if (Uint16 value; SDL_ReadU16LE(get(), &value)) return value;
>     return {};
1034a1216,1233
>   /**
>    * Use this function to read 16 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1037c1236,1237
<     static_assert(false, "Not implemented");
---
>     if (Sint16 value; SDL_ReadS16LE(get(), &value)) return value;
>     return {};
1039a1240,1257
>   /**
>    * Use this function to read 16 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1042c1260,1261
<     static_assert(false, "Not implemented");
---
>     if (Uint16 value; SDL_ReadU16BE(get(), &value)) return value;
>     return {};
1044a1264,1281
>   /**
>    * Use this function to read 16 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1047c1284,1285
<     static_assert(false, "Not implemented");
---
>     if (Sint16 value; SDL_ReadS16BE(get(), &value)) return value;
>     return {};
1049a1288,1305
>   /**
>    * Use this function to read 32 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1052c1308,1309
<     static_assert(false, "Not implemented");
---
>     if (Uint32 value; SDL_ReadU32LE(get(), &value)) return value;
>     return {};
1054a1312,1329
>   /**
>    * Use this function to read 32 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1057c1332,1333
<     static_assert(false, "Not implemented");
---
>     if (Sint32 value; SDL_ReadS32LE(get(), &value)) return value;
>     return {};
1059a1336,1353
>   /**
>    * Use this function to read 32 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1062c1356,1357
<     static_assert(false, "Not implemented");
---
>     if (Uint32 value; SDL_ReadU32BE(get(), &value)) return value;
>     return {};
1064a1360,1377
>   /**
>    * Use this function to read 32 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1067c1380,1381
<     static_assert(false, "Not implemented");
---
>     if (Sint32 value; SDL_ReadS32BE(get(), &value)) return value;
>     return {};
1069a1384,1401
>   /**
>    * Use this function to read 64 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1072c1404,1405
<     static_assert(false, "Not implemented");
---
>     if (Uint64 value; SDL_ReadU64LE(get(), &value)) return value;
>     return {};
1074a1408,1425
>   /**
>    * Use this function to read 64 bits of little-endian data from an
>    * IOStreamRef and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1077c1428,1429
<     static_assert(false, "Not implemented");
---
>     if (Sint64 value; SDL_ReadS64LE(get(), &value)) return value;
>     return {};
1079a1432,1449
>   /**
>    * Use this function to read 64 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1082c1452,1453
<     static_assert(false, "Not implemented");
---
>     if (Uint64 value; SDL_ReadU64BE(get(), &value)) return value;
>     return {};
1084a1456,1473
>   /**
>    * Use this function to read 64 bits of big-endian data from an IOStreamRef
>    * and return in native format.
>    *
>    * SDL byteswaps the data only if necessary, so the data returned will be in
>    * the native byte order.
>    *
>    * This function will return false when the data stream is completely read,
>    * and IOStreamRef.GetStatus() will return IO_STATUS_EOF. If false is
>    * returned and the stream is not at EOF, IOStreamRef.GetStatus() will return
>    * a different error value and GetError() will offer a human-readable message.
>    *
>    * @returns the data read on success, std::nullopt on failure.
>    *
>    * @threadsafety This function is not thread safe.
>    *
>    * @since This function is available since SDL 3.2.0.
>    */
1087c1476,1477
<     static_assert(false, "Not implemented");
---
>     if (Sint64 value; SDL_ReadS64BE(get(), &value)) return value;
>     return {};
1816a2207,2208
>  * @warning this is not typesafe! Prefer using print() and println()
>  *
1837c2229,2236
<   return SDL_IOprintf(context, fmt, ...);
---
>   va_list ap;
>   size_t result;
> 
>   va_start(ap, fmt);
>   result = SDL_IOvprintf(context, fmt, ap);
>   va_end(ap);
> 
>   return result;
1920,1921d2318
<  * The data should be freed with free().
<  *
1923,1925c2320,2321
<  * @param datasize if not nullptr, will store the number of bytes read.
<  * @returns the data or nullptr on failure; call GetError() for more
<  *          information.
---
>  * @returns the data.
>  * @throws Error on failure.
1934c2330,2335
< inline StringResult LoadFile(StringParam file) { return SDL_LoadFile(file); }
---
> inline StringResult LoadFile(StringParam file)
> {
>   size_t datasize = 0;
>   auto data = static_cast<char*>(SDL_LoadFile(file, &datasize));
>   return StringResult{CheckError(data), datasize};
> }
1935a2337,2354
> /**
>  * Load all the data from a file path.
>  *
>  * The data is allocated with a zero byte at the end (null terminated) for
>  * convenience. This extra byte is not included in the value reported via
>  * `datasize`.
>  *
>  * @param file the path to read all available data from.
>  * @returns the data.
>  * @throws Error on failure.
>  *
>  * @threadsafety This function is not thread safe.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @sa IOStream.LoadFile
>  * @sa SaveFile
>  */
1939c2358,2360
<   static_assert(false, "Not implemented");
---
>   size_t datasize = 0;
>   auto data = static_cast<T*>(SDL_LoadFile(file, &datasize));
>   return OwnArray<T>{CheckError(data), datasize / sizeof(T)};
1974d2394
<  * @param datasize the number of bytes to be written.
1986c2406
<   CheckError(SDL_SaveFile(file, data));
---
>   CheckError(SDL_SaveFile(file, data.data, data.size_bytes));
2005c2425,2430
< inline Uint8 ReadU8(IOStreamParam src) { return CheckError(SDL_ReadU8(src)); }
---
> inline Uint8 ReadU8(IOStreamParam src)
> {
>   Uint8 value;
>   CheckError(SDL_ReadU8(src, &value));
>   return value;
> }
2023c2448,2453
< inline Sint8 ReadS8(IOStreamParam src) { return CheckError(SDL_ReadS8(src)); }
---
> inline Sint8 ReadS8(IOStreamParam src)
> {
>   Sint8 value;
>   CheckError(SDL_ReadS8(src, &value));
>   return value;
> }
2047c2477,2479
<   return CheckError(SDL_ReadU16LE(src));
---
>   Uint16 value;
>   CheckError(SDL_ReadU16LE(src, &value));
>   return value;
2072c2504,2506
<   return CheckError(SDL_ReadS16LE(src));
---
>   Sint16 value;
>   CheckError(SDL_ReadS16LE(src, &value));
>   return value;
2097c2531,2533
<   return CheckError(SDL_ReadU16BE(src));
---
>   Uint16 value;
>   CheckError(SDL_ReadU16BE(src, &value));
>   return value;
2122c2558,2560
<   return CheckError(SDL_ReadS16BE(src));
---
>   Sint16 value;
>   CheckError(SDL_ReadS16BE(src, &value));
>   return value;
2147c2585,2587
<   return CheckError(SDL_ReadU32LE(src));
---
>   Uint32 value;
>   CheckError(SDL_ReadU32LE(src, &value));
>   return value;
2172c2612,2614
<   return CheckError(SDL_ReadS32LE(src));
---
>   Sint32 value;
>   CheckError(SDL_ReadS32LE(src, &value));
>   return value;
2197c2639,2641
<   return CheckError(SDL_ReadU32BE(src));
---
>   Uint32 value;
>   CheckError(SDL_ReadU32BE(src, &value));
>   return value;
2222c2666,2668
<   return CheckError(SDL_ReadS32BE(src));
---
>   Sint32 value;
>   CheckError(SDL_ReadS32BE(src, &value));
>   return value;
2247c2693,2695
<   return CheckError(SDL_ReadU64LE(src));
---
>   Uint64 value;
>   CheckError(SDL_ReadU64LE(src, &value));
>   return value;
2272c2720,2722
<   return CheckError(SDL_ReadS64LE(src));
---
>   Sint64 value;
>   CheckError(SDL_ReadS64LE(src, &value));
>   return value;
2297c2747,2749
<   return CheckError(SDL_ReadU64BE(src));
---
>   Uint64 value;
>   CheckError(SDL_ReadU64BE(src, &value));
>   return value;
2322c2774,2776
<   return CheckError(SDL_ReadS64BE(src));
---
>   Sint64 value;
>   CheckError(SDL_ReadS64BE(src, &value));
>   return value;
