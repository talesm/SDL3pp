12c12
<  * @defgroup CategoryError Category Error
---
>  * @defgroup CategoryError Error Handling
22,23c22
<  * other apps to consume. These strings are set by calling
<  * SetErrorUnformatted().
---
>  * other apps to consume. These strings are set by calling SetError().
28c27
<  * ```c
---
>  * ```cpp
30,31c29
<  *    return SetErrorUnformatted("The thing broke in this specific way: %d",
<  * errcode);
---
>  *    return SDL::SetError("The thing broke in this specific way: {}", errcode);
36c34
<  * is known to call SetErrorUnformatted(), so errors simply propagate through.
---
>  * is known to call SetError(), so errors simply propagate through.
51c49
<  *     return SetErrorUnformatted("This operation has failed: %d", error_code);
---
>  *     return SDL::SetError("This operation has failed: {}", error_code);
55,57c53
<  * @param fmt a printf()-style message format string.
<  * @param ... additional parameters matching % tokens in the `fmt` string, if
<  *            any.
---
>  * @param message the error message
66c62
<  * @sa SDL_SetErrorV
---
>  * @sa SetError
70c66
<   return SDL_SetError(message);
---
>   return SDL_SetError("%s", static_cast<const char*>(message));
72a69,102
> /**
>  * Set the SDL error message for the current thread.
>  *
>  * Calling this function will replace any previous error message that was set.
>  *
>  * This function always returns false, since SDL frequently uses false to
>  * signify a failing result, leading to this idiom:
>  *
>  * ```c
>  * if (error_code) {
>  *     return SetError("This operation has failed: {}", error_code);
>  * }
>  * ```
>  *
>  * @tparam ARGS the formatting parameters
>  * @param fmt a
>  * [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
>  * style message format string
>  * @param args additional parameters matching the `{}` tokens in the format
>  * string, if any.
>  * @returns false.
>  *
>  * @threadsafety It is safe to call this function from any thread.
>  *
>  * @since This function is available since SDL 3.2.0.
>  *
>  * @cat formatted-string
>  *
>  * @sa formatted-string
>  * @sa ClearError
>  * @sa GetError
>  * @sa SetError
>  * @return false
>  */
76c106,107
<   static_assert(false, "Not implemented");
---
>   return SetError(
>     std::vformat(fmt, std::make_format_args(std::forward<ARGS>(args)...)));
129c160,164
< struct Error : std::exception
---
> /**
>  * An exception that returns GetError()
>  *
>  */
> class Error : public std::exception
131d165
< 
133a168
> public:
143c178
<    * Default ctor.
---
>    * Constructs from string
153c188
<   const char* what() const { return GetError(); }
---
>   constexpr const char* what() const noexcept { return m_message.c_str(); }
155,158c190,193
<   constexpr const std::string& str() const
<   {
<     static_assert(false, "Not implemented");
<   }
---
>   /**
>    * Returns the explanatory string.
>    */
>   constexpr const std::string& str() const noexcept { return m_message; }
160a196,203
> /**
>  * Check and throw if returned value from SDL is an error.
>  *
>  * This should be called only for things that may set SetError(). If the
>  * parameter is false it will throw Error.
>  *
>  * @param result the result returned
>  */
163c206
<   static_assert(false, "Not implemented");
---
>   if (!result) throw Error();
165a209,216
> /**
>  * Check and throw if returned value from SDL is an error.
>  *
>  * This should be called only for things that may set SetError(). If the
>  * parameter is false it will throw Error.
>  *
>  * @param result the result returned
>  */
169c220,221
<   static_assert(false, "Not implemented");
---
>   if (!result) throw Error();
>   return result;
171a224,233
> /**
>  * Check and throw if returned value from SDL is an error.
>  *
>  * This should be called only for things that may set SetError(). If the result
>  * parameter is equals to invalidValue it will throw Error.
>  *
>  * @param result       the result returned
>  * @param invalidValue the value that if equal to result indicates this is
>  *                     invalid.
>  */
175c237,238
<   static_assert(false, "Not implemented");
---
>   if (result == invalidValue) throw Error();
>   return result;
191a255,256
> #ifdef SDL3PP_DOC
> 
195c260
<  * This simply calls SetErrorUnformatted() with a standardized error string, for
---
>  * This simply calls SetError() with a standardized error string, for
207c272
<  * This simply calls SetErrorUnformatted() with a standardized error string, for
---
>  * This simply calls SetError() with a standardized error string, for
227a293,294
> 
> #endif // SDL3PP_DOC
