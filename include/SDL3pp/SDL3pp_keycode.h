#ifndef SDL3PP_KEYCODE_H_
#define SDL3PP_KEYCODE_H_

#include <SDL3/SDL_keycode.h>
#include "SDL3pp_scancode.h"
#include "SDL3pp_stdinc.h"

namespace SDL {

/**
 *
 * @defgroup CategoryKeycode Keyboard Keycodes
 *
 * Defines constants which identify keyboard keys and modifiers.
 *
 * Please refer to the Best Keyboard Practices document for details on what
 * this information means and how best to use it.
 *
 * https://wiki.libsdl.org/SDL3/BestKeyboardPractices
 *
 * @{
 */

/**
 * Valid key modifiers (possibly OR'd together).
 *
 * @since This datatype is available since SDL 3.2.0.
 */
using Keymod = SDL_Keymod;

/**
 * no modifier is applicable.
 */
constexpr Keymod KMOD_NONE = SDL_KMOD_NONE;

/**
 * the left Shift key is down.
 */
constexpr Keymod KMOD_LSHIFT = SDL_KMOD_LSHIFT;

/**
 * the right Shift key is down.
 */
constexpr Keymod KMOD_RSHIFT = SDL_KMOD_RSHIFT;

/**
 * the Level 5 Shift key is down.
 */
constexpr Keymod KMOD_LEVEL5 = SDL_KMOD_LEVEL5;

/**
 * the left Ctrl (Control) key is down.
 */
constexpr Keymod KMOD_LCTRL = SDL_KMOD_LCTRL;

/**
 * the right Ctrl (Control) key is down.
 */
constexpr Keymod KMOD_RCTRL = SDL_KMOD_RCTRL;

/**
 * the left Alt key is down.
 */
constexpr Keymod KMOD_LALT = SDL_KMOD_LALT;

/**
 * the right Alt key is down.
 */
constexpr Keymod KMOD_RALT = SDL_KMOD_RALT;

/**
 * the left GUI key (often the Windows key) is down.
 */
constexpr Keymod KMOD_LGUI = SDL_KMOD_LGUI;

/**
 * the right GUI key (often the Windows key) is down.
 */
constexpr Keymod KMOD_RGUI = SDL_KMOD_RGUI;

/**
 * the Num Lock key (may be located on an extended keypad) is down.
 */
constexpr Keymod KMOD_NUM = SDL_KMOD_NUM;

/**
 * the Caps Lock key is down.
 */
constexpr Keymod KMOD_CAPS = SDL_KMOD_CAPS;

/**
 * the !AltGr key is down.
 */
constexpr Keymod KMOD_MODE = SDL_KMOD_MODE;

/**
 * the Scroll Lock key is down.
 */
constexpr Keymod KMOD_SCROLL = SDL_KMOD_SCROLL;

/**
 * Any Ctrl key is down.
 */
constexpr Keymod KMOD_CTRL = SDL_KMOD_CTRL;

/**
 * Any Shift key is down.
 */
constexpr Keymod KMOD_SHIFT = SDL_KMOD_SHIFT;

/**
 * Any Alt key is down.
 */
constexpr Keymod KMOD_ALT = SDL_KMOD_ALT;

/**
 * Any GUI key is down.
 */
constexpr Keymod KMOD_GUI = SDL_KMOD_GUI;

/**
 * The SDL virtual key representation.
 *
 * Values of this type are used to represent keyboard keys using the current
 * layout of the keyboard. These values include Unicode values representing
 * the unmodified character that would be generated by pressing the key, or an
 * `SDLK_*` constant for those keys that do not generate characters.
 *
 * A special exception is the number keys at the top of the keyboard which map
 * to SDLK_0...SDLK_9 on AZERTY layouts.
 *
 * Keys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or
 * unicode code point.
 *
 * @since This datatype is available since SDL 3.2.0.
 */
class Keycode
{
  SDL_Keycode m_keycode;

public:
  /**
   * Wraps Keycode.
   *
   * @param keycode the value to be wrapped
   */
  constexpr Keycode(SDL_Keycode keycode = {})
    : m_keycode(keycode)
  {
  }

  constexpr auto operator<=>(const Keycode& other) const = default;

  // Convert from scancode
  explicit Keycode(Scancode scancode,
                   Keymod keymodstate = 0,
                   bool key_event = false);

  // Create from key name
  explicit Keycode(StringParam name);

  /**
   * Unwraps to the underlying Keycode.
   *
   * @returns the underlying Keycode.
   */
  constexpr operator SDL_Keycode() const { return m_keycode; }

  /**
   * Check if valid.
   *
   * @returns True if valid state, false otherwise.
   */
  constexpr explicit operator bool() const { return m_keycode != SDLK_UNKNOWN; }

  // Get name
  const char* GetName() const;

  Scancode GetScancode(Keymod* keymodstate = nullptr) const;

  /// Has Extended flag
  constexpr bool IsExtended() const { return m_keycode & SDLK_EXTENDED_MASK; }

  /// Has Scancode flag
  constexpr bool IsScancode() const { return m_keycode & SDLK_SCANCODE_MASK; }
};

constexpr Keycode KEYCODE_EXTENDED_MASK = SDLK_EXTENDED_MASK;

constexpr Keycode KEYCODE_SCANCODE_MASK = SDLK_SCANCODE_MASK;

/**
 * Transform scancode to keycode
 *
 * @param x scancode
 * @return keycode
 */
constexpr Keycode ScancodeToKeycode(Scancode x)
{
  return SDL_SCANCODE_TO_KEYCODE(x);
}

constexpr Keycode KEYCODE_UNKNOWN = SDLK_UNKNOWN; ///< 0

constexpr Keycode KEYCODE_RETURN = SDLK_RETURN; ///< '@r'

constexpr Keycode KEYCODE_ESCAPE = SDLK_ESCAPE; ///< '@x1B'

constexpr Keycode KEYCODE_BACKSPACE = SDLK_BACKSPACE; ///< '@b'

constexpr Keycode KEYCODE_TAB = SDLK_TAB; ///< '@t'

constexpr Keycode KEYCODE_SPACE = SDLK_SPACE; ///< ' '

constexpr Keycode KEYCODE_EXCLAIM = SDLK_EXCLAIM; ///< '!'

constexpr Keycode KEYCODE_DBLAPOSTROPHE = SDLK_DBLAPOSTROPHE; ///< '"'

constexpr Keycode KEYCODE_HASH = SDLK_HASH; ///< '#'

constexpr Keycode KEYCODE_DOLLAR = SDLK_DOLLAR; ///< '$'

constexpr Keycode KEYCODE_PERCENT = SDLK_PERCENT; ///< '%'

constexpr Keycode KEYCODE_AMPERSAND = SDLK_AMPERSAND; ///< '&'

constexpr Keycode KEYCODE_APOSTROPHE = SDLK_APOSTROPHE; ///< '\''

constexpr Keycode KEYCODE_LEFTPAREN = SDLK_LEFTPAREN; ///< '('

constexpr Keycode KEYCODE_RIGHTPAREN = SDLK_RIGHTPAREN; ///< ')'

constexpr Keycode KEYCODE_ASTERISK = SDLK_ASTERISK; ///< '*'

constexpr Keycode KEYCODE_PLUS = SDLK_PLUS; ///< '+'

constexpr Keycode KEYCODE_COMMA = SDLK_COMMA; ///< ','

constexpr Keycode KEYCODE_MINUS = SDLK_MINUS; ///< '-'

constexpr Keycode KEYCODE_PERIOD = SDLK_PERIOD; ///< '.'

constexpr Keycode KEYCODE_SLASH = SDLK_SLASH; ///< '/'

constexpr Keycode KEYCODE_0 = SDLK_0; ///< '0'

constexpr Keycode KEYCODE_1 = SDLK_1; ///< '1'

constexpr Keycode KEYCODE_2 = SDLK_2; ///< '2'

constexpr Keycode KEYCODE_3 = SDLK_3; ///< '3'

constexpr Keycode KEYCODE_4 = SDLK_4; ///< '4'

constexpr Keycode KEYCODE_5 = SDLK_5; ///< '5'

constexpr Keycode KEYCODE_6 = SDLK_6; ///< '6'

constexpr Keycode KEYCODE_7 = SDLK_7; ///< '7'

constexpr Keycode KEYCODE_8 = SDLK_8; ///< '8'

constexpr Keycode KEYCODE_9 = SDLK_9; ///< '9'

constexpr Keycode KEYCODE_COLON = SDLK_COLON; ///< ':'

constexpr Keycode KEYCODE_SEMICOLON = SDLK_SEMICOLON; ///< ';'

constexpr Keycode KEYCODE_LESS = SDLK_LESS; ///< '<'

constexpr Keycode KEYCODE_EQUALS = SDLK_EQUALS; ///< '='

constexpr Keycode KEYCODE_GREATER = SDLK_GREATER; ///< '>'

constexpr Keycode KEYCODE_QUESTION = SDLK_QUESTION; ///< '?'

constexpr Keycode KEYCODE_AT = SDLK_AT; ///< '@'

constexpr Keycode KEYCODE_LEFTBRACKET = SDLK_LEFTBRACKET; ///< '['

constexpr Keycode KEYCODE_BACKSLASH = SDLK_BACKSLASH; ///< '\\'

constexpr Keycode KEYCODE_RIGHTBRACKET = SDLK_RIGHTBRACKET; ///< ']'

constexpr Keycode KEYCODE_CARET = SDLK_CARET; ///< '^'

constexpr Keycode KEYCODE_UNDERSCORE = SDLK_UNDERSCORE; ///< '_'

constexpr Keycode KEYCODE_GRAVE = SDLK_GRAVE; ///< '`'

constexpr Keycode KEYCODE_A = SDLK_A; ///< 'a'

constexpr Keycode KEYCODE_B = SDLK_B; ///< 'b'

constexpr Keycode KEYCODE_C = SDLK_C; ///< 'c'

constexpr Keycode KEYCODE_D = SDLK_D; ///< 'd'

constexpr Keycode KEYCODE_E = SDLK_E; ///< 'e'

constexpr Keycode KEYCODE_F = SDLK_F; ///< 'f'

constexpr Keycode KEYCODE_G = SDLK_G; ///< 'g'

constexpr Keycode KEYCODE_H = SDLK_H; ///< 'h'

constexpr Keycode KEYCODE_I = SDLK_I; ///< 'i'

constexpr Keycode KEYCODE_J = SDLK_J; ///< 'j'

constexpr Keycode KEYCODE_K = SDLK_K; ///< 'k'

constexpr Keycode KEYCODE_L = SDLK_L; ///< 'l'

constexpr Keycode KEYCODE_M = SDLK_M; ///< 'm'

constexpr Keycode KEYCODE_N = SDLK_N; ///< 'n'

constexpr Keycode KEYCODE_O = SDLK_O; ///< 'o'

constexpr Keycode KEYCODE_P = SDLK_P; ///< 'p'

constexpr Keycode KEYCODE_Q = SDLK_Q; ///< 'q'

constexpr Keycode KEYCODE_R = SDLK_R; ///< 'r'

constexpr Keycode KEYCODE_S = SDLK_S; ///< 's'

constexpr Keycode KEYCODE_T = SDLK_T; ///< 't'

constexpr Keycode KEYCODE_U = SDLK_U; ///< 'u'

constexpr Keycode KEYCODE_V = SDLK_V; ///< 'v'

constexpr Keycode KEYCODE_W = SDLK_W; ///< 'w'

constexpr Keycode KEYCODE_X = SDLK_X; ///< 'x'

constexpr Keycode KEYCODE_Y = SDLK_Y; ///< 'y'

constexpr Keycode KEYCODE_Z = SDLK_Z; ///< 'z'

constexpr Keycode KEYCODE_LEFTBRACE = SDLK_LEFTBRACE; ///< '{'

constexpr Keycode KEYCODE_PIPE = SDLK_PIPE; ///< '|'

constexpr Keycode KEYCODE_RIGHTBRACE = SDLK_RIGHTBRACE; ///< '}'

constexpr Keycode KEYCODE_TILDE = SDLK_TILDE; ///< '~'

constexpr Keycode KEYCODE_DELETE = SDLK_DELETE; ///< '@x7F'

constexpr Keycode KEYCODE_PLUSMINUS = SDLK_PLUSMINUS; ///< '@xB1'

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CAPSLOCK)
 */
constexpr Keycode KEYCODE_CAPSLOCK = SDLK_CAPSLOCK;

constexpr Keycode KEYCODE_F1 = SDLK_F1; ///< ScancodeToKeycode(SCANCODE_F1)

constexpr Keycode KEYCODE_F2 = SDLK_F2; ///< ScancodeToKeycode(SCANCODE_F2)

constexpr Keycode KEYCODE_F3 = SDLK_F3; ///< ScancodeToKeycode(SCANCODE_F3)

constexpr Keycode KEYCODE_F4 = SDLK_F4; ///< ScancodeToKeycode(SCANCODE_F4)

constexpr Keycode KEYCODE_F5 = SDLK_F5; ///< ScancodeToKeycode(SCANCODE_F5)

constexpr Keycode KEYCODE_F6 = SDLK_F6; ///< ScancodeToKeycode(SCANCODE_F6)

constexpr Keycode KEYCODE_F7 = SDLK_F7; ///< ScancodeToKeycode(SCANCODE_F7)

constexpr Keycode KEYCODE_F8 = SDLK_F8; ///< ScancodeToKeycode(SCANCODE_F8)

constexpr Keycode KEYCODE_F9 = SDLK_F9; ///< ScancodeToKeycode(SCANCODE_F9)

constexpr Keycode KEYCODE_F10 = SDLK_F10; ///< ScancodeToKeycode(SCANCODE_F10)

constexpr Keycode KEYCODE_F11 = SDLK_F11; ///< ScancodeToKeycode(SCANCODE_F11)

constexpr Keycode KEYCODE_F12 = SDLK_F12; ///< ScancodeToKeycode(SCANCODE_F12)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PRINTSCREEN)
 */
constexpr Keycode KEYCODE_PRINTSCREEN = SDLK_PRINTSCREEN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SCROLLLOCK)
 */
constexpr Keycode KEYCODE_SCROLLLOCK = SDLK_SCROLLLOCK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PAUSE)
 */
constexpr Keycode KEYCODE_PAUSE = SDLK_PAUSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_INSERT)
 */
constexpr Keycode KEYCODE_INSERT = SDLK_INSERT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_HOME)
 */
constexpr Keycode KEYCODE_HOME = SDLK_HOME;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PAGEUP)
 */
constexpr Keycode KEYCODE_PAGEUP = SDLK_PAGEUP;

constexpr Keycode KEYCODE_END = SDLK_END; ///< ScancodeToKeycode(SCANCODE_END)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PAGEDOWN)
 */
constexpr Keycode KEYCODE_PAGEDOWN = SDLK_PAGEDOWN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RIGHT)
 */
constexpr Keycode KEYCODE_RIGHT = SDLK_RIGHT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LEFT)
 */
constexpr Keycode KEYCODE_LEFT = SDLK_LEFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_DOWN)
 */
constexpr Keycode KEYCODE_DOWN = SDLK_DOWN;

constexpr Keycode KEYCODE_UP = SDLK_UP; ///< ScancodeToKeycode(SCANCODE_UP)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_NUMLOCKCLEAR)
 */
constexpr Keycode KEYCODE_NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DIVIDE)
 */
constexpr Keycode KEYCODE_KP_DIVIDE = SDLK_KP_DIVIDE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MULTIPLY)
 */
constexpr Keycode KEYCODE_KP_MULTIPLY = SDLK_KP_MULTIPLY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MINUS)
 */
constexpr Keycode KEYCODE_KP_MINUS = SDLK_KP_MINUS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PLUS)
 */
constexpr Keycode KEYCODE_KP_PLUS = SDLK_KP_PLUS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_ENTER)
 */
constexpr Keycode KEYCODE_KP_ENTER = SDLK_KP_ENTER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_1)
 */
constexpr Keycode KEYCODE_KP_1 = SDLK_KP_1;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_2)
 */
constexpr Keycode KEYCODE_KP_2 = SDLK_KP_2;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_3)
 */
constexpr Keycode KEYCODE_KP_3 = SDLK_KP_3;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_4)
 */
constexpr Keycode KEYCODE_KP_4 = SDLK_KP_4;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_5)
 */
constexpr Keycode KEYCODE_KP_5 = SDLK_KP_5;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_6)
 */
constexpr Keycode KEYCODE_KP_6 = SDLK_KP_6;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_7)
 */
constexpr Keycode KEYCODE_KP_7 = SDLK_KP_7;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_8)
 */
constexpr Keycode KEYCODE_KP_8 = SDLK_KP_8;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_9)
 */
constexpr Keycode KEYCODE_KP_9 = SDLK_KP_9;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_0)
 */
constexpr Keycode KEYCODE_KP_0 = SDLK_KP_0;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PERIOD)
 */
constexpr Keycode KEYCODE_KP_PERIOD = SDLK_KP_PERIOD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_APPLICATION)
 */
constexpr Keycode KEYCODE_APPLICATION = SDLK_APPLICATION;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_POWER)
 */
constexpr Keycode KEYCODE_POWER = SDLK_POWER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_EQUALS)
 */
constexpr Keycode KEYCODE_KP_EQUALS = SDLK_KP_EQUALS;

constexpr Keycode KEYCODE_F13 = SDLK_F13; ///< ScancodeToKeycode(SCANCODE_F13)

constexpr Keycode KEYCODE_F14 = SDLK_F14; ///< ScancodeToKeycode(SCANCODE_F14)

constexpr Keycode KEYCODE_F15 = SDLK_F15; ///< ScancodeToKeycode(SCANCODE_F15)

constexpr Keycode KEYCODE_F16 = SDLK_F16; ///< ScancodeToKeycode(SCANCODE_F16)

constexpr Keycode KEYCODE_F17 = SDLK_F17; ///< ScancodeToKeycode(SCANCODE_F17)

constexpr Keycode KEYCODE_F18 = SDLK_F18; ///< ScancodeToKeycode(SCANCODE_F18)

constexpr Keycode KEYCODE_F19 = SDLK_F19; ///< ScancodeToKeycode(SCANCODE_F19)

constexpr Keycode KEYCODE_F20 = SDLK_F20; ///< ScancodeToKeycode(SCANCODE_F20)

constexpr Keycode KEYCODE_F21 = SDLK_F21; ///< ScancodeToKeycode(SCANCODE_F21)

constexpr Keycode KEYCODE_F22 = SDLK_F22; ///< ScancodeToKeycode(SCANCODE_F22)

constexpr Keycode KEYCODE_F23 = SDLK_F23; ///< ScancodeToKeycode(SCANCODE_F23)

constexpr Keycode KEYCODE_F24 = SDLK_F24; ///< ScancodeToKeycode(SCANCODE_F24)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_EXECUTE)
 */
constexpr Keycode KEYCODE_EXECUTE = SDLK_EXECUTE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_HELP)
 */
constexpr Keycode KEYCODE_HELP = SDLK_HELP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MENU)
 */
constexpr Keycode KEYCODE_MENU = SDLK_MENU;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SELECT)
 */
constexpr Keycode KEYCODE_SELECT = SDLK_SELECT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_STOP)
 */
constexpr Keycode KEYCODE_STOP = SDLK_STOP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AGAIN)
 */
constexpr Keycode KEYCODE_AGAIN = SDLK_AGAIN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_UNDO)
 */
constexpr Keycode KEYCODE_UNDO = SDLK_UNDO;

constexpr Keycode KEYCODE_CUT = SDLK_CUT; ///< ScancodeToKeycode(SCANCODE_CUT)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_COPY)
 */
constexpr Keycode KEYCODE_COPY = SDLK_COPY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PASTE)
 */
constexpr Keycode KEYCODE_PASTE = SDLK_PASTE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_FIND)
 */
constexpr Keycode KEYCODE_FIND = SDLK_FIND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MUTE)
 */
constexpr Keycode KEYCODE_MUTE = SDLK_MUTE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_VOLUMEUP)
 */
constexpr Keycode KEYCODE_VOLUMEUP = SDLK_VOLUMEUP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_VOLUMEDOWN)
 */
constexpr Keycode KEYCODE_VOLUMEDOWN = SDLK_VOLUMEDOWN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_COMMA)
 */
constexpr Keycode KEYCODE_KP_COMMA = SDLK_KP_COMMA;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_EQUALSAS400)
 */
constexpr Keycode KEYCODE_KP_EQUALSAS400 = SDLK_KP_EQUALSAS400;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_ALTERASE)
 */
constexpr Keycode KEYCODE_ALTERASE = SDLK_ALTERASE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SYSREQ)
 */
constexpr Keycode KEYCODE_SYSREQ = SDLK_SYSREQ;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CANCEL)
 */
constexpr Keycode KEYCODE_CANCEL = SDLK_CANCEL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CLEAR)
 */
constexpr Keycode KEYCODE_CLEAR = SDLK_CLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_PRIOR)
 */
constexpr Keycode KEYCODE_PRIOR = SDLK_PRIOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RETURN2)
 */
constexpr Keycode KEYCODE_RETURN2 = SDLK_RETURN2;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SEPARATOR)
 */
constexpr Keycode KEYCODE_SEPARATOR = SDLK_SEPARATOR;

constexpr Keycode KEYCODE_OUT = SDLK_OUT; ///< ScancodeToKeycode(SCANCODE_OUT)

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_OPER)
 */
constexpr Keycode KEYCODE_OPER = SDLK_OPER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CLEARAGAIN)
 */
constexpr Keycode KEYCODE_CLEARAGAIN = SDLK_CLEARAGAIN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CRSEL)
 */
constexpr Keycode KEYCODE_CRSEL = SDLK_CRSEL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_EXSEL)
 */
constexpr Keycode KEYCODE_EXSEL = SDLK_EXSEL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_00)
 */
constexpr Keycode KEYCODE_KP_00 = SDLK_KP_00;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_000)
 */
constexpr Keycode KEYCODE_KP_000 = SDLK_KP_000;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_THOUSANDSSEPARATOR)
 */
constexpr Keycode KEYCODE_THOUSANDSSEPARATOR = SDLK_THOUSANDSSEPARATOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_DECIMALSEPARATOR)
 */
constexpr Keycode KEYCODE_DECIMALSEPARATOR = SDLK_DECIMALSEPARATOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CURRENCYUNIT)
 */
constexpr Keycode KEYCODE_CURRENCYUNIT = SDLK_CURRENCYUNIT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CURRENCYSUBUNIT)
 */
constexpr Keycode KEYCODE_CURRENCYSUBUNIT = SDLK_CURRENCYSUBUNIT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_LEFTPAREN)
 */
constexpr Keycode KEYCODE_KP_LEFTPAREN = SDLK_KP_LEFTPAREN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_RIGHTPAREN)
 */
constexpr Keycode KEYCODE_KP_RIGHTPAREN = SDLK_KP_RIGHTPAREN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_LEFTBRACE)
 */
constexpr Keycode KEYCODE_KP_LEFTBRACE = SDLK_KP_LEFTBRACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_RIGHTBRACE)
 */
constexpr Keycode KEYCODE_KP_RIGHTBRACE = SDLK_KP_RIGHTBRACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_TAB)
 */
constexpr Keycode KEYCODE_KP_TAB = SDLK_KP_TAB;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_BACKSPACE)
 */
constexpr Keycode KEYCODE_KP_BACKSPACE = SDLK_KP_BACKSPACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_A)
 */
constexpr Keycode KEYCODE_KP_A = SDLK_KP_A;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_B)
 */
constexpr Keycode KEYCODE_KP_B = SDLK_KP_B;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_C)
 */
constexpr Keycode KEYCODE_KP_C = SDLK_KP_C;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_D)
 */
constexpr Keycode KEYCODE_KP_D = SDLK_KP_D;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_E)
 */
constexpr Keycode KEYCODE_KP_E = SDLK_KP_E;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_F)
 */
constexpr Keycode KEYCODE_KP_F = SDLK_KP_F;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_XOR)
 */
constexpr Keycode KEYCODE_KP_XOR = SDLK_KP_XOR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_POWER)
 */
constexpr Keycode KEYCODE_KP_POWER = SDLK_KP_POWER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PERCENT)
 */
constexpr Keycode KEYCODE_KP_PERCENT = SDLK_KP_PERCENT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_LESS)
 */
constexpr Keycode KEYCODE_KP_LESS = SDLK_KP_LESS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_GREATER)
 */
constexpr Keycode KEYCODE_KP_GREATER = SDLK_KP_GREATER;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_AMPERSAND)
 */
constexpr Keycode KEYCODE_KP_AMPERSAND = SDLK_KP_AMPERSAND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DBLAMPERSAND)
 */
constexpr Keycode KEYCODE_KP_DBLAMPERSAND = SDLK_KP_DBLAMPERSAND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_VERTICALBAR)
 */
constexpr Keycode KEYCODE_KP_VERTICALBAR = SDLK_KP_VERTICALBAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DBLVERTICALBAR)
 */
constexpr Keycode KEYCODE_KP_DBLVERTICALBAR = SDLK_KP_DBLVERTICALBAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_COLON)
 */
constexpr Keycode KEYCODE_KP_COLON = SDLK_KP_COLON;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_HASH)
 */
constexpr Keycode KEYCODE_KP_HASH = SDLK_KP_HASH;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_SPACE)
 */
constexpr Keycode KEYCODE_KP_SPACE = SDLK_KP_SPACE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_AT)
 */
constexpr Keycode KEYCODE_KP_AT = SDLK_KP_AT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_EXCLAM)
 */
constexpr Keycode KEYCODE_KP_EXCLAM = SDLK_KP_EXCLAM;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMSTORE)
 */
constexpr Keycode KEYCODE_KP_MEMSTORE = SDLK_KP_MEMSTORE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMRECALL)
 */
constexpr Keycode KEYCODE_KP_MEMRECALL = SDLK_KP_MEMRECALL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMCLEAR)
 */
constexpr Keycode KEYCODE_KP_MEMCLEAR = SDLK_KP_MEMCLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMADD)
 */
constexpr Keycode KEYCODE_KP_MEMADD = SDLK_KP_MEMADD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMSUBTRACT)
 */
constexpr Keycode KEYCODE_KP_MEMSUBTRACT = SDLK_KP_MEMSUBTRACT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMMULTIPLY)
 */
constexpr Keycode KEYCODE_KP_MEMMULTIPLY = SDLK_KP_MEMMULTIPLY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMDIVIDE)
 */
constexpr Keycode KEYCODE_KP_MEMDIVIDE = SDLK_KP_MEMDIVIDE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_PLUSMINUS)
 */
constexpr Keycode KEYCODE_KP_PLUSMINUS = SDLK_KP_PLUSMINUS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_CLEAR)
 */
constexpr Keycode KEYCODE_KP_CLEAR = SDLK_KP_CLEAR;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_CLEARENTRY)
 */
constexpr Keycode KEYCODE_KP_CLEARENTRY = SDLK_KP_CLEARENTRY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_BINARY)
 */
constexpr Keycode KEYCODE_KP_BINARY = SDLK_KP_BINARY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_OCTAL)
 */
constexpr Keycode KEYCODE_KP_OCTAL = SDLK_KP_OCTAL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_DECIMAL)
 */
constexpr Keycode KEYCODE_KP_DECIMAL = SDLK_KP_DECIMAL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_KP_HEXADECIMAL)
 */
constexpr Keycode KEYCODE_KP_HEXADECIMAL = SDLK_KP_HEXADECIMAL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LCTRL)
 */
constexpr Keycode KEYCODE_LCTRL = SDLK_LCTRL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LSHIFT)
 */
constexpr Keycode KEYCODE_LSHIFT = SDLK_LSHIFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LALT)
 */
constexpr Keycode KEYCODE_LALT = SDLK_LALT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_LGUI)
 */
constexpr Keycode KEYCODE_LGUI = SDLK_LGUI;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RCTRL)
 */
constexpr Keycode KEYCODE_RCTRL = SDLK_RCTRL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RSHIFT)
 */
constexpr Keycode KEYCODE_RSHIFT = SDLK_RSHIFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RALT)
 */
constexpr Keycode KEYCODE_RALT = SDLK_RALT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_RGUI)
 */
constexpr Keycode KEYCODE_RGUI = SDLK_RGUI;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MODE)
 */
constexpr Keycode KEYCODE_MODE = SDLK_MODE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SLEEP)
 */
constexpr Keycode KEYCODE_SLEEP = SDLK_SLEEP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_WAKE)
 */
constexpr Keycode KEYCODE_WAKE = SDLK_WAKE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CHANNEL_INCREMENT)
 */
constexpr Keycode KEYCODE_CHANNEL_INCREMENT = SDLK_CHANNEL_INCREMENT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CHANNEL_DECREMENT)
 */
constexpr Keycode KEYCODE_CHANNEL_DECREMENT = SDLK_CHANNEL_DECREMENT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PLAY)
 */
constexpr Keycode KEYCODE_MEDIA_PLAY = SDLK_MEDIA_PLAY;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PAUSE)
 */
constexpr Keycode KEYCODE_MEDIA_PAUSE = SDLK_MEDIA_PAUSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_RECORD)
 */
constexpr Keycode KEYCODE_MEDIA_RECORD = SDLK_MEDIA_RECORD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_FAST_FORWARD)
 */
constexpr Keycode KEYCODE_MEDIA_FAST_FORWARD = SDLK_MEDIA_FAST_FORWARD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_REWIND)
 */
constexpr Keycode KEYCODE_MEDIA_REWIND = SDLK_MEDIA_REWIND;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_NEXT_TRACK)
 */
constexpr Keycode KEYCODE_MEDIA_NEXT_TRACK = SDLK_MEDIA_NEXT_TRACK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PREVIOUS_TRACK)
 */
constexpr Keycode KEYCODE_MEDIA_PREVIOUS_TRACK = SDLK_MEDIA_PREVIOUS_TRACK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_STOP)
 */
constexpr Keycode KEYCODE_MEDIA_STOP = SDLK_MEDIA_STOP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_EJECT)
 */
constexpr Keycode KEYCODE_MEDIA_EJECT = SDLK_MEDIA_EJECT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_PLAY_PAUSE)
 */
constexpr Keycode KEYCODE_MEDIA_PLAY_PAUSE = SDLK_MEDIA_PLAY_PAUSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_MEDIA_SELECT)
 */
constexpr Keycode KEYCODE_MEDIA_SELECT = SDLK_MEDIA_SELECT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_NEW)
 */
constexpr Keycode KEYCODE_AC_NEW = SDLK_AC_NEW;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_OPEN)
 */
constexpr Keycode KEYCODE_AC_OPEN = SDLK_AC_OPEN;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_CLOSE)
 */
constexpr Keycode KEYCODE_AC_CLOSE = SDLK_AC_CLOSE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_EXIT)
 */
constexpr Keycode KEYCODE_AC_EXIT = SDLK_AC_EXIT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_SAVE)
 */
constexpr Keycode KEYCODE_AC_SAVE = SDLK_AC_SAVE;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_PRINT)
 */
constexpr Keycode KEYCODE_AC_PRINT = SDLK_AC_PRINT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_PROPERTIES)
 */
constexpr Keycode KEYCODE_AC_PROPERTIES = SDLK_AC_PROPERTIES;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_SEARCH)
 */
constexpr Keycode KEYCODE_AC_SEARCH = SDLK_AC_SEARCH;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_HOME)
 */
constexpr Keycode KEYCODE_AC_HOME = SDLK_AC_HOME;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_BACK)
 */
constexpr Keycode KEYCODE_AC_BACK = SDLK_AC_BACK;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_FORWARD)
 */
constexpr Keycode KEYCODE_AC_FORWARD = SDLK_AC_FORWARD;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_STOP)
 */
constexpr Keycode KEYCODE_AC_STOP = SDLK_AC_STOP;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_REFRESH)
 */
constexpr Keycode KEYCODE_AC_REFRESH = SDLK_AC_REFRESH;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_AC_BOOKMARKS)
 */
constexpr Keycode KEYCODE_AC_BOOKMARKS = SDLK_AC_BOOKMARKS;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SOFTLEFT)
 */
constexpr Keycode KEYCODE_SOFTLEFT = SDLK_SOFTLEFT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_SOFTRIGHT)
 */
constexpr Keycode KEYCODE_SOFTRIGHT = SDLK_SOFTRIGHT;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_CALL)
 */
constexpr Keycode KEYCODE_CALL = SDLK_CALL;

/**
 * SDL_SCANCODE_TO_KEYCODE(SCANCODE_ENDCALL)
 */
constexpr Keycode KEYCODE_ENDCALL = SDLK_ENDCALL;

constexpr Keycode KEYCODE_LEFT_TAB = SDLK_LEFT_TAB; ///< Extended key Left Tab

/**
 * Extended key Level 5 Shift
 */
constexpr Keycode KEYCODE_LEVEL5_SHIFT = SDLK_LEVEL5_SHIFT;

/**
 * Extended key Multi-key Compose
 */
constexpr Keycode KEYCODE_MULTI_KEY_COMPOSE = SDLK_MULTI_KEY_COMPOSE;

constexpr Keycode KEYCODE_LMETA = SDLK_LMETA; ///< Extended key Left Meta

constexpr Keycode KEYCODE_RMETA = SDLK_RMETA; ///< Extended key Right Meta

constexpr Keycode KEYCODE_LHYPER = SDLK_LHYPER; ///< Extended key Left Hyper

constexpr Keycode KEYCODE_RHYPER = SDLK_RHYPER; ///< Extended key Right Hyper

/// @}
} // namespace SDL

#endif /* SDL3PP_KEYCODE_H_ */
